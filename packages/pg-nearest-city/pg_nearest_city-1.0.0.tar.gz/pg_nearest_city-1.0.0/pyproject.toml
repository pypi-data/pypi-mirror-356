[project]
name = "pg-nearest-city"
version = "1.0.0"
description = "Given a geopoint, find the nearest city using PostGIS (reverse geocode)."
authors = [
    {name = "Sam Woodcock", email = "sam.woodcock@hotosm.org"},
    {name = "Emir Fabio Cognigni"}
]
readme = "README.md"
license = {text = "GPL-3.0-only"}
requires-python = ">=3.10"
keywords = ["reverse-geocode", "geocode", "reverse", "postgis", "nearest"]
classifiers = [
    "Topic :: Utilities",
    "Topic :: Scientific/Engineering :: GIS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "psycopg>=3.1",
]

[project.urls]
homepage = "https://github.com/hotosm/pg-nearest-city"
documentation = "https://hotosm.github.io/pg-nearest-city"
repository = "https://github.com/hotosm/pg-nearest-city"

[project.scripts]
build-sync = "unasync:main"

[dependency-groups]
test = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.3",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-exclude>=1.0.2",
    "mkdocs-git-revision-date-localized-plugin>=1.3.0",
    "mkdocs-material>=9.5.49",
    "mkdocstrings-python>=1.13.0",
]
dev = [
    "psutil>=6.1.1",
    "reverse-geocoder>=1.5.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["pg_nearest_city"]
include = [
    "pg_nearest_city/data/cities_1000_simple.txt",
    "pg_nearest_city/data/voronois.wkb",
]

[tool.ruff]
fix = true
line-length = 88
target-version = "py310"
exclude = [
    ".ruff_cache",
    "pg_nearest_city/__version__.py",
    # Generated files
    "pg_nearest_city/nearest_city.py",
    "tests/test_nearest_city.py",
]
[tool.ruff.lint]
# Note we do not use "I" for import sorting to avoid conflict with
# import sorting after unasync is run
select = ["E", "W", "D", "B", "F", "N", "Q"]
ignore = ["N805", "B008"]
[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = [
    "tests",
]
asyncio_mode="auto"
asyncio_default_fixture_loop_scope="function"

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
version_files = [
    "pyproject.toml:version",
    "pg_nearest_city/__version__.py",
]
changelog_file = "CHANGELOG.md"
update_changelog_on_bump = true
