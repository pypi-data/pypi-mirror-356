# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _MorphologicalContourInterpolationPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMorphologicalContourInterpolatorPython
else:
    import _itkMorphologicalContourInterpolatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkMorphologicalContourInterpolatorISS3_New():
    return itkMorphologicalContourInterpolatorISS3.New()

class itkMorphologicalContourInterpolatorISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkMorphologicalContourInterpolatorISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalContourInterpolatorISS3_Pointer"""
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalContourInterpolatorISS3_Pointer"""
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_Clone(self)

    def SetLabel(self, _arg):
        r"""
        SetLabel(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetLabel(self, _arg)

    def GetLabel(self, *args):
        r"""
        GetLabel(self) -> short
        GetLabel(self) -> short
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetLabel(self, *args)

    def SetAxis(self, _arg):
        r"""
        SetAxis(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetAxis(self, _arg)

    def GetAxis(self, *args):
        r"""
        GetAxis(self) -> int
        GetAxis(self) -> int
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetAxis(self, *args)

    def SetHeuristicAlignment(self, _arg):
        r"""
        SetHeuristicAlignment(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetHeuristicAlignment(self, _arg)

    def GetHeuristicAlignment(self, *args):
        r"""
        GetHeuristicAlignment(self) -> bool
        GetHeuristicAlignment(self) -> bool
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetHeuristicAlignment(self, *args)

    def SetUseDistanceTransform(self, _arg):
        r"""
        SetUseDistanceTransform(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetUseDistanceTransform(self, _arg)

    def GetUseDistanceTransform(self, *args):
        r"""
        GetUseDistanceTransform(self) -> bool
        GetUseDistanceTransform(self) -> bool
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetUseDistanceTransform(self, *args)

    def SetUseCustomSlicePositions(self, _arg):
        r"""
        SetUseCustomSlicePositions(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetUseCustomSlicePositions(self, _arg)

    def GetUseCustomSlicePositions(self, *args):
        r"""
        GetUseCustomSlicePositions(self) -> bool
        GetUseCustomSlicePositions(self) -> bool
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetUseCustomSlicePositions(self, *args)

    def SetUseExtrapolation(self, _arg):
        r"""
        SetUseExtrapolation(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetUseExtrapolation(self, _arg)

    def SetUseBallStructuringElement(self, useBall):
        r"""
        SetUseBallStructuringElement(self, useBall)

        Parameters
        ----------
        useBall: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetUseBallStructuringElement(self, useBall)

    def GetUseBallStructuringElement(self, *args):
        r"""
        GetUseBallStructuringElement(self) -> bool
        GetUseBallStructuringElement(self) -> bool
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetUseBallStructuringElement(self, *args)

    def DetermineSliceOrientations(self):
        r"""DetermineSliceOrientations(self)"""
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_DetermineSliceOrientations(self)

    def ClearLabeledSliceIndices(self):
        r"""ClearLabeledSliceIndices(self)"""
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_ClearLabeledSliceIndices(self)

    def SetLabeledSliceIndices(self, *args):
        r"""
        SetLabeledSliceIndices(self, axis, label, indices)

        Parameters
        ----------
        axis: unsigned int
        label: short
        indices: std::vector< long,std::allocator< long > > const &

        SetLabeledSliceIndices(self, axis, label, indices)

        Parameters
        ----------
        axis: unsigned int
        label: short
        indices: std::set< long,std::less< long >,std::allocator< long > > const &

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetLabeledSliceIndices(self, *args)

    def GetLabeledSliceIndices(self, *args):
        r"""
        GetLabeledSliceIndices(self, axis, label) -> setSL

        Parameters
        ----------
        axis: unsigned int
        label: short

        GetLabeledSliceIndices(self) -> std::vector< std::unordered_map< short,std::set< long,std::less< long >,std::allocator< long > > >,std::allocator< std::unordered_map< short,std::set< long,std::less< long >,std::allocator< long > > > > >
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetLabeledSliceIndices(self, *args)
    __swig_destroy__ = _itkMorphologicalContourInterpolatorPython.delete_itkMorphologicalContourInterpolatorISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalContourInterpolatorISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalContourInterpolatorISS3

        Create a new object of the class itkMorphologicalContourInterpolatorISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalContourInterpolatorISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalContourInterpolatorISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalContourInterpolatorISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalContourInterpolatorISS3 in _itkMorphologicalContourInterpolatorPython:
_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_swigregister(itkMorphologicalContourInterpolatorISS3)

def itkMorphologicalContourInterpolatorIUC3_New():
    return itkMorphologicalContourInterpolatorIUC3.New()

class itkMorphologicalContourInterpolatorIUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkMorphologicalContourInterpolatorIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalContourInterpolatorIUC3_Pointer"""
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalContourInterpolatorIUC3_Pointer"""
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_Clone(self)

    def SetLabel(self, _arg):
        r"""
        SetLabel(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetLabel(self, _arg)

    def GetLabel(self, *args):
        r"""
        GetLabel(self) -> unsigned char
        GetLabel(self) -> unsigned char
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetLabel(self, *args)

    def SetAxis(self, _arg):
        r"""
        SetAxis(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetAxis(self, _arg)

    def GetAxis(self, *args):
        r"""
        GetAxis(self) -> int
        GetAxis(self) -> int
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetAxis(self, *args)

    def SetHeuristicAlignment(self, _arg):
        r"""
        SetHeuristicAlignment(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetHeuristicAlignment(self, _arg)

    def GetHeuristicAlignment(self, *args):
        r"""
        GetHeuristicAlignment(self) -> bool
        GetHeuristicAlignment(self) -> bool
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetHeuristicAlignment(self, *args)

    def SetUseDistanceTransform(self, _arg):
        r"""
        SetUseDistanceTransform(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetUseDistanceTransform(self, _arg)

    def GetUseDistanceTransform(self, *args):
        r"""
        GetUseDistanceTransform(self) -> bool
        GetUseDistanceTransform(self) -> bool
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetUseDistanceTransform(self, *args)

    def SetUseCustomSlicePositions(self, _arg):
        r"""
        SetUseCustomSlicePositions(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetUseCustomSlicePositions(self, _arg)

    def GetUseCustomSlicePositions(self, *args):
        r"""
        GetUseCustomSlicePositions(self) -> bool
        GetUseCustomSlicePositions(self) -> bool
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetUseCustomSlicePositions(self, *args)

    def SetUseExtrapolation(self, _arg):
        r"""
        SetUseExtrapolation(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetUseExtrapolation(self, _arg)

    def SetUseBallStructuringElement(self, useBall):
        r"""
        SetUseBallStructuringElement(self, useBall)

        Parameters
        ----------
        useBall: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetUseBallStructuringElement(self, useBall)

    def GetUseBallStructuringElement(self, *args):
        r"""
        GetUseBallStructuringElement(self) -> bool
        GetUseBallStructuringElement(self) -> bool
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetUseBallStructuringElement(self, *args)

    def DetermineSliceOrientations(self):
        r"""DetermineSliceOrientations(self)"""
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_DetermineSliceOrientations(self)

    def ClearLabeledSliceIndices(self):
        r"""ClearLabeledSliceIndices(self)"""
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_ClearLabeledSliceIndices(self)

    def SetLabeledSliceIndices(self, *args):
        r"""
        SetLabeledSliceIndices(self, axis, label, indices)

        Parameters
        ----------
        axis: unsigned int
        label: unsigned char
        indices: std::vector< long,std::allocator< long > > const &

        SetLabeledSliceIndices(self, axis, label, indices)

        Parameters
        ----------
        axis: unsigned int
        label: unsigned char
        indices: std::set< long,std::less< long >,std::allocator< long > > const &

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetLabeledSliceIndices(self, *args)

    def GetLabeledSliceIndices(self, *args):
        r"""
        GetLabeledSliceIndices(self, axis, label) -> setSL

        Parameters
        ----------
        axis: unsigned int
        label: unsigned char

        GetLabeledSliceIndices(self) -> std::vector< std::unordered_map< unsigned char,std::set< long,std::less< long >,std::allocator< long > > >,std::allocator< std::unordered_map< unsigned char,std::set< long,std::less< long >,std::allocator< long > > > > >
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetLabeledSliceIndices(self, *args)
    __swig_destroy__ = _itkMorphologicalContourInterpolatorPython.delete_itkMorphologicalContourInterpolatorIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalContourInterpolatorIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalContourInterpolatorIUC3

        Create a new object of the class itkMorphologicalContourInterpolatorIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalContourInterpolatorIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalContourInterpolatorIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalContourInterpolatorIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalContourInterpolatorIUC3 in _itkMorphologicalContourInterpolatorPython:
_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_swigregister(itkMorphologicalContourInterpolatorIUC3)

def itkMorphologicalContourInterpolatorIUS3_New():
    return itkMorphologicalContourInterpolatorIUS3.New()

class itkMorphologicalContourInterpolatorIUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkMorphologicalContourInterpolatorIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalContourInterpolatorIUS3_Pointer"""
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalContourInterpolatorIUS3_Pointer"""
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_Clone(self)

    def SetLabel(self, _arg):
        r"""
        SetLabel(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetLabel(self, _arg)

    def GetLabel(self, *args):
        r"""
        GetLabel(self) -> unsigned short
        GetLabel(self) -> unsigned short
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetLabel(self, *args)

    def SetAxis(self, _arg):
        r"""
        SetAxis(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetAxis(self, _arg)

    def GetAxis(self, *args):
        r"""
        GetAxis(self) -> int
        GetAxis(self) -> int
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetAxis(self, *args)

    def SetHeuristicAlignment(self, _arg):
        r"""
        SetHeuristicAlignment(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetHeuristicAlignment(self, _arg)

    def GetHeuristicAlignment(self, *args):
        r"""
        GetHeuristicAlignment(self) -> bool
        GetHeuristicAlignment(self) -> bool
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetHeuristicAlignment(self, *args)

    def SetUseDistanceTransform(self, _arg):
        r"""
        SetUseDistanceTransform(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetUseDistanceTransform(self, _arg)

    def GetUseDistanceTransform(self, *args):
        r"""
        GetUseDistanceTransform(self) -> bool
        GetUseDistanceTransform(self) -> bool
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetUseDistanceTransform(self, *args)

    def SetUseCustomSlicePositions(self, _arg):
        r"""
        SetUseCustomSlicePositions(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetUseCustomSlicePositions(self, _arg)

    def GetUseCustomSlicePositions(self, *args):
        r"""
        GetUseCustomSlicePositions(self) -> bool
        GetUseCustomSlicePositions(self) -> bool
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetUseCustomSlicePositions(self, *args)

    def SetUseExtrapolation(self, _arg):
        r"""
        SetUseExtrapolation(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetUseExtrapolation(self, _arg)

    def SetUseBallStructuringElement(self, useBall):
        r"""
        SetUseBallStructuringElement(self, useBall)

        Parameters
        ----------
        useBall: bool

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetUseBallStructuringElement(self, useBall)

    def GetUseBallStructuringElement(self, *args):
        r"""
        GetUseBallStructuringElement(self) -> bool
        GetUseBallStructuringElement(self) -> bool
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetUseBallStructuringElement(self, *args)

    def DetermineSliceOrientations(self):
        r"""DetermineSliceOrientations(self)"""
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_DetermineSliceOrientations(self)

    def ClearLabeledSliceIndices(self):
        r"""ClearLabeledSliceIndices(self)"""
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_ClearLabeledSliceIndices(self)

    def SetLabeledSliceIndices(self, *args):
        r"""
        SetLabeledSliceIndices(self, axis, label, indices)

        Parameters
        ----------
        axis: unsigned int
        label: unsigned short
        indices: std::vector< long,std::allocator< long > > const &

        SetLabeledSliceIndices(self, axis, label, indices)

        Parameters
        ----------
        axis: unsigned int
        label: unsigned short
        indices: std::set< long,std::less< long >,std::allocator< long > > const &

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetLabeledSliceIndices(self, *args)

    def GetLabeledSliceIndices(self, *args):
        r"""
        GetLabeledSliceIndices(self, axis, label) -> setSL

        Parameters
        ----------
        axis: unsigned int
        label: unsigned short

        GetLabeledSliceIndices(self) -> std::vector< std::unordered_map< unsigned short,std::set< long,std::less< long >,std::allocator< long > > >,std::allocator< std::unordered_map< unsigned short,std::set< long,std::less< long >,std::allocator< long > > > > >
        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetLabeledSliceIndices(self, *args)
    __swig_destroy__ = _itkMorphologicalContourInterpolatorPython.delete_itkMorphologicalContourInterpolatorIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalContourInterpolatorIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalContourInterpolatorIUS3

        Create a new object of the class itkMorphologicalContourInterpolatorIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalContourInterpolatorIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalContourInterpolatorIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalContourInterpolatorIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalContourInterpolatorIUS3 in _itkMorphologicalContourInterpolatorPython:
_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_swigregister(itkMorphologicalContourInterpolatorIUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def morphological_contour_interpolator(*args: itkt.ImageLike,  label: int=..., axis: int=..., heuristic_alignment: bool=..., use_distance_transform: bool=..., use_custom_slice_positions: bool=..., use_extrapolation: bool=..., use_ball_structuring_element: bool=..., labeled_slice_indices: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for MorphologicalContourInterpolator"""
    import itk

    kwarg_typehints = { 'label':label,'axis':axis,'heuristic_alignment':heuristic_alignment,'use_distance_transform':use_distance_transform,'use_custom_slice_positions':use_custom_slice_positions,'use_extrapolation':use_extrapolation,'use_ball_structuring_element':use_ball_structuring_element,'labeled_slice_indices':labeled_slice_indices }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MorphologicalContourInterpolator.New(*args, **kwargs)

    return instance.__internal_call__()

def morphological_contour_interpolator_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.MorphologicalContourInterpolation.MorphologicalContourInterpolator
    morphological_contour_interpolator.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    morphological_contour_interpolator.__doc__ = filter_object.__doc__



