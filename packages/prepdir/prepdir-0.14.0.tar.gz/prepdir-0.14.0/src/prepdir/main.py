#!/usr/bin/env python3
"""
prepdir - Utility to traverse directories and prepare file contents for review

This tool walks through directories printing relative paths and file contents,
making it easy to share code and project structures with AI assistants for
review, analysis, and improvement suggestions.
"""

import argparse
import sys
import logging
import os
from .core import run, init_config, __version__

logger = logging.getLogger(__name__)


# src/prepdir/main.py
def configure_logging(level=None):
    """
    Configure logging for prepdir, respecting LOGLEVEL environment variable.
    """
    if hasattr(configure_logging, "configured"):
        logger.debug("Logging already configured, skipping setup.")
        return

    log_level = level or os.getenv("LOGLEVEL", "INFO").upper()
    log_level_map = {
        "DEBUG": logging.DEBUG,
        "INFO": logging.INFO,
        "WARNING": logging.WARNING,
        "ERROR": logging.ERROR,
        "CRITICAL": logging.CRITICAL,
    }
    level_value = log_level_map.get(log_level, logging.INFO)

    # Configure prepdir logger only
    prepdir_logger = logging.getLogger("prepdir")
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
    prepdir_logger.addHandler(handler)
    prepdir_logger.setLevel(level_value)

    if level_value != log_level_map.get("INFO"):
        logger.info(f"Set logging level to {log_level}")

    configure_logging.configured = True


def main():
    configure_logging()

    parser = argparse.ArgumentParser(
        prog="prepdir", description="Traverse directory and prepare file contents for review."
    )
    parser.add_argument("directory", nargs="?", default=".", help="Directory to traverse (default: current directory)")
    parser.add_argument(
        "-e", "--extensions", nargs="+", help='Filter files by extension(s) (without dot, e.g., "py txt")'
    )
    parser.add_argument(
        "-o", "--output", default="prepped_dir.txt", help="Output file for results (default: prepped_dir.txt)"
    )
    parser.add_argument(
        "--all", action="store_true", help="Include all files and directories, ignoring exclusions in config.yaml"
    )
    parser.add_argument("--config", help="Path to custom configuration YAML file")
    parser.add_argument(
        "-v", "--verbose", action="store_true", help="Print verbose output about skipped files and directories"
    )
    parser.add_argument(
        "--init", action="store_true", help="Initialize a local .prepdir/config.yaml with default configuration"
    )
    parser.add_argument(
        "--force", action="store_true", help="Force overwrite of existing config file when using --init"
    )
    parser.add_argument(
        "--include-prepdir-files",
        action="store_true",
        help="Include files previously generated by prepdir (excluded by default)",
    )
    parser.add_argument(
        "--no-scrub-uuids",
        action="store_true",
        help="Disable scrubbing of UUIDs in file contents (default: per config)",
    )
    parser.add_argument(
        "--no-scrub-hyphenless-uuids",
        action="store_true",
        help="Disable scrubbing of hyphenless UUIDs in file contents (default: per config)",
    )
    parser.add_argument("--replacement-uuid", help="Custom UUID to replace detected UUIDs with (default: per config)")
    parser.add_argument(
        "--version", action="version", version=f"%(prog)s {__version__}", help="Show the version number and exit"
    )

    args = parser.parse_args()

    # Handle --init
    if args.init:
        try:
            init_config(args.config or ".prepdir/config.yaml", args.force)
        except SystemExit as e:
            sys.exit(e.code)

    # Run prepdir programmatically
    try:
        print(f"Preparing files from {args.directory} in '{args.output}'")
        run(
            directory=args.directory,
            extensions=args.extensions,
            output_file=args.output,
            include_all=args.all,
            config_path=args.config,
            verbose=args.verbose,
            include_prepdir_files=args.include_prepdir_files,
            scrub_uuids=None if not args.no_scrub_uuids else False,
            scrub_hyphenless_uuids=None if not args.no_scrub_hyphenless_uuids else False,
            replacement_uuid=args.replacement_uuid,
        )
        print("Finished.")
    except ValueError as e:
        print(f"Error: {str(e)}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
