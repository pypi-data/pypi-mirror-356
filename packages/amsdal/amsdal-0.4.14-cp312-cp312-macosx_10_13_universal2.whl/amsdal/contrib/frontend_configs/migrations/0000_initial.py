from amsdal_models.migration import migrations
from amsdal_utils.models.enums import ModuleType


class Migration(migrations.Migration):
    operations: list[migrations.Operation] = [
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name='FrontendConfigSkipNoneBase',
            new_schema={
                'title': 'FrontendConfigSkipNoneBase',
                'properties': {},
                'meta_class': 'TypeMeta',
                'custom_code': "from typing import Any\n\n\ndef model_dump(self, **kwargs: Any) -> dict[str, Any]:  # type: ignore[no-untyped-def]  # noqa: ARG001\n    kwargs['exclude_none'] = True\n\n    return super().model_dump(**kwargs)  # type: ignore[misc]\n\n\ndef model_dump_json(self, **kwargs: Any) -> str:  # type: ignore[no-untyped-def]  # noqa: ARG001\n    kwargs['exclude_none'] = True\n\n    return super().model_dump_json(**kwargs)  # type: ignore[misc]",
            },
        ),
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name='FrontendConfigGroupValidator',
            new_schema={
                'title': 'FrontendConfigGroupValidator',
                'type': 'FrontendConfigSkipNoneBase',
                'properties': {
                    'mainControl': {'type': 'string', 'title': 'Main Control'},
                    'dependentControls': {'type': 'array', 'items': {'type': 'string'}, 'title': 'Dependent Controls'},
                    'condition': {
                        'type': 'string',
                        'title': 'Condition',
                        'options': [
                            {'key': 'Less Than', 'value': 'lt'},
                            {'key': 'Less Than or Equal', 'value': 'lte'},
                            {'key': 'Greater Than', 'value': 'gt'},
                            {'key': 'Greater Than or Equal', 'value': 'gte'},
                            {'key': 'Equal', 'value': 'eq'},
                            {'key': 'Not Equal', 'value': 'neq'},
                            {'key': 'Exist', 'value': 'exist'},
                        ],
                    },
                },
                'meta_class': 'TypeMeta',
            },
        ),
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name='FrontendActivatorConfig',
            new_schema={
                'title': 'FrontendActivatorConfig',
                'type': 'FrontendConfigGroupValidator',
                'properties': {'value': {'type': 'anything', 'title': 'Value'}},
                'meta_class': 'TypeMeta',
            },
        ),
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name='FrontendConfigTextMask',
            new_schema={
                'title': 'FrontendConfigTextMask',
                'type': 'FrontendConfigSkipNoneBase',
                'required': ['mask_string'],
                'properties': {
                    'mask_string': {'type': 'string', 'title': 'Mask String'},
                    'prefix': {'type': 'string', 'title': 'Prefix'},
                    'suffix': {'type': 'string', 'title': 'Suffix'},
                    'thousands_separator': {'type': 'string', 'title': 'Thousands Separator'},
                },
                'meta_class': 'TypeMeta',
            },
        ),
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name='FrontendConfigSliderOption',
            new_schema={
                'title': 'FrontendConfigSliderOption',
                'type': 'FrontendConfigSkipNoneBase',
                'properties': {
                    'min': {'type': 'number', 'title': 'Minimum'},
                    'max': {'type': 'number', 'title': 'Maximum'},
                    'range': {'type': 'boolean', 'title': 'Range'},
                },
                'meta_class': 'TypeMeta',
            },
        ),
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name='FrontendConfigValidator',
            new_schema={
                'title': 'FrontendConfigValidator',
                'type': 'FrontendConfigGroupValidator',
                'properties': {
                    'function': {
                        'type': 'string',
                        'title': 'Function',
                        'options': [
                            {'key': 'Minimum', 'value': 'min'},
                            {'key': 'Maximum', 'value': 'max'},
                            {'key': 'Minimum Length', 'value': 'minLength'},
                            {'key': 'Maximum Length', 'value': 'maxLength'},
                            {'key': 'Required', 'value': 'required'},
                            {'key': 'Pattern', 'value': 'pattern'},
                        ],
                    },
                    'value': {'type': 'string', 'title': 'Value'},
                },
                'meta_class': 'TypeMeta',
            },
        ),
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name='FrontendConfigAsyncValidator',
            new_schema={
                'title': 'FrontendConfigAsyncValidator',
                'type': 'FrontendConfigSkipNoneBase',
                'properties': {'endpoint': {'type': 'string', 'title': 'Endpoint'}},
                'meta_class': 'TypeMeta',
            },
        ),
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name='FrontendConfigControlAction',
            new_schema={
                'title': 'FrontendConfigControlAction',
                'type': 'FrontendConfigSkipNoneBase',
                'required': ['action', 'text', 'type'],
                'properties': {
                    'action': {'type': 'string', 'title': 'Action'},
                    'text': {'type': 'string', 'title': 'Text'},
                    'type': {
                        'type': 'string',
                        'title': 'Type',
                        'options': [
                            {'key': 'Arrow Next', 'value': 'arrow-next'},
                            {'key': 'Arrow Prev', 'value': 'arrow-prev'},
                            {'key': 'Action Button', 'value': 'action-button'},
                            {'key': 'Text Next', 'value': 'text-next'},
                            {'key': 'Text Prev', 'value': 'text-prev'},
                        ],
                    },
                    'dataLayerEvent': {'type': 'string', 'title': 'Data Layer Event'},
                    'activator': {'type': 'string', 'title': 'Activator'},
                    'icon': {'type': 'string', 'title': 'Icon'},
                },
                'meta_class': 'TypeMeta',
                'custom_code': "from pydantic import field_validator\n\n\n@field_validator('action', mode='after')  # type: ignore[misc]\n@classmethod\ndef validate_action(cls, v: str) -> str:  # type: ignore[no-untyped-def] # noqa: ARG001\n    if not v.startswith('navigate::') and v not in [\n        'goPrev',\n        'goNext',\n        'goNextWithSubmit',\n        'submit',\n        'submitWithDataLayer',\n    ]:\n        msg = 'Action must be one of: goPrev, goNext, goNextWithSubmit, submit, submitWithDataLayer, navigate::{string}'\n        raise ValueError(msg)\n\n    return v",
            },
        ),
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name='FrontendConfigOption',
            new_schema={
                'title': 'FrontendConfigOption',
                'type': 'FrontendConfigSkipNoneBase',
                'properties': {
                    'label': {'type': 'string', 'title': 'Label'},
                    'value': {'type': 'string', 'title': 'Value'},
                },
                'meta_class': 'TypeMeta',
            },
        ),
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name='FrontendControlConfig',
            new_schema={
                'title': 'FrontendControlConfig',
                'type': 'FrontendConfigSkipNoneBase',
                'required': ['type', 'name'],
                'properties': {
                    'type': {
                        'type': 'string',
                        'title': 'Type',
                        'options': [
                            {'key': 'Infoscreen', 'value': 'infoscreen'},
                            {'key': 'Info Group', 'value': 'info-group'},
                            {'key': 'Text', 'value': 'text'},
                            {'key': 'Number', 'value': 'number'},
                            {'key': 'Select', 'value': 'select'},
                            {'key': 'Object Group', 'value': 'object_group'},
                            {'key': 'Group', 'value': 'group'},
                            {'key': 'Group Toggle', 'value': 'group_toggle'},
                            {'key': 'Group Switch', 'value': 'group_switch'},
                            {'key': 'Password', 'value': 'password'},
                            {'key': 'Email', 'value': 'email'},
                            {'key': 'Phone', 'value': 'phone'},
                            {'key': 'textarea', 'value': 'textarea'},
                            {'key': 'Multiselect', 'value': 'multiselect'},
                            {'key': 'number_initial', 'value': 'number_initial'},
                            {'key': 'number_plus', 'value': 'number_plus'},
                            {'key': 'number_minus', 'value': 'number_minus'},
                            {'key': 'number_equals', 'value': 'number_equals'},
                            {'key': 'toggle', 'value': 'toggle'},
                            {'key': 'radio', 'value': 'radio'},
                            {'key': 'checkbox', 'value': 'checkbox'},
                            {'key': 'number-slider', 'value': 'number-slider'},
                            {'key': 'number-operations', 'value': 'number-operations'},
                            {'key': 'date', 'value': 'date'},
                            {'key': 'dateTriplet', 'value': 'dateTriplet'},
                            {'key': 'array', 'value': 'array'},
                            {'key': 'object', 'value': 'object'},
                            {'key': 'file', 'value': 'file'},
                            {'key': 'dropzone', 'value': 'dropzone'},
                            {'key': 'object_latest', 'value': 'object_latest'},
                            {'key': 'Dictionary', 'value': 'dict'},
                            {'key': 'Time', 'value': 'time'},
                            {'key': 'Datetime', 'value': 'datetime'},
                            {'key': 'Bytes', 'value': 'Bytes'},
                        ],
                    },
                    'name': {'type': 'string', 'title': 'Name'},
                    'label': {'type': 'string', 'title': 'Label'},
                    'required': {'type': 'boolean', 'title': 'Required'},
                    'hideLabel': {'type': 'boolean', 'title': 'Hide Label'},
                    'actions': {'type': 'array', 'items': {'type': 'FrontendConfigControlAction'}, 'title': 'Actions'},
                    'validators': {
                        'type': 'array',
                        'items': {'type': 'FrontendConfigValidator'},
                        'title': 'Validators',
                    },
                    'asyncValidators': {
                        'type': 'array',
                        'items': {'type': 'FrontendConfigAsyncValidator'},
                        'title': 'Async Validators',
                    },
                    'activators': {
                        'type': 'array',
                        'items': {'type': 'FrontendActivatorConfig'},
                        'title': 'Activators',
                    },
                    'additionalText': {'type': 'string', 'title': 'Additional Text'},
                    'value': {'type': 'anything', 'title': 'Value'},
                    'placeholder': {'type': 'string', 'title': 'Placeholder'},
                    'options': {'type': 'array', 'items': {'type': 'FrontendConfigOption'}, 'title': 'Options'},
                    'mask': {'type': 'FrontendConfigTextMask', 'title': 'Mask'},
                    'controls': {'type': 'array', 'items': {'type': 'FrontendControlConfig'}, 'title': 'Controls'},
                    'showSearch': {'type': 'boolean', 'title': 'Show Search'},
                    'sliderOptions': {'type': 'FrontendConfigSliderOption', 'title': 'Slider Option'},
                    'customLabel': {'type': 'array', 'items': {'type': 'string'}, 'title': 'Custom Label'},
                    'control': {'type': 'FrontendControlConfig', 'title': 'Control'},
                    'entityType': {'type': 'string', 'title': 'Entity Type'},
                },
                'meta_class': 'TypeMeta',
            },
        ),
        migrations.CreateClass(
            module_type=ModuleType.CONTRIB,
            class_name='FrontendModelConfig',
            new_schema={
                'title': 'FrontendModelConfig',
                'required': ['class_name'],
                'properties': {
                    'class_name': {'type': 'string', 'title': 'Class Name'},
                    'control': {'type': 'FrontendControlConfig', 'title': 'Control'},
                },
                "primary_key": ["partition_key"],
                "table_name": "FrontendModelConfig",
            },
        ),
    ]
