from __future__ import annotations
import openassetio._openassetio
import openassetio._openassetio.hostApi
import openassetio._openassetio.log
import openassetio._openassetio.managerApi
import openassetio._openassetio.trait
import openassetio._openassetio.ui.access
import openassetio._openassetio.ui.managerApi
import typing
__all__ = ['UIDelegate', 'UIDelegateFactory', 'UIDelegateImplementationFactoryInterface', 'UIDelegateRequestInterface', 'UIDelegateState']
class UIDelegate:
    def __init__(self, uiDelegateInterface: openassetio._openassetio.ui.managerApi.UIDelegateInterface, hostSession: openassetio._openassetio.managerApi.HostSession) -> None:
        ...
    def close(self) -> None:
        ...
    def displayName(self) -> str:
        ...
    def identifier(self) -> str:
        ...
    def info(self) -> dict[str, bool | int | float | str]:
        ...
    def initialize(self, uiDelegateSettings: dict[str, bool | int | float | str]) -> None:
        ...
    def populateUI(self, uiTraitsData: openassetio._openassetio.trait.TraitsData, uiAccess: openassetio._openassetio.ui.access.UIAccess, uiRequestInterface: UIDelegateRequestInterface, context: openassetio._openassetio.Context) -> UIDelegateState | None:
        ...
    def settings(self) -> dict[str, bool | int | float | str]:
        ...
    def uiPolicy(self, uiTraitSet: set[str], uiAccess: openassetio._openassetio.ui.access.UIAccess, context: openassetio._openassetio.Context) -> openassetio._openassetio.trait.TraitsData:
        ...
class UIDelegateFactory:
    class UIDelegateDetail:
        __hash__: typing.ClassVar[None] = None
        displayName: str
        identifier: str
        info: dict[str, bool | int | float | str]
        def __eq__(self, arg0: UIDelegateFactory.UIDelegateDetail) -> bool:
            ...
        def __init__(self, identifier: str, displayName: str, info: dict[str, bool | int | float | str]) -> None:
            ...
    kDefaultUIDelegateConfigEnvVarName: typing.ClassVar[str] = 'OPENASSETIO_DEFAULT_CONFIG'
    @staticmethod
    def createUIDelegateForInterface(identifier: str, hostInterface: openassetio._openassetio.hostApi.HostInterface, uiDelegateImplementationFactory: UIDelegateImplementationFactoryInterface, logger: openassetio._openassetio.log.LoggerInterface) -> UIDelegate:
        ...
    @staticmethod
    @typing.overload
    def defaultUIDelegateForInterface(configPath: str, hostInterface: openassetio._openassetio.hostApi.HostInterface, uiDelegateImplementationFactory: UIDelegateImplementationFactoryInterface, logger: openassetio._openassetio.log.LoggerInterface) -> UIDelegate:
        ...
    @staticmethod
    @typing.overload
    def defaultUIDelegateForInterface(hostInterface: openassetio._openassetio.hostApi.HostInterface, uiDelegateImplementationFactory: UIDelegateImplementationFactoryInterface, logger: openassetio._openassetio.log.LoggerInterface) -> UIDelegate:
        ...
    def __init__(self, hostInterface: openassetio._openassetio.hostApi.HostInterface, managerImplementationFactory: UIDelegateImplementationFactoryInterface, logger: openassetio._openassetio.log.LoggerInterface) -> None:
        ...
    def availableUIDelegates(self) -> dict[str, UIDelegateFactory.UIDelegateDetail]:
        ...
    def createUIDelegate(self, identifier: str) -> UIDelegate:
        ...
    def identifiers(self) -> list[str]:
        ...
class UIDelegateImplementationFactoryInterface:
    def __init__(self, logger: openassetio._openassetio.log.LoggerInterface) -> None:
        ...
    def identifiers(self) -> list[str]:
        ...
    def instantiate(self, identifier: str) -> openassetio._openassetio.ui.managerApi.UIDelegateInterface:
        ...
    @property
    def _logger(self) -> openassetio._openassetio.log.LoggerInterface:
        ...
class UIDelegateRequestInterface:
    def __init__(self) -> None:
        ...
    def entityReferences(self) -> list[openassetio._openassetio.EntityReference]:
        ...
    def entityTraitsDatas(self) -> list[openassetio._openassetio.trait.TraitsData]:
        ...
    def nativeData(self) -> typing.Any:
        ...
    def stateChangedCallback(self) -> typing.Callable[[UIDelegateState], None] | None:
        ...
class UIDelegateState:
    def __init__(self, uiDelegateStateInterface: openassetio._openassetio.ui.managerApi.UIDelegateStateInterface) -> None:
        ...
    def entityReferences(self) -> list[openassetio._openassetio.EntityReference]:
        ...
    def entityTraitsDatas(self) -> list[openassetio._openassetio.trait.TraitsData]:
        ...
    def nativeData(self) -> typing.Any:
        ...
    def updateRequestCallback(self) -> typing.Callable[[UIDelegateRequestInterface | None], None] | None:
        ...
