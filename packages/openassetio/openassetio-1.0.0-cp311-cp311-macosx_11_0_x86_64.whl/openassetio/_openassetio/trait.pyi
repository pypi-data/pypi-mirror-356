from __future__ import annotations
import typing
__all__ = ['TraitsData']
class TraitsData:
    __hash__: typing.ClassVar[None] = None
    def __eq__(self, arg0: TraitsData) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, traitSet: set[str]) -> None:
        ...
    @typing.overload
    def __init__(self, other: TraitsData) -> None:
        ...
    def __repr__(self) -> str:
        ...
    def __str__(self) -> str:
        ...
    def addTrait(self, traitId: str) -> None:
        ...
    def addTraits(self, traitSet: set[str]) -> None:
        ...
    def getTraitProperty(self, traitId: str, propertyKey: str) -> bool | int | float | str | None:
        ...
    def hasTrait(self, traitId: str) -> bool:
        ...
    def setTraitProperty(self, traitId: str, propertyKey: str, propertyValue: bool | int | float | str) -> None:
        ...
    def traitPropertyKeys(self, traitId: str) -> set[str]:
        ...
    def traitSet(self) -> set[str]:
        ...
