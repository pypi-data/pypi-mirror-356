from __future__ import annotations
import typing
__all__ = ['FileUrlPathConverter', 'PathType', 'substitute']
class FileUrlPathConverter:
    def __init__(self) -> None:
        ...
    def pathFromUrl(self, fileUrl: str, pathType: PathType = PathType.kSystem) -> str:
        ...
    def pathToUrl(self, absolutePath: str, pathType: PathType = PathType.kSystem) -> str:
        ...
class PathType:
    """
    Members:
    
      kSystem
    
      kPOSIX
    
      kWindows
    """
    __members__: typing.ClassVar[dict[str, PathType]]  # value = {'kSystem': <PathType.kSystem: 0>, 'kPOSIX': <PathType.kPOSIX: 1>, 'kWindows': <PathType.kWindows: 2>}
    kPOSIX: typing.ClassVar[PathType]  # value = <PathType.kPOSIX: 1>
    kSystem: typing.ClassVar[PathType]  # value = <PathType.kSystem: 0>
    kWindows: typing.ClassVar[PathType]  # value = <PathType.kWindows: 2>
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: int) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: int) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
def substitute(input: str, substitutions: dict[str, bool | int | float | str]) -> str:
    ...
