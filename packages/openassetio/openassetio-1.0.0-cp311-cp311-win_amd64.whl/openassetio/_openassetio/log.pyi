from __future__ import annotations
import typing
__all__ = ['ConsoleLogger', 'LoggerInterface', 'SeverityFilter']
class ConsoleLogger(LoggerInterface):
    def __init__(self, shouldColorOutput: bool = True) -> None:
        ...
class LoggerInterface:
    class Severity:
        """
        Members:
        
          kCritical
        
          kError
        
          kWarning
        
          kProgress
        
          kInfo
        
          kDebug
        
          kDebugApi
        """
        __members__: typing.ClassVar[dict[str, LoggerInterface.Severity]]  # value = {'kCritical': <Severity.kCritical: 6>, 'kError': <Severity.kError: 5>, 'kWarning': <Severity.kWarning: 4>, 'kProgress': <Severity.kProgress: 3>, 'kInfo': <Severity.kInfo: 2>, 'kDebug': <Severity.kDebug: 1>, 'kDebugApi': <Severity.kDebugApi: 0>}
        kCritical: typing.ClassVar[LoggerInterface.Severity]  # value = <Severity.kCritical: 6>
        kDebug: typing.ClassVar[LoggerInterface.Severity]  # value = <Severity.kDebug: 1>
        kDebugApi: typing.ClassVar[LoggerInterface.Severity]  # value = <Severity.kDebugApi: 0>
        kError: typing.ClassVar[LoggerInterface.Severity]  # value = <Severity.kError: 5>
        kInfo: typing.ClassVar[LoggerInterface.Severity]  # value = <Severity.kInfo: 2>
        kProgress: typing.ClassVar[LoggerInterface.Severity]  # value = <Severity.kProgress: 3>
        kWarning: typing.ClassVar[LoggerInterface.Severity]  # value = <Severity.kWarning: 4>
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __ge__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __gt__(self, other: typing.Any) -> bool:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: int) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __le__(self, other: typing.Any) -> bool:
            ...
        def __lt__(self, other: typing.Any) -> bool:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: int) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    kSeverityNames: typing.ClassVar[list] = ['debugApi', 'debug', 'info', 'progress', 'warning', 'error', 'critical']
    def __init__(self) -> None:
        ...
    def critical(self, message: str) -> None:
        ...
    def debug(self, message: str) -> None:
        ...
    def debugApi(self, message: str) -> None:
        ...
    def error(self, message: str) -> None:
        ...
    def info(self, message: str) -> None:
        ...
    def isSeverityLogged(self, severity: LoggerInterface.Severity) -> bool:
        ...
    def log(self, severity: LoggerInterface.Severity, message: str) -> None:
        ...
    def progress(self, message: str) -> None:
        ...
    def warning(self, message: str) -> None:
        ...
class SeverityFilter(LoggerInterface):
    def __init__(self, upstreamLogger: LoggerInterface) -> None:
        ...
    def getSeverity(self) -> LoggerInterface.Severity:
        ...
    def setSeverity(self, severity: LoggerInterface.Severity) -> None:
        ...
    def upstreamLogger(self) -> LoggerInterface:
        ...
