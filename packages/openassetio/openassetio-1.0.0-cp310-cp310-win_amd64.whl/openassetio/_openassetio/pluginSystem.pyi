from __future__ import annotations
import openassetio._openassetio.hostApi
import openassetio._openassetio.log
import openassetio._openassetio.managerApi
import os
import typing
__all__ = ['CppPluginSystem', 'CppPluginSystemManagerImplementationFactory', 'CppPluginSystemPlugin', 'HybridPluginSystemManagerImplementationFactory']
class CppPluginSystem:
    def __init__(self, logger: openassetio._openassetio.log.LoggerInterface) -> None:
        ...
    def identifiers(self) -> list[str]:
        ...
    def plugin(self, identifier: str) -> tuple[os.PathLike, CppPluginSystemPlugin]:
        ...
    def reset(self) -> None:
        ...
    def scan(self, paths: str, pathsEnvVar: str, moduleHookName: str, validationCallback: typing.Callable[[CppPluginSystemPlugin], str | None]) -> None:
        ...
class CppPluginSystemManagerImplementationFactory(openassetio._openassetio.hostApi.ManagerImplementationFactoryInterface):
    kModuleHookName: typing.ClassVar[str] = 'openassetioPlugin'
    kPluginEnvVar: typing.ClassVar[str] = 'OPENASSETIO_PLUGIN_PATH'
    @typing.overload
    def __init__(self, paths: str, logger: openassetio._openassetio.log.LoggerInterface) -> None:
        ...
    @typing.overload
    def __init__(self, logger: openassetio._openassetio.log.LoggerInterface) -> None:
        ...
    def identifiers(self) -> list[str]:
        ...
    def instantiate(self, identifier: str) -> openassetio._openassetio.managerApi.ManagerInterface:
        ...
class CppPluginSystemPlugin:
    def identifier(self) -> str:
        ...
class HybridPluginSystemManagerImplementationFactory(openassetio._openassetio.hostApi.ManagerImplementationFactoryInterface):
    def __init__(self, factories: list[openassetio._openassetio.hostApi.ManagerImplementationFactoryInterface], logger: openassetio._openassetio.log.LoggerInterface) -> None:
        ...
    def identifiers(self) -> list[str]:
        ...
    def instantiate(self, identifier: str) -> openassetio._openassetio.managerApi.ManagerInterface:
        ...
