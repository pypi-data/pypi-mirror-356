from __future__ import annotations
import openassetio._openassetio
import openassetio._openassetio.access
import openassetio._openassetio.errors
import openassetio._openassetio.log
import openassetio._openassetio.managerApi
import openassetio._openassetio.trait
import typing
__all__ = ['EntityReferencePager', 'HostInterface', 'Manager', 'ManagerFactory', 'ManagerImplementationFactoryInterface']
class EntityReferencePager:
    def __init__(self, entityReferencePagerInterface: openassetio._openassetio.managerApi.EntityReferencePagerInterface, hostSession: openassetio._openassetio.managerApi.HostSession) -> None:
        ...
    def get(self) -> list[openassetio._openassetio.EntityReference]:
        ...
    def hasNext(self) -> bool:
        ...
    def next(self) -> None:
        ...
class HostInterface:
    def __init__(self) -> None:
        ...
    def displayName(self) -> str:
        ...
    def identifier(self) -> str:
        ...
    def info(self) -> dict[str, bool | int | float | str]:
        ...
class Manager:
    class BatchElementErrorPolicyTag:
        class Exception:
            pass
        class Variant:
            pass
        kException: typing.ClassVar[Manager.BatchElementErrorPolicyTag.Exception]  # value = <openassetio._openassetio.hostApi.Manager.BatchElementErrorPolicyTag.Exception object>
        kVariant: typing.ClassVar[Manager.BatchElementErrorPolicyTag.Variant]  # value = <openassetio._openassetio.hostApi.Manager.BatchElementErrorPolicyTag.Variant object>
    class Capability:
        """
        Members:
        
          kStatefulContexts
        
          kCustomTerminology
        
          kResolution
        
          kPublishing
        
          kRelationshipQueries
        
          kExistenceQueries
        
          kDefaultEntityReferences
        """
        __members__: typing.ClassVar[dict[str, Manager.Capability]]  # value = {'kStatefulContexts': <Capability.kStatefulContexts: 2>, 'kCustomTerminology': <Capability.kCustomTerminology: 3>, 'kResolution': <Capability.kResolution: 4>, 'kPublishing': <Capability.kPublishing: 5>, 'kRelationshipQueries': <Capability.kRelationshipQueries: 6>, 'kExistenceQueries': <Capability.kExistenceQueries: 7>, 'kDefaultEntityReferences': <Capability.kDefaultEntityReferences: 8>}
        kCustomTerminology: typing.ClassVar[Manager.Capability]  # value = <Capability.kCustomTerminology: 3>
        kDefaultEntityReferences: typing.ClassVar[Manager.Capability]  # value = <Capability.kDefaultEntityReferences: 8>
        kExistenceQueries: typing.ClassVar[Manager.Capability]  # value = <Capability.kExistenceQueries: 7>
        kPublishing: typing.ClassVar[Manager.Capability]  # value = <Capability.kPublishing: 5>
        kRelationshipQueries: typing.ClassVar[Manager.Capability]  # value = <Capability.kRelationshipQueries: 6>
        kResolution: typing.ClassVar[Manager.Capability]  # value = <Capability.kResolution: 4>
        kStatefulContexts: typing.ClassVar[Manager.Capability]  # value = <Capability.kStatefulContexts: 2>
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: int) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: int) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    def __init__(self, managerInterface: openassetio._openassetio.managerApi.ManagerInterface, hostSession: openassetio._openassetio.managerApi.HostSession) -> None:
        ...
    def contextFromPersistenceToken(self, token: str) -> openassetio._openassetio.Context:
        ...
    def createChildContext(self, parentContext: openassetio._openassetio.Context) -> openassetio._openassetio.Context:
        ...
    def createContext(self) -> openassetio._openassetio.Context:
        ...
    def createEntityReference(self, entityReferenceString: str) -> openassetio._openassetio.EntityReference:
        ...
    def createEntityReferenceIfValid(self, entityReferenceString: str) -> openassetio._openassetio.EntityReference | None:
        ...
    @typing.overload
    def defaultEntityReference(self, traitSet: set[str], defaultEntityReferenceAccess: openassetio._openassetio.access.DefaultEntityAccess, context: openassetio._openassetio.Context) -> openassetio._openassetio.EntityReference | None:
        ...
    @typing.overload
    def defaultEntityReference(self, traitSets: list[set[str]], defaultEntityReferenceAccess: openassetio._openassetio.access.DefaultEntityAccess, context: openassetio._openassetio.Context) -> list[openassetio._openassetio.EntityReference | None]:
        ...
    @typing.overload
    def defaultEntityReference(self, traitSet: set[str], defaultEntityReferenceAccess: openassetio._openassetio.access.DefaultEntityAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> openassetio._openassetio.errors.BatchElementError | openassetio._openassetio.EntityReference | None:
        ...
    @typing.overload
    def defaultEntityReference(self, traitSets: list[set[str]], defaultEntityReferenceAccess: openassetio._openassetio.access.DefaultEntityAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> list[openassetio._openassetio.errors.BatchElementError | openassetio._openassetio.EntityReference | None]:
        ...
    @typing.overload
    def defaultEntityReference(self, traitSets: list[set[str]], defaultEntityReferenceAccess: openassetio._openassetio.access.DefaultEntityAccess, context: openassetio._openassetio.Context, successCallback: typing.Callable[[int, openassetio._openassetio.EntityReference | None], None], errorCallback: typing.Callable[[int, openassetio._openassetio.errors.BatchElementError], None]) -> None:
        ...
    @typing.overload
    def defaultEntityReference(self, traitSet: set[str], defaultEntityReferenceAccess: openassetio._openassetio.access.DefaultEntityAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> openassetio._openassetio.EntityReference | None:
        ...
    @typing.overload
    def defaultEntityReference(self, traitSets: list[set[str]], defaultEntityReferenceAccess: openassetio._openassetio.access.DefaultEntityAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> list[openassetio._openassetio.EntityReference | None]:
        ...
    def displayName(self) -> str:
        ...
    @typing.overload
    def entityExists(self, entityReference: openassetio._openassetio.EntityReference, context: openassetio._openassetio.Context) -> bool:
        ...
    @typing.overload
    def entityExists(self, entityReference: openassetio._openassetio.EntityReference, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> bool:
        ...
    @typing.overload
    def entityExists(self, entityReference: openassetio._openassetio.EntityReference, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> openassetio._openassetio.errors.BatchElementError | bool:
        ...
    @typing.overload
    def entityExists(self, entityReferences: list[openassetio._openassetio.EntityReference], context: openassetio._openassetio.Context) -> list:
        ...
    @typing.overload
    def entityExists(self, entityReferences: list[openassetio._openassetio.EntityReference], context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> list:
        ...
    @typing.overload
    def entityExists(self, entityReferences: list[openassetio._openassetio.EntityReference], context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> list[openassetio._openassetio.errors.BatchElementError | bool]:
        ...
    @typing.overload
    def entityExists(self, entityReferences: list[openassetio._openassetio.EntityReference], context: openassetio._openassetio.Context, successCallback: typing.Callable[[int, bool], None], errorCallback: typing.Callable[[int, openassetio._openassetio.errors.BatchElementError], None]) -> None:
        ...
    @typing.overload
    def entityTraits(self, entityReferences: list[openassetio._openassetio.EntityReference], entityTraitsAccess: openassetio._openassetio.access.EntityTraitsAccess, context: openassetio._openassetio.Context, successCallback: typing.Callable[[int, set[str]], None], errorCallback: typing.Callable[[int, openassetio._openassetio.errors.BatchElementError], None]) -> None:
        ...
    @typing.overload
    def entityTraits(self, entityReference: openassetio._openassetio.EntityReference, entityTraitsAccess: openassetio._openassetio.access.EntityTraitsAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> set[str]:
        ...
    @typing.overload
    def entityTraits(self, entityReference: openassetio._openassetio.EntityReference, entityTraitsAccess: openassetio._openassetio.access.EntityTraitsAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> openassetio._openassetio.errors.BatchElementError | set[str]:
        ...
    @typing.overload
    def entityTraits(self, entityReference: openassetio._openassetio.EntityReference, entityTraitsAccess: openassetio._openassetio.access.EntityTraitsAccess, context: openassetio._openassetio.Context) -> set[str]:
        ...
    @typing.overload
    def entityTraits(self, entityReferences: list[openassetio._openassetio.EntityReference], entityTraitsAccess: openassetio._openassetio.access.EntityTraitsAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> list[set[str]]:
        ...
    @typing.overload
    def entityTraits(self, entityReferences: list[openassetio._openassetio.EntityReference], entityTraitsAccess: openassetio._openassetio.access.EntityTraitsAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> list[openassetio._openassetio.errors.BatchElementError | set[str]]:
        ...
    @typing.overload
    def entityTraits(self, entityReferences: list[openassetio._openassetio.EntityReference], entityTraitsAccess: openassetio._openassetio.access.EntityTraitsAccess, context: openassetio._openassetio.Context) -> list[set[str]]:
        ...
    def flushCaches(self) -> None:
        ...
    @typing.overload
    def getWithRelationship(self, entityReferences: list[openassetio._openassetio.EntityReference], relationshipTraitsData: openassetio._openassetio.trait.TraitsData, pageSize: int, relationsAccess: openassetio._openassetio.access.RelationsAccess, context: openassetio._openassetio.Context, successCallback: typing.Callable[[int, EntityReferencePager], None], errorCallback: typing.Callable[[int, openassetio._openassetio.errors.BatchElementError], None], resultTraitSet: set[str] = set()) -> None:
        ...
    @typing.overload
    def getWithRelationship(self, entityReference: openassetio._openassetio.EntityReference, relationshipTraitsData: openassetio._openassetio.trait.TraitsData, pageSize: int, relationsAccess: openassetio._openassetio.access.RelationsAccess, context: openassetio._openassetio.Context, resultTraitSet: set[str]) -> EntityReferencePager:
        ...
    @typing.overload
    def getWithRelationship(self, entityReferences: list[openassetio._openassetio.EntityReference], relationshipTraitsData: openassetio._openassetio.trait.TraitsData, pageSize: int, relationsAccess: openassetio._openassetio.access.RelationsAccess, context: openassetio._openassetio.Context, resultTraitSet: set[str]) -> list[EntityReferencePager]:
        ...
    @typing.overload
    def getWithRelationship(self, entityReference: openassetio._openassetio.EntityReference, relationshipTraitsData: openassetio._openassetio.trait.TraitsData, pageSize: int, relationsAccess: openassetio._openassetio.access.RelationsAccess, context: openassetio._openassetio.Context, resultTraitSet: set[str], errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> EntityReferencePager:
        ...
    @typing.overload
    def getWithRelationship(self, entityReference: openassetio._openassetio.EntityReference, relationshipTraitsData: openassetio._openassetio.trait.TraitsData, pageSize: int, relationsAccess: openassetio._openassetio.access.RelationsAccess, context: openassetio._openassetio.Context, resultTraitSet: set[str], errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> openassetio._openassetio.errors.BatchElementError | EntityReferencePager:
        ...
    @typing.overload
    def getWithRelationship(self, entityReferences: list[openassetio._openassetio.EntityReference], relationshipTraitsData: openassetio._openassetio.trait.TraitsData, pageSize: int, relationsAccess: openassetio._openassetio.access.RelationsAccess, context: openassetio._openassetio.Context, resultTraitSet: set[str], errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> list[EntityReferencePager]:
        ...
    @typing.overload
    def getWithRelationship(self, entityReferences: list[openassetio._openassetio.EntityReference], relationshipTraitsData: openassetio._openassetio.trait.TraitsData, pageSize: int, relationsAccess: openassetio._openassetio.access.RelationsAccess, context: openassetio._openassetio.Context, resultTraitSet: set[str], errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> list[openassetio._openassetio.errors.BatchElementError | EntityReferencePager]:
        ...
    @typing.overload
    def getWithRelationships(self, entityReference: openassetio._openassetio.EntityReference, relationshipTraitsDatas: list[openassetio._openassetio.trait.TraitsData], pageSize: int, relationsAccess: openassetio._openassetio.access.RelationsAccess, context: openassetio._openassetio.Context, successCallback: typing.Callable[[int, EntityReferencePager], None], errorCallback: typing.Callable[[int, openassetio._openassetio.errors.BatchElementError], None], resultTraitSet: set[str] = set()) -> None:
        ...
    @typing.overload
    def getWithRelationships(self, entityReference: openassetio._openassetio.EntityReference, relationshipTraitsDatas: list[openassetio._openassetio.trait.TraitsData], pageSize: int, relationsAccess: openassetio._openassetio.access.RelationsAccess, context: openassetio._openassetio.Context, resultTraitSet: set[str]) -> list[EntityReferencePager]:
        ...
    @typing.overload
    def getWithRelationships(self, entityReference: openassetio._openassetio.EntityReference, relationshipTraitsDatas: list[openassetio._openassetio.trait.TraitsData], pageSize: int, relationsAccess: openassetio._openassetio.access.RelationsAccess, context: openassetio._openassetio.Context, resultTraitSet: set[str], errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> list[EntityReferencePager]:
        ...
    @typing.overload
    def getWithRelationships(self, entityReference: openassetio._openassetio.EntityReference, relationshipTraitsDatas: list[openassetio._openassetio.trait.TraitsData], pageSize: int, relationsAccess: openassetio._openassetio.access.RelationsAccess, context: openassetio._openassetio.Context, resultTraitSet: set[str], errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> list[openassetio._openassetio.errors.BatchElementError | EntityReferencePager]:
        ...
    def hasCapability(self, capability: Manager.Capability) -> bool:
        ...
    def identifier(self) -> str:
        ...
    def info(self) -> dict[str, bool | int | float | str]:
        ...
    def initialize(self, managerSettings: dict[str, bool | int | float | str]) -> None:
        ...
    def isEntityReferenceString(self, someString: str) -> bool:
        ...
    @typing.overload
    def managementPolicy(self, traitSet: set[str], policyAccess: openassetio._openassetio.access.PolicyAccess, context: openassetio._openassetio.Context) -> openassetio._openassetio.trait.TraitsData:
        ...
    @typing.overload
    def managementPolicy(self, traitSets: list[set[str]], policyAccess: openassetio._openassetio.access.PolicyAccess, context: openassetio._openassetio.Context) -> list[openassetio._openassetio.trait.TraitsData]:
        ...
    def persistenceTokenForContext(self, context: openassetio._openassetio.Context) -> str:
        ...
    @typing.overload
    def preflight(self, entityReferences: list[openassetio._openassetio.EntityReference], traitsHints: list[openassetio._openassetio.trait.TraitsData], publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context, successCallback: typing.Callable[[int, openassetio._openassetio.EntityReference], None], errorCallback: typing.Callable[[int, openassetio._openassetio.errors.BatchElementError], None]) -> None:
        ...
    @typing.overload
    def preflight(self, entityReference: openassetio._openassetio.EntityReference, traitsHint: openassetio._openassetio.trait.TraitsData, publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> openassetio._openassetio.EntityReference:
        ...
    @typing.overload
    def preflight(self, entityReference: openassetio._openassetio.EntityReference, traitsHint: openassetio._openassetio.trait.TraitsData, publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> openassetio._openassetio.errors.BatchElementError | openassetio._openassetio.EntityReference:
        ...
    @typing.overload
    def preflight(self, entityReference: openassetio._openassetio.EntityReference, traitsHint: openassetio._openassetio.trait.TraitsData, publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context) -> openassetio._openassetio.EntityReference:
        ...
    @typing.overload
    def preflight(self, entityReferences: list[openassetio._openassetio.EntityReference], traitsHints: list[openassetio._openassetio.trait.TraitsData], publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> list[openassetio._openassetio.EntityReference]:
        ...
    @typing.overload
    def preflight(self, entityReferences: list[openassetio._openassetio.EntityReference], traitsHints: list[openassetio._openassetio.trait.TraitsData], publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> list[openassetio._openassetio.errors.BatchElementError | openassetio._openassetio.EntityReference]:
        ...
    @typing.overload
    def preflight(self, entityReferences: list[openassetio._openassetio.EntityReference], traitsHints: list[openassetio._openassetio.trait.TraitsData], publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context) -> list[openassetio._openassetio.EntityReference]:
        ...
    @typing.overload
    def register(self, entityReferences: list[openassetio._openassetio.EntityReference], entityTraitsDatas: list[openassetio._openassetio.trait.TraitsData], publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context, successCallback: typing.Callable[[int, openassetio._openassetio.EntityReference], None], errorCallback: typing.Callable[[int, openassetio._openassetio.errors.BatchElementError], None]) -> None:
        ...
    @typing.overload
    def register(self, entityReference: openassetio._openassetio.EntityReference, entityTraitsData: openassetio._openassetio.trait.TraitsData, publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> openassetio._openassetio.EntityReference:
        ...
    @typing.overload
    def register(self, entityReference: openassetio._openassetio.EntityReference, entityTraitsData: openassetio._openassetio.trait.TraitsData, publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> openassetio._openassetio.errors.BatchElementError | openassetio._openassetio.EntityReference:
        ...
    @typing.overload
    def register(self, entityReference: openassetio._openassetio.EntityReference, entityTraitsData: openassetio._openassetio.trait.TraitsData, publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context) -> openassetio._openassetio.EntityReference:
        ...
    @typing.overload
    def register(self, entityReferences: list[openassetio._openassetio.EntityReference], entityTraitsDatas: list[openassetio._openassetio.trait.TraitsData], publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> list[openassetio._openassetio.EntityReference]:
        ...
    @typing.overload
    def register(self, entityReferences: list[openassetio._openassetio.EntityReference], entityTraitsDatas: list[openassetio._openassetio.trait.TraitsData], publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> list[openassetio._openassetio.errors.BatchElementError | openassetio._openassetio.EntityReference]:
        ...
    @typing.overload
    def register(self, entityReference: list[openassetio._openassetio.EntityReference], entityTraitsData: list[openassetio._openassetio.trait.TraitsData], publishAccess: openassetio._openassetio.access.PublishingAccess, context: openassetio._openassetio.Context) -> list[openassetio._openassetio.EntityReference]:
        ...
    @typing.overload
    def resolve(self, entityReferences: list[openassetio._openassetio.EntityReference], traitSet: set[str], resolveAccess: openassetio._openassetio.access.ResolveAccess, context: openassetio._openassetio.Context, successCallback: typing.Callable[[int, openassetio._openassetio.trait.TraitsData], None], errorCallback: typing.Callable[[int, openassetio._openassetio.errors.BatchElementError], None]) -> None:
        ...
    @typing.overload
    def resolve(self, entityReference: openassetio._openassetio.EntityReference, traitSet: set[str], resolveAccess: openassetio._openassetio.access.ResolveAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> openassetio._openassetio.trait.TraitsData:
        ...
    @typing.overload
    def resolve(self, entityReference: openassetio._openassetio.EntityReference, traitSet: set[str], resolveAccess: openassetio._openassetio.access.ResolveAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> openassetio._openassetio.errors.BatchElementError | openassetio._openassetio.trait.TraitsData:
        ...
    @typing.overload
    def resolve(self, entityReference: openassetio._openassetio.EntityReference, traitSet: set[str], resolveAccess: openassetio._openassetio.access.ResolveAccess, context: openassetio._openassetio.Context) -> openassetio._openassetio.trait.TraitsData:
        ...
    @typing.overload
    def resolve(self, entityReferences: list[openassetio._openassetio.EntityReference], traitSet: set[str], resolveAccess: openassetio._openassetio.access.ResolveAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Exception) -> list[openassetio._openassetio.trait.TraitsData]:
        ...
    @typing.overload
    def resolve(self, entityReferences: list[openassetio._openassetio.EntityReference], traitSet: set[str], resolveAccess: openassetio._openassetio.access.ResolveAccess, context: openassetio._openassetio.Context, errorPolicyTag: Manager.BatchElementErrorPolicyTag.Variant) -> list[openassetio._openassetio.errors.BatchElementError | openassetio._openassetio.trait.TraitsData]:
        ...
    @typing.overload
    def resolve(self, entityReferences: list[openassetio._openassetio.EntityReference], traitSet: set[str], resolveAccess: openassetio._openassetio.access.ResolveAccess, context: openassetio._openassetio.Context) -> list[openassetio._openassetio.trait.TraitsData]:
        ...
    def settings(self) -> dict[str, bool | int | float | str]:
        ...
    def updateTerminology(self, terms: dict[str, str]) -> dict[str, str]:
        ...
class ManagerFactory:
    class ManagerDetail:
        __hash__: typing.ClassVar[None] = None
        displayName: str
        identifier: str
        info: dict[str, bool | int | float | str]
        def __eq__(self, arg0: ManagerFactory.ManagerDetail) -> bool:
            ...
        def __init__(self, identifier: str, displayName: str, info: dict[str, bool | int | float | str]) -> None:
            ...
    kDefaultManagerConfigEnvVarName: typing.ClassVar[str] = 'OPENASSETIO_DEFAULT_CONFIG'
    @staticmethod
    def createManagerForInterface(identifier: str, hostInterface: HostInterface, managerImplementationFactory: ManagerImplementationFactoryInterface, logger: openassetio._openassetio.log.LoggerInterface) -> Manager:
        ...
    @staticmethod
    @typing.overload
    def defaultManagerForInterface(configPath: str, hostInterface: HostInterface, managerImplementationFactory: ManagerImplementationFactoryInterface, logger: openassetio._openassetio.log.LoggerInterface) -> Manager:
        ...
    @staticmethod
    @typing.overload
    def defaultManagerForInterface(hostInterface: HostInterface, managerImplementationFactory: ManagerImplementationFactoryInterface, logger: openassetio._openassetio.log.LoggerInterface) -> Manager:
        ...
    def __init__(self, hostInterface: HostInterface, managerImplementationFactory: ManagerImplementationFactoryInterface, logger: openassetio._openassetio.log.LoggerInterface) -> None:
        ...
    def availableManagers(self) -> dict[str, ManagerFactory.ManagerDetail]:
        ...
    def createManager(self, identifier: str) -> Manager:
        ...
    def identifiers(self) -> list[str]:
        ...
class ManagerImplementationFactoryInterface:
    def __init__(self, logger: openassetio._openassetio.log.LoggerInterface) -> None:
        ...
    def identifiers(self) -> list[str]:
        ...
    def instantiate(self, identifier: str) -> openassetio._openassetio.managerApi.ManagerInterface:
        ...
    @property
    def _logger(self) -> openassetio._openassetio.log.LoggerInterface:
        ...
