[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "gcp-pubsub-events"
version = "2.0.0"
description = "A decorator-based library for handling Google Cloud Pub/Sub messages with FastAPI integration, inspired by Micronaut's @PubSubListener"
authors = ["Your Name <shadowrhyder@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/Executioner1939/gcp-pubsub-events"
repository = "https://github.com/Executioner1939/gcp-pubsub-events"
documentation = "https://github.com/Executioner1939/gcp-pubsub-events"
keywords = ["pubsub", "google-cloud", "fastapi", "microservices", "event-driven"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
]
packages = [{include = "gcp_pubsub_events", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
google-cloud-pubsub = "^2.0.0"
pydantic = "^2.0.0"
six = "^1.16.0"
pytz = "^2021.1"
protobuf = "^3.19.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.0.0"
pytest-timeout = "^2.1.0"
pytest-xdist = "^3.0.0"
black = ">=23,<25"
flake8 = "^6.0.0"
isort = "^5.12.0"
mypy = "^1.0.0"
flake8-pyproject = "^1.2.3"

[tool.poetry.group.test.dependencies]
# Additional test dependencies for CI
coverage = "^7.0.0"
pytest-html = "^3.1.0"

[tool.poetry.group.docs.dependencies]
# Documentation dependencies (optional)
mkdocs = {version = "^1.4.0", optional = true}
mkdocs-material = {version = "^9.0.0", optional = true}

[tool.poetry.extras]
docs = ["mkdocs", "mkdocs-material"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["gcp_pubsub_events"]
known_third_party = ["google", "pydantic", "pytest", "fastapi"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
mypy_path = "src"

[[tool.mypy.overrides]]
module = [
    "google.*",
    "six.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--cov=src/gcp_pubsub_events",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    "ignore:.*min_items.*:pydantic.warnings.PydanticDeprecatedSince20",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests with emulator",
    "e2e: End-to-end tests",
    "performance: Performance benchmarks",
    "slow: Slow running tests",
    "asyncio: marks tests as async",
]
asyncio_mode = "auto"
timeout = 30

# Coverage configuration
[tool.coverage.run]
source = ["src/gcp_pubsub_events"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Flake8 configuration (via Flake8-pyproject)
[tool.flake8]
max-line-length = 150
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    ".eggs",
    "*.egg",
    ".venv",
    "venv",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
    "htmlcov",
    ".coverage",
    "examples"
]
ignore = [
    # W503: line break before binary operator (conflicts with black)
    "W503",
    # E203: whitespace before ':' (conflicts with black)
    "E203"
]
per-file-ignores = [
    # Allow imports at module level in __init__.py files
    "__init__.py:F401"
]

# Setuptools configuration (for compatibility)
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]