# Copyright (c) 2023-2024 Broadcom. All Rights Reserved.
# Broadcom Confidential. The term "Broadcom" refers to Broadcom Inc.
# and/or its subsidiaries.
# -*- coding: utf-8 -*-
#---------------------------------------------------------------------------
# Copyright (c) 2025 Broadcom.  All rights reserved.
# The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.

# AUTO GENERATED FILE -- DO NOT MODIFY!
#
# vAPI stub file for package vmware.sddc_manager.model.
#---------------------------------------------------------------------------

"""


"""

__author__ = 'VMware, Inc.'
__docformat__ = 'restructuredtext en'

import sys
from warnings import warn

from vmware.vapi.bindings import type
from vmware.vapi.bindings.converter import TypeConverter
from vmware.vapi.bindings.enum import Enum
from vmware.vapi.bindings.error import VapiError, ThrowsClauseBuilder
from vmware.vapi.bindings.struct import VapiStruct
from vmware.vapi.bindings.stub import (
    ApiInterfaceStub, StubFactoryBase, VapiInterface)
from vmware.vapi.bindings.common import raise_core_exception
from vmware.vapi.data.validator import (UnionValidator, HasFieldsOfValidator)
from vmware.vapi.exception import CoreException
from vmware.vapi.lib.constants import TaskType
from vmware.vapi.lib.rest import OperationRestMetadata


class BaseAlias(VapiStruct):
    """
    Base Alias representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'aliases': 'aliases',
                            }

    def __init__(self,
                 version=None,
                 aliases=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: Base version 
            
            * Property is read-only.
            
            
        :type  aliases: :class:`list` of :class:`str` or ``None``
        :param aliases: List of Alias versions 
            
            * Property is read-only.
            
            
        """
        self.version = version
        self.aliases = aliases
        VapiStruct.__init__(self)


BaseAlias._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.base_alias', {
        'version': type.OptionalType(type.StringType()),
        'aliases': type.OptionalType(type.ListType(type.StringType())),
    },
    BaseAlias,
    False,
    None))



class VersionAliasesForBundleComponentType(VapiStruct):
    """
    Version Alias representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'bundleComponentType': 'bundle_component_type',
                            'versionAliases': 'version_aliases',
                            }

    def __init__(self,
                 bundle_component_type=None,
                 version_aliases=None,
                ):
        """
        :type  bundle_component_type: :class:`str` or ``None``
        :param bundle_component_type: Bundle Component Type 
            
            * Property is read-only.
            
            
        :type  version_aliases: :class:`list` of :class:`BaseAlias` or ``None``
        :param version_aliases: Version Aliases 
            
            * Property is read-only.
            
            
        """
        self.bundle_component_type = bundle_component_type
        self.version_aliases = version_aliases
        VapiStruct.__init__(self)


VersionAliasesForBundleComponentType._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.version_aliases_for_bundle_component_type', {
        'bundleComponentType': type.OptionalType(type.StringType()),
        'versionAliases': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BaseAlias'))),
    },
    VersionAliasesForBundleComponentType,
    False,
    None))



class VersionAliasesForBundleComponentTypeSpec(VapiStruct):
    """
    Version Alias Configuration Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'versionAliasesForBundleComponentTypes': 'version_aliases_for_bundle_component_types',
                            'forceUpdate': 'force_update',
                            'targetVcfVersion': 'target_vcf_version',
                            }

    def __init__(self,
                 version_aliases_for_bundle_component_types=None,
                 force_update=None,
                 target_vcf_version=None,
                ):
        """
        :type  version_aliases_for_bundle_component_types: :class:`list` of :class:`VersionAliasesForBundleComponentType` or ``None``
        :param version_aliases_for_bundle_component_types: List of version aliases for bundle component types.
        :type  force_update: :class:`bool` or ``None``
        :param force_update: Flag for force update version alias configuration.
        :type  target_vcf_version: :class:`str` or ``None``
        :param target_vcf_version: If this field is set, LCM will calculate and update version aliases
            based on current deployment VCF version and the provided target VCF
            version
        """
        self.version_aliases_for_bundle_component_types = version_aliases_for_bundle_component_types
        self.force_update = force_update
        self.target_vcf_version = target_vcf_version
        VapiStruct.__init__(self)


VersionAliasesForBundleComponentTypeSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.version_aliases_for_bundle_component_type_spec', {
        'versionAliasesForBundleComponentTypes': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VersionAliasesForBundleComponentType'))),
        'forceUpdate': type.OptionalType(type.BooleanType()),
        'targetVcfVersion': type.OptionalType(type.StringType()),
    },
    VersionAliasesForBundleComponentTypeSpec,
    False,
    None))



class PageMetadata(VapiStruct):
    """
    Represents pageable elements pagination metadata

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'pageNumber': 'page_number',
                            'pageSize': 'page_size',
                            'totalElements': 'total_elements',
                            'totalPages': 'total_pages',
                            }

    def __init__(self,
                 page_number=None,
                 page_size=None,
                 total_elements=None,
                 total_pages=None,
                ):
        """
        :type  page_number: :class:`long` or ``None``
        :param page_number: Returns the current page number 
            
            * Property is read-only.
            
            
        :type  page_size: :class:`long` or ``None``
        :param page_size: Returns the number of elements in the current page 
            
            * Property is read-only.
            
            
        :type  total_elements: :class:`long` or ``None``
        :param total_elements: Returns the total number of elements 
            
            * Property is read-only.
            
            
        :type  total_pages: :class:`long` or ``None``
        :param total_pages: Returns the total number of pages 
            
            * Property is read-only.
            
            
        """
        self.page_number = page_number
        self.page_size = page_size
        self.total_elements = total_elements
        self.total_pages = total_pages
        VapiStruct.__init__(self)


PageMetadata._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_metadata', {
        'pageNumber': type.OptionalType(type.IntegerType()),
        'pageSize': type.OptionalType(type.IntegerType()),
        'totalElements': type.OptionalType(type.IntegerType()),
        'totalPages': type.OptionalType(type.IntegerType()),
    },
    PageMetadata,
    False,
    None))



class PageOfVersionAliasesForBundleComponentType(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`VersionAliasesForBundleComponentType` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfVersionAliasesForBundleComponentType._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_version_aliases_for_bundle_component_type', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VersionAliasesForBundleComponentType'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfVersionAliasesForBundleComponentType,
    False,
    None))



class ErrorCause(VapiStruct):
    """
    Describes a single error cause

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'message': 'message',
                            }

    def __init__(self,
                 type=None,
                 message=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: The type of the error cause 
            
            * Property is read-only.
            
            
        :type  message: :class:`str` or ``None``
        :param message: The message describing the reason for the error 
            
            * Property is read-only.
            
            
        """
        self.type = type
        self.message = message
        VapiStruct.__init__(self)


ErrorCause._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.error_cause', {
        'type': type.OptionalType(type.StringType()),
        'message': type.OptionalType(type.StringType()),
    },
    ErrorCause,
    False,
    None))



class AliasSpec(VapiStruct):
    """
    Alias Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'aliases': 'aliases',
                            'forceUpdate': 'force_update',
                            }

    def __init__(self,
                 aliases=None,
                 force_update=None,
                ):
        """
        :type  aliases: :class:`list` of :class:`str` or ``None``
        :param aliases: Aliases for bundle component type and version.
        :type  force_update: :class:`bool` or ``None``
        :param force_update: Flag for force update version alias configuration.
        """
        self.aliases = aliases
        self.force_update = force_update
        VapiStruct.__init__(self)


AliasSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.alias_spec', {
        'aliases': type.OptionalType(type.ListType(type.StringType())),
        'forceUpdate': type.OptionalType(type.BooleanType()),
    },
    AliasSpec,
    False,
    None))



class DepotAccount(VapiStruct):
    """
    VMware Depot Account Information

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'username': 'username',
                            'password': 'password',
                            'status': 'status',
                            'message': 'message',
                            'downloadToken': 'download_token',
                            }

    def __init__(self,
                 username=None,
                 password=None,
                 status=None,
                 message=None,
                 download_token=None,
                ):
        """
        :type  username: :class:`str` or ``None``
        :param username: Depot Username for Access. This field is optional when
            downloadToken is used for online depot authentication and
            authorization.
        :type  password: :class:`str` or ``None``
        :param password: Depot Password for Access. This field is optional when
            downloadToken is used for online depot authentication and
            authorization.
        :type  status: :class:`str` or ``None``
        :param status: Depot Status
        :type  message: :class:`str` or ``None``
        :param message: Message explaining depot status
        :type  download_token: :class:`str` or ``None``
        :param download_token: This field is mandatory when downloadToken is used for online depot
            authentication and authorization. downloadToken should be generated
            from the broadcom support portal https://support.broadcom.com
        """
        self.username = username
        self.password = password
        self.status = status
        self.message = message
        self.download_token = download_token
        VapiStruct.__init__(self)


DepotAccount._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.depot_account', {
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'message': type.OptionalType(type.StringType()),
        'downloadToken': type.OptionalType(type.StringType()),
    },
    DepotAccount,
    False,
    None))



class DepotConfiguration(VapiStruct):
    """
    Depot Configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'isOfflineDepot': 'is_offline_depot',
                            'hostname': 'hostname',
                            'port': 'port',
                            }

    def __init__(self,
                 is_offline_depot=None,
                 hostname=None,
                 port=None,
                ):
        """
        :type  is_offline_depot: :class:`bool` or ``None``
        :param is_offline_depot: Flag indicating if the depot is in offline mode
        :type  hostname: :class:`str` or ``None``
        :param hostname: IP/Hostname of the depot
        :type  port: :class:`long` or ``None``
        :param port: Port of the depot
        """
        self.is_offline_depot = is_offline_depot
        self.hostname = hostname
        self.port = port
        VapiStruct.__init__(self)


DepotConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.depot_configuration', {
        'isOfflineDepot': type.OptionalType(type.BooleanType()),
        'hostname': type.OptionalType(type.StringType()),
        'port': type.OptionalType(type.IntegerType()),
    },
    DepotConfiguration,
    False,
    None))



class DepotSettings(VapiStruct):
    """
    VMware Depot Settings. At least one of vmwareAccount, dellEmcSupportAccount
    or offlineAccount value must be provided

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vmwareAccount': 'vmware_account',
                            'dellEmcSupportAccount': 'dell_emc_support_account',
                            'offlineAccount': 'offline_account',
                            'depotConfiguration': 'depot_configuration',
                            }

    def __init__(self,
                 vmware_account=None,
                 dell_emc_support_account=None,
                 offline_account=None,
                 depot_configuration=None,
                ):
        """
        :type  vmware_account: :class:`DepotAccount` or ``None``
        :param vmware_account:         :type  dell_emc_support_account: :class:`DepotAccount` or ``None``
        :param dell_emc_support_account:         :type  offline_account: :class:`DepotAccount` or ``None``
        :param offline_account:         :type  depot_configuration: :class:`DepotConfiguration` or ``None``
        :param depot_configuration:         """
        self.vmware_account = vmware_account
        self.dell_emc_support_account = dell_emc_support_account
        self.offline_account = offline_account
        self.depot_configuration = depot_configuration
        VapiStruct.__init__(self)


DepotSettings._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.depot_settings', {
        'vmwareAccount': type.OptionalType(type.ReferenceType(__name__, 'DepotAccount')),
        'dellEmcSupportAccount': type.OptionalType(type.ReferenceType(__name__, 'DepotAccount')),
        'offlineAccount': type.OptionalType(type.ReferenceType(__name__, 'DepotAccount')),
        'depotConfiguration': type.OptionalType(type.ReferenceType(__name__, 'DepotConfiguration')),
    },
    DepotSettings,
    False,
    None))



class NtpConfiguration(VapiStruct):
    """
    NTP Configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ntpServers': 'ntp_servers',
                            }

    def __init__(self,
                 ntp_servers=None,
                ):
        """
        :type  ntp_servers: :class:`list` of :class:`NtpServer` or ``None``
        :param ntp_servers: List of NTP servers
        """
        self.ntp_servers = ntp_servers
        VapiStruct.__init__(self)


NtpConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ntp_configuration', {
        'ntpServers': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NtpServer'))),
    },
    NtpConfiguration,
    False,
    None))



class NtpServer(VapiStruct):
    """
    NTP server details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ipAddress': 'ip_address',
                            }

    def __init__(self,
                 ip_address=None,
                ):
        """
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: IP address/FQDN of NTP server
        """
        self.ip_address = ip_address
        VapiStruct.__init__(self)


NtpServer._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ntp_server', {
        'ipAddress': type.OptionalType(type.StringType()),
    },
    NtpServer,
    False,
    None))



class DocumentationLink(VapiStruct):
    """
    Represents a documentation link's url string and label

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'url': 'url',
                            'label': 'label',
                            }

    def __init__(self,
                 url=None,
                 label=None,
                ):
        """
        :type  url: :class:`str` or ``None``
        :param url: URL string of the documentation link 
            
            * Property is read-only.
            
            
        :type  label: :class:`str` or ``None``
        :param label: Label of the documentation link 
            
            * Property is read-only.
            
            
        """
        self.url = url
        self.label = label
        VapiStruct.__init__(self)


DocumentationLink._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.documentation_link', {
        'url': type.OptionalType(type.StringType()),
        'label': type.OptionalType(type.StringType()),
    },
    DocumentationLink,
    False,
    None))



class MessagePack(VapiStruct):
    """
    A message pack representing a localizable message and suitable for machine
    processing. Contains a message key unique in the scope of the specified
    component, as well as the arguments needed to generate the localized
    message.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'component': 'component',
                            'messageKey': 'message_key',
                            'arguments': 'arguments',
                            'message': 'message',
                            'bundle': 'bundle',
                            }

    def __init__(self,
                 component=None,
                 message_key=None,
                 arguments=None,
                 message=None,
                 bundle=None,
                ):
        """
        :type  component: :class:`str` or ``None``
        :param component: The component the message belongs to
        :type  message_key: :class:`str` or ``None``
        :param message_key: The machine-readable key of the message
        :type  arguments: :class:`list` of :class:`str` or ``None``
        :param arguments: The arguments used to localize the message. Can be used by scripts
            to automate the response processing.
        :type  message: :class:`str` or ``None``
        :param message: The localized message (if not provided by another property)
        :type  bundle: :class:`str` or ``None``
        :param bundle: The local resource bundle details
        """
        self.component = component
        self.message_key = message_key
        self.arguments = arguments
        self.message = message
        self.bundle = bundle
        VapiStruct.__init__(self)


MessagePack._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.message_pack', {
        'component': type.OptionalType(type.StringType()),
        'messageKey': type.OptionalType(type.StringType()),
        'arguments': type.OptionalType(type.ListType(type.StringType())),
        'message': type.OptionalType(type.StringType()),
        'bundle': type.OptionalType(type.StringType()),
    },
    MessagePack,
    False,
    None))



class Resource(VapiStruct):
    """
    Represents the resource in the system

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceId': 'resource_id',
                            'fqdn': 'fqdn',
                            'type': 'type',
                            'name': 'name',
                            'sans': 'sans',
                            }

    def __init__(self,
                 resource_id=None,
                 fqdn=None,
                 type=None,
                 name=None,
                 sans=None,
                ):
        """
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: Resource ID
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: Resource FQDN
        :type  type: :class:`str` or ``None``
        :param type: Resource type
        :type  name: :class:`str` or ``None``
        :param name: Name of the resource
        :type  sans: :class:`list` of :class:`str` or ``None``
        :param sans: Subject alternative name(s)
        """
        self.resource_id = resource_id
        self.fqdn = fqdn
        self.type = type
        self.name = name
        self.sans = sans
        VapiStruct.__init__(self)


Resource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource', {
        'resourceId': type.OptionalType(type.StringType()),
        'fqdn': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'sans': type.OptionalType(type.ListType(type.StringType())),
    },
    Resource,
    False,
    None))



class Stage(VapiStruct):
    """
    Represents a Stage

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'type': 'type',
                            'description': 'description',
                            'status': 'status',
                            'creationTimestamp': 'creation_timestamp',
                            'completionTimestamp': 'completion_timestamp',
                            'errors': 'errors',
                            }

    def __init__(self,
                 name=None,
                 type=None,
                 description=None,
                 status=None,
                 creation_timestamp=None,
                 completion_timestamp=None,
                 errors=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Stage name 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Stage type 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Stage description 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: Stage status 
            
            * Property is read-only.
            
            
        :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp:         :type  completion_timestamp: :class:`str` or ``None``
        :param completion_timestamp: Stage completion timestamp 
            
            * Property is read-only.
            
            
        :type  errors: :class:`list` of :class:`Error` or ``None``
        :param errors: List of errors in case of a failure 
            
            * Property is read-only.
            
            
        """
        self.name = name
        self.type = type
        self.description = description
        self.status = status
        self.creation_timestamp = creation_timestamp
        self.completion_timestamp = completion_timestamp
        self.errors = errors
        VapiStruct.__init__(self)


Stage._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.stage', {
        'name': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'creationTimestamp': type.OptionalType(type.StringType()),
        'completionTimestamp': type.OptionalType(type.StringType()),
        'errors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Error'))),
    },
    Stage,
    False,
    None))



class SubTask(VapiStruct):
    """
    Represents a sub-task

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'type': 'type',
                            'description': 'description',
                            'status': 'status',
                            'creationTimestamp': 'creation_timestamp',
                            'completionTimestamp': 'completion_timestamp',
                            'stages': 'stages',
                            'errors': 'errors',
                            'resources': 'resources',
                            'subTasks': 'sub_tasks',
                            'documentationLink': 'documentation_link',
                            }

    def __init__(self,
                 name=None,
                 type=None,
                 description=None,
                 status=None,
                 creation_timestamp=None,
                 completion_timestamp=None,
                 stages=None,
                 errors=None,
                 resources=None,
                 sub_tasks=None,
                 documentation_link=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Sub-task name 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Sub-task type 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Sub-task description 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: Sub-task status 
            
            * Property is read-only.
            
            
        :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: Sub-task creation timestamp 
            
            * Property is read-only.
            
            
        :type  completion_timestamp: :class:`str` or ``None``
        :param completion_timestamp: Sub-task completion timestamp 
            
            * Property is read-only.
            
            
        :type  stages: :class:`list` of :class:`Stage` or ``None``
        :param stages: List of stages of the sub-task 
            
            * Property is read-only.
            
            
        :type  errors: :class:`list` of :class:`Error` or ``None``
        :param errors: List of errors in case of a failure 
            
            * Property is read-only.
            
            
        :type  resources: :class:`list` of :class:`Resource` or ``None``
        :param resources: List of resources associated with sub-task 
            
            * Property is read-only.
            
            
        :type  sub_tasks: :class:`list` of :class:`SubTask` or ``None``
        :param sub_tasks: List of child subtasks associated with this subtask 
            
            * Property is read-only.
            
            
        :type  documentation_link: :class:`DocumentationLink` or ``None``
        :param documentation_link:         """
        self.name = name
        self.type = type
        self.description = description
        self.status = status
        self.creation_timestamp = creation_timestamp
        self.completion_timestamp = completion_timestamp
        self.stages = stages
        self.errors = errors
        self.resources = resources
        self.sub_tasks = sub_tasks
        self.documentation_link = documentation_link
        VapiStruct.__init__(self)


SubTask._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sub_task', {
        'name': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'creationTimestamp': type.OptionalType(type.StringType()),
        'completionTimestamp': type.OptionalType(type.StringType()),
        'stages': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Stage'))),
        'errors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Error'))),
        'resources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Resource'))),
        'subTasks': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SubTask'))),
        'documentationLink': type.OptionalType(type.ReferenceType(__name__, 'DocumentationLink')),
    },
    SubTask,
    False,
    None))



class DnsConfiguration(VapiStruct):
    """
    DNS Configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'dnsServers': 'dns_servers',
                            }

    def __init__(self,
                 dns_servers=None,
                ):
        """
        :type  dns_servers: :class:`list` of :class:`DnsServer` or ``None``
        :param dns_servers: List of DNS servers. A maximum of 2 DNS servers are allowed
        """
        self.dns_servers = dns_servers
        VapiStruct.__init__(self)


DnsConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.dns_configuration', {
        'dnsServers': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'DnsServer'))),
    },
    DnsConfiguration,
    False,
    None))



class DnsServer(VapiStruct):
    """
    DNS server details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ipAddress': 'ip_address',
                            'isPrimary': 'is_primary',
                            }

    def __init__(self,
                 ip_address=None,
                 is_primary=None,
                ):
        """
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: IP address/FQDN of DNS server
        :type  is_primary: :class:`bool` or ``None``
        :param is_primary: Is DNS server primary
        """
        self.ip_address = ip_address
        self.is_primary = is_primary
        VapiStruct.__init__(self)


DnsServer._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.dns_server', {
        'ipAddress': type.OptionalType(type.StringType()),
        'isPrimary': type.OptionalType(type.BooleanType()),
    },
    DnsServer,
    False,
    None))



class BackupConfigurationSpec(VapiStruct):
    """
    Backup configuration Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'encryption': 'encryption',
                            'backupLocations': 'backup_locations',
                            'backupSchedules': 'backup_schedules',
                            }

    def __init__(self,
                 encryption=None,
                 backup_locations=None,
                 backup_schedules=None,
                ):
        """
        :type  encryption: :class:`Encryption` or ``None``
        :param encryption:         :type  backup_locations: :class:`list` of :class:`BackupLocation` or ``None``
        :param backup_locations: List of backup locations
        :type  backup_schedules: :class:`list` of :class:`BackupSchedule` or ``None``
        :param backup_schedules: List of backup schedules
        """
        self.encryption = encryption
        self.backup_locations = backup_locations
        self.backup_schedules = backup_schedules
        VapiStruct.__init__(self)


BackupConfigurationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.backup_configuration_spec', {
        'encryption': type.OptionalType(type.ReferenceType(__name__, 'Encryption')),
        'backupLocations': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BackupLocation'))),
        'backupSchedules': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BackupSchedule'))),
    },
    BackupConfigurationSpec,
    False,
    None))



class BackupLocation(VapiStruct):
    """
    Backup location to backup VCF resources

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'server': 'server',
                            'port': 'port',
                            'protocol': 'protocol',
                            'username': 'username',
                            'password': 'password',
                            'directoryPath': 'directory_path',
                            'sshFingerprint': 'ssh_fingerprint',
                            }

    def __init__(self,
                 server=None,
                 port=None,
                 protocol=None,
                 username=None,
                 password=None,
                 directory_path=None,
                 ssh_fingerprint=None,
                ):
        """
        :type  server: :class:`str` or ``None``
        :param server: IP address or FQDN of the backup server
        :type  port: :class:`long` or ``None``
        :param port: Port number for the backup server to connect
        :type  protocol: :class:`str` or ``None``
        :param protocol: Protocol to be used for transferring files
        :type  username: :class:`str` or ``None``
        :param username: Backup server username
        :type  password: :class:`str` or ``None``
        :param password: Backup server password
        :type  directory_path: :class:`str` or ``None``
        :param directory_path: Full directory path to save the backup files
        :type  ssh_fingerprint: :class:`str` or ``None``
        :param ssh_fingerprint: SSH fingerprint of the backup server
        """
        self.server = server
        self.port = port
        self.protocol = protocol
        self.username = username
        self.password = password
        self.directory_path = directory_path
        self.ssh_fingerprint = ssh_fingerprint
        VapiStruct.__init__(self)


BackupLocation._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.backup_location', {
        'server': type.OptionalType(type.StringType()),
        'port': type.OptionalType(type.IntegerType()),
        'protocol': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
        'directoryPath': type.OptionalType(type.StringType()),
        'sshFingerprint': type.OptionalType(type.StringType()),
    },
    BackupLocation,
    False,
    None))



class BackupRetentionPolicy(VapiStruct):
    """
    Backup retention policy for SDDC Manager comprising three attributes.
    Backup files are deleted if they do not satisfy any of the three
    attributes.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'numberOfMostRecentBackups': 'number_of_most_recent_backups',
                            'numberOfDaysOfHourlyBackups': 'number_of_days_of_hourly_backups',
                            'numberOfDaysOfDailyBackups': 'number_of_days_of_daily_backups',
                            }

    def __init__(self,
                 number_of_most_recent_backups=None,
                 number_of_days_of_hourly_backups=None,
                 number_of_days_of_daily_backups=None,
                ):
        """
        :type  number_of_most_recent_backups: :class:`long` or ``None``
        :param number_of_most_recent_backups: This attribute controls the number of recent backup files to
            retain. Range 1 to 600 backup files.
        :type  number_of_days_of_hourly_backups: :class:`long` or ``None``
        :param number_of_days_of_hourly_backups: This attribute controls the number of hourly backup files to
            retain, measured in days. Range 0 to 14 days. The system will
            filter the existing backup files, and retain one for every hour for
            the specified number of days, counting back from the most recent
            backup.
        :type  number_of_days_of_daily_backups: :class:`long` or ``None``
        :param number_of_days_of_daily_backups: This attribute controls the number of daily backup files to retain,
            measured in days. Range 0 to 30 days. The system will filter the
            existing backup files, and retain one for every day for the
            specified number of days, counting back from the most recent
            backup.
        """
        self.number_of_most_recent_backups = number_of_most_recent_backups
        self.number_of_days_of_hourly_backups = number_of_days_of_hourly_backups
        self.number_of_days_of_daily_backups = number_of_days_of_daily_backups
        VapiStruct.__init__(self)


BackupRetentionPolicy._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.backup_retention_policy', {
        'numberOfMostRecentBackups': type.OptionalType(type.IntegerType()),
        'numberOfDaysOfHourlyBackups': type.OptionalType(type.IntegerType()),
        'numberOfDaysOfDailyBackups': type.OptionalType(type.IntegerType()),
    },
    BackupRetentionPolicy,
    False,
    None))



class BackupSchedule(VapiStruct):
    """
    Backup schedule configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceType': 'resource_type',
                            'takeScheduledBackups': 'take_scheduled_backups',
                            'frequency': 'frequency',
                            'daysOfWeek': 'days_of_week',
                            'hourOfDay': 'hour_of_day',
                            'minuteOfHour': 'minute_of_hour',
                            'takeBackupOnStateChange': 'take_backup_on_state_change',
                            'retentionPolicy': 'retention_policy',
                            }

    def __init__(self,
                 resource_type=None,
                 take_scheduled_backups=None,
                 frequency=None,
                 days_of_week=None,
                 hour_of_day=None,
                 minute_of_hour=None,
                 take_backup_on_state_change=None,
                 retention_policy=None,
                ):
        """
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Resource type to configure backup schedule
        :type  take_scheduled_backups: :class:`bool` or ``None``
        :param take_scheduled_backups: Enable/disable scheduled backups
        :type  frequency: :class:`str` or ``None``
        :param frequency: Backup frequency
        :type  days_of_week: :class:`list` of :class:`str` or ``None``
        :param days_of_week: List of days of the week to schedule backup
        :type  hour_of_day: :class:`long` or ``None``
        :param hour_of_day: Hour of the day to schedule backup
        :type  minute_of_hour: :class:`long` or ``None``
        :param minute_of_hour: Minute of the hour to schedule backup
        :type  take_backup_on_state_change: :class:`bool` or ``None``
        :param take_backup_on_state_change: Enable/disable backups on state change. If enabled, SDDC Manager
            will take a backup after the successful completion of an operation
            that changes its state. This mode requires that scheduled backups
            be enabled.
        :type  retention_policy: :class:`BackupRetentionPolicy` or ``None``
        :param retention_policy:         """
        self.resource_type = resource_type
        self.take_scheduled_backups = take_scheduled_backups
        self.frequency = frequency
        self.days_of_week = days_of_week
        self.hour_of_day = hour_of_day
        self.minute_of_hour = minute_of_hour
        self.take_backup_on_state_change = take_backup_on_state_change
        self.retention_policy = retention_policy
        VapiStruct.__init__(self)


BackupSchedule._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.backup_schedule', {
        'resourceType': type.OptionalType(type.StringType()),
        'takeScheduledBackups': type.OptionalType(type.BooleanType()),
        'frequency': type.OptionalType(type.StringType()),
        'daysOfWeek': type.OptionalType(type.ListType(type.StringType())),
        'hourOfDay': type.OptionalType(type.IntegerType()),
        'minuteOfHour': type.OptionalType(type.IntegerType()),
        'takeBackupOnStateChange': type.OptionalType(type.BooleanType()),
        'retentionPolicy': type.OptionalType(type.ReferenceType(__name__, 'BackupRetentionPolicy')),
    },
    BackupSchedule,
    False,
    None))



class Encryption(VapiStruct):
    """
    Restore Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'passphrase': 'passphrase',
                            }

    def __init__(self,
                 passphrase=None,
                ):
        """
        :type  passphrase: :class:`str` or ``None``
        :param passphrase: Passphrase
        """
        self.passphrase = passphrase
        VapiStruct.__init__(self)


Encryption._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.encryption', {
        'passphrase': type.OptionalType(type.StringType()),
    },
    Encryption,
    False,
    None))



class LicensingSpec(VapiStruct):
    """
    License Information of resources

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceLicensingInfos': 'resource_licensing_infos',
                            }

    def __init__(self,
                 resource_licensing_infos=None,
                ):
        """
        :type  resource_licensing_infos: :class:`list` of :class:`ResourceLicensingInfo` or ``None``
        :param resource_licensing_infos: List of LicensingInfos of resources
        """
        self.resource_licensing_infos = resource_licensing_infos
        VapiStruct.__init__(self)


LicensingSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.licensing_spec', {
        'resourceLicensingInfos': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ResourceLicensingInfo'))),
    },
    LicensingSpec,
    False,
    None))



class ProductInfo(VapiStruct):
    """
    Product Info and License Key Info

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'licenseKey': 'license_key',
                            'type': 'type',
                            'licensingMode': 'licensing_mode',
                            'licenseKeyStatus': 'license_key_status',
                            'licenseKeyExpirationDate': 'license_key_expiration_date',
                            'errorResponse': 'error_response',
                            }

    def __init__(self,
                 license_key=None,
                 type=None,
                 licensing_mode=None,
                 license_key_status=None,
                 license_key_expiration_date=None,
                 error_response=None,
                ):
        """
        :type  license_key: :class:`str` or ``None``
        :param license_key: License key of product
        :type  type: :class:`str` or ``None``
        :param type: Product type
        :type  licensing_mode: :class:`str` or ``None``
        :param licensing_mode: Licensing Mode 
            
            * Property is read-only.
            
            
        :type  license_key_status: :class:`str` or ``None``
        :param license_key_status: License key status 
            
            * Property is read-only.
            
            
        :type  license_key_expiration_date: :class:`str` or ``None``
        :param license_key_expiration_date: License key expiration date 
            
            * Property is read-only.
            
            
        :type  error_response: :class:`Error` or ``None``
        :param error_response:         """
        self.license_key = license_key
        self.type = type
        self.licensing_mode = licensing_mode
        self.license_key_status = license_key_status
        self.license_key_expiration_date = license_key_expiration_date
        self.error_response = error_response
        VapiStruct.__init__(self)


ProductInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.product_info', {
        'licenseKey': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'licensingMode': type.OptionalType(type.StringType()),
        'licenseKeyStatus': type.OptionalType(type.StringType()),
        'licenseKeyExpirationDate': type.OptionalType(type.StringType()),
        'errorResponse': type.OptionalType(type.ReferenceType(__name__, 'Error')),
    },
    ProductInfo,
    False,
    None))



class ResourceInfo(VapiStruct):
    """
    Resource info

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainId': 'domain_id',
                            'clusterId': 'cluster_id',
                            'hostId': 'host_id',
                            }

    def __init__(self,
                 domain_id=None,
                 cluster_id=None,
                 host_id=None,
                ):
        """
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: Domain Identifier
        :type  cluster_id: :class:`str` or ``None``
        :param cluster_id: Cluster Id of resourceInfo
        :type  host_id: :class:`str` or ``None``
        :param host_id: Host Id of resourceInfo
        """
        self.domain_id = domain_id
        self.cluster_id = cluster_id
        self.host_id = host_id
        VapiStruct.__init__(self)


ResourceInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_info', {
        'domainId': type.OptionalType(type.StringType()),
        'clusterId': type.OptionalType(type.StringType()),
        'hostId': type.OptionalType(type.StringType()),
    },
    ResourceInfo,
    False,
    None))



class ResourceLicensingInfo(VapiStruct):
    """
    Resource Licensing Info

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceInfo': 'resource_info',
                            'productInfo': 'product_info',
                            }

    def __init__(self,
                 resource_info=None,
                 product_info=None,
                ):
        """
        :type  resource_info: :class:`ResourceInfo` or ``None``
        :param resource_info:         :type  product_info: :class:`ProductInfo` or ``None``
        :param product_info:         """
        self.resource_info = resource_info
        self.product_info = product_info
        VapiStruct.__init__(self)


ResourceLicensingInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_licensing_info', {
        'resourceInfo': type.OptionalType(type.ReferenceType(__name__, 'ResourceInfo')),
        'productInfo': type.OptionalType(type.ReferenceType(__name__, 'ProductInfo')),
    },
    ResourceLicensingInfo,
    False,
    None))



class TagAssignmentResult(VapiStruct):
    """
    Represents a Tag Assignment Result

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'success': 'success',
                            'defaultErrorMessages': 'default_error_messages',
                            }

    def __init__(self,
                 success=None,
                 default_error_messages=None,
                ):
        """
        :type  success: :class:`bool` or ``None``
        :param success: Success value of Assign/Detach Tags operation
        :type  default_error_messages: :class:`list` of :class:`str` or ``None``
        :param default_error_messages: Default Error messages for Assign/Detach Tags operation
        """
        self.success = success
        self.default_error_messages = default_error_messages
        VapiStruct.__init__(self)


TagAssignmentResult._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.tag_assignment_result', {
        'success': type.OptionalType(type.BooleanType()),
        'defaultErrorMessages': type.OptionalType(type.ListType(type.StringType())),
    },
    TagAssignmentResult,
    False,
    None))



class TagsSpec(VapiStruct):
    """
    Tags Spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'tagIds': 'tag_ids',
                            }

    def __init__(self,
                 tag_ids=None,
                ):
        """
        :type  tag_ids: :class:`list` of :class:`str` or ``None``
        :param tag_ids: Tag IDs
        """
        self.tag_ids = tag_ids
        VapiStruct.__init__(self)


TagsSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.tags_spec', {
        'tagIds': type.OptionalType(type.ListType(type.StringType())),
    },
    TagsSpec,
    False,
    None))



class ResourceCertificateSpec(VapiStruct):
    """
    This specification contains resource certificate details. Either resourceId
    or resourceFqdn should be provided. Either certificateChain or both
    resourceCertificate and caCertificate should be provided.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceId': 'resource_id',
                            'resourceFqdn': 'resource_fqdn',
                            'resourceCertificate': 'resource_certificate',
                            'caCertificate': 'ca_certificate',
                            'certificateChain': 'certificate_chain',
                            }

    def __init__(self,
                 resource_id=None,
                 resource_fqdn=None,
                 resource_certificate=None,
                 ca_certificate=None,
                 certificate_chain=None,
                ):
        """
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: Resource ID
        :type  resource_fqdn: :class:`str` or ``None``
        :param resource_fqdn: Resource FQDN
        :type  resource_certificate: :class:`str` or ``None``
        :param resource_certificate: Resource Certificate
        :type  ca_certificate: :class:`str` or ``None``
        :param ca_certificate: CA Certificate
        :type  certificate_chain: :class:`str` or ``None``
        :param certificate_chain: Certificate Chain
        """
        self.resource_id = resource_id
        self.resource_fqdn = resource_fqdn
        self.resource_certificate = resource_certificate
        self.ca_certificate = ca_certificate
        self.certificate_chain = certificate_chain
        VapiStruct.__init__(self)


ResourceCertificateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_certificate_spec', {
        'resourceId': type.OptionalType(type.StringType()),
        'resourceFqdn': type.OptionalType(type.StringType()),
        'resourceCertificate': type.OptionalType(type.StringType()),
        'caCertificate': type.OptionalType(type.StringType()),
        'certificateChain': type.OptionalType(type.StringType()),
    },
    ResourceCertificateSpec,
    False,
    None))



class CertificateValidation(VapiStruct):
    """
    The Certificate Validation details.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceId': 'resource_id',
                            'resourceFqdn': 'resource_fqdn',
                            'startTimestamp': 'start_timestamp',
                            'endTimestamp': 'end_timestamp',
                            'validationStatus': 'validation_status',
                            'validationMessage': 'validation_message',
                            }

    def __init__(self,
                 resource_id=None,
                 resource_fqdn=None,
                 start_timestamp=None,
                 end_timestamp=None,
                 validation_status=None,
                 validation_message=None,
                ):
        """
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: Resource ID
        :type  resource_fqdn: :class:`str` or ``None``
        :param resource_fqdn: Resource FQDN
        :type  start_timestamp: :class:`str` or ``None``
        :param start_timestamp: Start Timestamp
        :type  end_timestamp: :class:`str` or ``None``
        :param end_timestamp: End Timestamp
        :type  validation_status: :class:`str` or ``None``
        :param validation_status: Validation Status
        :type  validation_message: :class:`str` or ``None``
        :param validation_message: Validation Message
        """
        self.resource_id = resource_id
        self.resource_fqdn = resource_fqdn
        self.start_timestamp = start_timestamp
        self.end_timestamp = end_timestamp
        self.validation_status = validation_status
        self.validation_message = validation_message
        VapiStruct.__init__(self)


CertificateValidation._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.certificate_validation', {
        'resourceId': type.OptionalType(type.StringType()),
        'resourceFqdn': type.OptionalType(type.StringType()),
        'startTimestamp': type.OptionalType(type.StringType()),
        'endTimestamp': type.OptionalType(type.StringType()),
        'validationStatus': type.OptionalType(type.StringType()),
        'validationMessage': type.OptionalType(type.StringType()),
    },
    CertificateValidation,
    False,
    None))



class CertificateValidationTask(VapiStruct):
    """
    The Certificate Validation Task.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'validationId': 'validation_id',
                            'startTimestamp': 'start_timestamp',
                            'endTimestamp': 'end_timestamp',
                            'completed': 'completed',
                            'validations': 'validations',
                            }

    def __init__(self,
                 validation_id=None,
                 start_timestamp=None,
                 end_timestamp=None,
                 completed=None,
                 validations=None,
                ):
        """
        :type  validation_id: :class:`str` or ``None``
        :param validation_id: Validation ID
        :type  start_timestamp: :class:`str` or ``None``
        :param start_timestamp: Validation Task Start Time
        :type  end_timestamp: :class:`str` or ``None``
        :param end_timestamp: Validation Task End Time
        :type  completed: :class:`bool` or ``None``
        :param completed: Validation Task Completed
        :type  validations: :class:`list` of :class:`CertificateValidation` or ``None``
        :param validations: Resource Certificate Validations
        """
        self.validation_id = validation_id
        self.start_timestamp = start_timestamp
        self.end_timestamp = end_timestamp
        self.completed = completed
        self.validations = validations
        VapiStruct.__init__(self)


CertificateValidationTask._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.certificate_validation_task', {
        'validationId': type.OptionalType(type.StringType()),
        'startTimestamp': type.OptionalType(type.StringType()),
        'endTimestamp': type.OptionalType(type.StringType()),
        'completed': type.OptionalType(type.BooleanType()),
        'validations': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CertificateValidation'))),
    },
    CertificateValidationTask,
    False,
    None))



class CsrGenerationSpec(VapiStruct):
    """
    This specification contains Certificate Signing Request (CSR) details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'country': 'country',
                            'state': 'state',
                            'locality': 'locality',
                            'organization': 'organization',
                            'organizationUnit': 'organization_unit',
                            'email': 'email',
                            'keySize': 'key_size',
                            'keyAlgorithm': 'key_algorithm',
                            }

    def __init__(self,
                 country=None,
                 state=None,
                 locality=None,
                 organization=None,
                 organization_unit=None,
                 email=None,
                 key_size=None,
                 key_algorithm=None,
                ):
        """
        :type  country: :class:`str` or ``None``
        :param country: ISO 3166 country code where company is legally registered
        :type  state: :class:`str` or ``None``
        :param state: The full name of the state where company is legally registered
        :type  locality: :class:`str` or ``None``
        :param locality: The city or locality where company is legally registered
        :type  organization: :class:`str` or ``None``
        :param organization: The name under which company is legally registered
        :type  organization_unit: :class:`str` or ``None``
        :param organization_unit: Organization with which the certificate is associated
        :type  email: :class:`str` or ``None``
        :param email: Contact email address
        :type  key_size: :class:`str` or ``None``
        :param key_size: Certificate public key size
        :type  key_algorithm: :class:`str` or ``None``
        :param key_algorithm: The public key algorithm of the certificate
        """
        self.country = country
        self.state = state
        self.locality = locality
        self.organization = organization
        self.organization_unit = organization_unit
        self.email = email
        self.key_size = key_size
        self.key_algorithm = key_algorithm
        VapiStruct.__init__(self)


CsrGenerationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.csr_generation_spec', {
        'country': type.OptionalType(type.StringType()),
        'state': type.OptionalType(type.StringType()),
        'locality': type.OptionalType(type.StringType()),
        'organization': type.OptionalType(type.StringType()),
        'organizationUnit': type.OptionalType(type.StringType()),
        'email': type.OptionalType(type.StringType()),
        'keySize': type.OptionalType(type.StringType()),
        'keyAlgorithm': type.OptionalType(type.StringType()),
    },
    CsrGenerationSpec,
    False,
    None))



class CsrsGenerationSpec(VapiStruct):
    """
    This specification contains CSR Generation request details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'csrGenerationSpec': 'csr_generation_spec',
                            'resources': 'resources',
                            }

    def __init__(self,
                 csr_generation_spec=None,
                 resources=None,
                ):
        """
        :type  csr_generation_spec: :class:`CsrGenerationSpec` or ``None``
        :param csr_generation_spec:         :type  resources: :class:`list` of :class:`Resource` or ``None``
        :param resources: Resource(s) in a domain
        """
        self.csr_generation_spec = csr_generation_spec
        self.resources = resources
        VapiStruct.__init__(self)


CsrsGenerationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.csrs_generation_spec', {
        'csrGenerationSpec': type.OptionalType(type.ReferenceType(__name__, 'CsrGenerationSpec')),
        'resources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Resource'))),
    },
    CsrsGenerationSpec,
    False,
    None))



class CertificatesGenerationSpec(VapiStruct):
    """
    This specification contains certificates generation request details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'caType': 'ca_type',
                            'resources': 'resources',
                            'validity': 'validity',
                            }

    def __init__(self,
                 ca_type=None,
                 resources=None,
                 validity=None,
                ):
        """
        :type  ca_type: :class:`str` or ``None``
        :param ca_type: CA type. Only supports Microsoft and OpenSSL CAs
        :type  resources: :class:`list` of :class:`Resource` or ``None``
        :param resources: Resource(s) in a domain
        :type  validity: :class:`long` or ``None``
        :param validity: Represents the validity in days of the generated certificate
        """
        self.ca_type = ca_type
        self.resources = resources
        self.validity = validity
        VapiStruct.__init__(self)


CertificatesGenerationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.certificates_generation_spec', {
        'caType': type.OptionalType(type.StringType()),
        'resources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Resource'))),
        'validity': type.OptionalType(type.IntegerType()),
    },
    CertificatesGenerationSpec,
    False,
    None))



class CertificateAuthorityCreationSpec(VapiStruct):
    """
    This specification contains Certificate Authority (CA) creation details.
    Either openSSLCertificateAuthoritySpec or microsoftCertificateAuthoritySpec
    should be specified.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'openSSLCertificateAuthoritySpec': 'open_ssl_certificate_authority_spec',
                            'microsoftCertificateAuthoritySpec': 'microsoft_certificate_authority_spec',
                            }

    def __init__(self,
                 open_ssl_certificate_authority_spec=None,
                 microsoft_certificate_authority_spec=None,
                ):
        """
        :type  open_ssl_certificate_authority_spec: :class:`OpenSSLCertificateAuthoritySpec` or ``None``
        :param open_ssl_certificate_authority_spec:         :type  microsoft_certificate_authority_spec: :class:`MicrosoftCertificateAuthoritySpec` or ``None``
        :param microsoft_certificate_authority_spec:         """
        self.open_ssl_certificate_authority_spec = open_ssl_certificate_authority_spec
        self.microsoft_certificate_authority_spec = microsoft_certificate_authority_spec
        VapiStruct.__init__(self)


CertificateAuthorityCreationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.certificate_authority_creation_spec', {
        'openSSLCertificateAuthoritySpec': type.OptionalType(type.ReferenceType(__name__, 'OpenSSLCertificateAuthoritySpec')),
        'microsoftCertificateAuthoritySpec': type.OptionalType(type.ReferenceType(__name__, 'MicrosoftCertificateAuthoritySpec')),
    },
    CertificateAuthorityCreationSpec,
    False,
    None))



class MicrosoftCertificateAuthoritySpec(VapiStruct):
    """
    This specification contains Microsoft CA configuration details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'username': 'username',
                            'secret': 'secret',
                            'serverUrl': 'server_url',
                            'templateName': 'template_name',
                            }

    def __init__(self,
                 username=None,
                 secret=None,
                 server_url=None,
                 template_name=None,
                ):
        """
        :type  username: :class:`str` or ``None``
        :param username: CA server username
        :type  secret: :class:`str` or ``None``
        :param secret: CA server password
        :type  server_url: :class:`str` or ``None``
        :param server_url: CA server url
        :type  template_name: :class:`str` or ``None``
        :param template_name: CA server template name
        """
        self.username = username
        self.secret = secret
        self.server_url = server_url
        self.template_name = template_name
        VapiStruct.__init__(self)


MicrosoftCertificateAuthoritySpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.microsoft_certificate_authority_spec', {
        'username': type.OptionalType(type.StringType()),
        'secret': type.OptionalType(type.StringType()),
        'serverUrl': type.OptionalType(type.StringType()),
        'templateName': type.OptionalType(type.StringType()),
    },
    MicrosoftCertificateAuthoritySpec,
    False,
    None))



class OpenSSLCertificateAuthoritySpec(VapiStruct):
    """
    This specification contains OpenSSL CA configuration details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'commonName': 'common_name',
                            'country': 'country',
                            'state': 'state',
                            'locality': 'locality',
                            'organization': 'organization',
                            'organizationUnit': 'organization_unit',
                            }

    def __init__(self,
                 common_name=None,
                 country=None,
                 state=None,
                 locality=None,
                 organization=None,
                 organization_unit=None,
                ):
        """
        :type  common_name: :class:`str` or ``None``
        :param common_name: OpenSSL CA domain name
        :type  country: :class:`str` or ``None``
        :param country: ISO 3166 country code where company is legally registered
        :type  state: :class:`str` or ``None``
        :param state: The full name of the state where company is legally registered
        :type  locality: :class:`str` or ``None``
        :param locality: The city or locality where company is legally registered
        :type  organization: :class:`str` or ``None``
        :param organization: The name under which company is legally registered
        :type  organization_unit: :class:`str` or ``None``
        :param organization_unit: Organization with which the certificate is associated
        """
        self.common_name = common_name
        self.country = country
        self.state = state
        self.locality = locality
        self.organization = organization
        self.organization_unit = organization_unit
        VapiStruct.__init__(self)


OpenSSLCertificateAuthoritySpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.open_SSL_certificate_authority_spec', {
        'commonName': type.OptionalType(type.StringType()),
        'country': type.OptionalType(type.StringType()),
        'state': type.OptionalType(type.StringType()),
        'locality': type.OptionalType(type.StringType()),
        'organization': type.OptionalType(type.StringType()),
        'organizationUnit': type.OptionalType(type.StringType()),
    },
    OpenSSLCertificateAuthoritySpec,
    False,
    None))



class VcfAutomationSpec(VapiStruct):
    """
    Specification for VCF Automation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hostname': 'hostname',
                            'adminUserPassword': 'admin_user_password',
                            'ipPool': 'ip_pool',
                            'internalClusterCidr': 'internal_cluster_cidr',
                            'nodePrefix': 'node_prefix',
                            'useExistingDeployment': 'use_existing_deployment',
                            'version': 'version',
                            'sslThumbprint': 'ssl_thumbprint',
                            }

    def __init__(self,
                 hostname=None,
                 admin_user_password=None,
                 ip_pool=None,
                 internal_cluster_cidr=None,
                 node_prefix=None,
                 use_existing_deployment=None,
                 version=None,
                 ssl_thumbprint=None,
                ):
        """
        :type  hostname: :class:`str` or ``None``
        :param hostname: Host name
        :type  admin_user_password: :class:`str` or ``None``
        :param admin_user_password: Admin user password. If blank the password will be auto-generated.
        :type  ip_pool: :class:`list` of :class:`str` or ``None``
        :param ip_pool: List of IP addresses. For Standard deployment model two IP
            addresses need to be specified and for High Availability four IP
            addresses need to be specified
        :type  internal_cluster_cidr: :class:`str` or ``None``
        :param internal_cluster_cidr: Internal Cluster CIDR. One among: 198.18.0.0/15, 240.0.0.0/15,
            250.0.0.0/15
        :type  node_prefix: :class:`str` or ``None``
        :param node_prefix: Node Prefix. It cannot be blank and must begin and end with an
            alphanumeric character, and can only contain lowercase alphanumeric
            characters or hyphens.
        :type  use_existing_deployment: :class:`bool` or ``None``
        :param use_existing_deployment: Import existing deployment or deploy one.
        :type  version: :class:`str` or ``None``
        :param version: Version
        :type  ssl_thumbprint: :class:`str` or ``None``
        :param ssl_thumbprint: SSL thumbprint (SHA256) of the product's certificate. Need to be
            populated when using existing deployment in order to establish
            trust with the existing product.
        """
        self.hostname = hostname
        self.admin_user_password = admin_user_password
        self.ip_pool = ip_pool
        self.internal_cluster_cidr = internal_cluster_cidr
        self.node_prefix = node_prefix
        self.use_existing_deployment = use_existing_deployment
        self.version = version
        self.ssl_thumbprint = ssl_thumbprint
        VapiStruct.__init__(self)


VcfAutomationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_automation_spec', {
        'hostname': type.OptionalType(type.StringType()),
        'adminUserPassword': type.OptionalType(type.StringType()),
        'ipPool': type.OptionalType(type.ListType(type.StringType())),
        'internalClusterCidr': type.OptionalType(type.StringType()),
        'nodePrefix': type.OptionalType(type.StringType()),
        'useExistingDeployment': type.OptionalType(type.BooleanType()),
        'version': type.OptionalType(type.StringType()),
        'sslThumbprint': type.OptionalType(type.StringType()),
    },
    VcfAutomationSpec,
    False,
    None))



class VcfManagementComponentsInfrastructureSpec(VapiStruct):
    """
    Specification for infrastructure to be used for VCF Management Components
    deployment

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'localRegionNetwork': 'local_region_network',
                            'xRegionNetwork': 'x_region_network',
                            'xregionNetwork': 'xregion_network',
                            }

    def __init__(self,
                 local_region_network=None,
                 x_region_network=None,
                 xregion_network=None,
                ):
        """
        :type  local_region_network: :class:`VcfManagementComponentsNetworkSpec` or ``None``
        :param local_region_network:         :type  x_region_network: :class:`VcfManagementComponentsNetworkSpec` or ``None``
        :param x_region_network:         :type  xregion_network: :class:`VcfManagementComponentsNetworkSpec` or ``None``
        :param xregion_network:         """
        self.local_region_network = local_region_network
        self.x_region_network = x_region_network
        self.xregion_network = xregion_network
        VapiStruct.__init__(self)


VcfManagementComponentsInfrastructureSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_management_components_infrastructure_spec', {
        'localRegionNetwork': type.OptionalType(type.ReferenceType(__name__, 'VcfManagementComponentsNetworkSpec')),
        'xRegionNetwork': type.OptionalType(type.ReferenceType(__name__, 'VcfManagementComponentsNetworkSpec')),
        'xregionNetwork': type.OptionalType(type.ReferenceType(__name__, 'VcfManagementComponentsNetworkSpec')),
    },
    VcfManagementComponentsInfrastructureSpec,
    False,
    None))



class VcfManagementComponentsNetworkSpec(VapiStruct):
    """
    Specification for network to be used for VCF Management Components
    deployment

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'networkName': 'network_name',
                            'subnetMask': 'subnet_mask',
                            'gateway': 'gateway',
                            }

    def __init__(self,
                 network_name=None,
                 subnet_mask=None,
                 gateway=None,
                ):
        """
        :type  network_name: :class:`str` or ``None``
        :param network_name: Name of the network to be used for deployment
        :type  subnet_mask: :class:`str` or ``None``
        :param subnet_mask: Subnet Mask
        :type  gateway: :class:`str` or ``None``
        :param gateway: Gateway
        """
        self.network_name = network_name
        self.subnet_mask = subnet_mask
        self.gateway = gateway
        VapiStruct.__init__(self)


VcfManagementComponentsNetworkSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_management_components_network_spec', {
        'networkName': type.OptionalType(type.StringType()),
        'subnetMask': type.OptionalType(type.StringType()),
        'gateway': type.OptionalType(type.StringType()),
    },
    VcfManagementComponentsNetworkSpec,
    False,
    None))



class VcfManagementComponentsSpec(VapiStruct):
    """
    Specification for VCF Management Components

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vcfOperationsFleetManagementSpec': 'vcf_operations_fleet_management_spec',
                            'vcfOperationsSpec': 'vcf_operations_spec',
                            'vcfOperationsCollectorSpec': 'vcf_operations_collector_spec',
                            'vcfAutomationSpec': 'vcf_automation_spec',
                            'vcfMangementComponentsInfrastructureSpec': 'vcf_mangement_components_infrastructure_spec',
                            'vcfInstanceName': 'vcf_instance_name',
                            'existingDataStore': 'existing_data_store',
                            'workflowType': 'workflow_type',
                            }

    def __init__(self,
                 vcf_operations_fleet_management_spec=None,
                 vcf_operations_spec=None,
                 vcf_operations_collector_spec=None,
                 vcf_automation_spec=None,
                 vcf_mangement_components_infrastructure_spec=None,
                 vcf_instance_name=None,
                 existing_data_store=None,
                 workflow_type=None,
                ):
        """
        :type  vcf_operations_fleet_management_spec: :class:`VcfOperationsFleetManagementSpec` or ``None``
        :param vcf_operations_fleet_management_spec:         :type  vcf_operations_spec: :class:`VcfOperationsSpec` or ``None``
        :param vcf_operations_spec:         :type  vcf_operations_collector_spec: :class:`VcfOperationsCollectorSpec` or ``None``
        :param vcf_operations_collector_spec:         :type  vcf_automation_spec: :class:`VcfAutomationSpec` or ``None``
        :param vcf_automation_spec:         :type  vcf_mangement_components_infrastructure_spec: :class:`VcfManagementComponentsInfrastructureSpec` or ``None``
        :param vcf_mangement_components_infrastructure_spec:         :type  vcf_instance_name: :class:`str` or ``None``
        :param vcf_instance_name: Specification for VCF Instance Name
        :type  existing_data_store: :class:`str` or ``None``
        :param existing_data_store: Existing data store for VCF Operations Fleet management deployment
        :type  workflow_type: :class:`str` or ``None``
        :param workflow_type: Type of workflow to initiate creation and/or validation
        """
        self.vcf_operations_fleet_management_spec = vcf_operations_fleet_management_spec
        self.vcf_operations_spec = vcf_operations_spec
        self.vcf_operations_collector_spec = vcf_operations_collector_spec
        self.vcf_automation_spec = vcf_automation_spec
        self.vcf_mangement_components_infrastructure_spec = vcf_mangement_components_infrastructure_spec
        self.vcf_instance_name = vcf_instance_name
        self.existing_data_store = existing_data_store
        self.workflow_type = workflow_type
        VapiStruct.__init__(self)


VcfManagementComponentsSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_management_components_spec', {
        'vcfOperationsFleetManagementSpec': type.OptionalType(type.ReferenceType(__name__, 'VcfOperationsFleetManagementSpec')),
        'vcfOperationsSpec': type.OptionalType(type.ReferenceType(__name__, 'VcfOperationsSpec')),
        'vcfOperationsCollectorSpec': type.OptionalType(type.ReferenceType(__name__, 'VcfOperationsCollectorSpec')),
        'vcfAutomationSpec': type.OptionalType(type.ReferenceType(__name__, 'VcfAutomationSpec')),
        'vcfMangementComponentsInfrastructureSpec': type.OptionalType(type.ReferenceType(__name__, 'VcfManagementComponentsInfrastructureSpec')),
        'vcfInstanceName': type.OptionalType(type.StringType()),
        'existingDataStore': type.OptionalType(type.StringType()),
        'workflowType': type.OptionalType(type.StringType()),
    },
    VcfManagementComponentsSpec,
    False,
    None))



class VcfOperationsCollectorSpec(VapiStruct):
    """
    Specification for VCF Operations collector

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hostname': 'hostname',
                            'rootUserPassword': 'root_user_password',
                            'applianceSize': 'appliance_size',
                            'useExistingDeployment': 'use_existing_deployment',
                            'version': 'version',
                            'sslThumbprint': 'ssl_thumbprint',
                            }

    def __init__(self,
                 hostname=None,
                 root_user_password=None,
                 appliance_size=None,
                 use_existing_deployment=None,
                 version=None,
                 ssl_thumbprint=None,
                ):
        """
        :type  hostname: :class:`str` or ``None``
        :param hostname: Host name
        :type  root_user_password: :class:`str` or ``None``
        :param root_user_password: Root user password.
        :type  appliance_size: :class:`str` or ``None``
        :param appliance_size: VCF Operations collector appliance size. One among: small,
            standard. Default value if not provided is small
        :type  use_existing_deployment: :class:`bool` or ``None``
        :param use_existing_deployment: Import existing deployment or deploy one.
        :type  version: :class:`str` or ``None``
        :param version: Version
        :type  ssl_thumbprint: :class:`str` or ``None``
        :param ssl_thumbprint: SSL thumbprint (SHA256) of the product's certificate. Need to be
            populated when using existing deployment in order to establish
            trust with the existing product.
        """
        self.hostname = hostname
        self.root_user_password = root_user_password
        self.appliance_size = appliance_size
        self.use_existing_deployment = use_existing_deployment
        self.version = version
        self.ssl_thumbprint = ssl_thumbprint
        VapiStruct.__init__(self)


VcfOperationsCollectorSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_operations_collector_spec', {
        'hostname': type.OptionalType(type.StringType()),
        'rootUserPassword': type.OptionalType(type.StringType()),
        'applianceSize': type.OptionalType(type.StringType()),
        'useExistingDeployment': type.OptionalType(type.BooleanType()),
        'version': type.OptionalType(type.StringType()),
        'sslThumbprint': type.OptionalType(type.StringType()),
    },
    VcfOperationsCollectorSpec,
    False,
    None))



class VcfOperationsFleetManagementSpec(VapiStruct):
    """
    Specification for VCF Operations fleet management

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hostname': 'hostname',
                            'rootUserPassword': 'root_user_password',
                            'adminUserPassword': 'admin_user_password',
                            'useExistingDeployment': 'use_existing_deployment',
                            'version': 'version',
                            'sslThumbprint': 'ssl_thumbprint',
                            }

    def __init__(self,
                 hostname=None,
                 root_user_password=None,
                 admin_user_password=None,
                 use_existing_deployment=None,
                 version=None,
                 ssl_thumbprint=None,
                ):
        """
        :type  hostname: :class:`str` or ``None``
        :param hostname: Host name
        :type  root_user_password: :class:`str` or ``None``
        :param root_user_password: Root user password. Password should be at least 15 characters in
            length. If blank the password will be auto-generated.
        :type  admin_user_password: :class:`str` or ``None``
        :param admin_user_password: Admin user password. If blank the password will be auto-generated.
        :type  use_existing_deployment: :class:`bool` or ``None``
        :param use_existing_deployment: Import existing deployment or deploy one.
        :type  version: :class:`str` or ``None``
        :param version: Version
        :type  ssl_thumbprint: :class:`str` or ``None``
        :param ssl_thumbprint: SSL thumbprint (SHA256) of the product's certificate. Need to be
            populated when using existing deployment in order to establish
            trust with the existing product.
        """
        self.hostname = hostname
        self.root_user_password = root_user_password
        self.admin_user_password = admin_user_password
        self.use_existing_deployment = use_existing_deployment
        self.version = version
        self.ssl_thumbprint = ssl_thumbprint
        VapiStruct.__init__(self)


VcfOperationsFleetManagementSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_operations_fleet_management_spec', {
        'hostname': type.OptionalType(type.StringType()),
        'rootUserPassword': type.OptionalType(type.StringType()),
        'adminUserPassword': type.OptionalType(type.StringType()),
        'useExistingDeployment': type.OptionalType(type.BooleanType()),
        'version': type.OptionalType(type.StringType()),
        'sslThumbprint': type.OptionalType(type.StringType()),
    },
    VcfOperationsFleetManagementSpec,
    False,
    None))



class VcfOperationsNode(VapiStruct):
    """
    Specification for VCF Operations Node

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hostname': 'hostname',
                            'rootUserPassword': 'root_user_password',
                            'type': 'type',
                            'sslThumbprint': 'ssl_thumbprint',
                            }

    def __init__(self,
                 hostname=None,
                 root_user_password=None,
                 type=None,
                 ssl_thumbprint=None,
                ):
        """
        :type  hostname: :class:`str` or ``None``
        :param hostname: Host name
        :type  root_user_password: :class:`str` or ``None``
        :param root_user_password: Root user password.
        :type  type: :class:`str` or ``None``
        :param type: Node type. One among: master, replica, data
        :type  ssl_thumbprint: :class:`str` or ``None``
        :param ssl_thumbprint: SSL thumbprint (SHA256) of the node certificate. Need to be
            populated when using existing VCF Ops deployment.
        """
        self.hostname = hostname
        self.root_user_password = root_user_password
        self.type = type
        self.ssl_thumbprint = ssl_thumbprint
        VapiStruct.__init__(self)


VcfOperationsNode._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_operations_node', {
        'hostname': type.OptionalType(type.StringType()),
        'rootUserPassword': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'sslThumbprint': type.OptionalType(type.StringType()),
    },
    VcfOperationsNode,
    False,
    None))



class VcfOperationsSpec(VapiStruct):
    """
    Specification for VCF Operations

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nodes': 'nodes',
                            'adminUserPassword': 'admin_user_password',
                            'applianceSize': 'appliance_size',
                            'loadBalancerFqdn': 'load_balancer_fqdn',
                            'useExistingDeployment': 'use_existing_deployment',
                            'version': 'version',
                            }

    def __init__(self,
                 nodes=None,
                 admin_user_password=None,
                 appliance_size=None,
                 load_balancer_fqdn=None,
                 use_existing_deployment=None,
                 version=None,
                ):
        """
        :type  nodes: :class:`list` of :class:`VcfOperationsNode` or ``None``
        :param nodes: List of nodes
        :type  admin_user_password: :class:`str` or ``None``
        :param admin_user_password: Admin user password. If blank the password will be auto-generated.
        :type  appliance_size: :class:`str` or ``None``
        :param appliance_size: VCF Operations appliance size. One among: xsmall, small, medium,
            large, xlarge for Simple deployment model and one among: medium,
            large, xlarge for High Availability. Default value if not provided
            is medium for both deployment models.
        :type  load_balancer_fqdn: :class:`str` or ``None``
        :param load_balancer_fqdn: Load Balancer FQDN
        :type  use_existing_deployment: :class:`bool` or ``None``
        :param use_existing_deployment: Import existing deployment or deploy one.
        :type  version: :class:`str` or ``None``
        :param version: Version
        """
        self.nodes = nodes
        self.admin_user_password = admin_user_password
        self.appliance_size = appliance_size
        self.load_balancer_fqdn = load_balancer_fqdn
        self.use_existing_deployment = use_existing_deployment
        self.version = version
        VapiStruct.__init__(self)


VcfOperationsSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_operations_spec', {
        'nodes': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VcfOperationsNode'))),
        'adminUserPassword': type.OptionalType(type.StringType()),
        'applianceSize': type.OptionalType(type.StringType()),
        'loadBalancerFqdn': type.OptionalType(type.StringType()),
        'useExistingDeployment': type.OptionalType(type.BooleanType()),
        'version': type.OptionalType(type.StringType()),
    },
    VcfOperationsSpec,
    False,
    None))



class Validation(VapiStruct):
    """
    Represents a validation with a list of one or more validation checks that
    are performed as part of the validation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'description': 'description',
                            'executionStatus': 'execution_status',
                            'resultStatus': 'result_status',
                            'validationChecks': 'validation_checks',
                            'additionalProperties': 'additional_properties',
                            }

    def __init__(self,
                 id=None,
                 description=None,
                 execution_status=None,
                 result_status=None,
                 validation_checks=None,
                 additional_properties=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the validation 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description of the validation 
            
            * Property is read-only.
            
            
        :type  execution_status: :class:`str` or ``None``
        :param execution_status: Execution status of the validation. One among: IN_PROGRESS, FAILED,
            COMPLETED, UNKNOWN, SKIPPED, CANCELLED, CANCELLATION_IN_PROGRESS 
            
            * Property is read-only.
            
            
        :type  result_status: :class:`str` or ``None``
        :param result_status: Result status of the validation after it has completed its
            execution. One among: SUCCEEDED, FAILED, WARNING, UNKNOWN,
            CANCELLATION_IN_PROGRESS 
            
            * Property is read-only.
            
            
        :type  validation_checks: :class:`list` of :class:`ValidationCheck` or ``None``
        :param validation_checks: List of one or more validation checks that are performed as part of
            the validation 
            
            * Property is read-only.
            
            
        :type  additional_properties: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param additional_properties:         """
        self.id = id
        self.description = description
        self.execution_status = execution_status
        self.result_status = result_status
        self.validation_checks = validation_checks
        self.additional_properties = additional_properties
        VapiStruct.__init__(self)


Validation._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.validation', {
        'id': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'executionStatus': type.OptionalType(type.StringType()),
        'resultStatus': type.OptionalType(type.StringType()),
        'validationChecks': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ValidationCheck'))),
        'additionalProperties': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
    },
    Validation,
    False,
    None))



class ValidationCheck(VapiStruct):
    """
    Represents a validation check

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'description': 'description',
                            'severity': 'severity',
                            'resultStatus': 'result_status',
                            'acknowledge': 'acknowledge',
                            'errorResponse': 'error_response',
                            }

    def __init__(self,
                 description=None,
                 severity=None,
                 result_status=None,
                 acknowledge=None,
                 error_response=None,
                ):
        """
        :type  description: :class:`str` or ``None``
        :param description: Description of the validation check 
            
            * Property is read-only.
            
            
        :type  severity: :class:`str` or ``None``
        :param severity: Severity of the validation check 
            
            * Property is read-only.
            
            
        :type  result_status: :class:`str` or ``None``
        :param result_status: Result status of the validation check after it has completed its
            execution
        :type  acknowledge: :class:`bool` or ``None``
        :param acknowledge: Flag indicating whether the validation check requires
            acknowledgment 
            
            * Property is read-only.
            
            
        :type  error_response: :class:`Error` or ``None``
        :param error_response:         """
        self.description = description
        self.severity = severity
        self.result_status = result_status
        self.acknowledge = acknowledge
        self.error_response = error_response
        VapiStruct.__init__(self)


ValidationCheck._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.validation_check', {
        'description': type.OptionalType(type.StringType()),
        'severity': type.OptionalType(type.StringType()),
        'resultStatus': type.OptionalType(type.StringType()),
        'acknowledge': type.OptionalType(type.BooleanType()),
        'errorResponse': type.OptionalType(type.ReferenceType(__name__, 'Error')),
    },
    ValidationCheck,
    False,
    None))



class AddOn(VapiStruct):
    """
    AddOn contains bits to install/update the appropriate Cloud Foundation
    software components in a domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'name': 'name',
                            'vendor': 'vendor',
                            'displayName': 'display_name',
                            'displayVersion': 'display_version',
                            }

    def __init__(self,
                 version=None,
                 name=None,
                 vendor=None,
                 display_name=None,
                 display_version=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: AddOn software version 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: AddOn name 
            
            * Property is read-only.
            
            
        :type  vendor: :class:`str` or ``None``
        :param vendor: AddOn vendor 
            
            * Property is read-only.
            
            
        :type  display_name: :class:`str` or ``None``
        :param display_name: AddOn display name 
            
            * Property is read-only.
            
            
        :type  display_version: :class:`str` or ``None``
        :param display_version: AddOn display version 
            
            * Property is read-only.
            
            
        """
        self.version = version
        self.name = name
        self.vendor = vendor
        self.display_name = display_name
        self.display_version = display_version
        VapiStruct.__init__(self)


AddOn._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.add_on', {
        'version': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'vendor': type.OptionalType(type.StringType()),
        'displayName': type.OptionalType(type.StringType()),
        'displayVersion': type.OptionalType(type.StringType()),
    },
    AddOn,
    False,
    None))



class AlternativeImage(VapiStruct):
    """
    Alternative Image Software contains base os, components, hardware support,
    addOn metadata to install/update the appropriate Cloud Foundation software
    components in a domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'displayName': 'display_name',
                            'baseImage': 'base_image',
                            'addOn': 'add_on',
                            'components': 'components',
                            'solutions': 'solutions',
                            'firmwareAndDriverPackages': 'firmware_and_driver_packages',
                            'removedComponents': 'removed_components',
                            'selectionCriteria': 'selection_criteria',
                            }

    def __init__(self,
                 display_name=None,
                 base_image=None,
                 add_on=None,
                 components=None,
                 solutions=None,
                 firmware_and_driver_packages=None,
                 removed_components=None,
                 selection_criteria=None,
                ):
        """
        :type  display_name: :class:`str` or ``None``
        :param display_name: Alternative image display name 
            
            * Property is read-only.
            
            
        :type  base_image: :class:`BaseImage` or ``None``
        :param base_image:         :type  add_on: :class:`AddOn` or ``None``
        :param add_on:         :type  components: :class:`list` of :class:`Component` or ``None``
        :param components: Alternative image components 
            
            * Property is read-only.
            
            
        :type  solutions: :class:`list` of :class:`Solution` or ``None``
        :param solutions: Alternative image solutions 
            
            * Property is read-only.
            
            
        :type  firmware_and_driver_packages: :class:`list` of :class:`FirmwareAndDriverPackage` or ``None``
        :param firmware_and_driver_packages: Alternative image firmware and driver packages 
            
            * Property is read-only.
            
            
        :type  removed_components: :class:`list` of :class:`Component` or ``None``
        :param removed_components: Alternative image components 
            
            * Property is read-only.
            
            
        :type  selection_criteria: :class:`SelectionCriteria` or ``None``
        :param selection_criteria:         """
        self.display_name = display_name
        self.base_image = base_image
        self.add_on = add_on
        self.components = components
        self.solutions = solutions
        self.firmware_and_driver_packages = firmware_and_driver_packages
        self.removed_components = removed_components
        self.selection_criteria = selection_criteria
        VapiStruct.__init__(self)


AlternativeImage._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.alternative_image', {
        'displayName': type.OptionalType(type.StringType()),
        'baseImage': type.OptionalType(type.ReferenceType(__name__, 'BaseImage')),
        'addOn': type.OptionalType(type.ReferenceType(__name__, 'AddOn')),
        'components': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Component'))),
        'solutions': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Solution'))),
        'firmwareAndDriverPackages': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'FirmwareAndDriverPackage'))),
        'removedComponents': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Component'))),
        'selectionCriteria': type.OptionalType(type.ReferenceType(__name__, 'SelectionCriteria')),
    },
    AlternativeImage,
    False,
    None))



class BaseImage(VapiStruct):
    """
    BaseImage contains bits to install/update the appropriate Cloud Foundation
    software components in a domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'displayName': 'display_name',
                            'displayVersion': 'display_version',
                            'releaseDate': 'release_date',
                            'releaseTimestamp': 'release_timestamp',
                            'quickPatchCompatibleVersions': 'quick_patch_compatible_versions',
                            }

    def __init__(self,
                 version=None,
                 display_name=None,
                 display_version=None,
                 release_date=None,
                 release_timestamp=None,
                 quick_patch_compatible_versions=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: BaseImage Version 
            
            * Property is read-only.
            
            
        :type  display_name: :class:`str` or ``None``
        :param display_name: BaseImage display name 
            
            * Property is read-only.
            
            
        :type  display_version: :class:`str` or ``None``
        :param display_version: BaseImage display version 
            
            * Property is read-only.
            
            
        :type  release_date: :class:`str` or ``None``
        :param release_date: BaseImage release date 
            
            * Property is read-only.
            
            
        :type  release_timestamp: :class:`str` or ``None``
        :param release_timestamp: Timestamp of BaseImage release 
            
            * Property is read-only.
            
            
        :type  quick_patch_compatible_versions: :class:`list` of :class:`QuickPatchCompatibleVersion` or ``None``
        :param quick_patch_compatible_versions: ESX Quick Patch compatible source image versions 
            
            * Property is read-only.
            
            
        """
        self.version = version
        self.display_name = display_name
        self.display_version = display_version
        self.release_date = release_date
        self.release_timestamp = release_timestamp
        self.quick_patch_compatible_versions = quick_patch_compatible_versions
        VapiStruct.__init__(self)


BaseImage._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.base_image', {
        'version': type.OptionalType(type.StringType()),
        'displayName': type.OptionalType(type.StringType()),
        'displayVersion': type.OptionalType(type.StringType()),
        'releaseDate': type.OptionalType(type.StringType()),
        'releaseTimestamp': type.OptionalType(type.StringType()),
        'quickPatchCompatibleVersions': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'QuickPatchCompatibleVersion'))),
    },
    BaseImage,
    False,
    None))



class Component(VapiStruct):
    """
    Component contains bits to install/update the appropriate Cloud Foundation
    software components in a domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'version': 'version',
                            'vendor': 'vendor',
                            'displayName': 'display_name',
                            'displayVersion': 'display_version',
                            }

    def __init__(self,
                 id=None,
                 version=None,
                 vendor=None,
                 display_name=None,
                 display_version=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Component ID 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: Component version 
            
            * Property is read-only.
            
            
        :type  vendor: :class:`str` or ``None``
        :param vendor: Component vendor 
            
            * Property is read-only.
            
            
        :type  display_name: :class:`str` or ``None``
        :param display_name: Component display name 
            
            * Property is read-only.
            
            
        :type  display_version: :class:`str` or ``None``
        :param display_version: Component display version 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.version = version
        self.vendor = vendor
        self.display_name = display_name
        self.display_version = display_version
        VapiStruct.__init__(self)


Component._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.component', {
        'id': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'vendor': type.OptionalType(type.StringType()),
        'displayName': type.OptionalType(type.StringType()),
        'displayVersion': type.OptionalType(type.StringType()),
    },
    Component,
    False,
    None))



class FirmwareAndDriverPackage(VapiStruct):
    """
    Firmware and Driver Package contains metadata regarding the package,
    version to install/update the appropriate Cloud Foundation software
    components in a domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'pkg': 'pkg',
                            'version': 'version',
                            }

    def __init__(self,
                 id=None,
                 pkg=None,
                 version=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Firmware and Driver Package ID 
            
            * Property is read-only.
            
            
        :type  pkg: :class:`str` or ``None``
        :param pkg: Firmware and Driver Package name 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: Firmware and Driver Package version 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.pkg = pkg
        self.version = version
        VapiStruct.__init__(self)


FirmwareAndDriverPackage._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.firmware_and_driver_package', {
        'id': type.OptionalType(type.StringType()),
        'pkg': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
    },
    FirmwareAndDriverPackage,
    False,
    None))



class HostHardware(VapiStruct):
    """
    Host hardware spec to denote a category of hosts

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vendor': 'vendor',
                            'models': 'models',
                            'families': 'families',
                            'oemStrings': 'oem_strings',
                            }

    def __init__(self,
                 vendor=None,
                 models=None,
                 families=None,
                 oem_strings=None,
                ):
        """
        :type  vendor: :class:`str` or ``None``
        :param vendor: Vendor name 
            
            * Property is read-only.
            
            
        :type  models: :class:`list` of :class:`str` or ``None``
        :param models: Vendor models (will not be used for image selection) 
            
            * Items must be unique.
            * Property is read-only.
            
            
        :type  families: :class:`list` of :class:`str` or ``None``
        :param families: Vendor families (will not be used for image selection) 
            
            * Items must be unique.
            * Property is read-only.
            
            
        :type  oem_strings: :class:`list` of :class:`str` or ``None``
        :param oem_strings: OEM Strings (will not be used for image selection) 
            
            * Items must be unique.
            * Property is read-only.
            
            
        """
        self.vendor = vendor
        self.models = models
        self.families = families
        self.oem_strings = oem_strings
        VapiStruct.__init__(self)


HostHardware._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_hardware', {
        'vendor': type.OptionalType(type.StringType()),
        'models': type.OptionalType(type.ListType(type.StringType())),
        'families': type.OptionalType(type.ListType(type.StringType())),
        'oemStrings': type.OptionalType(type.ListType(type.StringType())),
    },
    HostHardware,
    False,
    None))



class PageRepositoryImage(VapiStruct):
    """
    Represents a page of elements of a single type

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`RepositoryImage` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageRepositoryImage._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_repository_image', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'RepositoryImage'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageRepositoryImage,
    False,
    None))



class QueryInfo(VapiStruct):
    """
    Represents the query info.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'status': 'status',
                            'queryId': 'query_id',
                            'errorResponse': 'error_response',
                            'failure': 'failure',
                            'completed': 'completed',
                            'processing': 'processing',
                            }

    def __init__(self,
                 status=None,
                 query_id=None,
                 error_response=None,
                 failure=None,
                 completed=None,
                 processing=None,
                ):
        """
        :type  status: :class:`str` or ``None``
        :param status: Status of the query 
            
            * Property is read-only.
            
            
        :type  query_id: :class:`str` or ``None``
        :param query_id: ID of the query to retrieve 
            
            * Property is read-only.
            
            
        :type  error_response: :class:`Error` or ``None``
        :param error_response:         :type  failure: :class:`bool` or ``None``
        :param failure:         :type  completed: :class:`bool` or ``None``
        :param completed:         :type  processing: :class:`bool` or ``None``
        :param processing:         """
        self.status = status
        self.query_id = query_id
        self.error_response = error_response
        self.failure = failure
        self.completed = completed
        self.processing = processing
        VapiStruct.__init__(self)


QueryInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.query_info', {
        'status': type.OptionalType(type.StringType()),
        'queryId': type.OptionalType(type.StringType()),
        'errorResponse': type.OptionalType(type.ReferenceType(__name__, 'Error')),
        'failure': type.OptionalType(type.BooleanType()),
        'completed': type.OptionalType(type.BooleanType()),
        'processing': type.OptionalType(type.BooleanType()),
    },
    QueryInfo,
    False,
    None))



class QuickPatchCompatibleVersion(VapiStruct):
    """
    ESX Quick Patch compatible source image version details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'displayVersion': 'display_version',
                            }

    def __init__(self,
                 version=None,
                 display_version=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: Source Image full version 
            
            * Property is read-only.
            
            
        :type  display_version: :class:`str` or ``None``
        :param display_version: Source Image display version 
            
            * Property is read-only.
            
            
        """
        self.version = version
        self.display_version = display_version
        VapiStruct.__init__(self)


QuickPatchCompatibleVersion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.quick_patch_compatible_version', {
        'version': type.OptionalType(type.StringType()),
        'displayVersion': type.OptionalType(type.StringType()),
    },
    QuickPatchCompatibleVersion,
    False,
    None))



class RepositoryImage(VapiStruct):
    """
    Repository image

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'repositoryImageId': 'repository_image_id',
                            'creationTime': 'creation_time',
                            'modifiedTime': 'modified_time',
                            'repositoryImageSoftware': 'repository_image_software',
                            }

    def __init__(self,
                 name=None,
                 repository_image_id=None,
                 creation_time=None,
                 modified_time=None,
                 repository_image_software=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Repository image name 
            
            * Property is read-only.
            
            
        :type  repository_image_id: :class:`RepositoryImageId` or ``None``
        :param repository_image_id:         :type  creation_time: :class:`str` or ``None``
        :param creation_time: Timestamp describing when this software specification was created 
            
            * Property is read-only.
            
            
        :type  modified_time: :class:`str` or ``None``
        :param modified_time: Timestamp describing when this software specification was last
            modified 
            
            * Property is read-only.
            
            
        :type  repository_image_software: :class:`RepositoryImageSoftware` or ``None``
        :param repository_image_software:         """
        self.name = name
        self.repository_image_id = repository_image_id
        self.creation_time = creation_time
        self.modified_time = modified_time
        self.repository_image_software = repository_image_software
        VapiStruct.__init__(self)


RepositoryImage._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.repository_image', {
        'name': type.OptionalType(type.StringType()),
        'repositoryImageId': type.OptionalType(type.ReferenceType(__name__, 'RepositoryImageId')),
        'creationTime': type.OptionalType(type.StringType()),
        'modifiedTime': type.OptionalType(type.StringType()),
        'repositoryImageSoftware': type.OptionalType(type.ReferenceType(__name__, 'RepositoryImageSoftware')),
    },
    RepositoryImage,
    False,
    None))



class RepositoryImageId(VapiStruct):
    """
    Repository image identifier

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vCenterImageId': 'v_center_image_id',
                            'vCenterId': 'v_center_id',
                            }

    def __init__(self,
                 v_center_image_id=None,
                 v_center_id=None,
                ):
        """
        :type  v_center_image_id: :class:`str` or ``None``
        :param v_center_image_id: Repository image ID 
            
            * Property is read-only.
            
            
        :type  v_center_id: :class:`str` or ``None``
        :param v_center_id: vCenter ID 
            
            * Property is read-only.
            
            
        """
        self.v_center_image_id = v_center_image_id
        self.v_center_id = v_center_id
        VapiStruct.__init__(self)


RepositoryImageId._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.repository_image_id', {
        'vCenterImageId': type.OptionalType(type.StringType()),
        'vCenterId': type.OptionalType(type.StringType()),
    },
    RepositoryImageId,
    False,
    None))



class RepositoryImageQueryResponse(VapiStruct):
    """
    Query response for repository images

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'errors': 'errors',
                            'queryInfo': 'query_info',
                            'result': 'result',
                            }

    def __init__(self,
                 errors=None,
                 query_info=None,
                 result=None,
                ):
        """
        :type  errors: :class:`list` of :class:`ResourceError` or ``None``
        :param errors: Errors associated to resources for which the query failed 
            
            * Property is read-only.
            
            
        :type  query_info: :class:`QueryInfo` or ``None``
        :param query_info:         :type  result: :class:`PageRepositoryImage` or ``None``
        :param result:         """
        self.errors = errors
        self.query_info = query_info
        self.result = result
        VapiStruct.__init__(self)


RepositoryImageQueryResponse._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.repository_image_query_response', {
        'errors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ResourceError'))),
        'queryInfo': type.OptionalType(type.ReferenceType(__name__, 'QueryInfo')),
        'result': type.OptionalType(type.ReferenceType(__name__, 'PageRepositoryImage')),
    },
    RepositoryImageQueryResponse,
    False,
    None))



class RepositoryImageSoftware(VapiStruct):
    """
    Repository Image Software contains base os, components, hardware support,
    addOn metadata to install/update the appropriate Cloud Foundation software
    components in a domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'baseImage': 'base_image',
                            'addOn': 'add_on',
                            'components': 'components',
                            'solutions': 'solutions',
                            'firmwareAndDriverPackages': 'firmware_and_driver_packages',
                            'removedComponents': 'removed_components',
                            'alternativeImages': 'alternative_images',
                            }

    def __init__(self,
                 base_image=None,
                 add_on=None,
                 components=None,
                 solutions=None,
                 firmware_and_driver_packages=None,
                 removed_components=None,
                 alternative_images=None,
                ):
        """
        :type  base_image: :class:`BaseImage` or ``None``
        :param base_image:         :type  add_on: :class:`AddOn` or ``None``
        :param add_on:         :type  components: :class:`list` of :class:`Component` or ``None``
        :param components: Repository image components 
            
            * Property is read-only.
            
            
        :type  solutions: :class:`list` of :class:`Solution` or ``None``
        :param solutions: Repository image solutions 
            
            * Property is read-only.
            
            
        :type  firmware_and_driver_packages: :class:`list` of :class:`FirmwareAndDriverPackage` or ``None``
        :param firmware_and_driver_packages: Repository image firmware and driver packages 
            
            * Property is read-only.
            
            
        :type  removed_components: :class:`list` of :class:`Component` or ``None``
        :param removed_components: Repository image components 
            
            * Property is read-only.
            
            
        :type  alternative_images: :class:`list` of :class:`AlternativeImage` or ``None``
        :param alternative_images: Alternative images 
            
            * Property is read-only.
            
            
        """
        self.base_image = base_image
        self.add_on = add_on
        self.components = components
        self.solutions = solutions
        self.firmware_and_driver_packages = firmware_and_driver_packages
        self.removed_components = removed_components
        self.alternative_images = alternative_images
        VapiStruct.__init__(self)


RepositoryImageSoftware._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.repository_image_software', {
        'baseImage': type.OptionalType(type.ReferenceType(__name__, 'BaseImage')),
        'addOn': type.OptionalType(type.ReferenceType(__name__, 'AddOn')),
        'components': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Component'))),
        'solutions': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Solution'))),
        'firmwareAndDriverPackages': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'FirmwareAndDriverPackage'))),
        'removedComponents': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Component'))),
        'alternativeImages': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'AlternativeImage'))),
    },
    RepositoryImageSoftware,
    False,
    None))



class ResourceError(VapiStruct):
    """
    Represents error associated with resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'error': 'error',
                            'resource': 'resource',
                            }

    def __init__(self,
                 error=None,
                 resource=None,
                ):
        """
        :type  error: :class:`Error` or ``None``
        :param error:         :type  resource: :class:`SDDCResource` or ``None``
        :param resource:         """
        self.error = error
        self.resource = resource
        VapiStruct.__init__(self)


ResourceError._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_error', {
        'error': type.OptionalType(type.ReferenceType(__name__, 'Error')),
        'resource': type.OptionalType(type.ReferenceType(__name__, 'SDDCResource')),
    },
    ResourceError,
    False,
    None))



class SDDCResource(VapiStruct):
    """
    Represents the SDDC resource in the system

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'type': 'type',
                            'name': 'name',
                            }

    def __init__(self,
                 id=None,
                 type=None,
                 name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Resource ID
        :type  type: :class:`str` or ``None``
        :param type: Resource type
        :type  name: :class:`str` or ``None``
        :param name: Name of the resource
        """
        self.id = id
        self.type = type
        self.name = name
        VapiStruct.__init__(self)


SDDCResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.SDDC_resource', {
        'id': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
    },
    SDDCResource,
    False,
    None))



class SelectionCriteria(VapiStruct):
    """
    Selection criteria to associate a specific alternative image to one or more
    hosts

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'selectionType': 'selection_type',
                            'hostUuids': 'host_uuids',
                            'hostHardware': 'host_hardware',
                            }

    def __init__(self,
                 selection_type=None,
                 host_uuids=None,
                 host_hardware=None,
                ):
        """
        :type  selection_type: :class:`str` or ``None``
        :param selection_type: Host selection type 
            
            * Property is read-only.
            
            
        :type  host_uuids: :class:`list` of :class:`str` or ``None``
        :param host_uuids: Set of host UUIDs 
            
            * Items must be unique.
            * Property is read-only.
            
            
        :type  host_hardware: :class:`HostHardware` or ``None``
        :param host_hardware:         """
        self.selection_type = selection_type
        self.host_uuids = host_uuids
        self.host_hardware = host_hardware
        VapiStruct.__init__(self)


SelectionCriteria._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.selection_criteria', {
        'selectionType': type.OptionalType(type.StringType()),
        'hostUuids': type.OptionalType(type.ListType(type.StringType())),
        'hostHardware': type.OptionalType(type.ReferenceType(__name__, 'HostHardware')),
    },
    SelectionCriteria,
    False,
    None))



class Solution(VapiStruct):
    """
    Solution

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'id': 'id',
                            'version': 'version',
                            'displayName': 'display_name',
                            'displayVersion': 'display_version',
                            'components': 'components',
                            }

    def __init__(self,
                 name=None,
                 id=None,
                 version=None,
                 display_name=None,
                 display_version=None,
                 components=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Solution name 
            
            * Property is read-only.
            
            
        :type  id: :class:`str` or ``None``
        :param id: Solution ID 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: Solution Version 
            
            * Property is read-only.
            
            
        :type  display_name: :class:`str` or ``None``
        :param display_name: Solution display name 
            
            * Property is read-only.
            
            
        :type  display_version: :class:`str` or ``None``
        :param display_version: Solution display version 
            
            * Property is read-only.
            
            
        :type  components: :class:`list` of :class:`Component` or ``None``
        :param components: Solution components 
            
            * Property is read-only.
            
            
        """
        self.name = name
        self.id = id
        self.version = version
        self.display_name = display_name
        self.display_version = display_version
        self.components = components
        VapiStruct.__init__(self)


Solution._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.solution', {
        'name': type.OptionalType(type.StringType()),
        'id': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'displayName': type.OptionalType(type.StringType()),
        'displayVersion': type.OptionalType(type.StringType()),
        'components': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Component'))),
    },
    Solution,
    False,
    None))



class RepositoryImageQuerySpec(VapiStruct):
    """
    Query spec for repository images

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vCenterIds': 'v_center_ids',
                            }

    def __init__(self,
                 v_center_ids=None,
                ):
        """
        :type  v_center_ids: :class:`list` of :class:`str` or ``None``
        :param v_center_ids: List of vCenter IDs
        """
        self.v_center_ids = v_center_ids
        VapiStruct.__init__(self)


RepositoryImageQuerySpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.repository_image_query_spec', {
        'vCenterIds': type.OptionalType(type.ListType(type.StringType())),
    },
    RepositoryImageQuerySpec,
    False,
    None))



class StorageContainer(VapiStruct):
    """
    Storage container representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'protocolType': 'protocol_type',
                            'clusterId': 'cluster_id',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 protocol_type=None,
                 cluster_id=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the storage container 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: Name of the storage container
        :type  protocol_type: :class:`str` or ``None``
        :param protocol_type: Storage protocol type
        :type  cluster_id: :class:`str` or ``None``
        :param cluster_id: ID of the cluster which is using the storage container 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.name = name
        self.protocol_type = protocol_type
        self.cluster_id = cluster_id
        VapiStruct.__init__(self)


StorageContainer._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.storage_container', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'protocolType': type.OptionalType(type.StringType()),
        'clusterId': type.OptionalType(type.StringType()),
    },
    StorageContainer,
    False,
    None))



class VasaProvider(VapiStruct):
    """
    VASA Provider representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'url': 'url',
                            'storageContainers': 'storage_containers',
                            'users': 'users',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 url=None,
                 storage_containers=None,
                 users=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the VASA Provider 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: Name of the VASA Provider
        :type  url: :class:`str` or ``None``
        :param url: URL of the VASA Provider
        :type  storage_containers: :class:`list` of :class:`StorageContainer` or ``None``
        :param storage_containers: List of storage containers associated with the VASA Provider
        :type  users: :class:`list` of :class:`VasaUser` or ``None``
        :param users: List of users associated with the VASA Provider
        """
        self.id = id
        self.name = name
        self.url = url
        self.storage_containers = storage_containers
        self.users = users
        VapiStruct.__init__(self)


VasaProvider._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vasa_provider', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'url': type.OptionalType(type.StringType()),
        'storageContainers': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'StorageContainer'))),
        'users': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VasaUser'))),
    },
    VasaProvider,
    False,
    None))



class VasaUser(VapiStruct):
    """
    VASA User representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'username': 'username',
                            'password': 'password',
                            }

    def __init__(self,
                 id=None,
                 username=None,
                 password=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the VASA User 
            
            * Property is read-only.
            
            
        :type  username: :class:`str` or ``None``
        :param username: VASA User name
        :type  password: :class:`str` or ``None``
        :param password: Password
        """
        self.id = id
        self.username = username
        self.password = password
        VapiStruct.__init__(self)


VasaUser._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vasa_user', {
        'id': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
    },
    VasaUser,
    False,
    None))



class RoleReference(VapiStruct):
    """
    Represents a role reference

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            }

    def __init__(self,
                 id=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the role
        """
        self.id = id
        VapiStruct.__init__(self)


RoleReference._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.role_reference', {
        'id': type.OptionalType(type.StringType()),
    },
    RoleReference,
    False,
    None))



class User(VapiStruct):
    """
    Represents user and its attributes

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'domain': 'domain',
                            'type': 'type',
                            'apiKey': 'api_key',
                            'role': 'role',
                            'creationTimestamp': 'creation_timestamp',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 domain=None,
                 type=None,
                 api_key=None,
                 role=None,
                 creation_timestamp=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The ID of the user
        :type  name: :class:`str` or ``None``
        :param name: The name of the user
        :type  domain: :class:`str` or ``None``
        :param domain: The domain of the user
        :type  type: :class:`str` or ``None``
        :param type: The type of the user
        :type  api_key: :class:`str` or ``None``
        :param api_key: The API key of the user - DEPRECATED
        :type  role: :class:`RoleReference` or ``None``
        :param role:         :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: The timestamp at which the user was created
        """
        self.id = id
        self.name = name
        self.domain = domain
        self.type = type
        self.api_key = api_key
        self.role = role
        self.creation_timestamp = creation_timestamp
        VapiStruct.__init__(self)


User._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.user', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'domain': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'apiKey': type.OptionalType(type.StringType()),
        'role': type.OptionalType(type.ReferenceType(__name__, 'RoleReference')),
        'creationTimestamp': type.OptionalType(type.StringType()),
    },
    User,
    False,
    None))



class PageOfUser(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`User` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfUser._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_user', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'User'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfUser,
    False,
    None))



class CustomISOSpec(VapiStruct):
    """
    Custom ISO Specifications for VUM Clusters Upgrade with Custom ISO

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            }

    def __init__(self,
                 id=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Custom ISO Id for VUM Clusters Upgrade
        """
        self.id = id
        VapiStruct.__init__(self)


CustomISOSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.custom_ISO_spec', {
        'id': type.OptionalType(type.StringType()),
    },
    CustomISOSpec,
    False,
    None))



class EsxUpgradeFailureAction(VapiStruct):
    """
    Esx Upgrade failure actions to be taken if host entering maintenance mode
    failed during esx cluster upgrade

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'retryDelay': 'retry_delay',
                            'retryCount': 'retry_count',
                            'action': 'action',
                            }

    def __init__(self,
                 retry_delay=None,
                 retry_count=None,
                 action=None,
                ):
        """
        :type  retry_delay: :class:`long` or ``None``
        :param retry_delay: Time to wait before we retry the failed operation in seconds. If
            action is RETRY, the value should be between 300 and 3600 seconds.
            If action is FAIL, the value should not be set.
        :type  retry_count: :class:`long` or ``None``
        :param retry_count: Number of times to retry the failed operation. If the action is
            RETRY, the value should be between 3 and 100. If the action is
            FAIL, the value should not be set.
        :type  action: :class:`str` or ``None``
        :param action: Action to be taken if entering maintenance mode fails for a host
        """
        self.retry_delay = retry_delay
        self.retry_count = retry_count
        self.action = action
        VapiStruct.__init__(self)


EsxUpgradeFailureAction._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.esx_upgrade_failure_action', {
        'retryDelay': type.OptionalType(type.IntegerType()),
        'retryCount': type.OptionalType(type.IntegerType()),
        'action': type.OptionalType(type.StringType()),
    },
    EsxUpgradeFailureAction,
    False,
    None))



class EsxUpgradeOptionsSpec(VapiStruct):
    """
    Options for ESXi upgrade. These are applicable to vSphere Lifecycle Manager
    Images based upgrade only.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'esxUpgradeFailureAction': 'esx_upgrade_failure_action',
                            'enforceHclValidation': 'enforce_hcl_validation',
                            'enableQuickPatch': 'enable_quick_patch',
                            'enableQuickboot': 'enable_quickboot',
                            'evacuateOfflineVms': 'evacuate_offline_vms',
                            'disableHac': 'disable_hac',
                            'disableDpm': 'disable_dpm',
                            'preRemediationPowerAction': 'pre_remediation_power_action',
                            }

    def __init__(self,
                 esx_upgrade_failure_action=None,
                 enforce_hcl_validation=None,
                 enable_quick_patch=None,
                 enable_quickboot=None,
                 evacuate_offline_vms=None,
                 disable_hac=None,
                 disable_dpm=None,
                 pre_remediation_power_action=None,
                ):
        """
        :type  esx_upgrade_failure_action: :class:`EsxUpgradeFailureAction` or ``None``
        :param esx_upgrade_failure_action:         :type  enforce_hcl_validation: :class:`bool` or ``None``
        :param enforce_hcl_validation: Flag for enforcing HCL validation for ESXi upgrade, when
            applicable, to prevent remediation if hardware compatibility issues
            are found.
        :type  enable_quick_patch: :class:`bool` or ``None``
        :param enable_quick_patch: Flag for enabling quick patch policy for ESXi upgrade, when
            applicable, to do live remediation and not require full maintenance
            mode or reboot. This option is only applicable to vLCM based ESXi
            upgrade.
        :type  enable_quickboot: :class:`bool` or ``None``
        :param enable_quickboot: Flag for requesting Quick Boot
        :type  evacuate_offline_vms: :class:`bool` or ``None``
        :param evacuate_offline_vms: Flag for requesting Evacuation of Offline VMs
        :type  disable_hac: :class:`bool` or ``None``
        :param disable_hac: Flag for disabling HA admission control on the cluster.
        :type  disable_dpm: :class:`bool` or ``None``
        :param disable_dpm: Flag for disabling DPM on the cluster.
        :type  pre_remediation_power_action: :class:`str` or ``None``
        :param pre_remediation_power_action: Flag for setting VM power state before entering maintenance mode.
        """
        self.esx_upgrade_failure_action = esx_upgrade_failure_action
        self.enforce_hcl_validation = enforce_hcl_validation
        self.enable_quick_patch = enable_quick_patch
        self.enable_quickboot = enable_quickboot
        self.evacuate_offline_vms = evacuate_offline_vms
        self.disable_hac = disable_hac
        self.disable_dpm = disable_dpm
        self.pre_remediation_power_action = pre_remediation_power_action
        VapiStruct.__init__(self)


EsxUpgradeOptionsSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.esx_upgrade_options_spec', {
        'esxUpgradeFailureAction': type.OptionalType(type.ReferenceType(__name__, 'EsxUpgradeFailureAction')),
        'enforceHclValidation': type.OptionalType(type.BooleanType()),
        'enableQuickPatch': type.OptionalType(type.BooleanType()),
        'enableQuickboot': type.OptionalType(type.BooleanType()),
        'evacuateOfflineVms': type.OptionalType(type.BooleanType()),
        'disableHac': type.OptionalType(type.BooleanType()),
        'disableDpm': type.OptionalType(type.BooleanType()),
        'preRemediationPowerAction': type.OptionalType(type.StringType()),
    },
    EsxUpgradeOptionsSpec,
    False,
    None))



class HardwareSupportSpec(VapiStruct):
    """
    Hardware Support Specification for Firmware Upgrade

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'packageSpec': 'package_spec',
                            }

    def __init__(self,
                 name=None,
                 package_spec=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Hardware Support Manager name
        :type  package_spec: :class:`PackageSpec` or ``None``
        :param package_spec:         """
        self.name = name
        self.package_spec = package_spec
        VapiStruct.__init__(self)


HardwareSupportSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.hardware_support_spec', {
        'name': type.OptionalType(type.StringType()),
        'packageSpec': type.OptionalType(type.ReferenceType(__name__, 'PackageSpec')),
    },
    HardwareSupportSpec,
    False,
    None))



class NsxtEdgeClusterUpgradeSpec(VapiStruct):
    """
    NSX Edge cluster upgrade input spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'edgeClusterId': 'edge_cluster_id',
                            'edgeParallelUpgrade': 'edge_parallel_upgrade',
                            }

    def __init__(self,
                 edge_cluster_id=None,
                 edge_parallel_upgrade=None,
                ):
        """
        :type  edge_cluster_id: :class:`str` or ``None``
        :param edge_cluster_id: NSX upgradable resource ID of the edge cluster
        :type  edge_parallel_upgrade: :class:`bool` or ``None``
        :param edge_parallel_upgrade: disable/enable parallel upgrade of edges within the cluster
        """
        self.edge_cluster_id = edge_cluster_id
        self.edge_parallel_upgrade = edge_parallel_upgrade
        VapiStruct.__init__(self)


NsxtEdgeClusterUpgradeSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_edge_cluster_upgrade_spec', {
        'edgeClusterId': type.OptionalType(type.StringType()),
        'edgeParallelUpgrade': type.OptionalType(type.BooleanType()),
    },
    NsxtEdgeClusterUpgradeSpec,
    False,
    None))



class NsxtHostClusterUpgradeSpec(VapiStruct):
    """
    NSX Host cluster upgrade input spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hostClusterId': 'host_cluster_id',
                            'hostParallelUpgrade': 'host_parallel_upgrade',
                            'liveUpgrade': 'live_upgrade',
                            }

    def __init__(self,
                 host_cluster_id=None,
                 host_parallel_upgrade=None,
                 live_upgrade=None,
                ):
        """
        :type  host_cluster_id: :class:`str` or ``None``
        :param host_cluster_id: NSX upgradable resource ID of the host cluster
        :type  host_parallel_upgrade: :class:`bool` or ``None``
        :param host_parallel_upgrade: Flag for disabling/enabling parallel upgrade within the cluster
        :type  live_upgrade: :class:`bool` or ``None``
        :param live_upgrade: Flag for disabling/enabling live upgrade of hosts in the
            transportnode clusters
        """
        self.host_cluster_id = host_cluster_id
        self.host_parallel_upgrade = host_parallel_upgrade
        self.live_upgrade = live_upgrade
        VapiStruct.__init__(self)


NsxtHostClusterUpgradeSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_host_cluster_upgrade_spec', {
        'hostClusterId': type.OptionalType(type.StringType()),
        'hostParallelUpgrade': type.OptionalType(type.BooleanType()),
        'liveUpgrade': type.OptionalType(type.BooleanType()),
    },
    NsxtHostClusterUpgradeSpec,
    False,
    None))



class NsxtUpgradeOptions(VapiStruct):
    """
    NSX Upgrade options

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'isEdgeOnlyUpgrade': 'is_edge_only_upgrade',
                            'isHostClustersUpgradeParallel': 'is_host_clusters_upgrade_parallel',
                            'isEdgeClustersUpgradeParallel': 'is_edge_clusters_upgrade_parallel',
                            }

    def __init__(self,
                 is_edge_only_upgrade=None,
                 is_host_clusters_upgrade_parallel=None,
                 is_edge_clusters_upgrade_parallel=None,
                ):
        """
        :type  is_edge_only_upgrade: :class:`bool` or ``None``
        :param is_edge_only_upgrade: Flag for performing edge-only upgrade
        :type  is_host_clusters_upgrade_parallel: :class:`bool` or ``None``
        :param is_host_clusters_upgrade_parallel: Flag for disabling/enabling parallel upgrade of host transportnode
            clusters
        :type  is_edge_clusters_upgrade_parallel: :class:`bool` or ``None``
        :param is_edge_clusters_upgrade_parallel: Flag for disabling/enabling parallel upgrade of edge transportnode
            clusters
        """
        self.is_edge_only_upgrade = is_edge_only_upgrade
        self.is_host_clusters_upgrade_parallel = is_host_clusters_upgrade_parallel
        self.is_edge_clusters_upgrade_parallel = is_edge_clusters_upgrade_parallel
        VapiStruct.__init__(self)


NsxtUpgradeOptions._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_upgrade_options', {
        'isEdgeOnlyUpgrade': type.OptionalType(type.BooleanType()),
        'isHostClustersUpgradeParallel': type.OptionalType(type.BooleanType()),
        'isEdgeClustersUpgradeParallel': type.OptionalType(type.BooleanType()),
    },
    NsxtUpgradeOptions,
    False,
    None))



class NsxtUpgradeUserInputSpec(VapiStruct):
    """
    NSX Upgrade User Input Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nsxtHostClusterUpgradeSpecs': 'nsxt_host_cluster_upgrade_specs',
                            'nsxtEdgeClusterUpgradeSpecs': 'nsxt_edge_cluster_upgrade_specs',
                            'nsxtUpgradeOptions': 'nsxt_upgrade_options',
                            'nsxtId': 'nsxt_id',
                            }

    def __init__(self,
                 nsxt_host_cluster_upgrade_specs=None,
                 nsxt_edge_cluster_upgrade_specs=None,
                 nsxt_upgrade_options=None,
                 nsxt_id=None,
                ):
        """
        :type  nsxt_host_cluster_upgrade_specs: :class:`list` of :class:`NsxtHostClusterUpgradeSpec` or ``None``
        :param nsxt_host_cluster_upgrade_specs: List of host clusters information if explicit selection is to be
            made
        :type  nsxt_edge_cluster_upgrade_specs: :class:`list` of :class:`NsxtEdgeClusterUpgradeSpec` or ``None``
        :param nsxt_edge_cluster_upgrade_specs: List of edge clusters information if explicit selection is to be
            made
        :type  nsxt_upgrade_options: :class:`NsxtUpgradeOptions` or ``None``
        :param nsxt_upgrade_options:         :type  nsxt_id: :class:`str` or ``None``
        :param nsxt_id: Identifier of the NSX instance
        """
        self.nsxt_host_cluster_upgrade_specs = nsxt_host_cluster_upgrade_specs
        self.nsxt_edge_cluster_upgrade_specs = nsxt_edge_cluster_upgrade_specs
        self.nsxt_upgrade_options = nsxt_upgrade_options
        self.nsxt_id = nsxt_id
        VapiStruct.__init__(self)


NsxtUpgradeUserInputSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_upgrade_user_input_spec', {
        'nsxtHostClusterUpgradeSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtHostClusterUpgradeSpec'))),
        'nsxtEdgeClusterUpgradeSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtEdgeClusterUpgradeSpec'))),
        'nsxtUpgradeOptions': type.OptionalType(type.ReferenceType(__name__, 'NsxtUpgradeOptions')),
        'nsxtId': type.OptionalType(type.StringType()),
    },
    NsxtUpgradeUserInputSpec,
    False,
    None))



class PackageSpec(VapiStruct):
    """
    Hardware Support Package Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'version': 'version',
                            }

    def __init__(self,
                 name=None,
                 version=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Package name
        :type  version: :class:`str` or ``None``
        :param version: Package version
        """
        self.name = name
        self.version = version
        VapiStruct.__init__(self)


PackageSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.package_spec', {
        'name': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
    },
    PackageSpec,
    False,
    None))



class PersonalitySpec(VapiStruct):
    """
    Personality Specification for vLCM based upgrade

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'personalityId': 'personality_id',
                            'hardwareSupportSpecs': 'hardware_support_specs',
                            }

    def __init__(self,
                 personality_id=None,
                 hardware_support_specs=None,
                ):
        """
        :type  personality_id: :class:`str` or ``None``
        :param personality_id: Personality ID for vLCM based Upgrade
        :type  hardware_support_specs: :class:`list` of :class:`HardwareSupportSpec` or ``None``
        :param hardware_support_specs: [Deprecated] Hardware Support Specifications for Firmware upgrade
        """
        self.personality_id = personality_id
        self.hardware_support_specs = hardware_support_specs
        VapiStruct.__init__(self)


PersonalitySpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.personality_spec', {
        'personalityId': type.OptionalType(type.StringType()),
        'hardwareSupportSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HardwareSupportSpec'))),
    },
    PersonalitySpec,
    False,
    None))



class ResourceUpgradeSpec(VapiStruct):
    """
    Resource Upgrade Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceId': 'resource_id',
                            'shutdownVms': 'shutdown_vms',
                            'toVersion': 'to_version',
                            'scheduledTimestamp': 'scheduled_timestamp',
                            'upgradeNow': 'upgrade_now',
                            'personalitySpec': 'personality_spec',
                            'customIsoSpec': 'custom_iso_spec',
                            'enableQuickboot': 'enable_quickboot',
                            'evacuateOfflineVms': 'evacuate_offline_vms',
                            'esxUpgradeOptionsSpec': 'esx_upgrade_options_spec',
                            }

    def __init__(self,
                 resource_id=None,
                 shutdown_vms=None,
                 to_version=None,
                 scheduled_timestamp=None,
                 upgrade_now=None,
                 personality_spec=None,
                 custom_iso_spec=None,
                 enable_quickboot=None,
                 evacuate_offline_vms=None,
                 esx_upgrade_options_spec=None,
                ):
        """
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: Resource ID for Upgrade
        :type  shutdown_vms: :class:`bool` or ``None``
        :param shutdown_vms: If Resource Type is UNASSIGNED_HOST, set flag for enabling shutting
            down VM's before Upgrade
        :type  to_version: :class:`str` or ``None``
        :param to_version: If Resource Type is UNASSIGNED_HOST, set the target version for
            Upgrade
        :type  scheduled_timestamp: :class:`str` or ``None``
        :param scheduled_timestamp: Upgrade Scheduled Time
        :type  upgrade_now: :class:`bool` or ``None``
        :param upgrade_now: Flag for enabling Upgrade Now. If true, scheduledTimestamp is
            ignored
        :type  personality_spec: :class:`PersonalitySpec` or ``None``
        :param personality_spec:         :type  custom_iso_spec: :class:`CustomISOSpec` or ``None``
        :param custom_iso_spec:         :type  enable_quickboot: :class:`bool` or ``None``
        :param enable_quickboot: Flag for requesting Quick Boot for ESXi upgrade
        :type  evacuate_offline_vms: :class:`bool` or ``None``
        :param evacuate_offline_vms: Flag for requesting Evacuation of Offline VMs for ESXi upgrade
        :type  esx_upgrade_options_spec: :class:`EsxUpgradeOptionsSpec` or ``None``
        :param esx_upgrade_options_spec:         """
        self.resource_id = resource_id
        self.shutdown_vms = shutdown_vms
        self.to_version = to_version
        self.scheduled_timestamp = scheduled_timestamp
        self.upgrade_now = upgrade_now
        self.personality_spec = personality_spec
        self.custom_iso_spec = custom_iso_spec
        self.enable_quickboot = enable_quickboot
        self.evacuate_offline_vms = evacuate_offline_vms
        self.esx_upgrade_options_spec = esx_upgrade_options_spec
        VapiStruct.__init__(self)


ResourceUpgradeSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_upgrade_spec', {
        'resourceId': type.OptionalType(type.StringType()),
        'shutdownVms': type.OptionalType(type.BooleanType()),
        'toVersion': type.OptionalType(type.StringType()),
        'scheduledTimestamp': type.OptionalType(type.StringType()),
        'upgradeNow': type.OptionalType(type.BooleanType()),
        'personalitySpec': type.OptionalType(type.ReferenceType(__name__, 'PersonalitySpec')),
        'customIsoSpec': type.OptionalType(type.ReferenceType(__name__, 'CustomISOSpec')),
        'enableQuickboot': type.OptionalType(type.BooleanType()),
        'evacuateOfflineVms': type.OptionalType(type.BooleanType()),
        'esxUpgradeOptionsSpec': type.OptionalType(type.ReferenceType(__name__, 'EsxUpgradeOptionsSpec')),
    },
    ResourceUpgradeSpec,
    False,
    None))



class TemporaryNetwork(VapiStruct):
    """
    Temporary Network for vCenter Upgrade

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'networkMode': 'network_mode',
                            'ipAddress': 'ip_address',
                            'subnetMask': 'subnet_mask',
                            'gateway': 'gateway',
                            }

    def __init__(self,
                 network_mode=None,
                 ip_address=None,
                 subnet_mask=None,
                 gateway=None,
                ):
        """
        :type  network_mode: :class:`str` or ``None``
        :param network_mode: Network mode for target vCenter server
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: IP Address for vCenter Upgrade temporary network
        :type  subnet_mask: :class:`str` or ``None``
        :param subnet_mask: Subnet Mask for vCenter Upgrade temporary network
        :type  gateway: :class:`str` or ``None``
        :param gateway: Gateway for vCenter Upgrade temporary network
        """
        self.network_mode = network_mode
        self.ip_address = ip_address
        self.subnet_mask = subnet_mask
        self.gateway = gateway
        VapiStruct.__init__(self)


TemporaryNetwork._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.temporary_network', {
        'networkMode': type.OptionalType(type.StringType()),
        'ipAddress': type.OptionalType(type.StringType()),
        'subnetMask': type.OptionalType(type.StringType()),
        'gateway': type.OptionalType(type.StringType()),
    },
    TemporaryNetwork,
    False,
    None))



class UpgradeSpec(VapiStruct):
    """
    Upgrade Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'bundleId': 'bundle_id',
                            'resourceType': 'resource_type',
                            'parallelUpgrade': 'parallel_upgrade',
                            'draftMode': 'draft_mode',
                            'resourceUpgradeSpecs': 'resource_upgrade_specs',
                            'nsxtUpgradeUserInputSpecs': 'nsxt_upgrade_user_input_specs',
                            'vcenterUpgradeUserInputSpecs': 'vcenter_upgrade_user_input_specs',
                            }

    def __init__(self,
                 bundle_id=None,
                 resource_type=None,
                 parallel_upgrade=None,
                 draft_mode=None,
                 resource_upgrade_specs=None,
                 nsxt_upgrade_user_input_specs=None,
                 vcenter_upgrade_user_input_specs=None,
                ):
        """
        :type  bundle_id: :class:`str` or ``None``
        :param bundle_id: Bundle ID for Upgrade
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Resource Type for Upgrade
        :type  parallel_upgrade: :class:`bool` or ``None``
        :param parallel_upgrade: Boolean to represent components will be upgraded in parallel on not
        :type  draft_mode: :class:`bool` or ``None``
        :param draft_mode: Boolean to represent upgrade will be created in DRAFT mode. This
            allows to run prechecks before user confirm/commit the upgrade.
        :type  resource_upgrade_specs: :class:`list` of :class:`ResourceUpgradeSpec` or ``None``
        :param resource_upgrade_specs: Resource Upgrade Specifications
        :type  nsxt_upgrade_user_input_specs: :class:`list` of :class:`NsxtUpgradeUserInputSpec` or ``None``
        :param nsxt_upgrade_user_input_specs: Resource Upgrade Specifications for NSX upgrade
        :type  vcenter_upgrade_user_input_specs: :class:`list` of :class:`VcenterUpgradeUserInputSpec` or ``None``
        :param vcenter_upgrade_user_input_specs: User Input for vCenter upgrade
        """
        self.bundle_id = bundle_id
        self.resource_type = resource_type
        self.parallel_upgrade = parallel_upgrade
        self.draft_mode = draft_mode
        self.resource_upgrade_specs = resource_upgrade_specs
        self.nsxt_upgrade_user_input_specs = nsxt_upgrade_user_input_specs
        self.vcenter_upgrade_user_input_specs = vcenter_upgrade_user_input_specs
        VapiStruct.__init__(self)


UpgradeSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.upgrade_spec', {
        'bundleId': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'parallelUpgrade': type.OptionalType(type.BooleanType()),
        'draftMode': type.OptionalType(type.BooleanType()),
        'resourceUpgradeSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ResourceUpgradeSpec'))),
        'nsxtUpgradeUserInputSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtUpgradeUserInputSpec'))),
        'vcenterUpgradeUserInputSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VcenterUpgradeUserInputSpec'))),
    },
    UpgradeSpec,
    False,
    None))



class VcenterUpgradeUserInputSpec(VapiStruct):
    """
    vCenter Upgrade User Input Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceId': 'resource_id',
                            'upgradeMechanism': 'upgrade_mechanism',
                            'startSwitchoverTimestamp': 'start_switchover_timestamp',
                            'temporaryNetwork': 'temporary_network',
                            }

    def __init__(self,
                 resource_id=None,
                 upgrade_mechanism=None,
                 start_switchover_timestamp=None,
                 temporary_network=None,
                ):
        """
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: Resource ID for Upgrade
        :type  upgrade_mechanism: :class:`str` or ``None``
        :param upgrade_mechanism: vCenter upgrade mechanism. This field is only supported for vCenter
            patch upgrades. Minimum supported vCenter target version is 8.0
            Update 3b
        :type  start_switchover_timestamp: :class:`str` or ``None``
        :param start_switchover_timestamp: Start switchover time. This field is only supported for
            ReducedDowntimeMigration upgrade mechanism
        :type  temporary_network: :class:`TemporaryNetwork` or ``None``
        :param temporary_network:         """
        self.resource_id = resource_id
        self.upgrade_mechanism = upgrade_mechanism
        self.start_switchover_timestamp = start_switchover_timestamp
        self.temporary_network = temporary_network
        VapiStruct.__init__(self)


VcenterUpgradeUserInputSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcenter_upgrade_user_input_spec', {
        'resourceId': type.OptionalType(type.StringType()),
        'upgradeMechanism': type.OptionalType(type.StringType()),
        'startSwitchoverTimestamp': type.OptionalType(type.StringType()),
        'temporaryNetwork': type.OptionalType(type.ReferenceType(__name__, 'TemporaryNetwork')),
    },
    VcenterUpgradeUserInputSpec,
    False,
    None))



class TokenCreationSpec(VapiStruct):
    """
    The spec used to sign the token

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'username': 'username',
                            'password': 'password',
                            'apiKey': 'api_key',
                            'idToken': 'id_token',
                            }

    def __init__(self,
                 username=None,
                 password=None,
                 api_key=None,
                 id_token=None,
                ):
        """
        :type  username: :class:`str` or ``None``
        :param username: Username
        :type  password: :class:`str` or ``None``
        :param password: User Password
        :type  api_key: :class:`str` or ``None``
        :param api_key: API Key
        :type  id_token: :class:`str` or ``None``
        :param id_token: Id Token
        """
        self.username = username
        self.password = password
        self.api_key = api_key
        self.id_token = id_token
        VapiStruct.__init__(self)


TokenCreationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.token_creation_spec', {
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
        'apiKey': type.OptionalType(type.StringType()),
        'idToken': type.OptionalType(type.StringType()),
    },
    TokenCreationSpec,
    False,
    None))



class RefreshToken(VapiStruct):
    """
    This contains refresh token id for the user API access.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            }

    def __init__(self,
                 id=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Refresh token id that can be used to request new access token
        """
        self.id = id
        VapiStruct.__init__(self)


RefreshToken._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.refresh_token', {
        'id': type.OptionalType(type.StringType()),
    },
    RefreshToken,
    False,
    None))



class TokenPair(VapiStruct):
    """
    This contains the access token and the refresh token for the user API
    access.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'accessToken': 'access_token',
                            'refreshToken': 'refresh_token',
                            }

    def __init__(self,
                 access_token=None,
                 refresh_token=None,
                ):
        """
        :type  access_token: :class:`str` or ``None``
        :param access_token: Bearer token that can be used to make public API calls
        :type  refresh_token: :class:`RefreshToken` or ``None``
        :param refresh_token:         """
        self.access_token = access_token
        self.refresh_token = refresh_token
        VapiStruct.__init__(self)


TokenPair._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.token_pair', {
        'accessToken': type.OptionalType(type.StringType()),
        'refreshToken': type.OptionalType(type.ReferenceType(__name__, 'RefreshToken')),
    },
    TokenPair,
    False,
    None))



class Domains(VapiStruct):
    """
    Domains and Clusters for SOS operation.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainName': 'domain_name',
                            'clusterNames': 'cluster_names',
                            }

    def __init__(self,
                 domain_name=None,
                 cluster_names=None,
                ):
        """
        :type  domain_name: :class:`str` or ``None``
        :param domain_name: Domain name
        :type  cluster_names: :class:`list` of :class:`str` or ``None``
        :param cluster_names: Clusters for the operation
        """
        self.domain_name = domain_name
        self.cluster_names = cluster_names
        VapiStruct.__init__(self)


Domains._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.domains', {
        'domainName': type.OptionalType(type.StringType()),
        'clusterNames': type.OptionalType(type.ListType(type.StringType())),
    },
    Domains,
    False,
    None))



class Logs(VapiStruct):
    """
    Logs of different components.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vcLogs': 'vc_logs',
                            'nsxLogs': 'nsx_logs',
                            'esxLogs': 'esx_logs',
                            'wcpLogs': 'wcp_logs',
                            'sddcManagerLogs': 'sddc_manager_logs',
                            'apiLogs': 'api_logs',
                            'systemDebugLogs': 'system_debug_logs',
                            'vmScreenshots': 'vm_screenshots',
                            'vraLogs': 'vra_logs',
                            'vropsLogs': 'vrops_logs',
                            'vrliLogs': 'vrli_logs',
                            'vrslcmLogs': 'vrslcm_logs',
                            'automationLogs': 'automation_logs',
                            'operationsLogs': 'operations_logs',
                            'operationsForLogs': 'operations_for_logs',
                            'lifecycleLogs': 'lifecycle_logs',
                            }

    def __init__(self,
                 vc_logs=None,
                 nsx_logs=None,
                 esx_logs=None,
                 wcp_logs=None,
                 sddc_manager_logs=None,
                 api_logs=None,
                 system_debug_logs=None,
                 vm_screenshots=None,
                 vra_logs=None,
                 vrops_logs=None,
                 vrli_logs=None,
                 vrslcm_logs=None,
                 automation_logs=None,
                 operations_logs=None,
                 operations_for_logs=None,
                 lifecycle_logs=None,
                ):
        """
        :type  vc_logs: :class:`bool` or ``None``
        :param vc_logs: Collect vCenter Logs.
        :type  nsx_logs: :class:`bool` or ``None``
        :param nsx_logs: Collect NSX Logs.
        :type  esx_logs: :class:`bool` or ``None``
        :param esx_logs: Collect ESX Logs.
        :type  wcp_logs: :class:`bool` or ``None``
        :param wcp_logs: Collect WCP Logs.
        :type  sddc_manager_logs: :class:`bool` or ``None``
        :param sddc_manager_logs: Collect SDDC Manager Logs.
        :type  api_logs: :class:`bool` or ``None``
        :param api_logs: Collect API Logs.
        :type  system_debug_logs: :class:`bool` or ``None``
        :param system_debug_logs: Collect SystemDebug Logs.
        :type  vm_screenshots: :class:`bool` or ``None``
        :param vm_screenshots: Collect VMScreenshots.
        :type  vra_logs: :class:`bool` or ``None``
        :param vra_logs: [Deprecated] Collect VMware Aria Automation Logs.
        :type  vrops_logs: :class:`bool` or ``None``
        :param vrops_logs: [Deprecated] Collect VMware Aria Operations Logs.
        :type  vrli_logs: :class:`bool` or ``None``
        :param vrli_logs: [Deprecated] Collect VMware Aria Operations for Logs Logs.
        :type  vrslcm_logs: :class:`bool` or ``None``
        :param vrslcm_logs: [Deprecated] Collect VMware Aria Suite Lifecycle Logs.
        :type  automation_logs: :class:`bool` or ``None``
        :param automation_logs: Collect VCF Automation support logs.
        :type  operations_logs: :class:`bool` or ``None``
        :param operations_logs: Collect VCF Operations support logs.
        :type  operations_for_logs: :class:`bool` or ``None``
        :param operations_for_logs: Collect VCF Operations For Logs support logs.
        :type  lifecycle_logs: :class:`bool` or ``None``
        :param lifecycle_logs: Collect VCF Operations Fleet Management support logs.
        """
        self.vc_logs = vc_logs
        self.nsx_logs = nsx_logs
        self.esx_logs = esx_logs
        self.wcp_logs = wcp_logs
        self.sddc_manager_logs = sddc_manager_logs
        self.api_logs = api_logs
        self.system_debug_logs = system_debug_logs
        self.vm_screenshots = vm_screenshots
        self.vra_logs = vra_logs
        self.vrops_logs = vrops_logs
        self.vrli_logs = vrli_logs
        self.vrslcm_logs = vrslcm_logs
        self.automation_logs = automation_logs
        self.operations_logs = operations_logs
        self.operations_for_logs = operations_for_logs
        self.lifecycle_logs = lifecycle_logs
        VapiStruct.__init__(self)


Logs._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.logs', {
        'vcLogs': type.OptionalType(type.BooleanType()),
        'nsxLogs': type.OptionalType(type.BooleanType()),
        'esxLogs': type.OptionalType(type.BooleanType()),
        'wcpLogs': type.OptionalType(type.BooleanType()),
        'sddcManagerLogs': type.OptionalType(type.BooleanType()),
        'apiLogs': type.OptionalType(type.BooleanType()),
        'systemDebugLogs': type.OptionalType(type.BooleanType()),
        'vmScreenshots': type.OptionalType(type.BooleanType()),
        'vraLogs': type.OptionalType(type.BooleanType()),
        'vropsLogs': type.OptionalType(type.BooleanType()),
        'vrliLogs': type.OptionalType(type.BooleanType()),
        'vrslcmLogs': type.OptionalType(type.BooleanType()),
        'automationLogs': type.OptionalType(type.BooleanType()),
        'operationsLogs': type.OptionalType(type.BooleanType()),
        'operationsForLogs': type.OptionalType(type.BooleanType()),
        'lifecycleLogs': type.OptionalType(type.BooleanType()),
    },
    Logs,
    False,
    None))



class SupportBundleConfig(VapiStruct):
    """
    SupportBundle config.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'skipKnownHostCheck': 'skip_known_host_check',
                            'force': 'force',
                            }

    def __init__(self,
                 skip_known_host_check=None,
                 force=None,
                ):
        """
        :type  skip_known_host_check: :class:`bool` or ``None``
        :param skip_known_host_check: Skip known_hosts file for SupportBundle collection.
        :type  force: :class:`bool` or ``None``
        :param force: Run SOS operations, even if there is a Workload running.
        """
        self.skip_known_host_check = skip_known_host_check
        self.force = force
        VapiStruct.__init__(self)


SupportBundleConfig._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.support_bundle_config', {
        'skipKnownHostCheck': type.OptionalType(type.BooleanType()),
        'force': type.OptionalType(type.BooleanType()),
    },
    SupportBundleConfig,
    False,
    None))



class SupportBundleIncludeItems(VapiStruct):
    """
    Sos Additional Reports for Support Bundle.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'summaryReport': 'summary_report',
                            'healthCheck': 'health_check',
                            }

    def __init__(self,
                 summary_report=None,
                 health_check=None,
                ):
        """
        :type  summary_report: :class:`bool` or ``None``
        :param summary_report: Collect Vcf Summary Reports.
        :type  health_check: :class:`bool` or ``None``
        :param health_check: Perform SOS Health checks.
        """
        self.summary_report = summary_report
        self.health_check = health_check
        VapiStruct.__init__(self)


SupportBundleIncludeItems._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.support_bundle_include_items', {
        'summaryReport': type.OptionalType(type.BooleanType()),
        'healthCheck': type.OptionalType(type.BooleanType()),
    },
    SupportBundleIncludeItems,
    False,
    None))



class SupportBundleOption(VapiStruct):
    """
    Sos options for support bundle collection.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'config': 'config',
                            'include': 'include',
                            }

    def __init__(self,
                 config=None,
                 include=None,
                ):
        """
        :type  config: :class:`SupportBundleConfig` or ``None``
        :param config:         :type  include: :class:`SupportBundleIncludeItems` or ``None``
        :param include:         """
        self.config = config
        self.include = include
        VapiStruct.__init__(self)


SupportBundleOption._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.support_bundle_option', {
        'config': type.OptionalType(type.ReferenceType(__name__, 'SupportBundleConfig')),
        'include': type.OptionalType(type.ReferenceType(__name__, 'SupportBundleIncludeItems')),
    },
    SupportBundleOption,
    False,
    None))



class SupportBundleScope(VapiStruct):
    """
    Domain and cluster under which logs should be collected.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'includeFreeHosts': 'include_free_hosts',
                            'domains': 'domains',
                            }

    def __init__(self,
                 include_free_hosts=None,
                 domains=None,
                ):
        """
        :type  include_free_hosts: :class:`bool` or ``None``
        :param include_free_hosts: Include free hosts.
        :type  domains: :class:`list` of :class:`Domains` or ``None``
        :param domains: Domains and Clusters for SOS operation.
        """
        self.include_free_hosts = include_free_hosts
        self.domains = domains
        VapiStruct.__init__(self)


SupportBundleScope._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.support_bundle_scope', {
        'includeFreeHosts': type.OptionalType(type.BooleanType()),
        'domains': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Domains'))),
    },
    SupportBundleScope,
    False,
    None))



class SupportBundleSpec(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'options': 'options',
                            'scope': 'scope',
                            'logs': 'logs',
                            }

    def __init__(self,
                 options=None,
                 scope=None,
                 logs=None,
                ):
        """
        :type  options: :class:`SupportBundleOption` or ``None``
        :param options:         :type  scope: :class:`SupportBundleScope` or ``None``
        :param scope:         :type  logs: :class:`Logs` or ``None``
        :param logs:         """
        self.options = options
        self.scope = scope
        self.logs = logs
        VapiStruct.__init__(self)


SupportBundleSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.support_bundle_spec', {
        'options': type.OptionalType(type.ReferenceType(__name__, 'SupportBundleOption')),
        'scope': type.OptionalType(type.ReferenceType(__name__, 'SupportBundleScope')),
        'logs': type.OptionalType(type.ReferenceType(__name__, 'Logs')),
    },
    SupportBundleSpec,
    False,
    None))



class SupportBundle(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'status': 'status',
                            'creationTimestamp': 'creation_timestamp',
                            'description': 'description',
                            'bundleAvailable': 'bundle_available',
                            'id': 'id',
                            'completionTimestamp': 'completion_timestamp',
                            'bundleName': 'bundle_name',
                            }

    def __init__(self,
                 status=None,
                 creation_timestamp=None,
                 description=None,
                 bundle_available=None,
                 id=None,
                 completion_timestamp=None,
                 bundle_name=None,
                ):
        """
        :type  status: :class:`str` or ``None``
        :param status: Support Bundle Status.
        :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: CreationTimestamp.
        :type  description: :class:`str` or ``None``
        :param description: Name of the Operation.
        :type  bundle_available: :class:`str` or ``None``
        :param bundle_available: Indicate if bundle is available in file system.
        :type  id: :class:`str` or ``None``
        :param id: Id of the Support Bundle task.
        :type  completion_timestamp: :class:`str` or ``None``
        :param completion_timestamp: CompletionTimestamp.
        :type  bundle_name: :class:`str` or ``None``
        :param bundle_name: Name of the Support Bundle.
        """
        self.status = status
        self.creation_timestamp = creation_timestamp
        self.description = description
        self.bundle_available = bundle_available
        self.id = id
        self.completion_timestamp = completion_timestamp
        self.bundle_name = bundle_name
        VapiStruct.__init__(self)


SupportBundle._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.support_bundle', {
        'status': type.OptionalType(type.StringType()),
        'creationTimestamp': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'bundleAvailable': type.OptionalType(type.StringType()),
        'id': type.OptionalType(type.StringType()),
        'completionTimestamp': type.OptionalType(type.StringType()),
        'bundleName': type.OptionalType(type.StringType()),
    },
    SupportBundle,
    False,
    None))



class HealthChecks(VapiStruct):
    """
    Sos Health Checks.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'servicesHealth': 'services_health',
                            'ntpHealth': 'ntp_health',
                            'generalHealth': 'general_health',
                            'certificateHealth': 'certificate_health',
                            'passwordHealth': 'password_health',
                            'connectivityHealth': 'connectivity_health',
                            'computeHealth': 'compute_health',
                            'storageHealth': 'storage_health',
                            'dnsHealth': 'dns_health',
                            'hardwareCompatibilityHealth': 'hardware_compatibility_health',
                            'versionHealth': 'version_health',
                            }

    def __init__(self,
                 services_health=None,
                 ntp_health=None,
                 general_health=None,
                 certificate_health=None,
                 password_health=None,
                 connectivity_health=None,
                 compute_health=None,
                 storage_health=None,
                 dns_health=None,
                 hardware_compatibility_health=None,
                 version_health=None,
                ):
        """
        :type  services_health: :class:`bool` or ``None``
        :param services_health: Performs checks on Services health.
        :type  ntp_health: :class:`bool` or ``None``
        :param ntp_health: Performs NTP checks for components.
        :type  general_health: :class:`bool` or ``None``
        :param general_health: Performs some generic health checks.
        :type  certificate_health: :class:`bool` or ``None``
        :param certificate_health: Performs Certificate health checks.
        :type  password_health: :class:`bool` or ``None``
        :param password_health: Performs Password Expiry checks.
        :type  connectivity_health: :class:`bool` or ``None``
        :param connectivity_health: Performs Connectivity health checks.
        :type  compute_health: :class:`bool` or ``None``
        :param compute_health: Performs Compute Health checks.
        :type  storage_health: :class:`bool` or ``None``
        :param storage_health: Performs Storage Health checks.
        :type  dns_health: :class:`bool` or ``None``
        :param dns_health: Performs DNS Health checks.
        :type  hardware_compatibility_health: :class:`bool` or ``None``
        :param hardware_compatibility_health: Performs HardwareCompatibilityHealth Health checks.
        :type  version_health: :class:`bool` or ``None``
        :param version_health: Perform version checks for VCF components.
        """
        self.services_health = services_health
        self.ntp_health = ntp_health
        self.general_health = general_health
        self.certificate_health = certificate_health
        self.password_health = password_health
        self.connectivity_health = connectivity_health
        self.compute_health = compute_health
        self.storage_health = storage_health
        self.dns_health = dns_health
        self.hardware_compatibility_health = hardware_compatibility_health
        self.version_health = version_health
        VapiStruct.__init__(self)


HealthChecks._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.health_checks', {
        'servicesHealth': type.OptionalType(type.BooleanType()),
        'ntpHealth': type.OptionalType(type.BooleanType()),
        'generalHealth': type.OptionalType(type.BooleanType()),
        'certificateHealth': type.OptionalType(type.BooleanType()),
        'passwordHealth': type.OptionalType(type.BooleanType()),
        'connectivityHealth': type.OptionalType(type.BooleanType()),
        'computeHealth': type.OptionalType(type.BooleanType()),
        'storageHealth': type.OptionalType(type.BooleanType()),
        'dnsHealth': type.OptionalType(type.BooleanType()),
        'hardwareCompatibilityHealth': type.OptionalType(type.BooleanType()),
        'versionHealth': type.OptionalType(type.BooleanType()),
    },
    HealthChecks,
    False,
    None))



class HealthSummaryConfig(VapiStruct):
    """
    HealthSummary config

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'skipKnownHostCheck': 'skip_known_host_check',
                            'force': 'force',
                            }

    def __init__(self,
                 skip_known_host_check=None,
                 force=None,
                ):
        """
        :type  skip_known_host_check: :class:`bool` or ``None``
        :param skip_known_host_check: Skip known_hosts file for HealthSummary.
        :type  force: :class:`bool` or ``None``
        :param force: Run SOS operations, even if there is a Workload running.
        """
        self.skip_known_host_check = skip_known_host_check
        self.force = force
        VapiStruct.__init__(self)


HealthSummaryConfig._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.health_summary_config', {
        'skipKnownHostCheck': type.OptionalType(type.BooleanType()),
        'force': type.OptionalType(type.BooleanType()),
    },
    HealthSummaryConfig,
    False,
    None))



class HealthSummaryIncludeItems(VapiStruct):
    """
    Sos Additional Reports for Health Checks.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'summaryReport': 'summary_report',
                            'precheckReport': 'precheck_report',
                            }

    def __init__(self,
                 summary_report=None,
                 precheck_report=None,
                ):
        """
        :type  summary_report: :class:`bool` or ``None``
        :param summary_report: Collect Vcf Summary Reports
        :type  precheck_report: :class:`bool` or ``None``
        :param precheck_report: [Deprecated] Collect VCF LCM Upgrade Pre-check Reports, Default
            value is False
        """
        self.summary_report = summary_report
        self.precheck_report = precheck_report
        VapiStruct.__init__(self)


HealthSummaryIncludeItems._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.health_summary_include_items', {
        'summaryReport': type.OptionalType(type.BooleanType()),
        'precheckReport': type.OptionalType(type.BooleanType()),
    },
    HealthSummaryIncludeItems,
    False,
    None))



class HealthSummaryOption(VapiStruct):
    """
    Sos options for support health checks.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'config': 'config',
                            'include': 'include',
                            }

    def __init__(self,
                 config=None,
                 include=None,
                ):
        """
        :type  config: :class:`HealthSummaryConfig` or ``None``
        :param config:         :type  include: :class:`HealthSummaryIncludeItems` or ``None``
        :param include:         """
        self.config = config
        self.include = include
        VapiStruct.__init__(self)


HealthSummaryOption._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.health_summary_option', {
        'config': type.OptionalType(type.ReferenceType(__name__, 'HealthSummaryConfig')),
        'include': type.OptionalType(type.ReferenceType(__name__, 'HealthSummaryIncludeItems')),
    },
    HealthSummaryOption,
    False,
    None))



class HealthSummaryScope(VapiStruct):
    """
    Domain and cluster under which logs should be collected.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'includeFreeHosts': 'include_free_hosts',
                            'includeAllDomains': 'include_all_domains',
                            'domains': 'domains',
                            }

    def __init__(self,
                 include_free_hosts=None,
                 include_all_domains=None,
                 domains=None,
                ):
        """
        :type  include_free_hosts: :class:`bool` or ``None``
        :param include_free_hosts: Include free hosts.
        :type  include_all_domains: :class:`bool` or ``None``
        :param include_all_domains: Include all domains for SOS operation.
        :type  domains: :class:`list` of :class:`Domains` or ``None``
        :param domains: Domains and Clusters for SOS operation.
        """
        self.include_free_hosts = include_free_hosts
        self.include_all_domains = include_all_domains
        self.domains = domains
        VapiStruct.__init__(self)


HealthSummaryScope._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.health_summary_scope', {
        'includeFreeHosts': type.OptionalType(type.BooleanType()),
        'includeAllDomains': type.OptionalType(type.BooleanType()),
        'domains': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Domains'))),
    },
    HealthSummaryScope,
    False,
    None))



class HealthSummarySpec(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'options': 'options',
                            'scope': 'scope',
                            'healthChecks': 'health_checks',
                            }

    def __init__(self,
                 options=None,
                 scope=None,
                 health_checks=None,
                ):
        """
        :type  options: :class:`HealthSummaryOption` or ``None``
        :param options:         :type  scope: :class:`HealthSummaryScope` or ``None``
        :param scope:         :type  health_checks: :class:`HealthChecks` or ``None``
        :param health_checks:         """
        self.options = options
        self.scope = scope
        self.health_checks = health_checks
        VapiStruct.__init__(self)


HealthSummarySpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.health_summary_spec', {
        'options': type.OptionalType(type.ReferenceType(__name__, 'HealthSummaryOption')),
        'scope': type.OptionalType(type.ReferenceType(__name__, 'HealthSummaryScope')),
        'healthChecks': type.OptionalType(type.ReferenceType(__name__, 'HealthChecks')),
    },
    HealthSummarySpec,
    False,
    None))



class HealthSummary(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'status': 'status',
                            'creationTimestamp': 'creation_timestamp',
                            'description': 'description',
                            'bundleAvailable': 'bundle_available',
                            'id': 'id',
                            'completionTimestamp': 'completion_timestamp',
                            'bundleName': 'bundle_name',
                            }

    def __init__(self,
                 status=None,
                 creation_timestamp=None,
                 description=None,
                 bundle_available=None,
                 id=None,
                 completion_timestamp=None,
                 bundle_name=None,
                ):
        """
        :type  status: :class:`str` or ``None``
        :param status: Health summary collection status.
        :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: CreationTimestamp.
        :type  description: :class:`str` or ``None``
        :param description: Name of the Operation.
        :type  bundle_available: :class:`str` or ``None``
        :param bundle_available: Indicate if bundle is available in file system.
        :type  id: :class:`str` or ``None``
        :param id: Id of the Support Bundle task.
        :type  completion_timestamp: :class:`str` or ``None``
        :param completion_timestamp: CompletionTimestamp.
        :type  bundle_name: :class:`str` or ``None``
        :param bundle_name: Name of the Support Bundle.
        """
        self.status = status
        self.creation_timestamp = creation_timestamp
        self.description = description
        self.bundle_available = bundle_available
        self.id = id
        self.completion_timestamp = completion_timestamp
        self.bundle_name = bundle_name
        VapiStruct.__init__(self)


HealthSummary._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.health_summary', {
        'status': type.OptionalType(type.StringType()),
        'creationTimestamp': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'bundleAvailable': type.OptionalType(type.StringType()),
        'id': type.OptionalType(type.StringType()),
        'completionTimestamp': type.OptionalType(type.StringType()),
        'bundleName': type.OptionalType(type.StringType()),
    },
    HealthSummary,
    False,
    None))



class CheckSetResourceSelection(VapiStruct):
    """
    Represents a selection of check-set candidates over a given resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceName': 'resource_name',
                            'resourceId': 'resource_id',
                            'resourceType': 'resource_type',
                            'domain': 'domain',
                            'checkSets': 'check_sets',
                            }

    def __init__(self,
                 resource_name=None,
                 resource_id=None,
                 resource_type=None,
                 domain=None,
                 check_sets=None,
                ):
        """
        :type  resource_name: :class:`str` or ``None``
        :param resource_name: Name of the resource
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: Id of the resource
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Type of the resource
        :type  domain: :class:`DomainInfo` or ``None``
        :param domain:         :type  check_sets: :class:`list` of :class:`SelectedCheckSetCandidate` or ``None``
        :param check_sets: Information about the selected check-set candidates
        """
        self.resource_name = resource_name
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.domain = domain
        self.check_sets = check_sets
        VapiStruct.__init__(self)


CheckSetResourceSelection._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.check_set_resource_selection', {
        'resourceName': type.OptionalType(type.StringType()),
        'resourceId': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'domain': type.OptionalType(type.ReferenceType(__name__, 'DomainInfo')),
        'checkSets': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SelectedCheckSetCandidate'))),
    },
    CheckSetResourceSelection,
    False,
    None))



class CheckSetRunInput(VapiStruct):
    """
    Check-set selection for resources

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'queryId': 'query_id',
                            'resources': 'resources',
                            }

    def __init__(self,
                 query_id=None,
                 resources=None,
                ):
        """
        :type  query_id: :class:`str` or ``None``
        :param query_id: Id of the query the selection was based on
        :type  resources: :class:`list` of :class:`CheckSetResourceSelection` or ``None``
        :param resources: Information about the resource and its selection
        """
        self.query_id = query_id
        self.resources = resources
        VapiStruct.__init__(self)


CheckSetRunInput._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.check_set_run_input', {
        'queryId': type.OptionalType(type.StringType()),
        'resources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CheckSetResourceSelection'))),
    },
    CheckSetRunInput,
    False,
    None))



class DomainInfo(VapiStruct):
    """
    Information about the assessed domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """
    DOMAIN_TYPE_MANAGEMENT = "MANAGEMENT"
    """
    Type of the domain

    """
    DOMAIN_TYPE_VI = "VI"
    """
    Type of the domain

    """



    _canonical_to_pep_names = {
                            'domainName': 'domain_name',
                            'domainType': 'domain_type',
                            'domainId': 'domain_id',
                            }

    def __init__(self,
                 domain_name=None,
                 domain_type=None,
                 domain_id=None,
                ):
        """
        :type  domain_name: :class:`str` or ``None``
        :param domain_name: Name of the domain
        :type  domain_type: :class:`str` or ``None``
        :param domain_type: Type of the domain
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: Id of the domain
        """
        self.domain_name = domain_name
        self.domain_type = domain_type
        self.domain_id = domain_id
        VapiStruct.__init__(self)


DomainInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.domain_info', {
        'domainName': type.OptionalType(type.StringType()),
        'domainType': type.OptionalType(type.StringType()),
        'domainId': type.OptionalType(type.StringType()),
    },
    DomainInfo,
    False,
    None))



class SelectedCheckSetCandidate(VapiStruct):
    """
    Selected check-set candidate

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'checkSetId': 'check_set_id',
                            }

    def __init__(self,
                 check_set_id=None,
                ):
        """
        :type  check_set_id: :class:`str` or ``None``
        :param check_set_id: Id of the selected check-set
        """
        self.check_set_id = check_set_id
        VapiStruct.__init__(self)


SelectedCheckSetCandidate._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.selected_check_set_candidate', {
        'checkSetId': type.OptionalType(type.StringType()),
    },
    SelectedCheckSetCandidate,
    False,
    None))



class CheckSetQueryDomainResources(VapiStruct):
    """
    Spec representing a set of resources in a domain to query check-sets for

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainId': 'domain_id',
                            'resources': 'resources',
                            }

    def __init__(self,
                 domain_id=None,
                 resources=None,
                ):
        """
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: Id of the domain to search for resources in
        :type  resources: :class:`list` of :class:`CheckSetQueryResource` or ``None``
        :param resources: Resources in the domain to generate check-set candidates for
        """
        self.domain_id = domain_id
        self.resources = resources
        VapiStruct.__init__(self)


CheckSetQueryDomainResources._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.check_set_query_domain_resources', {
        'domainId': type.OptionalType(type.StringType()),
        'resources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CheckSetQueryResource'))),
    },
    CheckSetQueryDomainResources,
    False,
    None))



class CheckSetQueryInput(VapiStruct):
    """
    Check-set query input

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'checkSetType': 'check_set_type',
                            'domains': 'domains',
                            }

    def __init__(self,
                 check_set_type=None,
                 domains=None,
                ):
        """
        :type  check_set_type: :class:`str` or ``None``
        :param check_set_type: Type of the check sets to query for. e.g. 'UPGRADE'
        :type  domains: :class:`list` of :class:`CheckSetQueryDomainResources` or ``None``
        :param domains: List of domain resources to query check-sets of the given type for
        """
        self.check_set_type = check_set_type
        self.domains = domains
        VapiStruct.__init__(self)


CheckSetQueryInput._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.check_set_query_input', {
        'checkSetType': type.OptionalType(type.StringType()),
        'domains': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CheckSetQueryDomainResources'))),
    },
    CheckSetQueryInput,
    False,
    None))



class CheckSetQueryResource(VapiStruct):
    """
    Resource input to query check-sets for

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceType': 'resource_type',
                            'resourceId': 'resource_id',
                            'resourceTargetVersion': 'resource_target_version',
                            }

    def __init__(self,
                 resource_type=None,
                 resource_id=None,
                 resource_target_version=None,
                ):
        """
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Type of the resource
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: UUID of the resource, if used adds additional filtering
        :type  resource_target_version: :class:`str` or ``None``
        :param resource_target_version: Upgrade target version for the resources
        """
        self.resource_type = resource_type
        self.resource_id = resource_id
        self.resource_target_version = resource_target_version
        VapiStruct.__init__(self)


CheckSetQueryResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.check_set_query_resource', {
        'resourceType': type.OptionalType(type.StringType()),
        'resourceId': type.OptionalType(type.StringType()),
        'resourceTargetVersion': type.OptionalType(type.StringType()),
    },
    CheckSetQueryResource,
    False,
    None))



class CheckSetCandidates(VapiStruct):
    """
    Represents a check-set id that can be used to run checks for a resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'checkSetId': 'check_set_id',
                            'checkSetName': 'check_set_name',
                            'checkSetType': 'check_set_type',
                            }

    def __init__(self,
                 check_set_id=None,
                 check_set_name=None,
                 check_set_type=None,
                ):
        """
        :type  check_set_id: :class:`str` or ``None``
        :param check_set_id: Id of the check-set
        :type  check_set_name: :class:`str` or ``None``
        :param check_set_name: Name of the check-set
        :type  check_set_type: :class:`str` or ``None``
        :param check_set_type: Type of the check-set
        """
        self.check_set_id = check_set_id
        self.check_set_name = check_set_name
        self.check_set_type = check_set_type
        VapiStruct.__init__(self)


CheckSetCandidates._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.check_set_candidates', {
        'checkSetId': type.OptionalType(type.StringType()),
        'checkSetName': type.OptionalType(type.StringType()),
        'checkSetType': type.OptionalType(type.StringType()),
    },
    CheckSetCandidates,
    False,
    None))



class CheckSetQueryResourceResult(VapiStruct):
    """
    Represents a result of a check-set query call for a given resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceName': 'resource_name',
                            'resourceId': 'resource_id',
                            'resourceType': 'resource_type',
                            'resourceVersion': 'resource_version',
                            'domain': 'domain',
                            'checkSets': 'check_sets',
                            'extraContext': 'extra_context',
                            }

    def __init__(self,
                 resource_name=None,
                 resource_id=None,
                 resource_type=None,
                 resource_version=None,
                 domain=None,
                 check_sets=None,
                 extra_context=None,
                ):
        """
        :type  resource_name: :class:`str` or ``None``
        :param resource_name: Name of the resource
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: Id of the resource
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Type of the resource
        :type  resource_version: :class:`str` or ``None``
        :param resource_version: Current version of the resource
        :type  domain: :class:`ResourceDomainInfo` or ``None``
        :param domain:         :type  check_sets: :class:`list` of :class:`CheckSetCandidates` or ``None``
        :param check_sets: Check set candidates to select from
        :type  extra_context: (:class:`dict` of :class:`str` and :class:`vmware.vapi.struct.VapiStruct`) or ``None``
        :param extra_context:         """
        self.resource_name = resource_name
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.resource_version = resource_version
        self.domain = domain
        self.check_sets = check_sets
        self.extra_context = extra_context
        VapiStruct.__init__(self)


CheckSetQueryResourceResult._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.check_set_query_resource_result', {
        'resourceName': type.OptionalType(type.StringType()),
        'resourceId': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'resourceVersion': type.OptionalType(type.StringType()),
        'domain': type.OptionalType(type.ReferenceType(__name__, 'ResourceDomainInfo')),
        'checkSets': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CheckSetCandidates'))),
        'extraContext': type.OptionalType(type.MapType(type.StringType(), type.DynamicStructType('vmware.vapi.dynamic_struct', {}, VapiStruct))),
    },
    CheckSetQueryResourceResult,
    False,
    None))



class CheckSetQueryResult(VapiStruct):
    """
    Represents a result of a check-set query call

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'queryId': 'query_id',
                            'resources': 'resources',
                            }

    def __init__(self,
                 query_id=None,
                 resources=None,
                ):
        """
        :type  query_id: :class:`str` or ``None``
        :param query_id: Id of the query, to be provided in the selection API
        :type  resources: :class:`list` of :class:`CheckSetQueryResourceResult` or ``None``
        :param resources: Resources with check-sets result from the query
        """
        self.query_id = query_id
        self.resources = resources
        VapiStruct.__init__(self)


CheckSetQueryResult._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.check_set_query_result', {
        'queryId': type.OptionalType(type.StringType()),
        'resources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CheckSetQueryResourceResult'))),
    },
    CheckSetQueryResult,
    False,
    None))



class ResourceDomainInfo(VapiStruct):
    """
    Information about the domain the resource belongs to

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """
    DOMAIN_TYPE_MANAGEMENT = "MANAGEMENT"
    """
    Type of the domain

    """
    DOMAIN_TYPE_VI = "VI"
    """
    Type of the domain

    """



    _canonical_to_pep_names = {
                            'domainId': 'domain_id',
                            'domainName': 'domain_name',
                            'domainType': 'domain_type',
                            }

    def __init__(self,
                 domain_id=None,
                 domain_name=None,
                 domain_type=None,
                ):
        """
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: Id of the domain
        :type  domain_name: :class:`str` or ``None``
        :param domain_name: Name of the domain
        :type  domain_type: :class:`str` or ``None``
        :param domain_type: Type of the domain
        """
        self.domain_id = domain_id
        self.domain_name = domain_name
        self.domain_type = domain_type
        VapiStruct.__init__(self)


ResourceDomainInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_domain_info', {
        'domainId': type.OptionalType(type.StringType()),
        'domainName': type.OptionalType(type.StringType()),
        'domainType': type.OptionalType(type.StringType()),
    },
    ResourceDomainInfo,
    False,
    None))



class BrownfieldImportSpec(VapiStruct):
    """
    Brownfield Import Spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainName': 'domain_name',
                            'vcenterAddress': 'vcenter_address',
                            'vcenterSslThumbprint': 'vcenter_ssl_thumbprint',
                            'vcenterSsoUsername': 'vcenter_sso_username',
                            'vcenterSsoPassword': 'vcenter_sso_password',
                            'vcenterRootSshPassword': 'vcenter_root_ssh_password',
                            'backupPassword': 'backup_password',
                            'hostSpecs': 'host_specs',
                            'skipEsxThumbprintValidation': 'skip_esx_thumbprint_validation',
                            'autoProceed': 'auto_proceed',
                            'suppressWarnings': 'suppress_warnings',
                            'localAdminPassword': 'local_admin_password',
                            'nsxtSpec': 'nsxt_spec',
                            }

    def __init__(self,
                 domain_name=None,
                 vcenter_address=None,
                 vcenter_ssl_thumbprint=None,
                 vcenter_sso_username=None,
                 vcenter_sso_password=None,
                 vcenter_root_ssh_password=None,
                 backup_password=None,
                 host_specs=None,
                 skip_esx_thumbprint_validation=None,
                 auto_proceed=None,
                 suppress_warnings=None,
                 local_admin_password=None,
                 nsxt_spec=None,
                ):
        """
        :type  domain_name: :class:`str` or ``None``
        :param domain_name: Name for a domain to import. If not passed, it will be
            auto-generated with the following format:
            'domain-<vcenter_short_hostname>'
        :type  vcenter_address: :class:`str` or ``None``
        :param vcenter_address: vCenter FQDN
        :type  vcenter_ssl_thumbprint: :class:`str` or ``None``
        :param vcenter_ssl_thumbprint: vCenter SSL thumbprint
        :type  vcenter_sso_username: :class:`str` or ``None``
        :param vcenter_sso_username: vCenter SSO username
        :type  vcenter_sso_password: :class:`str` or ``None``
        :param vcenter_sso_password: vCenter SSO password 
            
            * Property is read-only.
            
            
        :type  vcenter_root_ssh_password: :class:`str` or ``None``
        :param vcenter_root_ssh_password: vCenter SSH root password 
            
            * Property is read-only.
            
            
        :type  backup_password: :class:`str` or ``None``
        :param backup_password: SDDC Manager backup user password 
            
            * Property is read-only.
            
            
        :type  host_specs: :class:`list` of :class:`SddcHostSpec` or ``None``
        :param host_specs: List of the vCenter ESXi Hosts with their hostnames and SSH keys
            (sshThumbprint field) to trust. Can be skipped if
            skipEsxThumbprintValidation is set to true.
        :type  skip_esx_thumbprint_validation: :class:`bool` or ``None``
        :param skip_esx_thumbprint_validation: Flag that indicates if ESXi SSH keys should be automatically
            trusted
        :type  auto_proceed: :class:`bool` or ``None``
        :param auto_proceed: When provided, proceed with NSX deployment without confirmation
        :type  suppress_warnings: :class:`bool` or ``None``
        :param suppress_warnings: When provided, import operation will continue even if warnings
            occur
        :type  local_admin_password: :class:`str` or ``None``
        :param local_admin_password: SDDC Manager local admin password 
            
            * Property is read-only.
            
            
        :type  nsxt_spec: :class:`SddcNsxtSpec` or ``None``
        :param nsxt_spec:         """
        self.domain_name = domain_name
        self.vcenter_address = vcenter_address
        self.vcenter_ssl_thumbprint = vcenter_ssl_thumbprint
        self.vcenter_sso_username = vcenter_sso_username
        self.vcenter_sso_password = vcenter_sso_password
        self.vcenter_root_ssh_password = vcenter_root_ssh_password
        self.backup_password = backup_password
        self.host_specs = host_specs
        self.skip_esx_thumbprint_validation = skip_esx_thumbprint_validation
        self.auto_proceed = auto_proceed
        self.suppress_warnings = suppress_warnings
        self.local_admin_password = local_admin_password
        self.nsxt_spec = nsxt_spec
        VapiStruct.__init__(self)


BrownfieldImportSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.brownfield_import_spec', {
        'domainName': type.OptionalType(type.StringType()),
        'vcenterAddress': type.OptionalType(type.StringType()),
        'vcenterSslThumbprint': type.OptionalType(type.StringType()),
        'vcenterSsoUsername': type.OptionalType(type.StringType()),
        'vcenterSsoPassword': type.OptionalType(type.StringType()),
        'vcenterRootSshPassword': type.OptionalType(type.StringType()),
        'backupPassword': type.OptionalType(type.StringType()),
        'hostSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SddcHostSpec'))),
        'skipEsxThumbprintValidation': type.OptionalType(type.BooleanType()),
        'autoProceed': type.OptionalType(type.BooleanType()),
        'suppressWarnings': type.OptionalType(type.BooleanType()),
        'localAdminPassword': type.OptionalType(type.StringType()),
        'nsxtSpec': type.OptionalType(type.ReferenceType(__name__, 'SddcNsxtSpec')),
    },
    BrownfieldImportSpec,
    False,
    None))



class IpAddressPoolRangeSpec(VapiStruct):
    """
    This specification contains the parameters required to create an IP address
    range

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'start': 'start',
                            'end': 'end',
                            }

    def __init__(self,
                 start=None,
                 end=None,
                ):
        """
        :type  start: :class:`str` or ``None``
        :param start: The first IP Address of the IP Address Range
        :type  end: :class:`str` or ``None``
        :param end: The last IP Address of the IP Address Range
        """
        self.start = start
        self.end = end
        VapiStruct.__init__(self)


IpAddressPoolRangeSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ip_address_pool_range_spec', {
        'start': type.OptionalType(type.StringType()),
        'end': type.OptionalType(type.StringType()),
    },
    IpAddressPoolRangeSpec,
    False,
    None))



class IpAddressPoolSpec(VapiStruct):
    """
    This specification contains the parameters required to create or reuse an
    IP address pool.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'description': 'description',
                            'ignoreUnavailableNsxtCluster': 'ignore_unavailable_nsxt_cluster',
                            'subnets': 'subnets',
                            }

    def __init__(self,
                 name=None,
                 description=None,
                 ignore_unavailable_nsxt_cluster=None,
                 subnets=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the IP address pool
        :type  description: :class:`str` or ``None``
        :param description: Description of the IP address pool
        :type  ignore_unavailable_nsxt_cluster: :class:`bool` or ``None``
        :param ignore_unavailable_nsxt_cluster: Ignore unavailable NSX cluster(s) during IP pool spec validation
        :type  subnets: :class:`list` of :class:`IpAddressPoolSubnetSpec` or ``None``
        :param subnets: List of IP address pool subnet specification
        """
        self.name = name
        self.description = description
        self.ignore_unavailable_nsxt_cluster = ignore_unavailable_nsxt_cluster
        self.subnets = subnets
        VapiStruct.__init__(self)


IpAddressPoolSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ip_address_pool_spec', {
        'name': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'ignoreUnavailableNsxtCluster': type.OptionalType(type.BooleanType()),
        'subnets': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'IpAddressPoolSubnetSpec'))),
    },
    IpAddressPoolSpec,
    False,
    None))



class IpAddressPoolSubnetSpec(VapiStruct):
    """
    This specification contains the parameters required to create an IP address
    pool subnet

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ipAddressPoolRanges': 'ip_address_pool_ranges',
                            'cidr': 'cidr',
                            'gateway': 'gateway',
                            }

    def __init__(self,
                 ip_address_pool_ranges=None,
                 cidr=None,
                 gateway=None,
                ):
        """
        :type  ip_address_pool_ranges: :class:`list` of :class:`IpAddressPoolRangeSpec` or ``None``
        :param ip_address_pool_ranges: List of the IP allocation ranges. Atleast 1 IP address range has to
            be specified
        :type  cidr: :class:`str` or ``None``
        :param cidr: The subnet representation, contains the network address and the
            prefix length
        :type  gateway: :class:`str` or ``None``
        :param gateway: The default gateway address of the network
        """
        self.ip_address_pool_ranges = ip_address_pool_ranges
        self.cidr = cidr
        self.gateway = gateway
        VapiStruct.__init__(self)


IpAddressPoolSubnetSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ip_address_pool_subnet_spec', {
        'ipAddressPoolRanges': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'IpAddressPoolRangeSpec'))),
        'cidr': type.OptionalType(type.StringType()),
        'gateway': type.OptionalType(type.StringType()),
    },
    IpAddressPoolSubnetSpec,
    False,
    None))



class NsxtManagerSpec(VapiStruct):
    """
    Spec contains parameters for NSX manager

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hostname': 'hostname',
                            }

    def __init__(self,
                 hostname=None,
                ):
        """
        :type  hostname: :class:`str` or ``None``
        :param hostname: NSX Manager hostname
        """
        self.hostname = hostname
        VapiStruct.__init__(self)


NsxtManagerSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_manager_spec', {
        'hostname': type.OptionalType(type.StringType()),
    },
    NsxtManagerSpec,
    False,
    None))



class SddcCredentials(VapiStruct):
    """
    Credentials contains the username and password

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'username': 'username',
                            'password': 'password',
                            }

    def __init__(self,
                 username=None,
                 password=None,
                ):
        """
        :type  username: :class:`str` or ``None``
        :param username: Username
        :type  password: :class:`str` or ``None``
        :param password: Password
        """
        self.username = username
        self.password = password
        VapiStruct.__init__(self)


SddcCredentials._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sddc_credentials', {
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
    },
    SddcCredentials,
    False,
    None))



class SddcHostSpec(VapiStruct):
    """
    Spec contains parameters for Host

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hostname': 'hostname',
                            'credentials': 'credentials',
                            'sshThumbprint': 'ssh_thumbprint',
                            'sslThumbprint': 'ssl_thumbprint',
                            }

    def __init__(self,
                 hostname=None,
                 credentials=None,
                 ssh_thumbprint=None,
                 ssl_thumbprint=None,
                ):
        """
        :type  hostname: :class:`str` or ``None``
        :param hostname: ESX hostname. This value will be prefixed to the DNS subdomain name
            and should not include the domain name itself. Must also adhere to
            RFC 1123 naming conventions
        :type  credentials: :class:`SddcCredentials` or ``None``
        :param credentials:         :type  ssh_thumbprint: :class:`str` or ``None``
        :param ssh_thumbprint: ESX host SSH thumbprint (RSA SHA256) in new deployment scenario or
            ESX host SSH key (RSA, ECDSA) in reuse existing deployment scenario
        :type  ssl_thumbprint: :class:`str` or ``None``
        :param ssl_thumbprint: ESX host SSL thumbprint (SHA256)
        """
        self.hostname = hostname
        self.credentials = credentials
        self.ssh_thumbprint = ssh_thumbprint
        self.ssl_thumbprint = ssl_thumbprint
        VapiStruct.__init__(self)


SddcHostSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sddc_host_spec', {
        'hostname': type.OptionalType(type.StringType()),
        'credentials': type.OptionalType(type.ReferenceType(__name__, 'SddcCredentials')),
        'sshThumbprint': type.OptionalType(type.StringType()),
        'sslThumbprint': type.OptionalType(type.StringType()),
    },
    SddcHostSpec,
    False,
    None))



class SddcNsxtSpec(VapiStruct):
    """
    Spec contains parameters for NSX deployment and configurations

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nsxtManagers': 'nsxt_managers',
                            'nsxtManagerSize': 'nsxt_manager_size',
                            'vipFqdn': 'vip_fqdn',
                            'rootNsxtManagerPassword': 'root_nsxt_manager_password',
                            'nsxtAdminPassword': 'nsxt_admin_password',
                            'nsxtAuditPassword': 'nsxt_audit_password',
                            'transportVlanId': 'transport_vlan_id',
                            'ipAddressPoolSpec': 'ip_address_pool_spec',
                            'skipNsxOverlayOverManagementNetwork': 'skip_nsx_overlay_over_management_network',
                            'enableEdgeClusterSync': 'enable_edge_cluster_sync',
                            'useExistingDeployment': 'use_existing_deployment',
                            'version': 'version',
                            'sslThumbprint': 'ssl_thumbprint',
                            }

    def __init__(self,
                 nsxt_managers=None,
                 nsxt_manager_size=None,
                 vip_fqdn=None,
                 root_nsxt_manager_password=None,
                 nsxt_admin_password=None,
                 nsxt_audit_password=None,
                 transport_vlan_id=None,
                 ip_address_pool_spec=None,
                 skip_nsx_overlay_over_management_network=None,
                 enable_edge_cluster_sync=None,
                 use_existing_deployment=None,
                 version=None,
                 ssl_thumbprint=None,
                ):
        """
        :type  nsxt_managers: :class:`list` of :class:`NsxtManagerSpec` or ``None``
        :param nsxt_managers: NSX Managers
        :type  nsxt_manager_size: :class:`str` or ``None``
        :param nsxt_manager_size: NSX Manager size. One among: medium, large,xlarge. Default value if
            not provided is medium
        :type  vip_fqdn: :class:`str` or ``None``
        :param vip_fqdn: Hostname for VIP so that common SSL certificates can be installed
            across all managers.
        :type  root_nsxt_manager_password: :class:`str` or ``None``
        :param root_nsxt_manager_password: NSX root password. The password must be at least 12 characters
            long. Must contain at-least 1 uppercase, 1 lowercase, 1 special
            character and 1 digit. In addition, a character cannot be repeated
            3 or more times consectively. If blank, the SDDC Local Admin
            Password will be used (if provided) or password will be
            auto-generated.
        :type  nsxt_admin_password: :class:`str` or ``None``
        :param nsxt_admin_password: NSX admin password. The password must be at least 12 characters
            long. Must contain at-least 1 uppercase, 1 lowercase, 1 special
            character and 1 digit. In addition, a character cannot be repeated
            3 or more times consectively. If blank, the SDDC Local Admin
            Password will be used (if provided) or password will be
            auto-generated.
        :type  nsxt_audit_password: :class:`str` or ``None``
        :param nsxt_audit_password: NSX audit password. The password must be at least 12 characters
            long. Must contain at-least 1 uppercase, 1 lowercase, 1 special
            character and 1 digit. In addition, a character cannot be repeated
            3 or more times consectively. If blank, the SDDC Local Admin
            Password will be used (if provided) or password will be
            auto-generated.
        :type  transport_vlan_id: :class:`long` or ``None``
        :param transport_vlan_id: Transport VLAN ID. Default '0' if not specified
        :type  ip_address_pool_spec: :class:`IpAddressPoolSpec` or ``None``
        :param ip_address_pool_spec:         :type  skip_nsx_overlay_over_management_network: :class:`bool` or ``None``
        :param skip_nsx_overlay_over_management_network: Flag that indicates if the Overlay over Management Network
            configuration will be skipped. Applicable only when vCenter is
            existing and being converted.
        :type  enable_edge_cluster_sync: :class:`bool` or ``None``
        :param enable_edge_cluster_sync: Enable NSX Edge Cluster synchronization. Applicable only when NSX
            exists and is being imported. If enabled and your NSX deployment
            has one or more Edge clusters, the import process will add the
            discovered Edge node VMs to the VCF inventory, including their user
            credentials. As part of this process, a one-time reset of the Edge
            node credential passwords will be done. The updated passwords may
            be retrieved from the VCF credential store if desired. Once an Edge
            cluster's node VMs have been imported, any node VMs added to that
            Edge cluster will also be imported and subject to the same one-time
            password reset.
        :type  use_existing_deployment: :class:`bool` or ``None``
        :param use_existing_deployment: Import existing deployment or deploy one.
        :type  version: :class:`str` or ``None``
        :param version: Version
        :type  ssl_thumbprint: :class:`str` or ``None``
        :param ssl_thumbprint: SSL thumbprint (SHA256) of the product's certificate. Need to be
            populated when using existing deployment in order to establish
            trust with the existing product.
        """
        self.nsxt_managers = nsxt_managers
        self.nsxt_manager_size = nsxt_manager_size
        self.vip_fqdn = vip_fqdn
        self.root_nsxt_manager_password = root_nsxt_manager_password
        self.nsxt_admin_password = nsxt_admin_password
        self.nsxt_audit_password = nsxt_audit_password
        self.transport_vlan_id = transport_vlan_id
        self.ip_address_pool_spec = ip_address_pool_spec
        self.skip_nsx_overlay_over_management_network = skip_nsx_overlay_over_management_network
        self.enable_edge_cluster_sync = enable_edge_cluster_sync
        self.use_existing_deployment = use_existing_deployment
        self.version = version
        self.ssl_thumbprint = ssl_thumbprint
        VapiStruct.__init__(self)


SddcNsxtSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sddc_nsxt_spec', {
        'nsxtManagers': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtManagerSpec'))),
        'nsxtManagerSize': type.OptionalType(type.StringType()),
        'vipFqdn': type.OptionalType(type.StringType()),
        'rootNsxtManagerPassword': type.OptionalType(type.StringType()),
        'nsxtAdminPassword': type.OptionalType(type.StringType()),
        'nsxtAuditPassword': type.OptionalType(type.StringType()),
        'transportVlanId': type.OptionalType(type.IntegerType()),
        'ipAddressPoolSpec': type.OptionalType(type.ReferenceType(__name__, 'IpAddressPoolSpec')),
        'skipNsxOverlayOverManagementNetwork': type.OptionalType(type.BooleanType()),
        'enableEdgeClusterSync': type.OptionalType(type.BooleanType()),
        'useExistingDeployment': type.OptionalType(type.BooleanType()),
        'version': type.OptionalType(type.StringType()),
        'sslThumbprint': type.OptionalType(type.StringType()),
    },
    SddcNsxtSpec,
    False,
    None))



class BrownfieldTask(VapiStruct):
    """
    Task returned by BI operations

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'taskId': 'task_id',
                            'operationType': 'operation_type',
                            'status': 'status',
                            'startTimestamp': 'start_timestamp',
                            'endTimestamp': 'end_timestamp',
                            'error': 'error',
                            'validationResult': 'validation_result',
                            }

    def __init__(self,
                 task_id=None,
                 operation_type=None,
                 status=None,
                 start_timestamp=None,
                 end_timestamp=None,
                 error=None,
                 validation_result=None,
                ):
        """
        :type  task_id: :class:`str` or ``None``
        :param task_id: ID of the task
        :type  operation_type: :class:`str` or ``None``
        :param operation_type: BI operation type
        :type  status: :class:`str` or ``None``
        :param status: Status of the task
        :type  start_timestamp: :class:`long` or ``None``
        :param start_timestamp: Timestamp corresponding to the time when the operation was
            initiated
        :type  end_timestamp: :class:`long` or ``None``
        :param end_timestamp: Timestamp corresponding to the time when the operation was finished
        :type  error: :class:`ErrorResponse` or ``None``
        :param error:         :type  validation_result: :class:`ErrorResponse` or ``None``
        :param validation_result:         """
        self.task_id = task_id
        self.operation_type = operation_type
        self.status = status
        self.start_timestamp = start_timestamp
        self.end_timestamp = end_timestamp
        self.error = error
        self.validation_result = validation_result
        VapiStruct.__init__(self)


BrownfieldTask._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.brownfield_task', {
        'taskId': type.OptionalType(type.StringType()),
        'operationType': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'startTimestamp': type.OptionalType(type.IntegerType()),
        'endTimestamp': type.OptionalType(type.IntegerType()),
        'error': type.OptionalType(type.ReferenceType(__name__, 'ErrorResponse')),
        'validationResult': type.OptionalType(type.ReferenceType(__name__, 'ErrorResponse')),
    },
    BrownfieldTask,
    False,
    None))



class BrownfieldCheckSpec(VapiStruct):
    """
    Brownfield Check Spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vcenterAddress': 'vcenter_address',
                            'vcenterSslThumbprint': 'vcenter_ssl_thumbprint',
                            'vcenterSsoUsername': 'vcenter_sso_username',
                            'vcenterSsoPassword': 'vcenter_sso_password',
                            'vcenterRootSshPassword': 'vcenter_root_ssh_password',
                            'nsxtSpec': 'nsxt_spec',
                            }

    def __init__(self,
                 vcenter_address=None,
                 vcenter_ssl_thumbprint=None,
                 vcenter_sso_username=None,
                 vcenter_sso_password=None,
                 vcenter_root_ssh_password=None,
                 nsxt_spec=None,
                ):
        """
        :type  vcenter_address: :class:`str` or ``None``
        :param vcenter_address: vCenter FQDN
        :type  vcenter_ssl_thumbprint: :class:`str` or ``None``
        :param vcenter_ssl_thumbprint: vCenter SSL thumbprint
        :type  vcenter_sso_username: :class:`str` or ``None``
        :param vcenter_sso_username: vCenter SSO username
        :type  vcenter_sso_password: :class:`str` or ``None``
        :param vcenter_sso_password: vCenter SSO password 
            
            * Property is read-only.
            
            
        :type  vcenter_root_ssh_password: :class:`str` or ``None``
        :param vcenter_root_ssh_password: vCenter SSH root password 
            
            * Property is read-only.
            
            
        :type  nsxt_spec: :class:`SddcNsxtSpec` or ``None``
        :param nsxt_spec:         """
        self.vcenter_address = vcenter_address
        self.vcenter_ssl_thumbprint = vcenter_ssl_thumbprint
        self.vcenter_sso_username = vcenter_sso_username
        self.vcenter_sso_password = vcenter_sso_password
        self.vcenter_root_ssh_password = vcenter_root_ssh_password
        self.nsxt_spec = nsxt_spec
        VapiStruct.__init__(self)


BrownfieldCheckSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.brownfield_check_spec', {
        'vcenterAddress': type.OptionalType(type.StringType()),
        'vcenterSslThumbprint': type.OptionalType(type.StringType()),
        'vcenterSsoUsername': type.OptionalType(type.StringType()),
        'vcenterSsoPassword': type.OptionalType(type.StringType()),
        'vcenterRootSshPassword': type.OptionalType(type.StringType()),
        'nsxtSpec': type.OptionalType(type.ReferenceType(__name__, 'SddcNsxtSpec')),
    },
    BrownfieldCheckSpec,
    False,
    None))



class TrustedCertificateSpec(VapiStruct):
    """
    This specification contains certificate & certificate usage

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'certificate': 'certificate',
                            'certificateUsageType': 'certificate_usage_type',
                            }

    def __init__(self,
                 certificate=None,
                 certificate_usage_type=None,
                ):
        """
        :type  certificate: :class:`str` or ``None``
        :param certificate: Certificate in PEM format
        :type  certificate_usage_type: :class:`str` or ``None``
        :param certificate_usage_type: Certificate usage
        """
        self.certificate = certificate
        self.certificate_usage_type = certificate_usage_type
        VapiStruct.__init__(self)


TrustedCertificateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.trusted_certificate_spec', {
        'certificate': type.OptionalType(type.StringType()),
        'certificateUsageType': type.OptionalType(type.StringType()),
    },
    TrustedCertificateSpec,
    False,
    None))



class PageOfTrustedCertificate(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`TrustedCertificate` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfTrustedCertificate._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_trusted_certificate', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'TrustedCertificate'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfTrustedCertificate,
    False,
    None))



class TrustedCertificate(VapiStruct):
    """
    The Trusted Certificate details.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'alias': 'alias',
                            'certificate': 'certificate',
                            }

    def __init__(self,
                 alias=None,
                 certificate=None,
                ):
        """
        :type  alias: :class:`str` or ``None``
        :param alias: Certificate alias
        :type  certificate: :class:`str` or ``None``
        :param certificate: Certificate in PEM format
        """
        self.alias = alias
        self.certificate = certificate
        VapiStruct.__init__(self)


TrustedCertificate._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.trusted_certificate', {
        'alias': type.OptionalType(type.StringType()),
        'certificate': type.OptionalType(type.StringType()),
    },
    TrustedCertificate,
    False,
    None))



class BackupResource(VapiStruct):
    """
    Element specification to trigger backup

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceType': 'resource_type',
                            }

    def __init__(self,
                 resource_type=None,
                ):
        """
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Resource type
        """
        self.resource_type = resource_type
        VapiStruct.__init__(self)


BackupResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.backup_resource', {
        'resourceType': type.OptionalType(type.StringType()),
    },
    BackupResource,
    False,
    None))



class RestoreSpec(VapiStruct):
    """
    Restore Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'backupFile': 'backup_file',
                            'encryption': 'encryption',
                            }

    def __init__(self,
                 elements=None,
                 backup_file=None,
                 encryption=None,
                ):
        """
        :type  elements: :class:`list` of :class:`BackupResource` or ``None``
        :param elements: List of elements to be restored
        :type  backup_file: :class:`str` or ``None``
        :param backup_file: Backup file name
        :type  encryption: :class:`Encryption` or ``None``
        :param encryption:         """
        self.elements = elements
        self.backup_file = backup_file
        self.encryption = encryption
        VapiStruct.__init__(self)


RestoreSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.restore_spec', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BackupResource'))),
        'backupFile': type.OptionalType(type.StringType()),
        'encryption': type.OptionalType(type.ReferenceType(__name__, 'Encryption')),
    },
    RestoreSpec,
    False,
    None))



class LicenseCheckResource(VapiStruct):
    """
    License check resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceInfo': 'resource_info',
                            'productInfo': 'product_info',
                            }

    def __init__(self,
                 resource_info=None,
                 product_info=None,
                ):
        """
        :type  resource_info: :class:`ResourceInfo` or ``None``
        :param resource_info:         :type  product_info: :class:`ProductInfo` or ``None``
        :param product_info:         """
        self.resource_info = resource_info
        self.product_info = product_info
        VapiStruct.__init__(self)


LicenseCheckResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.license_check_resource', {
        'resourceInfo': type.OptionalType(type.ReferenceType(__name__, 'ResourceInfo')),
        'productInfo': type.OptionalType(type.ReferenceType(__name__, 'ProductInfo')),
    },
    LicenseCheckResource,
    False,
    None))



class ResourcesLicenseCheckSpec(VapiStruct):
    """
    Resources license check spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'licenseCheckResources': 'license_check_resources',
                            'forAllDomains': 'for_all_domains',
                            }

    def __init__(self,
                 license_check_resources=None,
                 for_all_domains=None,
                ):
        """
        :type  license_check_resources: :class:`list` of :class:`LicenseCheckResource` or ``None``
        :param license_check_resources: A list of resources for which license check needs to be performed
        :type  for_all_domains: :class:`bool` or ``None``
        :param for_all_domains: Value that defines whether to get license check for all domains or
            not
        """
        self.license_check_resources = license_check_resources
        self.for_all_domains = for_all_domains
        VapiStruct.__init__(self)


ResourcesLicenseCheckSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resources_license_check_spec', {
        'licenseCheckResources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'LicenseCheckResource'))),
        'forAllDomains': type.OptionalType(type.BooleanType()),
    },
    ResourcesLicenseCheckSpec,
    False,
    None))



class ResourcesLicenseCheckResult(VapiStruct):
    """
    Resource License check result

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'startTimestamp': 'start_timestamp',
                            'endTimestamp': 'end_timestamp',
                            'status': 'status',
                            'resourceLicensingInfos': 'resource_licensing_infos',
                            }

    def __init__(self,
                 id=None,
                 start_timestamp=None,
                 end_timestamp=None,
                 status=None,
                 resource_licensing_infos=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the resources license check task 
            
            * Property is read-only.
            
            
        :type  start_timestamp: :class:`str` or ``None``
        :param start_timestamp: Task start timestamp 
            
            * Property is read-only.
            
            
        :type  end_timestamp: :class:`str` or ``None``
        :param end_timestamp: Task end timestamp 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: Task status 
            
            * Property is read-only.
            
            
        :type  resource_licensing_infos: :class:`list` of :class:`ResourceLicensingInfo` or ``None``
        :param resource_licensing_infos: List of licensing infos of resources 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.start_timestamp = start_timestamp
        self.end_timestamp = end_timestamp
        self.status = status
        self.resource_licensing_infos = resource_licensing_infos
        VapiStruct.__init__(self)


ResourcesLicenseCheckResult._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resources_license_check_result', {
        'id': type.OptionalType(type.StringType()),
        'startTimestamp': type.OptionalType(type.StringType()),
        'endTimestamp': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'resourceLicensingInfos': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ResourceLicensingInfo'))),
    },
    ResourcesLicenseCheckResult,
    False,
    None))



class AssociatedTask(VapiStruct):
    """
    Task association for a resource warning. Indicates in which task the
    resource warning occurred

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'taskId': 'task_id',
                            'subTaskId': 'sub_task_id',
                            }

    def __init__(self,
                 task_id=None,
                 sub_task_id=None,
                ):
        """
        :type  task_id: :class:`str` or ``None``
        :param task_id: ID of the task where the warning for the resource occurred
        :type  sub_task_id: :class:`str` or ``None``
        :param sub_task_id: ID of the subtask where the warning for the resource occurred
        """
        self.task_id = task_id
        self.sub_task_id = sub_task_id
        VapiStruct.__init__(self)


AssociatedTask._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.associated_task', {
        'taskId': type.OptionalType(type.StringType()),
        'subTaskId': type.OptionalType(type.StringType()),
    },
    AssociatedTask,
    False,
    None))



class LocalizableWarningPack(VapiStruct):
    """
    Localization warning pack containing all required data to provide localized
    warning messages

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'warningCode': 'warning_code',
                            'localBundle': 'local_bundle',
                            'vipComponent': 'vip_component',
                            'defaultMessage': 'default_message',
                            'arguments': 'arguments',
                            'referenceToken': 'reference_token',
                            }

    def __init__(self,
                 warning_code=None,
                 local_bundle=None,
                 vip_component=None,
                 default_message=None,
                 arguments=None,
                 reference_token=None,
                ):
        """
        :type  warning_code: :class:`str` or ``None``
        :param warning_code: Minor warning code
        :type  local_bundle: :class:`str` or ``None``
        :param local_bundle: Local bundle to be used for localization
        :type  vip_component: :class:`str` or ``None``
        :param vip_component: VIP component that contains the message
        :type  default_message: :class:`str` or ``None``
        :param default_message: Default warning message in English. Will be used as fallback if a
            localized message cannot be obtained
        :type  arguments: :class:`list` of :class:`str` or ``None``
        :param arguments: Arguments used to localize the message
        :type  reference_token: :class:`str` or ``None``
        :param reference_token: A reference token correlating the warning with the relevant
            detailed logs. Should be sent to the service provider when
            reporting issues
        """
        self.warning_code = warning_code
        self.local_bundle = local_bundle
        self.vip_component = vip_component
        self.default_message = default_message
        self.arguments = arguments
        self.reference_token = reference_token
        VapiStruct.__init__(self)


LocalizableWarningPack._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.localizable_warning_pack', {
        'warningCode': type.OptionalType(type.StringType()),
        'localBundle': type.OptionalType(type.StringType()),
        'vipComponent': type.OptionalType(type.StringType()),
        'defaultMessage': type.OptionalType(type.StringType()),
        'arguments': type.OptionalType(type.ListType(type.StringType())),
        'referenceToken': type.OptionalType(type.StringType()),
    },
    LocalizableWarningPack,
    False,
    None))



class ResourceWarningCreationSpec(VapiStruct):
    """
    Resource Warning creation specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """
    RESOURCE_TYPE_HOST = "HOST"
    """
    Type of the resource to which this warning will be associated

    """
    RESOURCE_TYPE_CLUSTER = "CLUSTER"
    """
    Type of the resource to which this warning will be associated

    """
    RESOURCE_TYPE_DOMAIN = "DOMAIN"
    """
    Type of the resource to which this warning will be associated

    """
    WARNING_TYPE_CONFIGURATION = "CONFIGURATION"
    """
    The type of the warning

    """
    WARNING_TYPE_OTHER = "OTHER"
    """
    The type of the warning

    """
    WARNING_TYPE_SKIPPED_RESOURCE = "SKIPPED_RESOURCE"
    """
    The type of the warning

    """
    WARNING_TYPE_VALIDATION = "VALIDATION"
    """
    The type of the warning

    """
    SEVERITY_MAJOR = "MAJOR"
    """
    The severity of the warning

    """
    SEVERITY_MINOR = "MINOR"
    """
    The severity of the warning

    """



    _canonical_to_pep_names = {
                            'resourceId': 'resource_id',
                            'resourceName': 'resource_name',
                            'resourceType': 'resource_type',
                            'warningType': 'warning_type',
                            'severity': 'severity',
                            'occurredAtTimestamp': 'occurred_at_timestamp',
                            'context': 'context',
                            'localizableWarningPack': 'localizable_warning_pack',
                            'associatedTask': 'associated_task',
                            }

    def __init__(self,
                 resource_id=None,
                 resource_name=None,
                 resource_type=None,
                 warning_type=None,
                 severity=None,
                 occurred_at_timestamp=None,
                 context=None,
                 localizable_warning_pack=None,
                 associated_task=None,
                ):
        """
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: ID of the resource to which this warning will be associated
        :type  resource_name: :class:`str` or ``None``
        :param resource_name: Name of the resource to which this warning will be associated
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Type of the resource to which this warning will be associated
        :type  warning_type: :class:`str` or ``None``
        :param warning_type: The type of the warning
        :type  severity: :class:`str` or ``None``
        :param severity: The severity of the warning
        :type  occurred_at_timestamp: :class:`long` or ``None``
        :param occurred_at_timestamp: The Unix epoch timestamp of when the warning occurred
        :type  context: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param context: Optional additional context information to be associated to the
            warning
        :type  localizable_warning_pack: :class:`LocalizableWarningPack` or ``None``
        :param localizable_warning_pack:         :type  associated_task: :class:`AssociatedTask` or ``None``
        :param associated_task:         """
        self.resource_id = resource_id
        self.resource_name = resource_name
        self.resource_type = resource_type
        self.warning_type = warning_type
        self.severity = severity
        self.occurred_at_timestamp = occurred_at_timestamp
        self.context = context
        self.localizable_warning_pack = localizable_warning_pack
        self.associated_task = associated_task
        VapiStruct.__init__(self)


ResourceWarningCreationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_warning_creation_spec', {
        'resourceId': type.OptionalType(type.StringType()),
        'resourceName': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'warningType': type.OptionalType(type.StringType()),
        'severity': type.OptionalType(type.StringType()),
        'occurredAtTimestamp': type.OptionalType(type.IntegerType()),
        'context': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
        'localizableWarningPack': type.OptionalType(type.ReferenceType(__name__, 'LocalizableWarningPack')),
        'associatedTask': type.OptionalType(type.ReferenceType(__name__, 'AssociatedTask')),
    },
    ResourceWarningCreationSpec,
    False,
    None))



class ResourceWarning(VapiStruct):
    """
    Represents a warning associated to a specific resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'warningCode': 'warning_code',
                            'message': 'message',
                            'remediationMessage': 'remediation_message',
                            'referenceToken': 'reference_token',
                            'resourceId': 'resource_id',
                            'resourceType': 'resource_type',
                            'resourceName': 'resource_name',
                            'warningType': 'warning_type',
                            'severity': 'severity',
                            'occurredAtTimestamp': 'occurred_at_timestamp',
                            'context': 'context',
                            'associatedTask': 'associated_task',
                            }

    def __init__(self,
                 id=None,
                 warning_code=None,
                 message=None,
                 remediation_message=None,
                 reference_token=None,
                 resource_id=None,
                 resource_type=None,
                 resource_name=None,
                 warning_type=None,
                 severity=None,
                 occurred_at_timestamp=None,
                 context=None,
                 associated_task=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the resource warning
        :type  warning_code: :class:`str` or ``None``
        :param warning_code: The warning code
        :type  message: :class:`str` or ``None``
        :param message: The localized warning message
        :type  remediation_message: :class:`str` or ``None``
        :param remediation_message: The localized remediation warning message
        :type  reference_token: :class:`str` or ``None``
        :param reference_token: A reference token correlating the warning with the relevant
            detailed logs. Should be sent to the service provider when
            reporting issues
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: ID of the associated resource
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Type of the associated resource
        :type  resource_name: :class:`str` or ``None``
        :param resource_name: Name of the associated resource
        :type  warning_type: :class:`str` or ``None``
        :param warning_type: Type of the warning
        :type  severity: :class:`str` or ``None``
        :param severity: Severity of the warning
        :type  occurred_at_timestamp: :class:`str` or ``None``
        :param occurred_at_timestamp: Timestamp when the warning occurred
        :type  context: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param context: Optional additional context information in a key value form
        :type  associated_task: :class:`AssociatedTask` or ``None``
        :param associated_task:         """
        self.id = id
        self.warning_code = warning_code
        self.message = message
        self.remediation_message = remediation_message
        self.reference_token = reference_token
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.resource_name = resource_name
        self.warning_type = warning_type
        self.severity = severity
        self.occurred_at_timestamp = occurred_at_timestamp
        self.context = context
        self.associated_task = associated_task
        VapiStruct.__init__(self)


ResourceWarning._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_warning', {
        'id': type.OptionalType(type.StringType()),
        'warningCode': type.OptionalType(type.StringType()),
        'message': type.OptionalType(type.StringType()),
        'remediationMessage': type.OptionalType(type.StringType()),
        'referenceToken': type.OptionalType(type.StringType()),
        'resourceId': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'resourceName': type.OptionalType(type.StringType()),
        'warningType': type.OptionalType(type.StringType()),
        'severity': type.OptionalType(type.StringType()),
        'occurredAtTimestamp': type.OptionalType(type.StringType()),
        'context': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
        'associatedTask': type.OptionalType(type.ReferenceType(__name__, 'AssociatedTask')),
    },
    ResourceWarning,
    False,
    None))



class DomainRelease(VapiStruct):
    """
    Target Domain VCF Version

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'targetVersion': 'target_version',
                            'targetSddcManagerVersion': 'target_sddc_manager_version',
                            'patches': 'patches',
                            }

    def __init__(self,
                 target_version=None,
                 target_sddc_manager_version=None,
                 patches=None,
                ):
        """
        :type  target_version: :class:`str` or ``None``
        :param target_version: Target version
        :type  target_sddc_manager_version: :class:`str` or ``None``
        :param target_sddc_manager_version: Target SDDC Manager version
        :type  patches: :class:`list` of :class:`TargetProductVersion` or ``None``
        :param patches: Target product release and patch versions
        """
        self.target_version = target_version
        self.target_sddc_manager_version = target_sddc_manager_version
        self.patches = patches
        VapiStruct.__init__(self)


DomainRelease._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.domain_release', {
        'targetVersion': type.OptionalType(type.StringType()),
        'targetSddcManagerVersion': type.OptionalType(type.StringType()),
        'patches': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'TargetProductVersion'))),
    },
    DomainRelease,
    False,
    None))



class TargetProductVersion(VapiStruct):
    """
    Model for target product versions in domain release view.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'productType': 'product_type',
                            'version': 'version',
                            }

    def __init__(self,
                 product_type=None,
                 version=None,
                ):
        """
        :type  product_type: :class:`str` or ``None``
        :param product_type: Product Type
        :type  version: :class:`str` or ``None``
        :param version: Target upgrade version of the product
        """
        self.product_type = product_type
        self.version = version
        VapiStruct.__init__(self)


TargetProductVersion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.target_product_version', {
        'productType': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
    },
    TargetProductVersion,
    False,
    None))



class ProductVersionCatalogWithSignatureSpec(VapiStruct):
    """
    Product Version Catalog Upload Specification. This specification is used in
    the PVC Upload API

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'productVersionCatalogFilePath': 'product_version_catalog_file_path',
                            'signatureFilePath': 'signature_file_path',
                            }

    def __init__(self,
                 product_version_catalog_file_path=None,
                 signature_file_path=None,
                ):
        """
        :type  product_version_catalog_file_path: :class:`str` or ``None``
        :param product_version_catalog_file_path: Product version catalog file absolute path on file system
        :type  signature_file_path: :class:`str` or ``None``
        :param signature_file_path: Product version catalog signature file absolute path on file system
        """
        self.product_version_catalog_file_path = product_version_catalog_file_path
        self.signature_file_path = signature_file_path
        VapiStruct.__init__(self)


ProductVersionCatalogWithSignatureSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.product_version_catalog_with_signature_spec', {
        'productVersionCatalogFilePath': type.OptionalType(type.StringType()),
        'signatureFilePath': type.OptionalType(type.StringType()),
    },
    ProductVersionCatalogWithSignatureSpec,
    False,
    None))



class ProductVersionCatalogUploadTask(VapiStruct):
    """
    Represents the details associated with a product version catalog upload
    task

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'taskId': 'task_id',
                            'description': 'description',
                            'status': 'status',
                            'errorResponse': 'error_response',
                            }

    def __init__(self,
                 task_id=None,
                 description=None,
                 status=None,
                 error_response=None,
                ):
        """
        :type  task_id: :class:`str` or ``None``
        :param task_id: ID of the product version catalog upload task 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description of the product version catalog upload operation 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: State of the product version catalog upload after it has completed
            its execution 
            
            * Property is read-only.
            
            
        :type  error_response: :class:`Error` or ``None``
        :param error_response:         """
        self.task_id = task_id
        self.description = description
        self.status = status
        self.error_response = error_response
        VapiStruct.__init__(self)


ProductVersionCatalogUploadTask._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.product_version_catalog_upload_task', {
        'taskId': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'errorResponse': type.OptionalType(type.ReferenceType(__name__, 'Error')),
    },
    ProductVersionCatalogUploadTask,
    False,
    None))



class Artifact(VapiStruct):
    """
    Patch rest model that is located in the Product Version Catalog, these
    models are consumed by LCM's Flex BOM workflows.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'bundles': 'bundles',
                            }

    def __init__(self,
                 bundles=None,
                ):
        """
        :type  bundles: :class:`list` of :class:`BundleInfo` or ``None``
        :param bundles: List of bundle artifacts for corresponding product patch version
        """
        self.bundles = bundles
        VapiStruct.__init__(self)


Artifact._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.artifact', {
        'bundles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BundleInfo'))),
    },
    Artifact,
    False,
    None))



class BundleInfo(VapiStruct):
    """
    Patch/Install bundle info to be used as part of ProductVersionCatalog
    patches.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'type': 'type',
                            'name': 'name',
                            'binaries': 'binaries',
                            }

    def __init__(self,
                 id=None,
                 type=None,
                 name=None,
                 binaries=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Bundle id 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Type of bundle. ex) PATCH, INSTALL 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: Patch/Install bundle name 
            
            * Property is read-only.
            
            
        :type  binaries: :class:`list` of :class:`ProductBinary` or ``None``
        :param binaries: Bundle binaries for the artifact downloads 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.type = type
        self.name = name
        self.binaries = binaries
        VapiStruct.__init__(self)


BundleInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.bundle_info', {
        'id': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'binaries': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ProductBinary'))),
    },
    BundleInfo,
    False,
    None))



class Patch(VapiStruct):
    """
    Patch rest model that is located in the Product Version Catalog, these
    models are consumed by LCM's Flex BOM workflows.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'releaseDate': 'release_date',
                            'description': 'description',
                            'productVersion': 'product_version',
                            'artifacts': 'artifacts',
                            }

    def __init__(self,
                 release_date=None,
                 description=None,
                 product_version=None,
                 artifacts=None,
                ):
        """
        :type  release_date: :class:`str` or ``None``
        :param release_date: Time of publish of the patch in Product Version catalog e.g.
            2020-06-08T02:20:15.844Z, in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO
            8601 format 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description of the patch bundle 
            
            * Property is read-only.
            
            
        :type  product_version: :class:`str` or ``None``
        :param product_version: Product version of the patch bundle 
            
            * Property is read-only.
            
            
        :type  artifacts: :class:`Artifact` or ``None``
        :param artifacts:         """
        self.release_date = release_date
        self.description = description
        self.product_version = product_version
        self.artifacts = artifacts
        VapiStruct.__init__(self)


Patch._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.patch', {
        'releaseDate': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'productVersion': type.OptionalType(type.StringType()),
        'artifacts': type.OptionalType(type.ReferenceType(__name__, 'Artifact')),
    },
    Patch,
    False,
    None))



class ProductBinary(VapiStruct):
    """
    Component bit binary info to be used as part of patch download from depot.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'fileName': 'file_name',
                            'size': 'size',
                            'checksum': 'checksum',
                            }

    def __init__(self,
                 file_name=None,
                 size=None,
                 checksum=None,
                ):
        """
        :type  file_name: :class:`str` or ``None``
        :param file_name: File name for the product binary. Supported product types
            VC/ESXi/NSX/SDDC-M,etc 
            
            * Property is read-only.
            
            
        :type  size: :class:`long` or ``None``
        :param size: Binary size 
            
            * Property is read-only.
            
            
        :type  checksum: :class:`str` or ``None``
        :param checksum: Binary checksum for the artifact 
            
            * Property is read-only.
            
            
        """
        self.file_name = file_name
        self.size = size
        self.checksum = checksum
        VapiStruct.__init__(self)


ProductBinary._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.product_binary', {
        'fileName': type.OptionalType(type.StringType()),
        'size': type.OptionalType(type.IntegerType()),
        'checksum': type.OptionalType(type.StringType()),
    },
    ProductBinary,
    False,
    None))



class ProductVersionCatalog(VapiStruct):
    """
    LCM Product Version Catalog that contains async patches for VMware Cloud
    foundation components (VC/ESX/NSX) that's used by Lifecycle Manager.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'sequenceNumber': 'sequence_number',
                            'creationTime': 'creation_time',
                            'publishedTime': 'published_time',
                            'patches': 'patches',
                            }

    def __init__(self,
                 version=None,
                 sequence_number=None,
                 creation_time=None,
                 published_time=None,
                 patches=None,
                ):
        """
        :type  version: :class:`long` or ``None``
        :param version: Product Version catalog version supported by VCF 
            
            * Property is read-only.
            
            
        :type  sequence_number: :class:`long` or ``None``
        :param sequence_number: Product Version catalog sequence number which signifies an update
            in the product version catalog 
            
            * Property is read-only.
            
            
        :type  creation_time: :class:`str` or ``None``
        :param creation_time: Creation time for the Product Version catalog e.g.
            2020-06-08T02:20:15.844Z, in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO
            8601 format 
            
            * Property is read-only.
            
            
        :type  published_time: :class:`str` or ``None``
        :param published_time: Time of publish of the Product Version catalog e.g.
            2020-06-08T02:20:15.844Z, in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO
            8601 format 
            
            * Property is read-only.
            
            
        :type  patches: (:class:`dict` of :class:`str` and :class:`list` of :class:`Patch`) or ``None``
        :param patches: Patches used for the product version catalog
        """
        self.version = version
        self.sequence_number = sequence_number
        self.creation_time = creation_time
        self.published_time = published_time
        self.patches = patches
        VapiStruct.__init__(self)


ProductVersionCatalog._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.product_version_catalog', {
        'version': type.OptionalType(type.IntegerType()),
        'sequenceNumber': type.OptionalType(type.IntegerType()),
        'creationTime': type.OptionalType(type.StringType()),
        'publishedTime': type.OptionalType(type.StringType()),
        'patches': type.OptionalType(type.MapType(type.StringType(), type.ListType(type.ReferenceType(__name__, 'Patch')))),
    },
    ProductVersionCatalog,
    False,
    None))



class ProductBinaryUploadSpec(VapiStruct):
    """
    Product binary upload specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'productType': 'product_type',
                            'productVersion': 'product_version',
                            'imageType': 'image_type',
                            'folderPath': 'folder_path',
                            'skipDelete': 'skip_delete',
                            }

    def __init__(self,
                 product_type=None,
                 product_version=None,
                 image_type=None,
                 folder_path=None,
                 skip_delete=None,
                ):
        """
        :type  product_type: :class:`str` or ``None``
        :param product_type: Product Type
        :type  product_version: :class:`str` or ``None``
        :param product_version: Product version
        :type  image_type: :class:`str` or ``None``
        :param image_type: Image Type. Example for supported type = PATCH/INSTALL
        :type  folder_path: :class:`str` or ``None``
        :param folder_path: Path of the folder where artifacts have been downloaded. SDDC
            Manager will use this pathto locate the relevant artifacts which
            will be uploaded for installation purposes
        :type  skip_delete: :class:`bool` or ``None``
        :param skip_delete: Preserves the source artifacts after upload.
        """
        self.product_type = product_type
        self.product_version = product_version
        self.image_type = image_type
        self.folder_path = folder_path
        self.skip_delete = skip_delete
        VapiStruct.__init__(self)


ProductBinaryUploadSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.product_binary_upload_spec', {
        'productType': type.OptionalType(type.StringType()),
        'productVersion': type.OptionalType(type.StringType()),
        'imageType': type.OptionalType(type.StringType()),
        'folderPath': type.OptionalType(type.StringType()),
        'skipDelete': type.OptionalType(type.BooleanType()),
    },
    ProductBinaryUploadSpec,
    False,
    None))



class PersonalityUploadSpec(VapiStruct):
    """
    Personality Upload Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'uploadMode': 'upload_mode',
                            'uploadSpecRawMode': 'upload_spec_raw_mode',
                            'uploadSpecRawWithFileUploadIdMode': 'upload_spec_raw_with_file_upload_id_mode',
                            'uploadSpecReferredMode': 'upload_spec_referred_mode',
                            'name': 'name',
                            }

    def __init__(self,
                 upload_mode=None,
                 upload_spec_raw_mode=None,
                 upload_spec_raw_with_file_upload_id_mode=None,
                 upload_spec_referred_mode=None,
                 name=None,
                ):
        """
        :type  upload_mode: :class:`str` or ``None``
        :param upload_mode: Personality upload mode
        :type  upload_spec_raw_mode: :class:`PersonalityUploadSpecRaw` or ``None``
        :param upload_spec_raw_mode:         :type  upload_spec_raw_with_file_upload_id_mode: :class:`PersonalityUploadSpecRawWithFileUploadId` or ``None``
        :param upload_spec_raw_with_file_upload_id_mode:         :type  upload_spec_referred_mode: :class:`PersonalityUploadSpecReferred` or ``None``
        :param upload_spec_referred_mode:         :type  name: :class:`str` or ``None``
        :param name: Personality name
        """
        self.upload_mode = upload_mode
        self.upload_spec_raw_mode = upload_spec_raw_mode
        self.upload_spec_raw_with_file_upload_id_mode = upload_spec_raw_with_file_upload_id_mode
        self.upload_spec_referred_mode = upload_spec_referred_mode
        self.name = name
        VapiStruct.__init__(self)


PersonalityUploadSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.personality_upload_spec', {
        'uploadMode': type.OptionalType(type.StringType()),
        'uploadSpecRawMode': type.OptionalType(type.ReferenceType(__name__, 'PersonalityUploadSpecRaw')),
        'uploadSpecRawWithFileUploadIdMode': type.OptionalType(type.ReferenceType(__name__, 'PersonalityUploadSpecRawWithFileUploadId')),
        'uploadSpecReferredMode': type.OptionalType(type.ReferenceType(__name__, 'PersonalityUploadSpecReferred')),
        'name': type.OptionalType(type.StringType()),
    },
    PersonalityUploadSpec,
    False,
    None))



class PersonalityUploadSpecRaw(VapiStruct):
    """
    Personality upload specification for uploading the personality from raw
    files exported from avCenter cluster. This mode of uploading personality is
    useful when the source vCenter cluster is outside the target VCF
    deployment.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'personalityInfoJSONFilePath': 'personality_info_json_file_path',
                            'personalityJSONFilePath': 'personality_json_file_path',
                            'personalityZIPFilePath': 'personality_zip_file_path',
                            'personalityISOFilePath': 'personality_iso_file_path',
                            }

    def __init__(self,
                 personality_info_json_file_path=None,
                 personality_json_file_path=None,
                 personality_zip_file_path=None,
                 personality_iso_file_path=None,
                ):
        """
        :type  personality_info_json_file_path: :class:`str` or ``None``
        :param personality_info_json_file_path: Personality Info JSON File Path
        :type  personality_json_file_path: :class:`str` or ``None``
        :param personality_json_file_path: Personality JSON File Path
        :type  personality_zip_file_path: :class:`str` or ``None``
        :param personality_zip_file_path: Personality Zip File Path
        :type  personality_iso_file_path: :class:`str` or ``None``
        :param personality_iso_file_path: Personality ISO File Path
        """
        self.personality_info_json_file_path = personality_info_json_file_path
        self.personality_json_file_path = personality_json_file_path
        self.personality_zip_file_path = personality_zip_file_path
        self.personality_iso_file_path = personality_iso_file_path
        VapiStruct.__init__(self)


PersonalityUploadSpecRaw._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.personality_upload_spec_raw', {
        'personalityInfoJSONFilePath': type.OptionalType(type.StringType()),
        'personalityJSONFilePath': type.OptionalType(type.StringType()),
        'personalityZIPFilePath': type.OptionalType(type.StringType()),
        'personalityISOFilePath': type.OptionalType(type.StringType()),
    },
    PersonalityUploadSpecRaw,
    False,
    None))



class PersonalityUploadSpecRawWithFileUploadId(VapiStruct):
    """
    Personality upload specification for uploading the personality from raw
    files exported from a vCenter cluster. This mode of uploading personality
    is useful when the source vCenter cluster is outside the target VCF
    deployment. User can upload files from a source location to SDDC Manager
    using v1/personalities/files API, which returns a file upload id. The id is
    then passed in this spec with Personality Upload Mode
    RAW_WITH_FILE_UPLOAD_ID.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'fileUploadId': 'file_upload_id',
                            }

    def __init__(self,
                 file_upload_id=None,
                ):
        """
        :type  file_upload_id: :class:`str` or ``None``
        :param file_upload_id: Personality file upload id. This id is obtained by calling
            v1/personalities/files and uploading files into SDDC Manager
        """
        self.file_upload_id = file_upload_id
        VapiStruct.__init__(self)


PersonalityUploadSpecRawWithFileUploadId._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.personality_upload_spec_raw_with_file_upload_id', {
        'fileUploadId': type.OptionalType(type.StringType()),
    },
    PersonalityUploadSpecRawWithFileUploadId,
    False,
    None))



class PersonalityUploadSpecReferred(VapiStruct):
    """
    Personality upload specification for uploading the personality from a
    referred vCentercluster. This mode of uploading personality is useful when
    the source vCenter cluster is internal to the target VCF deployment.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vCenterId': 'v_center_id',
                            'clusterId': 'cluster_id',
                            'clusterMorId': 'cluster_mor_id',
                            'vCenterImageId': 'v_center_image_id',
                            }

    def __init__(self,
                 v_center_id=None,
                 cluster_id=None,
                 cluster_mor_id=None,
                 v_center_image_id=None,
                ):
        """
        :type  v_center_id: :class:`str` or ``None``
        :param v_center_id: Source vCenter ID from SDDC manager inventory
        :type  cluster_id: :class:`str` or ``None``
        :param cluster_id: Source cluster ID from SDDC manager inventory
        :type  cluster_mor_id: :class:`str` or ``None``
        :param cluster_mor_id: Managed Object Reference ID of the cluster in vCenter
        :type  v_center_image_id: :class:`str` or ``None``
        :param v_center_image_id: Source ID of the image in vCenter
        """
        self.v_center_id = v_center_id
        self.cluster_id = cluster_id
        self.cluster_mor_id = cluster_mor_id
        self.v_center_image_id = v_center_image_id
        VapiStruct.__init__(self)


PersonalityUploadSpecReferred._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.personality_upload_spec_referred', {
        'vCenterId': type.OptionalType(type.StringType()),
        'clusterId': type.OptionalType(type.StringType()),
        'clusterMorId': type.OptionalType(type.StringType()),
        'vCenterImageId': type.OptionalType(type.StringType()),
    },
    PersonalityUploadSpecReferred,
    False,
    None))



class NetworkDetailsSpec(VapiStruct):
    """
    This specification contains network parameters required for new virtual
    machines being added to a workload domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ipAddress': 'ip_address',
                            'dnsName': 'dns_name',
                            'gateway': 'gateway',
                            'subnetMask': 'subnet_mask',
                            }

    def __init__(self,
                 ip_address=None,
                 dns_name=None,
                 gateway=None,
                 subnet_mask=None,
                ):
        """
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: [Deprecated] IPv4 address of the virtual machine. Can be omitted if
            hostname (dnsName) is provded.
        :type  dns_name: :class:`str` or ``None``
        :param dns_name: DNS name of the virtual machine, e.g., vc-1.domain1.vsphere.local
        :type  gateway: :class:`str` or ``None``
        :param gateway: IPv4 gateway the VM can use to connect to the outside world
        :type  subnet_mask: :class:`str` or ``None``
        :param subnet_mask: Subnet mask
        """
        self.ip_address = ip_address
        self.dns_name = dns_name
        self.gateway = gateway
        self.subnet_mask = subnet_mask
        VapiStruct.__init__(self)


NetworkDetailsSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.network_details_spec', {
        'ipAddress': type.OptionalType(type.StringType()),
        'dnsName': type.OptionalType(type.StringType()),
        'gateway': type.OptionalType(type.StringType()),
        'subnetMask': type.OptionalType(type.StringType()),
    },
    NetworkDetailsSpec,
    False,
    None))



class NsxDeploymentSpec(VapiStruct):
    """
    NSX cluster expansion data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nsxManagerSpecs': 'nsx_manager_specs',
                            }

    def __init__(self,
                 nsx_manager_specs=None,
                ):
        """
        :type  nsx_manager_specs: :class:`list` of :class:`NsxManagerSpec` or ``None``
        :param nsx_manager_specs: Specification details of the NSX Manager virtual machine
        """
        self.nsx_manager_specs = nsx_manager_specs
        VapiStruct.__init__(self)


NsxDeploymentSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsx_deployment_spec', {
        'nsxManagerSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxManagerSpec'))),
    },
    NsxDeploymentSpec,
    False,
    None))



class NsxManagerSpec(VapiStruct):
    """
    This specification contains the parameters required to install and
    configure NSX Manager in a workload domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'networkDetailsSpec': 'network_details_spec',
                            }

    def __init__(self,
                 name=None,
                 network_details_spec=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the NSX Manager virtual machine
        :type  network_details_spec: :class:`NetworkDetailsSpec` or ``None``
        :param network_details_spec:         """
        self.name = name
        self.network_details_spec = network_details_spec
        VapiStruct.__init__(self)


NsxManagerSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsx_manager_spec', {
        'name': type.OptionalType(type.StringType()),
        'networkDetailsSpec': type.OptionalType(type.ReferenceType(__name__, 'NetworkDetailsSpec')),
    },
    NsxManagerSpec,
    False,
    None))



class DomainReference(VapiStruct):
    """
    Represents a domain reference

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'type': 'type',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 type=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Domain ID
        :type  name: :class:`str` or ``None``
        :param name: Name of the domain
        :type  type: :class:`str` or ``None``
        :param type: Type of the domain
        """
        self.id = id
        self.name = name
        self.type = type
        VapiStruct.__init__(self)


DomainReference._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.domain_reference', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
    },
    DomainReference,
    False,
    None))



class NsxtCluster(VapiStruct):
    """
    NSX Cluster representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'nativeId': 'native_id',
                            'vipFqdn': 'vip_fqdn',
                            'vip': 'vip',
                            'domains': 'domains',
                            'nodes': 'nodes',
                            'version': 'version',
                            'isShared': 'is_shared',
                            'isShareable': 'is_shareable',
                            'isVlcmCompatible': 'is_vlcm_compatible',
                            'status': 'status',
                            }

    def __init__(self,
                 id=None,
                 native_id=None,
                 vip_fqdn=None,
                 vip=None,
                 domains=None,
                 nodes=None,
                 version=None,
                 is_shared=None,
                 is_shareable=None,
                 is_vlcm_compatible=None,
                 status=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the cluster 
            
            * Property is read-only.
            
            
        :type  native_id: :class:`str` or ``None``
        :param native_id: [Deprecated] Native ID of the NSX cluster 
            
            * Property is read-only.
            
            
        :type  vip_fqdn: :class:`str` or ``None``
        :param vip_fqdn: FQDN for VIP of the cluster 
            
            * Property is read-only.
            
            
        :type  vip: :class:`str` or ``None``
        :param vip: [Deprecated] VIP (Virtual IP Address) of the cluster 
            
            * Property is read-only.
            
            
        :type  domains: :class:`list` of :class:`DomainReference` or ``None``
        :param domains: Information about the domains associated with the cluster 
            
            * Property is read-only.
            
            
        :type  nodes: :class:`list` of :class:`NsxtManager` or ``None``
        :param nodes: Information about the NSX managers associated with the cluster 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: Version of the NSX managers associated with the cluster 
            
            * Property is read-only.
            
            
        :type  is_shared: :class:`bool` or ``None``
        :param is_shared: Boolean to identify if the NSX cluster is shared among workload
            domains 
            
            * Property is read-only.
            
            
        :type  is_shareable: :class:`bool` or ``None``
        :param is_shareable: Boolean to identify if the NSX cluster can be shared to create a
            new workload domain 
            
            * Property is read-only.
            
            
        :type  is_vlcm_compatible: :class:`bool` or ``None``
        :param is_vlcm_compatible: Boolean to identify if the NSX cluster is compatible with vLCM.
            This should not be used to determineif vLCM Clusters can be created
            on the domain 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: NSX cluster status. To get NSX cluster status invoke nsxt-clusters
            query API with criterion NSXT_CLUSTERS_WITH_STATUS 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.native_id = native_id
        self.vip_fqdn = vip_fqdn
        self.vip = vip
        self.domains = domains
        self.nodes = nodes
        self.version = version
        self.is_shared = is_shared
        self.is_shareable = is_shareable
        self.is_vlcm_compatible = is_vlcm_compatible
        self.status = status
        VapiStruct.__init__(self)


NsxtCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_cluster', {
        'id': type.OptionalType(type.StringType()),
        'nativeId': type.OptionalType(type.StringType()),
        'vipFqdn': type.OptionalType(type.StringType()),
        'vip': type.OptionalType(type.StringType()),
        'domains': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'DomainReference'))),
        'nodes': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtManager'))),
        'version': type.OptionalType(type.StringType()),
        'isShared': type.OptionalType(type.BooleanType()),
        'isShareable': type.OptionalType(type.BooleanType()),
        'isVlcmCompatible': type.OptionalType(type.BooleanType()),
        'status': type.OptionalType(type.StringType()),
    },
    NsxtCluster,
    False,
    None))



class NsxtManager(VapiStruct):
    """
    NSX Manager representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'fqdn': 'fqdn',
                            'ipAddress': 'ip_address',
                            'name': 'name',
                            }

    def __init__(self,
                 id=None,
                 fqdn=None,
                 ip_address=None,
                 name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the manager 
            
            * Property is read-only.
            
            
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN of the manager 
            
            * Property is read-only.
            
            
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: [Deprecated] IP address of the manager 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: NSX Manager VM name in vCenter 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.fqdn = fqdn
        self.ip_address = ip_address
        self.name = name
        VapiStruct.__init__(self)


NsxtManager._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_manager', {
        'id': type.OptionalType(type.StringType()),
        'fqdn': type.OptionalType(type.StringType()),
        'ipAddress': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
    },
    NsxtManager,
    False,
    None))



class NsxtQueryResponse(VapiStruct):
    """
    Represents a NSX cluster query response.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'queryInfo': 'query_info',
                            'result': 'result',
                            }

    def __init__(self,
                 query_info=None,
                 result=None,
                ):
        """
        :type  query_info: :class:`QueryInfo` or ``None``
        :param query_info:         :type  result: :class:`PageNsxtCluster` or ``None``
        :param result:         """
        self.query_info = query_info
        self.result = result
        VapiStruct.__init__(self)


NsxtQueryResponse._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_query_response', {
        'queryInfo': type.OptionalType(type.ReferenceType(__name__, 'QueryInfo')),
        'result': type.OptionalType(type.ReferenceType(__name__, 'PageNsxtCluster')),
    },
    NsxtQueryResponse,
    False,
    None))



class PageNsxtCluster(VapiStruct):
    """
    Represents a page of elements of a single type

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`NsxtCluster` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageNsxtCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_nsxt_cluster', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtCluster'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageNsxtCluster,
    False,
    None))



class NsxtCriterion(VapiStruct):
    """
    Represents a criterion for querying the NSX cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'arguments': 'arguments',
                            'description': 'description',
                            }

    def __init__(self,
                 name=None,
                 arguments=None,
                 description=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the criterion 
            
            * Property is read-only.
            
            
        :type  arguments: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param arguments: Arguments required for a particular criterion 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description of the criterion 
            
            * Property is read-only.
            
            
        """
        self.name = name
        self.arguments = arguments
        self.description = description
        VapiStruct.__init__(self)


NsxtCriterion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_criterion', {
        'name': type.OptionalType(type.StringType()),
        'arguments': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
        'description': type.OptionalType(type.StringType()),
    },
    NsxtCriterion,
    False,
    None))



class NsxtOidcSpec(VapiStruct):
    """
    Spec for the parameters required to add OpenId connection to NSX

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """
    OIDC_TYPE_VCENTER = "vcenter"
    """
    Type of the oidc entity.

    """



    _canonical_to_pep_names = {
                            'entityInventoryId': 'entity_inventory_id',
                            'oidcType': 'oidc_type',
                            }

    def __init__(self,
                 entity_inventory_id=None,
                 oidc_type=None,
                ):
        """
        :type  entity_inventory_id: :class:`str` or ``None``
        :param entity_inventory_id: VCF Inventory identificator of the entity to connect oidc
        :type  oidc_type: :class:`str` or ``None``
        :param oidc_type: Type of the oidc entity.
        """
        self.entity_inventory_id = entity_inventory_id
        self.oidc_type = oidc_type
        VapiStruct.__init__(self)


NsxtOidcSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_oidc_spec', {
        'entityInventoryId': type.OptionalType(type.StringType()),
        'oidcType': type.OptionalType(type.StringType()),
    },
    NsxtOidcSpec,
    False,
    None))



class NsxtIpAddressPoolValidationSpec(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ipAddressPoolSpec': 'ip_address_pool_spec',
                            'nsxtClusterId': 'nsxt_cluster_id',
                            }

    def __init__(self,
                 ip_address_pool_spec=None,
                 nsxt_cluster_id=None,
                ):
        """
        :type  ip_address_pool_spec: :class:`IpAddressPoolSpec` or ``None``
        :param ip_address_pool_spec:         :type  nsxt_cluster_id: :class:`str` or ``None``
        :param nsxt_cluster_id:         """
        self.ip_address_pool_spec = ip_address_pool_spec
        self.nsxt_cluster_id = nsxt_cluster_id
        VapiStruct.__init__(self)


NsxtIpAddressPoolValidationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_ip_address_pool_validation_spec', {
        'ipAddressPoolSpec': type.OptionalType(type.ReferenceType(__name__, 'IpAddressPoolSpec')),
        'nsxtClusterId': type.OptionalType(type.StringType()),
    },
    NsxtIpAddressPoolValidationSpec,
    False,
    None))



class NsxAlbControllerClusterSpec(VapiStruct):
    """
    NSX Alb cluster creation data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainIds': 'domain_ids',
                            'nsxIds': 'nsx_ids',
                            'clusterName': 'cluster_name',
                            'clusterFqdn': 'cluster_fqdn',
                            'clusterIpAddress': 'cluster_ip_address',
                            'formFactor': 'form_factor',
                            'adminPassword': 'admin_password',
                            'nodes': 'nodes',
                            'bundleId': 'bundle_id',
                            }

    def __init__(self,
                 domain_ids=None,
                 nsx_ids=None,
                 cluster_name=None,
                 cluster_fqdn=None,
                 cluster_ip_address=None,
                 form_factor=None,
                 admin_password=None,
                 nodes=None,
                 bundle_id=None,
                ):
        """
        :type  domain_ids: :class:`list` of :class:`str` or ``None``
        :param domain_ids: IDs of the workload Domains where NSX Advanced Load Balancer
            Cluster will be deployed 
            
            * Property is read-only.
            
            
        :type  nsx_ids: :class:`list` of :class:`str` or ``None``
        :param nsx_ids: IDs of NSX(s) for which NSX Advanced Load Balancer Cluster will be
            deployed 
            
            * Property is read-only.
            
            
        :type  cluster_name: :class:`str` or ``None``
        :param cluster_name: Name of NSX Advanced Load Balancer Cluster 
            
            * Property is read-only.
            
            
        :type  cluster_fqdn: :class:`str` or ``None``
        :param cluster_fqdn: NSX Advanced Load Balancer Cluster fully qualified domain name 
            
            * Property is read-only.
            
            
        :type  cluster_ip_address: :class:`str` or ``None``
        :param cluster_ip_address: [Deprecated] NSX Advanced Load Balancer Cluster Virtual IPv4
            address of format 'x.x.x.x' 
            
            * Property is read-only.
            
            
        :type  form_factor: :class:`str` or ``None``
        :param form_factor: Size of NSX ALB cluster 
            
            * Property is read-only.
            
            
        :type  admin_password: :class:`str` or ``None``
        :param admin_password: Admin user password of NSX Advanced Load Balancer Cluster 
            
            * Property is read-only.
            
            
        :type  nodes: :class:`list` of :class:`NsxAlbControllerNodeSpec` or ``None``
        :param nodes: NSX Advanced Load Balancer Cluster Controller Nodes 
            
            * Property is read-only.
            
            
        :type  bundle_id: :class:`str` or ``None``
        :param bundle_id: NSX Advanced Load Balancer Bundle ID 
            
            * Property is read-only.
            
            
        """
        self.domain_ids = domain_ids
        self.nsx_ids = nsx_ids
        self.cluster_name = cluster_name
        self.cluster_fqdn = cluster_fqdn
        self.cluster_ip_address = cluster_ip_address
        self.form_factor = form_factor
        self.admin_password = admin_password
        self.nodes = nodes
        self.bundle_id = bundle_id
        VapiStruct.__init__(self)


NsxAlbControllerClusterSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsx_alb_controller_cluster_spec', {
        'domainIds': type.OptionalType(type.ListType(type.StringType())),
        'nsxIds': type.OptionalType(type.ListType(type.StringType())),
        'clusterName': type.OptionalType(type.StringType()),
        'clusterFqdn': type.OptionalType(type.StringType()),
        'clusterIpAddress': type.OptionalType(type.StringType()),
        'formFactor': type.OptionalType(type.StringType()),
        'adminPassword': type.OptionalType(type.StringType()),
        'nodes': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxAlbControllerNodeSpec'))),
        'bundleId': type.OptionalType(type.StringType()),
    },
    NsxAlbControllerClusterSpec,
    False,
    None))



class NsxAlbControllerNodeSpec(VapiStruct):
    """
    NSX ALB Node representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ipAddress': 'ip_address',
                            }

    def __init__(self,
                 ip_address=None,
                ):
        """
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: IPv4 address of NSX Advanced Load Balancer Node 
            
            * Property is read-only.
            
            
        """
        self.ip_address = ip_address
        VapiStruct.__init__(self)


NsxAlbControllerNodeSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsx_alb_controller_node_spec', {
        'ipAddress': type.OptionalType(type.StringType()),
    },
    NsxAlbControllerNodeSpec,
    False,
    None))



class NsxAlbVersionValidationSpec(VapiStruct):
    """
    NSX Alb cluster creation data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainIds': 'domain_ids',
                            'nsxIds': 'nsx_ids',
                            'bundleId': 'bundle_id',
                            }

    def __init__(self,
                 domain_ids=None,
                 nsx_ids=None,
                 bundle_id=None,
                ):
        """
        :type  domain_ids: :class:`list` of :class:`str` or ``None``
        :param domain_ids: IDs of the WorkLoadDomain where NSX Advanced Load Balancer Cluster
            will be deployed 
            
            * Property is read-only.
            
            
        :type  nsx_ids: :class:`list` of :class:`str` or ``None``
        :param nsx_ids: IDs of NSX(s) for which NSX Advanced Load Balancer Cluster will be
            deployed 
            
            * Property is read-only.
            
            
        :type  bundle_id: :class:`str` or ``None``
        :param bundle_id: NSX Advanced Load Balancer Bundle ID 
            
            * Property is read-only.
            
            
        """
        self.domain_ids = domain_ids
        self.nsx_ids = nsx_ids
        self.bundle_id = bundle_id
        VapiStruct.__init__(self)


NsxAlbVersionValidationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsx_alb_version_validation_spec', {
        'domainIds': type.OptionalType(type.ListType(type.StringType())),
        'nsxIds': type.OptionalType(type.ListType(type.StringType())),
        'bundleId': type.OptionalType(type.StringType()),
    },
    NsxAlbVersionValidationSpec,
    False,
    None))



class IpPool(VapiStruct):
    """
    Represents an IP Pool of a network in a network pool

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'start': 'start',
                            'end': 'end',
                            }

    def __init__(self,
                 start=None,
                 end=None,
                ):
        """
        :type  start: :class:`str` or ``None``
        :param start: Start IP address of the IP pool
        :type  end: :class:`str` or ``None``
        :param end: End IP address of the IP pool
        """
        self.start = start
        self.end = end
        VapiStruct.__init__(self)


IpPool._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ip_pool', {
        'start': type.OptionalType(type.StringType()),
        'end': type.OptionalType(type.StringType()),
    },
    IpPool,
    False,
    None))



class Network(VapiStruct):
    """
    Represents a network in a network pool

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'type': 'type',
                            'vlanId': 'vlan_id',
                            'mtu': 'mtu',
                            'subnet': 'subnet',
                            'mask': 'mask',
                            'gateway': 'gateway',
                            'ipPools': 'ip_pools',
                            'freeIps': 'free_ips',
                            'usedIps': 'used_ips',
                            }

    def __init__(self,
                 id=None,
                 type=None,
                 vlan_id=None,
                 mtu=None,
                 subnet=None,
                 mask=None,
                 gateway=None,
                 ip_pools=None,
                 free_ips=None,
                 used_ips=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The ID of the network 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Network Type of the network
        :type  vlan_id: :class:`long` or ``None``
        :param vlan_id: VLAN ID associated with the network
        :type  mtu: :class:`long` or ``None``
        :param mtu: MTU of the network
        :type  subnet: :class:`str` or ``None``
        :param subnet: Subnet associated with the network
        :type  mask: :class:`str` or ``None``
        :param mask: Subnet mask for the subnet of the network
        :type  gateway: :class:`str` or ``None``
        :param gateway: Gateway for the network
        :type  ip_pools: :class:`list` of :class:`IpPool` or ``None``
        :param ip_pools: List of IP pool ranges to use
        :type  free_ips: :class:`list` of :class:`str` or ``None``
        :param free_ips: List of free IPs to use 
            
            * Property is read-only.
            
            
        :type  used_ips: :class:`list` of :class:`str` or ``None``
        :param used_ips: List of used IPs 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.type = type
        self.vlan_id = vlan_id
        self.mtu = mtu
        self.subnet = subnet
        self.mask = mask
        self.gateway = gateway
        self.ip_pools = ip_pools
        self.free_ips = free_ips
        self.used_ips = used_ips
        VapiStruct.__init__(self)


Network._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.network', {
        'id': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'vlanId': type.OptionalType(type.IntegerType()),
        'mtu': type.OptionalType(type.IntegerType()),
        'subnet': type.OptionalType(type.StringType()),
        'mask': type.OptionalType(type.StringType()),
        'gateway': type.OptionalType(type.StringType()),
        'ipPools': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'IpPool'))),
        'freeIps': type.OptionalType(type.ListType(type.StringType())),
        'usedIps': type.OptionalType(type.ListType(type.StringType())),
    },
    Network,
    False,
    None))



class NetworkPool(VapiStruct):
    """
    Represents a network pool in the system

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'networks': 'networks',
                            'hostsCount': 'hosts_count',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 networks=None,
                 hosts_count=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The ID of the network pool 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: User specified name of the network pool
        :type  networks: :class:`list` of :class:`Network` or ``None``
        :param networks: Representing the networks associated with the network pool
        :type  hosts_count: :class:`long` or ``None``
        :param hosts_count: Number of hosts connected to the network pool 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.name = name
        self.networks = networks
        self.hosts_count = hosts_count
        VapiStruct.__init__(self)


NetworkPool._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.network_pool', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'networks': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Network'))),
        'hostsCount': type.OptionalType(type.IntegerType()),
    },
    NetworkPool,
    False,
    None))



class AsyncPatch(VapiStruct):
    """
    Async patch bundle rest model that is located in the 2.0 manifest, these
    models are consumed by LCM's async patch workflows to determine if customer
    can download patch in list and apply.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'productVersion': 'product_version',
                            'supportedSkuTypes': 'supported_sku_types',
                            'inputSpecUrl': 'input_spec_url',
                            'sddcHotPatchInfo': 'sddc_hot_patch_info',
                            }

    def __init__(self,
                 product_version=None,
                 supported_sku_types=None,
                 input_spec_url=None,
                 sddc_hot_patch_info=None,
                ):
        """
        :type  product_version: :class:`str` or ``None``
        :param product_version: Product version of the async patch bundle 
            
            * Property is read-only.
            
            
        :type  supported_sku_types: :class:`list` of :class:`str` or ``None``
        :param supported_sku_types: Supported SKU types of the async patch bundle 
            
            * Property is read-only.
            
            
        :type  input_spec_url: :class:`str` or ``None``
        :param input_spec_url: Input spec URL of the async patch bundle 
            
            * Property is read-only.
            
            
        :type  sddc_hot_patch_info: (:class:`dict` of :class:`str` and :class:`list` of :class:`SddcHotPatchInfo`) or ``None``
        :param sddc_hot_patch_info: Sddc hot patch info for each sddc manager service (lcm, dm, om,
            commonsvc) 
            
            * Property is read-only.
            
            
        """
        self.product_version = product_version
        self.supported_sku_types = supported_sku_types
        self.input_spec_url = input_spec_url
        self.sddc_hot_patch_info = sddc_hot_patch_info
        VapiStruct.__init__(self)


AsyncPatch._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.async_patch', {
        'productVersion': type.OptionalType(type.StringType()),
        'supportedSkuTypes': type.OptionalType(type.ListType(type.StringType())),
        'inputSpecUrl': type.OptionalType(type.StringType()),
        'sddcHotPatchInfo': type.OptionalType(type.MapType(type.StringType(), type.ListType(type.ReferenceType(__name__, 'SddcHotPatchInfo')))),
    },
    AsyncPatch,
    False,
    None))



class BundleRecall(VapiStruct):
    """
    Bundle Recall model for collection of bundles that are recalled with their
    replacements if applicable.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'recalledBundleIds': 'recalled_bundle_ids',
                            'replacementBundleStatus': 'replacement_bundle_status',
                            'replacementBundleIds': 'replacement_bundle_ids',
                            }

    def __init__(self,
                 recalled_bundle_ids=None,
                 replacement_bundle_status=None,
                 replacement_bundle_ids=None,
                ):
        """
        :type  recalled_bundle_ids: :class:`list` of :class:`str` or ``None``
        :param recalled_bundle_ids: List of Bundle IDs that are recalled 
            
            * Property is read-only.
            
            
        :type  replacement_bundle_status: :class:`str` or ``None``
        :param replacement_bundle_status: Status of bundle replacement. 
            
            * Property is read-only.
            
            
        :type  replacement_bundle_ids: :class:`list` of :class:`str` or ``None``
        :param replacement_bundle_ids: List of Bundle IDs that act as replacement 
            
            * Property is read-only.
            
            
        """
        self.recalled_bundle_ids = recalled_bundle_ids
        self.replacement_bundle_status = replacement_bundle_status
        self.replacement_bundle_ids = replacement_bundle_ids
        VapiStruct.__init__(self)


BundleRecall._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.bundle_recall', {
        'recalledBundleIds': type.OptionalType(type.ListType(type.StringType())),
        'replacementBundleStatus': type.OptionalType(type.StringType()),
        'replacementBundleIds': type.OptionalType(type.ListType(type.StringType())),
    },
    BundleRecall,
    False,
    None))



class Manifest(VapiStruct):
    """
    LCM 2.0 Manifest model that represents the metadata of the VMware Cloud
    foundation components and releases that Lyfe cycle manager utilises.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'sequenceNumber': 'sequence_number',
                            'creationTime': 'creation_time',
                            'publishedDate': 'published_date',
                            'releases': 'releases',
                            'recalledBundles': 'recalled_bundles',
                            'sddcManagerReleases': 'sddc_manager_releases',
                            'asyncPatches': 'async_patches',
                            'vvsMappings': 'vvs_mappings',
                            }

    def __init__(self,
                 version=None,
                 sequence_number=None,
                 creation_time=None,
                 published_date=None,
                 releases=None,
                 recalled_bundles=None,
                 sddc_manager_releases=None,
                 async_patches=None,
                 vvs_mappings=None,
                ):
        """
        :type  version: :class:`long` or ``None``
        :param version: Manifest version supported by VCF 
            
            * Property is read-only.
            
            
        :type  sequence_number: :class:`long` or ``None``
        :param sequence_number: Manifest sequence number which signifies an update in manifest 
            
            * Property is read-only.
            
            
        :type  creation_time: :class:`str` or ``None``
        :param creation_time: Creation time for the manifest e.g. 2020-06-08T02:20:15.844Z, in
            yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format 
            
            * Property is read-only.
            
            
        :type  published_date: :class:`str` or ``None``
        :param published_date: Date of publish of the manifest e.g. 2020-06-08T02:20:15.844Z, in
            yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format 
            
            * Property is read-only.
            
            
        :type  releases: :class:`list` of :class:`Release` or ``None``
        :param releases: Releases of VCF in the ascending order of product version 
            
            * Property is read-only.
            
            
        :type  recalled_bundles: :class:`list` of :class:`BundleRecall` or ``None``
        :param recalled_bundles: Collection of bundles that are recalled and their replacements, if
            applicable 
            
            * Property is read-only.
            
            
        :type  sddc_manager_releases: :class:`list` of :class:`SddcManagerRelease` or ``None``
        :param sddc_manager_releases: Product releases in the ascending order of product version 
            
            * Items must be unique.
            * Property is read-only.
            
            
        :type  async_patches: (:class:`dict` of :class:`str` and :class:`list` of :class:`AsyncPatch`) or ``None``
        :param async_patches: Async patches used by Async Patch Tool 
            
            * Property is read-only.
            
            
        :type  vvs_mappings: (:class:`dict` of :class:`str` and (:class:`dict` of :class:`str` and :class:`VvsVersionAliases`)) or ``None``
        :param vvs_mappings: VVS product release Id to VCF version mapping 
            
            * Property is read-only.
            
            
        """
        self.version = version
        self.sequence_number = sequence_number
        self.creation_time = creation_time
        self.published_date = published_date
        self.releases = releases
        self.recalled_bundles = recalled_bundles
        self.sddc_manager_releases = sddc_manager_releases
        self.async_patches = async_patches
        self.vvs_mappings = vvs_mappings
        VapiStruct.__init__(self)


Manifest._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.manifest', {
        'version': type.OptionalType(type.IntegerType()),
        'sequenceNumber': type.OptionalType(type.IntegerType()),
        'creationTime': type.OptionalType(type.StringType()),
        'publishedDate': type.OptionalType(type.StringType()),
        'releases': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Release'))),
        'recalledBundles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BundleRecall'))),
        'sddcManagerReleases': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SddcManagerRelease'))),
        'asyncPatches': type.OptionalType(type.MapType(type.StringType(), type.ListType(type.ReferenceType(__name__, 'AsyncPatch')))),
        'vvsMappings': type.OptionalType(type.MapType(type.StringType(), type.MapType(type.StringType(), type.ReferenceType(__name__, 'VvsVersionAliases')))),
    },
    Manifest,
    False,
    None))



class PatchBundle(VapiStruct):
    """
    Model for patch bundle in a release

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'bundleId': 'bundle_id',
                            'bundleType': 'bundle_type',
                            'bundleElements': 'bundle_elements',
                            'cumulativeFromVcfVersion': 'cumulative_from_vcf_version',
                            }

    def __init__(self,
                 bundle_id=None,
                 bundle_type=None,
                 bundle_elements=None,
                 cumulative_from_vcf_version=None,
                ):
        """
        :type  bundle_id: :class:`str` or ``None``
        :param bundle_id: Bundle ID of the patch bundle 
            
            * Property is read-only.
            
            
        :type  bundle_type: :class:`str` or ``None``
        :param bundle_type: Bundle type of the patch bundle 
            
            * Property is read-only.
            
            
        :type  bundle_elements: :class:`list` of :class:`str` or ``None``
        :param bundle_elements: Bundle elements of the patch bundle 
            
            * Property is read-only.
            
            
        :type  cumulative_from_vcf_version: :class:`str` or ``None``
        :param cumulative_from_vcf_version: Minimum VCF version that this patch bundle can be directly applied
            on 
            
            * Property is read-only.
            
            
        """
        self.bundle_id = bundle_id
        self.bundle_type = bundle_type
        self.bundle_elements = bundle_elements
        self.cumulative_from_vcf_version = cumulative_from_vcf_version
        VapiStruct.__init__(self)


PatchBundle._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.patch_bundle', {
        'bundleId': type.OptionalType(type.StringType()),
        'bundleType': type.OptionalType(type.StringType()),
        'bundleElements': type.OptionalType(type.ListType(type.StringType())),
        'cumulativeFromVcfVersion': type.OptionalType(type.StringType()),
    },
    PatchBundle,
    False,
    None))



class ProductVersion(VapiStruct):
    """
    Details of the product/component for the release.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'version': 'version',
                            'changeId': 'change_id',
                            'publicName': 'public_name',
                            'releaseURL': 'release_url',
                            'additionalMetadata': 'additional_metadata',
                            'automatedInstall': 'automated_install',
                            'lifecycleManagedBy': 'lifecycle_managed_by',
                            }

    def __init__(self,
                 name=None,
                 version=None,
                 change_id=None,
                 public_name=None,
                 release_url=None,
                 additional_metadata=None,
                 automated_install=None,
                 lifecycle_managed_by=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the product. e.g ESX 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: Version for the product, e.g 6.7.0-11675023 
            
            * Property is read-only.
            
            
        :type  change_id: :class:`str` or ``None``
        :param change_id: Build or CLN for the product, e.g 11675023 
            
            * Property is read-only.
            
            
        :type  public_name: :class:`str` or ``None``
        :param public_name: Public name of the product, e.g VMware ESXi 
            
            * Property is read-only.
            
            
        :type  release_url: :class:`str` or ``None``
        :param release_url: URL for the release. 
            
            * Property is read-only.
            
            
        :type  additional_metadata: :class:`str` or ``None``
        :param additional_metadata: any additional metadata 
            
            * Property is read-only.
            
            
        :type  automated_install: :class:`bool` or ``None``
        :param automated_install: Automated install or not, e.g. true 
            
            * Property is read-only.
            
            
        :type  lifecycle_managed_by: :class:`str` or ``None``
        :param lifecycle_managed_by: Lifecycle is managed by whom, e.g. SDDC_MANAGER_VCF 
            
            * Property is read-only.
            
            
        """
        self.name = name
        self.version = version
        self.change_id = change_id
        self.public_name = public_name
        self.release_url = release_url
        self.additional_metadata = additional_metadata
        self.automated_install = automated_install
        self.lifecycle_managed_by = lifecycle_managed_by
        VapiStruct.__init__(self)


ProductVersion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.product_version', {
        'name': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'changeId': type.OptionalType(type.StringType()),
        'publicName': type.OptionalType(type.StringType()),
        'releaseURL': type.OptionalType(type.StringType()),
        'additionalMetadata': type.OptionalType(type.StringType()),
        'automatedInstall': type.OptionalType(type.BooleanType()),
        'lifecycleManagedBy': type.OptionalType(type.StringType()),
    },
    ProductVersion,
    False,
    None))



class Release(VapiStruct):
    """
    Model for releases with their description and product version

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'product': 'product',
                            'version': 'version',
                            'minCompatibleVcfVersion': 'min_compatible_vcf_version',
                            'description': 'description',
                            'releaseDate': 'release_date',
                            'bom': 'bom',
                            'isApplicable': 'is_applicable',
                            'notApplicableReason': 'not_applicable_reason',
                            'sku': 'sku',
                            'updates': 'updates',
                            'patchBundles': 'patch_bundles',
                            'eol': 'eol',
                            'upgradeOrder': 'upgrade_order',
                            'minInstallerVersion': 'min_installer_version',
                            }

    def __init__(self,
                 product=None,
                 version=None,
                 min_compatible_vcf_version=None,
                 description=None,
                 release_date=None,
                 bom=None,
                 is_applicable=None,
                 not_applicable_reason=None,
                 sku=None,
                 updates=None,
                 patch_bundles=None,
                 eol=None,
                 upgrade_order=None,
                 min_installer_version=None,
                ):
        """
        :type  product: :class:`str` or ``None``
        :param product: Name of the product e.g. "VCF" 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: Version of the release 
            
            * Property is read-only.
            
            
        :type  min_compatible_vcf_version: :class:`str` or ``None``
        :param min_compatible_vcf_version: Minimum compatible VCF version, used to represent compatibility of
            SDDC Manager and VMware BOM components 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Release description with all major features. 
            
            * Property is read-only.
            
            
        :type  release_date: :class:`str` or ``None``
        :param release_date: Release date e.g. 2020-06-08T02:20:15.844Z in
            yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format 
            
            * Property is read-only.
            
            
        :type  bom: :class:`list` of :class:`ProductVersion` or ``None``
        :param bom: Release bill of materials 
            
            * Property is read-only.
            
            
        :type  is_applicable: :class:`bool` or ``None``
        :param is_applicable: [Deprecated] Whether bundle is applicable or not. 
            
            * Property is read-only.
            
            
        :type  not_applicable_reason: :class:`str` or ``None``
        :param not_applicable_reason: [Deprecated] Incompatibility reason for not applicable. 
            
            * Property is read-only.
            
            
        :type  sku: :class:`list` of :class:`SkuBomDetails` or ``None``
        :param sku: Release sku specific patch and bill of materials 
            
            * Property is read-only.
            
            
        :type  updates: :class:`list` of :class:`ReleaseUpdate` or ``None``
        :param updates: Collection of release updates 
            
            * Property is read-only.
            
            
        :type  patch_bundles: :class:`list` of :class:`PatchBundle` or ``None``
        :param patch_bundles: List of patch bundles in this release 
            
            * Property is read-only.
            
            
        :type  eol: :class:`str` or ``None``
        :param eol: Release eol information e.g. 2020-06-08T02:20:15.844Z in
            yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format 
            
            * Property is read-only.
            
            
        :type  upgrade_order: :class:`str` or ``None``
        :param upgrade_order: Custom upgrade order. Comma separated list of components in upgrade
            order. Supported components types: NSX_T_MANAGER, VCENTER,
            ESX_HOST. 
            
            * Property is read-only.
            
            
        :type  min_installer_version: :class:`str` or ``None``
        :param min_installer_version: Minimum installer version, e.g. 9.0.0.0 
            
            * Property is read-only.
            
            
        """
        self.product = product
        self.version = version
        self.min_compatible_vcf_version = min_compatible_vcf_version
        self.description = description
        self.release_date = release_date
        self.bom = bom
        self.is_applicable = is_applicable
        self.not_applicable_reason = not_applicable_reason
        self.sku = sku
        self.updates = updates
        self.patch_bundles = patch_bundles
        self.eol = eol
        self.upgrade_order = upgrade_order
        self.min_installer_version = min_installer_version
        VapiStruct.__init__(self)


Release._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.release', {
        'product': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'minCompatibleVcfVersion': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'releaseDate': type.OptionalType(type.StringType()),
        'bom': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ProductVersion'))),
        'isApplicable': type.OptionalType(type.BooleanType()),
        'notApplicableReason': type.OptionalType(type.StringType()),
        'sku': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SkuBomDetails'))),
        'updates': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ReleaseUpdate'))),
        'patchBundles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'PatchBundle'))),
        'eol': type.OptionalType(type.StringType()),
        'upgradeOrder': type.OptionalType(type.StringType()),
        'minInstallerVersion': type.OptionalType(type.StringType()),
    },
    Release,
    False,
    None))



class ReleaseUpdate(VapiStruct):
    """
    Update to a given release

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'productName': 'product_name',
                            'baseProductVersion': 'base_product_version',
                            'description': 'description',
                            'releaseUpdateURL': 'release_update_url',
                            'releaseDate': 'release_date',
                            }

    def __init__(self,
                 id=None,
                 product_name=None,
                 base_product_version=None,
                 description=None,
                 release_update_url=None,
                 release_date=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Release version 
            
            * Property is read-only.
            
            
        :type  product_name: :class:`str` or ``None``
        :param product_name: Product name for which the release update is provided 
            
            * Property is read-only.
            
            
        :type  base_product_version: :class:`str` or ``None``
        :param base_product_version: Base product version for the release 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description of the release update 
            
            * Property is read-only.
            
            
        :type  release_update_url: :class:`str` or ``None``
        :param release_update_url: URL to the release update 
            
            * Property is read-only.
            
            
        :type  release_date: :class:`str` or ``None``
        :param release_date: Release date e.g. 2020-06-08T02:20:15.844Z in
            yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.product_name = product_name
        self.base_product_version = base_product_version
        self.description = description
        self.release_update_url = release_update_url
        self.release_date = release_date
        VapiStruct.__init__(self)


ReleaseUpdate._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.release_update', {
        'id': type.OptionalType(type.StringType()),
        'productName': type.OptionalType(type.StringType()),
        'baseProductVersion': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'releaseUpdateURL': type.OptionalType(type.URIType()),
        'releaseDate': type.OptionalType(type.StringType()),
    },
    ReleaseUpdate,
    False,
    None))



class SddcHotPatchInfo(VapiStruct):
    """
    Sddc Hot patch info rest model that is located in the 2.0 manifest, as part
    of the async patch catalog.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'sddcHotPatchMinTargetVcfVersion': 'sddc_hot_patch_min_target_vcf_version',
                            }

    def __init__(self,
                 version=None,
                 sddc_hot_patch_min_target_vcf_version=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: Product version 
            
            * Property is read-only.
            
            
        :type  sddc_hot_patch_min_target_vcf_version: :class:`str` or ``None``
        :param sddc_hot_patch_min_target_vcf_version: Sddc Hot patch min target version 
            
            * Property is read-only.
            
            
        """
        self.version = version
        self.sddc_hot_patch_min_target_vcf_version = sddc_hot_patch_min_target_vcf_version
        VapiStruct.__init__(self)


SddcHotPatchInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sddc_hot_patch_info', {
        'version': type.OptionalType(type.StringType()),
        'sddcHotPatchMinTargetVcfVersion': type.OptionalType(type.StringType()),
    },
    SddcHotPatchInfo,
    False,
    None))



class SddcManagerRelease(VapiStruct):
    """
    Collection of Sddc Manager Releases

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'description': 'description',
                            'additionalMetadata': 'additional_metadata',
                            'bundleId': 'bundle_id',
                            'releaseDate': 'release_date',
                            'cumulativeFromVcfVersion': 'cumulative_from_vcf_version',
                            }

    def __init__(self,
                 version=None,
                 description=None,
                 additional_metadata=None,
                 bundle_id=None,
                 release_date=None,
                 cumulative_from_vcf_version=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: Sddc Manager release version 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Sddc Manager release description 
            
            * Property is read-only.
            
            
        :type  additional_metadata: :class:`str` or ``None``
        :param additional_metadata: Sddc Manager release additional details 
            
            * Property is read-only.
            
            
        :type  bundle_id: :class:`str` or ``None``
        :param bundle_id: Bundle ID of the Sddc Manager release 
            
            * Property is read-only.
            
            
        :type  release_date: :class:`long` or ``None``
        :param release_date: Sddc Manager version release date in epoch 
            
            * Property is read-only.
            
            
        :type  cumulative_from_vcf_version: :class:`str` or ``None``
        :param cumulative_from_vcf_version: Minimum VCF version that this patch bundle can be directly applied
            on 
            
            * Property is read-only.
            
            
        """
        self.version = version
        self.description = description
        self.additional_metadata = additional_metadata
        self.bundle_id = bundle_id
        self.release_date = release_date
        self.cumulative_from_vcf_version = cumulative_from_vcf_version
        VapiStruct.__init__(self)


SddcManagerRelease._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sddc_manager_release', {
        'version': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'additionalMetadata': type.OptionalType(type.StringType()),
        'bundleId': type.OptionalType(type.StringType()),
        'releaseDate': type.OptionalType(type.IntegerType()),
        'cumulativeFromVcfVersion': type.OptionalType(type.StringType()),
    },
    SddcManagerRelease,
    False,
    None))



class SkuBomDetails(VapiStruct):
    """
    Model for sku with their name, description, patchBundles and bom

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'description': 'description',
                            'skuSpecificPatchBundles': 'sku_specific_patch_bundles',
                            'bom': 'bom',
                            }

    def __init__(self,
                 name=None,
                 description=None,
                 sku_specific_patch_bundles=None,
                 bom=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: SKU name 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description to be shown in release page 
            
            * Property is read-only.
            
            
        :type  sku_specific_patch_bundles: :class:`list` of :class:`SkuSpecificPatchBundles` or ``None``
        :param sku_specific_patch_bundles: List of patch bundles in this release 
            
            * Property is read-only.
            
            
        :type  bom: :class:`list` of :class:`ProductVersion` or ``None``
        :param bom: Sku specific bill of materials 
            
            * Property is read-only.
            
            
        """
        self.name = name
        self.description = description
        self.sku_specific_patch_bundles = sku_specific_patch_bundles
        self.bom = bom
        VapiStruct.__init__(self)


SkuBomDetails._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sku_bom_details', {
        'name': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'skuSpecificPatchBundles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SkuSpecificPatchBundles'))),
        'bom': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ProductVersion'))),
    },
    SkuBomDetails,
    False,
    None))



class SkuSpecificPatchBundles(VapiStruct):
    """
    Model for Sku specific patch bundle in a release

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'bundleType': 'bundle_type',
                            'bundleVersion': 'bundle_version',
                            'version': 'version',
                            }

    def __init__(self,
                 bundle_type=None,
                 bundle_version=None,
                 version=None,
                ):
        """
        :type  bundle_type: :class:`str` or ``None``
        :param bundle_type: Bundle type of the patch bundle 
            
            * Property is read-only.
            
            
        :type  bundle_version: :class:`str` or ``None``
        :param bundle_version: Bundle Version of the product 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: Product version 
            
            * Property is read-only.
            
            
        """
        self.bundle_type = bundle_type
        self.bundle_version = bundle_version
        self.version = version
        VapiStruct.__init__(self)


SkuSpecificPatchBundles._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sku_specific_patch_bundles', {
        'bundleType': type.OptionalType(type.StringType()),
        'bundleVersion': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
    },
    SkuSpecificPatchBundles,
    False,
    None))



class VvsVersionAliases(VapiStruct):
    """
    Vvs Mapping rest model that is located in the 2.0 manifest, these models
    are consumed by AP tool to determine the release Id to vcf version mapping
    in VVS compatibility data.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'aliases': 'aliases',
                            }

    def __init__(self,
                 version=None,
                 aliases=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: Product version 
            
            * Property is read-only.
            
            
        :type  aliases: :class:`list` of :class:`str` or ``None``
        :param aliases: Product version aliases 
            
            * Property is read-only.
            
            
        """
        self.version = version
        self.aliases = aliases
        VapiStruct.__init__(self)


VvsVersionAliases._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vvs_version_aliases', {
        'version': type.OptionalType(type.StringType()),
        'aliases': type.OptionalType(type.ListType(type.StringType())),
    },
    VvsVersionAliases,
    False,
    None))



class LicenseKey(VapiStruct):
    """
    Defines a license key and its attributes

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'key': 'key',
                            'productType': 'product_type',
                            'description': 'description',
                            'productVersion': 'product_version',
                            'isUnlimited': 'is_unlimited',
                            'licenseKeyUsage': 'license_key_usage',
                            'licenseKeyValidity': 'license_key_validity',
                            'features': 'features',
                            'licenseEdition': 'license_edition',
                            'licenseUnit': 'license_unit',
                            'minimumCore': 'minimum_core',
                            }

    def __init__(self,
                 id=None,
                 key=None,
                 product_type=None,
                 description=None,
                 product_version=None,
                 is_unlimited=None,
                 license_key_usage=None,
                 license_key_validity=None,
                 features=None,
                 license_edition=None,
                 license_unit=None,
                 minimum_core=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The ID of the license key 
            
            * Property is read-only.
            
            
        :type  key: :class:`str` or ``None``
        :param key: The 29 alpha numeric character license key with hyphens 
            
            * Property is read-only.
            
            
        :type  product_type: :class:`str` or ``None``
        :param product_type: The type of the product to which the license key is applicable 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description of the license key given by user 
            
            * Property is read-only.
            
            
        :type  product_version: :class:`str` or ``None``
        :param product_version: Product version 
            
            * Property is read-only.
            
            
        :type  is_unlimited: :class:`bool` or ``None``
        :param is_unlimited: Indicates if the license key has unlimited usage 
            
            * Property is read-only.
            
            
        :type  license_key_usage: :class:`LicenseKeyUsage` or ``None``
        :param license_key_usage:         :type  license_key_validity: :class:`LicenseKeyValidity` or ``None``
        :param license_key_validity:         :type  features: :class:`list` of :class:`str` or ``None``
        :param features: License key features 
            
            * Property is read-only.
            
            
        :type  license_edition: :class:`str` or ``None``
        :param license_edition: License key edition 
            
            * Property is read-only.
            
            
        :type  license_unit: :class:`str` or ``None``
        :param license_unit: License capacity unit 
            
            * Property is read-only.
            
            
        :type  minimum_core: :class:`long` or ``None``
        :param minimum_core: The minimum number of core licenses required per CPU, when license
            unit is cpu core 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.key = key
        self.product_type = product_type
        self.description = description
        self.product_version = product_version
        self.is_unlimited = is_unlimited
        self.license_key_usage = license_key_usage
        self.license_key_validity = license_key_validity
        self.features = features
        self.license_edition = license_edition
        self.license_unit = license_unit
        self.minimum_core = minimum_core
        VapiStruct.__init__(self)


LicenseKey._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.license_key', {
        'id': type.OptionalType(type.StringType()),
        'key': type.OptionalType(type.StringType()),
        'productType': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'productVersion': type.OptionalType(type.StringType()),
        'isUnlimited': type.OptionalType(type.BooleanType()),
        'licenseKeyUsage': type.OptionalType(type.ReferenceType(__name__, 'LicenseKeyUsage')),
        'licenseKeyValidity': type.OptionalType(type.ReferenceType(__name__, 'LicenseKeyValidity')),
        'features': type.OptionalType(type.ListType(type.StringType())),
        'licenseEdition': type.OptionalType(type.StringType()),
        'licenseUnit': type.OptionalType(type.StringType()),
        'minimumCore': type.OptionalType(type.IntegerType()),
    },
    LicenseKey,
    False,
    None))



class LicenseKeyUsage(VapiStruct):
    """
    Defines license key usage

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'total': 'total',
                            'remaining': 'remaining',
                            'used': 'used',
                            'licenseUnit': 'license_unit',
                            }

    def __init__(self,
                 total=None,
                 remaining=None,
                 used=None,
                 license_unit=None,
                ):
        """
        :type  total: :class:`long` or ``None``
        :param total: The total units of the license key 
            
            * Property is read-only.
            
            
        :type  remaining: :class:`long` or ``None``
        :param remaining: The remaining/free units of the license key 
            
            * Property is read-only.
            
            
        :type  used: :class:`long` or ``None``
        :param used: The consumed/used units of the license key 
            
            * Property is read-only.
            
            
        :type  license_unit: :class:`str` or ``None``
        :param license_unit: Units of the license key 
            
            * Property is read-only.
            
            
        """
        self.total = total
        self.remaining = remaining
        self.used = used
        self.license_unit = license_unit
        VapiStruct.__init__(self)


LicenseKeyUsage._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.license_key_usage', {
        'total': type.OptionalType(type.IntegerType()),
        'remaining': type.OptionalType(type.IntegerType()),
        'used': type.OptionalType(type.IntegerType()),
        'licenseUnit': type.OptionalType(type.StringType()),
    },
    LicenseKeyUsage,
    False,
    None))



class LicenseKeyValidity(VapiStruct):
    """
    Defines license key validity details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'licenseKeyStatus': 'license_key_status',
                            'expiryDate': 'expiry_date',
                            }

    def __init__(self,
                 license_key_status=None,
                 expiry_date=None,
                ):
        """
        :type  license_key_status: :class:`str` or ``None``
        :param license_key_status: The validity status of the license key 
            
            * Property is read-only.
            
            
        :type  expiry_date: :class:`str` or ``None``
        :param expiry_date: The license key expiry date 
            
            * Property is read-only.
            
            
        """
        self.license_key_status = license_key_status
        self.expiry_date = expiry_date
        VapiStruct.__init__(self)


LicenseKeyValidity._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.license_key_validity', {
        'licenseKeyStatus': type.OptionalType(type.StringType()),
        'expiryDate': type.OptionalType(type.StringType()),
    },
    LicenseKeyValidity,
    False,
    None))



class FederatedIdentityProviderSpec(VapiStruct):
    """
    The identity management configuration when the provider is via broker
    federation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'directory': 'directory',
                            'oidcSpec': 'oidc_spec',
                            'syncClientTokenTTL': 'sync_client_token_ttl',
                            }

    def __init__(self,
                 name=None,
                 directory=None,
                 oidc_spec=None,
                 sync_client_token_ttl=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: The user-friendly name for the Identity Provider
        :type  directory: :class:`IdentityProviderDirectory` or ``None``
        :param directory:         :type  oidc_spec: :class:`OidcSpec` or ``None``
        :param oidc_spec:         :type  sync_client_token_ttl: :class:`long` or ``None``
        :param sync_client_token_ttl: The lifetime in seconds of the sync client bear token, default to 6
            months if not specified. This field is deprecated. It is being made
            as a query parameter in the sync client token generation API.
        """
        self.name = name
        self.directory = directory
        self.oidc_spec = oidc_spec
        self.sync_client_token_ttl = sync_client_token_ttl
        VapiStruct.__init__(self)


FederatedIdentityProviderSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.federated_identity_provider_spec', {
        'name': type.OptionalType(type.StringType()),
        'directory': type.OptionalType(type.ReferenceType(__name__, 'IdentityProviderDirectory')),
        'oidcSpec': type.OptionalType(type.ReferenceType(__name__, 'OidcSpec')),
        'syncClientTokenTTL': type.OptionalType(type.IntegerType()),
    },
    FederatedIdentityProviderSpec,
    False,
    None))



class IdentityProviderDirectory(VapiStruct):
    """
    The directory configuration when the provider is via broker federation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'directoryId': 'directory_id',
                            'name': 'name',
                            'defaultDomain': 'default_domain',
                            'domains': 'domains',
                            'federatedIdpSourceType': 'federated_idp_source_type',
                            }

    def __init__(self,
                 directory_id=None,
                 name=None,
                 default_domain=None,
                 domains=None,
                 federated_idp_source_type=None,
                ):
        """
        :type  directory_id: :class:`str` or ``None``
        :param directory_id: The id of the directory
        :type  name: :class:`str` or ``None``
        :param name: The user-friendly name for the directory. This must be unique and
            the allowed symbols are letters in any language, digits (0-9),
            space, underscore and hyphen
        :type  default_domain: :class:`str` or ``None``
        :param default_domain: The trusted default domain of the directory 
            
            * Property is read-only.
            
            
        :type  domains: :class:`list` of :class:`str` or ``None``
        :param domains: The set of trusted domains of the directory 
            
            * Property is read-only.
            
            
        :type  federated_idp_source_type: :class:`str` or ``None``
        :param federated_idp_source_type: The type of the Federated IDP 
            
            * Property is read-only.
            
            
        """
        self.directory_id = directory_id
        self.name = name
        self.default_domain = default_domain
        self.domains = domains
        self.federated_idp_source_type = federated_idp_source_type
        VapiStruct.__init__(self)


IdentityProviderDirectory._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.identity_provider_directory', {
        'directoryId': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'defaultDomain': type.OptionalType(type.StringType()),
        'domains': type.OptionalType(type.ListType(type.StringType())),
        'federatedIdpSourceType': type.OptionalType(type.StringType()),
    },
    IdentityProviderDirectory,
    False,
    None))



class IdentityProviderSpec(VapiStruct):
    """
    Identity Provider Spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'type': 'type',
                            'certChain': 'cert_chain',
                            'ldap': 'ldap',
                            'oidc': 'oidc',
                            'fedIdpSpec': 'fed_idp_spec',
                            }

    def __init__(self,
                 name=None,
                 type=None,
                 cert_chain=None,
                 ldap=None,
                 oidc=None,
                 fed_idp_spec=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: The user-friendly name for the Identity Provider
        :type  type: :class:`str` or ``None``
        :param type: The type of Identity Identity Provider
        :type  cert_chain: :class:`list` of :class:`str` or ``None``
        :param cert_chain: The root certificate chain required to connect to the external
            server
        :type  ldap: :class:`LdapSpec` or ``None``
        :param ldap:         :type  oidc: :class:`OidcSpec` or ``None``
        :param oidc:         :type  fed_idp_spec: :class:`FederatedIdentityProviderSpec` or ``None``
        :param fed_idp_spec:         """
        self.name = name
        self.type = type
        self.cert_chain = cert_chain
        self.ldap = ldap
        self.oidc = oidc
        self.fed_idp_spec = fed_idp_spec
        VapiStruct.__init__(self)


IdentityProviderSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.identity_provider_spec', {
        'name': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'certChain': type.OptionalType(type.ListType(type.StringType())),
        'ldap': type.OptionalType(type.ReferenceType(__name__, 'LdapSpec')),
        'oidc': type.OptionalType(type.ReferenceType(__name__, 'OidcSpec')),
        'fedIdpSpec': type.OptionalType(type.ReferenceType(__name__, 'FederatedIdentityProviderSpec')),
    },
    IdentityProviderSpec,
    False,
    None))



class LdapSpec(VapiStruct):
    """
    The LDAP specification when the protocol is LDAP

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'domainName': 'domain_name',
                            'domainAlias': 'domain_alias',
                            'username': 'username',
                            'password': 'password',
                            'sourceDetails': 'source_details',
                            }

    def __init__(self,
                 type=None,
                 domain_name=None,
                 domain_alias=None,
                 username=None,
                 password=None,
                 source_details=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: The type of the LDAP Server
        :type  domain_name: :class:`str` or ``None``
        :param domain_name: The name to associate with the created domain
        :type  domain_alias: :class:`str` or ``None``
        :param domain_alias: The optional alias to associate the domain name
        :type  username: :class:`str` or ``None``
        :param username: User name to connect to ldap(s) server
        :type  password: :class:`str` or ``None``
        :param password: Password to connect to the ldap(s) server
        :type  source_details: :class:`SourceDetails` or ``None``
        :param source_details:         """
        self.type = type
        self.domain_name = domain_name
        self.domain_alias = domain_alias
        self.username = username
        self.password = password
        self.source_details = source_details
        VapiStruct.__init__(self)


LdapSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ldap_spec', {
        'type': type.OptionalType(type.StringType()),
        'domainName': type.OptionalType(type.StringType()),
        'domainAlias': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
        'sourceDetails': type.OptionalType(type.ReferenceType(__name__, 'SourceDetails')),
    },
    LdapSpec,
    False,
    None))



class OidcSpec(VapiStruct):
    """
    Identity management configuration when the Identity Provider is based on
    oidc

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'clientId': 'client_id',
                            'clientSecret': 'client_secret',
                            'discoveryEndpoint': 'discovery_endpoint',
                            }

    def __init__(self,
                 client_id=None,
                 client_secret=None,
                 discovery_endpoint=None,
                ):
        """
        :type  client_id: :class:`str` or ``None``
        :param client_id: Client identifier to connect to the provider
        :type  client_secret: :class:`str` or ``None``
        :param client_secret: The secret shared between the client and the provider
        :type  discovery_endpoint: :class:`str` or ``None``
        :param discovery_endpoint: Endpoint to retrieve the provider metadata
        """
        self.client_id = client_id
        self.client_secret = client_secret
        self.discovery_endpoint = discovery_endpoint
        VapiStruct.__init__(self)


OidcSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.oidc_spec', {
        'clientId': type.OptionalType(type.StringType()),
        'clientSecret': type.OptionalType(type.StringType()),
        'discoveryEndpoint': type.OptionalType(type.StringType()),
    },
    OidcSpec,
    False,
    None))



class SourceDetails(VapiStruct):
    """
    Details of the Identity Source

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'usersBaseDn': 'users_base_dn',
                            'groupsBaseDn': 'groups_base_dn',
                            'certChain': 'cert_chain',
                            'serverEndpoints': 'server_endpoints',
                            }

    def __init__(self,
                 users_base_dn=None,
                 groups_base_dn=None,
                 cert_chain=None,
                 server_endpoints=None,
                ):
        """
        :type  users_base_dn: :class:`str` or ``None``
        :param users_base_dn: Base distinguished name for users
        :type  groups_base_dn: :class:`str` or ``None``
        :param groups_base_dn: Base distinguished name for groups
        :type  cert_chain: :class:`list` of :class:`str` or ``None``
        :param cert_chain: SSL certificate chain in base64 encoding. This field can be unset
            only, if all the active directory server endpoints use the LDAP
            (not LDAPS) protocol
        :type  server_endpoints: :class:`list` of :class:`str` or ``None``
        :param server_endpoints: Active directory server endpoints. At least one active directory
            server endpoint must be set
        """
        self.users_base_dn = users_base_dn
        self.groups_base_dn = groups_base_dn
        self.cert_chain = cert_chain
        self.server_endpoints = server_endpoints
        VapiStruct.__init__(self)


SourceDetails._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.source_details', {
        'usersBaseDn': type.OptionalType(type.StringType()),
        'groupsBaseDn': type.OptionalType(type.StringType()),
        'certChain': type.OptionalType(type.ListType(type.StringType())),
        'serverEndpoints': type.OptionalType(type.ListType(type.StringType())),
    },
    SourceDetails,
    False,
    None))



class IdentitySourceSpec(VapiStruct):
    """
    Identity Source Spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'ldap': 'ldap',
                            }

    def __init__(self,
                 name=None,
                 ldap=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: The user-friendly name for the identity Source
        :type  ldap: :class:`LdapSpec` or ``None``
        :param ldap:         """
        self.name = name
        self.ldap = ldap
        VapiStruct.__init__(self)


IdentitySourceSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.identity_source_spec', {
        'name': type.OptionalType(type.StringType()),
        'ldap': type.OptionalType(type.ReferenceType(__name__, 'LdapSpec')),
    },
    IdentitySourceSpec,
    False,
    None))



class HostCommissionSpec(VapiStruct):
    """
    This specification contains the input to commission a host to VMware Cloud
    Foundation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'fqdn': 'fqdn',
                            'username': 'username',
                            'password': 'password',
                            'storageType': 'storage_type',
                            'vvolStorageProtocolType': 'vvol_storage_protocol_type',
                            'networkPoolId': 'network_pool_id',
                            'networkPoolName': 'network_pool_name',
                            'sshThumbprint': 'ssh_thumbprint',
                            'sslThumbprint': 'ssl_thumbprint',
                            }

    def __init__(self,
                 fqdn=None,
                 username=None,
                 password=None,
                 storage_type=None,
                 vvol_storage_protocol_type=None,
                 network_pool_id=None,
                 network_pool_name=None,
                 ssh_thumbprint=None,
                 ssl_thumbprint=None,
                ):
        """
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN of the host
        :type  username: :class:`str` or ``None``
        :param username: Username of the host
        :type  password: :class:`str` or ``None``
        :param password: Password of the host
        :type  storage_type: :class:`str` or ``None``
        :param storage_type: Storage Type
        :type  vvol_storage_protocol_type: :class:`str` or ``None``
        :param vvol_storage_protocol_type: vVol Storage Protocol Type
        :type  network_pool_id: :class:`str` or ``None``
        :param network_pool_id: ID of the network pool to associate the host with
        :type  network_pool_name: :class:`str` or ``None``
        :param network_pool_name: Name of the network pool to associate the host with
        :type  ssh_thumbprint: :class:`str` or ``None``
        :param ssh_thumbprint: SSH thumbprint of the host
        :type  ssl_thumbprint: :class:`str` or ``None``
        :param ssl_thumbprint: SSL thumbprint of the host
        """
        self.fqdn = fqdn
        self.username = username
        self.password = password
        self.storage_type = storage_type
        self.vvol_storage_protocol_type = vvol_storage_protocol_type
        self.network_pool_id = network_pool_id
        self.network_pool_name = network_pool_name
        self.ssh_thumbprint = ssh_thumbprint
        self.ssl_thumbprint = ssl_thumbprint
        VapiStruct.__init__(self)


HostCommissionSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_commission_spec', {
        'fqdn': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
        'storageType': type.OptionalType(type.StringType()),
        'vvolStorageProtocolType': type.OptionalType(type.StringType()),
        'networkPoolId': type.OptionalType(type.StringType()),
        'networkPoolName': type.OptionalType(type.StringType()),
        'sshThumbprint': type.OptionalType(type.StringType()),
        'sslThumbprint': type.OptionalType(type.StringType()),
    },
    HostCommissionSpec,
    False,
    None))



class AddOnInfo(VapiStruct):
    """
    AddOn contains bits to install/update the appropriate Cloud Foundation
    software components in your management domain or workload domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'name': 'name',
                            'vendor': 'vendor',
                            'displayName': 'display_name',
                            'displayVersion': 'display_version',
                            }

    def __init__(self,
                 version=None,
                 name=None,
                 vendor=None,
                 display_name=None,
                 display_version=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: Add on software version 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: Component name 
            
            * Property is read-only.
            
            
        :type  vendor: :class:`str` or ``None``
        :param vendor: vendor 
            
            * Property is read-only.
            
            
        :type  display_name: :class:`str` or ``None``
        :param display_name: Add On display name 
            
            * Property is read-only.
            
            
        :type  display_version: :class:`str` or ``None``
        :param display_version: Add On display version 
            
            * Property is read-only.
            
            
        """
        self.version = version
        self.name = name
        self.vendor = vendor
        self.display_name = display_name
        self.display_version = display_version
        VapiStruct.__init__(self)


AddOnInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.add_on_info', {
        'version': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'vendor': type.OptionalType(type.StringType()),
        'displayName': type.OptionalType(type.StringType()),
        'displayVersion': type.OptionalType(type.StringType()),
    },
    AddOnInfo,
    False,
    None))



class AlternativeImageInfo(VapiStruct):
    """
    Alternative image details apart from the default image

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'baseImage': 'base_image',
                            'addOn': 'add_on',
                            'components': 'components',
                            'removedComponents': 'removed_components',
                            'hardwareSupport': 'hardware_support',
                            'selectionCriteria': 'selection_criteria',
                            'displayName': 'display_name',
                            }

    def __init__(self,
                 base_image=None,
                 add_on=None,
                 components=None,
                 removed_components=None,
                 hardware_support=None,
                 selection_criteria=None,
                 display_name=None,
                ):
        """
        :type  base_image: :class:`BaseImageInfo` or ``None``
        :param base_image:         :type  add_on: :class:`AddOnInfo` or ``None``
        :param add_on:         :type  components: (:class:`dict` of :class:`str` and :class:`ComponentInfo`) or ``None``
        :param components: Components 
            
            * Property is read-only.
            
            
        :type  removed_components: (:class:`dict` of :class:`str` and :class:`ComponentInfo`) or ``None``
        :param removed_components: Removed components 
            
            * Property is read-only.
            
            
        :type  hardware_support: :class:`HardwareSupportInfo` or ``None``
        :param hardware_support:         :type  selection_criteria: :class:`ImageSelectionInfo` or ``None``
        :param selection_criteria:         :type  display_name: :class:`str` or ``None``
        :param display_name: Display name of the Alternative Image 
            
            * Property is read-only.
            
            
        """
        self.base_image = base_image
        self.add_on = add_on
        self.components = components
        self.removed_components = removed_components
        self.hardware_support = hardware_support
        self.selection_criteria = selection_criteria
        self.display_name = display_name
        VapiStruct.__init__(self)


AlternativeImageInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.alternative_image_info', {
        'baseImage': type.OptionalType(type.ReferenceType(__name__, 'BaseImageInfo')),
        'addOn': type.OptionalType(type.ReferenceType(__name__, 'AddOnInfo')),
        'components': type.OptionalType(type.MapType(type.StringType(), type.ReferenceType(__name__, 'ComponentInfo'))),
        'removedComponents': type.OptionalType(type.MapType(type.StringType(), type.ReferenceType(__name__, 'ComponentInfo'))),
        'hardwareSupport': type.OptionalType(type.ReferenceType(__name__, 'HardwareSupportInfo')),
        'selectionCriteria': type.OptionalType(type.ReferenceType(__name__, 'ImageSelectionInfo')),
        'displayName': type.OptionalType(type.StringType()),
    },
    AlternativeImageInfo,
    False,
    None))



class BaseImageDetails(VapiStruct):
    """
    BaseImage contains bits to install/update the appropriate Cloud Foundation
    software components in your management domain or workload domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'displayName': 'display_name',
                            'displayVersion': 'display_version',
                            'releaseDate': 'release_date',
                            'releaseTimestamp': 'release_timestamp',
                            'quickPatchCompatibleVersions': 'quick_patch_compatible_versions',
                            }

    def __init__(self,
                 display_name=None,
                 display_version=None,
                 release_date=None,
                 release_timestamp=None,
                 quick_patch_compatible_versions=None,
                ):
        """
        :type  display_name: :class:`str` or ``None``
        :param display_name: BaseImage display name 
            
            * Property is read-only.
            
            
        :type  display_version: :class:`str` or ``None``
        :param display_version: BaseImage display version 
            
            * Property is read-only.
            
            
        :type  release_date: :class:`str` or ``None``
        :param release_date: BaseImage release date 
            
            * Property is read-only.
            
            
        :type  release_timestamp: :class:`str` or ``None``
        :param release_timestamp: Timestamp of BaseImage release 
            
            * Property is read-only.
            
            
        :type  quick_patch_compatible_versions: :class:`list` of :class:`Version` or ``None``
        :param quick_patch_compatible_versions: ESX Quick Patch compatible source image versions 
            
            * Property is read-only.
            
            
        """
        self.display_name = display_name
        self.display_version = display_version
        self.release_date = release_date
        self.release_timestamp = release_timestamp
        self.quick_patch_compatible_versions = quick_patch_compatible_versions
        VapiStruct.__init__(self)


BaseImageDetails._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.base_image_details', {
        'displayName': type.OptionalType(type.StringType()),
        'displayVersion': type.OptionalType(type.StringType()),
        'releaseDate': type.OptionalType(type.StringType()),
        'releaseTimestamp': type.OptionalType(type.StringType()),
        'quickPatchCompatibleVersions': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Version'))),
    },
    BaseImageDetails,
    False,
    None))



class BaseImageInfo(VapiStruct):
    """
    BaseImage contains bits to install/update the appropriate Cloud Foundation
    software components in your management domain or workload domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'details': 'details',
                            }

    def __init__(self,
                 version=None,
                 details=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: BaseImage Version 
            
            * Property is read-only.
            
            
        :type  details: :class:`BaseImageDetails` or ``None``
        :param details:         """
        self.version = version
        self.details = details
        VapiStruct.__init__(self)


BaseImageInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.base_image_info', {
        'version': type.OptionalType(type.StringType()),
        'details': type.OptionalType(type.ReferenceType(__name__, 'BaseImageDetails')),
    },
    BaseImageInfo,
    False,
    None))



class ClusterReference(VapiStruct):
    """
    Represents a reference to the cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the cluster
        :type  name: :class:`str` or ``None``
        :param name: Name of the cluster
        """
        self.id = id
        self.name = name
        VapiStruct.__init__(self)


ClusterReference._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_reference', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
    },
    ClusterReference,
    False,
    None))



class ComponentDetails(VapiStruct):
    """
    Component contains bits to install/update the appropriate Cloud Foundation
    software components in your management domain or workload domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vendor': 'vendor',
                            'displayName': 'display_name',
                            'displayVersion': 'display_version',
                            }

    def __init__(self,
                 vendor=None,
                 display_name=None,
                 display_version=None,
                ):
        """
        :type  vendor: :class:`str` or ``None``
        :param vendor: Component vendor 
            
            * Property is read-only.
            
            
        :type  display_name: :class:`str` or ``None``
        :param display_name: Component display name 
            
            * Property is read-only.
            
            
        :type  display_version: :class:`str` or ``None``
        :param display_version: Component display version 
            
            * Property is read-only.
            
            
        """
        self.vendor = vendor
        self.display_name = display_name
        self.display_version = display_version
        VapiStruct.__init__(self)


ComponentDetails._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.component_details', {
        'vendor': type.OptionalType(type.StringType()),
        'displayName': type.OptionalType(type.StringType()),
        'displayVersion': type.OptionalType(type.StringType()),
    },
    ComponentDetails,
    False,
    None))



class ComponentInfo(VapiStruct):
    """
    Component contains bits to install/update the appropriate Cloud Foundation
    software components in your management domain or workload domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'details': 'details',
                            }

    def __init__(self,
                 version=None,
                 details=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: Component Version 
            
            * Property is read-only.
            
            
        :type  details: :class:`ComponentDetails` or ``None``
        :param details:         """
        self.version = version
        self.details = details
        VapiStruct.__init__(self)


ComponentInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.component_info', {
        'version': type.OptionalType(type.StringType()),
        'details': type.OptionalType(type.ReferenceType(__name__, 'ComponentDetails')),
    },
    ComponentInfo,
    False,
    None))



class Cpu(VapiStruct):
    """
    Represents information about CPUs on a host

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'frequencyMHz': 'frequencym_hz',
                            'usedFrequencyMHz': 'used_frequencym_hz',
                            'cores': 'cores',
                            'cpuCores': 'cpu_cores',
                            }

    def __init__(self,
                 frequencym_hz=None,
                 used_frequencym_hz=None,
                 cores=None,
                 cpu_cores=None,
                ):
        """
        :type  frequencym_hz: :class:`float` or ``None``
        :param frequencym_hz: Total CPU frequency in MHz 
            
            * Property is read-only.
            
            
        :type  used_frequencym_hz: :class:`float` or ``None``
        :param used_frequencym_hz: Used CPU frequency in MHz 
            
            * Property is read-only.
            
            
        :type  cores: :class:`long` or ``None``
        :param cores: Number of CPU cores 
            
            * Property is read-only.
            
            
        :type  cpu_cores: :class:`list` of :class:`CpuCore` or ``None``
        :param cpu_cores: Information about each of the CPU cores 
            
            * Property is read-only.
            
            
        """
        self.frequencym_hz = frequencym_hz
        self.used_frequencym_hz = used_frequencym_hz
        self.cores = cores
        self.cpu_cores = cpu_cores
        VapiStruct.__init__(self)


Cpu._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cpu', {
        'frequencyMHz': type.OptionalType(type.DoubleType()),
        'usedFrequencyMHz': type.OptionalType(type.DoubleType()),
        'cores': type.OptionalType(type.IntegerType()),
        'cpuCores': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CpuCore'))),
    },
    Cpu,
    False,
    None))



class CpuCore(VapiStruct):
    """
    Represents a CPU core

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'frequencyMHz': 'frequencym_hz',
                            'model': 'model',
                            'manufacturer': 'manufacturer',
                            }

    def __init__(self,
                 frequencym_hz=None,
                 model=None,
                 manufacturer=None,
                ):
        """
        :type  frequencym_hz: :class:`float` or ``None``
        :param frequencym_hz: CPU frequency in MHz 
            
            * Property is read-only.
            
            
        :type  model: :class:`str` or ``None``
        :param model: Hardware model of the CPU 
            
            * Property is read-only.
            
            
        :type  manufacturer: :class:`str` or ``None``
        :param manufacturer: Hardware manufacturer of the CPU 
            
            * Property is read-only.
            
            
        """
        self.frequencym_hz = frequencym_hz
        self.model = model
        self.manufacturer = manufacturer
        VapiStruct.__init__(self)


CpuCore._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cpu_core', {
        'frequencyMHz': type.OptionalType(type.DoubleType()),
        'model': type.OptionalType(type.StringType()),
        'manufacturer': type.OptionalType(type.StringType()),
    },
    CpuCore,
    False,
    None))



class Disk(VapiStruct):
    """
    Represents a disk

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'capacityMB': 'capacity_mb',
                            'diskType': 'disk_type',
                            'manufacturer': 'manufacturer',
                            'model': 'model',
                            }

    def __init__(self,
                 capacity_mb=None,
                 disk_type=None,
                 manufacturer=None,
                 model=None,
                ):
        """
        :type  capacity_mb: :class:`float` or ``None``
        :param capacity_mb: Total capacity of the disk in MB 
            
            * Property is read-only.
            
            
        :type  disk_type: :class:`str` or ``None``
        :param disk_type: Type of the disk 
            
            * Property is read-only.
            
            
        :type  manufacturer: :class:`str` or ``None``
        :param manufacturer: Hardware manufacturer of the disk 
            
            * Property is read-only.
            
            
        :type  model: :class:`str` or ``None``
        :param model: Hardware model of the disk 
            
            * Property is read-only.
            
            
        """
        self.capacity_mb = capacity_mb
        self.disk_type = disk_type
        self.manufacturer = manufacturer
        self.model = model
        VapiStruct.__init__(self)


Disk._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.disk', {
        'capacityMB': type.OptionalType(type.DoubleType()),
        'diskType': type.OptionalType(type.StringType()),
        'manufacturer': type.OptionalType(type.StringType()),
        'model': type.OptionalType(type.StringType()),
    },
    Disk,
    False,
    None))



class Gpu(VapiStruct):
    """
    Represents information about GPUs on a host

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'deviceName': 'device_name',
                            'vendorName': 'vendor_name',
                            'vgpuState': 'vgpu_state',
                            }

    def __init__(self,
                 device_name=None,
                 vendor_name=None,
                 vgpu_state=None,
                ):
        """
        :type  device_name: :class:`str` or ``None``
        :param device_name: The GPU device name 
            
            * Property is read-only.
            
            
        :type  vendor_name: :class:`str` or ``None``
        :param vendor_name: The GPU vendor name 
            
            * Property is read-only.
            
            
        :type  vgpu_state: :class:`str` or ``None``
        :param vgpu_state: The vGPU state 
            
            * Property is read-only.
            
            
        """
        self.device_name = device_name
        self.vendor_name = vendor_name
        self.vgpu_state = vgpu_state
        VapiStruct.__init__(self)


Gpu._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.gpu', {
        'deviceName': type.OptionalType(type.StringType()),
        'vendorName': type.OptionalType(type.StringType()),
        'vgpuState': type.OptionalType(type.StringType()),
    },
    Gpu,
    False,
    None))



class HardwareSupportInfo(VapiStruct):
    """
    Hardware support contains base os, components, hardware support, addOn
    metadata to install/update the appropriate Cloud Foundation software
    components in your management domain or workload domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'packages': 'packages',
                            }

    def __init__(self,
                 packages=None,
                ):
        """
        :type  packages: (:class:`dict` of :class:`str` and :class:`HardwareSupportPackageInfo`) or ``None``
        :param packages: Hardware support packages 
            
            * Property is read-only.
            
            
        """
        self.packages = packages
        VapiStruct.__init__(self)


HardwareSupportInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.hardware_support_info', {
        'packages': type.OptionalType(type.MapType(type.StringType(), type.ReferenceType(__name__, 'HardwareSupportPackageInfo'))),
    },
    HardwareSupportInfo,
    False,
    None))



class HardwareSupportPackageInfo(VapiStruct):
    """
    Hardware Support Package contains metadata regarding the package, version
    to install/update the appropriate Cloud Foundation software components in
    your management domain or workload domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'pkg': 'pkg',
                            'version': 'version',
                            }

    def __init__(self,
                 pkg=None,
                 version=None,
                ):
        """
        :type  pkg: :class:`str` or ``None``
        :param pkg: Hardware support package name 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: Hardware support package version 
            
            * Property is read-only.
            
            
        """
        self.pkg = pkg
        self.version = version
        VapiStruct.__init__(self)


HardwareSupportPackageInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.hardware_support_package_info', {
        'pkg': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
    },
    HardwareSupportPackageInfo,
    False,
    None))



class Host(VapiStruct):
    """
    Represents an Esxi host in the system

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'serialNumber': 'serial_number',
                            'esxiVersion': 'esxi_version',
                            'sshThumbprint': 'ssh_thumbprint',
                            'sslThumbprint': 'ssl_thumbprint',
                            'fqdn': 'fqdn',
                            'hardwareVendor': 'hardware_vendor',
                            'hardwareModel': 'hardware_model',
                            'ipAddresses': 'ip_addresses',
                            'cpu': 'cpu',
                            'memory': 'memory',
                            'storage': 'storage',
                            'physicalNics': 'physical_nics',
                            'networks': 'networks',
                            'hostNetworks': 'host_networks',
                            'gpus': 'gpus',
                            'domain': 'domain',
                            'networkpool': 'networkpool',
                            'cluster': 'cluster',
                            'status': 'status',
                            'compatibleStorageType': 'compatible_storage_type',
                            'bundleRepoDatastore': 'bundle_repo_datastore',
                            'hybrid': 'hybrid',
                            'softwareInfo': 'software_info',
                            'tags': 'tags',
                            'configurationStatus': 'configuration_status',
                            'datastoreType': 'datastore_type',
                            'vvolStorageProtocolType': 'vvol_storage_protocol_type',
                            }

    def __init__(self,
                 id=None,
                 serial_number=None,
                 esxi_version=None,
                 ssh_thumbprint=None,
                 ssl_thumbprint=None,
                 fqdn=None,
                 hardware_vendor=None,
                 hardware_model=None,
                 ip_addresses=None,
                 cpu=None,
                 memory=None,
                 storage=None,
                 physical_nics=None,
                 networks=None,
                 host_networks=None,
                 gpus=None,
                 domain=None,
                 networkpool=None,
                 cluster=None,
                 status=None,
                 compatible_storage_type=None,
                 bundle_repo_datastore=None,
                 hybrid=None,
                 software_info=None,
                 tags=None,
                 configuration_status=None,
                 datastore_type=None,
                 vvol_storage_protocol_type=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the host 
            
            * Property is read-only.
            
            
        :type  serial_number: :class:`str` or ``None``
        :param serial_number: Serial Number of the host 
            
            * Property is read-only.
            
            
        :type  esxi_version: :class:`str` or ``None``
        :param esxi_version: ESXi software version of the host 
            
            * Property is read-only.
            
            
        :type  ssh_thumbprint: :class:`str` or ``None``
        :param ssh_thumbprint: SSH Thumbprint of the host 
            
            * Property is read-only.
            
            
        :type  ssl_thumbprint: :class:`str` or ``None``
        :param ssl_thumbprint: SSL Thumbprint of the host 
            
            * Property is read-only.
            
            
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN of the host 
            
            * Property is read-only.
            
            
        :type  hardware_vendor: :class:`str` or ``None``
        :param hardware_vendor: Hardware vendor of the host 
            
            * Property is read-only.
            
            
        :type  hardware_model: :class:`str` or ``None``
        :param hardware_model: Hardware model of the host 
            
            * Property is read-only.
            
            
        :type  ip_addresses: :class:`list` of :class:`IpAddress` or ``None``
        :param ip_addresses: Information about IP addresses assigned to the host 
            
            * Property is read-only.
            
            
        :type  cpu: :class:`Cpu` or ``None``
        :param cpu:         :type  memory: :class:`Memory` or ``None``
        :param memory:         :type  storage: :class:`Storage` or ``None``
        :param storage:         :type  physical_nics: :class:`list` of :class:`PhysicalNic` or ``None``
        :param physical_nics: Information about physical NICs on the host 
            
            * Property is read-only.
            
            
        :type  networks: :class:`list` of :class:`Network` or ``None``
        :param networks: Information about Networks on the host This is deprecated 
            
            * Property is read-only.
            
            
        :type  host_networks: :class:`list` of :class:`HostNetwork` or ``None``
        :param host_networks: Information about Networks on the host 
            
            * Property is read-only.
            
            
        :type  gpus: :class:`list` of :class:`Gpu` or ``None``
        :param gpus: Information about Gpus on the host 
            
            * Property is read-only.
            
            
        :type  domain: :class:`DomainReference` or ``None``
        :param domain:         :type  networkpool: :class:`NetworkPoolReference` or ``None``
        :param networkpool:         :type  cluster: :class:`ClusterReference` or ``None``
        :param cluster:         :type  status: :class:`str` or ``None``
        :param status: Status of the host 
            
            * Property is read-only.
            
            
        :type  compatible_storage_type: :class:`str` or ``None``
        :param compatible_storage_type: Information about the host compatible storage type 
            
            * Property is read-only.
            
            
        :type  bundle_repo_datastore: :class:`str` or ``None``
        :param bundle_repo_datastore: Bundle repositry datastore for this host 
            
            * Property is read-only.
            
            
        :type  hybrid: :class:`bool` or ``None``
        :param hybrid: Information about the storage type of the host, true if the host is
            hybrid 
            
            * Property is read-only.
            
            
        :type  software_info: :class:`SoftwareInfo` or ``None``
        :param software_info:         :type  tags: :class:`list` of :class:`Tag` or ``None``
        :param tags: Deprecated, this list will always be returned empty
        :type  configuration_status: :class:`str` or ``None``
        :param configuration_status: Information about the configuration status of the host 
            
            * Property is read-only.
            
            
        :type  datastore_type: :class:`str` or ``None``
        :param datastore_type: Information about the datastore type of the host 
            
            * Property is read-only.
            
            
        :type  vvol_storage_protocol_type: :class:`str` or ``None``
        :param vvol_storage_protocol_type: Information about the VVOL storage protocol type of the host 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.serial_number = serial_number
        self.esxi_version = esxi_version
        self.ssh_thumbprint = ssh_thumbprint
        self.ssl_thumbprint = ssl_thumbprint
        self.fqdn = fqdn
        self.hardware_vendor = hardware_vendor
        self.hardware_model = hardware_model
        self.ip_addresses = ip_addresses
        self.cpu = cpu
        self.memory = memory
        self.storage = storage
        self.physical_nics = physical_nics
        self.networks = networks
        self.host_networks = host_networks
        self.gpus = gpus
        self.domain = domain
        self.networkpool = networkpool
        self.cluster = cluster
        self.status = status
        self.compatible_storage_type = compatible_storage_type
        self.bundle_repo_datastore = bundle_repo_datastore
        self.hybrid = hybrid
        self.software_info = software_info
        self.tags = tags
        self.configuration_status = configuration_status
        self.datastore_type = datastore_type
        self.vvol_storage_protocol_type = vvol_storage_protocol_type
        VapiStruct.__init__(self)


Host._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host', {
        'id': type.OptionalType(type.StringType()),
        'serialNumber': type.OptionalType(type.StringType()),
        'esxiVersion': type.OptionalType(type.StringType()),
        'sshThumbprint': type.OptionalType(type.StringType()),
        'sslThumbprint': type.OptionalType(type.StringType()),
        'fqdn': type.OptionalType(type.StringType()),
        'hardwareVendor': type.OptionalType(type.StringType()),
        'hardwareModel': type.OptionalType(type.StringType()),
        'ipAddresses': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'IpAddress'))),
        'cpu': type.OptionalType(type.ReferenceType(__name__, 'Cpu')),
        'memory': type.OptionalType(type.ReferenceType(__name__, 'Memory')),
        'storage': type.OptionalType(type.ReferenceType(__name__, 'Storage')),
        'physicalNics': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'PhysicalNic'))),
        'networks': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Network'))),
        'hostNetworks': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HostNetwork'))),
        'gpus': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Gpu'))),
        'domain': type.OptionalType(type.ReferenceType(__name__, 'DomainReference')),
        'networkpool': type.OptionalType(type.ReferenceType(__name__, 'NetworkPoolReference')),
        'cluster': type.OptionalType(type.ReferenceType(__name__, 'ClusterReference')),
        'status': type.OptionalType(type.StringType()),
        'compatibleStorageType': type.OptionalType(type.StringType()),
        'bundleRepoDatastore': type.OptionalType(type.StringType()),
        'hybrid': type.OptionalType(type.BooleanType()),
        'softwareInfo': type.OptionalType(type.ReferenceType(__name__, 'SoftwareInfo')),
        'tags': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Tag'))),
        'configurationStatus': type.OptionalType(type.StringType()),
        'datastoreType': type.OptionalType(type.StringType()),
        'vvolStorageProtocolType': type.OptionalType(type.StringType()),
    },
    Host,
    False,
    None))



class HostHardwareInfo(VapiStruct):
    """
    Specifies the host's hardware specification for which an image needs to be
    selected

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vendor': 'vendor',
                            'models': 'models',
                            'families': 'families',
                            'oemStrings': 'oem_strings',
                            }

    def __init__(self,
                 vendor=None,
                 models=None,
                 families=None,
                 oem_strings=None,
                ):
        """
        :type  vendor: :class:`str` or ``None``
        :param vendor: Host's vendor name 
            
            * Property is read-only.
            
            
        :type  models: :class:`list` of :class:`str` or ``None``
        :param models: Host's vendor model 
            
            * Items must be unique.
            * Property is read-only.
            
            
        :type  families: :class:`list` of :class:`str` or ``None``
        :param families: Host's family name 
            
            * Items must be unique.
            * Property is read-only.
            
            
        :type  oem_strings: :class:`list` of :class:`str` or ``None``
        :param oem_strings: Host's OEM string 
            
            * Items must be unique.
            * Property is read-only.
            
            
        """
        self.vendor = vendor
        self.models = models
        self.families = families
        self.oem_strings = oem_strings
        VapiStruct.__init__(self)


HostHardwareInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_hardware_info', {
        'vendor': type.OptionalType(type.StringType()),
        'models': type.OptionalType(type.ListType(type.StringType())),
        'families': type.OptionalType(type.ListType(type.StringType())),
        'oemStrings': type.OptionalType(type.ListType(type.StringType())),
    },
    HostHardwareInfo,
    False,
    None))



class HostNetwork(VapiStruct):
    """
    Represents a network in a Host

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'vlanId': 'vlan_id',
                            'mtu': 'mtu',
                            }

    def __init__(self,
                 type=None,
                 vlan_id=None,
                 mtu=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: Network Type of the network
        :type  vlan_id: :class:`long` or ``None``
        :param vlan_id: VLAN ID associated with the network
        :type  mtu: :class:`long` or ``None``
        :param mtu: MTU of the network
        """
        self.type = type
        self.vlan_id = vlan_id
        self.mtu = mtu
        VapiStruct.__init__(self)


HostNetwork._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_network', {
        'type': type.OptionalType(type.StringType()),
        'vlanId': type.OptionalType(type.IntegerType()),
        'mtu': type.OptionalType(type.IntegerType()),
    },
    HostNetwork,
    False,
    None))



class HostQueryResponse(VapiStruct):
    """
    Represents a host query response

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'queryInfo': 'query_info',
                            'result': 'result',
                            }

    def __init__(self,
                 query_info=None,
                 result=None,
                ):
        """
        :type  query_info: :class:`QueryInfo` or ``None``
        :param query_info:         :type  result: :class:`PageHost` or ``None``
        :param result:         """
        self.query_info = query_info
        self.result = result
        VapiStruct.__init__(self)


HostQueryResponse._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_query_response', {
        'queryInfo': type.OptionalType(type.ReferenceType(__name__, 'QueryInfo')),
        'result': type.OptionalType(type.ReferenceType(__name__, 'PageHost')),
    },
    HostQueryResponse,
    False,
    None))



class ImageSelectionInfo(VapiStruct):
    """
    Selection criteria used to select the alternative image for one or more
    hosts

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'selectionType': 'selection_type',
                            'hostBiosIds': 'host_bios_ids',
                            'hostHardware': 'host_hardware',
                            }

    def __init__(self,
                 selection_type=None,
                 host_bios_ids=None,
                 host_hardware=None,
                ):
        """
        :type  selection_type: :class:`str` or ``None``
        :param selection_type: Specifies what type of selection is to be used for selecting an
            image for a host 
            
            * Property is read-only.
            
            
        :type  host_bios_ids: :class:`list` of :class:`str` or ``None``
        :param host_bios_ids: Set of host BIOS Ids 
            
            * Items must be unique.
            * Property is read-only.
            
            
        :type  host_hardware: :class:`HostHardwareInfo` or ``None``
        :param host_hardware:         """
        self.selection_type = selection_type
        self.host_bios_ids = host_bios_ids
        self.host_hardware = host_hardware
        VapiStruct.__init__(self)


ImageSelectionInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.image_selection_info', {
        'selectionType': type.OptionalType(type.StringType()),
        'hostBiosIds': type.OptionalType(type.ListType(type.StringType())),
        'hostHardware': type.OptionalType(type.ReferenceType(__name__, 'HostHardwareInfo')),
    },
    ImageSelectionInfo,
    False,
    None))



class IpAddress(VapiStruct):
    """
    Represents IP address

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ipAddress': 'ip_address',
                            'type': 'type',
                            }

    def __init__(self,
                 ip_address=None,
                 type=None,
                ):
        """
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: IP address 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Type of IP addresss 
            
            * Property is read-only.
            
            
        """
        self.ip_address = ip_address
        self.type = type
        VapiStruct.__init__(self)


IpAddress._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ip_address', {
        'ipAddress': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
    },
    IpAddress,
    False,
    None))



class Memory(VapiStruct):
    """
    Represents information about memory on a host

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'totalCapacityMB': 'total_capacity_mb',
                            'usedCapacityMB': 'used_capacity_mb',
                            }

    def __init__(self,
                 total_capacity_mb=None,
                 used_capacity_mb=None,
                ):
        """
        :type  total_capacity_mb: :class:`float` or ``None``
        :param total_capacity_mb: Total memory in MB 
            
            * Property is read-only.
            
            
        :type  used_capacity_mb: :class:`float` or ``None``
        :param used_capacity_mb: Used memory in MB 
            
            * Property is read-only.
            
            
        """
        self.total_capacity_mb = total_capacity_mb
        self.used_capacity_mb = used_capacity_mb
        VapiStruct.__init__(self)


Memory._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.memory', {
        'totalCapacityMB': type.OptionalType(type.DoubleType()),
        'usedCapacityMB': type.OptionalType(type.DoubleType()),
    },
    Memory,
    False,
    None))



class NetworkPoolReference(VapiStruct):
    """
    Represents a network pool reference

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the network pool
        :type  name: :class:`str` or ``None``
        :param name: Name of the network pool
        """
        self.id = id
        self.name = name
        VapiStruct.__init__(self)


NetworkPoolReference._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.network_pool_reference', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
    },
    NetworkPoolReference,
    False,
    None))



class PageHost(VapiStruct):
    """
    Represents a page of elements of a single type

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Host` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageHost._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_host', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Host'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageHost,
    False,
    None))



class PhysicalNic(VapiStruct):
    """
    Represents a physical NIC

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """
    UNIT_KB = "KB"
    """
    Unit of physical NIC speed

    """
    UNIT_MB = "MB"
    """
    Unit of physical NIC speed

    """
    UNIT_GB = "GB"
    """
    Unit of physical NIC speed

    """
    UNIT_TB = "TB"
    """
    Unit of physical NIC speed

    """
    UNIT_PB = "PB"
    """
    Unit of physical NIC speed

    """



    _canonical_to_pep_names = {
                            'deviceName': 'device_name',
                            'macAddress': 'mac_address',
                            'speed': 'speed',
                            'unit': 'unit',
                            'smartNicInfo': 'smart_nic_info',
                            'state': 'state',
                            }

    def __init__(self,
                 device_name=None,
                 mac_address=None,
                 speed=None,
                 unit=None,
                 smart_nic_info=None,
                 state=None,
                ):
        """
        :type  device_name: :class:`str` or ``None``
        :param device_name: Device name of the physical NIC 
            
            * Property is read-only.
            
            
        :type  mac_address: :class:`str` or ``None``
        :param mac_address: Mac address of the physical NIC 
            
            * Property is read-only.
            
            
        :type  speed: :class:`long` or ``None``
        :param speed: Speed in bytes of the physical NIC 
            
            * Property is read-only.
            
            
        :type  unit: :class:`str` or ``None``
        :param unit: Unit of physical NIC speed 
            
            * Property is read-only.
            
            
        :type  smart_nic_info: :class:`SmartNicInfo` or ``None``
        :param smart_nic_info:         :type  state: :class:`str` or ``None``
        :param state: State of the physical NIC 
            
            * Property is read-only.
            
            
        """
        self.device_name = device_name
        self.mac_address = mac_address
        self.speed = speed
        self.unit = unit
        self.smart_nic_info = smart_nic_info
        self.state = state
        VapiStruct.__init__(self)


PhysicalNic._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.physical_nic', {
        'deviceName': type.OptionalType(type.StringType()),
        'macAddress': type.OptionalType(type.StringType()),
        'speed': type.OptionalType(type.IntegerType()),
        'unit': type.OptionalType(type.StringType()),
        'smartNicInfo': type.OptionalType(type.ReferenceType(__name__, 'SmartNicInfo')),
        'state': type.OptionalType(type.StringType()),
    },
    PhysicalNic,
    False,
    None))



class SmartNicInfo(VapiStruct):
    """
    Represents informtion related to smart nic

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vendorName': 'vendor_name',
                            'dpuId': 'dpu_id',
                            }

    def __init__(self,
                 vendor_name=None,
                 dpu_id=None,
                ):
        """
        :type  vendor_name: :class:`str` or ``None``
        :param vendor_name: Vendor Name of the SmartNicInfo 
            
            * Property is read-only.
            
            
        :type  dpu_id: :class:`str` or ``None``
        :param dpu_id: Dpu ID corresponding to the SmartNicInfo 
            
            * Property is read-only.
            
            
        """
        self.vendor_name = vendor_name
        self.dpu_id = dpu_id
        VapiStruct.__init__(self)


SmartNicInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.smart_nic_info', {
        'vendorName': type.OptionalType(type.StringType()),
        'dpuId': type.OptionalType(type.StringType()),
    },
    SmartNicInfo,
    False,
    None))



class SoftwareInfo(VapiStruct):
    """
    SoftwareSpec contains base os, components, hardware support, addOn metadata
    to install/update the appropriate Cloud Foundation software components in
    your management domain or workload domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'baseImage': 'base_image',
                            'addOn': 'add_on',
                            'components': 'components',
                            'removedComponents': 'removed_components',
                            'hardwareSupport': 'hardware_support',
                            'alternativeImages': 'alternative_images',
                            }

    def __init__(self,
                 base_image=None,
                 add_on=None,
                 components=None,
                 removed_components=None,
                 hardware_support=None,
                 alternative_images=None,
                ):
        """
        :type  base_image: :class:`BaseImageInfo` or ``None``
        :param base_image:         :type  add_on: :class:`AddOnInfo` or ``None``
        :param add_on:         :type  components: (:class:`dict` of :class:`str` and :class:`ComponentInfo`) or ``None``
        :param components: Personality components 
            
            * Property is read-only.
            
            
        :type  removed_components: (:class:`dict` of :class:`str` and :class:`ComponentInfo`) or ``None``
        :param removed_components: Personality removed components 
            
            * Property is read-only.
            
            
        :type  hardware_support: :class:`HardwareSupportInfo` or ``None``
        :param hardware_support:         :type  alternative_images: (:class:`dict` of :class:`str` and :class:`AlternativeImageInfo`) or ``None``
        :param alternative_images: Personality alternative images apart from the default image 
            
            * Property is read-only.
            
            
        """
        self.base_image = base_image
        self.add_on = add_on
        self.components = components
        self.removed_components = removed_components
        self.hardware_support = hardware_support
        self.alternative_images = alternative_images
        VapiStruct.__init__(self)


SoftwareInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.software_info', {
        'baseImage': type.OptionalType(type.ReferenceType(__name__, 'BaseImageInfo')),
        'addOn': type.OptionalType(type.ReferenceType(__name__, 'AddOnInfo')),
        'components': type.OptionalType(type.MapType(type.StringType(), type.ReferenceType(__name__, 'ComponentInfo'))),
        'removedComponents': type.OptionalType(type.MapType(type.StringType(), type.ReferenceType(__name__, 'ComponentInfo'))),
        'hardwareSupport': type.OptionalType(type.ReferenceType(__name__, 'HardwareSupportInfo')),
        'alternativeImages': type.OptionalType(type.MapType(type.StringType(), type.ReferenceType(__name__, 'AlternativeImageInfo'))),
    },
    SoftwareInfo,
    False,
    None))



class Storage(VapiStruct):
    """
    Represents information about storage on a host

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'totalCapacityMB': 'total_capacity_mb',
                            'usedCapacityMB': 'used_capacity_mb',
                            'disks': 'disks',
                            }

    def __init__(self,
                 total_capacity_mb=None,
                 used_capacity_mb=None,
                 disks=None,
                ):
        """
        :type  total_capacity_mb: :class:`float` or ``None``
        :param total_capacity_mb: Total storage capacity in MB 
            
            * Property is read-only.
            
            
        :type  used_capacity_mb: :class:`float` or ``None``
        :param used_capacity_mb: Used storage capacity in MB 
            
            * Property is read-only.
            
            
        :type  disks: :class:`list` of :class:`Disk` or ``None``
        :param disks: Information about disks 
            
            * Property is read-only.
            
            
        """
        self.total_capacity_mb = total_capacity_mb
        self.used_capacity_mb = used_capacity_mb
        self.disks = disks
        VapiStruct.__init__(self)


Storage._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.storage', {
        'totalCapacityMB': type.OptionalType(type.DoubleType()),
        'usedCapacityMB': type.OptionalType(type.DoubleType()),
        'disks': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Disk'))),
    },
    Storage,
    False,
    None))



class Tag(VapiStruct):
    """
    Represents a tag

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'categoryId': 'category_id',
                            'categoryName': 'category_name',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 category_id=None,
                 category_name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the tag
        :type  name: :class:`str` or ``None``
        :param name: Name of the tag
        :type  category_id: :class:`str` or ``None``
        :param category_id: ID of the tag category
        :type  category_name: :class:`str` or ``None``
        :param category_name: Category name of the tag
        """
        self.id = id
        self.name = name
        self.category_id = category_id
        self.category_name = category_name
        VapiStruct.__init__(self)


Tag._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.tag', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'categoryId': type.OptionalType(type.StringType()),
        'categoryName': type.OptionalType(type.StringType()),
    },
    Tag,
    False,
    None))



class Version(VapiStruct):
    """
    ESX Quick Patch compatible source image version details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'displayVersion': 'display_version',
                            }

    def __init__(self,
                 version=None,
                 display_version=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: Source Image full version 
            
            * Property is read-only.
            
            
        :type  display_version: :class:`str` or ``None``
        :param display_version: Source Image display version 
            
            * Property is read-only.
            
            
        """
        self.version = version
        self.display_version = display_version
        VapiStruct.__init__(self)


Version._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.version', {
        'version': type.OptionalType(type.StringType()),
        'displayVersion': type.OptionalType(type.StringType()),
    },
    Version,
    False,
    None))



class HostCriterion(VapiStruct):
    """
    Represents a criterion for querying the host

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'subCriteria': 'sub_criteria',
                            'arguments': 'arguments',
                            'description': 'description',
                            }

    def __init__(self,
                 name=None,
                 sub_criteria=None,
                 arguments=None,
                 description=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the criterion 
            
            * Property is read-only.
            
            
        :type  sub_criteria: :class:`list` of :class:`HostCriterion` or ``None``
        :param sub_criteria: Collection of sub-criterion supported on this criterion 
            
            * Property is read-only.
            
            
        :type  arguments: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param arguments: Arguments required for a particular criterion 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description of the criterion 
            
            * Property is read-only.
            
            
        """
        self.name = name
        self.sub_criteria = sub_criteria
        self.arguments = arguments
        self.description = description
        VapiStruct.__init__(self)


HostCriterion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_criterion', {
        'name': type.OptionalType(type.StringType()),
        'subCriteria': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HostCriterion'))),
        'arguments': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
        'description': type.OptionalType(type.StringType()),
    },
    HostCriterion,
    False,
    None))



class HostPrecheckDetails(VapiStruct):
    """
    The basic details of the host fetched during prechecks.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'fqdn': 'fqdn',
                            'sshFingerprint': 'ssh_fingerprint',
                            'ipAddress': 'ip_address',
                            'username': 'username',
                            'password': 'password',
                            'networkPoolId': 'network_pool_id',
                            'networkPoolName': 'network_pool_name',
                            'storageType': 'storage_type',
                            'vvolStorageProtocolType': 'vvol_storage_protocol_type',
                            }

    def __init__(self,
                 fqdn=None,
                 ssh_fingerprint=None,
                 ip_address=None,
                 username=None,
                 password=None,
                 network_pool_id=None,
                 network_pool_name=None,
                 storage_type=None,
                 vvol_storage_protocol_type=None,
                ):
        """
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN of the host
        :type  ssh_fingerprint: :class:`str` or ``None``
        :param ssh_fingerprint: SSH fingerprint of the host
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: IP addresses assigned to the host
        :type  username: :class:`str` or ``None``
        :param username: Username of the host
        :type  password: :class:`str` or ``None``
        :param password: Password of the host
        :type  network_pool_id: :class:`str` or ``None``
        :param network_pool_id: ID of the network pool to associate the host with
        :type  network_pool_name: :class:`str` or ``None``
        :param network_pool_name: Name of the network pool to associate the host with
        :type  storage_type: :class:`str` or ``None``
        :param storage_type: Storage Type
        :type  vvol_storage_protocol_type: :class:`str` or ``None``
        :param vvol_storage_protocol_type: vVol Storage Protocol Type
        """
        self.fqdn = fqdn
        self.ssh_fingerprint = ssh_fingerprint
        self.ip_address = ip_address
        self.username = username
        self.password = password
        self.network_pool_id = network_pool_id
        self.network_pool_name = network_pool_name
        self.storage_type = storage_type
        self.vvol_storage_protocol_type = vvol_storage_protocol_type
        VapiStruct.__init__(self)


HostPrecheckDetails._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_precheck_details', {
        'fqdn': type.OptionalType(type.StringType()),
        'sshFingerprint': type.OptionalType(type.StringType()),
        'ipAddress': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
        'networkPoolId': type.OptionalType(type.StringType()),
        'networkPoolName': type.OptionalType(type.StringType()),
        'storageType': type.OptionalType(type.StringType()),
        'vvolStorageProtocolType': type.OptionalType(type.StringType()),
    },
    HostPrecheckDetails,
    False,
    None))



class HostPrechecks(VapiStruct):
    """
    Represents the status of prechecks done on host

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hostPrecheckDetails': 'host_precheck_details',
                            'result': 'result',
                            'error': 'error',
                            }

    def __init__(self,
                 host_precheck_details=None,
                 result=None,
                 error=None,
                ):
        """
        :type  host_precheck_details: :class:`HostPrecheckDetails` or ``None``
        :param host_precheck_details:         :type  result: :class:`str` or ``None``
        :param result: Result of the prechecks
        :type  error: :class:`str` or ``None``
        :param error: Error found during prechecks
        """
        self.host_precheck_details = host_precheck_details
        self.result = result
        self.error = error
        VapiStruct.__init__(self)


HostPrechecks._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_prechecks', {
        'hostPrecheckDetails': type.OptionalType(type.ReferenceType(__name__, 'HostPrecheckDetails')),
        'result': type.OptionalType(type.StringType()),
        'error': type.OptionalType(type.StringType()),
    },
    HostPrechecks,
    False,
    None))



class HostsPrechecksResponse(VapiStruct):
    """
    Represents hosts prechecks response

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'executionStatus': 'execution_status',
                            'result': 'result',
                            'hostPrechecks': 'host_prechecks',
                            }

    def __init__(self,
                 id=None,
                 execution_status=None,
                 result=None,
                 host_prechecks=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The ID for hosts prechecks 
            
            * Property is read-only.
            
            
        :type  execution_status: :class:`str` or ``None``
        :param execution_status: Overall execution status of hosts prechecks 
            
            * Property is read-only.
            
            
        :type  result: :class:`str` or ``None``
        :param result: Result status of the hosts prechecks after it has completed its
            execution 
            
            * Property is read-only.
            
            
        :type  host_prechecks: :class:`list` of :class:`HostPrechecks` or ``None``
        :param host_prechecks: precheck done on each host 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.execution_status = execution_status
        self.result = result
        self.host_prechecks = host_prechecks
        VapiStruct.__init__(self)


HostsPrechecksResponse._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.hosts_prechecks_response', {
        'id': type.OptionalType(type.StringType()),
        'executionStatus': type.OptionalType(type.StringType()),
        'result': type.OptionalType(type.StringType()),
        'hostPrechecks': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HostPrechecks'))),
    },
    HostsPrechecksResponse,
    False,
    None))



class HostsPrechecksRequest(VapiStruct):
    """
    Represents hosts prechecks request

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hosts': 'hosts',
                            }

    def __init__(self,
                 hosts=None,
                ):
        """
        :type  hosts: :class:`list` of :class:`HostCommissionSpec` or ``None``
        :param hosts: list of hosts on which prechecks will be done
        """
        self.hosts = hosts
        VapiStruct.__init__(self)


HostsPrechecksRequest._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.hosts_prechecks_request', {
        'hosts': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HostCommissionSpec'))),
    },
    HostsPrechecksRequest,
    False,
    None))



class BgpPeerSpec(VapiStruct):
    """
    This specification contains configuration inputs required for BGP
    configuration for an uplink

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ip': 'ip',
                            'asn': 'asn',
                            'password': 'password',
                            }

    def __init__(self,
                 ip=None,
                 asn=None,
                 password=None,
                ):
        """
        :type  ip: :class:`str` or ``None``
        :param ip: BGP Peer IP
        :type  asn: :class:`long` or ``None``
        :param asn: ASN of Peer
        :type  password: :class:`str` or ``None``
        :param password: BGP Peer Password
        """
        self.ip = ip
        self.asn = asn
        self.password = password
        VapiStruct.__init__(self)


BgpPeerSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.bgp_peer_spec', {
        'ip': type.OptionalType(type.StringType()),
        'asn': type.OptionalType(type.IntegerType()),
        'password': type.OptionalType(type.StringType()),
    },
    BgpPeerSpec,
    False,
    None))



class EdgeClusterCreationSpec(VapiStruct):
    """
    NSX Edge cluster creation data to be validated

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'edgeClusterName': 'edge_cluster_name',
                            'edgeClusterType': 'edge_cluster_type',
                            'edgeRootPassword': 'edge_root_password',
                            'edgeAdminPassword': 'edge_admin_password',
                            'edgeAuditPassword': 'edge_audit_password',
                            'edgeFormFactor': 'edge_form_factor',
                            'tier0ServicesHighAvailability': 'tier0_services_high_availability',
                            'mtu': 'mtu',
                            'asn': 'asn',
                            'edgeNodeSpecs': 'edge_node_specs',
                            'newIpAddressPoolSpecs': 'new_ip_address_pool_specs',
                            'tier0RoutingType': 'tier0_routing_type',
                            'tier0Name': 'tier0_name',
                            'tier1Name': 'tier1_name',
                            'tier1Unhosted': 'tier1_unhosted',
                            'edgeClusterProfileType': 'edge_cluster_profile_type',
                            'edgeClusterProfileSpec': 'edge_cluster_profile_spec',
                            'skipTepRoutabilityCheck': 'skip_tep_routability_check',
                            'transitSubnets': 'transit_subnets',
                            'internalTransitSubnets': 'internal_transit_subnets',
                            }

    def __init__(self,
                 edge_cluster_name=None,
                 edge_cluster_type=None,
                 edge_root_password=None,
                 edge_admin_password=None,
                 edge_audit_password=None,
                 edge_form_factor=None,
                 tier0_services_high_availability=None,
                 mtu=None,
                 asn=None,
                 edge_node_specs=None,
                 new_ip_address_pool_specs=None,
                 tier0_routing_type=None,
                 tier0_name=None,
                 tier1_name=None,
                 tier1_unhosted=None,
                 edge_cluster_profile_type=None,
                 edge_cluster_profile_spec=None,
                 skip_tep_routability_check=None,
                 transit_subnets=None,
                 internal_transit_subnets=None,
                ):
        """
        :type  edge_cluster_name: :class:`str` or ``None``
        :param edge_cluster_name: Name for the edge cluster.
        :type  edge_cluster_type: :class:`str` or ``None``
        :param edge_cluster_type: Type of edge cluster
        :type  edge_root_password: :class:`str` or ``None``
        :param edge_root_password: Edge Password for root user.
        :type  edge_admin_password: :class:`str` or ``None``
        :param edge_admin_password: Edge Password for admin user
        :type  edge_audit_password: :class:`str` or ``None``
        :param edge_audit_password: Edge Password for audit
        :type  edge_form_factor: :class:`str` or ``None``
        :param edge_form_factor: Edge Form Factor
        :type  tier0_services_high_availability: :class:`str` or ``None``
        :param tier0_services_high_availability: High-availability Mode for Tier-0
        :type  mtu: :class:`long` or ``None``
        :param mtu: Maximum transmission unit
        :type  asn: :class:`long` or ``None``
        :param asn: ASN to be used for the edge cluster
        :type  edge_node_specs: :class:`list` of :class:`NsxtEdgeNodeSpec` or ``None``
        :param edge_node_specs: Specifications for Edge Node. Number of Edge Nodes cannot exceed 8
            if HA mode is ACTIVE-ACTIVE and can not exceed 2 if HA mode is
            ACTIVE-STANDBY
        :type  new_ip_address_pool_specs: :class:`list` of :class:`IpAddressPoolSpec` or ``None``
        :param new_ip_address_pool_specs: Specifications for new NSX IP address pool(s)
        :type  tier0_routing_type: :class:`str` or ``None``
        :param tier0_routing_type: Tier 0 Routing type -eg eBGP, Static
        :type  tier0_name: :class:`str` or ``None``
        :param tier0_name: Name for the Tier-0
        :type  tier1_name: :class:`str` or ``None``
        :param tier1_name: Name for the Tier-1
        :type  tier1_unhosted: :class:`bool` or ``None``
        :param tier1_unhosted: Select whether Tier-1 being created per this spec is hosted on the
            new Edge cluster or not (default value is false, meaning hosted)
        :type  edge_cluster_profile_type: :class:`str` or ``None``
        :param edge_cluster_profile_type: Type of edge cluster profile
        :type  edge_cluster_profile_spec: :class:`NsxtEdgeClusterProfileSpec` or ``None``
        :param edge_cluster_profile_spec:         :type  skip_tep_routability_check: :class:`bool` or ``None``
        :param skip_tep_routability_check: Set to true to bypass normal ICMP-based check of Edge TEP / host
            TEP routability (default is false, meaning do check)
        :type  transit_subnets: :class:`list` of :class:`str` or ``None``
        :param transit_subnets: Transit subnet addresses in CIDR notation that are used to assign
            addresses to logical links connecting Tier-0 and Tier-1s
        :type  internal_transit_subnets: :class:`list` of :class:`str` or ``None``
        :param internal_transit_subnets: Subnet addresses in CIDR notation that are used to assign addresses
            to logical links connecting service routers and distributed routers
        """
        self.edge_cluster_name = edge_cluster_name
        self.edge_cluster_type = edge_cluster_type
        self.edge_root_password = edge_root_password
        self.edge_admin_password = edge_admin_password
        self.edge_audit_password = edge_audit_password
        self.edge_form_factor = edge_form_factor
        self.tier0_services_high_availability = tier0_services_high_availability
        self.mtu = mtu
        self.asn = asn
        self.edge_node_specs = edge_node_specs
        self.new_ip_address_pool_specs = new_ip_address_pool_specs
        self.tier0_routing_type = tier0_routing_type
        self.tier0_name = tier0_name
        self.tier1_name = tier1_name
        self.tier1_unhosted = tier1_unhosted
        self.edge_cluster_profile_type = edge_cluster_profile_type
        self.edge_cluster_profile_spec = edge_cluster_profile_spec
        self.skip_tep_routability_check = skip_tep_routability_check
        self.transit_subnets = transit_subnets
        self.internal_transit_subnets = internal_transit_subnets
        VapiStruct.__init__(self)


EdgeClusterCreationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.edge_cluster_creation_spec', {
        'edgeClusterName': type.OptionalType(type.StringType()),
        'edgeClusterType': type.OptionalType(type.StringType()),
        'edgeRootPassword': type.OptionalType(type.StringType()),
        'edgeAdminPassword': type.OptionalType(type.StringType()),
        'edgeAuditPassword': type.OptionalType(type.StringType()),
        'edgeFormFactor': type.OptionalType(type.StringType()),
        'tier0ServicesHighAvailability': type.OptionalType(type.StringType()),
        'mtu': type.OptionalType(type.IntegerType()),
        'asn': type.OptionalType(type.IntegerType()),
        'edgeNodeSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtEdgeNodeSpec'))),
        'newIpAddressPoolSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'IpAddressPoolSpec'))),
        'tier0RoutingType': type.OptionalType(type.StringType()),
        'tier0Name': type.OptionalType(type.StringType()),
        'tier1Name': type.OptionalType(type.StringType()),
        'tier1Unhosted': type.OptionalType(type.BooleanType()),
        'edgeClusterProfileType': type.OptionalType(type.StringType()),
        'edgeClusterProfileSpec': type.OptionalType(type.ReferenceType(__name__, 'NsxtEdgeClusterProfileSpec')),
        'skipTepRoutabilityCheck': type.OptionalType(type.BooleanType()),
        'transitSubnets': type.OptionalType(type.ListType(type.StringType())),
        'internalTransitSubnets': type.OptionalType(type.ListType(type.StringType())),
    },
    EdgeClusterCreationSpec,
    False,
    None))



class EdgeTepIpAddressPoolSpec(VapiStruct):
    """
    This specification indicates which NSX IP pool to use for an Edge node's
    TEPs

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'nsxId': 'nsx_id',
                            }

    def __init__(self,
                 name=None,
                 nsx_id=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: NSX IP Pool Name
        :type  nsx_id: :class:`str` or ``None``
        :param nsx_id: NSX IP Pool ID
        """
        self.name = name
        self.nsx_id = nsx_id
        VapiStruct.__init__(self)


EdgeTepIpAddressPoolSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.edge_tep_ip_address_pool_spec', {
        'name': type.OptionalType(type.StringType()),
        'nsxId': type.OptionalType(type.StringType()),
    },
    EdgeTepIpAddressPoolSpec,
    False,
    None))



class NsxtEdgeClusterProfileSpec(VapiStruct):
    """
    This specification contains edge cluster profile configurations

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'edgeClusterProfileName': 'edge_cluster_profile_name',
                            'bfdAllowedHop': 'bfd_allowed_hop',
                            'bfdDeclareDeadMultiple': 'bfd_declare_dead_multiple',
                            'bfdProbeInterval': 'bfd_probe_interval',
                            'standbyRelocationThreshold': 'standby_relocation_threshold',
                            }

    def __init__(self,
                 edge_cluster_profile_name=None,
                 bfd_allowed_hop=None,
                 bfd_declare_dead_multiple=None,
                 bfd_probe_interval=None,
                 standby_relocation_threshold=None,
                ):
        """
        :type  edge_cluster_profile_name: :class:`str` or ``None``
        :param edge_cluster_profile_name: Name for the edge cluster profile.
        :type  bfd_allowed_hop: :class:`long` or ``None``
        :param bfd_allowed_hop: BFD allowed Hop
        :type  bfd_declare_dead_multiple: :class:`long` or ``None``
        :param bfd_declare_dead_multiple: BFD Declare Dead Multiple
        :type  bfd_probe_interval: :class:`long` or ``None``
        :param bfd_probe_interval: BFD Probe
        :type  standby_relocation_threshold: :class:`long` or ``None``
        :param standby_relocation_threshold: Standby Relocation Threshold
        """
        self.edge_cluster_profile_name = edge_cluster_profile_name
        self.bfd_allowed_hop = bfd_allowed_hop
        self.bfd_declare_dead_multiple = bfd_declare_dead_multiple
        self.bfd_probe_interval = bfd_probe_interval
        self.standby_relocation_threshold = standby_relocation_threshold
        VapiStruct.__init__(self)


NsxtEdgeClusterProfileSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_edge_cluster_profile_spec', {
        'edgeClusterProfileName': type.OptionalType(type.StringType()),
        'bfdAllowedHop': type.OptionalType(type.IntegerType()),
        'bfdDeclareDeadMultiple': type.OptionalType(type.IntegerType()),
        'bfdProbeInterval': type.OptionalType(type.IntegerType()),
        'standbyRelocationThreshold': type.OptionalType(type.IntegerType()),
    },
    NsxtEdgeClusterProfileSpec,
    False,
    None))



class NsxtEdgeNodeSpec(VapiStruct):
    """
    This specification contains configuration inputs required to deploy and
    configure an edge node

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'edgeNodeName': 'edge_node_name',
                            'managementIP': 'management_ip',
                            'managementGateway': 'management_gateway',
                            'vmManagementPortgroupVlan': 'vm_management_portgroup_vlan',
                            'vmManagementPortgroupName': 'vm_management_portgroup_name',
                            'edgeTepGateway': 'edge_tep_gateway',
                            'edgeTep1IP': 'edge_tep1_ip',
                            'edgeTep2IP': 'edge_tep2_ip',
                            'edgeTepIpAddressPool': 'edge_tep_ip_address_pool',
                            'edgeTepVlan': 'edge_tep_vlan',
                            'clusterId': 'cluster_id',
                            'interRackCluster': 'inter_rack_cluster',
                            'uplinkNetwork': 'uplink_network',
                            'firstNsxVdsUplink': 'first_nsx_vds_uplink',
                            'secondNsxVdsUplink': 'second_nsx_vds_uplink',
                            }

    def __init__(self,
                 edge_node_name=None,
                 management_ip=None,
                 management_gateway=None,
                 vm_management_portgroup_vlan=None,
                 vm_management_portgroup_name=None,
                 edge_tep_gateway=None,
                 edge_tep1_ip=None,
                 edge_tep2_ip=None,
                 edge_tep_ip_address_pool=None,
                 edge_tep_vlan=None,
                 cluster_id=None,
                 inter_rack_cluster=None,
                 uplink_network=None,
                 first_nsx_vds_uplink=None,
                 second_nsx_vds_uplink=None,
                ):
        """
        :type  edge_node_name: :class:`str` or ``None``
        :param edge_node_name: Edge Node Name
        :type  management_ip: :class:`str` or ``None``
        :param management_ip: Management Interface IP
        :type  management_gateway: :class:`str` or ``None``
        :param management_gateway: Management Gateway IP
        :type  vm_management_portgroup_vlan: :class:`long` or ``None``
        :param vm_management_portgroup_vlan: Management Vlan Id
        :type  vm_management_portgroup_name: :class:`str` or ``None``
        :param vm_management_portgroup_name: Management Network Name
        :type  edge_tep_gateway: :class:`str` or ``None``
        :param edge_tep_gateway: Edge TEP Gateway IP
        :type  edge_tep1_ip: :class:`str` or ``None``
        :param edge_tep1_ip: Edge TEP 1 IP
        :type  edge_tep2_ip: :class:`str` or ``None``
        :param edge_tep2_ip: Edge TEP 2 IP
        :type  edge_tep_ip_address_pool: :class:`EdgeTepIpAddressPoolSpec` or ``None``
        :param edge_tep_ip_address_pool:         :type  edge_tep_vlan: :class:`long` or ``None``
        :param edge_tep_vlan: Edge TEP VLAN
        :type  cluster_id: :class:`str` or ``None``
        :param cluster_id: ID of vSphere cluster where the Edge node will be deployed
        :type  inter_rack_cluster: :class:`bool` or ``None``
        :param inter_rack_cluster: Is inter-rack cluster(true for L2 non-uniform and L3 : At least one
            of management, uplink, Edge and host TEP networks is different for
            hosts of the cluster, false for L2 uniform : All hosts in cluster
            have identical management, uplink, Edge and host TEP networks)
        :type  uplink_network: :class:`list` of :class:`NsxtEdgeUplinkNetwork` or ``None``
        :param uplink_network: Specifications of Tier0 uplinks for the Edge Node. For edge cluster
            creation uplink network is mandatory otherwise its optional an
            field
        :type  first_nsx_vds_uplink: :class:`str` or ``None``
        :param first_nsx_vds_uplink: First NSX enabled VDS uplink for the Edge node
        :type  second_nsx_vds_uplink: :class:`str` or ``None``
        :param second_nsx_vds_uplink: Second NSX enabled VDS uplink for the Edge node
        """
        self.edge_node_name = edge_node_name
        self.management_ip = management_ip
        self.management_gateway = management_gateway
        self.vm_management_portgroup_vlan = vm_management_portgroup_vlan
        self.vm_management_portgroup_name = vm_management_portgroup_name
        self.edge_tep_gateway = edge_tep_gateway
        self.edge_tep1_ip = edge_tep1_ip
        self.edge_tep2_ip = edge_tep2_ip
        self.edge_tep_ip_address_pool = edge_tep_ip_address_pool
        self.edge_tep_vlan = edge_tep_vlan
        self.cluster_id = cluster_id
        self.inter_rack_cluster = inter_rack_cluster
        self.uplink_network = uplink_network
        self.first_nsx_vds_uplink = first_nsx_vds_uplink
        self.second_nsx_vds_uplink = second_nsx_vds_uplink
        VapiStruct.__init__(self)


NsxtEdgeNodeSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_edge_node_spec', {
        'edgeNodeName': type.OptionalType(type.StringType()),
        'managementIP': type.OptionalType(type.StringType()),
        'managementGateway': type.OptionalType(type.StringType()),
        'vmManagementPortgroupVlan': type.OptionalType(type.IntegerType()),
        'vmManagementPortgroupName': type.OptionalType(type.StringType()),
        'edgeTepGateway': type.OptionalType(type.StringType()),
        'edgeTep1IP': type.OptionalType(type.StringType()),
        'edgeTep2IP': type.OptionalType(type.StringType()),
        'edgeTepIpAddressPool': type.OptionalType(type.ReferenceType(__name__, 'EdgeTepIpAddressPoolSpec')),
        'edgeTepVlan': type.OptionalType(type.IntegerType()),
        'clusterId': type.OptionalType(type.StringType()),
        'interRackCluster': type.OptionalType(type.BooleanType()),
        'uplinkNetwork': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtEdgeUplinkNetwork'))),
        'firstNsxVdsUplink': type.OptionalType(type.StringType()),
        'secondNsxVdsUplink': type.OptionalType(type.StringType()),
    },
    NsxtEdgeNodeSpec,
    False,
    None))



class NsxtEdgeUplinkNetwork(VapiStruct):
    """
    This specification contains input parameters required to configure uplink
    network for NSX edge node VM

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'uplinkVlan': 'uplink_vlan',
                            'uplinkInterfaceIP': 'uplink_interface_ip',
                            'peerIP': 'peer_ip',
                            'asnPeer': 'asn_peer',
                            'bgpPeerPassword': 'bgp_peer_password',
                            'bgpPeers': 'bgp_peers',
                            }

    def __init__(self,
                 uplink_vlan=None,
                 uplink_interface_ip=None,
                 peer_ip=None,
                 asn_peer=None,
                 bgp_peer_password=None,
                 bgp_peers=None,
                ):
        """
        :type  uplink_vlan: :class:`long` or ``None``
        :param uplink_vlan: Uplink Vlan
        :type  uplink_interface_ip: :class:`str` or ``None``
        :param uplink_interface_ip: Uplink IP
        :type  peer_ip: :class:`str` or ``None``
        :param peer_ip: [Deprecated] BGP Peer IP (please use bgpPeers instead)
        :type  asn_peer: :class:`long` or ``None``
        :param asn_peer: [Deprecated] ASN of Peer (please use bgpPeers instead)
        :type  bgp_peer_password: :class:`str` or ``None``
        :param bgp_peer_password: [Deprecated] BGP Peer Password (please use bgpPeers instead)
        :type  bgp_peers: :class:`list` of :class:`BgpPeerSpec` or ``None``
        :param bgp_peers: List of BGP Peer configuration
        """
        self.uplink_vlan = uplink_vlan
        self.uplink_interface_ip = uplink_interface_ip
        self.peer_ip = peer_ip
        self.asn_peer = asn_peer
        self.bgp_peer_password = bgp_peer_password
        self.bgp_peers = bgp_peers
        VapiStruct.__init__(self)


NsxtEdgeUplinkNetwork._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_edge_uplink_network', {
        'uplinkVlan': type.OptionalType(type.IntegerType()),
        'uplinkInterfaceIP': type.OptionalType(type.StringType()),
        'peerIP': type.OptionalType(type.StringType()),
        'asnPeer': type.OptionalType(type.IntegerType()),
        'bgpPeerPassword': type.OptionalType(type.StringType()),
        'bgpPeers': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BgpPeerSpec'))),
    },
    NsxtEdgeUplinkNetwork,
    False,
    None))



class EdgeClusterExpansionSpec(VapiStruct):
    """
    This specification contains the parameters required to expand a NSX edge
    cluster.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'edgeNodeRootPassword': 'edge_node_root_password',
                            'edgeNodeAdminPassword': 'edge_node_admin_password',
                            'edgeNodeAuditPassword': 'edge_node_audit_password',
                            'skipTepRoutabilityCheck': 'skip_tep_routability_check',
                            'edgeNodeSpecs': 'edge_node_specs',
                            'newIpAddressPoolSpecs': 'new_ip_address_pool_specs',
                            'additionalTier1Names': 'additional_tier1_names',
                            'tier1Unhosted': 'tier1_unhosted',
                            }

    def __init__(self,
                 edge_node_root_password=None,
                 edge_node_admin_password=None,
                 edge_node_audit_password=None,
                 skip_tep_routability_check=None,
                 edge_node_specs=None,
                 new_ip_address_pool_specs=None,
                 additional_tier1_names=None,
                 tier1_unhosted=None,
                ):
        """
        :type  edge_node_root_password: :class:`str` or ``None``
        :param edge_node_root_password: Edge Password for root user.
        :type  edge_node_admin_password: :class:`str` or ``None``
        :param edge_node_admin_password: Edge Password for admin user
        :type  edge_node_audit_password: :class:`str` or ``None``
        :param edge_node_audit_password: Edge Password for audit user
        :type  skip_tep_routability_check: :class:`bool` or ``None``
        :param skip_tep_routability_check: Set to true to bypass normal ICMP-based check of Edge TEP / host
            TEP routability (default is false, meaning do check)
        :type  edge_node_specs: :class:`list` of :class:`NsxtEdgeNodeSpec` or ``None``
        :param edge_node_specs: Specifications for Edge Node
        :type  new_ip_address_pool_specs: :class:`list` of :class:`IpAddressPoolSpec` or ``None``
        :param new_ip_address_pool_specs: Specifications for new NSX IP address pool(s)
        :type  additional_tier1_names: :class:`list` of :class:`str` or ``None``
        :param additional_tier1_names: List of names for the additional Tier-1(s) to be created during
            expansion
        :type  tier1_unhosted: :class:`bool` or ``None``
        :param tier1_unhosted: Select whether all Tier-1(s) being created per this spec are hosted
            on the Edge cluster or not (default is false, meaning hosted)
        """
        self.edge_node_root_password = edge_node_root_password
        self.edge_node_admin_password = edge_node_admin_password
        self.edge_node_audit_password = edge_node_audit_password
        self.skip_tep_routability_check = skip_tep_routability_check
        self.edge_node_specs = edge_node_specs
        self.new_ip_address_pool_specs = new_ip_address_pool_specs
        self.additional_tier1_names = additional_tier1_names
        self.tier1_unhosted = tier1_unhosted
        VapiStruct.__init__(self)


EdgeClusterExpansionSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.edge_cluster_expansion_spec', {
        'edgeNodeRootPassword': type.OptionalType(type.StringType()),
        'edgeNodeAdminPassword': type.OptionalType(type.StringType()),
        'edgeNodeAuditPassword': type.OptionalType(type.StringType()),
        'skipTepRoutabilityCheck': type.OptionalType(type.BooleanType()),
        'edgeNodeSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtEdgeNodeSpec'))),
        'newIpAddressPoolSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'IpAddressPoolSpec'))),
        'additionalTier1Names': type.OptionalType(type.ListType(type.StringType())),
        'tier1Unhosted': type.OptionalType(type.BooleanType()),
    },
    EdgeClusterExpansionSpec,
    False,
    None))



class EdgeClusterShrinkageSpec(VapiStruct):
    """
    This specification contains the parameters required to shrink a NSX edge
    cluster.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'edgeNodeIds': 'edge_node_ids',
                            }

    def __init__(self,
                 edge_node_ids=None,
                ):
        """
        :type  edge_node_ids: :class:`list` of :class:`str` or ``None``
        :param edge_node_ids: List of VCF Edge Node ID's to be removed for shrinkage.
        """
        self.edge_node_ids = edge_node_ids
        VapiStruct.__init__(self)


EdgeClusterShrinkageSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.edge_cluster_shrinkage_spec', {
        'edgeNodeIds': type.OptionalType(type.ListType(type.StringType())),
    },
    EdgeClusterShrinkageSpec,
    False,
    None))



class EdgeClusterUpdateSpec(VapiStruct):
    """
    NSX Edge cluster update specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'edgeClusterExpansionSpec': 'edge_cluster_expansion_spec',
                            'edgeClusterShrinkageSpec': 'edge_cluster_shrinkage_spec',
                            'operation': 'operation',
                            }

    def __init__(self,
                 edge_cluster_expansion_spec=None,
                 edge_cluster_shrinkage_spec=None,
                 operation=None,
                ):
        """
        :type  edge_cluster_expansion_spec: :class:`EdgeClusterExpansionSpec` or ``None``
        :param edge_cluster_expansion_spec:         :type  edge_cluster_shrinkage_spec: :class:`EdgeClusterShrinkageSpec` or ``None``
        :param edge_cluster_shrinkage_spec:         :type  operation: :class:`str` or ``None``
        :param operation: Edge cluster operation Type.
        """
        self.edge_cluster_expansion_spec = edge_cluster_expansion_spec
        self.edge_cluster_shrinkage_spec = edge_cluster_shrinkage_spec
        self.operation = operation
        VapiStruct.__init__(self)


EdgeClusterUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.edge_cluster_update_spec', {
        'edgeClusterExpansionSpec': type.OptionalType(type.ReferenceType(__name__, 'EdgeClusterExpansionSpec')),
        'edgeClusterShrinkageSpec': type.OptionalType(type.ReferenceType(__name__, 'EdgeClusterShrinkageSpec')),
        'operation': type.OptionalType(type.StringType()),
    },
    EdgeClusterUpdateSpec,
    False,
    None))



class AdvancedOptions(VapiStruct):
    """
    Advanced Options used to add Cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'evcMode': 'evc_mode',
                            'highAvailability': 'high_availability',
                            }

    def __init__(self,
                 evc_mode=None,
                 high_availability=None,
                ):
        """
        :type  evc_mode: :class:`str` or ``None``
        :param evc_mode: EVC mode for new cluster, if needed
        :type  high_availability: :class:`HighAvailability` or ``None``
        :param high_availability:         """
        self.evc_mode = evc_mode
        self.high_availability = high_availability
        VapiStruct.__init__(self)


AdvancedOptions._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.advanced_options', {
        'evcMode': type.OptionalType(type.StringType()),
        'highAvailability': type.OptionalType(type.ReferenceType(__name__, 'HighAvailability')),
    },
    AdvancedOptions,
    False,
    None))



class Cidr(VapiStruct):
    """
    Common model describing CIDR.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'address': 'address',
                            'prefix': 'prefix',
                            }

    def __init__(self,
                 address=None,
                 prefix=None,
                ):
        """
        :type  address: :class:`str` or ``None``
        :param address: IPv4 address
        :type  prefix: :class:`long` or ``None``
        :param prefix: The CIDR prefix
        """
        self.address = address
        self.prefix = prefix
        VapiStruct.__init__(self)


Cidr._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cidr', {
        'address': type.OptionalType(type.StringType()),
        'prefix': type.OptionalType(type.IntegerType()),
    },
    Cidr,
    False,
    None))



class ClusterSpec(VapiStruct):
    """
    This specification contains the parameters required to add a cluster to a
    workload domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'datacenterName': 'datacenter_name',
                            'clusterImageId': 'cluster_image_id',
                            'hostSpecs': 'host_specs',
                            'datastoreSpec': 'datastore_spec',
                            'networkSpec': 'network_spec',
                            'advancedOptions': 'advanced_options',
                            'skipThumbprintValidation': 'skip_thumbprint_validation',
                            'supervisorActivationSpec': 'supervisor_activation_spec',
                            }

    def __init__(self,
                 name=None,
                 datacenter_name=None,
                 cluster_image_id=None,
                 host_specs=None,
                 datastore_spec=None,
                 network_spec=None,
                 advanced_options=None,
                 skip_thumbprint_validation=None,
                 supervisor_activation_spec=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the new cluster that will be added to the specified
            workload domain
        :type  datacenter_name: :class:`str` or ``None``
        :param datacenter_name: Name of the vCenter Datacenter in which the Cluster will be added.
            Required only if there is more than one Datacenter
        :type  cluster_image_id: :class:`str` or ``None``
        :param cluster_image_id: ID of the Cluster Image to be used only with the Cluster managed by
            vSphere Lifecycle Manager Images. This is required, if we want to
            create a cluster on vCenter 9.0 or above.
        :type  host_specs: :class:`list` of :class:`HostSpec` or ``None``
        :param host_specs: List of vSphere host information from the free pool to consume in
            the workload domain
        :type  datastore_spec: :class:`DatastoreSpec` or ``None``
        :param datastore_spec:         :type  network_spec: :class:`NetworkSpec` or ``None``
        :param network_spec:         :type  advanced_options: :class:`AdvancedOptions` or ``None``
        :param advanced_options:         :type  skip_thumbprint_validation: :class:`bool` or ``None``
        :param skip_thumbprint_validation: Skip thumbprint validation for ESXi during add cluster/host
            operation. This property is deprecated.
        :type  supervisor_activation_spec: :class:`SupervisorActivationSpec` or ``None``
        :param supervisor_activation_spec:         """
        self.name = name
        self.datacenter_name = datacenter_name
        self.cluster_image_id = cluster_image_id
        self.host_specs = host_specs
        self.datastore_spec = datastore_spec
        self.network_spec = network_spec
        self.advanced_options = advanced_options
        self.skip_thumbprint_validation = skip_thumbprint_validation
        self.supervisor_activation_spec = supervisor_activation_spec
        VapiStruct.__init__(self)


ClusterSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_spec', {
        'name': type.OptionalType(type.StringType()),
        'datacenterName': type.OptionalType(type.StringType()),
        'clusterImageId': type.OptionalType(type.StringType()),
        'hostSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HostSpec'))),
        'datastoreSpec': type.OptionalType(type.ReferenceType(__name__, 'DatastoreSpec')),
        'networkSpec': type.OptionalType(type.ReferenceType(__name__, 'NetworkSpec')),
        'advancedOptions': type.OptionalType(type.ReferenceType(__name__, 'AdvancedOptions')),
        'skipThumbprintValidation': type.OptionalType(type.BooleanType()),
        'supervisorActivationSpec': type.OptionalType(type.ReferenceType(__name__, 'SupervisorActivationSpec')),
    },
    ClusterSpec,
    False,
    None))



class ComputeSpec(VapiStruct):
    """
    This specification contains the parameters required to add each cluster to
    a workload domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'clusterSpecs': 'cluster_specs',
                            'skipFailedHosts': 'skip_failed_hosts',
                            }

    def __init__(self,
                 cluster_specs=None,
                 skip_failed_hosts=None,
                ):
        """
        :type  cluster_specs: :class:`list` of :class:`ClusterSpec` or ``None``
        :param cluster_specs: List of clusters to be added to workload domain
        :type  skip_failed_hosts: :class:`bool` or ``None``
        :param skip_failed_hosts: Skip failed ESXi Hosts and proceed with the rest of the ESXi Hosts
            during add Cluster.
        """
        self.cluster_specs = cluster_specs
        self.skip_failed_hosts = skip_failed_hosts
        VapiStruct.__init__(self)


ComputeSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compute_spec', {
        'clusterSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ClusterSpec'))),
        'skipFailedHosts': type.OptionalType(type.BooleanType()),
    },
    ComputeSpec,
    False,
    None))



class DatastoreSpec(VapiStruct):
    """
    This specification contains cluster storage configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vsanDatastoreSpec': 'vsan_datastore_spec',
                            'nfsDatastoreSpecs': 'nfs_datastore_specs',
                            'vmfsDatastoreSpec': 'vmfs_datastore_spec',
                            'vvolDatastoreSpecs': 'vvol_datastore_specs',
                            'vsanRemoteDatastoreClusterSpec': 'vsan_remote_datastore_cluster_spec',
                            }

    def __init__(self,
                 vsan_datastore_spec=None,
                 nfs_datastore_specs=None,
                 vmfs_datastore_spec=None,
                 vvol_datastore_specs=None,
                 vsan_remote_datastore_cluster_spec=None,
                ):
        """
        :type  vsan_datastore_spec: :class:`VsanDatastoreSpec` or ``None``
        :param vsan_datastore_spec:         :type  nfs_datastore_specs: :class:`list` of :class:`NfsDatastoreSpec` or ``None``
        :param nfs_datastore_specs: Cluster storage configuration for NFS
        :type  vmfs_datastore_spec: :class:`VmfsDatastoreSpec` or ``None``
        :param vmfs_datastore_spec:         :type  vvol_datastore_specs: :class:`list` of :class:`VvolDatastoreSpec` or ``None``
        :param vvol_datastore_specs: Cluster storage configuration for VVOL
        :type  vsan_remote_datastore_cluster_spec: :class:`VsanRemoteDatastoreClusterSpec` or ``None``
        :param vsan_remote_datastore_cluster_spec:         """
        self.vsan_datastore_spec = vsan_datastore_spec
        self.nfs_datastore_specs = nfs_datastore_specs
        self.vmfs_datastore_spec = vmfs_datastore_spec
        self.vvol_datastore_specs = vvol_datastore_specs
        self.vsan_remote_datastore_cluster_spec = vsan_remote_datastore_cluster_spec
        VapiStruct.__init__(self)


DatastoreSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.datastore_spec', {
        'vsanDatastoreSpec': type.OptionalType(type.ReferenceType(__name__, 'VsanDatastoreSpec')),
        'nfsDatastoreSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NfsDatastoreSpec'))),
        'vmfsDatastoreSpec': type.OptionalType(type.ReferenceType(__name__, 'VmfsDatastoreSpec')),
        'vvolDatastoreSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VvolDatastoreSpec'))),
        'vsanRemoteDatastoreClusterSpec': type.OptionalType(type.ReferenceType(__name__, 'VsanRemoteDatastoreClusterSpec')),
    },
    DatastoreSpec,
    False,
    None))



class DomainCreationSpec(VapiStruct):
    """
    Domain Creation Spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainName': 'domain_name',
                            'orgName': 'org_name',
                            'vcenterSpec': 'vcenter_spec',
                            'computeSpec': 'compute_spec',
                            'existingDatastoreName': 'existing_datastore_name',
                            'nsxTSpec': 'nsxt_spec',
                            'ssoDomainSpec': 'sso_domain_spec',
                            'securitySpec': 'security_spec',
                            'deployWithoutLicenseKeys': 'deploy_without_license_keys',
                            }

    def __init__(self,
                 domain_name=None,
                 org_name=None,
                 vcenter_spec=None,
                 compute_spec=None,
                 existing_datastore_name=None,
                 nsxt_spec=None,
                 sso_domain_spec=None,
                 security_spec=None,
                 deploy_without_license_keys=None,
                ):
        """
        :type  domain_name: :class:`str` or ``None``
        :param domain_name: Name of the workload domain
        :type  org_name: :class:`str` or ``None``
        :param org_name: Organization name of the workload domain
        :type  vcenter_spec: :class:`VcenterSpec` or ``None``
        :param vcenter_spec:         :type  compute_spec: :class:`ComputeSpec` or ``None``
        :param compute_spec:         :type  existing_datastore_name: :class:`str` or ``None``
        :param existing_datastore_name: Existing datastore name that is to be used by the management
            domain.
        :type  nsxt_spec: :class:`NsxtSpec` or ``None``
        :param nsxt_spec:         :type  sso_domain_spec: :class:`SsoDomainSpec` or ``None``
        :param sso_domain_spec:         :type  security_spec: :class:`SecuritySpec` or ``None``
        :param security_spec:         :type  deploy_without_license_keys: :class:`bool` or ``None``
        :param deploy_without_license_keys: Flag that indicates if the deployment should happen without license
            keys
        """
        self.domain_name = domain_name
        self.org_name = org_name
        self.vcenter_spec = vcenter_spec
        self.compute_spec = compute_spec
        self.existing_datastore_name = existing_datastore_name
        self.nsxt_spec = nsxt_spec
        self.sso_domain_spec = sso_domain_spec
        self.security_spec = security_spec
        self.deploy_without_license_keys = deploy_without_license_keys
        VapiStruct.__init__(self)


DomainCreationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.domain_creation_spec', {
        'domainName': type.OptionalType(type.StringType()),
        'orgName': type.OptionalType(type.StringType()),
        'vcenterSpec': type.OptionalType(type.ReferenceType(__name__, 'VcenterSpec')),
        'computeSpec': type.OptionalType(type.ReferenceType(__name__, 'ComputeSpec')),
        'existingDatastoreName': type.OptionalType(type.StringType()),
        'nsxTSpec': type.OptionalType(type.ReferenceType(__name__, 'NsxtSpec')),
        'ssoDomainSpec': type.OptionalType(type.ReferenceType(__name__, 'SsoDomainSpec')),
        'securitySpec': type.OptionalType(type.ReferenceType(__name__, 'SecuritySpec')),
        'deployWithoutLicenseKeys': type.OptionalType(type.BooleanType()),
    },
    DomainCreationSpec,
    False,
    None))



class DtgwSpec(VapiStruct):
    """
    Specification for Distributed Transit Gateway aka DTGW

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vlan': 'vlan',
                            'gatewayCidr': 'gateway_cidr',
                            'externalIpBlockCidr': 'external_ip_block_cidr',
                            'privateTgwIpBlockCidr': 'private_tgw_ip_block_cidr',
                            }

    def __init__(self,
                 vlan=None,
                 gateway_cidr=None,
                 external_ip_block_cidr=None,
                 private_tgw_ip_block_cidr=None,
                ):
        """
        :type  vlan: :class:`long` or ``None``
        :param vlan: VLAN for Distributed Transit Gateway
        :type  gateway_cidr: :class:`str` or ``None``
        :param gateway_cidr: Gateway CIDR for Distributed Transit Gateway
        :type  external_ip_block_cidr: :class:`str` or ``None``
        :param external_ip_block_cidr: External IP Block CIDR for VPCs, required for external connectivity
            via DTGW
        :type  private_tgw_ip_block_cidr: :class:`str` or ``None``
        :param private_tgw_ip_block_cidr: Private TGW IP Block CIDR for VPCs
        """
        self.vlan = vlan
        self.gateway_cidr = gateway_cidr
        self.external_ip_block_cidr = external_ip_block_cidr
        self.private_tgw_ip_block_cidr = private_tgw_ip_block_cidr
        VapiStruct.__init__(self)


DtgwSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.dtgw_spec', {
        'vlan': type.OptionalType(type.IntegerType()),
        'gatewayCidr': type.OptionalType(type.StringType()),
        'externalIpBlockCidr': type.OptionalType(type.StringType()),
        'privateTgwIpBlockCidr': type.OptionalType(type.StringType()),
    },
    DtgwSpec,
    False,
    None))



class EsaConfig(VapiStruct):
    """
    This spec contains cluster vSAN ESA configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'enabled': 'enabled',
                            'vsanMaxConfig': 'vsan_max_config',
                            }

    def __init__(self,
                 enabled=None,
                 vsan_max_config=None,
                ):
        """
        :type  enabled: :class:`bool` or ``None``
        :param enabled: vSAN ESA enablement status.
        :type  vsan_max_config: :class:`VsanMaxConfig` or ``None``
        :param vsan_max_config:         """
        self.enabled = enabled
        self.vsan_max_config = vsan_max_config
        VapiStruct.__init__(self)


EsaConfig._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.esa_config', {
        'enabled': type.OptionalType(type.BooleanType()),
        'vsanMaxConfig': type.OptionalType(type.ReferenceType(__name__, 'VsanMaxConfig')),
    },
    EsaConfig,
    False,
    None))



class FcSpec(VapiStruct):
    """
    Cluster storage configuration for VMFS on FC

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'datastoreName': 'datastore_name',
                            }

    def __init__(self,
                 datastore_name=None,
                ):
        """
        :type  datastore_name: :class:`str` or ``None``
        :param datastore_name: Datastore name used for cluster creation
        """
        self.datastore_name = datastore_name
        VapiStruct.__init__(self)


FcSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.fc_spec', {
        'datastoreName': type.OptionalType(type.StringType()),
    },
    FcSpec,
    False,
    None))



class HighAvailability(VapiStruct):
    """
    This specification contains high availability settings

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'enabled': 'enabled',
                            }

    def __init__(self,
                 enabled=None,
                ):
        """
        :type  enabled: :class:`bool` or ``None``
        :param enabled:         """
        self.enabled = enabled
        VapiStruct.__init__(self)


HighAvailability._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.high_availability', {
        'enabled': type.OptionalType(type.BooleanType()),
    },
    HighAvailability,
    False,
    None))



class HostNetworkSpec(VapiStruct):
    """
    This specification contains network details required when adding a vSphere
    host to a cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vmNics': 'vm_nics',
                            'networkProfileName': 'network_profile_name',
                            }

    def __init__(self,
                 vm_nics=None,
                 network_profile_name=None,
                ):
        """
        :type  vm_nics: :class:`list` of :class:`VmNic` or ``None``
        :param vm_nics: List of the vSphere host vmNics
        :type  network_profile_name: :class:`str` or ``None``
        :param network_profile_name: Network profile name
        """
        self.vm_nics = vm_nics
        self.network_profile_name = network_profile_name
        VapiStruct.__init__(self)


HostNetworkSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_network_spec', {
        'vmNics': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VmNic'))),
        'networkProfileName': type.OptionalType(type.StringType()),
    },
    HostNetworkSpec,
    False,
    None))



class HostSpec(VapiStruct):
    """
    This specification contains information required to add vSphere host to a
    cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'licenseKey': 'license_key',
                            'ipAddress': 'ip_address',
                            'hostName': 'host_name',
                            'username': 'username',
                            'password': 'password',
                            'hostNetworkSpec': 'host_network_spec',
                            'azName': 'az_name',
                            'sshThumbprint': 'ssh_thumbprint',
                            'serialNumber': 'serial_number',
                            }

    def __init__(self,
                 id=None,
                 license_key=None,
                 ip_address=None,
                 host_name=None,
                 username=None,
                 password=None,
                 host_network_spec=None,
                 az_name=None,
                 ssh_thumbprint=None,
                 serial_number=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of a vSphere host in the free pool
        :type  license_key: :class:`str` or ``None``
        :param license_key: License key of a vSphere host in the free pool (This is required
            except in cases where the ESXi host has already been licensed
            outside of the VMware Cloud Foundation system)
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: [Deprecated] IP address of the vSphere host
        :type  host_name: :class:`str` or ``None``
        :param host_name: Host name of the vSphere host
        :type  username: :class:`str` or ``None``
        :param username: Username of the vSphere host
        :type  password: :class:`str` or ``None``
        :param password: SSH password of the vSphere host
        :type  host_network_spec: :class:`HostNetworkSpec` or ``None``
        :param host_network_spec:         :type  az_name: :class:`str` or ``None``
        :param az_name: Availability Zone Name (This is required while performing a
            stretched cluster expand operation)
        :type  ssh_thumbprint: :class:`str` or ``None``
        :param ssh_thumbprint: SSH thumbprint(fingerprint) of the vSphere host Note:This field
            will be mandatory in future releases.
        :type  serial_number: :class:`str` or ``None``
        :param serial_number: Serial Number of the vSphere host
        """
        self.id = id
        self.license_key = license_key
        self.ip_address = ip_address
        self.host_name = host_name
        self.username = username
        self.password = password
        self.host_network_spec = host_network_spec
        self.az_name = az_name
        self.ssh_thumbprint = ssh_thumbprint
        self.serial_number = serial_number
        VapiStruct.__init__(self)


HostSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_spec', {
        'id': type.OptionalType(type.StringType()),
        'licenseKey': type.OptionalType(type.StringType()),
        'ipAddress': type.OptionalType(type.StringType()),
        'hostName': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
        'hostNetworkSpec': type.OptionalType(type.ReferenceType(__name__, 'HostNetworkSpec')),
        'azName': type.OptionalType(type.StringType()),
        'sshThumbprint': type.OptionalType(type.StringType()),
        'serialNumber': type.OptionalType(type.StringType()),
    },
    HostSpec,
    False,
    None))



class IpRange(VapiStruct):
    """
    Spec contains parameters for range of IP addresses

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'startIpAddress': 'start_ip_address',
                            'endIpAddress': 'end_ip_address',
                            }

    def __init__(self,
                 start_ip_address=None,
                 end_ip_address=None,
                ):
        """
        :type  start_ip_address: :class:`str` or ``None``
        :param start_ip_address: Start IP Address
        :type  end_ip_address: :class:`str` or ``None``
        :param end_ip_address: End IP Address
        """
        self.start_ip_address = start_ip_address
        self.end_ip_address = end_ip_address
        VapiStruct.__init__(self)


IpRange._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ip_range', {
        'startIpAddress': type.OptionalType(type.StringType()),
        'endIpAddress': type.OptionalType(type.StringType()),
    },
    IpRange,
    False,
    None))



class LagSpec(VapiStruct):
    """
    This specification contains VDS (vSphere distributed switch) LAG
    configurations

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'uplinksCount': 'uplinks_count',
                            'lacpMode': 'lacp_mode',
                            'loadBalancingMode': 'load_balancing_mode',
                            'lacpTimeoutMode': 'lacp_timeout_mode',
                            }

    def __init__(self,
                 name=None,
                 uplinks_count=None,
                 lacp_mode=None,
                 load_balancing_mode=None,
                 lacp_timeout_mode=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: LAG name
        :type  uplinks_count: :class:`long` or ``None``
        :param uplinks_count: Number of uplinks/ports in this LAG
        :type  lacp_mode: :class:`str` or ``None``
        :param lacp_mode: LACP mode of this LAG
        :type  load_balancing_mode: :class:`str` or ``None``
        :param load_balancing_mode: Load balancing mode of this LAG
        :type  lacp_timeout_mode: :class:`str` or ``None``
        :param lacp_timeout_mode: LACP timeout mode of this LAG
        """
        self.name = name
        self.uplinks_count = uplinks_count
        self.lacp_mode = lacp_mode
        self.load_balancing_mode = load_balancing_mode
        self.lacp_timeout_mode = lacp_timeout_mode
        VapiStruct.__init__(self)


LagSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.lag_spec', {
        'name': type.OptionalType(type.StringType()),
        'uplinksCount': type.OptionalType(type.IntegerType()),
        'lacpMode': type.OptionalType(type.StringType()),
        'loadBalancingMode': type.OptionalType(type.StringType()),
        'lacpTimeoutMode': type.OptionalType(type.StringType()),
    },
    LagSpec,
    False,
    None))



class NasVolumeSpec(VapiStruct):
    """
    NAS configuration for NFS based cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'serverName': 'server_name',
                            'path': 'path',
                            'readOnly': 'read_only',
                            'userTag': 'user_tag',
                            'enableBindToVmknic': 'enable_bind_to_vmknic',
                            }

    def __init__(self,
                 server_name=None,
                 path=None,
                 read_only=None,
                 user_tag=None,
                 enable_bind_to_vmknic=None,
                ):
        """
        :type  server_name: :class:`list` of :class:`str` or ``None``
        :param server_name: NFS Server name used for cluster creation
        :type  path: :class:`str` or ``None``
        :param path: Shared directory path used for NFS based cluster creation
        :type  read_only: :class:`bool` or ``None``
        :param read_only: Readonly is used to identify whether to mount the directory as
            readOnly or not
        :type  user_tag: :class:`str` or ``None``
        :param user_tag: User tag used to annotate NFS share
        :type  enable_bind_to_vmknic: :class:`bool` or ``None``
        :param enable_bind_to_vmknic: Indicates whether to bind the created NFS datastore to the VMkernel
            NIC created based on NFS Network Spec. This is to prevent
            unintentional flow of NFS traffic through any other VMkernel NIC,
            if such connectivity exists.
        """
        self.server_name = server_name
        self.path = path
        self.read_only = read_only
        self.user_tag = user_tag
        self.enable_bind_to_vmknic = enable_bind_to_vmknic
        VapiStruct.__init__(self)


NasVolumeSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nas_volume_spec', {
        'serverName': type.OptionalType(type.ListType(type.StringType())),
        'path': type.OptionalType(type.StringType()),
        'readOnly': type.OptionalType(type.BooleanType()),
        'userTag': type.OptionalType(type.StringType()),
        'enableBindToVmknic': type.OptionalType(type.BooleanType()),
    },
    NasVolumeSpec,
    False,
    None))



class NetworkProfile(VapiStruct):
    """
    This specification contains the host switch configurations for the NSX
    transport node.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'description': 'description',
                            'isDefault': 'is_default',
                            'nsxtHostSwitchConfigs': 'nsxt_host_switch_configs',
                            }

    def __init__(self,
                 name=None,
                 description=None,
                 is_default=None,
                 nsxt_host_switch_configs=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: The network profile name
        :type  description: :class:`str` or ``None``
        :param description: The network profile description
        :type  is_default: :class:`bool` or ``None``
        :param is_default: Designates the network profile as a Global Network Config or Sub
            Network Config
        :type  nsxt_host_switch_configs: :class:`list` of :class:`NsxtHostSwitchConfig` or ``None``
        :param nsxt_host_switch_configs: The list of NSX host switch configurations
        """
        self.name = name
        self.description = description
        self.is_default = is_default
        self.nsxt_host_switch_configs = nsxt_host_switch_configs
        VapiStruct.__init__(self)


NetworkProfile._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.network_profile', {
        'name': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'isDefault': type.OptionalType(type.BooleanType()),
        'nsxtHostSwitchConfigs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtHostSwitchConfig'))),
    },
    NetworkProfile,
    False,
    None))



class NetworkSpec(VapiStruct):
    """
    This specification contains cluster's network configuration.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vdsSpecs': 'vds_specs',
                            'nsxClusterSpec': 'nsx_cluster_spec',
                            'networkProfiles': 'network_profiles',
                            }

    def __init__(self,
                 vds_specs=None,
                 nsx_cluster_spec=None,
                 network_profiles=None,
                ):
        """
        :type  vds_specs: :class:`list` of :class:`VdsSpec` or ``None``
        :param vds_specs: Distributed switches to add to the cluster
        :type  nsx_cluster_spec: :class:`NsxClusterSpec` or ``None``
        :param nsx_cluster_spec:         :type  network_profiles: :class:`list` of :class:`NetworkProfile` or ``None``
        :param network_profiles: The list of network profiles
        """
        self.vds_specs = vds_specs
        self.nsx_cluster_spec = nsx_cluster_spec
        self.network_profiles = network_profiles
        VapiStruct.__init__(self)


NetworkSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.network_spec', {
        'vdsSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VdsSpec'))),
        'nsxClusterSpec': type.OptionalType(type.ReferenceType(__name__, 'NsxClusterSpec')),
        'networkProfiles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NetworkProfile'))),
    },
    NetworkSpec,
    False,
    None))



class NfsDatastoreSpec(VapiStruct):
    """
    This specification contains cluster storage configuration for NFS

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'datastoreName': 'datastore_name',
                            'nasVolume': 'nas_volume',
                            }

    def __init__(self,
                 datastore_name=None,
                 nas_volume=None,
                ):
        """
        :type  datastore_name: :class:`str` or ``None``
        :param datastore_name: Datastore name used for cluster creation
        :type  nas_volume: :class:`NasVolumeSpec` or ``None``
        :param nas_volume:         """
        self.datastore_name = datastore_name
        self.nas_volume = nas_volume
        VapiStruct.__init__(self)


NfsDatastoreSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nfs_datastore_spec', {
        'datastoreName': type.OptionalType(type.StringType()),
        'nasVolume': type.OptionalType(type.ReferenceType(__name__, 'NasVolumeSpec')),
    },
    NfsDatastoreSpec,
    False,
    None))



class NiocBandwidthAllocationSpec(VapiStruct):
    """
    This specification contains network traffic per resource type

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'niocTrafficResourceAllocation': 'nioc_traffic_resource_allocation',
                            }

    def __init__(self,
                 type=None,
                 nioc_traffic_resource_allocation=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: DvsHostInfrastructureTrafficResource resource type
        :type  nioc_traffic_resource_allocation: :class:`NiocTrafficResourceAllocation` or ``None``
        :param nioc_traffic_resource_allocation:         """
        self.type = type
        self.nioc_traffic_resource_allocation = nioc_traffic_resource_allocation
        VapiStruct.__init__(self)


NiocBandwidthAllocationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nioc_bandwidth_allocation_spec', {
        'type': type.OptionalType(type.StringType()),
        'niocTrafficResourceAllocation': type.OptionalType(type.ReferenceType(__name__, 'NiocTrafficResourceAllocation')),
    },
    NiocBandwidthAllocationSpec,
    False,
    None))



class NiocTrafficResourceAllocation(VapiStruct):
    """
    Specify network traffic allocation for a resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'limit': 'limit',
                            'sharesInfo': 'shares_info',
                            'reservation': 'reservation',
                            }

    def __init__(self,
                 limit=None,
                 shares_info=None,
                 reservation=None,
                ):
        """
        :type  limit: :class:`long` or ``None``
        :param limit:         :type  shares_info: :class:`SharesInfo` or ``None``
        :param shares_info:         :type  reservation: :class:`long` or ``None``
        :param reservation:         """
        self.limit = limit
        self.shares_info = shares_info
        self.reservation = reservation
        VapiStruct.__init__(self)


NiocTrafficResourceAllocation._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nioc_traffic_resource_allocation', {
        'limit': type.OptionalType(type.IntegerType()),
        'sharesInfo': type.OptionalType(type.ReferenceType(__name__, 'SharesInfo')),
        'reservation': type.OptionalType(type.IntegerType()),
    },
    NiocTrafficResourceAllocation,
    False,
    None))



class NsxClusterSpec(VapiStruct):
    """
    This specification contains NSX configuration for cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nsxTClusterSpec': 'nsxt_cluster_spec',
                            }

    def __init__(self,
                 nsxt_cluster_spec=None,
                ):
        """
        :type  nsxt_cluster_spec: :class:`NsxtClusterSpec` or ``None``
        :param nsxt_cluster_spec:         """
        self.nsxt_cluster_spec = nsxt_cluster_spec
        VapiStruct.__init__(self)


NsxClusterSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsx_cluster_spec', {
        'nsxTClusterSpec': type.OptionalType(type.ReferenceType(__name__, 'NsxtClusterSpec')),
    },
    NsxClusterSpec,
    False,
    None))



class NsxtClusterSpec(VapiStruct):
    """
    This specification contains NSX configuration for a new cluster.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'geneveVlanId': 'geneve_vlan_id',
                            'ipAddressPoolSpec': 'ip_address_pool_spec',
                            'ipAddressPoolsSpec': 'ip_address_pools_spec',
                            'uplinkProfiles': 'uplink_profiles',
                            }

    def __init__(self,
                 geneve_vlan_id=None,
                 ip_address_pool_spec=None,
                 ip_address_pools_spec=None,
                 uplink_profiles=None,
                ):
        """
        :type  geneve_vlan_id: :class:`long` or ``None``
        :param geneve_vlan_id: Vlan id of Geneve. (This field is deprecated, instead please use
            transportVlan in uplinkProfiles)
        :type  ip_address_pool_spec: :class:`IpAddressPoolSpec` or ``None``
        :param ip_address_pool_spec:         :type  ip_address_pools_spec: :class:`list` of :class:`IpAddressPoolSpec` or ``None``
        :param ip_address_pools_spec: The list of IP address pools specification
        :type  uplink_profiles: :class:`list` of :class:`UplinkProfile` or ``None``
        :param uplink_profiles: The list of uplink profile specifications.
        """
        self.geneve_vlan_id = geneve_vlan_id
        self.ip_address_pool_spec = ip_address_pool_spec
        self.ip_address_pools_spec = ip_address_pools_spec
        self.uplink_profiles = uplink_profiles
        VapiStruct.__init__(self)


NsxtClusterSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_cluster_spec', {
        'geneveVlanId': type.OptionalType(type.IntegerType()),
        'ipAddressPoolSpec': type.OptionalType(type.ReferenceType(__name__, 'IpAddressPoolSpec')),
        'ipAddressPoolsSpec': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'IpAddressPoolSpec'))),
        'uplinkProfiles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'UplinkProfile'))),
    },
    NsxtClusterSpec,
    False,
    None))



class NsxtSpec(VapiStruct):
    """
    This specification contains the parameters required to install and
    configure NSX in a workload domain. Note - Use of field ipAddressPoolSpec
    in this model is deprecated.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nsxManagerSpecs': 'nsx_manager_specs',
                            'vip': 'vip',
                            'vipFqdn': 'vip_fqdn',
                            'licenseKey': 'license_key',
                            'nsxManagerRootPassword': 'nsx_manager_root_password',
                            'nsxManagerAdminPassword': 'nsx_manager_admin_password',
                            'nsxManagerAuditPassword': 'nsx_manager_audit_password',
                            'formFactor': 'form_factor',
                            'ipAddressPoolSpec': 'ip_address_pool_spec',
                            'vpcSpec': 'vpc_spec',
                            }

    def __init__(self,
                 nsx_manager_specs=None,
                 vip=None,
                 vip_fqdn=None,
                 license_key=None,
                 nsx_manager_root_password=None,
                 nsx_manager_admin_password=None,
                 nsx_manager_audit_password=None,
                 form_factor=None,
                 ip_address_pool_spec=None,
                 vpc_spec=None,
                ):
        """
        :type  nsx_manager_specs: :class:`list` of :class:`NsxManagerSpec` or ``None``
        :param nsx_manager_specs: Specification details of the NSX Manager virtual machine
        :type  vip: :class:`str` or ``None``
        :param vip: [Deprecated] Virtual IP address which would act as proxy/alias for
            NSX Managers. Can be omitted if FQDN is provided.
        :type  vip_fqdn: :class:`str` or ``None``
        :param vip_fqdn: FQDN for VIP so that common SSL certificates can be installed
            across all managers
        :type  license_key: :class:`str` or ``None``
        :param license_key: NSX license value
        :type  nsx_manager_root_password: :class:`str` or ``None``
        :param nsx_manager_root_password: NSX manager root password
        :type  nsx_manager_admin_password: :class:`str` or ``None``
        :param nsx_manager_admin_password: NSX manager admin password
        :type  nsx_manager_audit_password: :class:`str` or ``None``
        :param nsx_manager_audit_password: NSX manager Audit password
        :type  form_factor: :class:`str` or ``None``
        :param form_factor: NSX manager form factor
        :type  ip_address_pool_spec: :class:`IpAddressPoolSpec` or ``None``
        :param ip_address_pool_spec:         :type  vpc_spec: :class:`VpcSpec` or ``None``
        :param vpc_spec:         """
        self.nsx_manager_specs = nsx_manager_specs
        self.vip = vip
        self.vip_fqdn = vip_fqdn
        self.license_key = license_key
        self.nsx_manager_root_password = nsx_manager_root_password
        self.nsx_manager_admin_password = nsx_manager_admin_password
        self.nsx_manager_audit_password = nsx_manager_audit_password
        self.form_factor = form_factor
        self.ip_address_pool_spec = ip_address_pool_spec
        self.vpc_spec = vpc_spec
        VapiStruct.__init__(self)


NsxtSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_spec', {
        'nsxManagerSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxManagerSpec'))),
        'vip': type.OptionalType(type.StringType()),
        'vipFqdn': type.OptionalType(type.StringType()),
        'licenseKey': type.OptionalType(type.StringType()),
        'nsxManagerRootPassword': type.OptionalType(type.StringType()),
        'nsxManagerAdminPassword': type.OptionalType(type.StringType()),
        'nsxManagerAuditPassword': type.OptionalType(type.StringType()),
        'formFactor': type.OptionalType(type.StringType()),
        'ipAddressPoolSpec': type.OptionalType(type.ReferenceType(__name__, 'IpAddressPoolSpec')),
        'vpcSpec': type.OptionalType(type.ReferenceType(__name__, 'VpcSpec')),
    },
    NsxtSpec,
    False,
    None))



class NsxtHostSwitchConfig(VapiStruct):
    """
    This specification contains the configurations to be applied on the Host
    switch.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vdsName': 'vds_name',
                            'uplinkProfileName': 'uplink_profile_name',
                            'ipAddressPoolName': 'ip_address_pool_name',
                            'vdsUplinkToNsxUplink': 'vds_uplink_to_nsx_uplink',
                            }

    def __init__(self,
                 vds_name=None,
                 uplink_profile_name=None,
                 ip_address_pool_name=None,
                 vds_uplink_to_nsx_uplink=None,
                ):
        """
        :type  vds_name: :class:`str` or ``None``
        :param vds_name: The name of the vSphere Distributed Switch
        :type  uplink_profile_name: :class:`str` or ``None``
        :param uplink_profile_name: The name of the uplink profile
        :type  ip_address_pool_name: :class:`str` or ``None``
        :param ip_address_pool_name: The IP address pool name
        :type  vds_uplink_to_nsx_uplink: :class:`list` of :class:`UplinkMapping` or ``None``
        :param vds_uplink_to_nsx_uplink: The map of vSphere Distributed Switch uplinks to the NSX switch
            uplinks.
        """
        self.vds_name = vds_name
        self.uplink_profile_name = uplink_profile_name
        self.ip_address_pool_name = ip_address_pool_name
        self.vds_uplink_to_nsx_uplink = vds_uplink_to_nsx_uplink
        VapiStruct.__init__(self)


NsxtHostSwitchConfig._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_host_switch_config', {
        'vdsName': type.OptionalType(type.StringType()),
        'uplinkProfileName': type.OptionalType(type.StringType()),
        'ipAddressPoolName': type.OptionalType(type.StringType()),
        'vdsUplinkToNsxUplink': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'UplinkMapping'))),
    },
    NsxtHostSwitchConfig,
    False,
    None))



class NsxtSwitchConfig(VapiStruct):
    """
    This specification contains the configurations to be associated with the
    vSphere Distributed Switch managed by NSX

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'transportZones': 'transport_zones',
                            'hostSwitchOperationalMode': 'host_switch_operational_mode',
                            'ipAssignmentType': 'ip_assignment_type',
                            }

    def __init__(self,
                 transport_zones=None,
                 host_switch_operational_mode=None,
                 ip_assignment_type=None,
                ):
        """
        :type  transport_zones: :class:`list` of :class:`TransportZone` or ``None``
        :param transport_zones: The list of transport zones to be associated with the vSphere
            Distributed Switch managed by NSX
        :type  host_switch_operational_mode: :class:`str` or ``None``
        :param host_switch_operational_mode: Operational mode type of a Host Switch. Applicable only for the VI
            Workload Domains.
        :type  ip_assignment_type: :class:`str` or ``None``
        :param ip_assignment_type: Ip Assignment Type of a Host Switch
        """
        self.transport_zones = transport_zones
        self.host_switch_operational_mode = host_switch_operational_mode
        self.ip_assignment_type = ip_assignment_type
        VapiStruct.__init__(self)


NsxtSwitchConfig._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_switch_config', {
        'transportZones': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'TransportZone'))),
        'hostSwitchOperationalMode': type.OptionalType(type.StringType()),
        'ipAssignmentType': type.OptionalType(type.StringType()),
    },
    NsxtSwitchConfig,
    False,
    None))



class PortgroupSpec(VapiStruct):
    """
    This specification contains vCenter port group configurations

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'transportType': 'transport_type',
                            'activeUplinks': 'active_uplinks',
                            'standByUplinks': 'stand_by_uplinks',
                            'teamingPolicy': 'teaming_policy',
                            }

    def __init__(self,
                 name=None,
                 transport_type=None,
                 active_uplinks=None,
                 stand_by_uplinks=None,
                 teaming_policy=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Port group name
        :type  transport_type: :class:`str` or ``None``
        :param transport_type: Port group transport type
        :type  active_uplinks: :class:`list` of :class:`str` or ``None``
        :param active_uplinks: The list of active uplinks associated with portgroup
        :type  stand_by_uplinks: :class:`list` of :class:`str` or ``None``
        :param stand_by_uplinks: The list of standby uplinks associated with portgroup.
        :type  teaming_policy: :class:`str` or ``None``
        :param teaming_policy: The teaming policy associated with the portgroup.
        """
        self.name = name
        self.transport_type = transport_type
        self.active_uplinks = active_uplinks
        self.stand_by_uplinks = stand_by_uplinks
        self.teaming_policy = teaming_policy
        VapiStruct.__init__(self)


PortgroupSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.portgroup_spec', {
        'name': type.OptionalType(type.StringType()),
        'transportType': type.OptionalType(type.StringType()),
        'activeUplinks': type.OptionalType(type.ListType(type.StringType())),
        'standByUplinks': type.OptionalType(type.ListType(type.StringType())),
        'teamingPolicy': type.OptionalType(type.StringType()),
    },
    PortgroupSpec,
    False,
    None))



class RootCaCerts(VapiStruct):
    """
    Spec contains Root Certificate Authority parameters

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'alias': 'alias',
                            'certChain': 'cert_chain',
                            }

    def __init__(self,
                 alias=None,
                 cert_chain=None,
                ):
        """
        :type  alias: :class:`str` or ``None``
        :param alias: Certificate alias
        :type  cert_chain: :class:`list` of :class:`str` or ``None``
        :param cert_chain: List of Base64 encoded certificates
        """
        self.alias = alias
        self.cert_chain = cert_chain
        VapiStruct.__init__(self)


RootCaCerts._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.root_ca_certs', {
        'alias': type.OptionalType(type.StringType()),
        'certChain': type.OptionalType(type.ListType(type.StringType())),
    },
    RootCaCerts,
    False,
    None))



class SecuritySpec(VapiStruct):
    """
    Spec contains security settings

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'esxiCertsMode': 'esxi_certs_mode',
                            'rootCaCerts': 'root_ca_certs',
                            }

    def __init__(self,
                 esxi_certs_mode=None,
                 root_ca_certs=None,
                ):
        """
        :type  esxi_certs_mode: :class:`str` or ``None``
        :param esxi_certs_mode: ESXi certificates mode. One among:Custom, VMCA
        :type  root_ca_certs: :class:`list` of :class:`RootCaCerts` or ``None``
        :param root_ca_certs: Root Certificate Authority certificate list
        """
        self.esxi_certs_mode = esxi_certs_mode
        self.root_ca_certs = root_ca_certs
        VapiStruct.__init__(self)


SecuritySpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.security_spec', {
        'esxiCertsMode': type.OptionalType(type.StringType()),
        'rootCaCerts': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'RootCaCerts'))),
    },
    SecuritySpec,
    False,
    None))



class SharesInfo(VapiStruct):
    """
    Specify relative allocation between resource consumers

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'shares': 'shares',
                            'level': 'level',
                            }

    def __init__(self,
                 shares=None,
                 level=None,
                ):
        """
        :type  shares: :class:`long` or ``None``
        :param shares: The number of shares allocated
        :type  level: :class:`str` or ``None``
        :param level: The allocation level
        """
        self.shares = shares
        self.level = level
        VapiStruct.__init__(self)


SharesInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.shares_info', {
        'shares': type.OptionalType(type.IntegerType()),
        'level': type.OptionalType(type.StringType()),
    },
    SharesInfo,
    False,
    None))



class SsoDomainSpec(VapiStruct):
    """
    Spec for the SSO configuration in a VMware Cloud Foundation Domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ssoDomainPassword': 'sso_domain_password',
                            'ssoDomainName': 'sso_domain_name',
                            }

    def __init__(self,
                 sso_domain_password=None,
                 sso_domain_name=None,
                ):
        """
        :type  sso_domain_password: :class:`str` or ``None``
        :param sso_domain_password: New SSO domain password
        :type  sso_domain_name: :class:`str` or ``None``
        :param sso_domain_name: SSO domain name to be created
        """
        self.sso_domain_password = sso_domain_password
        self.sso_domain_name = sso_domain_name
        VapiStruct.__init__(self)


SsoDomainSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sso_domain_spec', {
        'ssoDomainPassword': type.OptionalType(type.StringType()),
        'ssoDomainName': type.OptionalType(type.StringType()),
    },
    SsoDomainSpec,
    False,
    None))



class SupervisorActivationSpec(VapiStruct):
    """
    This specification contains cluster's supervisor configuration.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'zoneName': 'zone_name',
                            'supervisorName': 'supervisor_name',
                            'serviceCidr': 'service_cidr',
                            'managementNetwork': 'management_network',
                            'vpcNetwork': 'vpc_network',
                            }

    def __init__(self,
                 zone_name=None,
                 supervisor_name=None,
                 service_cidr=None,
                 management_network=None,
                 vpc_network=None,
                ):
        """
        :type  zone_name: :class:`str` or ``None``
        :param zone_name: The zone name
        :type  supervisor_name: :class:`str` or ``None``
        :param supervisor_name: The supervisor name. Optional.
        :type  service_cidr: :class:`Cidr` or ``None``
        :param service_cidr:         :type  management_network: :class:`SupervisorManagementNetwork` or ``None``
        :param management_network:         :type  vpc_network: :class:`SupervisorVpcNetwork` or ``None``
        :param vpc_network:         """
        self.zone_name = zone_name
        self.supervisor_name = supervisor_name
        self.service_cidr = service_cidr
        self.management_network = management_network
        self.vpc_network = vpc_network
        VapiStruct.__init__(self)


SupervisorActivationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.supervisor_activation_spec', {
        'zoneName': type.OptionalType(type.StringType()),
        'supervisorName': type.OptionalType(type.StringType()),
        'serviceCidr': type.OptionalType(type.ReferenceType(__name__, 'Cidr')),
        'managementNetwork': type.OptionalType(type.ReferenceType(__name__, 'SupervisorManagementNetwork')),
        'vpcNetwork': type.OptionalType(type.ReferenceType(__name__, 'SupervisorVpcNetwork')),
    },
    SupervisorActivationSpec,
    False,
    None))



class SupervisorManagementNetwork(VapiStruct):
    """
    The supervisor management network configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'controlPlaneIpRange': 'control_plane_ip_range',
                            'details': 'details',
                            }

    def __init__(self,
                 control_plane_ip_range=None,
                 details=None,
                ):
        """
        :type  control_plane_ip_range: :class:`IpRange` or ``None``
        :param control_plane_ip_range:         :type  details: :class:`SupervisorManagementNetworkDetails` or ``None``
        :param details:         """
        self.control_plane_ip_range = control_plane_ip_range
        self.details = details
        VapiStruct.__init__(self)


SupervisorManagementNetwork._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.supervisor_management_network', {
        'controlPlaneIpRange': type.OptionalType(type.ReferenceType(__name__, 'IpRange')),
        'details': type.OptionalType(type.ReferenceType(__name__, 'SupervisorManagementNetworkDetails')),
    },
    SupervisorManagementNetwork,
    False,
    None))



class SupervisorManagementNetworkDetails(VapiStruct):
    """
    The supervisor management network details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vlanId': 'vlan_id',
                            'netMask': 'net_mask',
                            'gateway': 'gateway',
                            'vdsName': 'vds_name',
                            }

    def __init__(self,
                 vlan_id=None,
                 net_mask=None,
                 gateway=None,
                 vds_name=None,
                ):
        """
        :type  vlan_id: :class:`long` or ``None``
        :param vlan_id: The management network VLAN ID.
        :type  net_mask: :class:`str` or ``None``
        :param net_mask: The management network netmask.
        :type  gateway: :class:`str` or ``None``
        :param gateway: The management network gateway.
        :type  vds_name: :class:`str` or ``None``
        :param vds_name: The management network vds name.
        """
        self.vlan_id = vlan_id
        self.net_mask = net_mask
        self.gateway = gateway
        self.vds_name = vds_name
        VapiStruct.__init__(self)


SupervisorManagementNetworkDetails._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.supervisor_management_network_details', {
        'vlanId': type.OptionalType(type.IntegerType()),
        'netMask': type.OptionalType(type.StringType()),
        'gateway': type.OptionalType(type.StringType()),
        'vdsName': type.OptionalType(type.StringType()),
    },
    SupervisorManagementNetworkDetails,
    False,
    None))



class SupervisorVpcNetwork(VapiStruct):
    """
    This specification contains Supervisor's VPC network details.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nsxProject': 'nsx_project',
                            'nsxVpcConnectivityProfile': 'nsx_vpc_connectivity_profile',
                            'privateTransitNetworkCidr': 'private_transit_network_cidr',
                            'privateCidr': 'private_cidr',
                            'dnsServers': 'dns_servers',
                            'ntpServers': 'ntp_servers',
                            }

    def __init__(self,
                 nsx_project=None,
                 nsx_vpc_connectivity_profile=None,
                 private_transit_network_cidr=None,
                 private_cidr=None,
                 dns_servers=None,
                 ntp_servers=None,
                ):
        """
        :type  nsx_project: :class:`str` or ``None``
        :param nsx_project: The nsx project path. Optional when a new NSX is deployed.
        :type  nsx_vpc_connectivity_profile: :class:`str` or ``None``
        :param nsx_vpc_connectivity_profile: The NSX VPC connectivity profile. Optional when a new NSX is
            deployed.
        :type  private_transit_network_cidr: :class:`Cidr` or ``None``
        :param private_transit_network_cidr:         :type  private_cidr: :class:`Cidr` or ``None``
        :param private_cidr:         :type  dns_servers: :class:`list` of :class:`str` or ``None``
        :param dns_servers: The DNS server
        :type  ntp_servers: :class:`list` of :class:`str` or ``None``
        :param ntp_servers: The NTP server.
        """
        self.nsx_project = nsx_project
        self.nsx_vpc_connectivity_profile = nsx_vpc_connectivity_profile
        self.private_transit_network_cidr = private_transit_network_cidr
        self.private_cidr = private_cidr
        self.dns_servers = dns_servers
        self.ntp_servers = ntp_servers
        VapiStruct.__init__(self)


SupervisorVpcNetwork._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.supervisor_vpc_network', {
        'nsxProject': type.OptionalType(type.StringType()),
        'nsxVpcConnectivityProfile': type.OptionalType(type.StringType()),
        'privateTransitNetworkCidr': type.OptionalType(type.ReferenceType(__name__, 'Cidr')),
        'privateCidr': type.OptionalType(type.ReferenceType(__name__, 'Cidr')),
        'dnsServers': type.OptionalType(type.ListType(type.StringType())),
        'ntpServers': type.OptionalType(type.ListType(type.StringType())),
    },
    SupervisorVpcNetwork,
    False,
    None))



class TeamingSpec(VapiStruct):
    """
    This specification contains the teaming policies associated with the uplink
    profile.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'policy': 'policy',
                            'activeUplinks': 'active_uplinks',
                            'standByUplinks': 'stand_by_uplinks',
                            }

    def __init__(self,
                 policy=None,
                 active_uplinks=None,
                 stand_by_uplinks=None,
                ):
        """
        :type  policy: :class:`str` or ``None``
        :param policy: The teaming policy associated with the uplink profile
        :type  active_uplinks: :class:`list` of :class:`str` or ``None``
        :param active_uplinks: The list of active uplinks
        :type  stand_by_uplinks: :class:`list` of :class:`str` or ``None``
        :param stand_by_uplinks: The list of stand by uplinks
        """
        self.policy = policy
        self.active_uplinks = active_uplinks
        self.stand_by_uplinks = stand_by_uplinks
        VapiStruct.__init__(self)


TeamingSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.teaming_spec', {
        'policy': type.OptionalType(type.StringType()),
        'activeUplinks': type.OptionalType(type.ListType(type.StringType())),
        'standByUplinks': type.OptionalType(type.ListType(type.StringType())),
    },
    TeamingSpec,
    False,
    None))



class TransportZone(VapiStruct):
    """
    The transport zone to be associated with the vSphere Distributed Switch
    managed by NSX

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'transportType': 'transport_type',
                            }

    def __init__(self,
                 name=None,
                 transport_type=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: The name of the transport zone
        :type  transport_type: :class:`str` or ``None``
        :param transport_type: The type of the transport zone
        """
        self.name = name
        self.transport_type = transport_type
        VapiStruct.__init__(self)


TransportZone._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.transport_zone', {
        'name': type.OptionalType(type.StringType()),
        'transportType': type.OptionalType(type.StringType()),
    },
    TransportZone,
    False,
    None))



class UplinkMapping(VapiStruct):
    """
    The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vdsUplinkName': 'vds_uplink_name',
                            'nsxUplinkName': 'nsx_uplink_name',
                            }

    def __init__(self,
                 vds_uplink_name=None,
                 nsx_uplink_name=None,
                ):
        """
        :type  vds_uplink_name: :class:`str` or ``None``
        :param vds_uplink_name: The uplink name of the vSphere Distributed Switch
        :type  nsx_uplink_name: :class:`str` or ``None``
        :param nsx_uplink_name: The uplink name of the NSX switch
        """
        self.vds_uplink_name = vds_uplink_name
        self.nsx_uplink_name = nsx_uplink_name
        VapiStruct.__init__(self)


UplinkMapping._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.uplink_mapping', {
        'vdsUplinkName': type.OptionalType(type.StringType()),
        'nsxUplinkName': type.OptionalType(type.StringType()),
    },
    UplinkMapping,
    False,
    None))



class UplinkProfile(VapiStruct):
    """
    This specification contains the policies for the links from hypervisor
    hosts to NSX logical switch.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'teamings': 'teamings',
                            'transportVlan': 'transport_vlan',
                            'supportedTeamingPolicies': 'supported_teaming_policies',
                            }

    def __init__(self,
                 name=None,
                 teamings=None,
                 transport_vlan=None,
                 supported_teaming_policies=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: The uplink profile name
        :type  teamings: :class:`list` of :class:`TeamingSpec` or ``None``
        :param teamings: The teaming policies to be associated with the uplink profile
        :type  transport_vlan: :class:`long` or ``None``
        :param transport_vlan: The VLAN used for tagging overlay traffic of the associated Host
            Switch
        :type  supported_teaming_policies: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param supported_teaming_policies: List of supported teaming policies in NSX
        """
        self.name = name
        self.teamings = teamings
        self.transport_vlan = transport_vlan
        self.supported_teaming_policies = supported_teaming_policies
        VapiStruct.__init__(self)


UplinkProfile._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.uplink_profile', {
        'name': type.OptionalType(type.StringType()),
        'teamings': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'TeamingSpec'))),
        'transportVlan': type.OptionalType(type.IntegerType()),
        'supportedTeamingPolicies': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
    },
    UplinkProfile,
    False,
    None))



class VasaProviderSpec(VapiStruct):
    """
    This specification contains cluster storage configuration for vVol

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vasaProviderId': 'vasa_provider_id',
                            'storageContainerId': 'storage_container_id',
                            'storageProtocolType': 'storage_protocol_type',
                            'userId': 'user_id',
                            }

    def __init__(self,
                 vasa_provider_id=None,
                 storage_container_id=None,
                 storage_protocol_type=None,
                 user_id=None,
                ):
        """
        :type  vasa_provider_id: :class:`str` or ``None``
        :param vasa_provider_id: UUID of the VASA storage provider
        :type  storage_container_id: :class:`str` or ``None``
        :param storage_container_id: UUID of the VASA storage container
        :type  storage_protocol_type: :class:`str` or ``None``
        :param storage_protocol_type: Type of the VASA storage protocol
        :type  user_id: :class:`str` or ``None``
        :param user_id: UUID of the VASA storage user
        """
        self.vasa_provider_id = vasa_provider_id
        self.storage_container_id = storage_container_id
        self.storage_protocol_type = storage_protocol_type
        self.user_id = user_id
        VapiStruct.__init__(self)


VasaProviderSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vasa_provider_spec', {
        'vasaProviderId': type.OptionalType(type.StringType()),
        'storageContainerId': type.OptionalType(type.StringType()),
        'storageProtocolType': type.OptionalType(type.StringType()),
        'userId': type.OptionalType(type.StringType()),
    },
    VasaProviderSpec,
    False,
    None))



class VcenterSpec(VapiStruct):
    """
    This specification contains the installation and configuration of vCenter
    in a workload domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'networkDetailsSpec': 'network_details_spec',
                            'rootPassword': 'root_password',
                            'datacenterName': 'datacenter_name',
                            'vmSize': 'vm_size',
                            'storageSize': 'storage_size',
                            }

    def __init__(self,
                 name=None,
                 network_details_spec=None,
                 root_password=None,
                 datacenter_name=None,
                 vm_size=None,
                 storage_size=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the vCenter virtual machine
        :type  network_details_spec: :class:`NetworkDetailsSpec` or ``None``
        :param network_details_spec:         :type  root_password: :class:`str` or ``None``
        :param root_password: vCenter root shell password
        :type  datacenter_name: :class:`str` or ``None``
        :param datacenter_name: vCenter datacenter name
        :type  vm_size: :class:`str` or ``None``
        :param vm_size: VCenter VM size
        :type  storage_size: :class:`str` or ``None``
        :param storage_size: VCenter storage size
        """
        self.name = name
        self.network_details_spec = network_details_spec
        self.root_password = root_password
        self.datacenter_name = datacenter_name
        self.vm_size = vm_size
        self.storage_size = storage_size
        VapiStruct.__init__(self)


VcenterSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcenter_spec', {
        'name': type.OptionalType(type.StringType()),
        'networkDetailsSpec': type.OptionalType(type.ReferenceType(__name__, 'NetworkDetailsSpec')),
        'rootPassword': type.OptionalType(type.StringType()),
        'datacenterName': type.OptionalType(type.StringType()),
        'vmSize': type.OptionalType(type.StringType()),
        'storageSize': type.OptionalType(type.StringType()),
    },
    VcenterSpec,
    False,
    None))



class VdsSpec(VapiStruct):
    """
    This specification contains vSphere distributed switch configurations

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'isUsedByNsxt': 'is_used_by_nsxt',
                            'nsxtSwitchConfig': 'nsxt_switch_config',
                            'portGroupSpecs': 'port_group_specs',
                            'niocBandwidthAllocationSpecs': 'nioc_bandwidth_allocation_specs',
                            'mtu': 'mtu',
                            'lagSpecs': 'lag_specs',
                            }

    def __init__(self,
                 name=None,
                 is_used_by_nsxt=None,
                 nsxt_switch_config=None,
                 port_group_specs=None,
                 nioc_bandwidth_allocation_specs=None,
                 mtu=None,
                 lag_specs=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: vSphere Distributed Switch name
        :type  is_used_by_nsxt: :class:`bool` or ``None``
        :param is_used_by_nsxt: Boolean to identify if the vSphere distributed switch is used by
            NSX. This property is deprecated in favor of nsxtSwitchConfig field
        :type  nsxt_switch_config: :class:`NsxtSwitchConfig` or ``None``
        :param nsxt_switch_config:         :type  port_group_specs: :class:`list` of :class:`PortgroupSpec` or ``None``
        :param port_group_specs: List of portgroups to be associated with the vSphere Distributed
            Switch
        :type  nioc_bandwidth_allocation_specs: :class:`list` of :class:`NiocBandwidthAllocationSpec` or ``None``
        :param nioc_bandwidth_allocation_specs: List of Network I/O Control Bandwidth Allocations for System
            Traffic Based on shares, reservation, and limit, you can configure
            Network I/O Control to allocate certain amount of bandwidth for
            traffic generated by vSphere Fault Tolerance, iSCSI storage,
            vSphere vMotion, and so on. You can use Network I/O Control on a
            distributed switch to configure bandwidth allocation for the
            traffic that is related to the main system features in vSphere
        :type  mtu: :class:`long` or ``None``
        :param mtu: The maximum transmission unit (MTU) configured for the uplinks
        :type  lag_specs: :class:`list` of :class:`LagSpec` or ``None``
        :param lag_specs: List of LAGs to be associated with the vSphere Distributed Switch
        """
        self.name = name
        self.is_used_by_nsxt = is_used_by_nsxt
        self.nsxt_switch_config = nsxt_switch_config
        self.port_group_specs = port_group_specs
        self.nioc_bandwidth_allocation_specs = nioc_bandwidth_allocation_specs
        self.mtu = mtu
        self.lag_specs = lag_specs
        VapiStruct.__init__(self)


VdsSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vds_spec', {
        'name': type.OptionalType(type.StringType()),
        'isUsedByNsxt': type.OptionalType(type.BooleanType()),
        'nsxtSwitchConfig': type.OptionalType(type.ReferenceType(__name__, 'NsxtSwitchConfig')),
        'portGroupSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'PortgroupSpec'))),
        'niocBandwidthAllocationSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NiocBandwidthAllocationSpec'))),
        'mtu': type.OptionalType(type.IntegerType()),
        'lagSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'LagSpec'))),
    },
    VdsSpec,
    False,
    None))



class VmNic(VapiStruct):
    """
    This specification contains vmnic configurations for vSphere host

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'vdsName': 'vds_name',
                            'moveToNvds': 'move_to_nvds',
                            'uplink': 'uplink',
                            }

    def __init__(self,
                 id=None,
                 vds_name=None,
                 move_to_nvds=None,
                 uplink=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: VmNic ID of vSphere host to be associated with VDS, once added to
            cluster
        :type  vds_name: :class:`str` or ``None``
        :param vds_name: VDS name to associate with vSphere host. VDS name must match the
            cluster's VDS name
        :type  move_to_nvds: :class:`bool` or ``None``
        :param move_to_nvds: This flag determines if the vmnic must be on N-VDS. Set this to
            true for a vmnic that will be moved to N-VDS
        :type  uplink: :class:`str` or ``None``
        :param uplink: Uplink to be associated with vmnic
        """
        self.id = id
        self.vds_name = vds_name
        self.move_to_nvds = move_to_nvds
        self.uplink = uplink
        VapiStruct.__init__(self)


VmNic._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vm_nic', {
        'id': type.OptionalType(type.StringType()),
        'vdsName': type.OptionalType(type.StringType()),
        'moveToNvds': type.OptionalType(type.BooleanType()),
        'uplink': type.OptionalType(type.StringType()),
    },
    VmNic,
    False,
    None))



class VmfsDatastoreSpec(VapiStruct):
    """
    Cluster storage configuration for VMFS

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'fcSpec': 'fc_spec',
                            }

    def __init__(self,
                 fc_spec=None,
                ):
        """
        :type  fc_spec: :class:`list` of :class:`FcSpec` or ``None``
        :param fc_spec: Cluster storage configuration for VMFS on FC
        """
        self.fc_spec = fc_spec
        VapiStruct.__init__(self)


VmfsDatastoreSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vmfs_datastore_spec', {
        'fcSpec': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'FcSpec'))),
    },
    VmfsDatastoreSpec,
    False,
    None))



class VpcSpec(VapiStruct):
    """
    Specification for VPC related configurations

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'dtgwSpec': 'dtgw_spec',
                            }

    def __init__(self,
                 dtgw_spec=None,
                ):
        """
        :type  dtgw_spec: :class:`DtgwSpec` or ``None``
        :param dtgw_spec:         """
        self.dtgw_spec = dtgw_spec
        VapiStruct.__init__(self)


VpcSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vpc_spec', {
        'dtgwSpec': type.OptionalType(type.ReferenceType(__name__, 'DtgwSpec')),
    },
    VpcSpec,
    False,
    None))



class VsanDatastoreSpec(VapiStruct):
    """
    This specification contains cluster storage configuration for vSAN

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'datastoreName': 'datastore_name',
                            'failuresToTolerate': 'failures_to_tolerate',
                            'licenseKey': 'license_key',
                            'dedupAndCompressionEnabled': 'dedup_and_compression_enabled',
                            'esaConfig': 'esa_config',
                            }

    def __init__(self,
                 datastore_name=None,
                 failures_to_tolerate=None,
                 license_key=None,
                 dedup_and_compression_enabled=None,
                 esa_config=None,
                ):
        """
        :type  datastore_name: :class:`str` or ``None``
        :param datastore_name: Datastore name used for cluster creation
        :type  failures_to_tolerate: :class:`long` or ``None``
        :param failures_to_tolerate: Number of vSphere host failures to tolerate in the vSAN cluster.
            This field is required for vSAN OSA configuration.
        :type  license_key: :class:`str` or ``None``
        :param license_key: License key for the vSAN data store to be applied in vCenter
        :type  dedup_and_compression_enabled: :class:`bool` or ``None``
        :param dedup_and_compression_enabled: Enable vSAN deduplication and compression. This features is only
            available for clusters in which the hosts are all-flash
        :type  esa_config: :class:`EsaConfig` or ``None``
        :param esa_config:         """
        self.datastore_name = datastore_name
        self.failures_to_tolerate = failures_to_tolerate
        self.license_key = license_key
        self.dedup_and_compression_enabled = dedup_and_compression_enabled
        self.esa_config = esa_config
        VapiStruct.__init__(self)


VsanDatastoreSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vsan_datastore_spec', {
        'datastoreName': type.OptionalType(type.StringType()),
        'failuresToTolerate': type.OptionalType(type.IntegerType()),
        'licenseKey': type.OptionalType(type.StringType()),
        'dedupAndCompressionEnabled': type.OptionalType(type.BooleanType()),
        'esaConfig': type.OptionalType(type.ReferenceType(__name__, 'EsaConfig')),
    },
    VsanDatastoreSpec,
    False,
    None))



class VsanMaxConfig(VapiStruct):
    """
    This spec contains cluster vSAN MAX configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'enableVsanMax': 'enable_vsan_max',
                            'enableVsanExternalNetwork': 'enable_vsan_external_network',
                            }

    def __init__(self,
                 enable_vsan_max=None,
                 enable_vsan_external_network=None,
                ):
        """
        :type  enable_vsan_max: :class:`bool` or ``None``
        :param enable_vsan_max: Field to enable Vsan Max on the Cluster
        :type  enable_vsan_external_network: :class:`bool` or ``None``
        :param enable_vsan_external_network: Field to enable Vsan Max External Network on the Cluster
        """
        self.enable_vsan_max = enable_vsan_max
        self.enable_vsan_external_network = enable_vsan_external_network
        VapiStruct.__init__(self)


VsanMaxConfig._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vsan_max_config', {
        'enableVsanMax': type.OptionalType(type.BooleanType()),
        'enableVsanExternalNetwork': type.OptionalType(type.BooleanType()),
    },
    VsanMaxConfig,
    False,
    None))



class VsanRemoteDatastoreClusterSpec(VapiStruct):
    """
    vSAN remote datastore configuration for the cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'isStretched': 'is_stretched',
                            'primaryAzName': 'primary_az_name',
                            'vsanRemoteDatastoreSpec': 'vsan_remote_datastore_spec',
                            }

    def __init__(self,
                 is_stretched=None,
                 primary_az_name=None,
                 vsan_remote_datastore_spec=None,
                ):
        """
        :type  is_stretched: :class:`bool` or ``None``
        :param is_stretched: Compute only stretched cluster enablement status.
        :type  primary_az_name: :class:`str` or ``None``
        :param primary_az_name: Primary availability zone name for compute only stretched cluster
            creation.
        :type  vsan_remote_datastore_spec: :class:`list` of :class:`VsanRemoteDatastoreSpec` or ``None``
        :param vsan_remote_datastore_spec: List of Remote vSAN datastore configuration for vSAN compute client
            cluster
        """
        self.is_stretched = is_stretched
        self.primary_az_name = primary_az_name
        self.vsan_remote_datastore_spec = vsan_remote_datastore_spec
        VapiStruct.__init__(self)


VsanRemoteDatastoreClusterSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vsan_remote_datastore_cluster_spec', {
        'isStretched': type.OptionalType(type.BooleanType()),
        'primaryAzName': type.OptionalType(type.StringType()),
        'vsanRemoteDatastoreSpec': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VsanRemoteDatastoreSpec'))),
    },
    VsanRemoteDatastoreClusterSpec,
    False,
    None))



class VsanRemoteDatastoreSpec(VapiStruct):
    """
    This specification contains cluster storage configuration for vSAN

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'datastoreUuid': 'datastore_uuid',
                            'networkTopology': 'network_topology',
                            'siteAffinity': 'site_affinity',
                            }

    def __init__(self,
                 datastore_uuid=None,
                 network_topology=None,
                 site_affinity=None,
                ):
        """
        :type  datastore_uuid: :class:`str` or ``None``
        :param datastore_uuid: vSAN Remote Datastore UUID
        :type  network_topology: :class:`str` or ``None``
        :param network_topology: The network topology between the client and server cluster in the
            vSAN remote datastore mount. Eg. Symmetric/Asymmetric based on
            configuration of stretched server/client cluster.
        :type  site_affinity: :class:`list` of :class:`VsanSiteAffinity` or ``None``
        :param site_affinity: Site affinity mapping for server and client cluster.
        """
        self.datastore_uuid = datastore_uuid
        self.network_topology = network_topology
        self.site_affinity = site_affinity
        VapiStruct.__init__(self)


VsanRemoteDatastoreSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vsan_remote_datastore_spec', {
        'datastoreUuid': type.OptionalType(type.StringType()),
        'networkTopology': type.OptionalType(type.StringType()),
        'siteAffinity': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VsanSiteAffinity'))),
    },
    VsanRemoteDatastoreSpec,
    False,
    None))



class VsanSiteAffinity(VapiStruct):
    """
    This specification contains site affinity mappings for stretch cluster
    remote datastore mount

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'serverSite': 'server_site',
                            'clientSite': 'client_site',
                            }

    def __init__(self,
                 server_site=None,
                 client_site=None,
                ):
        """
        :type  server_site: :class:`str` or ``None``
        :param server_site: Server site affinity for vSAN remote datastore mount for stretched
            server clsuter.
        :type  client_site: :class:`str` or ``None``
        :param client_site: Client site affinity incase of client cluster is also stretched.
        """
        self.server_site = server_site
        self.client_site = client_site
        VapiStruct.__init__(self)


VsanSiteAffinity._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vsan_site_affinity', {
        'serverSite': type.OptionalType(type.StringType()),
        'clientSite': type.OptionalType(type.StringType()),
    },
    VsanSiteAffinity,
    False,
    None))



class VvolDatastoreSpec(VapiStruct):
    """
    This specification contains cluster storage configuration for vVol

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'vasaProviderSpec': 'vasa_provider_spec',
                            }

    def __init__(self,
                 name=None,
                 vasa_provider_spec=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the datastore
        :type  vasa_provider_spec: :class:`VasaProviderSpec` or ``None``
        :param vasa_provider_spec:         """
        self.name = name
        self.vasa_provider_spec = vasa_provider_spec
        VapiStruct.__init__(self)


VvolDatastoreSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vvol_datastore_spec', {
        'name': type.OptionalType(type.StringType()),
        'vasaProviderSpec': type.OptionalType(type.ReferenceType(__name__, 'VasaProviderSpec')),
    },
    VvolDatastoreSpec,
    False,
    None))



class BreakElmSpec(VapiStruct):
    """
    Break Elmspec Details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'isReconcileWorkflow': 'is_reconcile_workflow',
                            }

    def __init__(self,
                 is_reconcile_workflow=None,
                ):
        """
        :type  is_reconcile_workflow: :class:`bool` or ``None``
        :param is_reconcile_workflow: When true, the ELM is already broken out of band, will run only the
            post-breaking reconcile steps
        """
        self.is_reconcile_workflow = is_reconcile_workflow
        VapiStruct.__init__(self)


BreakElmSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.break_elm_spec', {
        'isReconcileWorkflow': type.OptionalType(type.BooleanType()),
    },
    BreakElmSpec,
    False,
    None))



class DomainUpdateSpec(VapiStruct):
    """
    Domain Update Data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'clusterSpec': 'cluster_spec',
                            'nsxTSpec': 'nsxt_spec',
                            'markForDeletion': 'mark_for_deletion',
                            'name': 'name',
                            'isolationSpec': 'isolation_spec',
                            'breakElmSpec': 'break_elm_spec',
                            }

    def __init__(self,
                 cluster_spec=None,
                 nsxt_spec=None,
                 mark_for_deletion=None,
                 name=None,
                 isolation_spec=None,
                 break_elm_spec=None,
                ):
        """
        :type  cluster_spec: :class:`ClusterSpec` or ``None``
        :param cluster_spec:         :type  nsxt_spec: :class:`NsxtSpec` or ``None``
        :param nsxt_spec:         :type  mark_for_deletion: :class:`bool` or ``None``
        :param mark_for_deletion: Enable deletion for the domain
        :type  name: :class:`str` or ``None``
        :param name: Name of the domain
        :type  isolation_spec: :class:`IsolationSpec` or ``None``
        :param isolation_spec:         :type  break_elm_spec: :class:`BreakElmSpec` or ``None``
        :param break_elm_spec:         """
        self.cluster_spec = cluster_spec
        self.nsxt_spec = nsxt_spec
        self.mark_for_deletion = mark_for_deletion
        self.name = name
        self.isolation_spec = isolation_spec
        self.break_elm_spec = break_elm_spec
        VapiStruct.__init__(self)


DomainUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.domain_update_spec', {
        'clusterSpec': type.OptionalType(type.ReferenceType(__name__, 'ClusterSpec')),
        'nsxTSpec': type.OptionalType(type.ReferenceType(__name__, 'NsxtSpec')),
        'markForDeletion': type.OptionalType(type.BooleanType()),
        'name': type.OptionalType(type.StringType()),
        'isolationSpec': type.OptionalType(type.ReferenceType(__name__, 'IsolationSpec')),
        'breakElmSpec': type.OptionalType(type.ReferenceType(__name__, 'BreakElmSpec')),
    },
    DomainUpdateSpec,
    False,
    None))



class IsolationSpec(VapiStruct):
    """
    Domain Isolation Details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ssoDomainSpec': 'sso_domain_spec',
                            'domainIdForIsolation': 'domain_id_for_isolation',
                            'workloadDomainName': 'workload_domain_name',
                            }

    def __init__(self,
                 sso_domain_spec=None,
                 domain_id_for_isolation=None,
                 workload_domain_name=None,
                ):
        """
        :type  sso_domain_spec: :class:`SsoDomainSpec` or ``None``
        :param sso_domain_spec:         :type  domain_id_for_isolation: :class:`str` or ``None``
        :param domain_id_for_isolation: Id of the domain that needs to be isolated
        :type  workload_domain_name: :class:`str` or ``None``
        :param workload_domain_name: Name of the domain that needs to be isolated
        """
        self.sso_domain_spec = sso_domain_spec
        self.domain_id_for_isolation = domain_id_for_isolation
        self.workload_domain_name = workload_domain_name
        VapiStruct.__init__(self)


IsolationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.isolation_spec', {
        'ssoDomainSpec': type.OptionalType(type.ReferenceType(__name__, 'SsoDomainSpec')),
        'domainIdForIsolation': type.OptionalType(type.StringType()),
        'workloadDomainName': type.OptionalType(type.StringType()),
    },
    IsolationSpec,
    False,
    None))



class ComplianceAuditSpec(VapiStruct):
    """
    This specification contains compliance to be audited

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'standardType': 'standard_type',
                            'standardVersion': 'standard_version',
                            'complianceResourcesConfigurationSpec': 'compliance_resources_configuration_spec',
                            }

    def __init__(self,
                 standard_type=None,
                 standard_version=None,
                 compliance_resources_configuration_spec=None,
                ):
        """
        :type  standard_type: :class:`str` or ``None``
        :param standard_type: Compliance standard type
        :type  standard_version: :class:`str` or ``None``
        :param standard_version: Compliance standard version
        :type  compliance_resources_configuration_spec: :class:`list` of :class:`ComplianceResourcesConfigurationSpec` or ``None``
        :param compliance_resources_configuration_spec: Compliance resource and configuration spec
        """
        self.standard_type = standard_type
        self.standard_version = standard_version
        self.compliance_resources_configuration_spec = compliance_resources_configuration_spec
        VapiStruct.__init__(self)


ComplianceAuditSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compliance_audit_spec', {
        'standardType': type.OptionalType(type.StringType()),
        'standardVersion': type.OptionalType(type.StringType()),
        'complianceResourcesConfigurationSpec': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ComplianceResourcesConfigurationSpec'))),
    },
    ComplianceAuditSpec,
    False,
    None))



class ComplianceResource(VapiStruct):
    """
    This specification contains compliance resource details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceType': 'resource_type',
                            'resourceName': 'resource_name',
                            }

    def __init__(self,
                 resource_type=None,
                 resource_name=None,
                ):
        """
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Compliance Resource Type
        :type  resource_name: :class:`str` or ``None``
        :param resource_name: Compliance Resource FQDN
        """
        self.resource_type = resource_type
        self.resource_name = resource_name
        VapiStruct.__init__(self)


ComplianceResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compliance_resource', {
        'resourceType': type.OptionalType(type.StringType()),
        'resourceName': type.OptionalType(type.StringType()),
    },
    ComplianceResource,
    False,
    None))



class ComplianceResourcesConfigurationSpec(VapiStruct):
    """
    This specification contains compliance configuration and resource request
    details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'configurationId': 'configuration_id',
                            'resources': 'resources',
                            }

    def __init__(self,
                 configuration_id=None,
                 resources=None,
                ):
        """
        :type  configuration_id: :class:`str` or ``None``
        :param configuration_id: Compliance configuration id
        :type  resources: :class:`list` of :class:`ComplianceResource` or ``None``
        :param resources: Compliance Resource details
        """
        self.configuration_id = configuration_id
        self.resources = resources
        VapiStruct.__init__(self)


ComplianceResourcesConfigurationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compliance_resources_configuration_spec', {
        'configurationId': type.OptionalType(type.StringType()),
        'resources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ComplianceResource'))),
    },
    ComplianceResourcesConfigurationSpec,
    False,
    None))



class ComplianceTask(VapiStruct):
    """
    Represents a compliance task

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'status': 'status',
                            'complianceAuditId': 'compliance_audit_id',
                            }

    def __init__(self,
                 id=None,
                 status=None,
                 compliance_audit_id=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Compliance task id 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: Compliance task status 
            
            * Property is read-only.
            
            
        :type  compliance_audit_id: :class:`str` or ``None``
        :param compliance_audit_id: Compliance audit id 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.status = status
        self.compliance_audit_id = compliance_audit_id
        VapiStruct.__init__(self)


ComplianceTask._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compliance_task', {
        'id': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'complianceAuditId': type.OptionalType(type.StringType()),
    },
    ComplianceTask,
    False,
    None))



class BrownfieldSyncSpec(VapiStruct):
    """
    Brownfield Sync Spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainName': 'domain_name',
                            'skipEsxThumbprintValidation': 'skip_esx_thumbprint_validation',
                            'hostSpecs': 'host_specs',
                            'suppressWarnings': 'suppress_warnings',
                            'localAdminPassword': 'local_admin_password',
                            'enableEdgeClusterSync': 'enable_edge_cluster_sync',
                            }

    def __init__(self,
                 domain_name=None,
                 skip_esx_thumbprint_validation=None,
                 host_specs=None,
                 suppress_warnings=None,
                 local_admin_password=None,
                 enable_edge_cluster_sync=None,
                ):
        """
        :type  domain_name: :class:`str` or ``None``
        :param domain_name: Name of the domain to sync
        :type  skip_esx_thumbprint_validation: :class:`bool` or ``None``
        :param skip_esx_thumbprint_validation: Flag that indicates if ESXi SSH keys should be automatically
            trusted
        :type  host_specs: :class:`list` of :class:`SddcHostSpec` or ``None``
        :param host_specs: List of the vCenter ESXi Hosts with their hostnames and SSH keys
            (sshThumbprint field) to trust. Can be skipped if
            skipEsxThumbprintValidation is set to true.
        :type  suppress_warnings: :class:`bool` or ``None``
        :param suppress_warnings: When provided, sync operation will continue even if warnings occur
        :type  local_admin_password: :class:`str` or ``None``
        :param local_admin_password: SDDC Manager local admin password 
            
            * Property is read-only.
            
            
        :type  enable_edge_cluster_sync: :class:`bool` or ``None``
        :param enable_edge_cluster_sync: When provided, existing Edge clusters will be synced to inventory,
            now and in future auto-sync runs
        """
        self.domain_name = domain_name
        self.skip_esx_thumbprint_validation = skip_esx_thumbprint_validation
        self.host_specs = host_specs
        self.suppress_warnings = suppress_warnings
        self.local_admin_password = local_admin_password
        self.enable_edge_cluster_sync = enable_edge_cluster_sync
        VapiStruct.__init__(self)


BrownfieldSyncSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.brownfield_sync_spec', {
        'domainName': type.OptionalType(type.StringType()),
        'skipEsxThumbprintValidation': type.OptionalType(type.BooleanType()),
        'hostSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SddcHostSpec'))),
        'suppressWarnings': type.OptionalType(type.BooleanType()),
        'localAdminPassword': type.OptionalType(type.StringType()),
        'enableEdgeClusterSync': type.OptionalType(type.BooleanType()),
    },
    BrownfieldSyncSpec,
    False,
    None))



class Datastore(VapiStruct):
    """
    Represents a datastore in the system

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'url': 'url',
                            'vcInstanceUuid': 'vc_instance_uuid',
                            'vcDatacenterName': 'vc_datacenter_name',
                            'datastoreType': 'datastore_type',
                            'totalCapacityGB': 'total_capacity_gb',
                            'freeCapacityGB': 'free_capacity_gb',
                            'vmCount': 'vm_count',
                            'tags': 'tags',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 url=None,
                 vc_instance_uuid=None,
                 vc_datacenter_name=None,
                 datastore_type=None,
                 total_capacity_gb=None,
                 free_capacity_gb=None,
                 vm_count=None,
                 tags=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Id of the datastore 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: Name of the datastore 
            
            * Property is read-only.
            
            
        :type  url: :class:`str` or ``None``
        :param url: URL of the datastore 
            
            * Property is read-only.
            
            
        :type  vc_instance_uuid: :class:`str` or ``None``
        :param vc_instance_uuid: Instance UUID of the vCenter that manages this datastore 
            
            * Property is read-only.
            
            
        :type  vc_datacenter_name: :class:`str` or ``None``
        :param vc_datacenter_name: Name of the vCenter datacenter that this datastore resides 
            
            * Property is read-only.
            
            
        :type  datastore_type: :class:`str` or ``None``
        :param datastore_type: Datastore Type 
            
            * Property is read-only.
            
            
        :type  total_capacity_gb: :class:`float` or ``None``
        :param total_capacity_gb: Total storage capacity in GB 
            
            * Property is read-only.
            
            
        :type  free_capacity_gb: :class:`float` or ``None``
        :param free_capacity_gb: Free storage capacity in GB 
            
            * Property is read-only.
            
            
        :type  vm_count: :class:`long` or ``None``
        :param vm_count: Number of VMs on the datastore 
            
            * Property is read-only.
            
            
        :type  tags: :class:`list` of :class:`Tag` or ``None``
        :param tags: List of assigned tags for the datastore
        """
        self.id = id
        self.name = name
        self.url = url
        self.vc_instance_uuid = vc_instance_uuid
        self.vc_datacenter_name = vc_datacenter_name
        self.datastore_type = datastore_type
        self.total_capacity_gb = total_capacity_gb
        self.free_capacity_gb = free_capacity_gb
        self.vm_count = vm_count
        self.tags = tags
        VapiStruct.__init__(self)


Datastore._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.datastore', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'url': type.OptionalType(type.StringType()),
        'vcInstanceUuid': type.OptionalType(type.StringType()),
        'vcDatacenterName': type.OptionalType(type.StringType()),
        'datastoreType': type.OptionalType(type.StringType()),
        'totalCapacityGB': type.OptionalType(type.DoubleType()),
        'freeCapacityGB': type.OptionalType(type.DoubleType()),
        'vmCount': type.OptionalType(type.IntegerType()),
        'tags': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Tag'))),
    },
    Datastore,
    False,
    None))



class DatastoreQueryResponse(VapiStruct):
    """
    Represents a datastore query response.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'queryInfo': 'query_info',
                            'result': 'result',
                            }

    def __init__(self,
                 query_info=None,
                 result=None,
                ):
        """
        :type  query_info: :class:`QueryInfo` or ``None``
        :param query_info:         :type  result: :class:`PageDatastore` or ``None``
        :param result:         """
        self.query_info = query_info
        self.result = result
        VapiStruct.__init__(self)


DatastoreQueryResponse._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.datastore_query_response', {
        'queryInfo': type.OptionalType(type.ReferenceType(__name__, 'QueryInfo')),
        'result': type.OptionalType(type.ReferenceType(__name__, 'PageDatastore')),
    },
    DatastoreQueryResponse,
    False,
    None))



class PageDatastore(VapiStruct):
    """
    Represents a page of elements of a single type

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Datastore` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageDatastore._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_datastore', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Datastore'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageDatastore,
    False,
    None))



class DatastoreCriterion(VapiStruct):
    """
    Represents a criterion for querying the datastores

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'arguments': 'arguments',
                            'description': 'description',
                            }

    def __init__(self,
                 name=None,
                 arguments=None,
                 description=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the criterion for querying datastores 
            
            * Property is read-only.
            
            
        :type  arguments: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param arguments: Arguments required for a particular criterion 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description of the criterion 
            
            * Property is read-only.
            
            
        """
        self.name = name
        self.arguments = arguments
        self.description = description
        VapiStruct.__init__(self)


DatastoreCriterion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.datastore_criterion', {
        'name': type.OptionalType(type.StringType()),
        'arguments': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
        'description': type.OptionalType(type.StringType()),
    },
    DatastoreCriterion,
    False,
    None))



class Capacity(VapiStruct):
    """
    Represents a usage and capacity information of a Resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'cpu': 'cpu',
                            'memory': 'memory',
                            'storage': 'storage',
                            }

    def __init__(self,
                 cpu=None,
                 memory=None,
                 storage=None,
                ):
        """
        :type  cpu: :class:`CpuInfo` or ``None``
        :param cpu:         :type  memory: :class:`MemoryInfo` or ``None``
        :param memory:         :type  storage: :class:`StorageInfo` or ``None``
        :param storage:         """
        self.cpu = cpu
        self.memory = memory
        self.storage = storage
        VapiStruct.__init__(self)


Capacity._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.capacity', {
        'cpu': type.OptionalType(type.ReferenceType(__name__, 'CpuInfo')),
        'memory': type.OptionalType(type.ReferenceType(__name__, 'MemoryInfo')),
        'storage': type.OptionalType(type.ReferenceType(__name__, 'StorageInfo')),
    },
    Capacity,
    False,
    None))



class Cluster(VapiStruct):
    """
    Cluster representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'domain': 'domain',
                            'name': 'name',
                            'status': 'status',
                            'hciMeshData': 'hci_mesh_data',
                            'primaryDatastoreName': 'primary_datastore_name',
                            'primaryDatastoreType': 'primary_datastore_type',
                            'hosts': 'hosts',
                            'isStretched': 'is_stretched',
                            'isDefault': 'is_default',
                            'failuresToTolerate': 'failures_to_tolerate',
                            'vdsSpecs': 'vds_specs',
                            'tags': 'tags',
                            'isImageBased': 'is_image_based',
                            'configManagerEnabled': 'config_manager_enabled',
                            'capacity': 'capacity',
                            'vcenter': 'vcenter',
                            'managedObjectReferenceId': 'managed_object_reference_id',
                            'vsanClusterMode': 'vsan_cluster_mode',
                            'datacenter': 'datacenter',
                            'isImported': 'is_imported',
                            }

    def __init__(self,
                 id=None,
                 domain=None,
                 name=None,
                 status=None,
                 hci_mesh_data=None,
                 primary_datastore_name=None,
                 primary_datastore_type=None,
                 hosts=None,
                 is_stretched=None,
                 is_default=None,
                 failures_to_tolerate=None,
                 vds_specs=None,
                 tags=None,
                 is_image_based=None,
                 config_manager_enabled=None,
                 capacity=None,
                 vcenter=None,
                 managed_object_reference_id=None,
                 vsan_cluster_mode=None,
                 datacenter=None,
                 is_imported=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the cluster
        :type  domain: :class:`DomainReference` or ``None``
        :param domain:         :type  name: :class:`str` or ``None``
        :param name: Name of the cluster
        :type  status: :class:`str` or ``None``
        :param status: Status of the cluster
        :type  hci_mesh_data: :class:`HciMeshData` or ``None``
        :param hci_mesh_data:         :type  primary_datastore_name: :class:`str` or ``None``
        :param primary_datastore_name: Name of the primary datastore
        :type  primary_datastore_type: :class:`str` or ``None``
        :param primary_datastore_type: Storage type of the primary datastore
        :type  hosts: :class:`list` of :class:`HostReference` or ``None``
        :param hosts: List of hosts associated with the cluster
        :type  is_stretched: :class:`bool` or ``None``
        :param is_stretched: Status of the cluster if Stretched or not
        :type  is_default: :class:`bool` or ``None``
        :param is_default: Status of the cluster if default or not
        :type  failures_to_tolerate: :class:`long` or ``None``
        :param failures_to_tolerate: Number of ESXi host failures to tolerate in the vSAN cluster.
            Applicable only for clusters with vSAN datastore
        :type  vds_specs: :class:`list` of :class:`VdsSpec` or ``None``
        :param vds_specs: Distributed switches to added to the cluster
        :type  tags: :class:`list` of :class:`Tag` or ``None``
        :param tags: Deprecated, this list will always be returned empty
        :type  is_image_based: :class:`bool` or ``None``
        :param is_image_based: Is cluster managed by vSphere Lifecycle Manager Images - true if
            managed, false if managed by vSphere Lifecycle Manager Baselines
        :type  config_manager_enabled: :class:`bool` or ``None``
        :param config_manager_enabled: Indicates if the cluster is managed by vSphere Configuration
            Profiles
        :type  capacity: :class:`Capacity` or ``None``
        :param capacity:         :type  vcenter: :class:`VcenterReference` or ``None``
        :param vcenter:         :type  managed_object_reference_id: :class:`str` or ``None``
        :param managed_object_reference_id: Managed Object Reference Id of this cluster in vCenter
        :type  vsan_cluster_mode: :class:`str` or ``None``
        :param vsan_cluster_mode: vSAN cluster mode
        :type  datacenter: :class:`Datacenter` or ``None``
        :param datacenter:         :type  is_imported: :class:`bool` or ``None``
        :param is_imported: Is cluster created outside of SDDC Manager and then imported, false
            if the cluster was created through SDDC Manager
        """
        self.id = id
        self.domain = domain
        self.name = name
        self.status = status
        self.hci_mesh_data = hci_mesh_data
        self.primary_datastore_name = primary_datastore_name
        self.primary_datastore_type = primary_datastore_type
        self.hosts = hosts
        self.is_stretched = is_stretched
        self.is_default = is_default
        self.failures_to_tolerate = failures_to_tolerate
        self.vds_specs = vds_specs
        self.tags = tags
        self.is_image_based = is_image_based
        self.config_manager_enabled = config_manager_enabled
        self.capacity = capacity
        self.vcenter = vcenter
        self.managed_object_reference_id = managed_object_reference_id
        self.vsan_cluster_mode = vsan_cluster_mode
        self.datacenter = datacenter
        self.is_imported = is_imported
        VapiStruct.__init__(self)


Cluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster', {
        'id': type.OptionalType(type.StringType()),
        'domain': type.OptionalType(type.ReferenceType(__name__, 'DomainReference')),
        'name': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'hciMeshData': type.OptionalType(type.ReferenceType(__name__, 'HciMeshData')),
        'primaryDatastoreName': type.OptionalType(type.StringType()),
        'primaryDatastoreType': type.OptionalType(type.StringType()),
        'hosts': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HostReference'))),
        'isStretched': type.OptionalType(type.BooleanType()),
        'isDefault': type.OptionalType(type.BooleanType()),
        'failuresToTolerate': type.OptionalType(type.IntegerType()),
        'vdsSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VdsSpec'))),
        'tags': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Tag'))),
        'isImageBased': type.OptionalType(type.BooleanType()),
        'configManagerEnabled': type.OptionalType(type.BooleanType()),
        'capacity': type.OptionalType(type.ReferenceType(__name__, 'Capacity')),
        'vcenter': type.OptionalType(type.ReferenceType(__name__, 'VcenterReference')),
        'managedObjectReferenceId': type.OptionalType(type.StringType()),
        'vsanClusterMode': type.OptionalType(type.StringType()),
        'datacenter': type.OptionalType(type.ReferenceType(__name__, 'Datacenter')),
        'isImported': type.OptionalType(type.BooleanType()),
    },
    Cluster,
    False,
    None))



class ClusterQueryResponse(VapiStruct):
    """
    Represents a cluster query response.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'queryInfo': 'query_info',
                            'result': 'result',
                            }

    def __init__(self,
                 query_info=None,
                 result=None,
                ):
        """
        :type  query_info: :class:`QueryInfo` or ``None``
        :param query_info:         :type  result: :class:`PageCluster` or ``None``
        :param result:         """
        self.query_info = query_info
        self.result = result
        VapiStruct.__init__(self)


ClusterQueryResponse._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_query_response', {
        'queryInfo': type.OptionalType(type.ReferenceType(__name__, 'QueryInfo')),
        'result': type.OptionalType(type.ReferenceType(__name__, 'PageCluster')),
    },
    ClusterQueryResponse,
    False,
    None))



class CpuInfo(VapiStruct):
    """
    Represents CPU information

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'used': 'used',
                            'total': 'total',
                            'numberOfCores': 'number_of_cores',
                            'numberOfCPUPackages': 'number_of_cpu_packages',
                            }

    def __init__(self,
                 used=None,
                 total=None,
                 number_of_cores=None,
                 number_of_cpu_packages=None,
                ):
        """
        :type  used: :class:`FrequencyMetric` or ``None``
        :param used:         :type  total: :class:`FrequencyMetric` or ``None``
        :param total:         :type  number_of_cores: :class:`long` or ``None``
        :param number_of_cores: Number of cores
        :type  number_of_cpu_packages: :class:`long` or ``None``
        :param number_of_cpu_packages: Number of CPU Packages
        """
        self.used = used
        self.total = total
        self.number_of_cores = number_of_cores
        self.number_of_cpu_packages = number_of_cpu_packages
        VapiStruct.__init__(self)


CpuInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cpu_info', {
        'used': type.OptionalType(type.ReferenceType(__name__, 'FrequencyMetric')),
        'total': type.OptionalType(type.ReferenceType(__name__, 'FrequencyMetric')),
        'numberOfCores': type.OptionalType(type.IntegerType()),
        'numberOfCPUPackages': type.OptionalType(type.IntegerType()),
    },
    CpuInfo,
    False,
    None))



class DataMetric(VapiStruct):
    """
    Represents a single metric representing digital data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """
    UNIT_B = "B"
    """
    Unit of the metric

    """
    UNIT_KB = "KB"
    """
    Unit of the metric

    """
    UNIT_MB = "MB"
    """
    Unit of the metric

    """
    UNIT_GB = "GB"
    """
    Unit of the metric

    """
    UNIT_TB = "TB"
    """
    Unit of the metric

    """
    UNIT_PB = "PB"
    """
    Unit of the metric

    """



    _canonical_to_pep_names = {
                            'value': 'value',
                            'unit': 'unit',
                            }

    def __init__(self,
                 value=None,
                 unit=None,
                ):
        """
        :type  value: :class:`float` or ``None``
        :param value: Value of the metric
        :type  unit: :class:`str` or ``None``
        :param unit: Unit of the metric
        """
        self.value = value
        self.unit = unit
        VapiStruct.__init__(self)


DataMetric._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.data_metric', {
        'value': type.OptionalType(type.DoubleType()),
        'unit': type.OptionalType(type.StringType()),
    },
    DataMetric,
    False,
    None))



class Datacenter(VapiStruct):
    """
    Represents a vCenter Datacenter

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainId': 'domain_id',
                            'name': 'name',
                            'morId': 'mor_id',
                            }

    def __init__(self,
                 domain_id=None,
                 name=None,
                 mor_id=None,
                ):
        """
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: SDDC Manager Domain ID of the datacenter
        :type  name: :class:`str` or ``None``
        :param name: Datacenter name
        :type  mor_id: :class:`str` or ``None``
        :param mor_id: Datacenter Managed Object Reference ID
        """
        self.domain_id = domain_id
        self.name = name
        self.mor_id = mor_id
        VapiStruct.__init__(self)


Datacenter._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.datacenter', {
        'domainId': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'morId': type.OptionalType(type.StringType()),
    },
    Datacenter,
    False,
    None))



class FrequencyMetric(VapiStruct):
    """
    Represents a single metric representing frequency

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """
    UNIT_HZ = "Hz"
    """
    Unit of the metric

    """
    UNIT_KHZ = "KHz"
    """
    Unit of the metric

    """
    UNIT_MHZ = "MHz"
    """
    Unit of the metric

    """
    UNIT_GHZ = "GHz"
    """
    Unit of the metric

    """
    UNIT_THZ = "THz"
    """
    Unit of the metric

    """



    _canonical_to_pep_names = {
                            'value': 'value',
                            'unit': 'unit',
                            }

    def __init__(self,
                 value=None,
                 unit=None,
                ):
        """
        :type  value: :class:`float` or ``None``
        :param value: Value of the metric
        :type  unit: :class:`str` or ``None``
        :param unit: Unit of the metric
        """
        self.value = value
        self.unit = unit
        VapiStruct.__init__(self)


FrequencyMetric._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.frequency_metric', {
        'value': type.OptionalType(type.DoubleType()),
        'unit': type.OptionalType(type.StringType()),
    },
    FrequencyMetric,
    False,
    None))



class HciMeshData(VapiStruct):
    """
    vSAN remote datastore mount related data for Cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'clusterMorId': 'cluster_mor_id',
                            'isHciMeshEnabled': 'is_hci_mesh_enabled',
                            'remoteDatastore': 'remote_datastore',
                            'primaryDataStoreId': 'primary_data_store_id',
                            'vsanDataStores': 'vsan_data_stores',
                            'clientClusters': 'client_clusters',
                            'remoteDatastoreInfos': 'remote_datastore_infos',
                            'isServer': 'is_server',
                            'isClient': 'is_client',
                            'computeOnlyClient': 'compute_only_client',
                            'numberOfClients': 'number_of_clients',
                            'numberOfServers': 'number_of_servers',
                            }

    def __init__(self,
                 name=None,
                 cluster_mor_id=None,
                 is_hci_mesh_enabled=None,
                 remote_datastore=None,
                 primary_data_store_id=None,
                 vsan_data_stores=None,
                 client_clusters=None,
                 remote_datastore_infos=None,
                 is_server=None,
                 is_client=None,
                 compute_only_client=None,
                 number_of_clients=None,
                 number_of_servers=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Cluster name
        :type  cluster_mor_id: :class:`str` or ``None``
        :param cluster_mor_id: Cluster Mor Id
        :type  is_hci_mesh_enabled: :class:`bool` or ``None``
        :param is_hci_mesh_enabled: vSAN remote datastore mount enabled status
        :type  remote_datastore: :class:`str` or ``None``
        :param remote_datastore: Remote Datastore
        :type  primary_data_store_id: :class:`str` or ``None``
        :param primary_data_store_id: Primary Datastore Id
        :type  vsan_data_stores: :class:`list` of :class:`str` or ``None``
        :param vsan_data_stores: vSAN Datastores
        :type  client_clusters: :class:`list` of :class:`str` or ``None``
        :param client_clusters: Client Cluster
        :type  remote_datastore_infos: :class:`list` of :class:`RemoteDatastoreInfo` or ``None``
        :param remote_datastore_infos: Remote Datastore Infos
        :type  is_server: :class:`bool` or ``None``
        :param is_server: Is Cluster Server
        :type  is_client: :class:`bool` or ``None``
        :param is_client: Is Cluster Client
        :type  compute_only_client: :class:`bool` or ``None``
        :param compute_only_client: Is Cluster Compute only
        :type  number_of_clients: :class:`long` or ``None``
        :param number_of_clients: Client clusters count
        :type  number_of_servers: :class:`long` or ``None``
        :param number_of_servers: Server clusters count
        """
        self.name = name
        self.cluster_mor_id = cluster_mor_id
        self.is_hci_mesh_enabled = is_hci_mesh_enabled
        self.remote_datastore = remote_datastore
        self.primary_data_store_id = primary_data_store_id
        self.vsan_data_stores = vsan_data_stores
        self.client_clusters = client_clusters
        self.remote_datastore_infos = remote_datastore_infos
        self.is_server = is_server
        self.is_client = is_client
        self.compute_only_client = compute_only_client
        self.number_of_clients = number_of_clients
        self.number_of_servers = number_of_servers
        VapiStruct.__init__(self)


HciMeshData._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.hci_mesh_data', {
        'name': type.OptionalType(type.StringType()),
        'clusterMorId': type.OptionalType(type.StringType()),
        'isHciMeshEnabled': type.OptionalType(type.BooleanType()),
        'remoteDatastore': type.OptionalType(type.StringType()),
        'primaryDataStoreId': type.OptionalType(type.StringType()),
        'vsanDataStores': type.OptionalType(type.ListType(type.StringType())),
        'clientClusters': type.OptionalType(type.ListType(type.StringType())),
        'remoteDatastoreInfos': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'RemoteDatastoreInfo'))),
        'isServer': type.OptionalType(type.BooleanType()),
        'isClient': type.OptionalType(type.BooleanType()),
        'computeOnlyClient': type.OptionalType(type.BooleanType()),
        'numberOfClients': type.OptionalType(type.IntegerType()),
        'numberOfServers': type.OptionalType(type.IntegerType()),
    },
    HciMeshData,
    False,
    None))



class HostReference(VapiStruct):
    """
    Represents an ESXi host reference

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'ipAddress': 'ip_address',
                            'fqdn': 'fqdn',
                            'vmNics': 'vm_nics',
                            'azName': 'az_name',
                            }

    def __init__(self,
                 id=None,
                 ip_address=None,
                 fqdn=None,
                 vm_nics=None,
                 az_name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the host
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: [Deprecated] IP address of the host
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN of the host
        :type  vm_nics: :class:`list` of :class:`VMNicInfo` or ``None``
        :param vm_nics: VM NICs of the host
        :type  az_name: :class:`str` or ``None``
        :param az_name: Fault domain name of the host
        """
        self.id = id
        self.ip_address = ip_address
        self.fqdn = fqdn
        self.vm_nics = vm_nics
        self.az_name = az_name
        VapiStruct.__init__(self)


HostReference._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_reference', {
        'id': type.OptionalType(type.StringType()),
        'ipAddress': type.OptionalType(type.StringType()),
        'fqdn': type.OptionalType(type.StringType()),
        'vmNics': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VMNicInfo'))),
        'azName': type.OptionalType(type.StringType()),
    },
    HostReference,
    False,
    None))



class MemoryInfo(VapiStruct):
    """
    Represents a memory metric with used and total for a resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'used': 'used',
                            'total': 'total',
                            }

    def __init__(self,
                 used=None,
                 total=None,
                ):
        """
        :type  used: :class:`DataMetric` or ``None``
        :param used:         :type  total: :class:`DataMetric` or ``None``
        :param total:         """
        self.used = used
        self.total = total
        VapiStruct.__init__(self)


MemoryInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.memory_info', {
        'used': type.OptionalType(type.ReferenceType(__name__, 'DataMetric')),
        'total': type.OptionalType(type.ReferenceType(__name__, 'DataMetric')),
    },
    MemoryInfo,
    False,
    None))



class PageCluster(VapiStruct):
    """
    Represents a page of elements of a single type

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Cluster` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_cluster', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Cluster'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageCluster,
    False,
    None))



class RemoteDatastoreInfo(VapiStruct):
    """
    Remote Datastore Info

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'serverCluster': 'server_cluster',
                            'remoteDatastore': 'remote_datastore',
                            }

    def __init__(self,
                 server_cluster=None,
                 remote_datastore=None,
                ):
        """
        :type  server_cluster: :class:`str` or ``None``
        :param server_cluster: Server cluster
        :type  remote_datastore: :class:`str` or ``None``
        :param remote_datastore: Remote Datastore
        """
        self.server_cluster = server_cluster
        self.remote_datastore = remote_datastore
        VapiStruct.__init__(self)


RemoteDatastoreInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.remote_datastore_info', {
        'serverCluster': type.OptionalType(type.StringType()),
        'remoteDatastore': type.OptionalType(type.StringType()),
    },
    RemoteDatastoreInfo,
    False,
    None))



class StorageInfo(VapiStruct):
    """
    Represents a storage metric with used and total for a resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'used': 'used',
                            'total': 'total',
                            }

    def __init__(self,
                 used=None,
                 total=None,
                ):
        """
        :type  used: :class:`DataMetric` or ``None``
        :param used:         :type  total: :class:`DataMetric` or ``None``
        :param total:         """
        self.used = used
        self.total = total
        VapiStruct.__init__(self)


StorageInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.storage_info', {
        'used': type.OptionalType(type.ReferenceType(__name__, 'DataMetric')),
        'total': type.OptionalType(type.ReferenceType(__name__, 'DataMetric')),
    },
    StorageInfo,
    False,
    None))



class VMNicInfo(VapiStruct):
    """
    VMNics attached to an ESXi host reference

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'linkSpeedMB': 'link_speed_mb',
                            'isInUse': 'is_in_use',
                            'isAutoNegotiateSupported': 'is_auto_negotiate_supported',
                            'isActive': 'is_active',
                            }

    def __init__(self,
                 name=None,
                 link_speed_mb=None,
                 is_in_use=None,
                 is_auto_negotiate_supported=None,
                 is_active=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the VMNic
        :type  link_speed_mb: :class:`long` or ``None``
        :param link_speed_mb: VMNic link speed in MB
        :type  is_in_use: :class:`bool` or ``None``
        :param is_in_use: Status of VMNic if in use or available
        :type  is_auto_negotiate_supported: :class:`bool` or ``None``
        :param is_auto_negotiate_supported: Status of VMNic if auto negotiate is supported or not
        :type  is_active: :class:`bool` or ``None``
        :param is_active: Status of VMNic if active or inactive
        """
        self.name = name
        self.link_speed_mb = link_speed_mb
        self.is_in_use = is_in_use
        self.is_auto_negotiate_supported = is_auto_negotiate_supported
        self.is_active = is_active
        VapiStruct.__init__(self)


VMNicInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.VM_nic_info', {
        'name': type.OptionalType(type.StringType()),
        'linkSpeedMB': type.OptionalType(type.IntegerType()),
        'isInUse': type.OptionalType(type.BooleanType()),
        'isAutoNegotiateSupported': type.OptionalType(type.BooleanType()),
        'isActive': type.OptionalType(type.BooleanType()),
    },
    VMNicInfo,
    False,
    None))



class VcenterReference(VapiStruct):
    """
    Represents a vCenter reference

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'fqdn': 'fqdn',
                            'vcInstanceId': 'vc_instance_id',
                            }

    def __init__(self,
                 id=None,
                 fqdn=None,
                 vc_instance_id=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the vCenter
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN of the vCenter
        :type  vc_instance_id: :class:`str` or ``None``
        :param vc_instance_id: vCenter instance ID
        """
        self.id = id
        self.fqdn = fqdn
        self.vc_instance_id = vc_instance_id
        VapiStruct.__init__(self)


VcenterReference._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcenter_reference', {
        'id': type.OptionalType(type.StringType()),
        'fqdn': type.OptionalType(type.StringType()),
        'vcInstanceId': type.OptionalType(type.StringType()),
    },
    VcenterReference,
    False,
    None))



class ClusterCriterion(VapiStruct):
    """
    Represents a criterion for querying the cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'arguments': 'arguments',
                            'description': 'description',
                            }

    def __init__(self,
                 name=None,
                 arguments=None,
                 description=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the criterion 
            
            * Property is read-only.
            
            
        :type  arguments: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param arguments: Arguments required for a particular criterion 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description of the criterion 
            
            * Property is read-only.
            
            
        """
        self.name = name
        self.arguments = arguments
        self.description = description
        VapiStruct.__init__(self)


ClusterCriterion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_criterion', {
        'name': type.OptionalType(type.StringType()),
        'arguments': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
        'description': type.OptionalType(type.StringType()),
    },
    ClusterCriterion,
    False,
    None))



class CredentialsExpirationSpec(VapiStruct):
    """
    This specification contains password expiration fetch request details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainName': 'domain_name',
                            'resourceType': 'resource_type',
                            'credentialIds': 'credential_ids',
                            }

    def __init__(self,
                 domain_name=None,
                 resource_type=None,
                 credential_ids=None,
                ):
        """
        :type  domain_name: :class:`str` or ``None``
        :param domain_name: Domain name
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Authenticated Resource Type
        :type  credential_ids: :class:`list` of :class:`str` or ``None``
        :param credential_ids: List of credential ids
        """
        self.domain_name = domain_name
        self.resource_type = resource_type
        self.credential_ids = credential_ids
        VapiStruct.__init__(self)


CredentialsExpirationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.credentials_expiration_spec', {
        'domainName': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'credentialIds': type.OptionalType(type.ListType(type.StringType())),
    },
    CredentialsExpirationSpec,
    False,
    None))



class AuthenticatedResource(VapiStruct):
    """
    Represents the credential resource in the system

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceId': 'resource_id',
                            'resourceName': 'resource_name',
                            'resourceIp': 'resource_ip',
                            'resourceType': 'resource_type',
                            'domainNames': 'domain_names',
                            'domainName': 'domain_name',
                            }

    def __init__(self,
                 resource_id=None,
                 resource_name=None,
                 resource_ip=None,
                 resource_type=None,
                 domain_names=None,
                 domain_name=None,
                ):
        """
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: Resource ID
        :type  resource_name: :class:`str` or ``None``
        :param resource_name: Resource name
        :type  resource_ip: :class:`str` or ``None``
        :param resource_ip: [Deprecated] Resource IP address
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Resource type
        :type  domain_names: :class:`list` of :class:`str` or ``None``
        :param domain_names: Domain names
        :type  domain_name: :class:`str` or ``None``
        :param domain_name: Domain name (deprecated)
        """
        self.resource_id = resource_id
        self.resource_name = resource_name
        self.resource_ip = resource_ip
        self.resource_type = resource_type
        self.domain_names = domain_names
        self.domain_name = domain_name
        VapiStruct.__init__(self)


AuthenticatedResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.authenticated_resource', {
        'resourceId': type.OptionalType(type.StringType()),
        'resourceName': type.OptionalType(type.StringType()),
        'resourceIp': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'domainNames': type.OptionalType(type.ListType(type.StringType())),
        'domainName': type.OptionalType(type.StringType()),
    },
    AuthenticatedResource,
    False,
    None))



class CredentialExpirationCheck(VapiStruct):
    """
    Represents credential expiration check details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'username': 'username',
                            'resource': 'resource',
                            'expiry': 'expiry',
                            'errors': 'errors',
                            'creationTimestamp': 'creation_timestamp',
                            'completionTimestamp': 'completion_timestamp',
                            }

    def __init__(self,
                 id=None,
                 username=None,
                 resource=None,
                 expiry=None,
                 errors=None,
                 creation_timestamp=None,
                 completion_timestamp=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Credential ID 
            
            * Property is read-only.
            
            
        :type  username: :class:`str` or ``None``
        :param username: Username 
            
            * Property is read-only.
            
            
        :type  resource: :class:`AuthenticatedResource` or ``None``
        :param resource:         :type  expiry: :class:`ExpirationDetails` or ``None``
        :param expiry:         :type  errors: :class:`list` of :class:`Error` or ``None``
        :param errors: List of errors in case of a failure 
            
            * Property is read-only.
            
            
        :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: Creation timestamp 
            
            * Property is read-only.
            
            
        :type  completion_timestamp: :class:`str` or ``None``
        :param completion_timestamp: Completion timestamp 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.username = username
        self.resource = resource
        self.expiry = expiry
        self.errors = errors
        self.creation_timestamp = creation_timestamp
        self.completion_timestamp = completion_timestamp
        VapiStruct.__init__(self)


CredentialExpirationCheck._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.credential_expiration_check', {
        'id': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'resource': type.OptionalType(type.ReferenceType(__name__, 'AuthenticatedResource')),
        'expiry': type.OptionalType(type.ReferenceType(__name__, 'ExpirationDetails')),
        'errors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Error'))),
        'creationTimestamp': type.OptionalType(type.StringType()),
        'completionTimestamp': type.OptionalType(type.StringType()),
    },
    CredentialExpirationCheck,
    False,
    None))



class CredentialsExpiration(VapiStruct):
    """
    Represents a credentials expiration task response

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'status': 'status',
                            'elements': 'elements',
                            'creationTimestamp': 'creation_timestamp',
                            'completionTimestamp': 'completion_timestamp',
                            }

    def __init__(self,
                 id=None,
                 status=None,
                 elements=None,
                 creation_timestamp=None,
                 completion_timestamp=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of expiration task 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: Execution status of the expiration 
            
            * Property is read-only.
            
            
        :type  elements: :class:`list` of :class:`CredentialExpirationCheck` or ``None``
        :param elements: List of one or more expiration checks that are performed as part of
            the credentials expiration task 
            
            * Property is read-only.
            
            
        :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: Creation timestamp 
            
            * Property is read-only.
            
            
        :type  completion_timestamp: :class:`str` or ``None``
        :param completion_timestamp: Completion timestamp 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.status = status
        self.elements = elements
        self.creation_timestamp = creation_timestamp
        self.completion_timestamp = completion_timestamp
        VapiStruct.__init__(self)


CredentialsExpiration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.credentials_expiration', {
        'id': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CredentialExpirationCheck'))),
        'creationTimestamp': type.OptionalType(type.StringType()),
        'completionTimestamp': type.OptionalType(type.StringType()),
    },
    CredentialsExpiration,
    False,
    None))



class ExpirationDetails(VapiStruct):
    """
    Represents expiration details of the credential

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'expiryDate': 'expiry_date',
                            'lastCheckedDate': 'last_checked_date',
                            'connectivityStatus': 'connectivity_status',
                            'status': 'status',
                            }

    def __init__(self,
                 expiry_date=None,
                 last_checked_date=None,
                 connectivity_status=None,
                 status=None,
                ):
        """
        :type  expiry_date: :class:`str` or ``None``
        :param expiry_date: Expiration date 
            
            * Property is read-only.
            
            
        :type  last_checked_date: :class:`str` or ``None``
        :param last_checked_date: Last checked date 
            
            * Property is read-only.
            
            
        :type  connectivity_status: :class:`str` or ``None``
        :param connectivity_status: Connectivity status 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: Expiration status 
            
            * Property is read-only.
            
            
        """
        self.expiry_date = expiry_date
        self.last_checked_date = last_checked_date
        self.connectivity_status = connectivity_status
        self.status = status
        VapiStruct.__init__(self)


ExpirationDetails._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.expiration_details', {
        'expiryDate': type.OptionalType(type.StringType()),
        'lastCheckedDate': type.OptionalType(type.StringType()),
        'connectivityStatus': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
    },
    ExpirationDetails,
    False,
    None))



class ConfigDriftApplySpec(VapiStruct):
    """
    Describes Configuration Reconciliation operations

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'reconciliationForResources': 'reconciliation_for_resources',
                            }

    def __init__(self,
                 reconciliation_for_resources=None,
                ):
        """
        :type  reconciliation_for_resources: :class:`list` of :class:`ReconciliationForResource` or ``None``
        :param reconciliation_for_resources: List of Configuration Reconciliation for resource, mutually
            exclusive with reconciliationForDrifts
        """
        self.reconciliation_for_resources = reconciliation_for_resources
        VapiStruct.__init__(self)


ConfigDriftApplySpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.config_drift_apply_spec', {
        'reconciliationForResources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ReconciliationForResource'))),
    },
    ConfigDriftApplySpec,
    False,
    None))



class ReconciliationForResource(VapiStruct):
    """
    Describes Configuration Reconciliation operation(s) for a resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceId': 'resource_id',
                            'configDriftIds': 'config_drift_ids',
                            'applyAll': 'apply_all',
                            'applyFixes': 'apply_fixes',
                            }

    def __init__(self,
                 resource_id=None,
                 config_drift_ids=None,
                 apply_all=None,
                 apply_fixes=None,
                ):
        """
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: Target resource ID
        :type  config_drift_ids: :class:`list` of :class:`str` or ``None``
        :param config_drift_ids: Indicates list of applicable configuration drifts to be applied to
            resource.
        :type  apply_all: :class:`bool` or ``None``
        :param apply_all: All application flag. Indicates if all applicable config drifts
            must be applied
        :type  apply_fixes: :class:`bool` or ``None``
        :param apply_fixes: Fix application flag. Indicates if all applicable config drifts of
            driftType FIX must be applied
        """
        self.resource_id = resource_id
        self.config_drift_ids = config_drift_ids
        self.apply_all = apply_all
        self.apply_fixes = apply_fixes
        VapiStruct.__init__(self)


ReconciliationForResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.reconciliation_for_resource', {
        'resourceId': type.OptionalType(type.StringType()),
        'configDriftIds': type.OptionalType(type.ListType(type.StringType())),
        'applyAll': type.OptionalType(type.BooleanType()),
        'applyFixes': type.OptionalType(type.BooleanType()),
    },
    ReconciliationForResource,
    False,
    None))



class ClusterCreationSpec(VapiStruct):
    """
    Cluster creation specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainId': 'domain_id',
                            'computeSpec': 'compute_spec',
                            'deployWithoutLicenseKeys': 'deploy_without_license_keys',
                            }

    def __init__(self,
                 domain_id=None,
                 compute_spec=None,
                 deploy_without_license_keys=None,
                ):
        """
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: ID of the domain to which the clusters will be added
        :type  compute_spec: :class:`ComputeSpec` or ``None``
        :param compute_spec:         :type  deploy_without_license_keys: :class:`bool` or ``None``
        :param deploy_without_license_keys: Flag that indicates if the deployment should happen without license
            keys.
        """
        self.domain_id = domain_id
        self.compute_spec = compute_spec
        self.deploy_without_license_keys = deploy_without_license_keys
        VapiStruct.__init__(self)


ClusterCreationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_creation_spec', {
        'domainId': type.OptionalType(type.StringType()),
        'computeSpec': type.OptionalType(type.ReferenceType(__name__, 'ComputeSpec')),
        'deployWithoutLicenseKeys': type.OptionalType(type.BooleanType()),
    },
    ClusterCreationSpec,
    False,
    None))



class ClusterCompactionSpec(VapiStruct):
    """
    This specification contains the parameters required to remove one or more
    vSphere hosts from existing cluster in a workload domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hosts': 'hosts',
                            'force': 'force',
                            'forceByPassingSafeMinSize': 'force_by_passing_safe_min_size',
                            }

    def __init__(self,
                 hosts=None,
                 force=None,
                 force_by_passing_safe_min_size=None,
                ):
        """
        :type  hosts: :class:`list` of :class:`HostReference` or ``None``
        :param hosts: List of vSphere hosts to be removed
        :type  force: :class:`bool` or ``None``
        :param force: Force removal of vSphere host
        :type  force_by_passing_safe_min_size: :class:`bool` or ``None``
        :param force_by_passing_safe_min_size: Remove dead hosts from cluster, bypassing validations. Forced
            removal may result in permanent data loss. Review recovery plan
            with VMware Support before using.
        """
        self.hosts = hosts
        self.force = force
        self.force_by_passing_safe_min_size = force_by_passing_safe_min_size
        VapiStruct.__init__(self)


ClusterCompactionSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_compaction_spec', {
        'hosts': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HostReference'))),
        'force': type.OptionalType(type.BooleanType()),
        'forceByPassingSafeMinSize': type.OptionalType(type.BooleanType()),
    },
    ClusterCompactionSpec,
    False,
    None))



class ClusterExpansionNetworkProfile(VapiStruct):
    """
    This specification contains the host switch configurations for the NSX
    transport node.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'description': 'description',
                            'nsxtHostSwitchConfigs': 'nsxt_host_switch_configs',
                            }

    def __init__(self,
                 name=None,
                 description=None,
                 nsxt_host_switch_configs=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: The network profile name
        :type  description: :class:`str` or ``None``
        :param description: The network profile description
        :type  nsxt_host_switch_configs: :class:`list` of :class:`NsxtHostSwitchConfig` or ``None``
        :param nsxt_host_switch_configs: The list of NSX host switch configurations
        """
        self.name = name
        self.description = description
        self.nsxt_host_switch_configs = nsxt_host_switch_configs
        VapiStruct.__init__(self)


ClusterExpansionNetworkProfile._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_expansion_network_profile', {
        'name': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'nsxtHostSwitchConfigs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtHostSwitchConfig'))),
    },
    ClusterExpansionNetworkProfile,
    False,
    None))



class ClusterExpansionNetworkSpec(VapiStruct):
    """
    This specification contains cluster network configuration.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nsxClusterSpec': 'nsx_cluster_spec',
                            'networkProfiles': 'network_profiles',
                            }

    def __init__(self,
                 nsx_cluster_spec=None,
                 network_profiles=None,
                ):
        """
        :type  nsx_cluster_spec: :class:`ClusterExpansionNsxSpec` or ``None``
        :param nsx_cluster_spec:         :type  network_profiles: :class:`list` of :class:`ClusterExpansionNetworkProfile` or ``None``
        :param network_profiles: The list of network profiles
        """
        self.nsx_cluster_spec = nsx_cluster_spec
        self.network_profiles = network_profiles
        VapiStruct.__init__(self)


ClusterExpansionNetworkSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_expansion_network_spec', {
        'nsxClusterSpec': type.OptionalType(type.ReferenceType(__name__, 'ClusterExpansionNsxSpec')),
        'networkProfiles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ClusterExpansionNetworkProfile'))),
    },
    ClusterExpansionNetworkSpec,
    False,
    None))



class ClusterExpansionNsxSpec(VapiStruct):
    """
    This specification contains NSX configuration for cluster expansion

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ipAddressPoolsSpec': 'ip_address_pools_spec',
                            'uplinkProfiles': 'uplink_profiles',
                            }

    def __init__(self,
                 ip_address_pools_spec=None,
                 uplink_profiles=None,
                ):
        """
        :type  ip_address_pools_spec: :class:`list` of :class:`IpAddressPoolSpec` or ``None``
        :param ip_address_pools_spec: The IP address pools specification
        :type  uplink_profiles: :class:`list` of :class:`UplinkProfile` or ``None``
        :param uplink_profiles: The list of uplink profile specifications.
        """
        self.ip_address_pools_spec = ip_address_pools_spec
        self.uplink_profiles = uplink_profiles
        VapiStruct.__init__(self)


ClusterExpansionNsxSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_expansion_nsx_spec', {
        'ipAddressPoolsSpec': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'IpAddressPoolSpec'))),
        'uplinkProfiles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'UplinkProfile'))),
    },
    ClusterExpansionNsxSpec,
    False,
    None))



class ClusterExpansionSpec(VapiStruct):
    """
    This specification contains the parameters required to add one or more
    vSphere hosts to an existing cluster in a workload domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hostSpecs': 'host_specs',
                            'networkSpec': 'network_spec',
                            'vsanNetworkSpecs': 'vsan_network_specs',
                            'witnessSpec': 'witness_spec',
                            'witnessTrafficSharedWithVsanTraffic': 'witness_traffic_shared_with_vsan_traffic',
                            'deployWithoutLicenseKeys': 'deploy_without_license_keys',
                            'interRackExpansion': 'inter_rack_expansion',
                            'forceHostAdditionInPresenceofDeadHosts': 'force_host_addition_in_presenceof_dead_hosts',
                            'skipThumbprintValidation': 'skip_thumbprint_validation',
                            }

    def __init__(self,
                 host_specs=None,
                 network_spec=None,
                 vsan_network_specs=None,
                 witness_spec=None,
                 witness_traffic_shared_with_vsan_traffic=None,
                 deploy_without_license_keys=None,
                 inter_rack_expansion=None,
                 force_host_addition_in_presenceof_dead_hosts=None,
                 skip_thumbprint_validation=None,
                ):
        """
        :type  host_specs: :class:`list` of :class:`HostSpec` or ``None``
        :param host_specs: List of vSphere host information from the free pool to consume in
            the workload domain
        :type  network_spec: :class:`ClusterExpansionNetworkSpec` or ``None``
        :param network_spec:         :type  vsan_network_specs: :class:`list` of :class:`VSANNetworkSpec` or ``None``
        :param vsan_network_specs: vSAN Network Pool Spec
        :type  witness_spec: :class:`WitnessSpec` or ``None``
        :param witness_spec:         :type  witness_traffic_shared_with_vsan_traffic: :class:`bool` or ``None``
        :param witness_traffic_shared_with_vsan_traffic: Witness traffic to be shared with vSAN traffic
        :type  deploy_without_license_keys: :class:`bool` or ``None``
        :param deploy_without_license_keys: Flag that indicates if the deployment should happen without license
            keys.
        :type  inter_rack_expansion: :class:`bool` or ``None``
        :param inter_rack_expansion: Is inter-rack cluster(true for L2 non-uniform and L3 : At least one
            of management, uplink, Edge and host TEP networks is different for
            hosts of the cluster, false for L2 uniform : All hosts in cluster
            have identical management, uplink, Edge and host TEP networks)
            expansion. Required, only if Cluster contains NSX Edge Cluster
        :type  force_host_addition_in_presenceof_dead_hosts: :class:`bool` or ``None``
        :param force_host_addition_in_presenceof_dead_hosts: Use to add host to a cluster with dead host(s). Bypasses validation
            of disconnected hosts and vSAN cluster health. Review recovery plan
            VMware Support before using. False if omitted. This property is
            deprecated and it has no effect when using it.
        :type  skip_thumbprint_validation: :class:`bool` or ``None``
        :param skip_thumbprint_validation: Skip thumbprint validation for ESXi hosts during add host
            operation. This property is deprecated.
        """
        self.host_specs = host_specs
        self.network_spec = network_spec
        self.vsan_network_specs = vsan_network_specs
        self.witness_spec = witness_spec
        self.witness_traffic_shared_with_vsan_traffic = witness_traffic_shared_with_vsan_traffic
        self.deploy_without_license_keys = deploy_without_license_keys
        self.inter_rack_expansion = inter_rack_expansion
        self.force_host_addition_in_presenceof_dead_hosts = force_host_addition_in_presenceof_dead_hosts
        self.skip_thumbprint_validation = skip_thumbprint_validation
        VapiStruct.__init__(self)


ClusterExpansionSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_expansion_spec', {
        'hostSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HostSpec'))),
        'networkSpec': type.OptionalType(type.ReferenceType(__name__, 'ClusterExpansionNetworkSpec')),
        'vsanNetworkSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VSANNetworkSpec'))),
        'witnessSpec': type.OptionalType(type.ReferenceType(__name__, 'WitnessSpec')),
        'witnessTrafficSharedWithVsanTraffic': type.OptionalType(type.BooleanType()),
        'deployWithoutLicenseKeys': type.OptionalType(type.BooleanType()),
        'interRackExpansion': type.OptionalType(type.BooleanType()),
        'forceHostAdditionInPresenceofDeadHosts': type.OptionalType(type.BooleanType()),
        'skipThumbprintValidation': type.OptionalType(type.BooleanType()),
    },
    ClusterExpansionSpec,
    False,
    None))



class ClusterImageComplianceCheckSpec(VapiStruct):
    """
    This specification contains parameters required to check compliance of a
    Cluster before transition to vSphere Lifecycle Manager Images

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'clusterImageId': 'cluster_image_id',
                            }

    def __init__(self,
                 cluster_image_id=None,
                ):
        """
        :type  cluster_image_id: :class:`str` or ``None``
        :param cluster_image_id: ID of the Cluster Image to be used with the Cluster
        """
        self.cluster_image_id = cluster_image_id
        VapiStruct.__init__(self)


ClusterImageComplianceCheckSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_image_compliance_check_spec', {
        'clusterImageId': type.OptionalType(type.StringType()),
    },
    ClusterImageComplianceCheckSpec,
    False,
    None))



class ClusterStretchNetworkSpec(VapiStruct):
    """
    This specification contains network configuration for stretiching a vSan
    Cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nsxClusterSpec': 'nsx_cluster_spec',
                            'networkProfiles': 'network_profiles',
                            }

    def __init__(self,
                 nsx_cluster_spec=None,
                 network_profiles=None,
                ):
        """
        :type  nsx_cluster_spec: :class:`NsxStretchClusterSpec` or ``None``
        :param nsx_cluster_spec:         :type  network_profiles: :class:`list` of :class:`StretchClusterNetworkProfile` or ``None``
        :param network_profiles: The network profile to be associated with Secondary AZ Hosts in
            NSX.
        """
        self.nsx_cluster_spec = nsx_cluster_spec
        self.network_profiles = network_profiles
        VapiStruct.__init__(self)


ClusterStretchNetworkSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_stretch_network_spec', {
        'nsxClusterSpec': type.OptionalType(type.ReferenceType(__name__, 'NsxStretchClusterSpec')),
        'networkProfiles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'StretchClusterNetworkProfile'))),
    },
    ClusterStretchNetworkSpec,
    False,
    None))



class ClusterStretchSpec(VapiStruct):
    """
    This spec contains the parameters required to convert a Standard vSAN
    cluster to a Stretched cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hostSpecs': 'host_specs',
                            'witnessSpec': 'witness_spec',
                            'witnessTrafficSharedWithVsanTraffic': 'witness_traffic_shared_with_vsan_traffic',
                            'vsanNetworkSpecs': 'vsan_network_specs',
                            'secondaryAzOverlayVlanId': 'secondary_az_overlay_vlan_id',
                            'networkSpec': 'network_spec',
                            'isEdgeClusterConfiguredForMultiAZ': 'is_edge_cluster_configured_for_multi_az',
                            'deployWithoutLicenseKeys': 'deploy_without_license_keys',
                            }

    def __init__(self,
                 host_specs=None,
                 witness_spec=None,
                 witness_traffic_shared_with_vsan_traffic=None,
                 vsan_network_specs=None,
                 secondary_az_overlay_vlan_id=None,
                 network_spec=None,
                 is_edge_cluster_configured_for_multi_az=None,
                 deploy_without_license_keys=None,
                ):
        """
        :type  host_specs: :class:`list` of :class:`HostSpec` or ``None``
        :param host_specs: List of vSphere host information from the free pool to consume in
            the workload domain
        :type  witness_spec: :class:`WitnessSpec` or ``None``
        :param witness_spec:         :type  witness_traffic_shared_with_vsan_traffic: :class:`bool` or ``None``
        :param witness_traffic_shared_with_vsan_traffic: Witness traffic to be shared with vSAN traffic
        :type  vsan_network_specs: :class:`list` of :class:`VSANNetworkSpec` or ``None``
        :param vsan_network_specs: vSAN Network Pool Specs
        :type  secondary_az_overlay_vlan_id: :class:`long` or ``None``
        :param secondary_az_overlay_vlan_id: Secondary AZ Overlay Vlan Id. This field is deprecated. The
            secondary AZ overlay vlan id should be mentioned in the
            uplinkProfile field instead
        :type  network_spec: :class:`ClusterStretchNetworkSpec` or ``None``
        :param network_spec:         :type  is_edge_cluster_configured_for_multi_az: :class:`bool` or ``None``
        :param is_edge_cluster_configured_for_multi_az: Edge cluster configured for multi AZ
        :type  deploy_without_license_keys: :class:`bool` or ``None``
        :param deploy_without_license_keys: Flag that indicates if the deployment should happen without license
            keys.
        """
        self.host_specs = host_specs
        self.witness_spec = witness_spec
        self.witness_traffic_shared_with_vsan_traffic = witness_traffic_shared_with_vsan_traffic
        self.vsan_network_specs = vsan_network_specs
        self.secondary_az_overlay_vlan_id = secondary_az_overlay_vlan_id
        self.network_spec = network_spec
        self.is_edge_cluster_configured_for_multi_az = is_edge_cluster_configured_for_multi_az
        self.deploy_without_license_keys = deploy_without_license_keys
        VapiStruct.__init__(self)


ClusterStretchSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_stretch_spec', {
        'hostSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HostSpec'))),
        'witnessSpec': type.OptionalType(type.ReferenceType(__name__, 'WitnessSpec')),
        'witnessTrafficSharedWithVsanTraffic': type.OptionalType(type.BooleanType()),
        'vsanNetworkSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VSANNetworkSpec'))),
        'secondaryAzOverlayVlanId': type.OptionalType(type.IntegerType()),
        'networkSpec': type.OptionalType(type.ReferenceType(__name__, 'ClusterStretchNetworkSpec')),
        'isEdgeClusterConfiguredForMultiAZ': type.OptionalType(type.BooleanType()),
        'deployWithoutLicenseKeys': type.OptionalType(type.BooleanType()),
    },
    ClusterStretchSpec,
    False,
    None))



class ClusterTransitionSpec(VapiStruct):
    """
    This specification contains parameters required to transition a Cluster to
    vSphere Lifecycle Manager Images

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'remediationOptionsSpec': 'remediation_options_spec',
                            }

    def __init__(self,
                 remediation_options_spec=None,
                ):
        """
        :type  remediation_options_spec: :class:`RemediationOptionsSpec` or ``None``
        :param remediation_options_spec:         """
        self.remediation_options_spec = remediation_options_spec
        VapiStruct.__init__(self)


ClusterTransitionSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_transition_spec', {
        'remediationOptionsSpec': type.OptionalType(type.ReferenceType(__name__, 'RemediationOptionsSpec')),
    },
    ClusterTransitionSpec,
    False,
    None))



class ClusterUnstretchSpec(VapiStruct):
    """
    This spec contains the parameters required to convert a Stretched cluster
    to a Standard vSAN cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """




    def __init__(self,
                ):
        """
        """
        VapiStruct.__init__(self)


ClusterUnstretchSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_unstretch_spec', {
    },
    ClusterUnstretchSpec,
    False,
    None))



class ClusterUpdateSpec(VapiStruct):
    """
    Cluster Update Data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'clusterExpansionSpec': 'cluster_expansion_spec',
                            'clusterCompactionSpec': 'cluster_compaction_spec',
                            'clusterStretchSpec': 'cluster_stretch_spec',
                            'clusterUnstretchSpec': 'cluster_unstretch_spec',
                            'markForDeletion': 'mark_for_deletion',
                            'prepareForStretch': 'prepare_for_stretch',
                            'clusterTransitionSpec': 'cluster_transition_spec',
                            'clusterImageComplianceCheckSpec': 'cluster_image_compliance_check_spec',
                            }

    def __init__(self,
                 name=None,
                 cluster_expansion_spec=None,
                 cluster_compaction_spec=None,
                 cluster_stretch_spec=None,
                 cluster_unstretch_spec=None,
                 mark_for_deletion=None,
                 prepare_for_stretch=None,
                 cluster_transition_spec=None,
                 cluster_image_compliance_check_spec=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Cluster Name
        :type  cluster_expansion_spec: :class:`ClusterExpansionSpec` or ``None``
        :param cluster_expansion_spec:         :type  cluster_compaction_spec: :class:`ClusterCompactionSpec` or ``None``
        :param cluster_compaction_spec:         :type  cluster_stretch_spec: :class:`ClusterStretchSpec` or ``None``
        :param cluster_stretch_spec:         :type  cluster_unstretch_spec: :class:`ClusterUnstretchSpec` or ``None``
        :param cluster_unstretch_spec:         :type  mark_for_deletion: :class:`bool` or ``None``
        :param mark_for_deletion: Prepare the cluster for deletion
        :type  prepare_for_stretch: :class:`bool` or ``None``
        :param prepare_for_stretch: Prepare the cluster for stretch
        :type  cluster_transition_spec: :class:`ClusterTransitionSpec` or ``None``
        :param cluster_transition_spec:         :type  cluster_image_compliance_check_spec: :class:`ClusterImageComplianceCheckSpec` or ``None``
        :param cluster_image_compliance_check_spec:         """
        self.name = name
        self.cluster_expansion_spec = cluster_expansion_spec
        self.cluster_compaction_spec = cluster_compaction_spec
        self.cluster_stretch_spec = cluster_stretch_spec
        self.cluster_unstretch_spec = cluster_unstretch_spec
        self.mark_for_deletion = mark_for_deletion
        self.prepare_for_stretch = prepare_for_stretch
        self.cluster_transition_spec = cluster_transition_spec
        self.cluster_image_compliance_check_spec = cluster_image_compliance_check_spec
        VapiStruct.__init__(self)


ClusterUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_update_spec', {
        'name': type.OptionalType(type.StringType()),
        'clusterExpansionSpec': type.OptionalType(type.ReferenceType(__name__, 'ClusterExpansionSpec')),
        'clusterCompactionSpec': type.OptionalType(type.ReferenceType(__name__, 'ClusterCompactionSpec')),
        'clusterStretchSpec': type.OptionalType(type.ReferenceType(__name__, 'ClusterStretchSpec')),
        'clusterUnstretchSpec': type.OptionalType(type.ReferenceType(__name__, 'ClusterUnstretchSpec')),
        'markForDeletion': type.OptionalType(type.BooleanType()),
        'prepareForStretch': type.OptionalType(type.BooleanType()),
        'clusterTransitionSpec': type.OptionalType(type.ReferenceType(__name__, 'ClusterTransitionSpec')),
        'clusterImageComplianceCheckSpec': type.OptionalType(type.ReferenceType(__name__, 'ClusterImageComplianceCheckSpec')),
    },
    ClusterUpdateSpec,
    False,
    None))



class NsxStretchClusterSpec(VapiStruct):
    """
    This specification contains NSX configuration for Secondary AZ Hosts

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ipAddressPoolsSpec': 'ip_address_pools_spec',
                            'uplinkProfiles': 'uplink_profiles',
                            }

    def __init__(self,
                 ip_address_pools_spec=None,
                 uplink_profiles=None,
                ):
        """
        :type  ip_address_pools_spec: :class:`list` of :class:`IpAddressPoolSpec` or ``None``
        :param ip_address_pools_spec: The IP address pool specifications
        :type  uplink_profiles: :class:`list` of :class:`UplinkProfile` or ``None``
        :param uplink_profiles: The list of uplink profile specifications.
        """
        self.ip_address_pools_spec = ip_address_pools_spec
        self.uplink_profiles = uplink_profiles
        VapiStruct.__init__(self)


NsxStretchClusterSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsx_stretch_cluster_spec', {
        'ipAddressPoolsSpec': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'IpAddressPoolSpec'))),
        'uplinkProfiles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'UplinkProfile'))),
    },
    NsxStretchClusterSpec,
    False,
    None))



class RemediationFailureAction(VapiStruct):
    """
    Action to be taken if entering maintenance mode fails for a host during
    cluster remediation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'retryDelay': 'retry_delay',
                            'retryCount': 'retry_count',
                            'action': 'action',
                            }

    def __init__(self,
                 retry_delay=None,
                 retry_count=None,
                 action=None,
                ):
        """
        :type  retry_delay: :class:`long` or ``None``
        :param retry_delay: Time to wait before we retry the failed operation in seconds. If
            action is RETRY, the value should be between 300 and 3600 seconds.
            If action is FAIL, the value should not be set.
        :type  retry_count: :class:`long` or ``None``
        :param retry_count: Number of times to retry the failed operation. If the action is
            RETRY, the value should be between 3 and 100. If the action is
            FAIL, the value should not be set.
        :type  action: :class:`str` or ``None``
        :param action: Action to be taken if entering maintenance mode fails for a host
        """
        self.retry_delay = retry_delay
        self.retry_count = retry_count
        self.action = action
        VapiStruct.__init__(self)


RemediationFailureAction._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.remediation_failure_action', {
        'retryDelay': type.OptionalType(type.IntegerType()),
        'retryCount': type.OptionalType(type.IntegerType()),
        'action': type.OptionalType(type.StringType()),
    },
    RemediationFailureAction,
    False,
    None))



class RemediationOptionsSpec(VapiStruct):
    """
    Options for cluster remediation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'remediationFailureAction': 'remediation_failure_action',
                            'enableQuickboot': 'enable_quickboot',
                            'evacuateOfflineVms': 'evacuate_offline_vms',
                            'disableHac': 'disable_hac',
                            'disableDpm': 'disable_dpm',
                            'preRemediationPowerAction': 'pre_remediation_power_action',
                            }

    def __init__(self,
                 remediation_failure_action=None,
                 enable_quickboot=None,
                 evacuate_offline_vms=None,
                 disable_hac=None,
                 disable_dpm=None,
                 pre_remediation_power_action=None,
                ):
        """
        :type  remediation_failure_action: :class:`RemediationFailureAction` or ``None``
        :param remediation_failure_action:         :type  enable_quickboot: :class:`bool` or ``None``
        :param enable_quickboot: Flag for requesting Quick Boot
        :type  evacuate_offline_vms: :class:`bool` or ``None``
        :param evacuate_offline_vms: Flag for requesting Evacuation of Offline VMs
        :type  disable_hac: :class:`bool` or ``None``
        :param disable_hac: Flag for disabling HA admission control on the cluster.
        :type  disable_dpm: :class:`bool` or ``None``
        :param disable_dpm: Flag for disabling DPM on the cluster.
        :type  pre_remediation_power_action: :class:`str` or ``None``
        :param pre_remediation_power_action: Flag for setting VM power state before entering maintenance mode.
        """
        self.remediation_failure_action = remediation_failure_action
        self.enable_quickboot = enable_quickboot
        self.evacuate_offline_vms = evacuate_offline_vms
        self.disable_hac = disable_hac
        self.disable_dpm = disable_dpm
        self.pre_remediation_power_action = pre_remediation_power_action
        VapiStruct.__init__(self)


RemediationOptionsSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.remediation_options_spec', {
        'remediationFailureAction': type.OptionalType(type.ReferenceType(__name__, 'RemediationFailureAction')),
        'enableQuickboot': type.OptionalType(type.BooleanType()),
        'evacuateOfflineVms': type.OptionalType(type.BooleanType()),
        'disableHac': type.OptionalType(type.BooleanType()),
        'disableDpm': type.OptionalType(type.BooleanType()),
        'preRemediationPowerAction': type.OptionalType(type.StringType()),
    },
    RemediationOptionsSpec,
    False,
    None))



class StretchClusterNetworkProfile(VapiStruct):
    """
    This specification contains the host switch configurations for the NSX
    transport nodes belonging to Secondary AZ.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'description': 'description',
                            'nsxtHostSwitchConfigs': 'nsxt_host_switch_configs',
                            }

    def __init__(self,
                 name=None,
                 description=None,
                 nsxt_host_switch_configs=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: The network profile name
        :type  description: :class:`str` or ``None``
        :param description: The network profile description
        :type  nsxt_host_switch_configs: :class:`list` of :class:`NsxtHostSwitchConfig` or ``None``
        :param nsxt_host_switch_configs: The list of NSX host switch configurations
        """
        self.name = name
        self.description = description
        self.nsxt_host_switch_configs = nsxt_host_switch_configs
        VapiStruct.__init__(self)


StretchClusterNetworkProfile._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.stretch_cluster_network_profile', {
        'name': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'nsxtHostSwitchConfigs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtHostSwitchConfig'))),
    },
    StretchClusterNetworkProfile,
    False,
    None))



class VSANNetworkSpec(VapiStruct):
    """
    Contains the vSAN Network details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vsanGatewayIP': 'vsan_gateway_ip',
                            'vsanCidr': 'vsan_cidr',
                            }

    def __init__(self,
                 vsan_gateway_ip=None,
                 vsan_cidr=None,
                ):
        """
        :type  vsan_gateway_ip: :class:`str` or ``None``
        :param vsan_gateway_ip: vSAN Gateway IP of the ESXi host
        :type  vsan_cidr: :class:`str` or ``None``
        :param vsan_cidr: vSAN subnet cidr of the ESXi host
        """
        self.vsan_gateway_ip = vsan_gateway_ip
        self.vsan_cidr = vsan_cidr
        VapiStruct.__init__(self)


VSANNetworkSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.VSAN_network_spec', {
        'vsanGatewayIP': type.OptionalType(type.StringType()),
        'vsanCidr': type.OptionalType(type.StringType()),
    },
    VSANNetworkSpec,
    False,
    None))



class WitnessSpec(VapiStruct):
    """
    Spec contains the Witness host parameters that are part of each stretched
    cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vsanIp': 'vsan_ip',
                            'fqdn': 'fqdn',
                            'vsanCidr': 'vsan_cidr',
                            }

    def __init__(self,
                 vsan_ip=None,
                 fqdn=None,
                 vsan_cidr=None,
                ):
        """
        :type  vsan_ip: :class:`str` or ``None``
        :param vsan_ip: vSAN IP of the witness host
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: Management ip of the witness host
        :type  vsan_cidr: :class:`str` or ``None``
        :param vsan_cidr: vSAN subnet cidr of the witness host
        """
        self.vsan_ip = vsan_ip
        self.fqdn = fqdn
        self.vsan_cidr = vsan_cidr
        VapiStruct.__init__(self)


WitnessSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.witness_spec', {
        'vsanIp': type.OptionalType(type.StringType()),
        'fqdn': type.OptionalType(type.StringType()),
        'vsanCidr': type.OptionalType(type.StringType()),
    },
    WitnessSpec,
    False,
    None))



class ClusterNetworkConfiguration(VapiStruct):
    """
    Represents the cluster network configuration.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hostDetails': 'host_details',
                            'vdsConfigurations': 'vds_configurations',
                            'nonVcfCreatedVds': 'non_vcf_created_vds',
                            'ipAddressPools': 'ip_address_pools',
                            'uplinkProfiles': 'uplink_profiles',
                            'networkProfiles': 'network_profiles',
                            }

    def __init__(self,
                 host_details=None,
                 vds_configurations=None,
                 non_vcf_created_vds=None,
                 ip_address_pools=None,
                 uplink_profiles=None,
                 network_profiles=None,
                ):
        """
        :type  host_details: :class:`list` of :class:`HostDetail` or ``None``
        :param host_details: List of host details
        :type  vds_configurations: :class:`list` of :class:`VdsConfiguration` or ``None``
        :param vds_configurations: List of VDS configuration
        :type  non_vcf_created_vds: :class:`list` of :class:`str` or ``None``
        :param non_vcf_created_vds: List of VDS names that is not present in VCF inventory
        :type  ip_address_pools: :class:`list` of :class:`NsxtIpAddressPool` or ``None``
        :param ip_address_pools: List of IP address pool configuration
        :type  uplink_profiles: :class:`list` of :class:`UplinkProfile` or ``None``
        :param uplink_profiles: List of uplink profile configuration
        :type  network_profiles: :class:`list` of :class:`NetworkProfileConfiguration` or ``None``
        :param network_profiles: List of network profiles
        """
        self.host_details = host_details
        self.vds_configurations = vds_configurations
        self.non_vcf_created_vds = non_vcf_created_vds
        self.ip_address_pools = ip_address_pools
        self.uplink_profiles = uplink_profiles
        self.network_profiles = network_profiles
        VapiStruct.__init__(self)


ClusterNetworkConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_network_configuration', {
        'hostDetails': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HostDetail'))),
        'vdsConfigurations': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VdsConfiguration'))),
        'nonVcfCreatedVds': type.OptionalType(type.ListType(type.StringType())),
        'ipAddressPools': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtIpAddressPool'))),
        'uplinkProfiles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'UplinkProfile'))),
        'networkProfiles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NetworkProfileConfiguration'))),
    },
    ClusterNetworkConfiguration,
    False,
    None))



class ClusterNetworkConfigurationQueryResponse(VapiStruct):
    """
    Represents the cluster network configuration query response.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'queryInfo': 'query_info',
                            'result': 'result',
                            }

    def __init__(self,
                 query_info=None,
                 result=None,
                ):
        """
        :type  query_info: :class:`QueryInfo` or ``None``
        :param query_info:         :type  result: :class:`PageClusterNetworkConfiguration` or ``None``
        :param result:         """
        self.query_info = query_info
        self.result = result
        VapiStruct.__init__(self)


ClusterNetworkConfigurationQueryResponse._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_network_configuration_query_response', {
        'queryInfo': type.OptionalType(type.ReferenceType(__name__, 'QueryInfo')),
        'result': type.OptionalType(type.ReferenceType(__name__, 'PageClusterNetworkConfiguration')),
    },
    ClusterNetworkConfigurationQueryResponse,
    False,
    None))



class HostDetail(VapiStruct):
    """
    Host Configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'hostName': 'host_name',
                            'hostNetworkConfiguration': 'host_network_configuration',
                            'azName': 'az_name',
                            }

    def __init__(self,
                 id=None,
                 host_name=None,
                 host_network_configuration=None,
                 az_name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the host
        :type  host_name: :class:`str` or ``None``
        :param host_name: Host name of the vSphere host
        :type  host_network_configuration: :class:`HostNetworkConfiguration` or ``None``
        :param host_network_configuration:         :type  az_name: :class:`str` or ``None``
        :param az_name: Availability zone to which the host belongs when the cluster is
            stretched
        """
        self.id = id
        self.host_name = host_name
        self.host_network_configuration = host_network_configuration
        self.az_name = az_name
        VapiStruct.__init__(self)


HostDetail._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_detail', {
        'id': type.OptionalType(type.StringType()),
        'hostName': type.OptionalType(type.StringType()),
        'hostNetworkConfiguration': type.OptionalType(type.ReferenceType(__name__, 'HostNetworkConfiguration')),
        'azName': type.OptionalType(type.StringType()),
    },
    HostDetail,
    False,
    None))



class HostNetworkConfiguration(VapiStruct):
    """
    Host Network Configuration.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vmNics': 'vm_nics',
                            'networkProfileName': 'network_profile_name',
                            }

    def __init__(self,
                 vm_nics=None,
                 network_profile_name=None,
                ):
        """
        :type  vm_nics: :class:`list` of :class:`HostVmnicUplinkConfiguration` or ``None``
        :param vm_nics: Vmnic-Uplink configuration of the vSphere host
        :type  network_profile_name: :class:`str` or ``None``
        :param network_profile_name: The network profile associated with the Host
        """
        self.vm_nics = vm_nics
        self.network_profile_name = network_profile_name
        VapiStruct.__init__(self)


HostNetworkConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_network_configuration', {
        'vmNics': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HostVmnicUplinkConfiguration'))),
        'networkProfileName': type.OptionalType(type.StringType()),
    },
    HostNetworkConfiguration,
    False,
    None))



class HostVmnicUplinkConfiguration(VapiStruct):
    """
    This specification contains vmnic-uplink network configuration of host in a
    cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'vdsName': 'vds_name',
                            'uplink': 'uplink',
                            }

    def __init__(self,
                 id=None,
                 vds_name=None,
                 uplink=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: VmNic ID
        :type  vds_name: :class:`str` or ``None``
        :param vds_name: VDS name
        :type  uplink: :class:`str` or ``None``
        :param uplink: Uplink of the VDS associated with the vmnic
        """
        self.id = id
        self.vds_name = vds_name
        self.uplink = uplink
        VapiStruct.__init__(self)


HostVmnicUplinkConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_vmnic_uplink_configuration', {
        'id': type.OptionalType(type.StringType()),
        'vdsName': type.OptionalType(type.StringType()),
        'uplink': type.OptionalType(type.StringType()),
    },
    HostVmnicUplinkConfiguration,
    False,
    None))



class InventoryMismatchInfo(VapiStruct):
    """
    Represents the inventory mismatch info.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'inventoryObjects': 'inventory_objects',
                            }

    def __init__(self,
                 type=None,
                 inventory_objects=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: Inventory mismatch type 
            
            * Property is read-only.
            
            
        :type  inventory_objects: :class:`list` of :class:`str` or ``None``
        :param inventory_objects: Inventory object names associated with the mismatch
        """
        self.type = type
        self.inventory_objects = inventory_objects
        VapiStruct.__init__(self)


InventoryMismatchInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.inventory_mismatch_info', {
        'type': type.OptionalType(type.StringType()),
        'inventoryObjects': type.OptionalType(type.ListType(type.StringType())),
    },
    InventoryMismatchInfo,
    False,
    None))



class Lag(VapiStruct):
    """
    vSphere distributed switch LAG

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'uplinksCount': 'uplinks_count',
                            'lacpMode': 'lacp_mode',
                            'loadBalancingMode': 'load_balancing_mode',
                            'lacpTimeoutMode': 'lacp_timeout_mode',
                            }

    def __init__(self,
                 name=None,
                 uplinks_count=None,
                 lacp_mode=None,
                 load_balancing_mode=None,
                 lacp_timeout_mode=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: LAG name
        :type  uplinks_count: :class:`long` or ``None``
        :param uplinks_count: Number of uplinks/ports in this LAG
        :type  lacp_mode: :class:`str` or ``None``
        :param lacp_mode: LACP mode of this LAG
        :type  load_balancing_mode: :class:`str` or ``None``
        :param load_balancing_mode: Load balancing mode of this LAG
        :type  lacp_timeout_mode: :class:`str` or ``None``
        :param lacp_timeout_mode: LACP timeout mode of this LAG
        """
        self.name = name
        self.uplinks_count = uplinks_count
        self.lacp_mode = lacp_mode
        self.load_balancing_mode = load_balancing_mode
        self.lacp_timeout_mode = lacp_timeout_mode
        VapiStruct.__init__(self)


Lag._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.lag', {
        'name': type.OptionalType(type.StringType()),
        'uplinksCount': type.OptionalType(type.IntegerType()),
        'lacpMode': type.OptionalType(type.StringType()),
        'loadBalancingMode': type.OptionalType(type.StringType()),
        'lacpTimeoutMode': type.OptionalType(type.StringType()),
    },
    Lag,
    False,
    None))



class NetworkProfileConfiguration(VapiStruct):
    """
    This configuration contains the host switch configurations for the NSX
    transport node.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'isDefault': 'is_default',
                            'nsxtHostSwitchConfigs': 'nsxt_host_switch_configs',
                            }

    def __init__(self,
                 name=None,
                 is_default=None,
                 nsxt_host_switch_configs=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: The network profile name
        :type  is_default: :class:`bool` or ``None``
        :param is_default: Flag that denotes if the profile is default or not
        :type  nsxt_host_switch_configs: :class:`list` of :class:`NsxtHostSwitchConfiguration` or ``None``
        :param nsxt_host_switch_configs: The list of NSX host switch configurations
        """
        self.name = name
        self.is_default = is_default
        self.nsxt_host_switch_configs = nsxt_host_switch_configs
        VapiStruct.__init__(self)


NetworkProfileConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.network_profile_configuration', {
        'name': type.OptionalType(type.StringType()),
        'isDefault': type.OptionalType(type.BooleanType()),
        'nsxtHostSwitchConfigs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtHostSwitchConfiguration'))),
    },
    NetworkProfileConfiguration,
    False,
    None))



class NsxtHostSwitchConfiguration(VapiStruct):
    """
    The configurations to be applied on the Host switch.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vdsName': 'vds_name',
                            'uplinkProfileName': 'uplink_profile_name',
                            'ipAddressPoolName': 'ip_address_pool_name',
                            'vdsUplinkToNsxUplink': 'vds_uplink_to_nsx_uplink',
                            }

    def __init__(self,
                 vds_name=None,
                 uplink_profile_name=None,
                 ip_address_pool_name=None,
                 vds_uplink_to_nsx_uplink=None,
                ):
        """
        :type  vds_name: :class:`str` or ``None``
        :param vds_name: The name of the vSphere Distributed Switch
        :type  uplink_profile_name: :class:`str` or ``None``
        :param uplink_profile_name: The name of the uplink profile
        :type  ip_address_pool_name: :class:`str` or ``None``
        :param ip_address_pool_name: The IP address Pool name. For DHCP, this field will be empty
        :type  vds_uplink_to_nsx_uplink: :class:`list` of :class:`VdsUplinkToNsxUplinkConfiguration` or ``None``
        :param vds_uplink_to_nsx_uplink: The map of vSphere Distributed Switch uplinks to the NSX switch
            uplinks.
        """
        self.vds_name = vds_name
        self.uplink_profile_name = uplink_profile_name
        self.ip_address_pool_name = ip_address_pool_name
        self.vds_uplink_to_nsx_uplink = vds_uplink_to_nsx_uplink
        VapiStruct.__init__(self)


NsxtHostSwitchConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_host_switch_configuration', {
        'vdsName': type.OptionalType(type.StringType()),
        'uplinkProfileName': type.OptionalType(type.StringType()),
        'ipAddressPoolName': type.OptionalType(type.StringType()),
        'vdsUplinkToNsxUplink': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VdsUplinkToNsxUplinkConfiguration'))),
    },
    NsxtHostSwitchConfiguration,
    False,
    None))



class NsxtIpAddressPool(VapiStruct):
    """
    NSX IP address pool representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'description': 'description',
                            'availableIpAddresses': 'available_ip_addresses',
                            'totalIpAddresses': 'total_ip_addresses',
                            'blockSubnets': 'block_subnets',
                            'staticSubnets': 'static_subnets',
                            }

    def __init__(self,
                 name=None,
                 description=None,
                 available_ip_addresses=None,
                 total_ip_addresses=None,
                 block_subnets=None,
                 static_subnets=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the IP address pool 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description of the IP address pool 
            
            * Property is read-only.
            
            
        :type  available_ip_addresses: :class:`long` or ``None``
        :param available_ip_addresses: The number of IP addresses available in the IP address pool 
            
            * Property is read-only.
            
            
        :type  total_ip_addresses: :class:`long` or ``None``
        :param total_ip_addresses: The total number of IP addresses in the IP address pool 
            
            * Property is read-only.
            
            
        :type  block_subnets: :class:`list` of :class:`NsxtIpAddressPoolBlockSubnet` or ``None``
        :param block_subnets: The list of IP address pool block subnets 
            
            * Property is read-only.
            
            
        :type  static_subnets: :class:`list` of :class:`NsxtIpAddressPoolStaticSubnet` or ``None``
        :param static_subnets: The list of IP address pool static subnets 
            
            * Property is read-only.
            
            
        """
        self.name = name
        self.description = description
        self.available_ip_addresses = available_ip_addresses
        self.total_ip_addresses = total_ip_addresses
        self.block_subnets = block_subnets
        self.static_subnets = static_subnets
        VapiStruct.__init__(self)


NsxtIpAddressPool._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_ip_address_pool', {
        'name': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'availableIpAddresses': type.OptionalType(type.IntegerType()),
        'totalIpAddresses': type.OptionalType(type.IntegerType()),
        'blockSubnets': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtIpAddressPoolBlockSubnet'))),
        'staticSubnets': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtIpAddressPoolStaticSubnet'))),
    },
    NsxtIpAddressPool,
    False,
    None))



class NsxtIpAddressPoolBlockSubnet(VapiStruct):
    """
    NSX IP address pool block subnet representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'size': 'size',
                            'gatewayAssigned': 'gateway_assigned',
                            'cidr': 'cidr',
                            }

    def __init__(self,
                 size=None,
                 gateway_assigned=None,
                 cidr=None,
                ):
        """
        :type  size: :class:`long` or ``None``
        :param size: The size of the IP address block 
            
            * Property is read-only.
            
            
        :type  gateway_assigned: :class:`bool` or ``None``
        :param gateway_assigned: The boolean representing the state of the gateway assignment 
            
            * Property is read-only.
            
            
        :type  cidr: :class:`str` or ``None``
        :param cidr: The CIDR of the IP address subnet 
            
            * Property is read-only.
            
            
        """
        self.size = size
        self.gateway_assigned = gateway_assigned
        self.cidr = cidr
        VapiStruct.__init__(self)


NsxtIpAddressPoolBlockSubnet._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_ip_address_pool_block_subnet', {
        'size': type.OptionalType(type.IntegerType()),
        'gatewayAssigned': type.OptionalType(type.BooleanType()),
        'cidr': type.OptionalType(type.StringType()),
    },
    NsxtIpAddressPoolBlockSubnet,
    False,
    None))



class NsxtIpAddressPoolRange(VapiStruct):
    """
    NSX IP address pool range representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'start': 'start',
                            'end': 'end',
                            }

    def __init__(self,
                 start=None,
                 end=None,
                ):
        """
        :type  start: :class:`str` or ``None``
        :param start: The start of the IP address range 
            
            * Property is read-only.
            
            
        :type  end: :class:`str` or ``None``
        :param end: The end of the IP address range 
            
            * Property is read-only.
            
            
        """
        self.start = start
        self.end = end
        VapiStruct.__init__(self)


NsxtIpAddressPoolRange._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_ip_address_pool_range', {
        'start': type.OptionalType(type.StringType()),
        'end': type.OptionalType(type.StringType()),
    },
    NsxtIpAddressPoolRange,
    False,
    None))



class NsxtIpAddressPoolStaticSubnet(VapiStruct):
    """
    NSX IP address pool static subnet representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ipAddressPoolRanges': 'ip_address_pool_ranges',
                            'gateway': 'gateway',
                            'cidr': 'cidr',
                            }

    def __init__(self,
                 ip_address_pool_ranges=None,
                 gateway=None,
                 cidr=None,
                ):
        """
        :type  ip_address_pool_ranges: :class:`list` of :class:`NsxtIpAddressPoolRange` or ``None``
        :param ip_address_pool_ranges: The list of IP address ranges 
            
            * Property is read-only.
            
            
        :type  gateway: :class:`str` or ``None``
        :param gateway: The gateway IP address 
            
            * Property is read-only.
            
            
        :type  cidr: :class:`str` or ``None``
        :param cidr: The CIDR of the IP address subnet 
            
            * Property is read-only.
            
            
        """
        self.ip_address_pool_ranges = ip_address_pool_ranges
        self.gateway = gateway
        self.cidr = cidr
        VapiStruct.__init__(self)


NsxtIpAddressPoolStaticSubnet._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_ip_address_pool_static_subnet', {
        'ipAddressPoolRanges': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtIpAddressPoolRange'))),
        'gateway': type.OptionalType(type.StringType()),
        'cidr': type.OptionalType(type.StringType()),
    },
    NsxtIpAddressPoolStaticSubnet,
    False,
    None))



class PageClusterNetworkConfiguration(VapiStruct):
    """
    Represents a page of elements of a single type

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`ClusterNetworkConfiguration` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageClusterNetworkConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_cluster_network_configuration', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ClusterNetworkConfiguration'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageClusterNetworkConfiguration,
    False,
    None))



class PortgroupConfig(VapiStruct):
    """
    This specification contains the network configuration in a port group.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'transportType': 'transport_type',
                            'activeUplinks': 'active_uplinks',
                            'standByUplinks': 'stand_by_uplinks',
                            'policy': 'policy',
                            'supportedTeamingPolicies': 'supported_teaming_policies',
                            'vlanId': 'vlan_id',
                            'mtu': 'mtu',
                            }

    def __init__(self,
                 name=None,
                 transport_type=None,
                 active_uplinks=None,
                 stand_by_uplinks=None,
                 policy=None,
                 supported_teaming_policies=None,
                 vlan_id=None,
                 mtu=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Port group name
        :type  transport_type: :class:`str` or ``None``
        :param transport_type: Port group transport type
        :type  active_uplinks: :class:`list` of :class:`str` or ``None``
        :param active_uplinks: List of active uplinks associated with port group
        :type  stand_by_uplinks: :class:`list` of :class:`str` or ``None``
        :param stand_by_uplinks: List of standby uplinks associated with port group
        :type  policy: :class:`str` or ``None``
        :param policy: The load balancing policy associated with port group
        :type  supported_teaming_policies: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param supported_teaming_policies: List of supported teaming policies at port group
        :type  vlan_id: :class:`long` or ``None``
        :param vlan_id: The vlan id associated with the port group
        :type  mtu: :class:`long` or ``None``
        :param mtu: The maximum transmission unit (MTU) used for the uplinks associated
            with the port group
        """
        self.name = name
        self.transport_type = transport_type
        self.active_uplinks = active_uplinks
        self.stand_by_uplinks = stand_by_uplinks
        self.policy = policy
        self.supported_teaming_policies = supported_teaming_policies
        self.vlan_id = vlan_id
        self.mtu = mtu
        VapiStruct.__init__(self)


PortgroupConfig._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.portgroup_config', {
        'name': type.OptionalType(type.StringType()),
        'transportType': type.OptionalType(type.StringType()),
        'activeUplinks': type.OptionalType(type.ListType(type.StringType())),
        'standByUplinks': type.OptionalType(type.ListType(type.StringType())),
        'policy': type.OptionalType(type.StringType()),
        'supportedTeamingPolicies': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
        'vlanId': type.OptionalType(type.IntegerType()),
        'mtu': type.OptionalType(type.IntegerType()),
    },
    PortgroupConfig,
    False,
    None))



class VdsConfiguration(VapiStruct):
    """
    The vSphere Distributed Switch network configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'portGroups': 'port_groups',
                            'nsxtSwitchConfig': 'nsxt_switch_config',
                            'inventoryMismatchInfo': 'inventory_mismatch_info',
                            'uplinks': 'uplinks',
                            'mtu': 'mtu',
                            'lags': 'lags',
                            }

    def __init__(self,
                 name=None,
                 port_groups=None,
                 nsxt_switch_config=None,
                 inventory_mismatch_info=None,
                 uplinks=None,
                 mtu=None,
                 lags=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: vSphere Distributed Switch name
        :type  port_groups: :class:`list` of :class:`PortgroupConfig` or ``None``
        :param port_groups: List of portgroup configuration associated with the vSphere
            Distributed Switch
        :type  nsxt_switch_config: :class:`NsxtSwitchConfig` or ``None``
        :param nsxt_switch_config:         :type  inventory_mismatch_info: :class:`list` of :class:`InventoryMismatchInfo` or ``None``
        :param inventory_mismatch_info: Inventory mismatch levels
        :type  uplinks: :class:`list` of :class:`str` or ``None``
        :param uplinks: Uplinks used by vSphere Distributed Switch
        :type  mtu: :class:`long` or ``None``
        :param mtu: The maximum transmission unit (MTU) configured for the uplinks
        :type  lags: :class:`list` of :class:`Lag` or ``None``
        :param lags: List of LAGs associated with the vSphere Distributed Switch
        """
        self.name = name
        self.port_groups = port_groups
        self.nsxt_switch_config = nsxt_switch_config
        self.inventory_mismatch_info = inventory_mismatch_info
        self.uplinks = uplinks
        self.mtu = mtu
        self.lags = lags
        VapiStruct.__init__(self)


VdsConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vds_configuration', {
        'name': type.OptionalType(type.StringType()),
        'portGroups': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'PortgroupConfig'))),
        'nsxtSwitchConfig': type.OptionalType(type.ReferenceType(__name__, 'NsxtSwitchConfig')),
        'inventoryMismatchInfo': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'InventoryMismatchInfo'))),
        'uplinks': type.OptionalType(type.ListType(type.StringType())),
        'mtu': type.OptionalType(type.IntegerType()),
        'lags': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Lag'))),
    },
    VdsConfiguration,
    False,
    None))



class VdsUplinkToNsxUplinkConfiguration(VapiStruct):
    """
    The map of vSphere Distributed Switch uplinks to the NSX switch uplinks.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vdsUplinkName': 'vds_uplink_name',
                            'nsxUplinkName': 'nsx_uplink_name',
                            }

    def __init__(self,
                 vds_uplink_name=None,
                 nsx_uplink_name=None,
                ):
        """
        :type  vds_uplink_name: :class:`str` or ``None``
        :param vds_uplink_name: The uplink name of the vSphere Distributed Switch
        :type  nsx_uplink_name: :class:`str` or ``None``
        :param nsx_uplink_name: The uplink name of the NSX switch
        """
        self.vds_uplink_name = vds_uplink_name
        self.nsx_uplink_name = nsx_uplink_name
        VapiStruct.__init__(self)


VdsUplinkToNsxUplinkConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vds_uplink_to_nsx_uplink_configuration', {
        'vdsUplinkName': type.OptionalType(type.StringType()),
        'nsxUplinkName': type.OptionalType(type.StringType()),
    },
    VdsUplinkToNsxUplinkConfiguration,
    False,
    None))



class ClusterNetworkConfigurationCriterion(VapiStruct):
    """
    Represents criterion for querying the network properties of a cluster.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'arguments': 'arguments',
                            'description': 'description',
                            }

    def __init__(self,
                 name=None,
                 arguments=None,
                 description=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the criterion 
            
            * Property is read-only.
            
            
        :type  arguments: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param arguments: Arguments required for a particular criterion 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description of the criterion 
            
            * Property is read-only.
            
            
        """
        self.name = name
        self.arguments = arguments
        self.description = description
        VapiStruct.__init__(self)


ClusterNetworkConfigurationCriterion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_network_configuration_criterion', {
        'name': type.OptionalType(type.StringType()),
        'arguments': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
        'description': type.OptionalType(type.StringType()),
    },
    ClusterNetworkConfigurationCriterion,
    False,
    None))



class DatastoreMountSpec(VapiStruct):
    """
    Datastore Mount Spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'datastoreSpec': 'datastore_spec',
                            }

    def __init__(self,
                 datastore_spec=None,
                ):
        """
        :type  datastore_spec: :class:`DatastoreSpec` or ``None``
        :param datastore_spec:         """
        self.datastore_spec = datastore_spec
        VapiStruct.__init__(self)


DatastoreMountSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.datastore_mount_spec', {
        'datastoreSpec': type.OptionalType(type.ReferenceType(__name__, 'DatastoreSpec')),
    },
    DatastoreMountSpec,
    False,
    None))



class ImportVdsSpec(VapiStruct):
    """
    Import Vds Spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'listOfVdsDetails': 'list_of_vds_details',
                            }

    def __init__(self,
                 list_of_vds_details=None,
                ):
        """
        :type  list_of_vds_details: :class:`list` of :class:`VdsDetail` or ``None``
        :param list_of_vds_details: List of details of vSphere Distributed Switches to be imported to
            the inventory
        """
        self.list_of_vds_details = list_of_vds_details
        VapiStruct.__init__(self)


ImportVdsSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.import_vds_spec', {
        'listOfVdsDetails': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VdsDetail'))),
    },
    ImportVdsSpec,
    False,
    None))



class VdsDetail(VapiStruct):
    """
    This specification contains the details of vSphere Distributed Switch to be
    imported to the inventory

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vdsName': 'vds_name',
                            }

    def __init__(self,
                 vds_name=None,
                ):
        """
        :type  vds_name: :class:`str` or ``None``
        :param vds_name: vSphere Distributed Switch name
        """
        self.vds_name = vds_name
        VapiStruct.__init__(self)


VdsDetail._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vds_detail', {
        'vdsName': type.OptionalType(type.StringType()),
    },
    VdsDetail,
    False,
    None))



class BundleUploadSpec(VapiStruct):
    """
    Bundle Upload Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'bundleFilePath': 'bundle_file_path',
                            'manifestFilePath': 'manifest_file_path',
                            'signatureFilePath': 'signature_file_path',
                            'compatibilitySetsFilePath': 'compatibility_sets_file_path',
                            'partnerExtensionSpec': 'partner_extension_spec',
                            }

    def __init__(self,
                 bundle_file_path=None,
                 manifest_file_path=None,
                 signature_file_path=None,
                 compatibility_sets_file_path=None,
                 partner_extension_spec=None,
                ):
        """
        :type  bundle_file_path: :class:`str` or ``None``
        :param bundle_file_path: Bundle Upload File Path
        :type  manifest_file_path: :class:`str` or ``None``
        :param manifest_file_path: Bundle Upload Manifest File Path
        :type  signature_file_path: :class:`str` or ``None``
        :param signature_file_path: Bundle Upload Signature File Path
        :type  compatibility_sets_file_path: :class:`str` or ``None``
        :param compatibility_sets_file_path: [Deprecated] Path to the software compatibility sets file
        :type  partner_extension_spec: :class:`PartnerExtensionSpec` or ``None``
        :param partner_extension_spec:         """
        self.bundle_file_path = bundle_file_path
        self.manifest_file_path = manifest_file_path
        self.signature_file_path = signature_file_path
        self.compatibility_sets_file_path = compatibility_sets_file_path
        self.partner_extension_spec = partner_extension_spec
        VapiStruct.__init__(self)


BundleUploadSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.bundle_upload_spec', {
        'bundleFilePath': type.OptionalType(type.StringType()),
        'manifestFilePath': type.OptionalType(type.StringType()),
        'signatureFilePath': type.OptionalType(type.StringType()),
        'compatibilitySetsFilePath': type.OptionalType(type.StringType()),
        'partnerExtensionSpec': type.OptionalType(type.ReferenceType(__name__, 'PartnerExtensionSpec')),
    },
    BundleUploadSpec,
    False,
    None))



class PartnerExtensionSpec(VapiStruct):
    """
    Specification for partner extensions. This specification is used in the
    Bundle Upload API

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'partnerBundleVersion': 'partner_bundle_version',
                            'partnerBundleMetadataFilePath': 'partner_bundle_metadata_file_path',
                            }

    def __init__(self,
                 partner_bundle_version=None,
                 partner_bundle_metadata_file_path=None,
                ):
        """
        :type  partner_bundle_version: :class:`str` or ``None``
        :param partner_bundle_version: Version of partner bundle to be uploaded. Should match one of the
            bundle versions available in the partner bundle metadata file
        :type  partner_bundle_metadata_file_path: :class:`str` or ``None``
        :param partner_bundle_metadata_file_path: Path to the bundle metadata file. The metadata file can have
            details of multiple bundles
        """
        self.partner_bundle_version = partner_bundle_version
        self.partner_bundle_metadata_file_path = partner_bundle_metadata_file_path
        VapiStruct.__init__(self)


PartnerExtensionSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.partner_extension_spec', {
        'partnerBundleVersion': type.OptionalType(type.StringType()),
        'partnerBundleMetadataFilePath': type.OptionalType(type.StringType()),
    },
    PartnerExtensionSpec,
    False,
    None))



class BackupSpec(VapiStruct):
    """
    Backup Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            }

    def __init__(self,
                 elements=None,
                ):
        """
        :type  elements: :class:`list` of :class:`BackupResource` or ``None``
        :param elements: List of elements to be backed up
        """
        self.elements = elements
        VapiStruct.__init__(self)


BackupSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.backup_spec', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BackupResource'))),
    },
    BackupSpec,
    False,
    None))



class BackupTask(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'status': 'status',
                            'resources': 'resources',
                            'errors': 'errors',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 status=None,
                 resources=None,
                 errors=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Backup task ID
        :type  name: :class:`str` or ``None``
        :param name: Backup task name
        :type  status: :class:`str` or ``None``
        :param status: Backup task status
        :type  resources: :class:`list` of :class:`Resource` or ``None``
        :param resources: Backup resources, to get the backup details
        :type  errors: :class:`list` of :class:`Error` or ``None``
        :param errors: List of errors in case of a failure 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.name = name
        self.status = status
        self.resources = resources
        self.errors = errors
        VapiStruct.__init__(self)


BackupTask._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.backup_task', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'resources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Resource'))),
        'errors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Error'))),
    },
    BackupTask,
    False,
    None))



class AlbControllerClusterSpec(VapiStruct):
    """
    ALB cluster creation data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nsxIds': 'nsx_ids',
                            'clusterName': 'cluster_name',
                            'clusterFqdn': 'cluster_fqdn',
                            'formFactor': 'form_factor',
                            'adminPassword': 'admin_password',
                            'nodes': 'nodes',
                            'bundleId': 'bundle_id',
                            }

    def __init__(self,
                 nsx_ids=None,
                 cluster_name=None,
                 cluster_fqdn=None,
                 form_factor=None,
                 admin_password=None,
                 nodes=None,
                 bundle_id=None,
                ):
        """
        :type  nsx_ids: :class:`list` of :class:`str` or ``None``
        :param nsx_ids: IDs of NSX(s) for which Avi Load Balancer Cluster will be deployed 
            
            * Property is read-only.
            
            
        :type  cluster_name: :class:`str` or ``None``
        :param cluster_name: Name of Avi Load Balancer Cluster 
            
            * Property is read-only.
            
            
        :type  cluster_fqdn: :class:`str` or ``None``
        :param cluster_fqdn: Avi Load Balancer Cluster fully qualified domain name 
            
            * Property is read-only.
            
            
        :type  form_factor: :class:`str` or ``None``
        :param form_factor: Size of ALB cluster 
            
            * Property is read-only.
            
            
        :type  admin_password: :class:`str` or ``None``
        :param admin_password: Admin user password of Avi Load Balancer Cluster 
            
            * Property is read-only.
            
            
        :type  nodes: :class:`list` of :class:`AlbControllerNodeSpec` or ``None``
        :param nodes: Avi Load Balancer Cluster Controller Nodes 
            
            * Property is read-only.
            
            
        :type  bundle_id: :class:`str` or ``None``
        :param bundle_id: Avi Load Balancer Bundle ID 
            
            * Property is read-only.
            
            
        """
        self.nsx_ids = nsx_ids
        self.cluster_name = cluster_name
        self.cluster_fqdn = cluster_fqdn
        self.form_factor = form_factor
        self.admin_password = admin_password
        self.nodes = nodes
        self.bundle_id = bundle_id
        VapiStruct.__init__(self)


AlbControllerClusterSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.alb_controller_cluster_spec', {
        'nsxIds': type.OptionalType(type.ListType(type.StringType())),
        'clusterName': type.OptionalType(type.StringType()),
        'clusterFqdn': type.OptionalType(type.StringType()),
        'formFactor': type.OptionalType(type.StringType()),
        'adminPassword': type.OptionalType(type.StringType()),
        'nodes': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'AlbControllerNodeSpec'))),
        'bundleId': type.OptionalType(type.StringType()),
    },
    AlbControllerClusterSpec,
    False,
    None))



class AlbControllerNodeSpec(VapiStruct):
    """
    ALB Node representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'ipAddress': 'ip_address',
                            }

    def __init__(self,
                 ip_address=None,
                ):
        """
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: IPv4 address of Avi Load Balancer Node 
            
            * Property is read-only.
            
            
        """
        self.ip_address = ip_address
        VapiStruct.__init__(self)


AlbControllerNodeSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.alb_controller_node_spec', {
        'ipAddress': type.OptionalType(type.StringType()),
    },
    AlbControllerNodeSpec,
    False,
    None))



class AlbVersionValidationSpec(VapiStruct):
    """
    ALB cluster creation data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nsxIds': 'nsx_ids',
                            'bundleId': 'bundle_id',
                            }

    def __init__(self,
                 nsx_ids=None,
                 bundle_id=None,
                ):
        """
        :type  nsx_ids: :class:`list` of :class:`str` or ``None``
        :param nsx_ids: IDs of NSX(s) for which Avi Load Balancer Cluster will be deployed 
            
            * Property is read-only.
            
            
        :type  bundle_id: :class:`str` or ``None``
        :param bundle_id: Avi Load Balancer Bundle ID 
            
            * Property is read-only.
            
            
        """
        self.nsx_ids = nsx_ids
        self.bundle_id = bundle_id
        VapiStruct.__init__(self)


AlbVersionValidationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.alb_version_validation_spec', {
        'nsxIds': type.OptionalType(type.ListType(type.StringType())),
        'bundleId': type.OptionalType(type.StringType()),
    },
    AlbVersionValidationSpec,
    False,
    None))



class VsanHclConfiguration(VapiStruct):
    """
    vSAN HCL configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'autoDownloadEnabled': 'auto_download_enabled',
                            'outOfDateErrorThreshold': 'out_of_date_error_threshold',
                            'outOfDateWarningThreshold': 'out_of_date_warning_threshold',
                            'pollingInterval': 'polling_interval',
                            'pollingEnabled': 'polling_enabled',
                            }

    def __init__(self,
                 auto_download_enabled=None,
                 out_of_date_error_threshold=None,
                 out_of_date_warning_threshold=None,
                 polling_interval=None,
                 polling_enabled=None,
                ):
        """
        :type  auto_download_enabled: :class:`bool` or ``None``
        :param auto_download_enabled: Flag to indicate if auto download of vSAN HCL data is enabled or
            disabled
        :type  out_of_date_error_threshold: :class:`long` or ``None``
        :param out_of_date_error_threshold: Duration after which vSAN HCL data will be flagged as out of date
            with severity as error
        :type  out_of_date_warning_threshold: :class:`long` or ``None``
        :param out_of_date_warning_threshold: Duration after which vSAN HCL data will be flagged as out of date
            with severity as warning
        :type  polling_interval: :class:`long` or ``None``
        :param polling_interval: Interval in minutes at which availability of new vSAN HCL data will
            be checked
        :type  polling_enabled: :class:`bool` or ``None``
        :param polling_enabled: Flag to indicate if polling for vSAN HCL data is enabled or
            disabled
        """
        self.auto_download_enabled = auto_download_enabled
        self.out_of_date_error_threshold = out_of_date_error_threshold
        self.out_of_date_warning_threshold = out_of_date_warning_threshold
        self.polling_interval = polling_interval
        self.polling_enabled = polling_enabled
        VapiStruct.__init__(self)


VsanHclConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vsan_hcl_configuration', {
        'autoDownloadEnabled': type.OptionalType(type.BooleanType()),
        'outOfDateErrorThreshold': type.OptionalType(type.IntegerType()),
        'outOfDateWarningThreshold': type.OptionalType(type.IntegerType()),
        'pollingInterval': type.OptionalType(type.IntegerType()),
        'pollingEnabled': type.OptionalType(type.BooleanType()),
    },
    VsanHclConfiguration,
    False,
    None))



class VasaProviderUpdateSpec(VapiStruct):
    """
    VASA Provider update data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'url': 'url',
                            }

    def __init__(self,
                 name=None,
                 url=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the VASA Provider
        :type  url: :class:`str` or ``None``
        :param url: URL of the VASA Provider
        """
        self.name = name
        self.url = url
        VapiStruct.__init__(self)


VasaProviderUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vasa_provider_update_spec', {
        'name': type.OptionalType(type.StringType()),
        'url': type.OptionalType(type.StringType()),
    },
    VasaProviderUpdateSpec,
    False,
    None))



class VasaUserUpdateSpec(VapiStruct):
    """
    User update data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'username': 'username',
                            'password': 'password',
                            }

    def __init__(self,
                 username=None,
                 password=None,
                ):
        """
        :type  username: :class:`str` or ``None``
        :param username: VASA User name
        :type  password: :class:`str` or ``None``
        :param password: Password
        """
        self.username = username
        self.password = password
        VapiStruct.__init__(self)


VasaUserUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vasa_user_update_spec', {
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
    },
    VasaUserUpdateSpec,
    False,
    None))



class StorageContainerUpdateSpec(VapiStruct):
    """
    Storage container update data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            }

    def __init__(self,
                 name=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the storage container
        """
        self.name = name
        VapiStruct.__init__(self)


StorageContainerUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.storage_container_update_spec', {
        'name': type.OptionalType(type.StringType()),
    },
    StorageContainerUpdateSpec,
    False,
    None))



class LocalAccountPasswordInfo(VapiStruct):
    """
    Local user password details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'oldPassword': 'old_password',
                            'newPassword': 'new_password',
                            }

    def __init__(self,
                 old_password=None,
                 new_password=None,
                ):
        """
        :type  old_password: :class:`str` or ``None``
        :param old_password: The old password of the local account 
            
            * Property is read-only.
            
            
        :type  new_password: :class:`str` or ``None``
        :param new_password: The new password of the local account 
            
            * Property is read-only.
            
            
        """
        self.old_password = old_password
        self.new_password = new_password
        VapiStruct.__init__(self)


LocalAccountPasswordInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.local_account_password_info', {
        'oldPassword': type.OptionalType(type.StringType()),
        'newPassword': type.OptionalType(type.StringType()),
    },
    LocalAccountPasswordInfo,
    False,
    None))



class UpgradeCommitSpec(VapiStruct):
    """
    Upgrade Commit/Reschedule Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'scheduledTimestamp': 'scheduled_timestamp',
                            'upgradeNow': 'upgrade_now',
                            'markForCancellation': 'mark_for_cancellation',
                            'vcenterUpgradePatchSpecs': 'vcenter_upgrade_patch_specs',
                            }

    def __init__(self,
                 scheduled_timestamp=None,
                 upgrade_now=None,
                 mark_for_cancellation=None,
                 vcenter_upgrade_patch_specs=None,
                ):
        """
        :type  scheduled_timestamp: :class:`str` or ``None``
        :param scheduled_timestamp: Upgrade Scheduled Time
        :type  upgrade_now: :class:`bool` or ``None``
        :param upgrade_now: Flag for enabling Upgrade Now. If true, scheduledTimestamp is
            ignored
        :type  mark_for_cancellation: :class:`bool` or ``None``
        :param mark_for_cancellation: Flag for marking an upgrade for cancellation. If set to true, other
            fields in the request will be ignored
        :type  vcenter_upgrade_patch_specs: :class:`list` of :class:`VcenterUpgradePatchSpec` or ``None``
        :param vcenter_upgrade_patch_specs: User input for vCenter ReducedDowntimeMigration upgrade
        """
        self.scheduled_timestamp = scheduled_timestamp
        self.upgrade_now = upgrade_now
        self.mark_for_cancellation = mark_for_cancellation
        self.vcenter_upgrade_patch_specs = vcenter_upgrade_patch_specs
        VapiStruct.__init__(self)


UpgradeCommitSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.upgrade_commit_spec', {
        'scheduledTimestamp': type.OptionalType(type.StringType()),
        'upgradeNow': type.OptionalType(type.BooleanType()),
        'markForCancellation': type.OptionalType(type.BooleanType()),
        'vcenterUpgradePatchSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VcenterUpgradePatchSpec'))),
    },
    UpgradeCommitSpec,
    False,
    None))



class VcenterUpgradePatchSpec(VapiStruct):
    """
    vCenter Upgrade User editable Input Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceId': 'resource_id',
                            'startSwitchoverTimestamp': 'start_switchover_timestamp',
                            }

    def __init__(self,
                 resource_id=None,
                 start_switchover_timestamp=None,
                ):
        """
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: Resource ID for Upgrade
        :type  start_switchover_timestamp: :class:`str` or ``None``
        :param start_switchover_timestamp: Start switchover time. This field is only supported for
            ReducedDowntimeMigration upgrade mechanism. To unset
            startSwitchoverTimestamp, provide the value as:
            1970-01-01T00:00:00Z
        """
        self.resource_id = resource_id
        self.start_switchover_timestamp = start_switchover_timestamp
        VapiStruct.__init__(self)


VcenterUpgradePatchSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcenter_upgrade_patch_spec', {
        'resourceId': type.OptionalType(type.StringType()),
        'startSwitchoverTimestamp': type.OptionalType(type.StringType()),
    },
    VcenterUpgradePatchSpec,
    False,
    None))



class Bundle(VapiStruct):
    """
    Bundle contains bits to install/update the appropriate Cloud Foundation
    software components in your management domain or workload domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'type': 'type',
                            'description': 'description',
                            'version': 'version',
                            'severity': 'severity',
                            'vendor': 'vendor',
                            'releasedDate': 'released_date',
                            'isCumulative': 'is_cumulative',
                            'isCompliant': 'is_compliant',
                            'sizeMB': 'size_mb',
                            'downloadStatus': 'download_status',
                            'components': 'components',
                            'applicabilityStatus': 'applicability_status',
                            'applicabilityOrder': 'applicability_order',
                            'isPartiallyUpgraded': 'is_partially_upgraded',
                            }

    def __init__(self,
                 id=None,
                 type=None,
                 description=None,
                 version=None,
                 severity=None,
                 vendor=None,
                 released_date=None,
                 is_cumulative=None,
                 is_compliant=None,
                 size_mb=None,
                 download_status=None,
                 components=None,
                 applicability_status=None,
                 applicability_order=None,
                 is_partially_upgraded=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Bundle ID 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Bundle Type 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Bundle Description 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: Bundle Version 
            
            * Property is read-only.
            
            
        :type  severity: :class:`str` or ``None``
        :param severity: Bundle Severity 
            
            * Property is read-only.
            
            
        :type  vendor: :class:`str` or ``None``
        :param vendor: Bundle Vendor 
            
            * Property is read-only.
            
            
        :type  released_date: :class:`str` or ``None``
        :param released_date: Bundle Release Date 
            
            * Property is read-only.
            
            
        :type  is_cumulative: :class:`bool` or ``None``
        :param is_cumulative: Is Bundle Cumulative 
            
            * Property is read-only.
            
            
        :type  is_compliant: :class:`bool` or ``None``
        :param is_compliant: Is compliant with the current VCF version 
            
            * Property is read-only.
            
            
        :type  size_mb: :class:`float` or ``None``
        :param size_mb: Bundle Size in MB 
            
            * Property is read-only.
            
            
        :type  download_status: :class:`str` or ``None``
        :param download_status: Bundle Download Status 
            
            * Property is read-only.
            
            
        :type  components: :class:`list` of :class:`BundleComponent` or ``None``
        :param components: Bundle Components 
            
            * Property is read-only.
            
            
        :type  applicability_status: :class:`str` or ``None``
        :param applicability_status: Bundle Applicability Status 
            
            * Property is read-only.
            
            
        :type  applicability_order: :class:`long` or ``None``
        :param applicability_order: Bundle Applicability Order 
            
            * Property is read-only.
            
            
        :type  is_partially_upgraded: :class:`bool` or ``None``
        :param is_partially_upgraded: Is Bundle partially upgraded 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.type = type
        self.description = description
        self.version = version
        self.severity = severity
        self.vendor = vendor
        self.released_date = released_date
        self.is_cumulative = is_cumulative
        self.is_compliant = is_compliant
        self.size_mb = size_mb
        self.download_status = download_status
        self.components = components
        self.applicability_status = applicability_status
        self.applicability_order = applicability_order
        self.is_partially_upgraded = is_partially_upgraded
        VapiStruct.__init__(self)


Bundle._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.bundle', {
        'id': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'severity': type.OptionalType(type.StringType()),
        'vendor': type.OptionalType(type.StringType()),
        'releasedDate': type.OptionalType(type.StringType()),
        'isCumulative': type.OptionalType(type.BooleanType()),
        'isCompliant': type.OptionalType(type.BooleanType()),
        'sizeMB': type.OptionalType(type.DoubleType()),
        'downloadStatus': type.OptionalType(type.StringType()),
        'components': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BundleComponent'))),
        'applicabilityStatus': type.OptionalType(type.StringType()),
        'applicabilityOrder': type.OptionalType(type.IntegerType()),
        'isPartiallyUpgraded': type.OptionalType(type.BooleanType()),
    },
    Bundle,
    False,
    None))



class BundleComponent(VapiStruct):
    """
    Bundle Software Component

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'description': 'description',
                            'vendor': 'vendor',
                            'releasedDate': 'released_date',
                            'toVersion': 'to_version',
                            'fromVersion': 'from_version',
                            'imageType': 'image_type',
                            'id': 'id',
                            'type': 'type',
                            }

    def __init__(self,
                 description=None,
                 vendor=None,
                 released_date=None,
                 to_version=None,
                 from_version=None,
                 image_type=None,
                 id=None,
                 type=None,
                ):
        """
        :type  description: :class:`str` or ``None``
        :param description: Bundle Component Description 
            
            * Property is read-only.
            
            
        :type  vendor: :class:`str` or ``None``
        :param vendor: Bundle Component Vendor 
            
            * Property is read-only.
            
            
        :type  released_date: :class:`str` or ``None``
        :param released_date: Bundle Component Release Date 
            
            * Property is read-only.
            
            
        :type  to_version: :class:`str` or ``None``
        :param to_version: Bundle Component's to/target version after Upgrade 
            
            * Property is read-only.
            
            
        :type  from_version: :class:`str` or ``None``
        :param from_version: Bundle Component's from/source version before Upgrade 
            
            * Property is read-only.
            
            
        :type  image_type: :class:`str` or ``None``
        :param image_type: Bundle Component Image Type 
            
            * Property is read-only.
            
            
        :type  id: :class:`str` or ``None``
        :param id: ID of Resource/Software Component 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Type of Resource/Software Component 
            
            * Property is read-only.
            
            
        """
        self.description = description
        self.vendor = vendor
        self.released_date = released_date
        self.to_version = to_version
        self.from_version = from_version
        self.image_type = image_type
        self.id = id
        self.type = type
        VapiStruct.__init__(self)


BundleComponent._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.bundle_component', {
        'description': type.OptionalType(type.StringType()),
        'vendor': type.OptionalType(type.StringType()),
        'releasedDate': type.OptionalType(type.StringType()),
        'toVersion': type.OptionalType(type.StringType()),
        'fromVersion': type.OptionalType(type.StringType()),
        'imageType': type.OptionalType(type.StringType()),
        'id': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
    },
    BundleComponent,
    False,
    None))



class Upgrade(VapiStruct):
    """
    Upgrade object which contain details regarding the upgrade

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'bundleId': 'bundle_id',
                            'resourceType': 'resource_type',
                            'parallelUpgrade': 'parallel_upgrade',
                            'resourceUpgradeSpecs': 'resource_upgrade_specs',
                            'status': 'status',
                            'taskId': 'task_id',
                            'nsxtUpgradeUserInputSpec': 'nsxt_upgrade_user_input_spec',
                            'bundle': 'bundle',
                            'endTime': 'end_time',
                            'vcenterUpgradeUserInputSpec': 'vcenter_upgrade_user_input_spec',
                            }

    def __init__(self,
                 id=None,
                 bundle_id=None,
                 resource_type=None,
                 parallel_upgrade=None,
                 resource_upgrade_specs=None,
                 status=None,
                 task_id=None,
                 nsxt_upgrade_user_input_spec=None,
                 bundle=None,
                 end_time=None,
                 vcenter_upgrade_user_input_spec=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID for Upgrade
        :type  bundle_id: :class:`str` or ``None``
        :param bundle_id: Bundle ID for Upgrade
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Resource Type for Upgrade
        :type  parallel_upgrade: :class:`bool` or ``None``
        :param parallel_upgrade: Boolean to represent components will be upgraded in parallel on not
        :type  resource_upgrade_specs: :class:`list` of :class:`ResourceUpgradeSpec` or ``None``
        :param resource_upgrade_specs: Resource Upgrade Specifications
        :type  status: :class:`str` or ``None``
        :param status: Overall upgrade status
        :type  task_id: :class:`str` or ``None``
        :param task_id: Task ID associated with upgrade
        :type  nsxt_upgrade_user_input_spec: :class:`NsxtUpgradeUserInputSpec` or ``None``
        :param nsxt_upgrade_user_input_spec:         :type  bundle: :class:`Bundle` or ``None``
        :param bundle:         :type  end_time: :class:`long` or ``None``
        :param end_time: End time of the upgrade
        :type  vcenter_upgrade_user_input_spec: :class:`VcenterUpgradeUserInputSpec` or ``None``
        :param vcenter_upgrade_user_input_spec:         """
        self.id = id
        self.bundle_id = bundle_id
        self.resource_type = resource_type
        self.parallel_upgrade = parallel_upgrade
        self.resource_upgrade_specs = resource_upgrade_specs
        self.status = status
        self.task_id = task_id
        self.nsxt_upgrade_user_input_spec = nsxt_upgrade_user_input_spec
        self.bundle = bundle
        self.end_time = end_time
        self.vcenter_upgrade_user_input_spec = vcenter_upgrade_user_input_spec
        VapiStruct.__init__(self)


Upgrade._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.upgrade', {
        'id': type.OptionalType(type.StringType()),
        'bundleId': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'parallelUpgrade': type.OptionalType(type.BooleanType()),
        'resourceUpgradeSpecs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ResourceUpgradeSpec'))),
        'status': type.OptionalType(type.StringType()),
        'taskId': type.OptionalType(type.StringType()),
        'nsxtUpgradeUserInputSpec': type.OptionalType(type.ReferenceType(__name__, 'NsxtUpgradeUserInputSpec')),
        'bundle': type.OptionalType(type.ReferenceType(__name__, 'Bundle')),
        'endTime': type.OptionalType(type.IntegerType()),
        'vcenterUpgradeUserInputSpec': type.OptionalType(type.ReferenceType(__name__, 'VcenterUpgradeUserInputSpec')),
    },
    Upgrade,
    False,
    None))



class SystemUpdateSpec(VapiStruct):
    """
    Contains the parameters required to perform update operation on system

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'maxAllowedDomainsInSubscription': 'max_allowed_domains_in_subscription',
                            }

    def __init__(self,
                 max_allowed_domains_in_subscription=None,
                ):
        """
        :type  max_allowed_domains_in_subscription: :class:`long` or ``None``
        :param max_allowed_domains_in_subscription: new limit of amount of domains in subscription mode
        """
        self.max_allowed_domains_in_subscription = max_allowed_domains_in_subscription
        VapiStruct.__init__(self)


SystemUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.system_update_spec', {
        'maxAllowedDomainsInSubscription': type.OptionalType(type.IntegerType()),
    },
    SystemUpdateSpec,
    False,
    None))



class DepotSyncInfo(VapiStruct):
    """
    Depot Sync Information

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'syncStatus': 'sync_status',
                            'errorMessage': 'error_message',
                            'lastSyncCompletionTimestamp': 'last_sync_completion_timestamp',
                            }

    def __init__(self,
                 sync_status=None,
                 error_message=None,
                 last_sync_completion_timestamp=None,
                ):
        """
        :type  sync_status: :class:`str` or ``None``
        :param sync_status: Depot sync status 
            
            * Property is read-only.
            
            
        :type  error_message: :class:`str` or ``None``
        :param error_message: Depot sync error message 
            
            * Property is read-only.
            
            
        :type  last_sync_completion_timestamp: :class:`str` or ``None``
        :param last_sync_completion_timestamp: The completion timestamp of the last sync operation 
            
            * Property is read-only.
            
            
        """
        self.sync_status = sync_status
        self.error_message = error_message
        self.last_sync_completion_timestamp = last_sync_completion_timestamp
        VapiStruct.__init__(self)


DepotSyncInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.depot_sync_info', {
        'syncStatus': type.OptionalType(type.StringType()),
        'errorMessage': type.OptionalType(type.StringType()),
        'lastSyncCompletionTimestamp': type.OptionalType(type.StringType()),
    },
    DepotSyncInfo,
    False,
    None))



class ProxyConfiguration(VapiStruct):
    """
    Proxy Configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """
    TRANSFER_PROTOCOL_HTTP = "HTTP"
    """
    Proxy transfer protocol, default value is HTTP

    """
    TRANSFER_PROTOCOL_HTTPS = "HTTPS"
    """
    Proxy transfer protocol, default value is HTTP

    """



    _canonical_to_pep_names = {
                            'isConfigured': 'is_configured',
                            'isEnabled': 'is_enabled',
                            'host': 'host',
                            'port': 'port',
                            'transferProtocol': 'transfer_protocol',
                            'username': 'username',
                            'password': 'password',
                            'isAuthenticated': 'is_authenticated',
                            }

    def __init__(self,
                 is_configured=None,
                 is_enabled=None,
                 host=None,
                 port=None,
                 transfer_protocol=None,
                 username=None,
                 password=None,
                 is_authenticated=None,
                ):
        """
        :type  is_configured: :class:`bool` or ``None``
        :param is_configured: Defines if the proxy is configured. 
            
            * Property is read-only.
            
            
        :type  is_enabled: :class:`bool` or ``None``
        :param is_enabled: Defines if the proxy configuration is enabled. To disable the
            proxy, this should be set to false.
        :type  host: :class:`str` or ``None``
        :param host: IP address/FQDN of proxy server. This must be set if proxy is
            enabled.
        :type  port: :class:`long` or ``None``
        :param port: Port of proxy server. This must be set if proxy is enabled.
        :type  transfer_protocol: :class:`str` or ``None``
        :param transfer_protocol: Proxy transfer protocol, default value is HTTP
        :type  username: :class:`str` or ``None``
        :param username: User name to connect
        :type  password: :class:`str` or ``None``
        :param password: User password to connect, will return null on reading
        :type  is_authenticated: :class:`bool` or ``None``
        :param is_authenticated: If proxy authentication is required, isAuthenticated must be
            enabled and username and password should be set.
        """
        self.is_configured = is_configured
        self.is_enabled = is_enabled
        self.host = host
        self.port = port
        self.transfer_protocol = transfer_protocol
        self.username = username
        self.password = password
        self.is_authenticated = is_authenticated
        VapiStruct.__init__(self)


ProxyConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.proxy_configuration', {
        'isConfigured': type.OptionalType(type.BooleanType()),
        'isEnabled': type.OptionalType(type.BooleanType()),
        'host': type.OptionalType(type.StringType()),
        'port': type.OptionalType(type.IntegerType()),
        'transferProtocol': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
        'isAuthenticated': type.OptionalType(type.BooleanType()),
    },
    ProxyConfiguration,
    False,
    None))



class HostBundleDepotUpdateSpec(VapiStruct):
    """
    Host Bundle Depot Update Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'action': 'action',
                            }

    def __init__(self,
                 action=None,
                ):
        """
        :type  action: :class:`str` or ``None``
        :param action: Action that needs to be performed on UMDS host depot store
        """
        self.action = action
        VapiStruct.__init__(self)


HostBundleDepotUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_bundle_depot_update_spec', {
        'action': type.OptionalType(type.StringType()),
    },
    HostBundleDepotUpdateSpec,
    False,
    None))



class AssessmentPartialRetryInput(VapiStruct):
    """
    Spec for assessment retry

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'errorIds': 'error_ids',
                            'options': 'options',
                            }

    def __init__(self,
                 error_ids=None,
                 options=None,
                ):
        """
        :type  error_ids: :class:`list` of :class:`str` or ``None``
        :param error_ids: List of error ids to retry
        :type  options: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param options: Options map (toggles) to control assessment flow. Available toggles
            'discoveryCaching' - if set to true the assessment engine will use
            the Domain data (if present) from previous discovery execution. If
            any of the passed in the request domains is not present in the
            cache the Discovery is triggered for ALL domains (even the ones
            existing in the cache).
        """
        self.error_ids = error_ids
        self.options = options
        VapiStruct.__init__(self)


AssessmentPartialRetryInput._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.assessment_partial_retry_input', {
        'errorIds': type.OptionalType(type.ListType(type.StringType())),
        'options': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
    },
    AssessmentPartialRetryInput,
    False,
    None))



class Functionality(VapiStruct):
    """
    Defines a functionality model

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'isAllowed': 'is_allowed',
                            'errorMessage': 'error_message',
                            }

    def __init__(self,
                 type=None,
                 is_allowed=None,
                 error_message=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: Operation that is represented in machine readable format. The
            convention is <resource> _ <operation></operation> </resource>
        :type  is_allowed: :class:`bool` or ``None``
        :param is_allowed: Flag indicating if a given functionality is allowed/disallowed
        :type  error_message: :class:`str` or ``None``
        :param error_message: The localized error message
        """
        self.type = type
        self.is_allowed = is_allowed
        self.error_message = error_message
        VapiStruct.__init__(self)


Functionality._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.functionality', {
        'type': type.OptionalType(type.StringType()),
        'isAllowed': type.OptionalType(type.BooleanType()),
        'errorMessage': type.OptionalType(type.StringType()),
    },
    Functionality,
    False,
    None))



class ResourceFunctionalities(VapiStruct):
    """
    Defines a resource functionality specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceType': 'resource_type',
                            'resourceId': 'resource_id',
                            'functionalities': 'functionalities',
                            }

    def __init__(self,
                 resource_type=None,
                 resource_id=None,
                 functionalities=None,
                ):
        """
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Type of the resource
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: ID of the resource
        :type  functionalities: :class:`list` of :class:`Functionality` or ``None``
        :param functionalities: List of functionalities associated with the resource
        """
        self.resource_type = resource_type
        self.resource_id = resource_id
        self.functionalities = functionalities
        VapiStruct.__init__(self)


ResourceFunctionalities._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_functionalities', {
        'resourceType': type.OptionalType(type.StringType()),
        'resourceId': type.OptionalType(type.StringType()),
        'functionalities': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Functionality'))),
    },
    ResourceFunctionalities,
    False,
    None))



class ResourceFunctionalitiesUpdateSpec(VapiStruct):
    """
    Resource Functionality Caller update specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'serviceId': 'service_id',
                            'operationName': 'operation_name',
                            'operationId': 'operation_id',
                            'resourceFunctionalities': 'resource_functionalities',
                            }

    def __init__(self,
                 service_id=None,
                 operation_name=None,
                 operation_id=None,
                 resource_functionalities=None,
                ):
        """
        :type  service_id: :class:`str` or ``None``
        :param service_id: The identifier of the service associated with the resource
            functionalities
        :type  operation_name: :class:`str` or ``None``
        :param operation_name: The name of the operation associated with the resource
            functionalities
        :type  operation_id: :class:`str` or ``None``
        :param operation_id: The identifier of the operation associated with the resource
            functionalities
        :type  resource_functionalities: :class:`list` of :class:`ResourceFunctionalities` or ``None``
        :param resource_functionalities: List of resource functionalities associated with the caller
        """
        self.service_id = service_id
        self.operation_name = operation_name
        self.operation_id = operation_id
        self.resource_functionalities = resource_functionalities
        VapiStruct.__init__(self)


ResourceFunctionalitiesUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_functionalities_update_spec', {
        'serviceId': type.OptionalType(type.StringType()),
        'operationName': type.OptionalType(type.StringType()),
        'operationId': type.OptionalType(type.StringType()),
        'resourceFunctionalities': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ResourceFunctionalities'))),
    },
    ResourceFunctionalitiesUpdateSpec,
    False,
    None))



class ResourceFunctionalitiesCaller(VapiStruct):
    """
    Defines a resource functionality caller specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'operationId': 'operation_id',
                            'operationName': 'operation_name',
                            'serviceId': 'service_id',
                            'resourceFunctionalities': 'resource_functionalities',
                            }

    def __init__(self,
                 operation_id=None,
                 operation_name=None,
                 service_id=None,
                 resource_functionalities=None,
                ):
        """
        :type  operation_id: :class:`str` or ``None``
        :param operation_id: The identifier of the operation associated with the resource
            functionalities
        :type  operation_name: :class:`str` or ``None``
        :param operation_name: The name of the operation associated with the resource
            functionalities
        :type  service_id: :class:`str` or ``None``
        :param service_id: The identifier of the service associated with the resource
            functionalities
        :type  resource_functionalities: :class:`list` of :class:`ResourceFunctionalities` or ``None``
        :param resource_functionalities: List of resource functionalities associated with the caller
        """
        self.operation_id = operation_id
        self.operation_name = operation_name
        self.service_id = service_id
        self.resource_functionalities = resource_functionalities
        VapiStruct.__init__(self)


ResourceFunctionalitiesCaller._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_functionalities_caller', {
        'operationId': type.OptionalType(type.StringType()),
        'operationName': type.OptionalType(type.StringType()),
        'serviceId': type.OptionalType(type.StringType()),
        'resourceFunctionalities': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ResourceFunctionalities'))),
    },
    ResourceFunctionalitiesCaller,
    False,
    None))



class ResourceFunctionalitiesGlobalUpdateSpec(VapiStruct):
    """
    Resource Functionality Global Caller update specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'serviceId': 'service_id',
                            'operationName': 'operation_name',
                            'operationId': 'operation_id',
                            'isAllowed': 'is_allowed',
                            }

    def __init__(self,
                 service_id=None,
                 operation_name=None,
                 operation_id=None,
                 is_allowed=None,
                ):
        """
        :type  service_id: :class:`str` or ``None``
        :param service_id: The identifier of the service associated with the resource
            functionalities
        :type  operation_name: :class:`str` or ``None``
        :param operation_name: The name of the operation associated with the resource
            functionalities
        :type  operation_id: :class:`str` or ``None``
        :param operation_id: The identifier of the operation associated with the resource
            functionalities
        :type  is_allowed: :class:`bool` or ``None``
        :param is_allowed: Flag indicating if all of the functionalities are allowed
        """
        self.service_id = service_id
        self.operation_name = operation_name
        self.operation_id = operation_id
        self.is_allowed = is_allowed
        VapiStruct.__init__(self)


ResourceFunctionalitiesGlobalUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_functionalities_global_update_spec', {
        'serviceId': type.OptionalType(type.StringType()),
        'operationName': type.OptionalType(type.StringType()),
        'operationId': type.OptionalType(type.StringType()),
        'isAllowed': type.OptionalType(type.BooleanType()),
    },
    ResourceFunctionalitiesGlobalUpdateSpec,
    False,
    None))



class ResourceFunctionalitiesGlobalConfigurationCaller(VapiStruct):
    """
    Defines a resource functionality global caller specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'operationId': 'operation_id',
                            'operationName': 'operation_name',
                            'serviceId': 'service_id',
                            'isAllowed': 'is_allowed',
                            }

    def __init__(self,
                 operation_id=None,
                 operation_name=None,
                 service_id=None,
                 is_allowed=None,
                ):
        """
        :type  operation_id: :class:`str` or ``None``
        :param operation_id: The identifier of the operation associated with the resource
            functionalities
        :type  operation_name: :class:`str` or ``None``
        :param operation_name: The name of the operation associated with the resource
            functionalities
        :type  service_id: :class:`str` or ``None``
        :param service_id: The identifier of the service associated with the resource
            functionalities
        :type  is_allowed: :class:`bool` or ``None``
        :param is_allowed: Global flag representing if all of the VMware Cloud Foundation
            operations are allowed or not
        """
        self.operation_id = operation_id
        self.operation_name = operation_name
        self.service_id = service_id
        self.is_allowed = is_allowed
        VapiStruct.__init__(self)


ResourceFunctionalitiesGlobalConfigurationCaller._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_functionalities_global_configuration_caller', {
        'operationId': type.OptionalType(type.StringType()),
        'operationName': type.OptionalType(type.StringType()),
        'serviceId': type.OptionalType(type.StringType()),
        'isAllowed': type.OptionalType(type.BooleanType()),
    },
    ResourceFunctionalitiesGlobalConfigurationCaller,
    False,
    None))



class NetworkPoolUpdateSpec(VapiStruct):
    """
    Network Pool update data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            }

    def __init__(self,
                 name=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the Network Pool
        """
        self.name = name
        VapiStruct.__init__(self)


NetworkPoolUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.network_pool_update_spec', {
        'name': type.OptionalType(type.StringType()),
    },
    NetworkPoolUpdateSpec,
    False,
    None))



class LicenseKeyUpdateSpec(VapiStruct):
    """
    Spec for updating a license key

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'description': 'description',
                            }

    def __init__(self,
                 description=None,
                ):
        """
        :type  description: :class:`str` or ``None``
        :param description: String for updating the description of the license key 
            
            * Property is read-only.
            
            
        """
        self.description = description
        VapiStruct.__init__(self)


LicenseKeyUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.license_key_update_spec', {
        'description': type.OptionalType(type.StringType()),
    },
    LicenseKeyUpdateSpec,
    False,
    None))



class DomainResourceCertificatesUpdateSpec(VapiStruct):
    """
    Represents domain certificate(s) update spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'autoRenew': 'auto_renew',
                            }

    def __init__(self,
                 auto_renew=None,
                ):
        """
        :type  auto_renew: :class:`str` or ``None``
        :param auto_renew: Represents the auto-renew configuration for a domain
        """
        self.auto_renew = auto_renew
        VapiStruct.__init__(self)


DomainResourceCertificatesUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.domain_resource_certificates_update_spec', {
        'autoRenew': type.OptionalType(type.StringType()),
    },
    DomainResourceCertificatesUpdateSpec,
    False,
    None))



class CertificateOperationSpec(VapiStruct):
    """
    This specification contains certificate operation request details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'operationType': 'operation_type',
                            'resources': 'resources',
                            }

    def __init__(self,
                 operation_type=None,
                 resources=None,
                ):
        """
        :type  operation_type: :class:`str` or ``None``
        :param operation_type: The Certificates operation type
        :type  resources: :class:`list` of :class:`Resource` or ``None``
        :param resources: Resource(s) in a domain
        """
        self.operation_type = operation_type
        self.resources = resources
        VapiStruct.__init__(self)


CertificateOperationSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.certificate_operation_spec', {
        'operationType': type.OptionalType(type.StringType()),
        'resources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Resource'))),
    },
    CertificateOperationSpec,
    False,
    None))



class HealthCheckSpec(VapiStruct):
    """
    HealthCheck

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'status': 'status',
                            'resourceType': 'resource_type',
                            'resourceName': 'resource_name',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 status=None,
                 resource_type=None,
                 resource_name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Health Check id
        :type  name: :class:`str` or ``None``
        :param name: Health Check name
        :type  status: :class:`str` or ``None``
        :param status: Health check status
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Resource Type
        :type  resource_name: :class:`str` or ``None``
        :param resource_name: Name of the resource, if the ResourceType is CLUSTER, then the
            resourceName == ClusterName
        """
        self.id = id
        self.name = name
        self.status = status
        self.resource_type = resource_type
        self.resource_name = resource_name
        VapiStruct.__init__(self)


HealthCheckSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.health_check_spec', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'resourceName': type.OptionalType(type.StringType()),
    },
    HealthCheckSpec,
    False,
    None))



class HealthCheckTask(VapiStruct):
    """
    HealthCheckTask

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'status': 'status',
                            'resourceStatus': 'resource_status',
                            }

    def __init__(self,
                 id=None,
                 status=None,
                 resource_status=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Health Check task id
        :type  status: :class:`str` or ``None``
        :param status: Health Check task status
        :type  resource_status: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param resource_status: Health Check resource status
        """
        self.id = id
        self.status = status
        self.resource_status = resource_status
        VapiStruct.__init__(self)


HealthCheckTask._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.health_check_task', {
        'id': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'resourceStatus': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
    },
    HealthCheckTask,
    False,
    None))



class ResourceCertificatesUpdateSpec(VapiStruct):
    """
    Represents resource certificate(s) update spec

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'autoRenew': 'auto_renew',
                            'autoRenewTriggerTimeWindow': 'auto_renew_trigger_time_window',
                            }

    def __init__(self,
                 auto_renew=None,
                 auto_renew_trigger_time_window=None,
                ):
        """
        :type  auto_renew: :class:`str` or ``None``
        :param auto_renew: Represents the auto-renew configuration
        :type  auto_renew_trigger_time_window: :class:`str` or ``None``
        :param auto_renew_trigger_time_window: Represents the starting time of the 1-hour time window during which
            auto-renewal triggers every day. Time should be given in 24-hour
            format as HH:mm. Note that the auto-renewal will trigger at the
            specified time or up to an hour later, considering factors such as
            daylight saving time.
        """
        self.auto_renew = auto_renew
        self.auto_renew_trigger_time_window = auto_renew_trigger_time_window
        VapiStruct.__init__(self)


ResourceCertificatesUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_certificates_update_spec', {
        'autoRenew': type.OptionalType(type.StringType()),
        'autoRenewTriggerTimeWindow': type.OptionalType(type.StringType()),
    },
    ResourceCertificatesUpdateSpec,
    False,
    None))



class AutoRotateCredentialPolicyInputSpec(VapiStruct):
    """
    Represents password auto rotate config details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'frequencyInDays': 'frequency_in_days',
                            'enableAutoRotatePolicy': 'enable_auto_rotate_policy',
                            }

    def __init__(self,
                 frequency_in_days=None,
                 enable_auto_rotate_policy=None,
                ):
        """
        :type  frequency_in_days: :class:`long` or ``None``
        :param frequency_in_days: Frequency in days
        :type  enable_auto_rotate_policy: :class:`bool` or ``None``
        :param enable_auto_rotate_policy: Enable or disable auto rotate policy
        """
        self.frequency_in_days = frequency_in_days
        self.enable_auto_rotate_policy = enable_auto_rotate_policy
        VapiStruct.__init__(self)


AutoRotateCredentialPolicyInputSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.auto_rotate_credential_policy_input_spec', {
        'frequencyInDays': type.OptionalType(type.IntegerType()),
        'enableAutoRotatePolicy': type.OptionalType(type.BooleanType()),
    },
    AutoRotateCredentialPolicyInputSpec,
    False,
    None))



class BaseCredential(VapiStruct):
    """
    Represents credentials of a resource in the system

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'credentialType': 'credential_type',
                            'accountType': 'account_type',
                            'username': 'username',
                            'password': 'password',
                            }

    def __init__(self,
                 credential_type=None,
                 account_type=None,
                 username=None,
                 password=None,
                ):
        """
        :type  credential_type: :class:`str` or ``None``
        :param credential_type: Credential type
        :type  account_type: :class:`str` or ``None``
        :param account_type: Account type
        :type  username: :class:`str` or ``None``
        :param username: Username
        :type  password: :class:`str` or ``None``
        :param password: Password
        """
        self.credential_type = credential_type
        self.account_type = account_type
        self.username = username
        self.password = password
        VapiStruct.__init__(self)


BaseCredential._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.base_credential', {
        'credentialType': type.OptionalType(type.StringType()),
        'accountType': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
    },
    BaseCredential,
    False,
    None))



class CredentialsUpdateSpec(VapiStruct):
    """
    This specification contains password operation request details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'operationType': 'operation_type',
                            'elements': 'elements',
                            'autoRotatePolicy': 'auto_rotate_policy',
                            }

    def __init__(self,
                 operation_type=None,
                 elements=None,
                 auto_rotate_policy=None,
                ):
        """
        :type  operation_type: :class:`str` or ``None``
        :param operation_type: Operation type
        :type  elements: :class:`list` of :class:`ResourceCredentials` or ``None``
        :param elements: List of resource credentials to be changed
        :type  auto_rotate_policy: :class:`AutoRotateCredentialPolicyInputSpec` or ``None``
        :param auto_rotate_policy:         """
        self.operation_type = operation_type
        self.elements = elements
        self.auto_rotate_policy = auto_rotate_policy
        VapiStruct.__init__(self)


CredentialsUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.credentials_update_spec', {
        'operationType': type.OptionalType(type.StringType()),
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ResourceCredentials'))),
        'autoRotatePolicy': type.OptionalType(type.ReferenceType(__name__, 'AutoRotateCredentialPolicyInputSpec')),
    },
    CredentialsUpdateSpec,
    False,
    None))



class ResourceCredentials(VapiStruct):
    """
    Represents a resource along with its list of credentials to be changed.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceName': 'resource_name',
                            'resourceId': 'resource_id',
                            'resourceType': 'resource_type',
                            'credentials': 'credentials',
                            }

    def __init__(self,
                 resource_name=None,
                 resource_id=None,
                 resource_type=None,
                 credentials=None,
                ):
        """
        :type  resource_name: :class:`str` or ``None``
        :param resource_name: Resource name
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: Resource ID
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Authenticated Resource Type
        :type  credentials: :class:`list` of :class:`BaseCredential` or ``None``
        :param credentials: Credentials of the resource
        """
        self.resource_name = resource_name
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.credentials = credentials
        VapiStruct.__init__(self)


ResourceCredentials._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_credentials', {
        'resourceName': type.OptionalType(type.StringType()),
        'resourceId': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'credentials': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BaseCredential'))),
    },
    ResourceCredentials,
    False,
    None))



class BundleDownloadSpec(VapiStruct):
    """
    Bundle Download Specification. This specification gets used in the Bundle
    Download API

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'scheduledTimestamp': 'scheduled_timestamp',
                            'downloadNow': 'download_now',
                            'cancelNow': 'cancel_now',
                            }

    def __init__(self,
                 scheduled_timestamp=None,
                 download_now=None,
                 cancel_now=None,
                ):
        """
        :type  scheduled_timestamp: :class:`str` or ``None``
        :param scheduled_timestamp: Bundle Download Scheduled Time
        :type  download_now: :class:`bool` or ``None``
        :param download_now: Flag for enabling Download Now. If true, scheduledTimestamp is
            ignored
        :type  cancel_now: :class:`bool` or ``None``
        :param cancel_now: Flag for cancelling the download. If true,
            scheduledTimestamp/downloadNow is ignored
        """
        self.scheduled_timestamp = scheduled_timestamp
        self.download_now = download_now
        self.cancel_now = cancel_now
        VapiStruct.__init__(self)


BundleDownloadSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.bundle_download_spec', {
        'scheduledTimestamp': type.OptionalType(type.StringType()),
        'downloadNow': type.OptionalType(type.BooleanType()),
        'cancelNow': type.OptionalType(type.BooleanType()),
    },
    BundleDownloadSpec,
    False,
    None))



class BundleUpdateSpec(VapiStruct):
    """
    Bundle Update Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'bundleDownloadSpec': 'bundle_download_spec',
                            }

    def __init__(self,
                 bundle_download_spec=None,
                ):
        """
        :type  bundle_download_spec: :class:`BundleDownloadSpec` or ``None``
        :param bundle_download_spec:         """
        self.bundle_download_spec = bundle_download_spec
        VapiStruct.__init__(self)


BundleUpdateSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.bundle_update_spec', {
        'bundleDownloadSpec': type.OptionalType(type.ReferenceType(__name__, 'BundleDownloadSpec')),
    },
    BundleUpdateSpec,
    False,
    None))



class VsanHclAttributes(VapiStruct):
    """
    Represents attributes of vSAN HCL data

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'remoteDataTimestamp': 'remote_data_timestamp',
                            'localDataTimestamp': 'local_data_timestamp',
                            'lastError': 'last_error',
                            'isLocalDataMissing': 'is_local_data_missing',
                            'isNewDataAvailable': 'is_new_data_available',
                            'isWarningThresholdExceeded': 'is_warning_threshold_exceeded',
                            'isErrorThresholdExceeded': 'is_error_threshold_exceeded',
                            'localDataTime': 'local_data_time',
                            }

    def __init__(self,
                 remote_data_timestamp=None,
                 local_data_timestamp=None,
                 last_error=None,
                 is_local_data_missing=None,
                 is_new_data_available=None,
                 is_warning_threshold_exceeded=None,
                 is_error_threshold_exceeded=None,
                 local_data_time=None,
                ):
        """
        :type  remote_data_timestamp: :class:`long` or ``None``
        :param remote_data_timestamp: Timestamp of vSAN HCL data (in seconds) from remote vSAN HCL
            service as determined by periodic polling 
            
            * Property is read-only.
            
            
        :type  local_data_timestamp: :class:`long` or ``None``
        :param local_data_timestamp: Timestamp of vSAN HCL data (in seconds) saved on SDDC Manager 
            
            * Property is read-only.
            
            
        :type  last_error: :class:`str` or ``None``
        :param last_error: Details of last error in case of failure in updating vSAN HCL data
            on SDDC Manager
        :type  is_local_data_missing: :class:`bool` or ``None``
        :param is_local_data_missing: True if vSAN HCL data is missing on SDDC Manager
        :type  is_new_data_available: :class:`bool` or ``None``
        :param is_new_data_available: True if timestamp of vSAN HCL data on SDDC Manager is older than
            timestamp fetched via periodic polling
        :type  is_warning_threshold_exceeded: :class:`bool` or ``None``
        :param is_warning_threshold_exceeded: True if age of vSAN HCL data on SDDC Manager is older than
            threshold set for warning level
        :type  is_error_threshold_exceeded: :class:`bool` or ``None``
        :param is_error_threshold_exceeded: True if age of vSAN HCL data on SDDC Manager is older than
            threshold set for error level
        :type  local_data_time: :class:`str` or ``None``
        :param local_data_time: Last update time of vSAN HCL data in SDDC Manager
        """
        self.remote_data_timestamp = remote_data_timestamp
        self.local_data_timestamp = local_data_timestamp
        self.last_error = last_error
        self.is_local_data_missing = is_local_data_missing
        self.is_new_data_available = is_new_data_available
        self.is_warning_threshold_exceeded = is_warning_threshold_exceeded
        self.is_error_threshold_exceeded = is_error_threshold_exceeded
        self.local_data_time = local_data_time
        VapiStruct.__init__(self)


VsanHclAttributes._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vsan_hcl_attributes', {
        'remoteDataTimestamp': type.OptionalType(type.IntegerType()),
        'localDataTimestamp': type.OptionalType(type.IntegerType()),
        'lastError': type.OptionalType(type.StringType()),
        'isLocalDataMissing': type.OptionalType(type.BooleanType()),
        'isNewDataAvailable': type.OptionalType(type.BooleanType()),
        'isWarningThresholdExceeded': type.OptionalType(type.BooleanType()),
        'isErrorThresholdExceeded': type.OptionalType(type.BooleanType()),
        'localDataTime': type.OptionalType(type.StringType()),
    },
    VsanHclAttributes,
    False,
    None))



class PageOfVcfService(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`VcfService` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfVcfService._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_vcf_service', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VcfService'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfVcfService,
    False,
    None))



class VcfService(VapiStruct):
    """
    VCF service representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'version': 'version',
                            'status': 'status',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 version=None,
                 status=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the service
        :type  name: :class:`str` or ``None``
        :param name: Name of the service
        :type  version: :class:`str` or ``None``
        :param version: Version of the service
        :type  status: :class:`str` or ``None``
        :param status: Status of the service
        """
        self.id = id
        self.name = name
        self.version = version
        self.status = status
        VapiStruct.__init__(self)


VcfService._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_service', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
    },
    VcfService,
    False,
    None))



class VcfAutomation(VapiStruct):
    """
    VCF Automation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'fqdn': 'fqdn',
                            'deploymentStatus': 'deployment_status',
                            'deploymentType': 'deployment_type',
                            }

    def __init__(self,
                 fqdn=None,
                 deployment_status=None,
                 deployment_type=None,
                ):
        """
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN 
            
            * Property is read-only.
            
            
        :type  deployment_status: :class:`str` or ``None``
        :param deployment_status: VCF Automation deployment status. One among: NOT_FOUND,
            NOT_STARTED, IN_PROGRESS, FAILED, SUCCEEDED 
            
            * Property is read-only.
            
            
        :type  deployment_type: :class:`str` or ``None``
        :param deployment_type: VCF Automation deployment type. One among: NEW, EXISTING 
            
            * Property is read-only.
            
            
        """
        self.fqdn = fqdn
        self.deployment_status = deployment_status
        self.deployment_type = deployment_type
        VapiStruct.__init__(self)


VcfAutomation._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_automation', {
        'fqdn': type.OptionalType(type.StringType()),
        'deploymentStatus': type.OptionalType(type.StringType()),
        'deploymentType': type.OptionalType(type.StringType()),
    },
    VcfAutomation,
    False,
    None))



class VcfManagementComponents(VapiStruct):
    """
    VCF Management Components

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'vcfOperationsFleetManagement': 'vcf_operations_fleet_management',
                            'vcfOperations': 'vcf_operations',
                            'vcfOperationsCollector': 'vcf_operations_collector',
                            'vcfAutomation': 'vcf_automation',
                            }

    def __init__(self,
                 vcf_operations_fleet_management=None,
                 vcf_operations=None,
                 vcf_operations_collector=None,
                 vcf_automation=None,
                ):
        """
        :type  vcf_operations_fleet_management: :class:`VcfOperationsFleetManagement` or ``None``
        :param vcf_operations_fleet_management:         :type  vcf_operations: :class:`VcfOperations` or ``None``
        :param vcf_operations:         :type  vcf_operations_collector: :class:`VcfOperationsCollector` or ``None``
        :param vcf_operations_collector:         :type  vcf_automation: :class:`VcfAutomation` or ``None``
        :param vcf_automation:         """
        self.vcf_operations_fleet_management = vcf_operations_fleet_management
        self.vcf_operations = vcf_operations
        self.vcf_operations_collector = vcf_operations_collector
        self.vcf_automation = vcf_automation
        VapiStruct.__init__(self)


VcfManagementComponents._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_management_components', {
        'vcfOperationsFleetManagement': type.OptionalType(type.ReferenceType(__name__, 'VcfOperationsFleetManagement')),
        'vcfOperations': type.OptionalType(type.ReferenceType(__name__, 'VcfOperations')),
        'vcfOperationsCollector': type.OptionalType(type.ReferenceType(__name__, 'VcfOperationsCollector')),
        'vcfAutomation': type.OptionalType(type.ReferenceType(__name__, 'VcfAutomation')),
    },
    VcfManagementComponents,
    False,
    None))



class VcfOperations(VapiStruct):
    """
    VCF Operations

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nodes': 'nodes',
                            'loadBalancerFqdn': 'load_balancer_fqdn',
                            'deploymentStatus': 'deployment_status',
                            'deploymentType': 'deployment_type',
                            }

    def __init__(self,
                 nodes=None,
                 load_balancer_fqdn=None,
                 deployment_status=None,
                 deployment_type=None,
                ):
        """
        :type  nodes: :class:`list` of :class:`VcfOperationsNodeDetails` or ``None``
        :param nodes: List of nodes 
            
            * Property is read-only.
            
            
        :type  load_balancer_fqdn: :class:`str` or ``None``
        :param load_balancer_fqdn: Load Balancer FQDN 
            
            * Property is read-only.
            
            
        :type  deployment_status: :class:`str` or ``None``
        :param deployment_status: VCF Operations deployment status. One among: NOT_FOUND,
            NOT_STARTED, IN_PROGRESS, FAILED, SUCCEEDED 
            
            * Property is read-only.
            
            
        :type  deployment_type: :class:`str` or ``None``
        :param deployment_type: VCF Operations deployment type. One among: NEW, EXISTING 
            
            * Property is read-only.
            
            
        """
        self.nodes = nodes
        self.load_balancer_fqdn = load_balancer_fqdn
        self.deployment_status = deployment_status
        self.deployment_type = deployment_type
        VapiStruct.__init__(self)


VcfOperations._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_operations', {
        'nodes': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VcfOperationsNodeDetails'))),
        'loadBalancerFqdn': type.OptionalType(type.StringType()),
        'deploymentStatus': type.OptionalType(type.StringType()),
        'deploymentType': type.OptionalType(type.StringType()),
    },
    VcfOperations,
    False,
    None))



class VcfOperationsCollector(VapiStruct):
    """
    VCF Operations collector

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'fqdn': 'fqdn',
                            'deploymentStatus': 'deployment_status',
                            'deploymentType': 'deployment_type',
                            }

    def __init__(self,
                 fqdn=None,
                 deployment_status=None,
                 deployment_type=None,
                ):
        """
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN 
            
            * Property is read-only.
            
            
        :type  deployment_status: :class:`str` or ``None``
        :param deployment_status: VCF Operations collector deployment status. One among: NOT_FOUND,
            NOT_STARTED, IN_PROGRESS, FAILED, SUCCEEDED 
            
            * Property is read-only.
            
            
        :type  deployment_type: :class:`str` or ``None``
        :param deployment_type: VCF Operations collector deployment type. Only valid value is: NEW 
            
            * Property is read-only.
            
            
        """
        self.fqdn = fqdn
        self.deployment_status = deployment_status
        self.deployment_type = deployment_type
        VapiStruct.__init__(self)


VcfOperationsCollector._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_operations_collector', {
        'fqdn': type.OptionalType(type.StringType()),
        'deploymentStatus': type.OptionalType(type.StringType()),
        'deploymentType': type.OptionalType(type.StringType()),
    },
    VcfOperationsCollector,
    False,
    None))



class VcfOperationsFleetManagement(VapiStruct):
    """
    VCF Operations fleet management

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'fqdn': 'fqdn',
                            'deploymentStatus': 'deployment_status',
                            'deploymentType': 'deployment_type',
                            }

    def __init__(self,
                 fqdn=None,
                 deployment_status=None,
                 deployment_type=None,
                ):
        """
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN 
            
            * Property is read-only.
            
            
        :type  deployment_status: :class:`str` or ``None``
        :param deployment_status: VCF Operations fleet management deployment status. One among:
            NOT_FOUND, NOT_STARTED, IN_PROGRESS, FAILED, SUCCEEDED 
            
            * Property is read-only.
            
            
        :type  deployment_type: :class:`str` or ``None``
        :param deployment_type: VCF Operations fleet management deployment type. One among: NEW,
            EXISTING 
            
            * Property is read-only.
            
            
        """
        self.fqdn = fqdn
        self.deployment_status = deployment_status
        self.deployment_type = deployment_type
        VapiStruct.__init__(self)


VcfOperationsFleetManagement._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_operations_fleet_management', {
        'fqdn': type.OptionalType(type.StringType()),
        'deploymentStatus': type.OptionalType(type.StringType()),
        'deploymentType': type.OptionalType(type.StringType()),
    },
    VcfOperationsFleetManagement,
    False,
    None))



class VcfOperationsNodeDetails(VapiStruct):
    """
    VCF Operations node details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'fqdn': 'fqdn',
                            'type': 'type',
                            }

    def __init__(self,
                 fqdn=None,
                 type=None,
                ):
        """
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Node type. One among: master, replica, data 
            
            * Property is read-only.
            
            
        """
        self.fqdn = fqdn
        self.type = type
        VapiStruct.__init__(self)


VcfOperationsNodeDetails._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcf_operations_node_details', {
        'fqdn': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
    },
    VcfOperationsNodeDetails,
    False,
    None))



class PageOfTask(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Task` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfTask._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_task', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Task'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfTask,
    False,
    None))



class PageOfVcenter(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Vcenter` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfVcenter._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_vcenter', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Vcenter'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfVcenter,
    False,
    None))



class Vcenter(VapiStruct):
    """
    vCenter representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'fqdn': 'fqdn',
                            'ipAddress': 'ip_address',
                            'domain': 'domain',
                            'version': 'version',
                            'status': 'status',
                            }

    def __init__(self,
                 id=None,
                 fqdn=None,
                 ip_address=None,
                 domain=None,
                 version=None,
                 status=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the vCenter 
            
            * Property is read-only.
            
            
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN of the vCenter 
            
            * Property is read-only.
            
            
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: [Deprecated] IP address of the vCenter 
            
            * Property is read-only.
            
            
        :type  domain: :class:`DomainReference` or ``None``
        :param domain:         :type  version: :class:`str` or ``None``
        :param version: Version of the vCenter 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: Status of the vCenter 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.fqdn = fqdn
        self.ip_address = ip_address
        self.domain = domain
        self.version = version
        self.status = status
        VapiStruct.__init__(self)


Vcenter._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vcenter', {
        'id': type.OptionalType(type.StringType()),
        'fqdn': type.OptionalType(type.StringType()),
        'ipAddress': type.OptionalType(type.StringType()),
        'domain': type.OptionalType(type.ReferenceType(__name__, 'DomainReference')),
        'version': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
    },
    Vcenter,
    False,
    None))



class PageOfVasaProvider(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`VasaProvider` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfVasaProvider._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_vasa_provider', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VasaProvider'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfVasaProvider,
    False,
    None))



class LocalUser(VapiStruct):
    """
    Represents Local User and its attributes

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'isConfigured': 'is_configured',
                            'id': 'id',
                            'name': 'name',
                            'domain': 'domain',
                            'type': 'type',
                            'apiKey': 'api_key',
                            'role': 'role',
                            'creationTimestamp': 'creation_timestamp',
                            }

    def __init__(self,
                 is_configured=None,
                 id=None,
                 name=None,
                 domain=None,
                 type=None,
                 api_key=None,
                 role=None,
                 creation_timestamp=None,
                ):
        """
        :type  is_configured: :class:`bool` or ``None``
        :param is_configured: Flag indicating whether or not local account is configured 
            
            * Property is read-only.
            
            
        :type  id: :class:`str` or ``None``
        :param id: The ID of the user
        :type  name: :class:`str` or ``None``
        :param name: The name of the user
        :type  domain: :class:`str` or ``None``
        :param domain: The domain of the user
        :type  type: :class:`str` or ``None``
        :param type: The type of the user
        :type  api_key: :class:`str` or ``None``
        :param api_key: The API key of the user - DEPRECATED
        :type  role: :class:`RoleReference` or ``None``
        :param role:         :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: The timestamp at which the user was created
        """
        self.is_configured = is_configured
        self.id = id
        self.name = name
        self.domain = domain
        self.type = type
        self.api_key = api_key
        self.role = role
        self.creation_timestamp = creation_timestamp
        VapiStruct.__init__(self)


LocalUser._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.local_user', {
        'isConfigured': type.OptionalType(type.BooleanType()),
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'domain': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'apiKey': type.OptionalType(type.StringType()),
        'role': type.OptionalType(type.ReferenceType(__name__, 'RoleReference')),
        'creationTimestamp': type.OptionalType(type.StringType()),
    },
    LocalUser,
    False,
    None))



class PageOfUpgrade(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Upgrade` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfUpgrade._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_upgrade', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Upgrade'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfUpgrade,
    False,
    None))



class BundleReference(VapiStruct):
    """
    Represents a bundle reference

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            }

    def __init__(self,
                 id=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Bundle ID 
            
            * Property is read-only.
            
            
        """
        self.id = id
        VapiStruct.__init__(self)


BundleReference._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.bundle_reference', {
        'id': type.OptionalType(type.StringType()),
    },
    BundleReference,
    False,
    None))



class UpgradeEligibilityResult(VapiStruct):
    """
    Upgrade eligibility result.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'status': 'status',
                            'details': 'details',
                            }

    def __init__(self,
                 status=None,
                 details=None,
                ):
        """
        :type  status: :class:`str` or ``None``
        :param status: upgrade eligibility status.
        :type  details: :class:`list` of :class:`UpgradeGuardrailResult` or ``None``
        :param details: Upgrade eligibility result detail, one eligibility has multiple
            guardrails.
        """
        self.status = status
        self.details = details
        VapiStruct.__init__(self)


UpgradeEligibilityResult._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.upgrade_eligibility_result', {
        'status': type.OptionalType(type.StringType()),
        'details': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'UpgradeGuardrailResult'))),
    },
    UpgradeEligibilityResult,
    False,
    None))



class UpgradeGuardrailResult(VapiStruct):
    """
    Upgrade guardrail result.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'description': 'description',
                            'status': 'status',
                            'reasonCode': 'reason_code',
                            'remediationCode': 'remediation_code',
                            }

    def __init__(self,
                 name=None,
                 description=None,
                 status=None,
                 reason_code=None,
                 remediation_code=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Upgrade guardrail name
        :type  description: :class:`str` or ``None``
        :param description: Upgrade guardrail description
        :type  status: :class:`str` or ``None``
        :param status: Upgrade guardrail status
        :type  reason_code: :class:`str` or ``None``
        :param reason_code: Upgrade guardrail reason code
        :type  remediation_code: :class:`str` or ``None``
        :param remediation_code: Upgrade guardrail remediation code
        """
        self.name = name
        self.description = description
        self.status = status
        self.reason_code = reason_code
        self.remediation_code = remediation_code
        VapiStruct.__init__(self)


UpgradeGuardrailResult._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.upgrade_guardrail_result', {
        'name': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'reasonCode': type.OptionalType(type.StringType()),
        'remediationCode': type.OptionalType(type.StringType()),
    },
    UpgradeGuardrailResult,
    False,
    None))



class UpgradeItem(VapiStruct):
    """
    Upgrade item which contain details regarding the upgrade resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceId': 'resource_id',
                            'bundleComponentType': 'bundle_component_type',
                            'upgradeEligibility': 'upgrade_eligibility',
                            }

    def __init__(self,
                 resource_id=None,
                 bundle_component_type=None,
                 upgrade_eligibility=None,
                ):
        """
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: ID for upgrade resource
        :type  bundle_component_type: :class:`str` or ``None``
        :param bundle_component_type: Component type for upgrade resource
        :type  upgrade_eligibility: :class:`UpgradeEligibilityResult` or ``None``
        :param upgrade_eligibility:         """
        self.resource_id = resource_id
        self.bundle_component_type = bundle_component_type
        self.upgrade_eligibility = upgrade_eligibility
        VapiStruct.__init__(self)


UpgradeItem._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.upgrade_item', {
        'resourceId': type.OptionalType(type.StringType()),
        'bundleComponentType': type.OptionalType(type.StringType()),
        'upgradeEligibility': type.OptionalType(type.ReferenceType(__name__, 'UpgradeEligibilityResult')),
    },
    UpgradeItem,
    False,
    None))



class UpgradePreview(VapiStruct):
    """
    Upgrade preview which contain details regarding the upgrade resources for
    the bundle

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'bundle': 'bundle',
                            'domain': 'domain',
                            'resourceMapper': 'resource_mapper',
                            'upgradeItems': 'upgrade_items',
                            }

    def __init__(self,
                 bundle=None,
                 domain=None,
                 resource_mapper=None,
                 upgrade_items=None,
                ):
        """
        :type  bundle: :class:`BundleReference` or ``None``
        :param bundle:         :type  domain: :class:`DomainReference` or ``None``
        :param domain:         :type  resource_mapper: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param resource_mapper: Resource domain map for host cluster upgrade items
        :type  upgrade_items: :class:`list` of :class:`UpgradeItem` or ``None``
        :param upgrade_items: Upgrade items for this preview
        """
        self.bundle = bundle
        self.domain = domain
        self.resource_mapper = resource_mapper
        self.upgrade_items = upgrade_items
        VapiStruct.__init__(self)


UpgradePreview._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.upgrade_preview', {
        'bundle': type.OptionalType(type.ReferenceType(__name__, 'BundleReference')),
        'domain': type.OptionalType(type.ReferenceType(__name__, 'DomainReference')),
        'resourceMapper': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
        'upgradeItems': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'UpgradeItem'))),
    },
    UpgradePreview,
    False,
    None))



class SoftwareComponent(VapiStruct):
    """
    Software Components which are Upgradable

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'type': 'type',
                            }

    def __init__(self,
                 id=None,
                 type=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of Resource/Software Component 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Type of Resource/Software Component 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.type = type
        VapiStruct.__init__(self)


SoftwareComponent._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.software_component', {
        'id': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
    },
    SoftwareComponent,
    False,
    None))



class Upgradable(VapiStruct):
    """
    Upgradable represents the upgrade capability of resources. It contains the
    bundle(using what), resource(on which) and its associated
    resources/software components that can be upgraded.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'bundleId': 'bundle_id',
                            'bundleType': 'bundle_type',
                            'resource': 'resource',
                            'softwareComponents': 'software_components',
                            'status': 'status',
                            'errors': 'errors',
                            }

    def __init__(self,
                 bundle_id=None,
                 bundle_type=None,
                 resource=None,
                 software_components=None,
                 status=None,
                 errors=None,
                ):
        """
        :type  bundle_id: :class:`str` or ``None``
        :param bundle_id: Bundle ID 
            
            * Property is read-only.
            
            
        :type  bundle_type: :class:`str` or ``None``
        :param bundle_type: Bundle Type 
            
            * Property is read-only.
            
            
        :type  resource: :class:`Resource` or ``None``
        :param resource:         :type  software_components: :class:`list` of :class:`SoftwareComponent` or ``None``
        :param software_components: Software Components which are Upgradable 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: Upgradable Status 
            
            * Property is read-only.
            
            
        :type  errors: :class:`list` of :class:`Error` or ``None``
        :param errors: Upgradable Errors found during computation of upgrade availabiltiy.
            
            * Property is read-only.
            
            
        """
        self.bundle_id = bundle_id
        self.bundle_type = bundle_type
        self.resource = resource
        self.software_components = software_components
        self.status = status
        self.errors = errors
        VapiStruct.__init__(self)


Upgradable._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.upgradable', {
        'bundleId': type.OptionalType(type.StringType()),
        'bundleType': type.OptionalType(type.StringType()),
        'resource': type.OptionalType(type.ReferenceType(__name__, 'Resource')),
        'softwareComponents': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SoftwareComponent'))),
        'status': type.OptionalType(type.StringType()),
        'errors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Error'))),
    },
    Upgradable,
    False,
    None))



class HardwareSupportPackage(VapiStruct):
    """
    Hardware Support Specification for Firmware Upgrade

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'displayName': 'display_name',
                            'pkg': 'pkg',
                            }

    def __init__(self,
                 name=None,
                 display_name=None,
                 pkg=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Hardware Support Manager name
        :type  display_name: :class:`str` or ``None``
        :param display_name: Hardware Support Manager display name
        :type  pkg: :class:`Package` or ``None``
        :param pkg:         """
        self.name = name
        self.display_name = display_name
        self.pkg = pkg
        VapiStruct.__init__(self)


HardwareSupportPackage._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.hardware_support_package', {
        'name': type.OptionalType(type.StringType()),
        'displayName': type.OptionalType(type.StringType()),
        'pkg': type.OptionalType(type.ReferenceType(__name__, 'Package')),
    },
    HardwareSupportPackage,
    False,
    None))



class HardwareSupportPackages(VapiStruct):
    """
    Available Hardware Support Manager details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'displayName': 'display_name',
                            'packages': 'packages',
                            }

    def __init__(self,
                 name=None,
                 display_name=None,
                 packages=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Hardware Support Manager name
        :type  display_name: :class:`str` or ``None``
        :param display_name: Hardware Support Manager display name
        :type  packages: :class:`list` of :class:`Package` or ``None``
        :param packages: Hardware Support Packages
        """
        self.name = name
        self.display_name = display_name
        self.packages = packages
        VapiStruct.__init__(self)


HardwareSupportPackages._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.hardware_support_packages', {
        'name': type.OptionalType(type.StringType()),
        'displayName': type.OptionalType(type.StringType()),
        'packages': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Package'))),
    },
    HardwareSupportPackages,
    False,
    None))



class NsxtEdgeCluster(VapiStruct):
    """
    NSX Edge Cluster Upgrade Resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'upgradeStatus': 'upgrade_status',
                            'resourceHealth': 'resource_health',
                            'version': 'version',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 upgrade_status=None,
                 resource_health=None,
                 version=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Edge cluster id
        :type  name: :class:`str` or ``None``
        :param name: Edge cluster name
        :type  upgrade_status: :class:`str` or ``None``
        :param upgrade_status: Upgrade status with respect to the bundle
        :type  resource_health: :class:`str` or ``None``
        :param resource_health: Current resource health status
        :type  version: :class:`str` or ``None``
        :param version: The current version of the edge cluster.If a partial upgrade is
            done, this will be the least version among the edges in the edge
            cluster
        """
        self.id = id
        self.name = name
        self.upgrade_status = upgrade_status
        self.resource_health = resource_health
        self.version = version
        VapiStruct.__init__(self)


NsxtEdgeCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_edge_cluster', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'upgradeStatus': type.OptionalType(type.StringType()),
        'resourceHealth': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
    },
    NsxtEdgeCluster,
    False,
    None))



class NsxtHostCluster(VapiStruct):
    """
    NSX Host Cluster Upgrade Resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'upgradeStatus': 'upgrade_status',
                            'resourceHealth': 'resource_health',
                            'upgradedUnits': 'upgraded_units',
                            'totalUnits': 'total_units',
                            'domainId': 'domain_id',
                            'version': 'version',
                            'primaryCluster': 'primary_cluster',
                            'vLcmEnabled': 'v_lcm_enabled',
                            'configuredHardwareSupportManagers': 'configured_hardware_support_managers',
                            'availableHardwareSupportManagers': 'available_hardware_support_managers',
                            'nsxtComponentId': 'nsxt_component_id',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 upgrade_status=None,
                 resource_health=None,
                 upgraded_units=None,
                 total_units=None,
                 domain_id=None,
                 version=None,
                 primary_cluster=None,
                 v_lcm_enabled=None,
                 configured_hardware_support_managers=None,
                 available_hardware_support_managers=None,
                 nsxt_component_id=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Host cluster VCF cluster id
        :type  name: :class:`str` or ``None``
        :param name: Cluster name
        :type  upgrade_status: :class:`str` or ``None``
        :param upgrade_status: Upgrade status with respect to the bundle
        :type  resource_health: :class:`str` or ``None``
        :param resource_health: Current resource health status
        :type  upgraded_units: :class:`long` or ``None``
        :param upgraded_units: Number of hosts which are already upgraded
        :type  total_units: :class:`long` or ``None``
        :param total_units: Total number of hosts in the Host cluster
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: Id of the domain the Host cluster belongs to
        :type  version: :class:`str` or ``None``
        :param version: The current version of the host node cluster.If a partial upgrade
            is done, this will be the least version among the hosts
        :type  primary_cluster: :class:`bool` or ``None``
        :param primary_cluster: Flag to determine if primary cluster for vLCM
        :type  v_lcm_enabled: :class:`bool` or ``None``
        :param v_lcm_enabled: Flag to determine if vLCM enabled on the cluster
        :type  configured_hardware_support_managers: :class:`list` of :class:`HardwareSupportPackage` or ``None``
        :param configured_hardware_support_managers: Configured Hardware Support Managers for Firmware upgrade
        :type  available_hardware_support_managers: :class:`list` of :class:`HardwareSupportPackages` or ``None``
        :param available_hardware_support_managers: Available Hardware Support Managers for Firmware upgrade
        :type  nsxt_component_id: :class:`str` or ``None``
        :param nsxt_component_id: Nsxt Component native id of the nsxt host cluster
        """
        self.id = id
        self.name = name
        self.upgrade_status = upgrade_status
        self.resource_health = resource_health
        self.upgraded_units = upgraded_units
        self.total_units = total_units
        self.domain_id = domain_id
        self.version = version
        self.primary_cluster = primary_cluster
        self.v_lcm_enabled = v_lcm_enabled
        self.configured_hardware_support_managers = configured_hardware_support_managers
        self.available_hardware_support_managers = available_hardware_support_managers
        self.nsxt_component_id = nsxt_component_id
        VapiStruct.__init__(self)


NsxtHostCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_host_cluster', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'upgradeStatus': type.OptionalType(type.StringType()),
        'resourceHealth': type.OptionalType(type.StringType()),
        'upgradedUnits': type.OptionalType(type.IntegerType()),
        'totalUnits': type.OptionalType(type.IntegerType()),
        'domainId': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'primaryCluster': type.OptionalType(type.BooleanType()),
        'vLcmEnabled': type.OptionalType(type.BooleanType()),
        'configuredHardwareSupportManagers': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HardwareSupportPackage'))),
        'availableHardwareSupportManagers': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HardwareSupportPackages'))),
        'nsxtComponentId': type.OptionalType(type.StringType()),
    },
    NsxtHostCluster,
    False,
    None))



class NsxtManagerCluster(VapiStruct):
    """
    Nsx Manager Cluster Upgrade Resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'upgradeStatus': 'upgrade_status',
                            'resourceHealth': 'resource_health',
                            'version': 'version',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 upgrade_status=None,
                 resource_health=None,
                 version=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Manager cluster id
        :type  name: :class:`str` or ``None``
        :param name: Manager cluster name
        :type  upgrade_status: :class:`str` or ``None``
        :param upgrade_status: Upgrade status with respect to the bundle
        :type  resource_health: :class:`str` or ``None``
        :param resource_health: Current resource health status
        :type  version: :class:`str` or ``None``
        :param version: The current version of the manager cluster.If a partial upgrade is
            done, this will be the least version among the managers in the
            manager cluster
        """
        self.id = id
        self.name = name
        self.upgrade_status = upgrade_status
        self.resource_health = resource_health
        self.version = version
        VapiStruct.__init__(self)


NsxtManagerCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_manager_cluster', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'upgradeStatus': type.OptionalType(type.StringType()),
        'resourceHealth': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
    },
    NsxtManagerCluster,
    False,
    None))



class NsxtResources(VapiStruct):
    """
    NSX Upgrade Resources for an NSX instance

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'nsxtHostClusters': 'nsxt_host_clusters',
                            'nsxtEdgeClusters': 'nsxt_edge_clusters',
                            'nsxtManagerCluster': 'nsxt_manager_cluster',
                            'nsxtUpgradeCoordinator': 'nsxt_upgrade_coordinator',
                            'bundleId': 'bundle_id',
                            'domainId': 'domain_id',
                            }

    def __init__(self,
                 nsxt_host_clusters=None,
                 nsxt_edge_clusters=None,
                 nsxt_manager_cluster=None,
                 nsxt_upgrade_coordinator=None,
                 bundle_id=None,
                 domain_id=None,
                ):
        """
        :type  nsxt_host_clusters: :class:`list` of :class:`NsxtHostCluster` or ``None``
        :param nsxt_host_clusters: List of host clusters that are candidates for upgrade
        :type  nsxt_edge_clusters: :class:`list` of :class:`NsxtEdgeCluster` or ``None``
        :param nsxt_edge_clusters: List of edge clusters that are candidates for upgrade
        :type  nsxt_manager_cluster: :class:`NsxtManagerCluster` or ``None``
        :param nsxt_manager_cluster:         :type  nsxt_upgrade_coordinator: :class:`NsxtUpgradeCoordinator` or ``None``
        :param nsxt_upgrade_coordinator:         :type  bundle_id: :class:`str` or ``None``
        :param bundle_id: Bundle id used to compute the upgradability
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: Domain id associated with the NSX cluster
        """
        self.nsxt_host_clusters = nsxt_host_clusters
        self.nsxt_edge_clusters = nsxt_edge_clusters
        self.nsxt_manager_cluster = nsxt_manager_cluster
        self.nsxt_upgrade_coordinator = nsxt_upgrade_coordinator
        self.bundle_id = bundle_id
        self.domain_id = domain_id
        VapiStruct.__init__(self)


NsxtResources._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_resources', {
        'nsxtHostClusters': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtHostCluster'))),
        'nsxtEdgeClusters': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtEdgeCluster'))),
        'nsxtManagerCluster': type.OptionalType(type.ReferenceType(__name__, 'NsxtManagerCluster')),
        'nsxtUpgradeCoordinator': type.OptionalType(type.ReferenceType(__name__, 'NsxtUpgradeCoordinator')),
        'bundleId': type.OptionalType(type.StringType()),
        'domainId': type.OptionalType(type.StringType()),
    },
    NsxtResources,
    False,
    None))



class NsxtUpgradeCoordinator(VapiStruct):
    """
    NSX Upgrade coordinator Upgrade Resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'upgradeStatus': 'upgrade_status',
                            'resourceHealth': 'resource_health',
                            'version': 'version',
                            'enabledOn': 'enabled_on',
                            }

    def __init__(self,
                 id=None,
                 upgrade_status=None,
                 resource_health=None,
                 version=None,
                 enabled_on=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Upgrade coordinator id
        :type  upgrade_status: :class:`str` or ``None``
        :param upgrade_status: Upgrade status with respect to the bundle
        :type  resource_health: :class:`str` or ``None``
        :param resource_health: Current resource health status
        :type  version: :class:`str` or ``None``
        :param version: The current version of the UC
        :type  enabled_on: :class:`str` or ``None``
        :param enabled_on: The IP of the manager on which UC is enabled
        """
        self.id = id
        self.upgrade_status = upgrade_status
        self.resource_health = resource_health
        self.version = version
        self.enabled_on = enabled_on
        VapiStruct.__init__(self)


NsxtUpgradeCoordinator._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_upgrade_coordinator', {
        'id': type.OptionalType(type.StringType()),
        'upgradeStatus': type.OptionalType(type.StringType()),
        'resourceHealth': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'enabledOn': type.OptionalType(type.StringType()),
    },
    NsxtUpgradeCoordinator,
    False,
    None))



class Package(VapiStruct):
    """
    Hardware Support Package Specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'version': 'version',
                            }

    def __init__(self,
                 name=None,
                 version=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Package name
        :type  version: :class:`str` or ``None``
        :param version: Package version
        """
        self.name = name
        self.version = version
        VapiStruct.__init__(self)


Package._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.package', {
        'name': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
    },
    Package,
    False,
    None))



class PageOfUpgradablesClusterResource(VapiStruct):
    """
    Represents a page of elements of a Upgradables Cluster Resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            }

    def __init__(self,
                 elements=None,
                ):
        """
        :type  elements: :class:`list` of :class:`UpgradablesClusterResource` or ``None``
        :param elements: The list of Upgradables Cluster Resource elements included in this
            page 
            
            * Property is read-only.
            
            
        """
        self.elements = elements
        VapiStruct.__init__(self)


PageOfUpgradablesClusterResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_upgradables_cluster_resource', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'UpgradablesClusterResource'))),
    },
    PageOfUpgradablesClusterResource,
    False,
    None))



class UpgradablesClusterResource(VapiStruct):
    """
    Upgradables clusters details with hardware support managers

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceId': 'resource_id',
                            'resourceType': 'resource_type',
                            'primaryCluster': 'primary_cluster',
                            'softwareInfo': 'software_info',
                            'vlcmEnabled': 'vlcm_enabled',
                            'configuredHardwareSupportManagers': 'configured_hardware_support_managers',
                            'availableHardwareSupportManagers': 'available_hardware_support_managers',
                            }

    def __init__(self,
                 resource_id=None,
                 resource_type=None,
                 primary_cluster=None,
                 software_info=None,
                 vlcm_enabled=None,
                 configured_hardware_support_managers=None,
                 available_hardware_support_managers=None,
                ):
        """
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: Resource Id
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Resource Type
        :type  primary_cluster: :class:`bool` or ``None``
        :param primary_cluster: Flag for primary cluster
        :type  software_info: :class:`SoftwareInfo` or ``None``
        :param software_info:         :type  vlcm_enabled: :class:`bool` or ``None``
        :param vlcm_enabled: Flag to determine if vLCM enabled on the cluster
        :type  configured_hardware_support_managers: :class:`list` of :class:`HardwareSupportPackage` or ``None``
        :param configured_hardware_support_managers: Configured Hardware Support Managers for Firmware upgrade
        :type  available_hardware_support_managers: :class:`list` of :class:`HardwareSupportPackages` or ``None``
        :param available_hardware_support_managers: Available Hardware Support Managers for Firmware upgrade
        """
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.primary_cluster = primary_cluster
        self.software_info = software_info
        self.vlcm_enabled = vlcm_enabled
        self.configured_hardware_support_managers = configured_hardware_support_managers
        self.available_hardware_support_managers = available_hardware_support_managers
        VapiStruct.__init__(self)


UpgradablesClusterResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.upgradables_cluster_resource', {
        'resourceId': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'primaryCluster': type.OptionalType(type.BooleanType()),
        'softwareInfo': type.OptionalType(type.ReferenceType(__name__, 'SoftwareInfo')),
        'vlcmEnabled': type.OptionalType(type.BooleanType()),
        'configuredHardwareSupportManagers': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HardwareSupportPackage'))),
        'availableHardwareSupportManagers': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HardwareSupportPackages'))),
    },
    UpgradablesClusterResource,
    False,
    None))



class System(VapiStruct):
    """
    Represents a system

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'maxAllowedDomainsInSubscription': 'max_allowed_domains_in_subscription',
                            }

    def __init__(self,
                 id=None,
                 max_allowed_domains_in_subscription=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The identifier of the system 
            
            * Property is read-only.
            
            
        :type  max_allowed_domains_in_subscription: :class:`long` or ``None``
        :param max_allowed_domains_in_subscription: The maximum number of domains allowed in subscription mode 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.max_allowed_domains_in_subscription = max_allowed_domains_in_subscription
        VapiStruct.__init__(self)


System._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.system', {
        'id': type.OptionalType(type.StringType()),
        'maxAllowedDomainsInSubscription': type.OptionalType(type.IntegerType()),
    },
    System,
    False,
    None))



class PageOfSupportBundle(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`SupportBundle` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfSupportBundle._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_support_bundle', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SupportBundle'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfSupportBundle,
    False,
    None))



class Fips(VapiStruct):
    """
    Represents VCF FIPS mode status (enabled/disabled)

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'enabled': 'enabled',
                            }

    def __init__(self,
                 enabled=None,
                ):
        """
        :type  enabled: :class:`bool` or ``None``
        :param enabled: VCF FIPS mode status 
            
            * Property is read-only.
            
            
        """
        self.enabled = enabled
        VapiStruct.__init__(self)


Fips._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.fips', {
        'enabled': type.OptionalType(type.BooleanType()),
    },
    Fips,
    False,
    None))



class PageOfHealthSummary(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`HealthSummary` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfHealthSummary._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_health_summary', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HealthSummary'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfHealthSummary,
    False,
    None))



class AssessmentMetadata(VapiStruct):
    """
    Metadata about the assessment run that is triggered and passed to the
    result

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'targetVersion': 'target_version',
                            'resources': 'resources',
                            'upgradeId': 'upgrade_id',
                            }

    def __init__(self,
                 target_version=None,
                 resources=None,
                 upgrade_id=None,
                ):
        """
        :type  target_version: :class:`str` or ``None``
        :param target_version: Version of target state definitions that is going to be used for
            assessment
        :type  resources: :class:`list` of :class:`AssessmentResource` or ``None``
        :param resources: Resources of target state definitions that is going to be used for
            assessment
        :type  upgrade_id: :class:`str` or ``None``
        :param upgrade_id: Upgrade Id for the configure upgrade precheck
        """
        self.target_version = target_version
        self.resources = resources
        self.upgrade_id = upgrade_id
        VapiStruct.__init__(self)


AssessmentMetadata._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.assessment_metadata', {
        'targetVersion': type.OptionalType(type.StringType()),
        'resources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'AssessmentResource'))),
        'upgradeId': type.OptionalType(type.StringType()),
    },
    AssessmentMetadata,
    False,
    None))



class AssessmentResource(VapiStruct):
    """
    Resource information for the assessment

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'id': 'id',
                            'name': 'name',
                            'domainId': 'domain_id',
                            'targetVersion': 'target_version',
                            }

    def __init__(self,
                 type=None,
                 id=None,
                 name=None,
                 domain_id=None,
                 target_version=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: Type of the resource
        :type  id: :class:`str` or ``None``
        :param id: ID of the resource
        :type  name: :class:`str` or ``None``
        :param name: Name of the resource
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: Domain ID of the resource
        :type  target_version: :class:`str` or ``None``
        :param target_version: Target upgrade version for the resource
        """
        self.type = type
        self.id = id
        self.name = name
        self.domain_id = domain_id
        self.target_version = target_version
        VapiStruct.__init__(self)


AssessmentResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.assessment_resource', {
        'type': type.OptionalType(type.StringType()),
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'domainId': type.OptionalType(type.StringType()),
        'targetVersion': type.OptionalType(type.StringType()),
    },
    AssessmentResource,
    False,
    None))



class AssessmentTaskInfo(VapiStruct):
    """
    A summary of an assessment execution

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'state': 'state',
                            'timestamp': 'timestamp',
                            'completionTimestamp': 'completion_timestamp',
                            'domainInputs': 'domain_inputs',
                            'metadata': 'metadata',
                            }

    def __init__(self,
                 id=None,
                 state=None,
                 timestamp=None,
                 completion_timestamp=None,
                 domain_inputs=None,
                 metadata=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The id of the assessment run
        :type  state: :class:`str` or ``None``
        :param state: The related task state of the run associated to the given result
        :type  timestamp: :class:`long` or ``None``
        :param timestamp: Timestamp corresponding to the time when the assessment was
            initiated
        :type  completion_timestamp: :class:`long` or ``None``
        :param completion_timestamp: Timestamp corresponding to the time when the assessment was
            finished
        :type  domain_inputs: :class:`list` of :class:`DomainInfo` or ``None``
        :param domain_inputs: The domains that have been assessed in the run associated to the
            given result
        :type  metadata: :class:`AssessmentMetadata` or ``None``
        :param metadata:         """
        self.id = id
        self.state = state
        self.timestamp = timestamp
        self.completion_timestamp = completion_timestamp
        self.domain_inputs = domain_inputs
        self.metadata = metadata
        VapiStruct.__init__(self)


AssessmentTaskInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.assessment_task_info', {
        'id': type.OptionalType(type.StringType()),
        'state': type.OptionalType(type.StringType()),
        'timestamp': type.OptionalType(type.IntegerType()),
        'completionTimestamp': type.OptionalType(type.IntegerType()),
        'domainInputs': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'DomainInfo'))),
        'metadata': type.OptionalType(type.ReferenceType(__name__, 'AssessmentMetadata')),
    },
    AssessmentTaskInfo,
    False,
    None))



class AssessmentOutput(VapiStruct):
    """
    Result from the baseliner assessment run (execution result, presented
    artifacts or ask for extra info).

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """
    STATUS_IN_PROGRESS = "IN_PROGRESS"
    """
    Execution status

    """
    STATUS_COMPLETED_WITH_SUCCESS = "COMPLETED_WITH_SUCCESS"
    """
    Execution status

    """
    STATUS_COMPLETED_WITH_FAILURE = "COMPLETED_WITH_FAILURE"
    """
    Execution status

    """



    _canonical_to_pep_names = {
                            'physicalPresentedData': 'physical_presented_data',
                            'presentedArtifactsMap': 'presented_artifacts_map',
                            'validationResult': 'validation_result',
                            'status': 'status',
                            'inputValidationErrors': 'input_validation_errors',
                            'discoveryProgress': 'discovery_progress',
                            'relatedAssessmentId': 'related_assessment_id',
                            'timestamp': 'timestamp',
                            'completionTimestamp': 'completion_timestamp',
                            }

    def __init__(self,
                 physical_presented_data=None,
                 presented_artifacts_map=None,
                 validation_result=None,
                 status=None,
                 input_validation_errors=None,
                 discovery_progress=None,
                 related_assessment_id=None,
                 timestamp=None,
                 completion_timestamp=None,
                ):
        """
        :type  physical_presented_data: :class:`EntityRest` or ``None``
        :param physical_presented_data:         :type  presented_artifacts_map: (:class:`dict` of :class:`str` and :class:`vmware.vapi.struct.VapiStruct`) or ``None``
        :param presented_artifacts_map: Extra assessment artefacts produced by the workflow
        :type  validation_result: :class:`Error` or ``None``
        :param validation_result:         :type  status: :class:`str` or ``None``
        :param status: Execution status
        :type  input_validation_errors: :class:`list` of :class:`Error` or ``None``
        :param input_validation_errors: Set of the input validation errors
        :type  discovery_progress: :class:`DiscoveryProgress` or ``None``
        :param discovery_progress:         :type  related_assessment_id: :class:`str` or ``None``
        :param related_assessment_id: Related assessment run id
        :type  timestamp: :class:`str` or ``None``
        :param timestamp: Assessment task creation timestamp 
            
            * Property is read-only.
            
            
        :type  completion_timestamp: :class:`str` or ``None``
        :param completion_timestamp: Assessment task completion timestamp 
            
            * Property is read-only.
            
            
        """
        self.physical_presented_data = physical_presented_data
        self.presented_artifacts_map = presented_artifacts_map
        self.validation_result = validation_result
        self.status = status
        self.input_validation_errors = input_validation_errors
        self.discovery_progress = discovery_progress
        self.related_assessment_id = related_assessment_id
        self.timestamp = timestamp
        self.completion_timestamp = completion_timestamp
        VapiStruct.__init__(self)


AssessmentOutput._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.assessment_output', {
        'physicalPresentedData': type.OptionalType(type.ReferenceType(__name__, 'EntityRest')),
        'presentedArtifactsMap': type.OptionalType(type.MapType(type.StringType(), type.DynamicStructType('vmware.vapi.dynamic_struct', {}, VapiStruct))),
        'validationResult': type.OptionalType(type.ReferenceType(__name__, 'Error')),
        'status': type.OptionalType(type.StringType()),
        'inputValidationErrors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Error'))),
        'discoveryProgress': type.OptionalType(type.ReferenceType(__name__, 'DiscoveryProgress')),
        'relatedAssessmentId': type.OptionalType(type.StringType()),
        'timestamp': type.OptionalType(type.StringType()),
        'completionTimestamp': type.OptionalType(type.StringType()),
    },
    AssessmentOutput,
    False,
    None))



class Classification(VapiStruct):
    """
    Describes the source of the classification,classification can be acquired
    by a classifier, user input or inherited from a parent entity.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """
    SOURCE_CLASSIFIER = "CLASSIFIER"
    """
    Source of the classification

    """
    SOURCE_USER_INPUT = "USER_INPUT"
    """
    Source of the classification

    """
    SOURCE_INHERITED = "INHERITED"
    """
    Source of the classification

    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'value': 'value',
                            'description': 'description',
                            'source': 'source',
                            }

    def __init__(self,
                 type=None,
                 value=None,
                 description=None,
                 source=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: Type of the classification, e.g. domainType
        :type  value: :class:`str` or ``None``
        :param value: Value of the classification, e.g. MGMT_DOMAIN
        :type  description: :class:`str` or ``None``
        :param description: Description of the classification
        :type  source: :class:`str` or ``None``
        :param source: Source of the classification
        """
        self.type = type
        self.value = value
        self.description = description
        self.source = source
        VapiStruct.__init__(self)


Classification._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.classification', {
        'type': type.OptionalType(type.StringType()),
        'value': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'source': type.OptionalType(type.StringType()),
    },
    Classification,
    False,
    None))



class DiscoveryProgress(VapiStruct):
    """
    Information about the assessment run progress.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'progressMessages': 'progress_messages',
                            'percentageComplete': 'percentage_complete',
                            }

    def __init__(self,
                 progress_messages=None,
                 percentage_complete=None,
                ):
        """
        :type  progress_messages: :class:`list` of :class:`str` or ``None``
        :param progress_messages: Progress messages
        :type  percentage_complete: :class:`long` or ``None``
        :param percentage_complete: Percentage completed
        """
        self.progress_messages = progress_messages
        self.percentage_complete = percentage_complete
        VapiStruct.__init__(self)


DiscoveryProgress._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.discovery_progress', {
        'progressMessages': type.OptionalType(type.ListType(type.StringType())),
        'percentageComplete': type.OptionalType(type.IntegerType()),
    },
    DiscoveryProgress,
    False,
    None))



class EntityRest(VapiStruct):
    """
    Entity model representing the physical data output of the assessment
    workflow.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'type': 'type',
                            'name': 'name',
                            'properties': 'properties',
                            'childEntities': 'child_entities',
                            'description': 'description',
                            'sourceAddress': 'source_address',
                            'classifications': 'classifications',
                            }

    def __init__(self,
                 id=None,
                 type=None,
                 name=None,
                 properties=None,
                 child_entities=None,
                 description=None,
                 source_address=None,
                 classifications=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Id of the entity
        :type  type: :class:`str` or ``None``
        :param type: Type of the entity
        :type  name: :class:`str` or ``None``
        :param name: Name of the entity
        :type  properties: (:class:`dict` of :class:`str` and :class:`vmware.vapi.struct.VapiStruct`) or ``None``
        :param properties: Properties for this entity
        :type  child_entities: :class:`list` of :class:`EntityRest` or ``None``
        :param child_entities: Child entities of this entity
        :type  description: :class:`str` or ``None``
        :param description: Description of the entity
        :type  source_address: :class:`str` or ``None``
        :param source_address: The address of the source
        :type  classifications: :class:`list` of :class:`Classification` or ``None``
        :param classifications: Classifications of the entity
        """
        self.id = id
        self.type = type
        self.name = name
        self.properties = properties
        self.child_entities = child_entities
        self.description = description
        self.source_address = source_address
        self.classifications = classifications
        VapiStruct.__init__(self)


EntityRest._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.entity_rest', {
        'id': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'properties': type.OptionalType(type.MapType(type.StringType(), type.DynamicStructType('vmware.vapi.dynamic_struct', {}, VapiStruct))),
        'childEntities': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'EntityRest'))),
        'description': type.OptionalType(type.StringType()),
        'sourceAddress': type.OptionalType(type.StringType()),
        'classifications': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Classification'))),
    },
    EntityRest,
    False,
    None))



class Ceip(VapiStruct):
    """
    Defines VCF CEIP status and instance id

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'status': 'status',
                            'instanceId': 'instance_id',
                            }

    def __init__(self,
                 status=None,
                 instance_id=None,
                ):
        """
        :type  status: :class:`str` or ``None``
        :param status: CEIP status
        :type  instance_id: :class:`str` or ``None``
        :param instance_id: Instance Id of VCF 
            
            * Property is read-only.
            
            
        """
        self.status = status
        self.instance_id = instance_id
        VapiStruct.__init__(self)


Ceip._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ceip', {
        'status': type.OptionalType(type.StringType()),
        'instanceId': type.OptionalType(type.StringType()),
    },
    Ceip,
    False,
    None))



class BackupConfiguration(VapiStruct):
    """
    Backup configuration used to configure backup of NSX and SDDC manager

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'encryption': 'encryption',
                            'backupLocations': 'backup_locations',
                            'backupSchedules': 'backup_schedules',
                            'isConfigured': 'is_configured',
                            }

    def __init__(self,
                 encryption=None,
                 backup_locations=None,
                 backup_schedules=None,
                 is_configured=None,
                ):
        """
        :type  encryption: :class:`Encryption` or ``None``
        :param encryption:         :type  backup_locations: :class:`list` of :class:`BackupLocation` or ``None``
        :param backup_locations: List of backup locations 
            
            * Property is read-only.
            
            
        :type  backup_schedules: :class:`list` of :class:`BackupSchedule` or ``None``
        :param backup_schedules: List of backup schedules 
            
            * Property is read-only.
            
            
        :type  is_configured: :class:`bool` or ``None``
        :param is_configured: Backup configuration status of both FTP server and passphrase 
            
            * Property is read-only.
            
            
        """
        self.encryption = encryption
        self.backup_locations = backup_locations
        self.backup_schedules = backup_schedules
        self.is_configured = is_configured
        VapiStruct.__init__(self)


BackupConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.backup_configuration', {
        'encryption': type.OptionalType(type.ReferenceType(__name__, 'Encryption')),
        'backupLocations': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BackupLocation'))),
        'backupSchedules': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BackupSchedule'))),
        'isConfigured': type.OptionalType(type.BooleanType()),
    },
    BackupConfiguration,
    False,
    None))



class ApplianceInfo(VapiStruct):
    """
    Appliance Information

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'role': 'role',
                            'version': 'version',
                            }

    def __init__(self,
                 role=None,
                 version=None,
                ):
        """
        :type  role: :class:`str` or ``None``
        :param role: Appliance Role
        :type  version: :class:`str` or ``None``
        :param version: Appliance version
        """
        self.role = role
        self.version = version
        VapiStruct.__init__(self)


ApplianceInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.appliance_info', {
        'role': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
    },
    ApplianceInfo,
    False,
    None))



class PageOfString(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`str` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfString._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_string', {
        'elements': type.OptionalType(type.ListType(type.StringType())),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfString,
    False,
    None))



class PageOfSsoDomainEntity(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`SsoDomainEntity` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfSsoDomainEntity._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_sso_domain_entity', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SsoDomainEntity'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfSsoDomainEntity,
    False,
    None))



class SsoDomainEntity(VapiStruct):
    """
    Represents SSO domain entity

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'type': 'type',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 type=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The ID of the SSO domain entity 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: The name of the SSO domain entity 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: The type of the SSO domain entity 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.name = name
        self.type = type
        VapiStruct.__init__(self)


SsoDomainEntity._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sso_domain_entity', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
    },
    SsoDomainEntity,
    False,
    None))



class BasicAuthDetails(VapiStruct):
    """
    Basic auth details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'status': 'status',
                            'username': 'username',
                            }

    def __init__(self,
                 status=None,
                 username=None,
                ):
        """
        :type  status: :class:`str` or ``None``
        :param status: Basic auth status
        :type  username: :class:`str` or ``None``
        :param username: Basic auth username 
            
            * Property is read-only.
            
            
        """
        self.status = status
        self.username = username
        VapiStruct.__init__(self)


BasicAuthDetails._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.basic_auth_details', {
        'status': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
    },
    BasicAuthDetails,
    False,
    None))



class PageOfSddcManager(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`SddcManager` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfSddcManager._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_sddc_manager', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SddcManager'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfSddcManager,
    False,
    None))



class SddcManager(VapiStruct):
    """
    SDDC Manager representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domain': 'domain',
                            'basicAuthDetails': 'basic_auth_details',
                            'id': 'id',
                            'fqdn': 'fqdn',
                            'version': 'version',
                            'ipAddress': 'ip_address',
                            }

    def __init__(self,
                 domain=None,
                 basic_auth_details=None,
                 id=None,
                 fqdn=None,
                 version=None,
                 ip_address=None,
                ):
        """
        :type  domain: :class:`DomainReference` or ``None``
        :param domain:         :type  basic_auth_details: :class:`BasicAuthDetails` or ``None``
        :param basic_auth_details:         :type  id: :class:`str` or ``None``
        :param id: ID of the SDDC Manager
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN of the SDDC Manager
        :type  version: :class:`str` or ``None``
        :param version: Version of the SDDC Manager 
            
            * Property is read-only.
            
            
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: [Deprecated] IP Address of the SDDC Manager
        """
        self.domain = domain
        self.basic_auth_details = basic_auth_details
        self.id = id
        self.fqdn = fqdn
        self.version = version
        self.ip_address = ip_address
        VapiStruct.__init__(self)


SddcManager._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sddc_manager', {
        'domain': type.OptionalType(type.ReferenceType(__name__, 'DomainReference')),
        'basicAuthDetails': type.OptionalType(type.ReferenceType(__name__, 'BasicAuthDetails')),
        'id': type.OptionalType(type.StringType()),
        'fqdn': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'ipAddress': type.OptionalType(type.StringType()),
    },
    SddcManager,
    False,
    None))



class History(VapiStruct):
    """
    Represents version change history for a resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'versions': 'versions',
                            }

    def __init__(self,
                 versions=None,
                ):
        """
        :type  versions: :class:`list` of :class:`Version` or ``None``
        :param versions: The list of version change
        """
        self.versions = versions
        VapiStruct.__init__(self)


History._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.history', {
        'versions': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Version'))),
    },
    History,
    False,
    None))



class BundleDownload(VapiStruct):
    """
    Represents a download record of a bundle. A bundle may be associated with
    multiple downloads if previous downloads failed

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """
    STATUS_PENDING_SCHEDULED_INPROGRESS_SUCCESS_FAILED_ = "PENDING,SCHEDULED,INPROGRESS,SUCCESS,FAILED;"
    """
    Bundle download status

    """



    _canonical_to_pep_names = {
                            'downloadId': 'download_id',
                            'bundleId': 'bundle_id',
                            'scheduledTime': 'scheduled_time',
                            'status': 'status',
                            'startTime': 'start_time',
                            'endTime': 'end_time',
                            'downloadError': 'download_error',
                            }

    def __init__(self,
                 download_id=None,
                 bundle_id=None,
                 scheduled_time=None,
                 status=None,
                 start_time=None,
                 end_time=None,
                 download_error=None,
                ):
        """
        :type  download_id: :class:`str` or ``None``
        :param download_id: Uniquely identity a download 
            
            * Property is read-only.
            
            
        :type  bundle_id: :class:`str` or ``None``
        :param bundle_id: Bundle id associated with this download 
            
            * Property is read-only.
            
            
        :type  scheduled_time: :class:`long` or ``None``
        :param scheduled_time: The scheduled time when the download to start 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: Bundle download status 
            
            * Property is read-only.
            
            
        :type  start_time: :class:`long` or ``None``
        :param start_time: The actual start download time 
            
            * Property is read-only.
            
            
        :type  end_time: :class:`long` or ``None``
        :param end_time: The actual end download time 
            
            * Property is read-only.
            
            
        :type  download_error: :class:`DownloadBundleError` or ``None``
        :param download_error:         """
        self.download_id = download_id
        self.bundle_id = bundle_id
        self.scheduled_time = scheduled_time
        self.status = status
        self.start_time = start_time
        self.end_time = end_time
        self.download_error = download_error
        VapiStruct.__init__(self)


BundleDownload._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.bundle_download', {
        'downloadId': type.OptionalType(type.StringType()),
        'bundleId': type.OptionalType(type.StringType()),
        'scheduledTime': type.OptionalType(type.IntegerType()),
        'status': type.OptionalType(type.StringType()),
        'startTime': type.OptionalType(type.IntegerType()),
        'endTime': type.OptionalType(type.IntegerType()),
        'downloadError': type.OptionalType(type.ReferenceType(__name__, 'DownloadBundleError')),
    },
    BundleDownload,
    False,
    None))



class DownloadBundleError(VapiStruct):
    """
    Describe a download error

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'errorCode': 'error_code',
                            'errorMessage': 'error_message',
                            'stackTraceStr': 'stack_trace_str',
                            'retriable': 'retriable',
                            }

    def __init__(self,
                 error_code=None,
                 error_message=None,
                 stack_trace_str=None,
                 retriable=None,
                ):
        """
        :type  error_code: :class:`str` or ``None``
        :param error_code: Error code 
            
            * Property is read-only.
            
            
        :type  error_message: :class:`str` or ``None``
        :param error_message: Error message 
            
            * Property is read-only.
            
            
        :type  stack_trace_str: :class:`str` or ``None``
        :param stack_trace_str: Exception stack trace string 
            
            * Property is read-only.
            
            
        :type  retriable: :class:`bool` or ``None``
        :param retriable: Error is retriable 
            
            * Property is read-only.
            
            
        """
        self.error_code = error_code
        self.error_message = error_message
        self.stack_trace_str = stack_trace_str
        self.retriable = retriable
        VapiStruct.__init__(self)


DownloadBundleError._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.download_bundle_error', {
        'errorCode': type.OptionalType(type.StringType()),
        'errorMessage': type.OptionalType(type.StringType()),
        'stackTraceStr': type.OptionalType(type.StringType()),
        'retriable': type.OptionalType(type.BooleanType()),
    },
    DownloadBundleError,
    False,
    None))



class DownloadProgressIndicator(VapiStruct):
    """
    Download progress indicator

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'downloadedBytes': 'downloaded_bytes',
                            'isDownloadCancelled': 'is_download_cancelled',
                            }

    def __init__(self,
                 downloaded_bytes=None,
                 is_download_cancelled=None,
                ):
        """
        :type  downloaded_bytes: :class:`long` or ``None``
        :param downloaded_bytes: Number of bytes downloaded 
            
            * Property is read-only.
            
            
        :type  is_download_cancelled: :class:`bool` or ``None``
        :param is_download_cancelled: is download cancelled 
            
            * Property is read-only.
            
            
        """
        self.downloaded_bytes = downloaded_bytes
        self.is_download_cancelled = is_download_cancelled
        VapiStruct.__init__(self)


DownloadProgressIndicator._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.download_progress_indicator', {
        'downloadedBytes': type.OptionalType(type.IntegerType()),
        'isDownloadCancelled': type.OptionalType(type.BooleanType()),
    },
    DownloadProgressIndicator,
    False,
    None))



class PageOfSddcManagerUpgradable(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`SddcManagerUpgradable` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfSddcManagerUpgradable._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_sddc_manager_upgradable', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SddcManagerUpgradable'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfSddcManagerUpgradable,
    False,
    None))



class SddcManagerBundle(VapiStruct):
    """
    SDDC Manager Bundle consists the bits to perform the upgrade of an SDDC
    Manager

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'type': 'type',
                            'description': 'description',
                            'version': 'version',
                            'vendor': 'vendor',
                            'releasedDate': 'released_date',
                            'isCumulative': 'is_cumulative',
                            'sizeMB': 'size_mb',
                            'downloadStatus': 'download_status',
                            'downloadProgress': 'download_progress',
                            'downloadStartTime': 'download_start_time',
                            'downloadEndTime': 'download_end_time',
                            'bundleDownload': 'bundle_download',
                            }

    def __init__(self,
                 id=None,
                 type=None,
                 description=None,
                 version=None,
                 vendor=None,
                 released_date=None,
                 is_cumulative=None,
                 size_mb=None,
                 download_status=None,
                 download_progress=None,
                 download_start_time=None,
                 download_end_time=None,
                 bundle_download=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Bundle ID 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Bundle Type 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Bundle Description 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: Bundle Version 
            
            * Property is read-only.
            
            
        :type  vendor: :class:`str` or ``None``
        :param vendor: Bundle Vendor 
            
            * Property is read-only.
            
            
        :type  released_date: :class:`str` or ``None``
        :param released_date: Bundle Release Date 
            
            * Property is read-only.
            
            
        :type  is_cumulative: :class:`bool` or ``None``
        :param is_cumulative: Is Bundle Cumulative 
            
            * Property is read-only.
            
            
        :type  size_mb: :class:`float` or ``None``
        :param size_mb: Bundle Size in MB 
            
            * Property is read-only.
            
            
        :type  download_status: :class:`str` or ``None``
        :param download_status: Bundle Download Status 
            
            * Property is read-only.
            
            
        :type  download_progress: :class:`DownloadProgressIndicator` or ``None``
        :param download_progress:         :type  download_start_time: :class:`long` or ``None``
        :param download_start_time: Bundle download start time
        :type  download_end_time: :class:`long` or ``None``
        :param download_end_time: Bundle download end time
        :type  bundle_download: :class:`BundleDownload` or ``None``
        :param bundle_download:         """
        self.id = id
        self.type = type
        self.description = description
        self.version = version
        self.vendor = vendor
        self.released_date = released_date
        self.is_cumulative = is_cumulative
        self.size_mb = size_mb
        self.download_status = download_status
        self.download_progress = download_progress
        self.download_start_time = download_start_time
        self.download_end_time = download_end_time
        self.bundle_download = bundle_download
        VapiStruct.__init__(self)


SddcManagerBundle._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sddc_manager_bundle', {
        'id': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'vendor': type.OptionalType(type.StringType()),
        'releasedDate': type.OptionalType(type.StringType()),
        'isCumulative': type.OptionalType(type.BooleanType()),
        'sizeMB': type.OptionalType(type.DoubleType()),
        'downloadStatus': type.OptionalType(type.StringType()),
        'downloadProgress': type.OptionalType(type.ReferenceType(__name__, 'DownloadProgressIndicator')),
        'downloadStartTime': type.OptionalType(type.IntegerType()),
        'downloadEndTime': type.OptionalType(type.IntegerType()),
        'bundleDownload': type.OptionalType(type.ReferenceType(__name__, 'BundleDownload')),
    },
    SddcManagerBundle,
    False,
    None))



class SddcManagerUpgradable(VapiStruct):
    """
    SDDC Manager Upgradable consists of release information, bits and the
    upgrade information to upgrade SDDC Manager on the system.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'description': 'description',
                            'version': 'version',
                            'releaseDate': 'release_date',
                            'applicabilityStatus': 'applicability_status',
                            'compatibilityStatus': 'compatibility_status',
                            'errors': 'errors',
                            'warnings': 'warnings',
                            'sddcManagerBundle': 'sddc_manager_bundle',
                            'upgrade': 'upgrade',
                            }

    def __init__(self,
                 description=None,
                 version=None,
                 release_date=None,
                 applicability_status=None,
                 compatibility_status=None,
                 errors=None,
                 warnings=None,
                 sddc_manager_bundle=None,
                 upgrade=None,
                ):
        """
        :type  description: :class:`str` or ``None``
        :param description: SDDC Manager Release Description 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: SDDC Manager Release Version 
            
            * Property is read-only.
            
            
        :type  release_date: :class:`str` or ``None``
        :param release_date: SDDC Manager Release Date 
            
            * Property is read-only.
            
            
        :type  applicability_status: :class:`str` or ``None``
        :param applicability_status: SDDC Manager Release Applicability Status 
            
            * Property is read-only.
            
            
        :type  compatibility_status: :class:`str` or ``None``
        :param compatibility_status: SDDC Manager Release Compatibility Status 
            
            * Property is read-only.
            
            
        :type  errors: :class:`list` of :class:`MessagePack` or ``None``
        :param errors: SDDC Manager Release in-applicability reasons 
            
            * Property is read-only.
            
            
        :type  warnings: :class:`list` of :class:`MessagePack` or ``None``
        :param warnings: SDDC Manager Release applicable with warnings reasons 
            
            * Property is read-only.
            
            
        :type  sddc_manager_bundle: :class:`SddcManagerBundle` or ``None``
        :param sddc_manager_bundle:         :type  upgrade: :class:`Upgrade` or ``None``
        :param upgrade:         """
        self.description = description
        self.version = version
        self.release_date = release_date
        self.applicability_status = applicability_status
        self.compatibility_status = compatibility_status
        self.errors = errors
        self.warnings = warnings
        self.sddc_manager_bundle = sddc_manager_bundle
        self.upgrade = upgrade
        VapiStruct.__init__(self)


SddcManagerUpgradable._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sddc_manager_upgradable', {
        'description': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'releaseDate': type.OptionalType(type.StringType()),
        'applicabilityStatus': type.OptionalType(type.StringType()),
        'compatibilityStatus': type.OptionalType(type.StringType()),
        'errors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'MessagePack'))),
        'warnings': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'MessagePack'))),
        'sddcManagerBundle': type.OptionalType(type.ReferenceType(__name__, 'SddcManagerBundle')),
        'upgrade': type.OptionalType(type.ReferenceType(__name__, 'Upgrade')),
    },
    SddcManagerUpgradable,
    False,
    None))



class LocalOsUserAccount(VapiStruct):
    """
    Local OS user account details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'username': 'username',
                            'lastPasswordChange': 'last_password_change',
                            'passwordExpiresAt': 'password_expires_at',
                            'passwordInactiveAt': 'password_inactive_at',
                            'accountExpiresAt': 'account_expires_at',
                            'maxDaysBetweenPasswordChange': 'max_days_between_password_change',
                            'minDaysBetweenPasswordChange': 'min_days_between_password_change',
                            'warnDaysBeforePasswordExpiration': 'warn_days_before_password_expiration',
                            }

    def __init__(self,
                 username=None,
                 last_password_change=None,
                 password_expires_at=None,
                 password_inactive_at=None,
                 account_expires_at=None,
                 max_days_between_password_change=None,
                 min_days_between_password_change=None,
                 warn_days_before_password_expiration=None,
                ):
        """
        :type  username: :class:`str` or ``None``
        :param username: The username of the local OS account
        :type  last_password_change: :class:`str` or ``None``
        :param last_password_change: The date and time when the user last changed their password
        :type  password_expires_at: :class:`str` or ``None``
        :param password_expires_at: The date and time when the user's password will expire
        :type  password_inactive_at: :class:`str` or ``None``
        :param password_inactive_at: The date and time when the user's password becomes inactive
        :type  account_expires_at: :class:`str` or ``None``
        :param account_expires_at: The date and time when the user's account will expire
        :type  max_days_between_password_change: :class:`long` or ``None``
        :param max_days_between_password_change: The maximum number of days that a user can keep the same password
            before being required to change it
        :type  min_days_between_password_change: :class:`long` or ``None``
        :param min_days_between_password_change: The minimum number of days that must elapse before a user can
            change their password again
        :type  warn_days_before_password_expiration: :class:`long` or ``None``
        :param warn_days_before_password_expiration: The number of days before the password expiration date that the
            user will be warned
        """
        self.username = username
        self.last_password_change = last_password_change
        self.password_expires_at = password_expires_at
        self.password_inactive_at = password_inactive_at
        self.account_expires_at = account_expires_at
        self.max_days_between_password_change = max_days_between_password_change
        self.min_days_between_password_change = min_days_between_password_change
        self.warn_days_before_password_expiration = warn_days_before_password_expiration
        VapiStruct.__init__(self)


LocalOsUserAccount._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.local_os_user_account', {
        'username': type.OptionalType(type.StringType()),
        'lastPasswordChange': type.OptionalType(type.StringType()),
        'passwordExpiresAt': type.OptionalType(type.StringType()),
        'passwordInactiveAt': type.OptionalType(type.StringType()),
        'accountExpiresAt': type.OptionalType(type.StringType()),
        'maxDaysBetweenPasswordChange': type.OptionalType(type.IntegerType()),
        'minDaysBetweenPasswordChange': type.OptionalType(type.IntegerType()),
        'warnDaysBeforePasswordExpiration': type.OptionalType(type.IntegerType()),
    },
    LocalOsUserAccount,
    False,
    None))



class PageOfRole(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Role` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfRole._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_role', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Role'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfRole,
    False,
    None))



class Role(VapiStruct):
    """
    Represents role and its attributes

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'description': 'description',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 description=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The ID of the role 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: The name of the role 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: The description of the role 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.name = name
        self.description = description
        VapiStruct.__init__(self)


Role._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.role', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
    },
    Role,
    False,
    None))



class PageOfResourceWarning(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`ResourceWarning` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfResourceWarning._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_resource_warning', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ResourceWarning'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfResourceWarning,
    False,
    None))



class PageOfResourceFunctionalities(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`ResourceFunctionalities` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfResourceFunctionalities._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_resource_functionalities', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ResourceFunctionalities'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfResourceFunctionalities,
    False,
    None))



class ResourceFunctionalitiesGlobalConfiguration(VapiStruct):
    """
    Defines a resource functionality caller specification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'isAllowed': 'is_allowed',
                            'errorMessage': 'error_message',
                            }

    def __init__(self,
                 is_allowed=None,
                 error_message=None,
                ):
        """
        :type  is_allowed: :class:`bool` or ``None``
        :param is_allowed: Global flag representing if all of the VMware Cloud Foundation
            operations are allowed or not
        :type  error_message: :class:`str` or ``None``
        :param error_message: The localized error message
        """
        self.is_allowed = is_allowed
        self.error_message = error_message
        VapiStruct.__init__(self)


ResourceFunctionalitiesGlobalConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.resource_functionalities_global_configuration', {
        'isAllowed': type.OptionalType(type.BooleanType()),
        'errorMessage': type.OptionalType(type.StringType()),
    },
    ResourceFunctionalitiesGlobalConfiguration,
    False,
    None))



class PageOfRelease(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Release` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfRelease._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_release', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Release'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfRelease,
    False,
    None))



class CustomPatch(VapiStruct):
    """
    Patch or Install info from Product Version Catalog.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'productVersion': 'product_version',
                            'date': 'date',
                            'artifacts': 'artifacts',
                            }

    def __init__(self,
                 product_version=None,
                 date=None,
                 artifacts=None,
                ):
        """
        :type  product_version: :class:`str` or ``None``
        :param product_version: Product version of the install/patch bundle 
            
            * Property is read-only.
            
            
        :type  date: :class:`str` or ``None``
        :param date: Time of publish of the product e.g. 2020-06-08T02:20:15.844Z 
            
            * Property is read-only.
            
            
        :type  artifacts: :class:`CustomPatchArtifact` or ``None``
        :param artifacts:         """
        self.product_version = product_version
        self.date = date
        self.artifacts = artifacts
        VapiStruct.__init__(self)


CustomPatch._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.custom_patch', {
        'productVersion': type.OptionalType(type.StringType()),
        'date': type.OptionalType(type.StringType()),
        'artifacts': type.OptionalType(type.ReferenceType(__name__, 'CustomPatchArtifact')),
    },
    CustomPatch,
    False,
    None))



class CustomPatchArtifact(VapiStruct):
    """
    Patch rest model that is located in the Product Version Catalog.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'bundles': 'bundles',
                            }

    def __init__(self,
                 bundles=None,
                ):
        """
        :type  bundles: :class:`list` of :class:`CustomPatchBundleInfo` or ``None``
        :param bundles: List of bundle artifacts for corresponding product patch/install
            version 
            
            * Property is read-only.
            
            
        """
        self.bundles = bundles
        VapiStruct.__init__(self)


CustomPatchArtifact._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.custom_patch_artifact', {
        'bundles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CustomPatchBundleInfo'))),
    },
    CustomPatchArtifact,
    False,
    None))



class CustomPatchBundleInfo(VapiStruct):
    """
    Patch/Install bundle info from ProductVersionCatalog.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'type': 'type',
                            'name': 'name',
                            'size': 'size',
                            }

    def __init__(self,
                 id=None,
                 type=None,
                 name=None,
                 size=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Bundle id 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Type of bundle. ex) PATCH, INSTALL 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: Patch/Install bundle name 
            
            * Property is read-only.
            
            
        :type  size: :class:`long` or ``None``
        :param size: Binary size 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.type = type
        self.name = name
        self.size = size
        VapiStruct.__init__(self)


CustomPatchBundleInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.custom_patch_bundle_info', {
        'id': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'size': type.OptionalType(type.IntegerType()),
    },
    CustomPatchBundleInfo,
    False,
    None))



class PageOfReleaseComponentDetail(VapiStruct):
    """
    Paginated response containing the list of release component detail.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`ReleaseComponentDetail` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfReleaseComponentDetail._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_release_component_detail', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ReleaseComponentDetail'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfReleaseComponentDetail,
    False,
    None))



class ProductReleaseComponent(VapiStruct):
    """
    Product Release Component

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'sku': 'sku',
                            'publicName': 'public_name',
                            'automatedInstall': 'automated_install',
                            'versions': 'versions',
                            }

    def __init__(self,
                 name=None,
                 sku=None,
                 public_name=None,
                 automated_install=None,
                 versions=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Product name 
            
            * Property is read-only.
            
            
        :type  sku: :class:`str` or ``None``
        :param sku: SKU of the install/patch bundle 
            
            * Property is read-only.
            
            
        :type  public_name: :class:`str` or ``None``
        :param public_name: Product public name 
            
            * Property is read-only.
            
            
        :type  automated_install: :class:`bool` or ``None``
        :param automated_install: automated Install 
            
            * Property is read-only.
            
            
        :type  versions: :class:`list` of :class:`CustomPatch` or ``None``
        :param versions: Product version details 
            
            * Property is read-only.
            
            
        """
        self.name = name
        self.sku = sku
        self.public_name = public_name
        self.automated_install = automated_install
        self.versions = versions
        VapiStruct.__init__(self)


ProductReleaseComponent._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.product_release_component', {
        'name': type.OptionalType(type.StringType()),
        'sku': type.OptionalType(type.StringType()),
        'publicName': type.OptionalType(type.StringType()),
        'automatedInstall': type.OptionalType(type.BooleanType()),
        'versions': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CustomPatch'))),
    },
    ProductReleaseComponent,
    False,
    None))



class ReleaseComponentDetail(VapiStruct):
    """
    Model for Release Component Detail

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'releaseVersion': 'release_version',
                            'components': 'components',
                            }

    def __init__(self,
                 release_version=None,
                 components=None,
                ):
        """
        :type  release_version: :class:`str` or ``None``
        :param release_version: VCF/VVF release version 
            
            * Property is read-only.
            
            
        :type  components: :class:`list` of :class:`ProductReleaseComponent` or ``None``
        :param components: VCF/VVF release elements 
            
            * Property is read-only.
            
            
        """
        self.release_version = release_version
        self.components = components
        VapiStruct.__init__(self)


ReleaseComponentDetail._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.release_component_detail', {
        'releaseVersion': type.OptionalType(type.StringType()),
        'components': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ProductReleaseComponent'))),
    },
    ReleaseComponentDetail,
    False,
    None))



class DomainReleaseView(VapiStruct):
    """
    Model for domain release view.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainId': 'domain_id',
                            'targetVersion': 'target_version',
                            'targetSddcManagerVersion': 'target_sddc_manager_version',
                            'patches': 'patches',
                            'isCustomizedBom': 'is_customized_bom',
                            }

    def __init__(self,
                 domain_id=None,
                 target_version=None,
                 target_sddc_manager_version=None,
                 patches=None,
                 is_customized_bom=None,
                ):
        """
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: Domain ID
        :type  target_version: :class:`str` or ``None``
        :param target_version: Target upgrade version of the domain
        :type  target_sddc_manager_version: :class:`str` or ``None``
        :param target_sddc_manager_version: Target SDDC Manager version
        :type  patches: :class:`list` of :class:`TargetProductVersion` or ``None``
        :param patches: Target product release and patch versions
        :type  is_customized_bom: :class:`bool` or ``None``
        :param is_customized_bom: Identifier for VCF Release vs Customized BOM 
            
            * Property is read-only.
            
            
        """
        self.domain_id = domain_id
        self.target_version = target_version
        self.target_sddc_manager_version = target_sddc_manager_version
        self.patches = patches
        self.is_customized_bom = is_customized_bom
        VapiStruct.__init__(self)


DomainReleaseView._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.domain_release_view', {
        'domainId': type.OptionalType(type.StringType()),
        'targetVersion': type.OptionalType(type.StringType()),
        'targetSddcManagerVersion': type.OptionalType(type.StringType()),
        'patches': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'TargetProductVersion'))),
        'isCustomizedBom': type.OptionalType(type.BooleanType()),
    },
    DomainReleaseView,
    False,
    None))



class PageOfDomainReleaseView(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`DomainReleaseView` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfDomainReleaseView._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_domain_release_view', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'DomainReleaseView'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfDomainReleaseView,
    False,
    None))



class AlternativeApplicableSddcManagerVersion(VapiStruct):
    """
    Version of Target SDDC Manager

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            }

    def __init__(self,
                 version=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: Version of target SDDC manger 
            
            * Property is read-only.
            
            
        """
        self.version = version
        VapiStruct.__init__(self)


AlternativeApplicableSddcManagerVersion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.alternative_applicable_sddc_manager_version', {
        'version': type.OptionalType(type.StringType()),
    },
    AlternativeApplicableSddcManagerVersion,
    False,
    None))



class DomainFutureRelease(VapiStruct):
    """
    Model for releases with details if applicable to current domain version or
    not.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'reasonNotApplicable': 'reason_not_applicable',
                            'reasonsNotApplicable': 'reasons_not_applicable',
                            'warnings': 'warnings',
                            'alternativeApplicableSddcManagerVersions': 'alternative_applicable_sddc_manager_versions',
                            'applicabilityStatus': 'applicability_status',
                            'product': 'product',
                            'version': 'version',
                            'minCompatibleVcfVersion': 'min_compatible_vcf_version',
                            'description': 'description',
                            'releaseDate': 'release_date',
                            'bom': 'bom',
                            'isApplicable': 'is_applicable',
                            'notApplicableReason': 'not_applicable_reason',
                            'sku': 'sku',
                            'updates': 'updates',
                            'patchBundles': 'patch_bundles',
                            'eol': 'eol',
                            'upgradeOrder': 'upgrade_order',
                            'minInstallerVersion': 'min_installer_version',
                            }

    def __init__(self,
                 reason_not_applicable=None,
                 reasons_not_applicable=None,
                 warnings=None,
                 alternative_applicable_sddc_manager_versions=None,
                 applicability_status=None,
                 product=None,
                 version=None,
                 min_compatible_vcf_version=None,
                 description=None,
                 release_date=None,
                 bom=None,
                 is_applicable=None,
                 not_applicable_reason=None,
                 sku=None,
                 updates=None,
                 patch_bundles=None,
                 eol=None,
                 upgrade_order=None,
                 min_installer_version=None,
                ):
        """
        :type  reason_not_applicable: :class:`MessagePack` or ``None``
        :param reason_not_applicable:         :type  reasons_not_applicable: :class:`list` of :class:`MessagePack` or ``None``
        :param reasons_not_applicable: List of Incompatibility details for not applicable 
            
            * Property is read-only.
            
            
        :type  warnings: :class:`list` of :class:`MessagePack` or ``None``
        :param warnings: List of warning messages for product compatibility 
            
            * Property is read-only.
            
            
        :type  alternative_applicable_sddc_manager_versions: :class:`list` of :class:`AlternativeApplicableSddcManagerVersion` or ``None``
        :param alternative_applicable_sddc_manager_versions: List of AlternativeApplicableSddcManagerVersions 
            
            * Property is read-only.
            
            
        :type  applicability_status: :class:`str` or ``None``
        :param applicability_status: Whether bundle is applicable or not. 
            
            * Property is read-only.
            
            
        :type  product: :class:`str` or ``None``
        :param product: Name of the product e.g. "VCF" 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: Version of the release 
            
            * Property is read-only.
            
            
        :type  min_compatible_vcf_version: :class:`str` or ``None``
        :param min_compatible_vcf_version: Minimum compatible VCF version, used to represent compatibility of
            SDDC Manager and VMware BOM components 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Release description with all major features. 
            
            * Property is read-only.
            
            
        :type  release_date: :class:`str` or ``None``
        :param release_date: Release date e.g. 2020-06-08T02:20:15.844Z in
            yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format 
            
            * Property is read-only.
            
            
        :type  bom: :class:`list` of :class:`ProductVersion` or ``None``
        :param bom: Release bill of materials 
            
            * Property is read-only.
            
            
        :type  is_applicable: :class:`bool` or ``None``
        :param is_applicable: [Deprecated] Whether bundle is applicable or not. 
            
            * Property is read-only.
            
            
        :type  not_applicable_reason: :class:`str` or ``None``
        :param not_applicable_reason: [Deprecated] Incompatibility reason for not applicable. 
            
            * Property is read-only.
            
            
        :type  sku: :class:`list` of :class:`SkuBomDetails` or ``None``
        :param sku: Release sku specific patch and bill of materials 
            
            * Property is read-only.
            
            
        :type  updates: :class:`list` of :class:`ReleaseUpdate` or ``None``
        :param updates: Collection of release updates 
            
            * Property is read-only.
            
            
        :type  patch_bundles: :class:`list` of :class:`PatchBundle` or ``None``
        :param patch_bundles: List of patch bundles in this release 
            
            * Property is read-only.
            
            
        :type  eol: :class:`str` or ``None``
        :param eol: Release eol information e.g. 2020-06-08T02:20:15.844Z in
            yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO 8601 format 
            
            * Property is read-only.
            
            
        :type  upgrade_order: :class:`str` or ``None``
        :param upgrade_order: Custom upgrade order. Comma separated list of components in upgrade
            order. Supported components types: NSX_T_MANAGER, VCENTER,
            ESX_HOST. 
            
            * Property is read-only.
            
            
        :type  min_installer_version: :class:`str` or ``None``
        :param min_installer_version: Minimum installer version, e.g. 9.0.0.0 
            
            * Property is read-only.
            
            
        """
        self.reason_not_applicable = reason_not_applicable
        self.reasons_not_applicable = reasons_not_applicable
        self.warnings = warnings
        self.alternative_applicable_sddc_manager_versions = alternative_applicable_sddc_manager_versions
        self.applicability_status = applicability_status
        self.product = product
        self.version = version
        self.min_compatible_vcf_version = min_compatible_vcf_version
        self.description = description
        self.release_date = release_date
        self.bom = bom
        self.is_applicable = is_applicable
        self.not_applicable_reason = not_applicable_reason
        self.sku = sku
        self.updates = updates
        self.patch_bundles = patch_bundles
        self.eol = eol
        self.upgrade_order = upgrade_order
        self.min_installer_version = min_installer_version
        VapiStruct.__init__(self)


DomainFutureRelease._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.domain_future_release', {
        'reasonNotApplicable': type.OptionalType(type.ReferenceType(__name__, 'MessagePack')),
        'reasonsNotApplicable': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'MessagePack'))),
        'warnings': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'MessagePack'))),
        'alternativeApplicableSddcManagerVersions': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'AlternativeApplicableSddcManagerVersion'))),
        'applicabilityStatus': type.OptionalType(type.StringType()),
        'product': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'minCompatibleVcfVersion': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'releaseDate': type.OptionalType(type.StringType()),
        'bom': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ProductVersion'))),
        'isApplicable': type.OptionalType(type.BooleanType()),
        'notApplicableReason': type.OptionalType(type.StringType()),
        'sku': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SkuBomDetails'))),
        'updates': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ReleaseUpdate'))),
        'patchBundles': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'PatchBundle'))),
        'eol': type.OptionalType(type.StringType()),
        'upgradeOrder': type.OptionalType(type.StringType()),
        'minInstallerVersion': type.OptionalType(type.StringType()),
    },
    DomainFutureRelease,
    False,
    None))



class PageOfDomainFutureRelease(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`DomainFutureRelease` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfDomainFutureRelease._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_domain_future_release', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'DomainFutureRelease'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfDomainFutureRelease,
    False,
    None))



class FlexibleProductPatch(VapiStruct):
    """
    Model for product async/hot patches with their supported product versions

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'productType': 'product_type',
                            'versions': 'versions',
                            }

    def __init__(self,
                 product_type=None,
                 versions=None,
                ):
        """
        :type  product_type: :class:`str` or ``None``
        :param product_type: product type of patch 
            
            * Property is read-only.
            
            
        :type  versions: :class:`list` of :class:`str` or ``None``
        :param versions: supported versions of patch 
            
            * Property is read-only.
            
            
        """
        self.product_type = product_type
        self.versions = versions
        VapiStruct.__init__(self)


FlexibleProductPatch._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.flexible_product_patch', {
        'productType': type.OptionalType(type.StringType()),
        'versions': type.OptionalType(type.ListType(type.StringType())),
    },
    FlexibleProductPatch,
    False,
    None))



class FlexibleProductPatches(VapiStruct):
    """
    Model for supported product async/hot patches associated with a VCF release

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'patches': 'patches',
                            }

    def __init__(self,
                 version=None,
                 patches=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: Domain VCF release version 
            
            * Property is read-only.
            
            
        :type  patches: :class:`list` of :class:`FlexibleProductPatch` or ``None``
        :param patches: List of available patches on the VCF release 
            
            * Property is read-only.
            
            
        """
        self.version = version
        self.patches = patches
        VapiStruct.__init__(self)


FlexibleProductPatches._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.flexible_product_patches', {
        'version': type.OptionalType(type.StringType()),
        'patches': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'FlexibleProductPatch'))),
    },
    FlexibleProductPatches,
    False,
    None))



class CustomPatches(VapiStruct):
    """
    Model for supported product install/patches associated with a VCF/VVF
    release

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'releaseVersion': 'release_version',
                            'patches': 'patches',
                            }

    def __init__(self,
                 release_version=None,
                 patches=None,
                ):
        """
        :type  release_version: :class:`str` or ``None``
        :param release_version: VCF/VVF release version 
            
            * Property is read-only.
            
            
        :type  patches: (:class:`dict` of :class:`str` and :class:`list` of :class:`CustomPatch`) or ``None``
        :param patches: Patches used for the product version catalog 
            
            * Property is read-only.
            
            
        """
        self.release_version = release_version
        self.patches = patches
        VapiStruct.__init__(self)


CustomPatches._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.custom_patches', {
        'releaseVersion': type.OptionalType(type.StringType()),
        'patches': type.OptionalType(type.MapType(type.StringType(), type.ListType(type.ReferenceType(__name__, 'CustomPatch')))),
    },
    CustomPatches,
    False,
    None))



class PageOfPsc(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Psc` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfPsc._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_psc', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Psc'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfPsc,
    False,
    None))



class Psc(VapiStruct):
    """
    Psc representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'fqdn': 'fqdn',
                            'ipAddress': 'ip_address',
                            'ssoDomainName': 'sso_domain_name',
                            'ssoSubDomainName': 'sso_sub_domain_name',
                            'isReplica': 'is_replica',
                            'domain': 'domain',
                            }

    def __init__(self,
                 id=None,
                 fqdn=None,
                 ip_address=None,
                 sso_domain_name=None,
                 sso_sub_domain_name=None,
                 is_replica=None,
                 domain=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the Psc
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN of the Psc
        :type  ip_address: :class:`str` or ``None``
        :param ip_address: [Deprecated] IP Address of the Psc
        :type  sso_domain_name: :class:`str` or ``None``
        :param sso_domain_name: SSO Domain name of the Psc
        :type  sso_sub_domain_name: :class:`str` or ``None``
        :param sso_sub_domain_name: SSO sub domain name of the Psc
        :type  is_replica: :class:`bool` or ``None``
        :param is_replica: Indicates if the Psc is a replica
        :type  domain: :class:`DomainReference` or ``None``
        :param domain:         """
        self.id = id
        self.fqdn = fqdn
        self.ip_address = ip_address
        self.sso_domain_name = sso_domain_name
        self.sso_sub_domain_name = sso_sub_domain_name
        self.is_replica = is_replica
        self.domain = domain
        VapiStruct.__init__(self)


Psc._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.psc', {
        'id': type.OptionalType(type.StringType()),
        'fqdn': type.OptionalType(type.StringType()),
        'ipAddress': type.OptionalType(type.StringType()),
        'ssoDomainName': type.OptionalType(type.StringType()),
        'ssoSubDomainName': type.OptionalType(type.StringType()),
        'isReplica': type.OptionalType(type.BooleanType()),
        'domain': type.OptionalType(type.ReferenceType(__name__, 'DomainReference')),
    },
    Psc,
    False,
    None))



class PageOfPersonality(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Personality` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfPersonality._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_personality', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Personality'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfPersonality,
    False,
    None))



class Personality(VapiStruct):
    """
    Personality contains bits to install/update the appropriate Cloud
    Foundation software components in your management domain or workload
    domain.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'version': 'version',
                            'personalityId': 'personality_id',
                            'personalityName': 'personality_name',
                            'description': 'description',
                            'createdBy': 'created_by',
                            'imageSize': 'image_size',
                            'imageChecksum': 'image_checksum',
                            'vsphereExportedZipPath': 'vsphere_exported_zip_path',
                            'vsphereExportedIsoPath': 'vsphere_exported_iso_path',
                            'vsphereExportedJsonPath': 'vsphere_exported_json_path',
                            'displayName': 'display_name',
                            'releaseDate': 'release_date',
                            'importTimestamp': 'import_timestamp',
                            'tags': 'tags',
                            'kbArticles': 'kb_articles',
                            'softwareInfo': 'software_info',
                            'type': 'type',
                            }

    def __init__(self,
                 version=None,
                 personality_id=None,
                 personality_name=None,
                 description=None,
                 created_by=None,
                 image_size=None,
                 image_checksum=None,
                 vsphere_exported_zip_path=None,
                 vsphere_exported_iso_path=None,
                 vsphere_exported_json_path=None,
                 display_name=None,
                 release_date=None,
                 import_timestamp=None,
                 tags=None,
                 kb_articles=None,
                 software_info=None,
                 type=None,
                ):
        """
        :type  version: :class:`str` or ``None``
        :param version: Personality Version 
            
            * Property is read-only.
            
            
        :type  personality_id: :class:`str` or ``None``
        :param personality_id: Personality id 
            
            * Property is read-only.
            
            
        :type  personality_name: :class:`str` or ``None``
        :param personality_name: Personality name 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Personality description 
            
            * Property is read-only.
            
            
        :type  created_by: :class:`str` or ``None``
        :param created_by: Personality created by 
            
            * Property is read-only.
            
            
        :type  image_size: :class:`str` or ``None``
        :param image_size: Personality image size 
            
            * Property is read-only.
            
            
        :type  image_checksum: :class:`str` or ``None``
        :param image_checksum: Personality image checksum 
            
            * Property is read-only.
            
            
        :type  vsphere_exported_zip_path: :class:`str` or ``None``
        :param vsphere_exported_zip_path: Personality depot path 
            
            * Property is read-only.
            
            
        :type  vsphere_exported_iso_path: :class:`str` or ``None``
        :param vsphere_exported_iso_path: Personality depot path 
            
            * Property is read-only.
            
            
        :type  vsphere_exported_json_path: :class:`str` or ``None``
        :param vsphere_exported_json_path: Personality depot path 
            
            * Property is read-only.
            
            
        :type  display_name: :class:`str` or ``None``
        :param display_name: Personality displayName 
            
            * Property is read-only.
            
            
        :type  release_date: :class:`str` or ``None``
        :param release_date: Personality Release date 
            
            * Property is read-only.
            
            
        :type  import_timestamp: :class:`str` or ``None``
        :param import_timestamp: Timestamp of Personality import into SDDC Manager 
            
            * Property is read-only.
            
            
        :type  tags: :class:`list` of :class:`str` or ``None``
        :param tags: Personality tags 
            
            * Property is read-only.
            
            
        :type  kb_articles: :class:`str` or ``None``
        :param kb_articles: Personality kb articles 
            
            * Property is read-only.
            
            
        :type  software_info: :class:`SoftwareInfo` or ``None``
        :param software_info:         :type  type: :class:`str` or ``None``
        :param type: Personality type 
            
            * Property is read-only.
            
            
        """
        self.version = version
        self.personality_id = personality_id
        self.personality_name = personality_name
        self.description = description
        self.created_by = created_by
        self.image_size = image_size
        self.image_checksum = image_checksum
        self.vsphere_exported_zip_path = vsphere_exported_zip_path
        self.vsphere_exported_iso_path = vsphere_exported_iso_path
        self.vsphere_exported_json_path = vsphere_exported_json_path
        self.display_name = display_name
        self.release_date = release_date
        self.import_timestamp = import_timestamp
        self.tags = tags
        self.kb_articles = kb_articles
        self.software_info = software_info
        self.type = type
        VapiStruct.__init__(self)


Personality._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.personality', {
        'version': type.OptionalType(type.StringType()),
        'personalityId': type.OptionalType(type.StringType()),
        'personalityName': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'createdBy': type.OptionalType(type.StringType()),
        'imageSize': type.OptionalType(type.StringType()),
        'imageChecksum': type.OptionalType(type.StringType()),
        'vsphereExportedZipPath': type.OptionalType(type.StringType()),
        'vsphereExportedIsoPath': type.OptionalType(type.StringType()),
        'vsphereExportedJsonPath': type.OptionalType(type.StringType()),
        'displayName': type.OptionalType(type.StringType()),
        'releaseDate': type.OptionalType(type.StringType()),
        'importTimestamp': type.OptionalType(type.StringType()),
        'tags': type.OptionalType(type.ListType(type.StringType())),
        'kbArticles': type.OptionalType(type.StringType()),
        'softwareInfo': type.OptionalType(type.ReferenceType(__name__, 'SoftwareInfo')),
        'type': type.OptionalType(type.StringType()),
    },
    Personality,
    False,
    None))



class PageOfNsxtCluster(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`NsxtCluster` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfNsxtCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_nsxt_cluster', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtCluster'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfNsxtCluster,
    False,
    None))



class VpcConfiguration(VapiStruct):
    """
    VPC Configuration Details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'defaultTgwStatus': 'default_tgw_status',
                            }

    def __init__(self,
                 default_tgw_status=None,
                ):
        """
        :type  default_tgw_status: :class:`str` or ``None``
        :param default_tgw_status: Default Transit Gateway status
        """
        self.default_tgw_status = default_tgw_status
        VapiStruct.__init__(self)


VpcConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vpc_configuration', {
        'defaultTgwStatus': type.OptionalType(type.StringType()),
    },
    VpcConfiguration,
    False,
    None))



class NsxtTransportZoneInfo(VapiStruct):
    """
    NSX transport zone representation.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """




    def __init__(self,
                ):
        """
        """
        VapiStruct.__init__(self)


NsxtTransportZoneInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_transport_zone_info', {
    },
    NsxtTransportZoneInfo,
    False,
    None))



class PageOfNsxtTransportZoneInfo(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`NsxtTransportZoneInfo` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfNsxtTransportZoneInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_nsxt_transport_zone_info', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtTransportZoneInfo'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfNsxtTransportZoneInfo,
    False,
    None))



class PageOfNsxtIpAddressPool(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`NsxtIpAddressPool` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfNsxtIpAddressPool._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_nsxt_ip_address_pool', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtIpAddressPool'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfNsxtIpAddressPool,
    False,
    None))



class PageOfNsxtCriterion(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`NsxtCriterion` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfNsxtCriterion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_nsxt_criterion', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtCriterion'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfNsxtCriterion,
    False,
    None))



class NsxALBCluster(VapiStruct):
    """
    NSX ALB Cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'clusterName': 'cluster_name',
                            'domains': 'domains',
                            'nsxClusters': 'nsx_clusters',
                            'clusterFqdn': 'cluster_fqdn',
                            'clusterIpAddress': 'cluster_ip_address',
                            'clusterStatus': 'cluster_status',
                            'version': 'version',
                            'deploymentStatus': 'deployment_status',
                            }

    def __init__(self,
                 id=None,
                 cluster_name=None,
                 domains=None,
                 nsx_clusters=None,
                 cluster_fqdn=None,
                 cluster_ip_address=None,
                 cluster_status=None,
                 version=None,
                 deployment_status=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the NSX Advanced Load Balancer Cluster 
            
            * Property is read-only.
            
            
        :type  cluster_name: :class:`str` or ``None``
        :param cluster_name: Name of NSX Advanced Load Balancer Cluster 
            
            * Property is read-only.
            
            
        :type  domains: :class:`list` of :class:`DomainReference` or ``None``
        :param domains: Collection of IDs of Workload Domains where NSX Advanced Load
            Balancer Cluster is deployed 
            
            * Property is read-only.
            
            
        :type  nsx_clusters: :class:`list` of :class:`NsxtClusterReference` or ``None``
        :param nsx_clusters: Collection of IDs of the NSX where NSX Advanced Load Balancer
            Cluster is deployed 
            
            * Property is read-only.
            
            
        :type  cluster_fqdn: :class:`str` or ``None``
        :param cluster_fqdn: NSX Advanced Load Balancer Cluster Virtual fqdn 
            
            * Property is read-only.
            
            
        :type  cluster_ip_address: :class:`str` or ``None``
        :param cluster_ip_address: NSX Advanced Load Balancer Cluster Virtual IPv4 address of format
            'x.x.x.x' 
            
            * Property is read-only.
            
            
        :type  cluster_status: :class:`str` or ``None``
        :param cluster_status: NSX Advanced Load Balancer Cluster status 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: NSX Advanced Load Balancer Cluster version 
            
            * Property is read-only.
            
            
        :type  deployment_status: :class:`str` or ``None``
        :param deployment_status: NSX Advanced Load Balancer Deployment Status 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.cluster_name = cluster_name
        self.domains = domains
        self.nsx_clusters = nsx_clusters
        self.cluster_fqdn = cluster_fqdn
        self.cluster_ip_address = cluster_ip_address
        self.cluster_status = cluster_status
        self.version = version
        self.deployment_status = deployment_status
        VapiStruct.__init__(self)


NsxALBCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsx_ALB_cluster', {
        'id': type.OptionalType(type.StringType()),
        'clusterName': type.OptionalType(type.StringType()),
        'domains': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'DomainReference'))),
        'nsxClusters': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtClusterReference'))),
        'clusterFqdn': type.OptionalType(type.StringType()),
        'clusterIpAddress': type.OptionalType(type.StringType()),
        'clusterStatus': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'deploymentStatus': type.OptionalType(type.StringType()),
    },
    NsxALBCluster,
    False,
    None))



class NsxtClusterReference(VapiStruct):
    """
    Represents an NSX Cluster reference

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'vipFqdn': 'vip_fqdn',
                            'vip': 'vip',
                            }

    def __init__(self,
                 id=None,
                 vip_fqdn=None,
                 vip=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the NSX cluster 
            
            * Property is read-only.
            
            
        :type  vip_fqdn: :class:`str` or ``None``
        :param vip_fqdn: FQDN for VIP of the NSX cluster 
            
            * Property is read-only.
            
            
        :type  vip: :class:`str` or ``None``
        :param vip: [Deprecated] VIP (Virtual IP Address) of the NSX cluster 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.vip_fqdn = vip_fqdn
        self.vip = vip
        VapiStruct.__init__(self)


NsxtClusterReference._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_cluster_reference', {
        'id': type.OptionalType(type.StringType()),
        'vipFqdn': type.OptionalType(type.StringType()),
        'vip': type.OptionalType(type.StringType()),
    },
    NsxtClusterReference,
    False,
    None))



class PageOfNsxALBCluster(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`NsxALBCluster` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfNsxALBCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_nsx_ALB_cluster', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxALBCluster'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfNsxALBCluster,
    False,
    None))



class ALBControllerNodeFormFactor(VapiStruct):
    """
    NSX ALB Cluster node form factor

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'disk': 'disk',
                            'memory': 'memory',
                            'type': 'type',
                            'vcpu': 'vcpu',
                            }

    def __init__(self,
                 disk=None,
                 memory=None,
                 type=None,
                 vcpu=None,
                ):
        """
        :type  disk: :class:`long` or ``None``
        :param disk: Disk size of the NSX Advanced Load Balancer controller node in
            Bytes 
            
            * Property is read-only.
            
            
        :type  memory: :class:`long` or ``None``
        :param memory: Memory size of the NSX Advanced Load Balancer controller node in
            Bytes 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: NSX Advanced Load Balancer controller node form factor type 
            
            * Property is read-only.
            
            
        :type  vcpu: :class:`long` or ``None``
        :param vcpu: Number of virtual cpus on the NSX Advanced Load Balancer controller
            node 
            
            * Property is read-only.
            
            
        """
        self.disk = disk
        self.memory = memory
        self.type = type
        self.vcpu = vcpu
        VapiStruct.__init__(self)


ALBControllerNodeFormFactor._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ALB_controller_node_form_factor', {
        'disk': type.OptionalType(type.IntegerType()),
        'memory': type.OptionalType(type.IntegerType()),
        'type': type.OptionalType(type.StringType()),
        'vcpu': type.OptionalType(type.IntegerType()),
    },
    ALBControllerNodeFormFactor,
    False,
    None))



class ALBControllerNodeFormFactors(VapiStruct):
    """
    NSX ALB Cluster node form factors

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'formFactors': 'form_factors',
                            }

    def __init__(self,
                 form_factors=None,
                ):
        """
        :type  form_factors: :class:`list` of :class:`ALBControllerNodeFormFactor` or ``None``
        :param form_factors: List of NSX ALB Cluster node form factor 
            
            * Property is read-only.
            
            
        """
        self.form_factors = form_factors
        VapiStruct.__init__(self)


ALBControllerNodeFormFactors._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ALB_controller_node_form_factors', {
        'formFactors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ALBControllerNodeFormFactor'))),
    },
    ALBControllerNodeFormFactors,
    False,
    None))



class Message(VapiStruct):
    """
    This specification contains the parameters of a Message

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'localizedMessage': 'localized_message',
                            'arguments': 'arguments',
                            }

    def __init__(self,
                 id=None,
                 localized_message=None,
                 arguments=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The ID of the message
        :type  localized_message: :class:`str` or ``None``
        :param localized_message: The localized message
        :type  arguments: :class:`list` of :class:`str` or ``None``
        :param arguments: The list of arguments for the message
        """
        self.id = id
        self.localized_message = localized_message
        self.arguments = arguments
        VapiStruct.__init__(self)


Message._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.message', {
        'id': type.OptionalType(type.StringType()),
        'localizedMessage': type.OptionalType(type.StringType()),
        'arguments': type.OptionalType(type.ListType(type.StringType())),
    },
    Message,
    False,
    None))



class NotifiableDomain(VapiStruct):
    """
    This specification contains the parameters of a domain to which the
    notifiable resources belong to

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The ID of the domain
        :type  name: :class:`str` or ``None``
        :param name: The name of the domain
        """
        self.id = id
        self.name = name
        VapiStruct.__init__(self)


NotifiableDomain._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.notifiable_domain', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
    },
    NotifiableDomain,
    False,
    None))



class NotifiableResource(VapiStruct):
    """
    This specification contains the parameters of a resource on which the
    notification is generated

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'type': 'type',
                            'name': 'name',
                            }

    def __init__(self,
                 id=None,
                 type=None,
                 name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The ID of the resource
        :type  type: :class:`str` or ``None``
        :param type: The type of the resource
        :type  name: :class:`str` or ``None``
        :param name: The fully qualified domain name (FQDN) of the resource
        """
        self.id = id
        self.type = type
        self.name = name
        VapiStruct.__init__(self)


NotifiableResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.notifiable_resource', {
        'id': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
    },
    NotifiableResource,
    False,
    None))



class Notification(VapiStruct):
    """
    This specification contains the parameters of a notification

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'severity': 'severity',
                            'message': 'message',
                            'creationTimestamp': 'creation_timestamp',
                            'expirationTimestamp': 'expiration_timestamp',
                            'resources': 'resources',
                            'domain': 'domain',
                            }

    def __init__(self,
                 type=None,
                 severity=None,
                 message=None,
                 creation_timestamp=None,
                 expiration_timestamp=None,
                 resources=None,
                 domain=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: The type of the notification
        :type  severity: :class:`str` or ``None``
        :param severity: The severity of the notification
        :type  message: :class:`Message` or ``None``
        :param message:         :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: The creation timestamp of the notification
        :type  expiration_timestamp: :class:`str` or ``None``
        :param expiration_timestamp: The expiration timestamp of the notification
        :type  resources: :class:`list` of :class:`NotifiableResource` or ``None``
        :param resources: The list of resources on which the notification is generated on
        :type  domain: :class:`NotifiableDomain` or ``None``
        :param domain:         """
        self.type = type
        self.severity = severity
        self.message = message
        self.creation_timestamp = creation_timestamp
        self.expiration_timestamp = expiration_timestamp
        self.resources = resources
        self.domain = domain
        VapiStruct.__init__(self)


Notification._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.notification', {
        'type': type.OptionalType(type.StringType()),
        'severity': type.OptionalType(type.StringType()),
        'message': type.OptionalType(type.ReferenceType(__name__, 'Message')),
        'creationTimestamp': type.OptionalType(type.StringType()),
        'expirationTimestamp': type.OptionalType(type.StringType()),
        'resources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NotifiableResource'))),
        'domain': type.OptionalType(type.ReferenceType(__name__, 'NotifiableDomain')),
    },
    Notification,
    False,
    None))



class PageOfNetworkPool(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`NetworkPool` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfNetworkPool._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_network_pool', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NetworkPool'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfNetworkPool,
    False,
    None))



class PageOfNetwork(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Network` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfNetwork._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_network', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Network'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfNetwork,
    False,
    None))



class Entitlements(VapiStruct):
    """
    Entitlements of the resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'hasNsxEntitlement': 'has_nsx_entitlement',
                            }

    def __init__(self,
                 has_nsx_entitlement=None,
                ):
        """
        :type  has_nsx_entitlement: :class:`bool` or ``None``
        :param has_nsx_entitlement: Flag indicating whether the resource has NSX entitlement or not
        """
        self.has_nsx_entitlement = has_nsx_entitlement
        VapiStruct.__init__(self)


Entitlements._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.entitlements', {
        'hasNsxEntitlement': type.OptionalType(type.BooleanType()),
    },
    Entitlements,
    False,
    None))



class LicensingInfo(VapiStruct):
    """
    Licensing information of the resource

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceType': 'resource_type',
                            'resourceId': 'resource_id',
                            'licensingMode': 'licensing_mode',
                            'subscriptionStatus': 'subscription_status',
                            'subscribedState': 'subscribed_state',
                            'isRegistered': 'is_registered',
                            'isSubscribed': 'is_subscribed',
                            'daysRemainingToSubscribe': 'days_remaining_to_subscribe',
                            'entitlements': 'entitlements',
                            }

    def __init__(self,
                 resource_type=None,
                 resource_id=None,
                 licensing_mode=None,
                 subscription_status=None,
                 subscribed_state=None,
                 is_registered=None,
                 is_subscribed=None,
                 days_remaining_to_subscribe=None,
                 entitlements=None,
                ):
        """
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Type of the resource
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: ID of the resource, need not be set for the resource of the type :
            SYSTEM
        :type  licensing_mode: :class:`str` or ``None``
        :param licensing_mode: Licensing mode
        :type  subscription_status: :class:`str` or ``None``
        :param subscription_status: Status of the subscription mode
        :type  subscribed_state: :class:`str` or ``None``
        :param subscribed_state: Subscribed state 
            
            * Property is read-only.
            
            
        :type  is_registered: :class:`bool` or ``None``
        :param is_registered: Flag indicating the resource is registered for subscription or not
        :type  is_subscribed: :class:`bool` or ``None``
        :param is_subscribed: Flag indicating the resource is subscribed or not 
            
            * Property is read-only.
            
            
        :type  days_remaining_to_subscribe: :class:`long` or ``None``
        :param days_remaining_to_subscribe: Number of days remaining to subscribe 
            
            * Property is read-only.
            
            
        :type  entitlements: :class:`Entitlements` or ``None``
        :param entitlements:         """
        self.resource_type = resource_type
        self.resource_id = resource_id
        self.licensing_mode = licensing_mode
        self.subscription_status = subscription_status
        self.subscribed_state = subscribed_state
        self.is_registered = is_registered
        self.is_subscribed = is_subscribed
        self.days_remaining_to_subscribe = days_remaining_to_subscribe
        self.entitlements = entitlements
        VapiStruct.__init__(self)


LicensingInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.licensing_info', {
        'resourceType': type.OptionalType(type.StringType()),
        'resourceId': type.OptionalType(type.StringType()),
        'licensingMode': type.OptionalType(type.StringType()),
        'subscriptionStatus': type.OptionalType(type.StringType()),
        'subscribedState': type.OptionalType(type.StringType()),
        'isRegistered': type.OptionalType(type.BooleanType()),
        'isSubscribed': type.OptionalType(type.BooleanType()),
        'daysRemainingToSubscribe': type.OptionalType(type.IntegerType()),
        'entitlements': type.OptionalType(type.ReferenceType(__name__, 'Entitlements')),
    },
    LicensingInfo,
    False,
    None))



class PageOfLicenseKey(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`LicenseKey` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfLicenseKey._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_license_key', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'LicenseKey'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfLicenseKey,
    False,
    None))



class ProductTypeInfo(VapiStruct):
    """
    Product type and label informations

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'productType': 'product_type',
                            'productLabel': 'product_label',
                            }

    def __init__(self,
                 product_type=None,
                 product_label=None,
                ):
        """
        :type  product_type: :class:`str` or ``None``
        :param product_type: Represents product type 
            
            * Property is read-only.
            
            
        :type  product_label: :class:`str` or ``None``
        :param product_label: Represents product label 
            
            * Property is read-only.
            
            
        """
        self.product_type = product_type
        self.product_label = product_label
        VapiStruct.__init__(self)


ProductTypeInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.product_type_info', {
        'productType': type.OptionalType(type.StringType()),
        'productLabel': type.OptionalType(type.StringType()),
    },
    ProductTypeInfo,
    False,
    None))



class FederatedIdentityProviderInfo(VapiStruct):
    """
    The identity management info when the provider is via broker federation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'source': 'source',
                            'directoryList': 'directory_list',
                            'oidcInfo': 'oidc_info',
                            'syncClientTokenTTL': 'sync_client_token_ttl',
                            'syncClientTokenInfo': 'sync_client_token_info',
                            }

    def __init__(self,
                 name=None,
                 source=None,
                 directory_list=None,
                 oidc_info=None,
                 sync_client_token_ttl=None,
                 sync_client_token_info=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: The user-friendly name for the Identity Provider 
            
            * Property is read-only.
            
            
        :type  source: :class:`str` or ``None``
        :param source: The source of the Identity Provider 
            
            * Property is read-only.
            
            
        :type  directory_list: :class:`IdentityProviderDirectory` or ``None``
        :param directory_list:         :type  oidc_info: :class:`OidcInfo` or ``None``
        :param oidc_info:         :type  sync_client_token_ttl: :class:`long` or ``None``
        :param sync_client_token_ttl: The lifetime in seconds of the sync client bear token 
            
            * Property is read-only.
            
            
        :type  sync_client_token_info: :class:`SyncClientTokenInfo` or ``None``
        :param sync_client_token_info:         """
        self.name = name
        self.source = source
        self.directory_list = directory_list
        self.oidc_info = oidc_info
        self.sync_client_token_ttl = sync_client_token_ttl
        self.sync_client_token_info = sync_client_token_info
        VapiStruct.__init__(self)


FederatedIdentityProviderInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.federated_identity_provider_info', {
        'name': type.OptionalType(type.StringType()),
        'source': type.OptionalType(type.StringType()),
        'directoryList': type.OptionalType(type.ReferenceType(__name__, 'IdentityProviderDirectory')),
        'oidcInfo': type.OptionalType(type.ReferenceType(__name__, 'OidcInfo')),
        'syncClientTokenTTL': type.OptionalType(type.IntegerType()),
        'syncClientTokenInfo': type.OptionalType(type.ReferenceType(__name__, 'SyncClientTokenInfo')),
    },
    FederatedIdentityProviderInfo,
    False,
    None))



class IdentityProvider(VapiStruct):
    """
    Represents Identity Provider and its attributes

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'type': 'type',
                            'domainNames': 'domain_names',
                            'identitySources': 'identity_sources',
                            'ldap': 'ldap',
                            'oidc': 'oidc',
                            'status': 'status',
                            'idpMessage': 'idp_message',
                            'fedIdp': 'fed_idp',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 type=None,
                 domain_names=None,
                 identity_sources=None,
                 ldap=None,
                 oidc=None,
                 status=None,
                 idp_message=None,
                 fed_idp=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the Identity Provider 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: The user-friendly name for the Identity Provider 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: The type of the Identity Provider 
            
            * Property is read-only.
            
            
        :type  domain_names: :class:`list` of :class:`str` or ``None``
        :param domain_names: The Domains of the Identity Provider 
            
            * Property is read-only.
            
            
        :type  identity_sources: :class:`list` of :class:`VcIdentitySources` or ``None``
        :param identity_sources: The Identity Sources of the Identity Provider 
            
            * Property is read-only.
            
            
        :type  ldap: :class:`LdapInfo` or ``None``
        :param ldap:         :type  oidc: :class:`OidcInfo` or ``None``
        :param oidc:         :type  status: :class:`str` or ``None``
        :param status: The status of the Identity Provider (set as ACTIVE for currently
            enabled Identity Provider) 
            
            * Property is read-only.
            
            
        :type  idp_message: :class:`str` or ``None``
        :param idp_message: The message conveyed by VCF for managing the Identity Provider 
            
            * Property is read-only.
            
            
        :type  fed_idp: :class:`FederatedIdentityProviderInfo` or ``None``
        :param fed_idp:         """
        self.id = id
        self.name = name
        self.type = type
        self.domain_names = domain_names
        self.identity_sources = identity_sources
        self.ldap = ldap
        self.oidc = oidc
        self.status = status
        self.idp_message = idp_message
        self.fed_idp = fed_idp
        VapiStruct.__init__(self)


IdentityProvider._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.identity_provider', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'domainNames': type.OptionalType(type.ListType(type.StringType())),
        'identitySources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VcIdentitySources'))),
        'ldap': type.OptionalType(type.ReferenceType(__name__, 'LdapInfo')),
        'oidc': type.OptionalType(type.ReferenceType(__name__, 'OidcInfo')),
        'status': type.OptionalType(type.StringType()),
        'idpMessage': type.OptionalType(type.StringType()),
        'fedIdp': type.OptionalType(type.ReferenceType(__name__, 'FederatedIdentityProviderInfo')),
    },
    IdentityProvider,
    False,
    None))



class LdapInfo(VapiStruct):
    """
    Represents Identity management configuration when the protocol is LDAP

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'domainName': 'domain_name',
                            'domainAlias': 'domain_alias',
                            'username': 'username',
                            'sourceDetails': 'source_details',
                            }

    def __init__(self,
                 type=None,
                 domain_name=None,
                 domain_alias=None,
                 username=None,
                 source_details=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: The type of the LDAP Server 
            
            * Property is read-only.
            
            
        :type  domain_name: :class:`str` or ``None``
        :param domain_name: The name to associate with the created Domain 
            
            * Property is read-only.
            
            
        :type  domain_alias: :class:`str` or ``None``
        :param domain_alias: The optional alias to associate the Domain name 
            
            * Property is read-only.
            
            
        :type  username: :class:`str` or ``None``
        :param username: User name to connect to LDAP(s) server 
            
            * Property is read-only.
            
            
        :type  source_details: :class:`SourceDetails` or ``None``
        :param source_details:         """
        self.type = type
        self.domain_name = domain_name
        self.domain_alias = domain_alias
        self.username = username
        self.source_details = source_details
        VapiStruct.__init__(self)


LdapInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ldap_info', {
        'type': type.OptionalType(type.StringType()),
        'domainName': type.OptionalType(type.StringType()),
        'domainAlias': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'sourceDetails': type.OptionalType(type.ReferenceType(__name__, 'SourceDetails')),
    },
    LdapInfo,
    False,
    None))



class OidcInfo(VapiStruct):
    """
    Represents Identity management configuration when the provider is based on
    OIDC

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'clientId': 'client_id',
                            'discoveryEndpoint': 'discovery_endpoint',
                            'authEndpoint': 'auth_endpoint',
                            'authMethod': 'auth_method',
                            'logoutEndpoint': 'logout_endpoint',
                            'issuer': 'issuer',
                            'publicKeyUri': 'public_key_uri',
                            'tokenEndpoint': 'token_endpoint',
                            }

    def __init__(self,
                 client_id=None,
                 discovery_endpoint=None,
                 auth_endpoint=None,
                 auth_method=None,
                 logout_endpoint=None,
                 issuer=None,
                 public_key_uri=None,
                 token_endpoint=None,
                ):
        """
        :type  client_id: :class:`str` or ``None``
        :param client_id: Client identifier to connect to the Identity Provider 
            
            * Property is read-only.
            
            
        :type  discovery_endpoint: :class:`str` or ``None``
        :param discovery_endpoint: Endpoint to retrieve the Identity Provider metadata 
            
            * Property is read-only.
            
            
        :type  auth_endpoint: :class:`str` or ``None``
        :param auth_endpoint: Authentication endpoint of the Identity Provider 
            
            * Property is read-only.
            
            
        :type  auth_method: :class:`str` or ``None``
        :param auth_method: Authentication method used by the Identity Provider 
            
            * Property is read-only.
            
            
        :type  logout_endpoint: :class:`str` or ``None``
        :param logout_endpoint: The endpoint to use for terminating the user's session at the
            Identity Provider 
            
            * Property is read-only.
            
            
        :type  issuer: :class:`str` or ``None``
        :param issuer: The Identity Provider namespace. It is used to validate the issuer
            in the acquired OAuth2 token 
            
            * Property is read-only.
            
            
        :type  public_key_uri: :class:`str` or ``None``
        :param public_key_uri: Endpoint to retrieve the Identity Provider public key for
            validation 
            
            * Property is read-only.
            
            
        :type  token_endpoint: :class:`str` or ``None``
        :param token_endpoint: Token endpoint of the Identity Provider 
            
            * Property is read-only.
            
            
        """
        self.client_id = client_id
        self.discovery_endpoint = discovery_endpoint
        self.auth_endpoint = auth_endpoint
        self.auth_method = auth_method
        self.logout_endpoint = logout_endpoint
        self.issuer = issuer
        self.public_key_uri = public_key_uri
        self.token_endpoint = token_endpoint
        VapiStruct.__init__(self)


OidcInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.oidc_info', {
        'clientId': type.OptionalType(type.StringType()),
        'discoveryEndpoint': type.OptionalType(type.StringType()),
        'authEndpoint': type.OptionalType(type.StringType()),
        'authMethod': type.OptionalType(type.StringType()),
        'logoutEndpoint': type.OptionalType(type.StringType()),
        'issuer': type.OptionalType(type.StringType()),
        'publicKeyUri': type.OptionalType(type.StringType()),
        'tokenEndpoint': type.OptionalType(type.StringType()),
    },
    OidcInfo,
    False,
    None))



class PageOfIdentityProvider(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`IdentityProvider` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfIdentityProvider._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_identity_provider', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'IdentityProvider'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfIdentityProvider,
    False,
    None))



class SyncClientTokenInfo(VapiStruct):
    """
    Represents the information about sync client token

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'expireIn': 'expire_in',
                            'expireAt': 'expire_at',
                            'token': 'token',
                            'scimUrl': 'scim_url',
                            }

    def __init__(self,
                 expire_in=None,
                 expire_at=None,
                 token=None,
                 scim_url=None,
                ):
        """
        :type  expire_in: :class:`long` or ``None``
        :param expire_in: The seconds in which the token expires. Please start using expireAt
            field for the same. 
            
            * Property is read-only.
            
            
        :type  expire_at: :class:`str` or ``None``
        :param expire_at: The seconds at which the token expires 
            
            * Property is read-only.
            
            
        :type  token: :class:`str` or ``None``
        :param token: The sync client bearer token 
            
            * Property is read-only.
            
            
        :type  scim_url: :class:`str` or ``None``
        :param scim_url: The WS1B SCIM URL to push users and groups data from external
            identity provider 
            
            * Property is read-only.
            
            
        """
        self.expire_in = expire_in
        self.expire_at = expire_at
        self.token = token
        self.scim_url = scim_url
        VapiStruct.__init__(self)


SyncClientTokenInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.sync_client_token_info', {
        'expireIn': type.OptionalType(type.IntegerType()),
        'expireAt': type.OptionalType(type.StringType()),
        'token': type.OptionalType(type.StringType()),
        'scimUrl': type.OptionalType(type.StringType()),
    },
    SyncClientTokenInfo,
    False,
    None))



class VcIdentitySources(VapiStruct):
    """
    Represents embedded Identity Sources and its attributes.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'type': 'type',
                            'domainNames': 'domain_names',
                            'ldap': 'ldap',
                            }

    def __init__(self,
                 name=None,
                 type=None,
                 domain_names=None,
                 ldap=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the Identity Source. 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Type of the Identity Source. 
            
            * Property is read-only.
            
            
        :type  domain_names: :class:`list` of :class:`str` or ``None``
        :param domain_names: The Domains of the Identity Source 
            
            * Property is read-only.
            
            
        :type  ldap: :class:`LdapInfo` or ``None``
        :param ldap:         """
        self.name = name
        self.type = type
        self.domain_names = domain_names
        self.ldap = ldap
        VapiStruct.__init__(self)


VcIdentitySources._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vc_identity_sources', {
        'name': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'domainNames': type.OptionalType(type.ListType(type.StringType())),
        'ldap': type.OptionalType(type.ReferenceType(__name__, 'LdapInfo')),
    },
    VcIdentitySources,
    False,
    None))



class SDDCManagerOidcInfo(VapiStruct):
    """
    Represents the SDDC Manager's OIDC client information

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'oidcClientId': 'oidc_client_id',
                            'oidcAuthorizationEndpoint': 'oidc_authorization_endpoint',
                            'oidcEndSessionEndpoint': 'oidc_end_session_endpoint',
                            'idpType': 'idp_type',
                            'source': 'source',
                            }

    def __init__(self,
                 oidc_client_id=None,
                 oidc_authorization_endpoint=None,
                 oidc_end_session_endpoint=None,
                 idp_type=None,
                 source=None,
                ):
        """
        :type  oidc_client_id: :class:`str` or ``None``
        :param oidc_client_id: The SDDC Manager OIDC client id 
            
            * Property is read-only.
            
            
        :type  oidc_authorization_endpoint: :class:`str` or ``None``
        :param oidc_authorization_endpoint: The SDDC Manager Authorization end point 
            
            * Property is read-only.
            
            
        :type  oidc_end_session_endpoint: :class:`str` or ``None``
        :param oidc_end_session_endpoint: The SDDC Manager end session end point 
            
            * Property is read-only.
            
            
        :type  idp_type: :class:`str` or ``None``
        :param idp_type: The type of the current identity provider 
            
            * Property is read-only.
            
            
        :type  source: :class:`str` or ``None``
        :param source: The source of the current identity provider 
            
            * Property is read-only.
            
            
        """
        self.oidc_client_id = oidc_client_id
        self.oidc_authorization_endpoint = oidc_authorization_endpoint
        self.oidc_end_session_endpoint = oidc_end_session_endpoint
        self.idp_type = idp_type
        self.source = source
        VapiStruct.__init__(self)


SDDCManagerOidcInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.SDDC_manager_oidc_info', {
        'oidcClientId': type.OptionalType(type.StringType()),
        'oidcAuthorizationEndpoint': type.OptionalType(type.StringType()),
        'oidcEndSessionEndpoint': type.OptionalType(type.StringType()),
        'idpType': type.OptionalType(type.StringType()),
        'source': type.OptionalType(type.StringType()),
    },
    SDDCManagerOidcInfo,
    False,
    None))



class IdentityProviderPrecheckResult(VapiStruct):
    """
    Represents Identity Management pre-check result

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'status': 'status',
                            'details': 'details',
                            }

    def __init__(self,
                 status=None,
                 details=None,
                ):
        """
        :type  status: :class:`str` or ``None``
        :param status: One of SUCCESS, WARNING, FAILURE 
            
            * Property is read-only.
            
            
        :type  details: :class:`list` of :class:`Details` or ``None``
        :param details: Details about status type and error messages 
            
            * Property is read-only.
            
            
        """
        self.status = status
        self.details = details
        VapiStruct.__init__(self)


IdentityProviderPrecheckResult._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.identity_provider_precheck_result', {
        'status': type.OptionalType(type.StringType()),
        'details': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Details'))),
    },
    IdentityProviderPrecheckResult,
    False,
    None))



class Details(VapiStruct):
    """
    Represents Identity Management pre-check details and user messages

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'message': 'message',
                            }

    def __init__(self,
                 type=None,
                 message=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: Precheck response type 
            
            * Property is read-only.
            
            
        :type  message: :class:`str` or ``None``
        :param message: User messages for WARNING and FAILURE 
            
            * Property is read-only.
            
            
        """
        self.type = type
        self.message = message
        VapiStruct.__init__(self)


Details._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.details', {
        'type': type.OptionalType(type.StringType()),
        'message': type.OptionalType(type.StringType()),
    },
    Details,
    False,
    None))



class PageOfHost(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Host` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfHost._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_host', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Host'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfHost,
    False,
    None))



class PageOfTag(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Tag` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfTag._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_tag', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Tag'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfTag,
    False,
    None))



class TagManagerModel(VapiStruct):
    """
    Represents a Tag Manager Model

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'tagManagerUrl': 'tag_manager_url',
                            }

    def __init__(self,
                 tag_manager_url=None,
                ):
        """
        :type  tag_manager_url: :class:`str` or ``None``
        :param tag_manager_url: Tag Manager URL value
        """
        self.tag_manager_url = tag_manager_url
        VapiStruct.__init__(self)


TagManagerModel._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.tag_manager_model', {
        'tagManagerUrl': type.OptionalType(type.StringType()),
    },
    TagManagerModel,
    False,
    None))



class PageOfTagsForResource(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`TagsForResource` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfTagsForResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_tags_for_resource', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'TagsForResource'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfTagsForResource,
    False,
    None))



class TaggedResource(VapiStruct):
    """
    Specifies a resource with id and type

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'type': 'type',
                            }

    def __init__(self,
                 id=None,
                 type=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the resource
        :type  type: :class:`str` or ``None``
        :param type: Type of the resource
        """
        self.id = id
        self.type = type
        VapiStruct.__init__(self)


TaggedResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.tagged_resource', {
        'id': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
    },
    TaggedResource,
    False,
    None))



class TagsForResource(VapiStruct):
    """
    Represents a taggable resource with its associations

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resource': 'resource',
                            'tags': 'tags',
                            }

    def __init__(self,
                 resource=None,
                 tags=None,
                ):
        """
        :type  resource: :class:`TaggedResource` or ``None``
        :param resource:         :type  tags: :class:`list` of :class:`Tag` or ``None``
        :param tags: List of associated tags
        """
        self.resource = resource
        self.tags = tags
        VapiStruct.__init__(self)


TagsForResource._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.tags_for_resource', {
        'resource': type.OptionalType(type.ReferenceType(__name__, 'TaggedResource')),
        'tags': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Tag'))),
    },
    TagsForResource,
    False,
    None))



class PageOfHostCriterion(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`HostCriterion` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfHostCriterion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_host_criterion', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HostCriterion'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfHostCriterion,
    False,
    None))



class EdgeCluster(VapiStruct):
    """
    EdgeCluster representation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'clusters': 'clusters',
                            'status': 'status',
                            'nsxtCluster': 'nsxt_cluster',
                            'edgeNodes': 'edge_nodes',
                            'isTier0ManagedBySystem': 'is_tier0_managed_by_system',
                            'skipTepRoutabilityCheck': 'skip_tep_routability_check',
                            'originType': 'origin_type',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 clusters=None,
                 status=None,
                 nsxt_cluster=None,
                 edge_nodes=None,
                 is_tier0_managed_by_system=None,
                 skip_tep_routability_check=None,
                 origin_type=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the egde cluster
        :type  name: :class:`str` or ``None``
        :param name: Name of the edge cluster
        :type  clusters: :class:`list` of :class:`ClusterReference` or ``None``
        :param clusters: List of clusters associated with the edge cluster
        :type  status: :class:`str` or ``None``
        :param status: NSX Edge cluster status 
            
            * Property is read-only.
            
            
        :type  nsxt_cluster: :class:`NsxtClusterReference` or ``None``
        :param nsxt_cluster:         :type  edge_nodes: :class:`list` of :class:`EdgeNodeReference` or ``None``
        :param edge_nodes: List of edge nodes associated with the edge cluster
        :type  is_tier0_managed_by_system: :class:`bool` or ``None``
        :param is_tier0_managed_by_system: Whether or not this edge cluster's tier 0 is managed by system
        :type  skip_tep_routability_check: :class:`bool` or ``None``
        :param skip_tep_routability_check: Whether or not host/TEP network checks were done for this edge
            cluster
        :type  origin_type: :class:`str` or ``None``
        :param origin_type: How this Edge cluster was added to inventory
        """
        self.id = id
        self.name = name
        self.clusters = clusters
        self.status = status
        self.nsxt_cluster = nsxt_cluster
        self.edge_nodes = edge_nodes
        self.is_tier0_managed_by_system = is_tier0_managed_by_system
        self.skip_tep_routability_check = skip_tep_routability_check
        self.origin_type = origin_type
        VapiStruct.__init__(self)


EdgeCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.edge_cluster', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'clusters': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ClusterReference'))),
        'status': type.OptionalType(type.StringType()),
        'nsxtCluster': type.OptionalType(type.ReferenceType(__name__, 'NsxtClusterReference')),
        'edgeNodes': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'EdgeNodeReference'))),
        'isTier0ManagedBySystem': type.OptionalType(type.BooleanType()),
        'skipTepRoutabilityCheck': type.OptionalType(type.BooleanType()),
        'originType': type.OptionalType(type.StringType()),
    },
    EdgeCluster,
    False,
    None))



class EdgeNodeReference(VapiStruct):
    """
    Represents a reference to the edge node

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'hostName': 'host_name',
                            }

    def __init__(self,
                 id=None,
                 host_name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the edge node
        :type  host_name: :class:`str` or ``None``
        :param host_name: Hostname of the edge node
        """
        self.id = id
        self.host_name = host_name
        VapiStruct.__init__(self)


EdgeNodeReference._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.edge_node_reference', {
        'id': type.OptionalType(type.StringType()),
        'hostName': type.OptionalType(type.StringType()),
    },
    EdgeNodeReference,
    False,
    None))



class PageOfEdgeCluster(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`EdgeCluster` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfEdgeCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_edge_cluster', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'EdgeCluster'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfEdgeCluster,
    False,
    None))



class EdgeClusterNsxtEntityCriterion(VapiStruct):
    """
    Represents a criterion for querying the Edge Cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'arguments': 'arguments',
                            'description': 'description',
                            }

    def __init__(self,
                 name=None,
                 arguments=None,
                 description=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Name of the criterion 
            
            * Property is read-only.
            
            
        :type  arguments: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param arguments: Arguments required for a particular criterion 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Description of the criterion 
            
            * Property is read-only.
            
            
        """
        self.name = name
        self.arguments = arguments
        self.description = description
        VapiStruct.__init__(self)


EdgeClusterNsxtEntityCriterion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.edge_cluster_nsxt_entity_criterion', {
        'name': type.OptionalType(type.StringType()),
        'arguments': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
        'description': type.OptionalType(type.StringType()),
    },
    EdgeClusterNsxtEntityCriterion,
    False,
    None))



class PageOfEdgeClusterNsxtEntityCriterion(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`EdgeClusterNsxtEntityCriterion` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfEdgeClusterNsxtEntityCriterion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_edge_cluster_nsxt_entity_criterion', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'EdgeClusterNsxtEntityCriterion'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfEdgeClusterNsxtEntityCriterion,
    False,
    None))



class Domain(VapiStruct):
    """
    Represents a domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'orgName': 'org_name',
                            'status': 'status',
                            'upgradeState': 'upgrade_state',
                            'upgradeStatus': 'upgrade_status',
                            'type': 'type',
                            'owners': 'owners',
                            'vcenters': 'vcenters',
                            'ssoId': 'sso_id',
                            'ssoName': 'sso_name',
                            'isManagementSsoDomain': 'is_management_sso_domain',
                            'clusters': 'clusters',
                            'nsxtCluster': 'nsxt_cluster',
                            'licensingInfo': 'licensing_info',
                            'capacity': 'capacity',
                            'tags': 'tags',
                            'elmStatus': 'elm_status',
                            'lifecycleManagementMode': 'lifecycle_management_mode',
                            'isNetworkSeparationEnabled': 'is_network_separation_enabled',
                            'isSecurityEnabled': 'is_security_enabled',
                            'isPrimaryDomainForNsx': 'is_primary_domain_for_nsx',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 org_name=None,
                 status=None,
                 upgrade_state=None,
                 upgrade_status=None,
                 type=None,
                 owners=None,
                 vcenters=None,
                 sso_id=None,
                 sso_name=None,
                 is_management_sso_domain=None,
                 clusters=None,
                 nsxt_cluster=None,
                 licensing_info=None,
                 capacity=None,
                 tags=None,
                 elm_status=None,
                 lifecycle_management_mode=None,
                 is_network_separation_enabled=None,
                 is_security_enabled=None,
                 is_primary_domain_for_nsx=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the workload domain
        :type  name: :class:`str` or ``None``
        :param name: Name of the workload domain
        :type  org_name: :class:`str` or ``None``
        :param org_name: Organization name of the workload domain
        :type  status: :class:`str` or ``None``
        :param status: Status of the workload domain
        :type  upgrade_state: :class:`str` or ``None``
        :param upgrade_state: Workload domain upgrade state
        :type  upgrade_status: :class:`UpgradeStatus` or ``None``
        :param upgrade_status:         :type  type: :class:`str` or ``None``
        :param type: Type of the workload domain
        :type  owners: :class:`list` of :class:`str` or ``None``
        :param owners: List of users owning the workload domain
        :type  vcenters: :class:`list` of :class:`VcenterReference` or ``None``
        :param vcenters: List of vCenters associated with the workload domain
        :type  sso_id: :class:`str` or ``None``
        :param sso_id: ID of the SSO domain associated with the workload domain
        :type  sso_name: :class:`str` or ``None``
        :param sso_name: Name of the SSO domain associated with the workload domain
        :type  is_management_sso_domain: :class:`bool` or ``None``
        :param is_management_sso_domain: Shows whether the workload domain is joined to the Management
            domain SSO
        :type  clusters: :class:`list` of :class:`ClusterReference` or ``None``
        :param clusters: List of clusters associated with the workload domain
        :type  nsxt_cluster: :class:`NsxtClusterReference` or ``None``
        :param nsxt_cluster:         :type  licensing_info: :class:`LicensingInfoReference` or ``None``
        :param licensing_info:         :type  capacity: :class:`Capacity` or ``None``
        :param capacity:         :type  tags: :class:`list` of :class:`Tag` or ``None``
        :param tags: Deprecated, this list will always be returned empty
        :type  elm_status: :class:`str` or ``None``
        :param elm_status: ELM status of the domain: ISOLATED, IN_TRANSIT, or LINKED
        :type  lifecycle_management_mode: :class:`str` or ``None``
        :param lifecycle_management_mode: Lifecycle Management mode of the domain
        :type  is_network_separation_enabled: :class:`bool` or ``None``
        :param is_network_separation_enabled: Domain network separation status
        :type  is_security_enabled: :class:`bool` or ``None``
        :param is_security_enabled: Domain security status
        :type  is_primary_domain_for_nsx: :class:`bool` or ``None``
        :param is_primary_domain_for_nsx: Is Primary Domain of NSX
        """
        self.id = id
        self.name = name
        self.org_name = org_name
        self.status = status
        self.upgrade_state = upgrade_state
        self.upgrade_status = upgrade_status
        self.type = type
        self.owners = owners
        self.vcenters = vcenters
        self.sso_id = sso_id
        self.sso_name = sso_name
        self.is_management_sso_domain = is_management_sso_domain
        self.clusters = clusters
        self.nsxt_cluster = nsxt_cluster
        self.licensing_info = licensing_info
        self.capacity = capacity
        self.tags = tags
        self.elm_status = elm_status
        self.lifecycle_management_mode = lifecycle_management_mode
        self.is_network_separation_enabled = is_network_separation_enabled
        self.is_security_enabled = is_security_enabled
        self.is_primary_domain_for_nsx = is_primary_domain_for_nsx
        VapiStruct.__init__(self)


Domain._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.domain', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'orgName': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'upgradeState': type.OptionalType(type.StringType()),
        'upgradeStatus': type.OptionalType(type.ReferenceType(__name__, 'UpgradeStatus')),
        'type': type.OptionalType(type.StringType()),
        'owners': type.OptionalType(type.ListType(type.StringType())),
        'vcenters': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VcenterReference'))),
        'ssoId': type.OptionalType(type.StringType()),
        'ssoName': type.OptionalType(type.StringType()),
        'isManagementSsoDomain': type.OptionalType(type.BooleanType()),
        'clusters': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ClusterReference'))),
        'nsxtCluster': type.OptionalType(type.ReferenceType(__name__, 'NsxtClusterReference')),
        'licensingInfo': type.OptionalType(type.ReferenceType(__name__, 'LicensingInfoReference')),
        'capacity': type.OptionalType(type.ReferenceType(__name__, 'Capacity')),
        'tags': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Tag'))),
        'elmStatus': type.OptionalType(type.StringType()),
        'lifecycleManagementMode': type.OptionalType(type.StringType()),
        'isNetworkSeparationEnabled': type.OptionalType(type.BooleanType()),
        'isSecurityEnabled': type.OptionalType(type.BooleanType()),
        'isPrimaryDomainForNsx': type.OptionalType(type.BooleanType()),
    },
    Domain,
    False,
    None))



class LicensingInfoReference(VapiStruct):
    """
    Represents a Licensing information

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'licensingMode': 'licensing_mode',
                            'subscriptionStatus': 'subscription_status',
                            'isRegistered': 'is_registered',
                            'isSubscribed': 'is_subscribed',
                            'daysRemainingToSubscribe': 'days_remaining_to_subscribe',
                            }

    def __init__(self,
                 licensing_mode=None,
                 subscription_status=None,
                 is_registered=None,
                 is_subscribed=None,
                 days_remaining_to_subscribe=None,
                ):
        """
        :type  licensing_mode: :class:`str` or ``None``
        :param licensing_mode: Licensing mode
        :type  subscription_status: :class:`str` or ``None``
        :param subscription_status: Status of the subscription mode
        :type  is_registered: :class:`bool` or ``None``
        :param is_registered: Flag indicating the resource is registered for subscription or not
        :type  is_subscribed: :class:`bool` or ``None``
        :param is_subscribed: Flag indicating the resource is subscribed or not 
            
            * Property is read-only.
            
            
        :type  days_remaining_to_subscribe: :class:`long` or ``None``
        :param days_remaining_to_subscribe: Number of days remaining to subscribe 
            
            * Property is read-only.
            
            
        """
        self.licensing_mode = licensing_mode
        self.subscription_status = subscription_status
        self.is_registered = is_registered
        self.is_subscribed = is_subscribed
        self.days_remaining_to_subscribe = days_remaining_to_subscribe
        VapiStruct.__init__(self)


LicensingInfoReference._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.licensing_info_reference', {
        'licensingMode': type.OptionalType(type.StringType()),
        'subscriptionStatus': type.OptionalType(type.StringType()),
        'isRegistered': type.OptionalType(type.BooleanType()),
        'isSubscribed': type.OptionalType(type.BooleanType()),
        'daysRemainingToSubscribe': type.OptionalType(type.IntegerType()),
    },
    LicensingInfoReference,
    False,
    None))



class PageOfDomain(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Domain` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfDomain._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_domain', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Domain'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfDomain,
    False,
    None))



class UpgradeStatus(VapiStruct):
    """
    Represents upgrade status of a domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'status': 'status',
                            'completedResources': 'completed_resources',
                            'totalResources': 'total_resources',
                            }

    def __init__(self,
                 status=None,
                 completed_resources=None,
                 total_resources=None,
                ):
        """
        :type  status: :class:`str` or ``None``
        :param status: Upgrade status
        :type  completed_resources: :class:`long` or ``None``
        :param completed_resources: Number of completed resources
        :type  total_resources: :class:`long` or ``None``
        :param total_resources: Total number of resources
        """
        self.status = status
        self.completed_resources = completed_resources
        self.total_resources = total_resources
        VapiStruct.__init__(self)


UpgradeStatus._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.upgrade_status', {
        'status': type.OptionalType(type.StringType()),
        'completedResources': type.OptionalType(type.IntegerType()),
        'totalResources': type.OptionalType(type.IntegerType()),
    },
    UpgradeStatus,
    False,
    None))



class Certificate(VapiStruct):
    """
    Represents certificate and its attributes

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'isInstalled': 'is_installed',
                            'version': 'version',
                            'serialNumber': 'serial_number',
                            'issuedTo': 'issued_to',
                            'resourceType': 'resource_type',
                            'resourceName': 'resource_name',
                            'issuedBy': 'issued_by',
                            'notBefore': 'not_before',
                            'notAfter': 'not_after',
                            'signatureAlgorithm': 'signature_algorithm',
                            'subject': 'subject',
                            'domain': 'domain',
                            'subjectAlternativeName': 'subject_alternative_name',
                            'publicKey': 'public_key',
                            'publicKeyAlgorithm': 'public_key_algorithm',
                            'keySize': 'key_size',
                            'thumbprintAlgorithm': 'thumbprint_algorithm',
                            'thumbprint': 'thumbprint',
                            'numberOfDaysToExpire': 'number_of_days_to_expire',
                            'expirationStatus': 'expiration_status',
                            'pemEncoded': 'pem_encoded',
                            'getCertificateError': 'get_certificate_error',
                            'operationType': 'operation_type',
                            'operationStatus': 'operation_status',
                            'operationMessage': 'operation_message',
                            'caChain': 'ca_chain',
                            'domainId': 'domain_id',
                            'autoRenew': 'auto_renew',
                            'autoRenewStatus': 'auto_renew_status',
                            'caType': 'ca_type',
                            'autoRenewFailureMessage': 'auto_renew_failure_message',
                            }

    def __init__(self,
                 is_installed=None,
                 version=None,
                 serial_number=None,
                 issued_to=None,
                 resource_type=None,
                 resource_name=None,
                 issued_by=None,
                 not_before=None,
                 not_after=None,
                 signature_algorithm=None,
                 subject=None,
                 domain=None,
                 subject_alternative_name=None,
                 public_key=None,
                 public_key_algorithm=None,
                 key_size=None,
                 thumbprint_algorithm=None,
                 thumbprint=None,
                 number_of_days_to_expire=None,
                 expiration_status=None,
                 pem_encoded=None,
                 get_certificate_error=None,
                 operation_type=None,
                 operation_status=None,
                 operation_message=None,
                 ca_chain=None,
                 domain_id=None,
                 auto_renew=None,
                 auto_renew_status=None,
                 ca_type=None,
                 auto_renew_failure_message=None,
                ):
        """
        :type  is_installed: :class:`bool` or ``None``
        :param is_installed: Whether the certificate is installed or not 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: The X.509 version of the certificate 
            
            * Property is read-only.
            
            
        :type  serial_number: :class:`str` or ``None``
        :param serial_number: The serial number of the certificate 
            
            * Property is read-only.
            
            
        :type  issued_to: :class:`str` or ``None``
        :param issued_to: To whom the certificate is issued 
            
            * Property is read-only.
            
            
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Resource type
        :type  resource_name: :class:`str` or ``None``
        :param resource_name: Resource fqdn
        :type  issued_by: :class:`str` or ``None``
        :param issued_by: The certificate authority that issued the certificate 
            
            * Property is read-only.
            
            
        :type  not_before: :class:`str` or ``None``
        :param not_before: The timestamp before which certificate is not valid 
            
            * Property is read-only.
            
            
        :type  not_after: :class:`str` or ``None``
        :param not_after: The timestamp after which certificate is not valid 
            
            * Property is read-only.
            
            
        :type  signature_algorithm: :class:`str` or ``None``
        :param signature_algorithm: Algorithm used to sign the certificate 
            
            * Property is read-only.
            
            
        :type  subject: :class:`str` or ``None``
        :param subject: Complete distinguished name to which the certificate is issued 
            
            * Property is read-only.
            
            
        :type  domain: :class:`str` or ``None``
        :param domain: Domain of the resource certificate 
            
            * Property is read-only.
            
            
        :type  subject_alternative_name: :class:`list` of :class:`str` or ``None``
        :param subject_alternative_name: The alternative names to which the certificate is issued 
            
            * Property is read-only.
            
            
        :type  public_key: :class:`str` or ``None``
        :param public_key: The public key of the certificate 
            
            * Property is read-only.
            
            
        :type  public_key_algorithm: :class:`str` or ``None``
        :param public_key_algorithm: The public key algorithm of the certificate 
            
            * Property is read-only.
            
            
        :type  key_size: :class:`str` or ``None``
        :param key_size: The key size of the certificate 
            
            * Property is read-only.
            
            
        :type  thumbprint_algorithm: :class:`str` or ``None``
        :param thumbprint_algorithm: Algorithm used to generate thumbprint 
            
            * Property is read-only.
            
            
        :type  thumbprint: :class:`str` or ``None``
        :param thumbprint: Thumbprint generated using certificate content 
            
            * Property is read-only.
            
            
        :type  number_of_days_to_expire: :class:`long` or ``None``
        :param number_of_days_to_expire: Number of days left for the certificate to expire 
            
            * Property is read-only.
            
            
        :type  expiration_status: :class:`str` or ``None``
        :param expiration_status: Certificate expiry status 
            
            * Property is read-only.
            
            
        :type  pem_encoded: :class:`str` or ``None``
        :param pem_encoded: The PEM encoded certificate content 
            
            * Property is read-only.
            
            
        :type  get_certificate_error: :class:`str` or ``None``
        :param get_certificate_error: Error if certificate cannot be fetched 
            
            * Property is read-only.
            
            
        :type  operation_type: :class:`str` or ``None``
        :param operation_type: The last operation type 
            
            * Property is read-only.
            
            
        :type  operation_status: :class:`str` or ``None``
        :param operation_status: The last operation status 
            
            * Property is read-only.
            
            
        :type  operation_message: :class:`str` or ``None``
        :param operation_message: The last operation status message 
            
            * Property is read-only.
            
            
        :type  ca_chain: :class:`list` of :class:`Certificate` or ``None``
        :param ca_chain: Certificate chain ordered from intermediate to root certificates 
            
            * Property is read-only.
            
            
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: Domain ID of the resource certificate 
            
            * Property is read-only.
            
            
        :type  auto_renew: :class:`str` or ``None``
        :param auto_renew: Represents the auto-renew status of that certificate 
            
            * Property is read-only.
            
            
        :type  auto_renew_status: :class:`str` or ``None``
        :param auto_renew_status: Represents the auto-renew scheduling status 
            
            * Property is read-only.
            
            
        :type  ca_type: :class:`str` or ``None``
        :param ca_type: Represents the CA type used to sign the certificate 
            
            * Property is read-only.
            
            
        :type  auto_renew_failure_message: :class:`str` or ``None``
        :param auto_renew_failure_message: Represents the auto-renew scheduling error message 
            
            * Property is read-only.
            
            
        """
        self.is_installed = is_installed
        self.version = version
        self.serial_number = serial_number
        self.issued_to = issued_to
        self.resource_type = resource_type
        self.resource_name = resource_name
        self.issued_by = issued_by
        self.not_before = not_before
        self.not_after = not_after
        self.signature_algorithm = signature_algorithm
        self.subject = subject
        self.domain = domain
        self.subject_alternative_name = subject_alternative_name
        self.public_key = public_key
        self.public_key_algorithm = public_key_algorithm
        self.key_size = key_size
        self.thumbprint_algorithm = thumbprint_algorithm
        self.thumbprint = thumbprint
        self.number_of_days_to_expire = number_of_days_to_expire
        self.expiration_status = expiration_status
        self.pem_encoded = pem_encoded
        self.get_certificate_error = get_certificate_error
        self.operation_type = operation_type
        self.operation_status = operation_status
        self.operation_message = operation_message
        self.ca_chain = ca_chain
        self.domain_id = domain_id
        self.auto_renew = auto_renew
        self.auto_renew_status = auto_renew_status
        self.ca_type = ca_type
        self.auto_renew_failure_message = auto_renew_failure_message
        VapiStruct.__init__(self)


Certificate._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.certificate', {
        'isInstalled': type.OptionalType(type.BooleanType()),
        'version': type.OptionalType(type.StringType()),
        'serialNumber': type.OptionalType(type.StringType()),
        'issuedTo': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'resourceName': type.OptionalType(type.StringType()),
        'issuedBy': type.OptionalType(type.StringType()),
        'notBefore': type.OptionalType(type.StringType()),
        'notAfter': type.OptionalType(type.StringType()),
        'signatureAlgorithm': type.OptionalType(type.StringType()),
        'subject': type.OptionalType(type.StringType()),
        'domain': type.OptionalType(type.StringType()),
        'subjectAlternativeName': type.OptionalType(type.ListType(type.StringType())),
        'publicKey': type.OptionalType(type.StringType()),
        'publicKeyAlgorithm': type.OptionalType(type.StringType()),
        'keySize': type.OptionalType(type.StringType()),
        'thumbprintAlgorithm': type.OptionalType(type.StringType()),
        'thumbprint': type.OptionalType(type.StringType()),
        'numberOfDaysToExpire': type.OptionalType(type.IntegerType()),
        'expirationStatus': type.OptionalType(type.StringType()),
        'pemEncoded': type.OptionalType(type.StringType()),
        'getCertificateError': type.OptionalType(type.StringType()),
        'operationType': type.OptionalType(type.StringType()),
        'operationStatus': type.OptionalType(type.StringType()),
        'operationMessage': type.OptionalType(type.StringType()),
        'caChain': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Certificate'))),
        'domainId': type.OptionalType(type.StringType()),
        'autoRenew': type.OptionalType(type.StringType()),
        'autoRenewStatus': type.OptionalType(type.StringType()),
        'caType': type.OptionalType(type.StringType()),
        'autoRenewFailureMessage': type.OptionalType(type.StringType()),
    },
    Certificate,
    False,
    None))



class PageOfCertificate(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Certificate` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfCertificate._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_certificate', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Certificate'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfCertificate,
    False,
    None))



class Endpoint(VapiStruct):
    """
    Represents an Endpoint in a Domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'url': 'url',
                            }

    def __init__(self,
                 type=None,
                 url=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: Type of the Endpoint 
            
            * Property is read-only.
            
            
        :type  url: :class:`str` or ``None``
        :param url: Url of the Endpoint 
            
            * Property is read-only.
            
            
        """
        self.type = type
        self.url = url
        VapiStruct.__init__(self)


Endpoint._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.endpoint', {
        'type': type.OptionalType(type.StringType()),
        'url': type.OptionalType(type.StringType()),
    },
    Endpoint,
    False,
    None))



class PageOfEndpoint(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Endpoint` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfEndpoint._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_endpoint', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Endpoint'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfEndpoint,
    False,
    None))



class PageOfDatacenter(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Datacenter` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfDatacenter._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_datacenter', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Datacenter'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfDatacenter,
    False,
    None))



class Csr(VapiStruct):
    """
    The Certificate Signing Request (CSR) details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'csrEncodedContent': 'csr_encoded_content',
                            'resource': 'resource',
                            'csrDecodedContent': 'csr_decoded_content',
                            }

    def __init__(self,
                 csr_encoded_content=None,
                 resource=None,
                 csr_decoded_content=None,
                ):
        """
        :type  csr_encoded_content: :class:`str` or ``None``
        :param csr_encoded_content: The CSR encoded content 
            
            * Property is read-only.
            
            
        :type  resource: :class:`Resource` or ``None``
        :param resource:         :type  csr_decoded_content: :class:`str` or ``None``
        :param csr_decoded_content: The CSR decoded content 
            
            * Property is read-only.
            
            
        """
        self.csr_encoded_content = csr_encoded_content
        self.resource = resource
        self.csr_decoded_content = csr_decoded_content
        VapiStruct.__init__(self)


Csr._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.csr', {
        'csrEncodedContent': type.OptionalType(type.StringType()),
        'resource': type.OptionalType(type.ReferenceType(__name__, 'Resource')),
        'csrDecodedContent': type.OptionalType(type.StringType()),
    },
    Csr,
    False,
    None))



class PageOfCsr(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Csr` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfCsr._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_csr', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Csr'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfCsr,
    False,
    None))



class ComplianceAudit(VapiStruct):
    """
    Represents a compliance audit report

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'creationTimestamp': 'creation_timestamp',
                            'completionTimestamp': 'completion_timestamp',
                            'standardType': 'standard_type',
                            'standardVersion': 'standard_version',
                            'domainId': 'domain_id',
                            'configurationEvaluationStatus': 'configuration_evaluation_status',
                            'configurationEvaluationStatusDetails': 'configuration_evaluation_status_details',
                            'compliantStatus': 'compliant_status',
                            'totalConfigurationsEvaluated': 'total_configurations_evaluated',
                            'numberOfNonCompliantConfigurations': 'number_of_non_compliant_configurations',
                            'numberOfSkippedConfigurations': 'number_of_skipped_configurations',
                            'numberOfAuditItems': 'number_of_audit_items',
                            'auditItems': 'audit_items',
                            }

    def __init__(self,
                 id=None,
                 creation_timestamp=None,
                 completion_timestamp=None,
                 standard_type=None,
                 standard_version=None,
                 domain_id=None,
                 configuration_evaluation_status=None,
                 configuration_evaluation_status_details=None,
                 compliant_status=None,
                 total_configurations_evaluated=None,
                 number_of_non_compliant_configurations=None,
                 number_of_skipped_configurations=None,
                 number_of_audit_items=None,
                 audit_items=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Compliance audit id 
            
            * Property is read-only.
            
            
        :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: The timestamp at which audit was initiated 
            
            * Property is read-only.
            
            
        :type  completion_timestamp: :class:`str` or ``None``
        :param completion_timestamp: The timestamp at which audit was completed 
            
            * Property is read-only.
            
            
        :type  standard_type: :class:`str` or ``None``
        :param standard_type: Compliance standard type 
            
            * Property is read-only.
            
            
        :type  standard_version: :class:`str` or ``None``
        :param standard_version: Compliance standard version 
            
            * Property is read-only.
            
            
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: Domain id 
            
            * Property is read-only.
            
            
        :type  configuration_evaluation_status: :class:`str` or ``None``
        :param configuration_evaluation_status: Configuration evaluation status 
            
            * Property is read-only.
            
            
        :type  configuration_evaluation_status_details: :class:`str` or ``None``
        :param configuration_evaluation_status_details: Details about evaluation status 
            
            * Property is read-only.
            
            
        :type  compliant_status: :class:`str` or ``None``
        :param compliant_status: Compliant status of overall task 
            
            * Property is read-only.
            
            
        :type  total_configurations_evaluated: :class:`long` or ``None``
        :param total_configurations_evaluated: Total number of configurations evaluated 
            
            * Property is read-only.
            
            
        :type  number_of_non_compliant_configurations: :class:`long` or ``None``
        :param number_of_non_compliant_configurations: Number of non compliant configurations 
            
            * Property is read-only.
            
            
        :type  number_of_skipped_configurations: :class:`long` or ``None``
        :param number_of_skipped_configurations: Number of configurations skipped 
            
            * Property is read-only.
            
            
        :type  number_of_audit_items: :class:`long` or ``None``
        :param number_of_audit_items: Number of audit items 
            
            * Property is read-only.
            
            
        :type  audit_items: :class:`list` of :class:`ComplianceAuditItem` or ``None``
        :param audit_items: Compliance audit items 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.creation_timestamp = creation_timestamp
        self.completion_timestamp = completion_timestamp
        self.standard_type = standard_type
        self.standard_version = standard_version
        self.domain_id = domain_id
        self.configuration_evaluation_status = configuration_evaluation_status
        self.configuration_evaluation_status_details = configuration_evaluation_status_details
        self.compliant_status = compliant_status
        self.total_configurations_evaluated = total_configurations_evaluated
        self.number_of_non_compliant_configurations = number_of_non_compliant_configurations
        self.number_of_skipped_configurations = number_of_skipped_configurations
        self.number_of_audit_items = number_of_audit_items
        self.audit_items = audit_items
        VapiStruct.__init__(self)


ComplianceAudit._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compliance_audit', {
        'id': type.OptionalType(type.StringType()),
        'creationTimestamp': type.OptionalType(type.StringType()),
        'completionTimestamp': type.OptionalType(type.StringType()),
        'standardType': type.OptionalType(type.StringType()),
        'standardVersion': type.OptionalType(type.StringType()),
        'domainId': type.OptionalType(type.StringType()),
        'configurationEvaluationStatus': type.OptionalType(type.StringType()),
        'configurationEvaluationStatusDetails': type.OptionalType(type.StringType()),
        'compliantStatus': type.OptionalType(type.StringType()),
        'totalConfigurationsEvaluated': type.OptionalType(type.IntegerType()),
        'numberOfNonCompliantConfigurations': type.OptionalType(type.IntegerType()),
        'numberOfSkippedConfigurations': type.OptionalType(type.IntegerType()),
        'numberOfAuditItems': type.OptionalType(type.IntegerType()),
        'auditItems': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ComplianceAuditItem'))),
    },
    ComplianceAudit,
    False,
    None))



class ComplianceAuditItem(VapiStruct):
    """
    Represents a compliance audit item

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceType': 'resource_type',
                            'resourceVersion': 'resource_version',
                            'resourceName': 'resource_name',
                            'configurationId': 'configuration_id',
                            'configurationTitle': 'configuration_title',
                            'isConfigurationRecommendedByStandard': 'is_configuration_recommended_by_standard',
                            'citationReference': 'citation_reference',
                            'recommendedValue': 'recommended_value',
                            'actualValue': 'actual_value',
                            'complianceStatus': 'compliance_status',
                            'remediationStep': 'remediation_step',
                            'complianceAuditStatus': 'compliance_audit_status',
                            'errorMessage': 'error_message',
                            }

    def __init__(self,
                 resource_type=None,
                 resource_version=None,
                 resource_name=None,
                 configuration_id=None,
                 configuration_title=None,
                 is_configuration_recommended_by_standard=None,
                 citation_reference=None,
                 recommended_value=None,
                 actual_value=None,
                 compliance_status=None,
                 remediation_step=None,
                 compliance_audit_status=None,
                 error_message=None,
                ):
        """
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Compliance resource type 
            
            * Property is read-only.
            
            
        :type  resource_version: :class:`str` or ``None``
        :param resource_version: Compliance resource version 
            
            * Property is read-only.
            
            
        :type  resource_name: :class:`str` or ``None``
        :param resource_name: Compliance resource name 
            
            * Property is read-only.
            
            
        :type  configuration_id: :class:`str` or ``None``
        :param configuration_id: Compliance configuration id 
            
            * Property is read-only.
            
            
        :type  configuration_title: :class:`str` or ``None``
        :param configuration_title: Compliance configuration title 
            
            * Property is read-only.
            
            
        :type  is_configuration_recommended_by_standard: :class:`bool` or ``None``
        :param is_configuration_recommended_by_standard: Whether the configuration is recommended by compliance standard 
            
            * Property is read-only.
            
            
        :type  citation_reference: :class:`str` or ``None``
        :param citation_reference: Compliance configuration citation in compliance standard
            documentation 
            
            * Property is read-only.
            
            
        :type  recommended_value: :class:`str` or ``None``
        :param recommended_value: Recommended value for compliance configuration 
            
            * Property is read-only.
            
            
        :type  actual_value: :class:`str` or ``None``
        :param actual_value: Actual value for compliance configuration 
            
            * Property is read-only.
            
            
        :type  compliance_status: :class:`str` or ``None``
        :param compliance_status: Compliance status of the configuration 
            
            * Property is read-only.
            
            
        :type  remediation_step: :class:`str` or ``None``
        :param remediation_step: Remediation steps if the configuration is non compliant 
            
            * Property is read-only.
            
            
        :type  compliance_audit_status: :class:`str` or ``None``
        :param compliance_audit_status: Compliance audit task status 
            
            * Property is read-only.
            
            
        :type  error_message: :class:`str` or ``None``
        :param error_message: Error message if compliance audit fails 
            
            * Property is read-only.
            
            
        """
        self.resource_type = resource_type
        self.resource_version = resource_version
        self.resource_name = resource_name
        self.configuration_id = configuration_id
        self.configuration_title = configuration_title
        self.is_configuration_recommended_by_standard = is_configuration_recommended_by_standard
        self.citation_reference = citation_reference
        self.recommended_value = recommended_value
        self.actual_value = actual_value
        self.compliance_status = compliance_status
        self.remediation_step = remediation_step
        self.compliance_audit_status = compliance_audit_status
        self.error_message = error_message
        VapiStruct.__init__(self)


ComplianceAuditItem._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compliance_audit_item', {
        'resourceType': type.OptionalType(type.StringType()),
        'resourceVersion': type.OptionalType(type.StringType()),
        'resourceName': type.OptionalType(type.StringType()),
        'configurationId': type.OptionalType(type.StringType()),
        'configurationTitle': type.OptionalType(type.StringType()),
        'isConfigurationRecommendedByStandard': type.OptionalType(type.BooleanType()),
        'citationReference': type.OptionalType(type.StringType()),
        'recommendedValue': type.OptionalType(type.StringType()),
        'actualValue': type.OptionalType(type.StringType()),
        'complianceStatus': type.OptionalType(type.StringType()),
        'remediationStep': type.OptionalType(type.StringType()),
        'complianceAuditStatus': type.OptionalType(type.StringType()),
        'errorMessage': type.OptionalType(type.StringType()),
    },
    ComplianceAuditItem,
    False,
    None))



class PageOfComplianceAudit(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`ComplianceAudit` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfComplianceAudit._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_compliance_audit', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ComplianceAudit'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfComplianceAudit,
    False,
    None))



class PageOfComplianceAuditItem(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`ComplianceAuditItem` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfComplianceAuditItem._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_compliance_audit_item', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ComplianceAuditItem'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfComplianceAuditItem,
    False,
    None))



class DomainCapabilities(VapiStruct):
    """
    This specification contains capabilities of a domain

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'domainId': 'domain_id',
                            'capabilities': 'capabilities',
                            }

    def __init__(self,
                 domain_id=None,
                 capabilities=None,
                ):
        """
        :type  domain_id: :class:`str` or ``None``
        :param domain_id: Domain Id
        :type  capabilities: :class:`list` of :class:`str` or ``None``
        :param capabilities: Capabilities of the domain
        """
        self.domain_id = domain_id
        self.capabilities = capabilities
        VapiStruct.__init__(self)


DomainCapabilities._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.domain_capabilities', {
        'domainId': type.OptionalType(type.StringType()),
        'capabilities': type.OptionalType(type.ListType(type.StringType())),
    },
    DomainCapabilities,
    False,
    None))



class IsolationPrecheckResult(VapiStruct):
    """
    Isolation Precheck Results

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'precheckFailures': 'precheck_failures',
                            'precheckWarnings': 'precheck_warnings',
                            'implications': 'implications',
                            'executionStatus': 'execution_status',
                            }

    def __init__(self,
                 precheck_failures=None,
                 precheck_warnings=None,
                 implications=None,
                 execution_status=None,
                ):
        """
        :type  precheck_failures: :class:`list` of :class:`str` or ``None``
        :param precheck_failures: Conditions that will have to be remediated inorder to proceed with
            isolation operation
        :type  precheck_warnings: :class:`list` of :class:`str` or ``None``
        :param precheck_warnings: Conditions that may have to cause side effects if not remediated
            during execution of isolation operation
        :type  implications: :class:`list` of :class:`str` or ``None``
        :param implications: Implications of breaking ELM
        :type  execution_status: :class:`str` or ``None``
        :param execution_status: Execution status of the prechecks
        """
        self.precheck_failures = precheck_failures
        self.precheck_warnings = precheck_warnings
        self.implications = implications
        self.execution_status = execution_status
        VapiStruct.__init__(self)


IsolationPrecheckResult._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.isolation_precheck_result', {
        'precheckFailures': type.OptionalType(type.ListType(type.StringType())),
        'precheckWarnings': type.OptionalType(type.ListType(type.StringType())),
        'implications': type.OptionalType(type.ListType(type.StringType())),
        'executionStatus': type.OptionalType(type.StringType()),
    },
    IsolationPrecheckResult,
    False,
    None))



class HealthCheckQueryResult(VapiStruct):
    """
    HealthCheckQueryResult

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resultId': 'result_id',
                            'status': 'status',
                            'result': 'result',
                            }

    def __init__(self,
                 result_id=None,
                 status=None,
                 result=None,
                ):
        """
        :type  result_id: :class:`str` or ``None``
        :param result_id: Result id
        :type  status: :class:`str` or ``None``
        :param status: status
        :type  result: :class:`list` of :class:`HealthCheckResult` or ``None``
        :param result: result
        """
        self.result_id = result_id
        self.status = status
        self.result = result
        VapiStruct.__init__(self)


HealthCheckQueryResult._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.health_check_query_result', {
        'resultId': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'result': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'HealthCheckResult'))),
    },
    HealthCheckQueryResult,
    False,
    None))



class HealthCheckResult(VapiStruct):
    """
    HealthCheckResult

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'description': 'description',
                            'type': 'type',
                            'status': 'status',
                            'resourceType': 'resource_type',
                            'resourceId': 'resource_id',
                            'resourceName': 'resource_name',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 description=None,
                 type=None,
                 status=None,
                 resource_type=None,
                 resource_id=None,
                 resource_name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Health Check id
        :type  name: :class:`str` or ``None``
        :param name: Health Check name
        :type  description: :class:`str` or ``None``
        :param description: Health check description
        :type  type: :class:`str` or ``None``
        :param type: Type of the health check. 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: Type of the health status. 
            
            * Property is read-only.
            
            
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Type of the health status. 
            
            * Property is read-only.
            
            
        :type  resource_id: :class:`str` or ``None``
        :param resource_id: ID of the resource, if the ResourceType is CLUSTER, then the
            resourceId == ClusterId
        :type  resource_name: :class:`str` or ``None``
        :param resource_name: Name of resource, if the ResourceType is CLUSTER, then the
            resourceName == ClusterName
        """
        self.id = id
        self.name = name
        self.description = description
        self.type = type
        self.status = status
        self.resource_type = resource_type
        self.resource_id = resource_id
        self.resource_name = resource_name
        VapiStruct.__init__(self)


HealthCheckResult._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.health_check_result', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'resourceId': type.OptionalType(type.StringType()),
        'resourceName': type.OptionalType(type.StringType()),
    },
    HealthCheckResult,
    False,
    None))



class PageOfDatastoreCriterion(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`DatastoreCriterion` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfDatastoreCriterion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_datastore_criterion', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'DatastoreCriterion'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfDatastoreCriterion,
    False,
    None))



class PageOfClusterCriterion(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`ClusterCriterion` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfClusterCriterion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_cluster_criterion', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ClusterCriterion'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfClusterCriterion,
    False,
    None))



class DomainsWithCapabilities(VapiStruct):
    """
    Represents the Capabilities of Domains

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'result': 'result',
                            'errors': 'errors',
                            }

    def __init__(self,
                 result=None,
                 errors=None,
                ):
        """
        :type  result: :class:`PageDomainCapabilities` or ``None``
        :param result:         :type  errors: :class:`list` of :class:`ResourceError` or ``None``
        :param errors: Errors associated to domains, for which capabilities retrieval
            failed
        """
        self.result = result
        self.errors = errors
        VapiStruct.__init__(self)


DomainsWithCapabilities._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.domains_with_capabilities', {
        'result': type.OptionalType(type.ReferenceType(__name__, 'PageDomainCapabilities')),
        'errors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ResourceError'))),
    },
    DomainsWithCapabilities,
    False,
    None))



class PageDomainCapabilities(VapiStruct):
    """
    Represents a page of elements of a single type

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`DomainCapabilities` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageDomainCapabilities._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_domain_capabilities', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'DomainCapabilities'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageDomainCapabilities,
    False,
    None))



class AutoRotateCredentialPolicy(VapiStruct):
    """
    Represents a auto-rotate policy for a credential

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'frequencyInDays': 'frequency_in_days',
                            'nextSchedule': 'next_schedule',
                            }

    def __init__(self,
                 frequency_in_days=None,
                 next_schedule=None,
                ):
        """
        :type  frequency_in_days: :class:`long` or ``None``
        :param frequency_in_days: Frequency in days 
            
            * Property is read-only.
            
            
        :type  next_schedule: :class:`str` or ``None``
        :param next_schedule: The timestamp at which auto-rotate for credential will run 
            
            * Property is read-only.
            
            
        """
        self.frequency_in_days = frequency_in_days
        self.next_schedule = next_schedule
        VapiStruct.__init__(self)


AutoRotateCredentialPolicy._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.auto_rotate_credential_policy', {
        'frequencyInDays': type.OptionalType(type.IntegerType()),
        'nextSchedule': type.OptionalType(type.StringType()),
    },
    AutoRotateCredentialPolicy,
    False,
    None))



class Credential(VapiStruct):
    """
    Represents a credential and the resource to which it is associated with

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'credentialType': 'credential_type',
                            'accountType': 'account_type',
                            'username': 'username',
                            'password': 'password',
                            'creationTimestamp': 'creation_timestamp',
                            'modificationTimestamp': 'modification_timestamp',
                            'expiry': 'expiry',
                            'resource': 'resource',
                            'autoRotatePolicy': 'auto_rotate_policy',
                            }

    def __init__(self,
                 id=None,
                 credential_type=None,
                 account_type=None,
                 username=None,
                 password=None,
                 creation_timestamp=None,
                 modification_timestamp=None,
                 expiry=None,
                 resource=None,
                 auto_rotate_policy=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Credential ID 
            
            * Property is read-only.
            
            
        :type  credential_type: :class:`str` or ``None``
        :param credential_type: Credential type 
            
            * Property is read-only.
            
            
        :type  account_type: :class:`str` or ``None``
        :param account_type: Account type 
            
            * Property is read-only.
            
            
        :type  username: :class:`str` or ``None``
        :param username: Username 
            
            * Property is read-only.
            
            
        :type  password: :class:`str` or ``None``
        :param password: Password 
            
            * Property is read-only.
            
            
        :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: The timestamp at which credential was created 
            
            * Property is read-only.
            
            
        :type  modification_timestamp: :class:`str` or ``None``
        :param modification_timestamp: The timestamp at which credential was last modified 
            
            * Property is read-only.
            
            
        :type  expiry: :class:`ExpirationDetails` or ``None``
        :param expiry:         :type  resource: :class:`AuthenticatedResource` or ``None``
        :param resource:         :type  auto_rotate_policy: :class:`AutoRotateCredentialPolicy` or ``None``
        :param auto_rotate_policy:         """
        self.id = id
        self.credential_type = credential_type
        self.account_type = account_type
        self.username = username
        self.password = password
        self.creation_timestamp = creation_timestamp
        self.modification_timestamp = modification_timestamp
        self.expiry = expiry
        self.resource = resource
        self.auto_rotate_policy = auto_rotate_policy
        VapiStruct.__init__(self)


Credential._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.credential', {
        'id': type.OptionalType(type.StringType()),
        'credentialType': type.OptionalType(type.StringType()),
        'accountType': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'password': type.OptionalType(type.StringType()),
        'creationTimestamp': type.OptionalType(type.StringType()),
        'modificationTimestamp': type.OptionalType(type.StringType()),
        'expiry': type.OptionalType(type.ReferenceType(__name__, 'ExpirationDetails')),
        'resource': type.OptionalType(type.ReferenceType(__name__, 'AuthenticatedResource')),
        'autoRotatePolicy': type.OptionalType(type.ReferenceType(__name__, 'AutoRotateCredentialPolicy')),
    },
    Credential,
    False,
    None))



class PageOfCredential(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Credential` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfCredential._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_credential', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Credential'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfCredential,
    False,
    None))



class CredentialsSubTask(VapiStruct):
    """
    Represents the credentials sub-task in the system

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'resourceName': 'resource_name',
                            'name': 'name',
                            'description': 'description',
                            'creationTimestamp': 'creation_timestamp',
                            'completionTimestamp': 'completion_timestamp',
                            'status': 'status',
                            'dependentSubTasks': 'dependent_sub_tasks',
                            'errors': 'errors',
                            'oldPassword': 'old_password',
                            'newPassword': 'new_password',
                            'entityType': 'entity_type',
                            'username': 'username',
                            'credentialType': 'credential_type',
                            }

    def __init__(self,
                 id=None,
                 resource_name=None,
                 name=None,
                 description=None,
                 creation_timestamp=None,
                 completion_timestamp=None,
                 status=None,
                 dependent_sub_tasks=None,
                 errors=None,
                 old_password=None,
                 new_password=None,
                 entity_type=None,
                 username=None,
                 credential_type=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Credential sub-task ID 
            
            * Property is read-only.
            
            
        :type  resource_name: :class:`str` or ``None``
        :param resource_name: Resource name 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: Credential sub-task name 
            
            * Property is read-only.
            
            
        :type  description: :class:`str` or ``None``
        :param description: Credential sub-task description 
            
            * Property is read-only.
            
            
        :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: Credential sub-task creation timestamp 
            
            * Property is read-only.
            
            
        :type  completion_timestamp: :class:`str` or ``None``
        :param completion_timestamp: Credential sub-task completion timestamp 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: Credential sub-task status 
            
            * Property is read-only.
            
            
        :type  dependent_sub_tasks: :class:`list` of :class:`CredentialsSubTask` or ``None``
        :param dependent_sub_tasks: List of dependent sub-tasks of the credential sub-task 
            
            * Property is read-only.
            
            
        :type  errors: :class:`list` of :class:`Error` or ``None``
        :param errors: List of errors in case of a failure 
            
            * Property is read-only.
            
            
        :type  old_password: :class:`str` or ``None``
        :param old_password: Credential sub-task old password 
            
            * Property is read-only.
            
            
        :type  new_password: :class:`str` or ``None``
        :param new_password: Credential sub-task new password 
            
            * Property is read-only.
            
            
        :type  entity_type: :class:`str` or ``None``
        :param entity_type: Credential sub-task entity type 
            
            * Property is read-only.
            
            
        :type  username: :class:`str` or ``None``
        :param username: Credential sub-task username 
            
            * Property is read-only.
            
            
        :type  credential_type: :class:`str` or ``None``
        :param credential_type: Credential sub-task credential type 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.resource_name = resource_name
        self.name = name
        self.description = description
        self.creation_timestamp = creation_timestamp
        self.completion_timestamp = completion_timestamp
        self.status = status
        self.dependent_sub_tasks = dependent_sub_tasks
        self.errors = errors
        self.old_password = old_password
        self.new_password = new_password
        self.entity_type = entity_type
        self.username = username
        self.credential_type = credential_type
        VapiStruct.__init__(self)


CredentialsSubTask._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.credentials_sub_task', {
        'id': type.OptionalType(type.StringType()),
        'resourceName': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'creationTimestamp': type.OptionalType(type.StringType()),
        'completionTimestamp': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'dependentSubTasks': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CredentialsSubTask'))),
        'errors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Error'))),
        'oldPassword': type.OptionalType(type.StringType()),
        'newPassword': type.OptionalType(type.StringType()),
        'entityType': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'credentialType': type.OptionalType(type.StringType()),
    },
    CredentialsSubTask,
    False,
    None))



class CredentialsTask(VapiStruct):
    """
    Represents the credentials task in the system

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'type': 'type',
                            'creationTimestamp': 'creation_timestamp',
                            'completionTimestamp': 'completion_timestamp',
                            'status': 'status',
                            'subTasks': 'sub_tasks',
                            'errors': 'errors',
                            'isAutoRotate': 'is_auto_rotate',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 type=None,
                 creation_timestamp=None,
                 completion_timestamp=None,
                 status=None,
                 sub_tasks=None,
                 errors=None,
                 is_auto_rotate=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Credential task ID 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: Credential task name 
            
            * Property is read-only.
            
            
        :type  type: :class:`str` or ``None``
        :param type: Credential task type 
            
            * Property is read-only.
            
            
        :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: Credential task creation timestamp 
            
            * Property is read-only.
            
            
        :type  completion_timestamp: :class:`str` or ``None``
        :param completion_timestamp: Credential task completion timestamp 
            
            * Property is read-only.
            
            
        :type  status: :class:`str` or ``None``
        :param status: Credential task status 
            
            * Property is read-only.
            
            
        :type  sub_tasks: :class:`list` of :class:`CredentialsSubTask` or ``None``
        :param sub_tasks: List of credential sub-tasks of the credential task 
            
            * Property is read-only.
            
            
        :type  errors: :class:`list` of :class:`Error` or ``None``
        :param errors: List of errors in case of a failure 
            
            * Property is read-only.
            
            
        :type  is_auto_rotate: :class:`bool` or ``None``
        :param is_auto_rotate: Is Credential task an auto rotate task 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.name = name
        self.type = type
        self.creation_timestamp = creation_timestamp
        self.completion_timestamp = completion_timestamp
        self.status = status
        self.sub_tasks = sub_tasks
        self.errors = errors
        self.is_auto_rotate = is_auto_rotate
        VapiStruct.__init__(self)


CredentialsTask._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.credentials_task', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'creationTimestamp': type.OptionalType(type.StringType()),
        'completionTimestamp': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'subTasks': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CredentialsSubTask'))),
        'errors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Error'))),
        'isAutoRotate': type.OptionalType(type.BooleanType()),
    },
    CredentialsTask,
    False,
    None))



class PageOfCredentialsTask(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`CredentialsTask` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfCredentialsTask._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_credentials_task', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CredentialsTask'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfCredentialsTask,
    False,
    None))



class Applicability(VapiStruct):
    """
    Represents all applicability requirements for a Configuration Drift

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'versionApplicability': 'version_applicability',
                            'skuType': 'sku_type',
                            }

    def __init__(self,
                 version_applicability=None,
                 sku_type=None,
                ):
        """
        :type  version_applicability: :class:`list` of :class:`VersionApplicability` or ``None``
        :param version_applicability: List of product version related applicability
        :type  sku_type: :class:`str` or ``None``
        :param sku_type: SKU Type for this Configuration Drift
        """
        self.version_applicability = version_applicability
        self.sku_type = sku_type
        VapiStruct.__init__(self)


Applicability._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.applicability', {
        'versionApplicability': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'VersionApplicability'))),
        'skuType': type.OptionalType(type.StringType()),
    },
    Applicability,
    False,
    None))



class ConfigApplicabilityStatus(VapiStruct):
    """
    Represents applicability status of a Configuration Drift to a resource.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'applicable': 'applicable',
                            'cause': 'cause',
                            }

    def __init__(self,
                 applicable=None,
                 cause=None,
                ):
        """
        :type  applicable: :class:`bool` or ``None``
        :param applicable: Indicates if a configuration drift is applicable to the target
            resource.
        :type  cause: :class:`str` or ``None``
        :param cause: Inapplicability cause. Specifies the reason for inapplicability if
            a configuration drift is not applicable to the target resource.
        """
        self.applicable = applicable
        self.cause = cause
        VapiStruct.__init__(self)


ConfigApplicabilityStatus._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.config_applicability_status', {
        'applicable': type.OptionalType(type.BooleanType()),
        'cause': type.OptionalType(type.StringType()),
    },
    ConfigApplicabilityStatus,
    False,
    None))



class ConfigDriftSpec(VapiStruct):
    """
    Represents a Configuration Drift workflow

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'description': 'description',
                            'resourceType': 'resource_type',
                            'type': 'type',
                            'applicability': 'applicability',
                            'applicabilityStatus': 'applicability_status',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 description=None,
                 resource_type=None,
                 type=None,
                 applicability=None,
                 applicability_status=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: The UUID of the Configuration Drift 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: Name of the Configuration Drift
        :type  description: :class:`str` or ``None``
        :param description: Description of the Configuration Drift
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: The infrastructure resource on which this Configuration Drift
            operates
        :type  type: :class:`str` or ``None``
        :param type: The type of Configuration Drift
        :type  applicability: :class:`Applicability` or ``None``
        :param applicability:         :type  applicability_status: :class:`ConfigApplicabilityStatus` or ``None``
        :param applicability_status:         """
        self.id = id
        self.name = name
        self.description = description
        self.resource_type = resource_type
        self.type = type
        self.applicability = applicability
        self.applicability_status = applicability_status
        VapiStruct.__init__(self)


ConfigDriftSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.config_drift_spec', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'description': type.OptionalType(type.StringType()),
        'resourceType': type.OptionalType(type.StringType()),
        'type': type.OptionalType(type.StringType()),
        'applicability': type.OptionalType(type.ReferenceType(__name__, 'Applicability')),
        'applicabilityStatus': type.OptionalType(type.ReferenceType(__name__, 'ConfigApplicabilityStatus')),
    },
    ConfigDriftSpec,
    False,
    None))



class PageOfConfigDriftSpec(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`ConfigDriftSpec` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfConfigDriftSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_config_drift_spec', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ConfigDriftSpec'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfConfigDriftSpec,
    False,
    None))



class VersionApplicability(VapiStruct):
    """
    Represents the version applicability of a Configuration Drift for a product

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'productType': 'product_type',
                            'minVersion': 'min_version',
                            'maxVersion': 'max_version',
                            }

    def __init__(self,
                 product_type=None,
                 min_version=None,
                 max_version=None,
                ):
        """
        :type  product_type: :class:`str` or ``None``
        :param product_type: Product type
        :type  min_version: :class:`str` or ``None``
        :param min_version: The minimum version for current product to apply current
            Configuration Drift
        :type  max_version: :class:`str` or ``None``
        :param max_version: The maximum version for current product to apply current
            Configuration Drift
        """
        self.product_type = product_type
        self.min_version = min_version
        self.max_version = max_version
        VapiStruct.__init__(self)


VersionApplicability._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.version_applicability', {
        'productType': type.OptionalType(type.StringType()),
        'minVersion': type.OptionalType(type.StringType()),
        'maxVersion': type.OptionalType(type.StringType()),
    },
    VersionApplicability,
    False,
    None))



class ComplianceStandard(VapiStruct):
    """
    Represents a compliance standard

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'standardType': 'standard_type',
                            'standardVersions': 'standard_versions',
                            }

    def __init__(self,
                 standard_type=None,
                 standard_versions=None,
                ):
        """
        :type  standard_type: :class:`str` or ``None``
        :param standard_type: Compliance standard type 
            
            * Property is read-only.
            
            
        :type  standard_versions: :class:`list` of :class:`str` or ``None``
        :param standard_versions: Compliance standard versions 
            
            * Property is read-only.
            
            
        """
        self.standard_type = standard_type
        self.standard_versions = standard_versions
        VapiStruct.__init__(self)


ComplianceStandard._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compliance_standard', {
        'standardType': type.OptionalType(type.StringType()),
        'standardVersions': type.OptionalType(type.ListType(type.StringType())),
    },
    ComplianceStandard,
    False,
    None))



class PageOfComplianceStandard(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`ComplianceStandard` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfComplianceStandard._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_compliance_standard', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ComplianceStandard'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfComplianceStandard,
    False,
    None))



class ComplianceConfiguration(VapiStruct):
    """
    Represents a compliance configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'configurationId': 'configuration_id',
                            'configurationTitle': 'configuration_title',
                            'complianceResourceStandardConfigurationDetails': 'compliance_resource_standard_configuration_details',
                            }

    def __init__(self,
                 configuration_id=None,
                 configuration_title=None,
                 compliance_resource_standard_configuration_details=None,
                ):
        """
        :type  configuration_id: :class:`str` or ``None``
        :param configuration_id: Compliance configuration id 
            
            * Property is read-only.
            
            
        :type  configuration_title: :class:`str` or ``None``
        :param configuration_title: Compliance configuration title 
            
            * Property is read-only.
            
            
        :type  compliance_resource_standard_configuration_details: :class:`list` of :class:`ComplianceResourceStandardConfiguration` or ``None``
        :param compliance_resource_standard_configuration_details: Compliance resource standard configuration details 
            
            * Property is read-only.
            
            
        """
        self.configuration_id = configuration_id
        self.configuration_title = configuration_title
        self.compliance_resource_standard_configuration_details = compliance_resource_standard_configuration_details
        VapiStruct.__init__(self)


ComplianceConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compliance_configuration', {
        'configurationId': type.OptionalType(type.StringType()),
        'configurationTitle': type.OptionalType(type.StringType()),
        'complianceResourceStandardConfigurationDetails': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ComplianceResourceStandardConfiguration'))),
    },
    ComplianceConfiguration,
    False,
    None))



class ComplianceResourceStandardConfiguration(VapiStruct):
    """
    Represents a compliance resource and standard configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'resourceType': 'resource_type',
                            'resourceVersion': 'resource_version',
                            'standardConfigurationDetails': 'standard_configuration_details',
                            }

    def __init__(self,
                 resource_type=None,
                 resource_version=None,
                 standard_configuration_details=None,
                ):
        """
        :type  resource_type: :class:`str` or ``None``
        :param resource_type: Compliance resource type 
            
            * Property is read-only.
            
            
        :type  resource_version: :class:`str` or ``None``
        :param resource_version: Compliance resource version 
            
            * Property is read-only.
            
            
        :type  standard_configuration_details: :class:`list` of :class:`ComplianceStandardConfiguration` or ``None``
        :param standard_configuration_details: Compliance standard configuration 
            
            * Property is read-only.
            
            
        """
        self.resource_type = resource_type
        self.resource_version = resource_version
        self.standard_configuration_details = standard_configuration_details
        VapiStruct.__init__(self)


ComplianceResourceStandardConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compliance_resource_standard_configuration', {
        'resourceType': type.OptionalType(type.StringType()),
        'resourceVersion': type.OptionalType(type.StringType()),
        'standardConfigurationDetails': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ComplianceStandardConfiguration'))),
    },
    ComplianceResourceStandardConfiguration,
    False,
    None))



class ComplianceStandardConfiguration(VapiStruct):
    """
    Represents a compliance standard configuration

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'standardType': 'standard_type',
                            'standardVersion': 'standard_version',
                            'isRecommendedByStandard': 'is_recommended_by_standard',
                            'isAuditAutomated': 'is_audit_automated',
                            'citationReference': 'citation_reference',
                            'auditProcedure': 'audit_procedure',
                            'recommendedValue': 'recommended_value',
                            'remediationProcedure': 'remediation_procedure',
                            }

    def __init__(self,
                 standard_type=None,
                 standard_version=None,
                 is_recommended_by_standard=None,
                 is_audit_automated=None,
                 citation_reference=None,
                 audit_procedure=None,
                 recommended_value=None,
                 remediation_procedure=None,
                ):
        """
        :type  standard_type: :class:`str` or ``None``
        :param standard_type: Compliance standard type 
            
            * Property is read-only.
            
            
        :type  standard_version: :class:`str` or ``None``
        :param standard_version: Compliance standard version 
            
            * Property is read-only.
            
            
        :type  is_recommended_by_standard: :class:`bool` or ``None``
        :param is_recommended_by_standard: Whether the config is recommended by the standard or it's a VMware
            best practice 
            
            * Property is read-only.
            
            
        :type  is_audit_automated: :class:`bool` or ``None``
        :param is_audit_automated: Whether an automated or manual audit is supported 
            
            * Property is read-only.
            
            
        :type  citation_reference: :class:`str` or ``None``
        :param citation_reference: Citation reference of the configuration in the standard's
            documentation 
            
            * Property is read-only.
            
            
        :type  audit_procedure: :class:`str` or ``None``
        :param audit_procedure: How the configuration can be audited 
            
            * Property is read-only.
            
            
        :type  recommended_value: :class:`str` or ``None``
        :param recommended_value: Recommended value of the configuration by the standard 
            
            * Property is read-only.
            
            
        :type  remediation_procedure: :class:`str` or ``None``
        :param remediation_procedure: Remediation procedure if the configuration is not compliant 
            
            * Property is read-only.
            
            
        """
        self.standard_type = standard_type
        self.standard_version = standard_version
        self.is_recommended_by_standard = is_recommended_by_standard
        self.is_audit_automated = is_audit_automated
        self.citation_reference = citation_reference
        self.audit_procedure = audit_procedure
        self.recommended_value = recommended_value
        self.remediation_procedure = remediation_procedure
        VapiStruct.__init__(self)


ComplianceStandardConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compliance_standard_configuration', {
        'standardType': type.OptionalType(type.StringType()),
        'standardVersion': type.OptionalType(type.StringType()),
        'isRecommendedByStandard': type.OptionalType(type.BooleanType()),
        'isAuditAutomated': type.OptionalType(type.BooleanType()),
        'citationReference': type.OptionalType(type.StringType()),
        'auditProcedure': type.OptionalType(type.StringType()),
        'recommendedValue': type.OptionalType(type.StringType()),
        'remediationProcedure': type.OptionalType(type.StringType()),
    },
    ComplianceStandardConfiguration,
    False,
    None))



class PageOfComplianceConfiguration(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`ComplianceConfiguration` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfComplianceConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_compliance_configuration', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ComplianceConfiguration'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfComplianceConfiguration,
    False,
    None))



class CompatibilityMatrix(VapiStruct):
    """
    Model for metadata of compatibility matrix

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'compatibilityMatrixMetadata': 'compatibility_matrix_metadata',
                            'compatibilityMatrixSource': 'compatibility_matrix_source',
                            'compatibilityMatrixContent': 'compatibility_matrix_content',
                            }

    def __init__(self,
                 compatibility_matrix_metadata=None,
                 compatibility_matrix_source=None,
                 compatibility_matrix_content=None,
                ):
        """
        :type  compatibility_matrix_metadata: :class:`CompatibilityMatrixMetadata` or ``None``
        :param compatibility_matrix_metadata:         :type  compatibility_matrix_source: :class:`str` or ``None``
        :param compatibility_matrix_source: Source type of the compatibility matrix content
        :type  compatibility_matrix_content: :class:`str` or ``None``
        :param compatibility_matrix_content: Content of the compatibility matrix
        """
        self.compatibility_matrix_metadata = compatibility_matrix_metadata
        self.compatibility_matrix_source = compatibility_matrix_source
        self.compatibility_matrix_content = compatibility_matrix_content
        VapiStruct.__init__(self)


CompatibilityMatrix._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compatibility_matrix', {
        'compatibilityMatrixMetadata': type.OptionalType(type.ReferenceType(__name__, 'CompatibilityMatrixMetadata')),
        'compatibilityMatrixSource': type.OptionalType(type.StringType()),
        'compatibilityMatrixContent': type.OptionalType(type.StringType()),
    },
    CompatibilityMatrix,
    False,
    None))



class CompatibilityMatrixMetadata(VapiStruct):
    """
    Model for metadata of compatibility matrix

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'isStale': 'is_stale',
                            'isMissing': 'is_missing',
                            'lastModifiedDate': 'last_modified_date',
                            'message': 'message',
                            'errorMessage': 'error_message',
                            'warningMessage': 'warning_message',
                            }

    def __init__(self,
                 is_stale=None,
                 is_missing=None,
                 last_modified_date=None,
                 message=None,
                 error_message=None,
                 warning_message=None,
                ):
        """
        :type  is_stale: :class:`bool` or ``None``
        :param is_stale: staleness of the compatibility matrix content 
            
            * Property is read-only.
            
            
        :type  is_missing: :class:`bool` or ``None``
        :param is_missing: existence of the compatibility matrix content 
            
            * Property is read-only.
            
            
        :type  last_modified_date: :class:`long` or ``None``
        :param last_modified_date: Last modified date of the compatibility matrix content 
            
            * Property is read-only.
            
            
        :type  message: :class:`str` or ``None``
        :param message: Info message for the compatibility matrix content 
            
            * Property is read-only.
            
            
        :type  error_message: :class:`str` or ``None``
        :param error_message: Error message for the compatibility matrix content 
            
            * Property is read-only.
            
            
        :type  warning_message: :class:`str` or ``None``
        :param warning_message: Warning message for the compatibility matrix content 
            
            * Property is read-only.
            
            
        """
        self.is_stale = is_stale
        self.is_missing = is_missing
        self.last_modified_date = last_modified_date
        self.message = message
        self.error_message = error_message
        self.warning_message = warning_message
        VapiStruct.__init__(self)


CompatibilityMatrixMetadata._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.compatibility_matrix_metadata', {
        'isStale': type.OptionalType(type.BooleanType()),
        'isMissing': type.OptionalType(type.BooleanType()),
        'lastModifiedDate': type.OptionalType(type.IntegerType()),
        'message': type.OptionalType(type.StringType()),
        'errorMessage': type.OptionalType(type.StringType()),
        'warningMessage': type.OptionalType(type.StringType()),
    },
    CompatibilityMatrixMetadata,
    False,
    None))



class PageOfCompatibilityMatrix(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`CompatibilityMatrix` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfCompatibilityMatrix._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_compatibility_matrix', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CompatibilityMatrix'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfCompatibilityMatrix,
    False,
    None))



class PageOfCluster(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Cluster` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_cluster', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Cluster'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfCluster,
    False,
    None))



class PageOfClusterNetworkConfigurationCriterion(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`ClusterNetworkConfigurationCriterion` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfClusterNetworkConfigurationCriterion._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_cluster_network_configuration_criterion', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ClusterNetworkConfigurationCriterion'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfClusterNetworkConfigurationCriterion,
    False,
    None))



class ClusterImageCompliance(VapiStruct):
    """
    Represents results of Cluster Image Compliance check

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'cluster': 'cluster',
                            'clusterImage': 'cluster_image',
                            'clusterImageDetails': 'cluster_image_details',
                            'status': 'status',
                            'imageComplianceDetails': 'image_compliance_details',
                            'timestamp': 'timestamp',
                            }

    def __init__(self,
                 cluster=None,
                 cluster_image=None,
                 cluster_image_details=None,
                 status=None,
                 image_compliance_details=None,
                 timestamp=None,
                ):
        """
        :type  cluster: :class:`ClusterReference` or ``None``
        :param cluster:         :type  cluster_image: :class:`ClusterImageReference` or ``None``
        :param cluster_image:         :type  cluster_image_details: :class:`SoftwareInfo` or ``None``
        :param cluster_image_details:         :type  status: :class:`str` or ``None``
        :param status: Cluster image compliance status
        :type  image_compliance_details: :class:`list` of :class:`ClusterImageComplianceDetail` or ``None``
        :param image_compliance_details: Detailed results of cluster image compliance check
        :type  timestamp: :class:`str` or ``None``
        :param timestamp: Update time for the cluster compliance, e.g.
            2020-06-08T02:20:15.844Z, in yyyy-MM-dd'T'HH:mm:ss[.SSS]XXX ISO
            8601 format
        """
        self.cluster = cluster
        self.cluster_image = cluster_image
        self.cluster_image_details = cluster_image_details
        self.status = status
        self.image_compliance_details = image_compliance_details
        self.timestamp = timestamp
        VapiStruct.__init__(self)


ClusterImageCompliance._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_image_compliance', {
        'cluster': type.OptionalType(type.ReferenceType(__name__, 'ClusterReference')),
        'clusterImage': type.OptionalType(type.ReferenceType(__name__, 'ClusterImageReference')),
        'clusterImageDetails': type.OptionalType(type.ReferenceType(__name__, 'SoftwareInfo')),
        'status': type.OptionalType(type.StringType()),
        'imageComplianceDetails': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ClusterImageComplianceDetail'))),
        'timestamp': type.OptionalType(type.StringType()),
    },
    ClusterImageCompliance,
    False,
    None))



class ClusterImageComplianceDetail(VapiStruct):
    """
    Represents details of Cluster Image Compliance check results

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'entityName': 'entity_name',
                            'componentType': 'component_type',
                            'complianceStatus': 'compliance_status',
                            'severity': 'severity',
                            'componentCurrentVersion': 'component_current_version',
                            'componentTargetVersion': 'component_target_version',
                            'componentName': 'component_name',
                            'componentVendor': 'component_vendor',
                            'message': 'message',
                            'impact': 'impact',
                            }

    def __init__(self,
                 entity_name=None,
                 component_type=None,
                 compliance_status=None,
                 severity=None,
                 component_current_version=None,
                 component_target_version=None,
                 component_name=None,
                 component_vendor=None,
                 message=None,
                 impact=None,
                ):
        """
        :type  entity_name: :class:`str` or ``None``
        :param entity_name: Name of the entity
        :type  component_type: :class:`str` or ``None``
        :param component_type: Type of the component
        :type  compliance_status: :class:`str` or ``None``
        :param compliance_status: Compliance status of the component
        :type  severity: :class:`str` or ``None``
        :param severity: Message severity
        :type  component_current_version: :class:`str` or ``None``
        :param component_current_version: Current version of component
        :type  component_target_version: :class:`str` or ``None``
        :param component_target_version: Target version of component
        :type  component_name: :class:`str` or ``None``
        :param component_name: Component name
        :type  component_vendor: :class:`str` or ``None``
        :param component_vendor: Component vendor
        :type  message: :class:`str` or ``None``
        :param message: Message included with the error or warning
        :type  impact: :class:`str` or ``None``
        :param impact: Impact if any for the entity
        """
        self.entity_name = entity_name
        self.component_type = component_type
        self.compliance_status = compliance_status
        self.severity = severity
        self.component_current_version = component_current_version
        self.component_target_version = component_target_version
        self.component_name = component_name
        self.component_vendor = component_vendor
        self.message = message
        self.impact = impact
        VapiStruct.__init__(self)


ClusterImageComplianceDetail._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_image_compliance_detail', {
        'entityName': type.OptionalType(type.StringType()),
        'componentType': type.OptionalType(type.StringType()),
        'complianceStatus': type.OptionalType(type.StringType()),
        'severity': type.OptionalType(type.StringType()),
        'componentCurrentVersion': type.OptionalType(type.StringType()),
        'componentTargetVersion': type.OptionalType(type.StringType()),
        'componentName': type.OptionalType(type.StringType()),
        'componentVendor': type.OptionalType(type.StringType()),
        'message': type.OptionalType(type.StringType()),
        'impact': type.OptionalType(type.StringType()),
    },
    ClusterImageComplianceDetail,
    False,
    None))



class ClusterImageReference(VapiStruct):
    """
    Represents a reference to the cluster image

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the cluster image
        :type  name: :class:`str` or ``None``
        :param name: Name of the cluster image
        """
        self.id = id
        self.name = name
        VapiStruct.__init__(self)


ClusterImageReference._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.cluster_image_reference', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
    },
    ClusterImageReference,
    False,
    None))



class NiocBandwidthAllocation(VapiStruct):
    """
    Network traffic per resource type

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'type': 'type',
                            'niocTrafficResourceAllocation': 'nioc_traffic_resource_allocation',
                            }

    def __init__(self,
                 type=None,
                 nioc_traffic_resource_allocation=None,
                ):
        """
        :type  type: :class:`str` or ``None``
        :param type: Host infrastructure traffic type
        :type  nioc_traffic_resource_allocation: :class:`NiocTrafficResourceAllocation` or ``None``
        :param nioc_traffic_resource_allocation:         """
        self.type = type
        self.nioc_traffic_resource_allocation = nioc_traffic_resource_allocation
        VapiStruct.__init__(self)


NiocBandwidthAllocation._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nioc_bandwidth_allocation', {
        'type': type.OptionalType(type.StringType()),
        'niocTrafficResourceAllocation': type.OptionalType(type.ReferenceType(__name__, 'NiocTrafficResourceAllocation')),
    },
    NiocBandwidthAllocation,
    False,
    None))



class NsxTransportZone(VapiStruct):
    """
    The transport zone associated with the vSphere Distributed Switch used by
    NSX

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'transportType': 'transport_type',
                            }

    def __init__(self,
                 name=None,
                 transport_type=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: The name of the transport zone
        :type  transport_type: :class:`str` or ``None``
        :param transport_type: The type of the transport zone
        """
        self.name = name
        self.transport_type = transport_type
        VapiStruct.__init__(self)


NsxTransportZone._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsx_transport_zone', {
        'name': type.OptionalType(type.StringType()),
        'transportType': type.OptionalType(type.StringType()),
    },
    NsxTransportZone,
    False,
    None))



class NsxtSwitchConfiguration(VapiStruct):
    """
    The network configurations associated with the vSphere Distributed Switch
    managed by NSX

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'transportZones': 'transport_zones',
                            'hostSwitchOperationalMode': 'host_switch_operational_mode',
                            'ipAssignmentType': 'ip_assignment_type',
                            }

    def __init__(self,
                 transport_zones=None,
                 host_switch_operational_mode=None,
                 ip_assignment_type=None,
                ):
        """
        :type  transport_zones: :class:`list` of :class:`NsxTransportZone` or ``None``
        :param transport_zones: The list of transport zones associated with the vSphere Distributed
            Switch managed by NSX
        :type  host_switch_operational_mode: :class:`str` or ``None``
        :param host_switch_operational_mode: Operational mode of a Host Switch
        :type  ip_assignment_type: :class:`str` or ``None``
        :param ip_assignment_type: Ip Assignment Type of a Host Switch
        """
        self.transport_zones = transport_zones
        self.host_switch_operational_mode = host_switch_operational_mode
        self.ip_assignment_type = ip_assignment_type
        VapiStruct.__init__(self)


NsxtSwitchConfiguration._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.nsxt_switch_configuration', {
        'transportZones': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxTransportZone'))),
        'hostSwitchOperationalMode': type.OptionalType(type.StringType()),
        'ipAssignmentType': type.OptionalType(type.StringType()),
    },
    NsxtSwitchConfiguration,
    False,
    None))



class Portgroup(VapiStruct):
    """
    Portgroup associated with the vSphere Distributed Switch

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'name': 'name',
                            'transportType': 'transport_type',
                            'portBindingType': 'port_binding_type',
                            'vlanId': 'vlan_id',
                            'id': 'id',
                            'activeUplinks': 'active_uplinks',
                            'standbyUplinks': 'standby_uplinks',
                            }

    def __init__(self,
                 name=None,
                 transport_type=None,
                 port_binding_type=None,
                 vlan_id=None,
                 id=None,
                 active_uplinks=None,
                 standby_uplinks=None,
                ):
        """
        :type  name: :class:`str` or ``None``
        :param name: Port group name
        :type  transport_type: :class:`str` or ``None``
        :param transport_type: Port group transport type
        :type  port_binding_type: :class:`str` or ``None``
        :param port_binding_type: Port binding type
        :type  vlan_id: :class:`long` or ``None``
        :param vlan_id: VLAN ID
        :type  id: :class:`str` or ``None``
        :param id: vSphere Distributed Portgroup Id
        :type  active_uplinks: :class:`list` of :class:`str` or ``None``
        :param active_uplinks: List of active uplinks
        :type  standby_uplinks: :class:`list` of :class:`str` or ``None``
        :param standby_uplinks: List of standby uplinks
        """
        self.name = name
        self.transport_type = transport_type
        self.port_binding_type = port_binding_type
        self.vlan_id = vlan_id
        self.id = id
        self.active_uplinks = active_uplinks
        self.standby_uplinks = standby_uplinks
        VapiStruct.__init__(self)


Portgroup._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.portgroup', {
        'name': type.OptionalType(type.StringType()),
        'transportType': type.OptionalType(type.StringType()),
        'portBindingType': type.OptionalType(type.StringType()),
        'vlanId': type.OptionalType(type.IntegerType()),
        'id': type.OptionalType(type.StringType()),
        'activeUplinks': type.OptionalType(type.ListType(type.StringType())),
        'standbyUplinks': type.OptionalType(type.ListType(type.StringType())),
    },
    Portgroup,
    False,
    None))



class Vds(VapiStruct):
    """
    vSphere distributed switch

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'name': 'name',
                            'isUsedByNsxt': 'is_used_by_nsxt',
                            'mtu': 'mtu',
                            'portGroups': 'port_groups',
                            'niocBandwidthAllocations': 'nioc_bandwidth_allocations',
                            'version': 'version',
                            'nsxtSwitchConfig': 'nsxt_switch_config',
                            'lags': 'lags',
                            }

    def __init__(self,
                 id=None,
                 name=None,
                 is_used_by_nsxt=None,
                 mtu=None,
                 port_groups=None,
                 nioc_bandwidth_allocations=None,
                 version=None,
                 nsxt_switch_config=None,
                 lags=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: vSphere Distributed Switch id
        :type  name: :class:`str` or ``None``
        :param name: vSphere Distributed Switch name
        :type  is_used_by_nsxt: :class:`bool` or ``None``
        :param is_used_by_nsxt: Boolean to identify if the vSphere distributed switch is used by
            NSX. This property is deprecated in favor of nsxtSwitchConfig field
        :type  mtu: :class:`long` or ``None``
        :param mtu: Maximum Transmission Unit
        :type  port_groups: :class:`list` of :class:`Portgroup` or ``None``
        :param port_groups: List of portgroups associated with the vSphere Distributed Switch
        :type  nioc_bandwidth_allocations: :class:`list` of :class:`NiocBandwidthAllocation` or ``None``
        :param nioc_bandwidth_allocations: List of Network I/O Control Bandwidth Allocations for System
            Traffic Based on shares, reservation, and limit, you can configure
            Network I/O Control to allocate certain amount of bandwidth for
            traffic generated by vSphere Fault Tolerance, iSCSI storage,
            vSphere vMotion, and so on. You can use Network I/O Control on a
            distributed switch to configure bandwidth allocation for the
            traffic that is related to the main system features in vSphere
        :type  version: :class:`str` or ``None``
        :param version: vSphere Distributed Switch version
        :type  nsxt_switch_config: :class:`NsxtSwitchConfiguration` or ``None``
        :param nsxt_switch_config:         :type  lags: :class:`list` of :class:`Lag` or ``None``
        :param lags: List of LAGs associated with the vSphere Distributed Switch
        """
        self.id = id
        self.name = name
        self.is_used_by_nsxt = is_used_by_nsxt
        self.mtu = mtu
        self.port_groups = port_groups
        self.nioc_bandwidth_allocations = nioc_bandwidth_allocations
        self.version = version
        self.nsxt_switch_config = nsxt_switch_config
        self.lags = lags
        VapiStruct.__init__(self)


Vds._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.vds', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'isUsedByNsxt': type.OptionalType(type.BooleanType()),
        'mtu': type.OptionalType(type.IntegerType()),
        'portGroups': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Portgroup'))),
        'niocBandwidthAllocations': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NiocBandwidthAllocation'))),
        'version': type.OptionalType(type.StringType()),
        'nsxtSwitchConfig': type.OptionalType(type.ReferenceType(__name__, 'NsxtSwitchConfiguration')),
        'lags': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Lag'))),
    },
    Vds,
    False,
    None))



class CertificateAuthority(VapiStruct):
    """
    The Certificate Authority (CA) details

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'username': 'username',
                            'serverUrl': 'server_url',
                            'templateName': 'template_name',
                            'commonName': 'common_name',
                            'country': 'country',
                            'state': 'state',
                            'locality': 'locality',
                            'organization': 'organization',
                            'organizationUnit': 'organization_unit',
                            'autoRenewalConfiguredCount': 'auto_renewal_configured_count',
                            }

    def __init__(self,
                 id=None,
                 username=None,
                 server_url=None,
                 template_name=None,
                 common_name=None,
                 country=None,
                 state=None,
                 locality=None,
                 organization=None,
                 organization_unit=None,
                 auto_renewal_configured_count=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: CA type. Only supports Microsoft and OpenSSL CAs 
            
            * Property is read-only.
            
            
        :type  username: :class:`str` or ``None``
        :param username: Microsoft CA server username 
            
            * Property is read-only.
            
            
        :type  server_url: :class:`str` or ``None``
        :param server_url: Microsoft CA server url 
            
            * Property is read-only.
            
            
        :type  template_name: :class:`str` or ``None``
        :param template_name: Microsoft CA server template name 
            
            * Property is read-only.
            
            
        :type  common_name: :class:`str` or ``None``
        :param common_name: OpenSSL CA domain name 
            
            * Property is read-only.
            
            
        :type  country: :class:`str` or ``None``
        :param country: ISO 3166 country code where company is legally registered 
            
            * Property is read-only.
            
            
        :type  state: :class:`str` or ``None``
        :param state: The full name of the state where company is legally registered 
            
            * Property is read-only.
            
            
        :type  locality: :class:`str` or ``None``
        :param locality: The city or locality where company is legally registered 
            
            * Property is read-only.
            
            
        :type  organization: :class:`str` or ``None``
        :param organization: The name under which company is legally registered 
            
            * Property is read-only.
            
            
        :type  organization_unit: :class:`str` or ``None``
        :param organization_unit: Organization with which the certificate is associated 
            
            * Property is read-only.
            
            
        :type  auto_renewal_configured_count: :class:`long` or ``None``
        :param auto_renewal_configured_count: Represents the count of certificates that are set to be
            auto-renewed with the CA 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.username = username
        self.server_url = server_url
        self.template_name = template_name
        self.common_name = common_name
        self.country = country
        self.state = state
        self.locality = locality
        self.organization = organization
        self.organization_unit = organization_unit
        self.auto_renewal_configured_count = auto_renewal_configured_count
        VapiStruct.__init__(self)


CertificateAuthority._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.certificate_authority', {
        'id': type.OptionalType(type.StringType()),
        'username': type.OptionalType(type.StringType()),
        'serverUrl': type.OptionalType(type.StringType()),
        'templateName': type.OptionalType(type.StringType()),
        'commonName': type.OptionalType(type.StringType()),
        'country': type.OptionalType(type.StringType()),
        'state': type.OptionalType(type.StringType()),
        'locality': type.OptionalType(type.StringType()),
        'organization': type.OptionalType(type.StringType()),
        'organizationUnit': type.OptionalType(type.StringType()),
        'autoRenewalConfiguredCount': type.OptionalType(type.IntegerType()),
    },
    CertificateAuthority,
    False,
    None))



class PageOfCertificateAuthority(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`CertificateAuthority` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfCertificateAuthority._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_certificate_authority', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'CertificateAuthority'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfCertificateAuthority,
    False,
    None))



class PageOfBundle(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Bundle` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfBundle._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_bundle', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Bundle'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfBundle,
    False,
    None))



class BundleDownloadStatusInfo(VapiStruct):
    """
    Model for download status for the bundle of a release component.

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'componentType': 'component_type',
                            'version': 'version',
                            'bundleId': 'bundle_id',
                            'downloadId': 'download_id',
                            'downloadStatus': 'download_status',
                            'downloadedSize': 'downloaded_size',
                            'downloadStartTime': 'download_start_time',
                            'downloadEndTime': 'download_end_time',
                            'downloadScheduledTime': 'download_scheduled_time',
                            'isDownloadCancellable': 'is_download_cancellable',
                            'message': 'message',
                            'isDownloadable': 'is_downloadable',
                            }

    def __init__(self,
                 component_type=None,
                 version=None,
                 bundle_id=None,
                 download_id=None,
                 download_status=None,
                 downloaded_size=None,
                 download_start_time=None,
                 download_end_time=None,
                 download_scheduled_time=None,
                 is_download_cancellable=None,
                 message=None,
                 is_downloadable=None,
                ):
        """
        :type  component_type: :class:`str` or ``None``
        :param component_type: The type of the component that the bundle represents.
        :type  version: :class:`str` or ``None``
        :param version: The version (patch version) of the component.
        :type  bundle_id: :class:`str` or ``None``
        :param bundle_id: The bundle ID associated with a component version.
        :type  download_id: :class:`str` or ``None``
        :param download_id: The task ID of the download.
        :type  download_status: :class:`str` or ``None``
        :param download_status: The current status of the download.
        :type  downloaded_size: :class:`long` or ``None``
        :param downloaded_size: The size of the file part that was downloaded so far.
        :type  download_start_time: :class:`long` or ``None``
        :param download_start_time: The time when the download started.
        :type  download_end_time: :class:`long` or ``None``
        :param download_end_time: The time when the download finished or interrupted.
        :type  download_scheduled_time: :class:`long` or ``None``
        :param download_scheduled_time: The time when the download was scheduled to start.
        :type  is_download_cancellable: :class:`bool` or ``None``
        :param is_download_cancellable: True if download can be cancelled.
        :type  message: :class:`str` or ``None``
        :param message: In case of failed download, the error message.
        :type  is_downloadable: :class:`bool` or ``None``
        :param is_downloadable: Indicates whether the bundle for this component version is
            downloadable currently or not.
        """
        self.component_type = component_type
        self.version = version
        self.bundle_id = bundle_id
        self.download_id = download_id
        self.download_status = download_status
        self.downloaded_size = downloaded_size
        self.download_start_time = download_start_time
        self.download_end_time = download_end_time
        self.download_scheduled_time = download_scheduled_time
        self.is_download_cancellable = is_download_cancellable
        self.message = message
        self.is_downloadable = is_downloadable
        VapiStruct.__init__(self)


BundleDownloadStatusInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.bundle_download_status_info', {
        'componentType': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'bundleId': type.OptionalType(type.StringType()),
        'downloadId': type.OptionalType(type.StringType()),
        'downloadStatus': type.OptionalType(type.StringType()),
        'downloadedSize': type.OptionalType(type.IntegerType()),
        'downloadStartTime': type.OptionalType(type.IntegerType()),
        'downloadEndTime': type.OptionalType(type.IntegerType()),
        'downloadScheduledTime': type.OptionalType(type.IntegerType()),
        'isDownloadCancellable': type.OptionalType(type.BooleanType()),
        'message': type.OptionalType(type.StringType()),
        'isDownloadable': type.OptionalType(type.BooleanType()),
    },
    BundleDownloadStatusInfo,
    False,
    None))



class PageOfBundleDownloadStatusInfo(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`BundleDownloadStatusInfo` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfBundleDownloadStatusInfo._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_bundle_download_status_info', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'BundleDownloadStatusInfo'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfBundleDownloadStatusInfo,
    False,
    None))



class ALBCluster(VapiStruct):
    """
    ALB Cluster

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'id': 'id',
                            'clusterName': 'cluster_name',
                            'domains': 'domains',
                            'nsxClusters': 'nsx_clusters',
                            'clusterFqdn': 'cluster_fqdn',
                            'clusterStatus': 'cluster_status',
                            'version': 'version',
                            'deploymentStatus': 'deployment_status',
                            }

    def __init__(self,
                 id=None,
                 cluster_name=None,
                 domains=None,
                 nsx_clusters=None,
                 cluster_fqdn=None,
                 cluster_status=None,
                 version=None,
                 deployment_status=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: ID of the Avi Load Balancer Cluster 
            
            * Property is read-only.
            
            
        :type  cluster_name: :class:`str` or ``None``
        :param cluster_name: Name of Avi Load Balancer Cluster 
            
            * Property is read-only.
            
            
        :type  domains: :class:`list` of :class:`DomainReference` or ``None``
        :param domains: Collection of IDs of Workload Domains where Avi Load Balancer
            Cluster is deployed 
            
            * Property is read-only.
            
            
        :type  nsx_clusters: :class:`list` of :class:`NsxtClusterReference` or ``None``
        :param nsx_clusters: Collection of IDs of the NSX where Avi Load Balancer Cluster is
            deployed 
            
            * Property is read-only.
            
            
        :type  cluster_fqdn: :class:`str` or ``None``
        :param cluster_fqdn: Avi Load Balancer Cluster Virtual fqdn 
            
            * Property is read-only.
            
            
        :type  cluster_status: :class:`str` or ``None``
        :param cluster_status: Avi Load Balancer Cluster status 
            
            * Property is read-only.
            
            
        :type  version: :class:`str` or ``None``
        :param version: Avi Load Balancer Cluster version 
            
            * Property is read-only.
            
            
        :type  deployment_status: :class:`str` or ``None``
        :param deployment_status: Avi Load Balancer Deployment Status 
            
            * Property is read-only.
            
            
        """
        self.id = id
        self.cluster_name = cluster_name
        self.domains = domains
        self.nsx_clusters = nsx_clusters
        self.cluster_fqdn = cluster_fqdn
        self.cluster_status = cluster_status
        self.version = version
        self.deployment_status = deployment_status
        VapiStruct.__init__(self)


ALBCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.ALB_cluster', {
        'id': type.OptionalType(type.StringType()),
        'clusterName': type.OptionalType(type.StringType()),
        'domains': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'DomainReference'))),
        'nsxClusters': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'NsxtClusterReference'))),
        'clusterFqdn': type.OptionalType(type.StringType()),
        'clusterStatus': type.OptionalType(type.StringType()),
        'version': type.OptionalType(type.StringType()),
        'deploymentStatus': type.OptionalType(type.StringType()),
    },
    ALBCluster,
    False,
    None))



class PageOfALBCluster(VapiStruct):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'elements': 'elements',
                            'pageMetadata': 'page_metadata',
                            }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`ALBCluster` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """
        self.elements = elements
        self.page_metadata = page_metadata
        VapiStruct.__init__(self)


PageOfALBCluster._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.page_of_ALB_cluster', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ALBCluster'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfALBCluster,
    False,
    None))



class HostDecommissionSpec(VapiStruct):
    """
    This specification contains host details required to decommission a host
    from VMware Cloud Foundation

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """



    _canonical_to_pep_names = {
                            'fqdn': 'fqdn',
                            }

    def __init__(self,
                 fqdn=None,
                ):
        """
        :type  fqdn: :class:`str` or ``None``
        :param fqdn: FQDN of the host
        """
        self.fqdn = fqdn
        VapiStruct.__init__(self)


HostDecommissionSpec._set_binding_type(type.StructType(
    'vmware.sddc_manager.model.host_decommission_spec', {
        'fqdn': type.OptionalType(type.StringType()),
    },
    HostDecommissionSpec,
    False,
    None))



class Task(VapiError):
    """
    Represents a task

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """

    _qualname = 'Task'
    _canonical_to_pep_names = {
                'id' : 'id',
                'name' : 'name',
                'localizableDescriptionPack' : 'localizable_description_pack',
                'type' : 'type',
                'status' : 'status',
                'creationTimestamp' : 'creation_timestamp',
                'completionTimestamp' : 'completion_timestamp',
                'subTasks' : 'sub_tasks',
                'errors' : 'errors',
                'resources' : 'resources',
                'resolutionStatus' : 'resolution_status',
                'isCancellable' : 'is_cancellable',
                'isRetryable' : 'is_retryable',
    }

    def __init__(self,
                 id=None,
                 name=None,
                 localizable_description_pack=None,
                 type=None,
                 status=None,
                 creation_timestamp=None,
                 completion_timestamp=None,
                 sub_tasks=None,
                 errors=None,
                 resources=None,
                 resolution_status=None,
                 is_cancellable=None,
                 is_retryable=None,
                ):
        """
        :type  id: :class:`str` or ``None``
        :param id: Task ID 
            
            * Property is read-only.
            
            
        :type  name: :class:`str` or ``None``
        :param name: Task name 
            
            * Property is read-only.
            
            
        :type  localizable_description_pack: :class:`MessagePack` or ``None``
        :param localizable_description_pack:         :type  type: :class:`str` or ``None``
        :param type: Operation that is represented by the Task in machine readable
            format. The value is controlled by the owners/producers of the
            Task. The convention is <resource> _ <operation> <ul> <li>Property
            is read-only.</li> </ul> </operation> </resource>
        :type  status: :class:`str` or ``None``
        :param status: Task status 
            
            * Property is read-only.
            
            
        :type  creation_timestamp: :class:`str` or ``None``
        :param creation_timestamp: Task creation timestamp 
            
            * Property is read-only.
            
            
        :type  completion_timestamp: :class:`str` or ``None``
        :param completion_timestamp: Task completion timestamp 
            
            * Property is read-only.
            
            
        :type  sub_tasks: :class:`list` of :class:`SubTask` or ``None``
        :param sub_tasks: List of sub-tasks of the task 
            
            * Property is read-only.
            
            
        :type  errors: :class:`list` of :class:`Error` or ``None``
        :param errors: List of errors in case of a failure 
            
            * Property is read-only.
            
            
        :type  resources: :class:`list` of :class:`Resource` or ``None``
        :param resources: List of resources associated with task 
            
            * Property is read-only.
            
            
        :type  resolution_status: :class:`str` or ``None``
        :param resolution_status: Resolution state 
            
            * Property is read-only.
            
            
        :type  is_cancellable: :class:`bool` or ``None``
        :param is_cancellable: Represents task can be cancellable or not. 
            
            * Property is read-only.
            
            
        :type  is_retryable: :class:`bool` or ``None``
        :param is_retryable: Indicates whether a task is eligible for retry or not. 
            
            * Property is read-only.
            
            
        """

        self.id = id
        self.name = name
        self.localizable_description_pack = localizable_description_pack
        self.type = type
        self.status = status
        self.creation_timestamp = creation_timestamp
        self.completion_timestamp = completion_timestamp
        self.sub_tasks = sub_tasks
        self.errors = errors
        self.resources = resources
        self.resolution_status = resolution_status
        self.is_cancellable = is_cancellable
        self.is_retryable = is_retryable
        VapiError.__init__(self)

Task._set_binding_type(type.ErrorType(
    'vmware.sddc_manager.model.task', {
        'id': type.OptionalType(type.StringType()),
        'name': type.OptionalType(type.StringType()),
        'localizableDescriptionPack': type.OptionalType(type.ReferenceType(__name__, 'MessagePack')),
        'type': type.OptionalType(type.StringType()),
        'status': type.OptionalType(type.StringType()),
        'creationTimestamp': type.OptionalType(type.StringType()),
        'completionTimestamp': type.OptionalType(type.StringType()),
        'subTasks': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SubTask'))),
        'errors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Error'))),
        'resources': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Resource'))),
        'resolutionStatus': type.OptionalType(type.StringType()),
        'isCancellable': type.OptionalType(type.BooleanType()),
        'isRetryable': type.OptionalType(type.BooleanType()),
    },
    Task))



class PageOfUpgradable(VapiError):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """

    _qualname = 'PageOfUpgradable'
    _canonical_to_pep_names = {
                'elements' : 'elements',
                'pageMetadata' : 'page_metadata',
    }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`Upgradable` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """

        self.elements = elements
        self.page_metadata = page_metadata
        VapiError.__init__(self)

PageOfUpgradable._set_binding_type(type.ErrorType(
    'vmware.sddc_manager.model.page_of_upgradable', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Upgradable'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    PageOfUpgradable))



class Page(VapiError):
    """
    Represents a page of elements of a single type

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """

    _qualname = 'Page'
    _canonical_to_pep_names = {
                'elements' : 'elements',
                'pageMetadata' : 'page_metadata',
    }

    def __init__(self,
                 elements=None,
                 page_metadata=None,
                ):
        """
        :type  elements: :class:`list` of :class:`SddcManagerUpgradable` or ``None``
        :param elements: The list of elements included in this page 
            
            * Property is read-only.
            
            
        :type  page_metadata: :class:`PageMetadata` or ``None``
        :param page_metadata:         """

        self.elements = elements
        self.page_metadata = page_metadata
        VapiError.__init__(self)

Page._set_binding_type(type.ErrorType(
    'vmware.sddc_manager.model.page', {
        'elements': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'SddcManagerUpgradable'))),
        'pageMetadata': type.OptionalType(type.ReferenceType(__name__, 'PageMetadata')),
    },
    Page))



class ErrorResponse(VapiError):
    """


    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """

    _qualname = 'ErrorResponse'
    _canonical_to_pep_names = {
                'errorCode' : 'error_code',
                'arguments' : 'arguments',
                'context' : 'context',
                'message' : 'message',
                'remediationMessage' : 'remediation_message',
                'cause' : 'cause',
                'nestedErrors' : 'nested_errors',
                'referenceToken' : 'reference_token',
    }

    def __init__(self,
                 error_code=None,
                 arguments=None,
                 context=None,
                 message=None,
                 remediation_message=None,
                 cause=None,
                 nested_errors=None,
                 reference_token=None,
                ):
        """
        :type  error_code: :class:`str` or ``None``
        :param error_code:         :type  arguments: :class:`list` of :class:`str` or ``None``
        :param arguments:         :type  context: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param context:         :type  message: :class:`str` or ``None``
        :param message:         :type  remediation_message: :class:`str` or ``None``
        :param remediation_message:         :type  cause: :class:`list` of :class:`ErrorCause` or ``None``
        :param cause:         :type  nested_errors: :class:`list` of :class:`ErrorResponse` or ``None``
        :param nested_errors:         :type  reference_token: :class:`str` or ``None``
        :param reference_token:         """

        self.error_code = error_code
        self.arguments = arguments
        self.context = context
        self.message = message
        self.remediation_message = remediation_message
        self.cause = cause
        self.nested_errors = nested_errors
        self.reference_token = reference_token
        VapiError.__init__(self)

ErrorResponse._set_binding_type(type.ErrorType(
    'vmware.sddc_manager.model.error_response', {
        'errorCode': type.OptionalType(type.StringType()),
        'arguments': type.OptionalType(type.ListType(type.StringType())),
        'context': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
        'message': type.OptionalType(type.StringType()),
        'remediationMessage': type.OptionalType(type.StringType()),
        'cause': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ErrorCause'))),
        'nestedErrors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ErrorResponse'))),
        'referenceToken': type.OptionalType(type.StringType()),
    },
    ErrorResponse))



class Error(VapiError):
    """
    Error response containing a minor error code, a localized error message, a
    localized remediation message and optionally a reference token to correlate
    the error with the logs

    .. tip::
        The arguments are used to initialize data attributes with the same
        names.
    """

    _qualname = 'Error'
    _canonical_to_pep_names = {
                'errorCode' : 'error_code',
                'errorType' : 'error_type',
                'arguments' : 'arguments',
                'context' : 'context',
                'message' : 'message',
                'remediationMessage' : 'remediation_message',
                'causes' : 'causes',
                'nestedErrors' : 'nested_errors',
                'referenceToken' : 'reference_token',
                'label' : 'label',
                'remediationUrl' : 'remediation_url',
    }

    def __init__(self,
                 error_code=None,
                 error_type=None,
                 arguments=None,
                 context=None,
                 message=None,
                 remediation_message=None,
                 causes=None,
                 nested_errors=None,
                 reference_token=None,
                 label=None,
                 remediation_url=None,
                ):
        """
        :type  error_code: :class:`str` or ``None``
        :param error_code: The minor error code 
            
            * Property is read-only.
            
            
        :type  error_type: :class:`str` or ``None``
        :param error_type: The error type 
            
            * Property is read-only.
            
            
        :type  arguments: :class:`list` of :class:`str` or ``None``
        :param arguments: The arguments used to localize the message, Can be used by scripts
            to automate the error processing. 
            
            * Property is read-only.
            
            
        :type  context: (:class:`dict` of :class:`str` and :class:`str`) or ``None``
        :param context: The error context (e.g. the component where it occurred). 
            
            * Property is read-only.
            
            
        :type  message: :class:`str` or ``None``
        :param message: The localized error message 
            
            * Property is read-only.
            
            
        :type  remediation_message: :class:`str` or ``None``
        :param remediation_message: The localized remediation error message
        :type  causes: :class:`list` of :class:`ErrorCause` or ``None``
        :param causes: The underlying cause exceptions.
        :type  nested_errors: :class:`list` of :class:`Error` or ``None``
        :param nested_errors: The nested errors when the error is a composite one
        :type  reference_token: :class:`str` or ``None``
        :param reference_token: A reference token correlating the error with the relevant detailed
            error logs. Should be sent to the service provider when reporting
            issues. 
            
            * Property is read-only.
            
            
        :type  label: :class:`str` or ``None``
        :param label: The localized label message 
            
            * Property is read-only.
            
            
        :type  remediation_url: :class:`str` or ``None``
        :param remediation_url: The URL string for remediation documentation link 
            
            * Property is read-only.
            
            
        """

        self.error_code = error_code
        self.error_type = error_type
        self.arguments = arguments
        self.context = context
        self.message = message
        self.remediation_message = remediation_message
        self.causes = causes
        self.nested_errors = nested_errors
        self.reference_token = reference_token
        self.label = label
        self.remediation_url = remediation_url
        VapiError.__init__(self)

Error._set_binding_type(type.ErrorType(
    'vmware.sddc_manager.model.error', {
        'errorCode': type.OptionalType(type.StringType()),
        'errorType': type.OptionalType(type.StringType()),
        'arguments': type.OptionalType(type.ListType(type.StringType())),
        'context': type.OptionalType(type.MapType(type.StringType(), type.StringType())),
        'message': type.OptionalType(type.StringType()),
        'remediationMessage': type.OptionalType(type.StringType()),
        'causes': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'ErrorCause'))),
        'nestedErrors': type.OptionalType(type.ListType(type.ReferenceType(__name__, 'Error'))),
        'referenceToken': type.OptionalType(type.StringType()),
        'label': type.OptionalType(type.StringType()),
        'remediationUrl': type.OptionalType(type.StringType()),
    },
    Error))




class StubFactory(StubFactoryBase):
    _attrs = {
    }

