---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#
# ----------------------------------------------------------------------------
- name: Prepare random number
  ansible.builtin.set_fact:
    storage_account_name: "st{{ resource_group | hash('md5') | truncate(7, True, '') }}{{ 1000 | random }}"
    batch_account_name: "ba{{ resource_group | hash('md5') | truncate(7, True, '') }}{{ 1000 | random }}"
    rpfx: "{{ resource_group | hash('md5') | truncate(7, True, '') }}{{ 1000 | random }}"
  run_once: true

- name: Gather Resource Group info
  azure.azcollection.azure_rm_resourcegroup_info:
    name: "{{ resource_group }}"
  register: __rg_info

- name: Set location based on resource group
  ansible.builtin.set_fact:
    location: "{{ __rg_info.resourcegroups.0.location }}"

- name: Create Storage Account
  azure_rm_storageaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ storage_account_name }}"
    location: "{{ location }}"
    account_type: Standard_LRS

- name: Create identities array
  ansible.builtin.set_fact:
    managed_identity_ids: []

- name: Create user managed identities
  ansible.builtin.include_tasks: "{{ role_path }}/../../../integration_common_tasks/managed_identity.yml"
  vars:
    managed_identity_test_unique: 'batchaccount'
    managed_identity_unique: "{{ item }}"
    managed_identity_action: 'create'
    managed_identity_location: "{{ location }}"
  with_items:
    - '1'
    - '2'

- name: Create Batch Account
  azure_rm_batchaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ batch_account_name }}"
    location: "{{ location }}"
    auto_storage_account:
      name: "{{ storage_account_name }}"
    pool_allocation_mode: batch_service
    tags:
      key1: value1
      key2: value2
    identity:
      type: UserAssigned
      user_assigned_identity: "{{ managed_identity_ids[0] }}"
  register: output

- name: Assert the resource was created
  ansible.builtin.assert:
    that:
      - output.changed
      - output.new.identity.type == "UserAssigned"
      - output.new.identity.user_assigned_identities | length == 1
      - output.new.identity.user_assigned_identities[managed_identity_ids[0]] is defined

- name: Create Batch Account -- idempotent
  azure_rm_batchaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ batch_account_name }}"
    location: "{{ location }}"
    auto_storage_account:
      name: "{{ storage_account_name }}"
    pool_allocation_mode: batch_service
    tags:
      key1: value1
      key2: value2
    identity:
      type: UserAssigned
      user_assigned_identity: "{{ managed_identity_ids[0] }}"
  register: output

- name: Assert the resource wasn't changed
  ansible.builtin.assert:
    that:
      - not output.changed
      - output.new.identity.type == "UserAssigned"
      - output.new.identity.user_assigned_identities | length == 1
      - output.new.identity.user_assigned_identities[managed_identity_ids[0]] is defined

- name: Update user assigned identity
  azure_rm_batchaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ batch_account_name }}"
    location: "{{ location }}"
    auto_storage_account:
      name: "{{ storage_account_name }}"
    pool_allocation_mode: batch_service
    tags:
      key1: value1
      key2: value2
    identity:
      type: UserAssigned
      user_assigned_identity: "{{ managed_identity_ids[1] }}"
  register: output

- name: Assert the resource was changed
  ansible.builtin.assert:
    that:
      - output.changed
      - output.new.identity.type == "UserAssigned"
      - output.new.identity.user_assigned_identities | length == 1
      - output.new.identity.user_assigned_identities[managed_identity_ids[1]] is defined

- name: Get Batch Account facts
  azure_rm_batchaccount_info:
    resource_group: "{{ resource_group }}"
    name: "{{ batch_account_name }}"
  register: output

- name: Assert the facts
  ansible.builtin.assert:
    that:
      - output.batch_account | length == 1
      - output.batch_account[0].tags | length == 2
      - output.batch_account[0].identity.type == "UserAssigned"
      - output.batch_account[0].identity.user_assigned_identities | length == 1
      - output.batch_account[0].identity.user_assigned_identities[managed_identity_ids[1]] is defined

- name: Update identity type to SystemAssigned
  azure_rm_batchaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ batch_account_name }}"
    location: "{{ location }}"
    auto_storage_account:
      name: "{{ storage_account_name }}"
    pool_allocation_mode: batch_service
    tags:
      key1: value1
      key2: value2
    identity:
      type: SystemAssigned
  register: output

- name: Assert the resource was changed
  ansible.builtin.assert:
    that:
      - output.changed
      - output.new.identity.type == "SystemAssigned"
      - output.new.identity.user_assigned_identities is not defined

- name: Create a new batchaccount application (Checkmode test)
  azure_rm_batchaccountapplication:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "app{{ rpfx }}"
    display_name: "Application description"
    allow_updates: false
  check_mode: true

- name: Create a new batchaccount application
  azure_rm_batchaccountapplication:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "app{{ rpfx }}"
    display_name: "Application description"
    allow_updates: false
  register: output

- name: Assert the application was created
  ansible.builtin.assert:
    that:
      - output.changed

- name: Create a new batchaccount application again(Idempotent test)
  azure_rm_batchaccountapplication:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "app{{ rpfx }}"
    display_name: "Application description"
    allow_updates: false
  register: output

- name: Assert the application no changed
  ansible.builtin.assert:
    that:
      - not output.changed

- name: Upgrade the application
  azure_rm_batchaccountapplication:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "app{{ rpfx }}"
    display_name: "Application description 02"
    allow_updates: true
  register: output

- name: Assert the application was updated
  ansible.builtin.assert:
    that:
      - output.changed

- name: Get the batchaccount application facts
  azure_rm_batchaccountapplication_info:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "app{{ rpfx }}"
  register: output

- name: Assert the facts
  ansible.builtin.assert:
    that:
      - output.batch_account_application[0].allow_updates is true
      - output.batch_account_application[0].display_name == "Application description 02"

- name: Create a new batch account application package(Checkmode test)
  azure_rm_batchaccountapplicationpackage:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    application_name: "app{{ rpfx }}"
    name: "package{{ rpfx }}"
  check_mode: true

- name: Create a new batch account application package
  azure_rm_batchaccountapplicationpackage:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    application_name: "app{{ rpfx }}"
    name: "package{{ rpfx }}"
  register: output

- name: Assert the application package was created
  ansible.builtin.assert:
    that:
      - output.changed

- name: Create a new batch account application package again(Idempotent test)
  azure_rm_batchaccountapplicationpackage:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    application_name: "app{{ rpfx }}"
    name: "package{{ rpfx }}"
  register: output

- name: Assert the application package no changed
  ansible.builtin.assert:
    that:
      - not output.changed

- name: Get the application package facts
  azure_rm_batchaccountapplicationpackage_info:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    application_name: "app{{ rpfx }}"
    name: "package{{ rpfx }}"
  register: output

- name: Assert the facts
  ansible.builtin.assert:
    that:
      - output.batch_account_application_package | length == 1

- name: Create virtual network
  azure_rm_virtualnetwork:
    name: "vnet{{ rpfx }}"
    address_prefixes_cidr:
      - 10.1.0.0/16
      - 172.100.0.0/16
      - fdda:e69b:1587:495e::/64
    resource_group: "{{ resource_group }}"

- name: Create a subnet
  azure_rm_subnet:
    resource_group: "{{ resource_group }}"
    name: "sub{{ rpfx }}"
    virtual_network_name: "vnet{{ rpfx }}"
    address_prefix_cidr: "10.1.0.0/24"
  register: subnet_output

- name: Create a new batch account pool(Checkmode test)
  azure_rm_batchaccountpool:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "pool{{ rpfx }}"
    deployment_configuration:
      virtual_machine_configuration:
        image_reference:
          offer: ubuntu-hpc
          publisher: microsoft-dsvm
          sku: 2204
          version: latest
        node_agent_sku_id: 'batch.node.ubuntu 22.04'
        node_placement_configuration:
          policy: Regional
        os_disk:
          caching: None
          managed_disk:
            storage_account_type: Premium_LRS
    display_name: "fredtest"
    inter_node_communication: Disabled
    network_configuration:
      dynamic_vnet_assignment_scope: none
      subnet_id: "{{ subnet_output.state.id }}"
      endpoint_configuration:
        inbound_nat_pools:
          - backend_port: 33
            frontend_port_range_end: 49999
            frontend_port_range_start: 1
            name: nat02
            protocol: UDP
      public_ip_address_configuration:
        provision: BatchManaged
    scale_settings:
      fixed_scale:
        resize_timeout: PT15M
        target_dedicated_nodes: 0
        target_low_priority_nodes: 0
    target_node_communication_mode: Default
    task_scheduling_policy:
      node_fill_type: Pack
    task_slots_per_node: 1
    vm_size: STANDARD_D2S_V3
    upgrade_policy:
      mode: manual
      rolling_upgrade_policy:
        max_batch_instance_percent: 20
        max_unhealthy_instance_percent: 20
        max_unhealthy_upgraded_instance_percent: 20
        pause_time_between_batches: P0D
        rollback_failed_instances_on_policy_breach: true
      automatic_os_upgrade_policy:
        disable_automatic_rollback: false
        enable_automatic_os_upgrade: false
        os_rolling_upgrade_deferral: false
        use_rolling_upgrade_policy: false
  register: output
  check_mode: true

- name: Create a new batch account pool
  azure_rm_batchaccountpool:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "pool{{ rpfx }}"
    deployment_configuration:
      virtual_machine_configuration:
        image_reference:
          offer: ubuntu-hpc
          publisher: microsoft-dsvm
          sku: 2204
          version: latest
        node_agent_sku_id: 'batch.node.ubuntu 22.04'
        node_placement_configuration:
          policy: Regional
        os_disk:
          caching: None
          managed_disk:
            storage_account_type: Premium_LRS
    display_name: "fredtest"
    inter_node_communication: Disabled
    network_configuration:
      dynamic_vnet_assignment_scope: none
      subnet_id: "{{ subnet_output.state.id }}"
      endpoint_configuration:
        inbound_nat_pools:
          - backend_port: 33
            frontend_port_range_end: 49999
            frontend_port_range_start: 1
            name: nat02
            protocol: UDP
      public_ip_address_configuration:
        provision: BatchManaged
    scale_settings:
      fixed_scale:
        resize_timeout: PT15M
        target_dedicated_nodes: 0
        target_low_priority_nodes: 0
    target_node_communication_mode: Default
    task_scheduling_policy:
      node_fill_type: Pack
    task_slots_per_node: 1
    vm_size: STANDARD_D2S_V3
    upgrade_policy:
      mode: manual
      rolling_upgrade_policy:
        max_batch_instance_percent: 20
        max_unhealthy_instance_percent: 20
        max_unhealthy_upgraded_instance_percent: 20
        pause_time_between_batches: P0D
        rollback_failed_instances_on_policy_breach: true
      automatic_os_upgrade_policy:
        disable_automatic_rollback: false
        enable_automatic_os_upgrade: false
        os_rolling_upgrade_deferral: false
        use_rolling_upgrade_policy: false
  register: output

- name: Assert the pool was created
  ansible.builtin.assert:
    that:
      - output.changed

- name: Create a new batch account pool again(Idempotent test)
  azure_rm_batchaccountpool:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "pool{{ rpfx }}"
    deployment_configuration:
      virtual_machine_configuration:
        image_reference:
          offer: ubuntu-hpc
          publisher: microsoft-dsvm
          sku: 2204
          version: latest
        node_agent_sku_id: 'batch.node.ubuntu 22.04'
        node_placement_configuration:
          policy: Regional
        os_disk:
          caching: None
          managed_disk:
            storage_account_type: Premium_LRS
    display_name: "fredtest"
    inter_node_communication: Disabled
    network_configuration:
      dynamic_vnet_assignment_scope: none
      subnet_id: "{{ subnet_output.state.id }}"
      endpoint_configuration:
        inbound_nat_pools:
          - backend_port: 33
            frontend_port_range_end: 49999
            frontend_port_range_start: 1
            name: nat02
            protocol: UDP
      public_ip_address_configuration:
        provision: BatchManaged
    scale_settings:
      fixed_scale:
        resize_timeout: PT15M
        target_dedicated_nodes: 0
        target_low_priority_nodes: 0
    target_node_communication_mode: Default
    task_scheduling_policy:
      node_fill_type: Pack
    task_slots_per_node: 1
    vm_size: STANDARD_D2S_V3
    upgrade_policy:
      mode: manual
      rolling_upgrade_policy:
        max_batch_instance_percent: 20
        max_unhealthy_instance_percent: 20
        max_unhealthy_upgraded_instance_percent: 20
        pause_time_between_batches: P0D
        rollback_failed_instances_on_policy_breach: true
      automatic_os_upgrade_policy:
        disable_automatic_rollback: false
        enable_automatic_os_upgrade: false
        os_rolling_upgrade_deferral: false
        use_rolling_upgrade_policy: false
  register: output

- name: Assert the pool no changed
  ansible.builtin.assert:
    that:
      - not output.changed

- name: Upgrade the batch account pool
  azure_rm_batchaccountpool:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "pool{{ rpfx }}"
    deployment_configuration:
      virtual_machine_configuration:
        image_reference:
          offer: ubuntu-hpc
          publisher: microsoft-dsvm
          sku: 2204
          version: latest
        node_agent_sku_id: 'batch.node.ubuntu 22.04'
        node_placement_configuration:
          policy: Regional
        os_disk:
          caching: None
          managed_disk:
            storage_account_type: Premium_LRS
    display_name: "fredtest"
    inter_node_communication: Disabled
    network_configuration:
      dynamic_vnet_assignment_scope: none
      subnet_id: "{{ subnet_output.state.id }}"
      endpoint_configuration:
        inbound_nat_pools:
          - backend_port: 33
            frontend_port_range_end: 49999
            frontend_port_range_start: 1
            name: nat02
            protocol: UDP
      public_ip_address_configuration:
        provision: BatchManaged
    scale_settings:
      fixed_scale:
        resize_timeout: PT15M
        target_dedicated_nodes: 0
        target_low_priority_nodes: 0
    target_node_communication_mode: Default
    task_scheduling_policy:
      node_fill_type: Pack
    task_slots_per_node: 1
    vm_size: STANDARD_D2S_V3
    upgrade_policy:
      mode: manual
      rolling_upgrade_policy:
        max_batch_instance_percent: 20
        max_unhealthy_instance_percent: 20
        max_unhealthy_upgraded_instance_percent: 20
        pause_time_between_batches: P0D
        rollback_failed_instances_on_policy_breach: true
      automatic_os_upgrade_policy:
        disable_automatic_rollback: true
        enable_automatic_os_upgrade: true
        os_rolling_upgrade_deferral: true
        use_rolling_upgrade_policy: true
  register: output

- name: Assert the pool was updated
  ansible.builtin.assert:
    that:
      - output.changed

- name: Get the batch account pool facts by name
  azure_rm_batchaccountpool_info:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "pool{{ rpfx }}"
  register: output

- name: Assert the facts
  ansible.builtin.assert:
    that:
      - output.batch_account_pool | length == 1
      - output.batch_account_pool[0].display_name == "fredtest"
      - output.batch_account_pool[0].provisioning_state == "Succeeded"
      - output.batch_account_pool[0].upgrade_policy.automatic_os_upgrade_policy.disable_automatic_rollback is true
      - output.batch_account_pool[0].upgrade_policy.automatic_os_upgrade_policy.enable_automatic_os_upgrade is true
      - output.batch_account_pool[0].upgrade_policy.automatic_os_upgrade_policy.os_rolling_upgrade_deferral is true
      - output.batch_account_pool[0].upgrade_policy.automatic_os_upgrade_policy.use_rolling_upgrade_policy is true

- name: Stop resize the batch account pool
  azure_rm_batchaccountpool:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "pool{{ rpfx }}"
    is_stop_resize: true
  register: output

- name: Assert the pool stop resize
  ansible.builtin.assert:
    that:
      - output.changed

- name: Disable the batch account pool auto_scale
  azure_rm_batchaccountpool:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "pool{{ rpfx }}"
    is_disable_auto_scale: true
  register: output

- name: Assert the pool disable auto_scale
  ansible.builtin.assert:
    that:
      - output.changed

- name: Delete the batch account pool
  azure_rm_batchaccountpool:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "pool{{ rpfx }}"
    state: absent
  register: output

- name: Assert the pool deleted
  ansible.builtin.assert:
    that:
      - output.changed

- name: Delete the application package
  azure_rm_batchaccountapplicationpackage:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    application_name: "app{{ rpfx }}"
    name: "package{{ rpfx }}"
    state: absent
  register: output

- name: Assert the application package deleted
  ansible.builtin.assert:
    that:
      - output.changed

- name: Delete the application
  azure_rm_batchaccountapplication:
    resource_group: "{{ resource_group }}"
    batch_account_name: "{{ batch_account_name }}"
    name: "app{{ rpfx }}"
    state: absent

- name: Assert the application deleted
  ansible.builtin.assert:
    that:
      - output.changed

- name: Delete Batch Account
  azure_rm_batchaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ batch_account_name }}"
    state: absent
  register: output

- name: Assert that state has changed
  ansible.builtin.assert:
    that:
      - output.changed

- name: Clean up storage account
  azure_rm_storageaccount:
    resource_group: "{{ resource_group }}"
    name: "{{ storage_account_name }}"
    state: absent

- name: Delete user managed identities
  ansible.builtin.include_tasks: "{{ role_path }}/../../../integration_common_tasks/managed_identity.yml"
  vars:
    managed_identity_test_unique: 'batchaccount'
    managed_identity_unique: "{{ item }}"
    managed_identity_action: 'delete'
    managed_identity_location: "{{ location }}"
  with_items:
    - '1'
    - '2'
