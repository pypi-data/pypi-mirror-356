# coding: utf-8

"""
Codesphere Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self


class WorkspacesUpdateWorkspaceRequest(BaseModel):
    """
    WorkspacesUpdateWorkspaceRequest
    """  # noqa: E501

    plan_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(
        default=None, alias="planId"
    )
    base_image: Optional[StrictStr] = Field(default=None, alias="baseImage")
    name: Optional[StrictStr] = None
    replicas: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    vpn_config: Optional[StrictStr] = Field(default=None, alias="vpnConfig")
    __properties: ClassVar[List[str]] = [
        "planId",
        "baseImage",
        "name",
        "replicas",
        "vpnConfig",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspacesUpdateWorkspaceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if vpn_config (nullable) is None
        # and model_fields_set contains the field
        if self.vpn_config is None and "vpn_config" in self.model_fields_set:
            _dict["vpnConfig"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspacesUpdateWorkspaceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "planId": obj.get("planId"),
                "baseImage": obj.get("baseImage"),
                "name": obj.get("name"),
                "replicas": obj.get("replicas"),
                "vpnConfig": obj.get("vpnConfig"),
            }
        )
        return _obj
