# coding: utf-8

"""
Codesphere Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from codesphere.models.domains_get_domain200_response_certificate_request_status import (
    DomainsGetDomain200ResponseCertificateRequestStatus,
)
from codesphere.models.domains_get_domain200_response_custom_config import (
    DomainsGetDomain200ResponseCustomConfig,
)
from codesphere.models.domains_get_domain200_response_dns_entries import (
    DomainsGetDomain200ResponseDnsEntries,
)
from codesphere.models.domains_get_domain200_response_domain_verification_status import (
    DomainsGetDomain200ResponseDomainVerificationStatus,
)
from typing import Set
from typing_extensions import Self


class DomainsGetDomain200Response(BaseModel):
    """
    DomainsGetDomain200Response
    """  # noqa: E501

    team_id: Annotated[int, Field(strict=True, ge=0)] = Field(alias="teamId")
    data_center_id: Annotated[int, Field(strict=True, ge=0)] = Field(
        alias="dataCenterId"
    )
    workspaces: Dict[str, List[Annotated[int, Field(strict=True, ge=0)]]]
    name: StrictStr
    certificate_request_status: DomainsGetDomain200ResponseCertificateRequestStatus = (
        Field(alias="certificateRequestStatus")
    )
    dns_entries: DomainsGetDomain200ResponseDnsEntries = Field(alias="dnsEntries")
    domain_verification_status: DomainsGetDomain200ResponseDomainVerificationStatus = (
        Field(alias="domainVerificationStatus")
    )
    custom_config_revision: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(
        default=None, alias="customConfigRevision"
    )
    custom_config: Optional[DomainsGetDomain200ResponseCustomConfig] = Field(
        default=None, alias="customConfig"
    )
    __properties: ClassVar[List[str]] = [
        "teamId",
        "dataCenterId",
        "workspaces",
        "name",
        "certificateRequestStatus",
        "dnsEntries",
        "domainVerificationStatus",
        "customConfigRevision",
        "customConfig",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainsGetDomain200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificate_request_status
        if self.certificate_request_status:
            _dict["certificateRequestStatus"] = (
                self.certificate_request_status.to_dict()
            )
        # override the default output from pydantic by calling `to_dict()` of dns_entries
        if self.dns_entries:
            _dict["dnsEntries"] = self.dns_entries.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domain_verification_status
        if self.domain_verification_status:
            _dict["domainVerificationStatus"] = (
                self.domain_verification_status.to_dict()
            )
        # override the default output from pydantic by calling `to_dict()` of custom_config
        if self.custom_config:
            _dict["customConfig"] = self.custom_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainsGetDomain200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "teamId": obj.get("teamId"),
                "dataCenterId": obj.get("dataCenterId"),
                "workspaces": obj.get("workspaces"),
                "name": obj.get("name"),
                "certificateRequestStatus": DomainsGetDomain200ResponseCertificateRequestStatus.from_dict(
                    obj["certificateRequestStatus"]
                )
                if obj.get("certificateRequestStatus") is not None
                else None,
                "dnsEntries": DomainsGetDomain200ResponseDnsEntries.from_dict(
                    obj["dnsEntries"]
                )
                if obj.get("dnsEntries") is not None
                else None,
                "domainVerificationStatus": DomainsGetDomain200ResponseDomainVerificationStatus.from_dict(
                    obj["domainVerificationStatus"]
                )
                if obj.get("domainVerificationStatus") is not None
                else None,
                "customConfigRevision": obj.get("customConfigRevision"),
                "customConfig": DomainsGetDomain200ResponseCustomConfig.from_dict(
                    obj["customConfig"]
                )
                if obj.get("customConfig") is not None
                else None,
            }
        )
        return _obj
