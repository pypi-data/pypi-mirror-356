# coding: utf-8

"""
Codesphere Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from codesphere.models.metadata_get_workspace_plans200_response_inner_characteristics import (
    MetadataGetWorkspacePlans200ResponseInnerCharacteristics,
)
from typing import Optional, Set
from typing_extensions import Self


class MetadataGetWorkspacePlans200ResponseInner(BaseModel):
    """
    MetadataGetWorkspacePlans200ResponseInner
    """  # noqa: E501

    id: Annotated[int, Field(strict=True, ge=0)]
    price_usd: Union[StrictFloat, StrictInt] = Field(alias="priceUsd")
    title: StrictStr
    deprecated: StrictBool
    characteristics: MetadataGetWorkspacePlans200ResponseInnerCharacteristics
    max_replicas: Annotated[int, Field(strict=True, ge=1)] = Field(alias="maxReplicas")
    __properties: ClassVar[List[str]] = [
        "id",
        "priceUsd",
        "title",
        "deprecated",
        "characteristics",
        "maxReplicas",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetadataGetWorkspacePlans200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of characteristics
        if self.characteristics:
            _dict["characteristics"] = self.characteristics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetadataGetWorkspacePlans200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "priceUsd": obj.get("priceUsd"),
                "title": obj.get("title"),
                "deprecated": obj.get("deprecated"),
                "characteristics": MetadataGetWorkspacePlans200ResponseInnerCharacteristics.from_dict(
                    obj["characteristics"]
                )
                if obj.get("characteristics") is not None
                else None,
                "maxReplicas": obj.get("maxReplicas"),
            }
        )
        return _obj
