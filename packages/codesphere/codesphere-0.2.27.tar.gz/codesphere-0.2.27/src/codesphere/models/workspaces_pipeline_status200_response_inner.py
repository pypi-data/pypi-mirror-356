# coding: utf-8

"""
Codesphere Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from codesphere.models.workspaces_pipeline_status200_response_inner_steps_inner import (
    WorkspacesPipelineStatus200ResponseInnerStepsInner,
)
from typing import Set
from typing_extensions import Self


class WorkspacesPipelineStatus200ResponseInner(BaseModel):
    """
    WorkspacesPipelineStatus200ResponseInner
    """  # noqa: E501

    state: StrictStr
    started_at: Optional[datetime] = Field(default=None, alias="startedAt")
    finished_at: Optional[datetime] = Field(default=None, alias="finishedAt")
    steps: List[WorkspacesPipelineStatus200ResponseInnerStepsInner]
    replica: StrictStr
    server: Annotated[str, Field(strict=True)]
    __properties: ClassVar[List[str]] = [
        "state",
        "startedAt",
        "finishedAt",
        "steps",
        "replica",
        "server",
    ]

    @field_validator("state")
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["waiting", "running", "success", "failure", "aborted"]):
            raise ValueError(
                "must be one of enum values ('waiting', 'running', 'success', 'failure', 'aborted')"
            )
        return value

    @field_validator("server")
    def server_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?:[a-z]|[a-z][-a-z0-9]{0,30}[a-z0-9])$", value):
            raise ValueError(
                r"must validate the regular expression /^(?:[a-z]|[a-z][-a-z0-9]{0,30}[a-z0-9])$/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspacesPipelineStatus200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item_steps in self.steps:
                if _item_steps:
                    _items.append(_item_steps.to_dict())
            _dict["steps"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspacesPipelineStatus200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "state": obj.get("state"),
                "startedAt": obj.get("startedAt"),
                "finishedAt": obj.get("finishedAt"),
                "steps": [
                    WorkspacesPipelineStatus200ResponseInnerStepsInner.from_dict(_item)
                    for _item in obj["steps"]
                ]
                if obj.get("steps") is not None
                else None,
                "replica": obj.get("replica"),
                "server": obj.get("server"),
            }
        )
        return _obj
