# coding: utf-8

"""
Codesphere Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Set
from typing_extensions import Self


class TeamsGetTeam200Response(BaseModel):
    """
    TeamsGetTeam200Response
    """  # noqa: E501

    id: Annotated[int, Field(strict=True, ge=0)]
    default_data_center_id: Annotated[int, Field(strict=True, ge=0)] = Field(
        alias="defaultDataCenterId"
    )
    name: StrictStr
    description: Optional[StrictStr] = None
    avatar_id: Optional[StrictStr] = Field(default=None, alias="avatarId")
    avatar_url: Optional[StrictStr] = Field(default=None, alias="avatarUrl")
    is_first: Optional[StrictBool] = Field(default=None, alias="isFirst")
    __properties: ClassVar[List[str]] = [
        "id",
        "defaultDataCenterId",
        "name",
        "description",
        "avatarId",
        "avatarUrl",
        "isFirst",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamsGetTeam200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if avatar_id (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_id is None and "avatar_id" in self.model_fields_set:
            _dict["avatarId"] = None

        # set to None if avatar_url (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_url is None and "avatar_url" in self.model_fields_set:
            _dict["avatarUrl"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamsGetTeam200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "defaultDataCenterId": obj.get("defaultDataCenterId"),
                "name": obj.get("name"),
                "description": obj.get("description"),
                "avatarId": obj.get("avatarId"),
                "avatarUrl": obj.get("avatarUrl"),
                "isFirst": obj.get("isFirst"),
            }
        )
        return _obj
