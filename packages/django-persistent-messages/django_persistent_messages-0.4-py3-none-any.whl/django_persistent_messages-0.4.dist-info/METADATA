Metadata-Version: 2.3
Name: django-persistent-messages
Version: 0.4
Summary: Wrapper around django.contrib.messages adding persistence.
License: MIT
Author: YunoJuno
Author-email: code@yunojuno.com
Maintainer: YunoJuno
Maintainer-email: code@yunojuno.com
Requires-Python: >=3.10,<4.0
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 4.2
Classifier: Framework :: Django :: 5.0
Classifier: Framework :: Django :: 5.2
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3 :: Only
Requires-Dist: django (>=4.2,<6.0)
Project-URL: Documentation, https://github.com/yunojuno/django-persistent-messages
Project-URL: Homepage, https://github.com/yunojuno/django-persistent-messages
Project-URL: Repository, https://github.com/yunojuno/django-persistent-messages
Description-Content-Type: text/plain

# Persistent Messages-like Framework for Django

Persistent, dismissible, targeted, messages framework for Django apps

## STATUS

Alpha - pls do not use. This README is six years old.

## Background

Django messages are great for one-off notifications to users, but not
for persistent notification banners. From the [official
documentation](https://docs.djangoproject.com/en/1.11/ref/contrib/messages/)
on the Django messages framework:

> Quite commonly in web applications, you need to display a one-time
> notification message to the user after processing a form or some other
> types of user input. [...] The messages framework allows you to
> temporarily store messages in one request and retrieve them for
> display in a subsequent request (usually the next one).

These one-time messages are usually dynamic, created within a view
function, to alert the user to something that has just happened. This
project is designed to extend the pattern to support configurable and
persistent messages to users. The canonical use case for this is the EU
Cookie warning. This appears to everyone (logged in or not) until the
user explicitly dismiss it. It is not related to any specific action
that the user has taken (beyond visiting the site for the first time),
and it persists across all requests.

## Requirements

-   Messages can be managed via the admin site
-   The message can contain HTML (specifically href links)
-   The message can be categorised (e.g. INFO | WARNING)
-   The message can be targeted to appear to the following groups:
    -   All users (inc. anonymous)
    -   Authenticated users only
    -   Specific user groups only
-   The message can be marked as dismissable
-   The message can be enabled / disabled
-   The message can expire (do not show after {{datetime}})
-   Track message dismissals

## Use cases

-   As the marketing team I would like to notify users of an event / activity
-   As the tech team I would like to alert users to platform maintenance
-   As the EU I would like to annoy people with a message about cookies

## Technical implementation

1. Print out all messages targeted at a user

```python
# live == enabled, not expired, not-dismissed, targeted at user
for m in PersistentMessage.objects.for_user(user).active():
    print(m.message)
```

2. Display messages in a template using template context

```html
<body>
    {% for m in persistent_messages %}
    <div class="{{m.extra_tags}}">{{ m.message }}</div>
    {% endfor %} ...
</body>
```

