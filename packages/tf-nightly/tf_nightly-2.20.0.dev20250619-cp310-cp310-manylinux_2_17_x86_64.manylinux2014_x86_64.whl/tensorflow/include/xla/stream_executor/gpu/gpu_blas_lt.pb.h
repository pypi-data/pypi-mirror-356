// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/stream_executor/gpu/gpu_blas_lt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fstream_5fexecutor_2fgpu_2fgpu_5fblas_5flt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fstream_5fexecutor_2fgpu_2fgpu_5fblas_5flt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xla/stream_executor/blas.pb.h"
#include "xla/xla_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fstream_5fexecutor_2fgpu_2fgpu_5fblas_5flt_2eproto PROTOBUF_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2fstream_5fexecutor_2fgpu_2fgpu_5fblas_5flt_2eproto {
  static const uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fstream_5fexecutor_2fgpu_2fgpu_5fblas_5flt_2eproto;
namespace xla {
class GemmConfigProto;
struct GemmConfigProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern GemmConfigProtoDefaultTypeInternal _GemmConfigProto_default_instance_;
class GemmConfigProto_MatrixLayout;
struct GemmConfigProto_MatrixLayoutDefaultTypeInternal;
PROTOBUF_EXPORT extern GemmConfigProto_MatrixLayoutDefaultTypeInternal _GemmConfigProto_MatrixLayout_default_instance_;
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_EXPORT ::xla::GemmConfigProto* Arena::CreateMaybeMessage<::xla::GemmConfigProto>(Arena*);
template<> PROTOBUF_EXPORT ::xla::GemmConfigProto_MatrixLayout* Arena::CreateMaybeMessage<::xla::GemmConfigProto_MatrixLayout>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {

enum GemmConfigProto_MatrixLayout_Order : int {
  GemmConfigProto_MatrixLayout_Order_ORDER_UNKNOWN = 0,
  GemmConfigProto_MatrixLayout_Order_ORDER_ROW_MAJOR = 1,
  GemmConfigProto_MatrixLayout_Order_ORDER_COLUMN_MAJOR = 2,
  GemmConfigProto_MatrixLayout_Order_GemmConfigProto_MatrixLayout_Order_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GemmConfigProto_MatrixLayout_Order_GemmConfigProto_MatrixLayout_Order_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
PROTOBUF_EXPORT bool GemmConfigProto_MatrixLayout_Order_IsValid(int value);
constexpr GemmConfigProto_MatrixLayout_Order GemmConfigProto_MatrixLayout_Order_Order_MIN = GemmConfigProto_MatrixLayout_Order_ORDER_UNKNOWN;
constexpr GemmConfigProto_MatrixLayout_Order GemmConfigProto_MatrixLayout_Order_Order_MAX = GemmConfigProto_MatrixLayout_Order_ORDER_COLUMN_MAJOR;
constexpr int GemmConfigProto_MatrixLayout_Order_Order_ARRAYSIZE = GemmConfigProto_MatrixLayout_Order_Order_MAX + 1;

PROTOBUF_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GemmConfigProto_MatrixLayout_Order_descriptor();
template<typename T>
inline const std::string& GemmConfigProto_MatrixLayout_Order_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GemmConfigProto_MatrixLayout_Order>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GemmConfigProto_MatrixLayout_Order_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GemmConfigProto_MatrixLayout_Order_descriptor(), enum_t_value);
}
inline bool GemmConfigProto_MatrixLayout_Order_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GemmConfigProto_MatrixLayout_Order* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GemmConfigProto_MatrixLayout_Order>(
    GemmConfigProto_MatrixLayout_Order_descriptor(), name, value);
}
// ===================================================================

class PROTOBUF_EXPORT GemmConfigProto_MatrixLayout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.GemmConfigProto.MatrixLayout) */ {
 public:
  inline GemmConfigProto_MatrixLayout() : GemmConfigProto_MatrixLayout(nullptr) {}
  ~GemmConfigProto_MatrixLayout() override;
  explicit PROTOBUF_CONSTEXPR GemmConfigProto_MatrixLayout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GemmConfigProto_MatrixLayout(const GemmConfigProto_MatrixLayout& from);
  GemmConfigProto_MatrixLayout(GemmConfigProto_MatrixLayout&& from) noexcept
    : GemmConfigProto_MatrixLayout() {
    *this = ::std::move(from);
  }

  inline GemmConfigProto_MatrixLayout& operator=(const GemmConfigProto_MatrixLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline GemmConfigProto_MatrixLayout& operator=(GemmConfigProto_MatrixLayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GemmConfigProto_MatrixLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const GemmConfigProto_MatrixLayout* internal_default_instance() {
    return reinterpret_cast<const GemmConfigProto_MatrixLayout*>(
               &_GemmConfigProto_MatrixLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GemmConfigProto_MatrixLayout& a, GemmConfigProto_MatrixLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(GemmConfigProto_MatrixLayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GemmConfigProto_MatrixLayout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GemmConfigProto_MatrixLayout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GemmConfigProto_MatrixLayout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GemmConfigProto_MatrixLayout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GemmConfigProto_MatrixLayout& from) {
    GemmConfigProto_MatrixLayout::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GemmConfigProto_MatrixLayout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.GemmConfigProto.MatrixLayout";
  }
  protected:
  explicit GemmConfigProto_MatrixLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GemmConfigProto_MatrixLayout_Order Order;
  static constexpr Order ORDER_UNKNOWN =
    GemmConfigProto_MatrixLayout_Order_ORDER_UNKNOWN;
  static constexpr Order ORDER_ROW_MAJOR =
    GemmConfigProto_MatrixLayout_Order_ORDER_ROW_MAJOR;
  static constexpr Order ORDER_COLUMN_MAJOR =
    GemmConfigProto_MatrixLayout_Order_ORDER_COLUMN_MAJOR;
  static inline bool Order_IsValid(int value) {
    return GemmConfigProto_MatrixLayout_Order_IsValid(value);
  }
  static constexpr Order Order_MIN =
    GemmConfigProto_MatrixLayout_Order_Order_MIN;
  static constexpr Order Order_MAX =
    GemmConfigProto_MatrixLayout_Order_Order_MAX;
  static constexpr int Order_ARRAYSIZE =
    GemmConfigProto_MatrixLayout_Order_Order_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Order_descriptor() {
    return GemmConfigProto_MatrixLayout_Order_descriptor();
  }
  template<typename T>
  static inline const std::string& Order_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Order>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Order_Name.");
    return GemmConfigProto_MatrixLayout_Order_Name(enum_t_value);
  }
  static inline bool Order_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Order* value) {
    return GemmConfigProto_MatrixLayout_Order_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNumRowsFieldNumber = 2,
    kNumColsFieldNumber = 3,
    kBatchSizeFieldNumber = 4,
    kOrderFieldNumber = 1,
    kTransposeFieldNumber = 7,
    kLeadingDimStrideFieldNumber = 5,
    kBatchStrideFieldNumber = 6,
    kDtypeFieldNumber = 8,
  };
  // int64 num_rows = 2;
  void clear_num_rows();
  int64_t num_rows() const;
  void set_num_rows(int64_t value);
  private:
  int64_t _internal_num_rows() const;
  void _internal_set_num_rows(int64_t value);
  public:

  // int64 num_cols = 3;
  void clear_num_cols();
  int64_t num_cols() const;
  void set_num_cols(int64_t value);
  private:
  int64_t _internal_num_cols() const;
  void _internal_set_num_cols(int64_t value);
  public:

  // int64 batch_size = 4;
  void clear_batch_size();
  int64_t batch_size() const;
  void set_batch_size(int64_t value);
  private:
  int64_t _internal_batch_size() const;
  void _internal_set_batch_size(int64_t value);
  public:

  // .xla.GemmConfigProto.MatrixLayout.Order order = 1;
  void clear_order();
  ::xla::GemmConfigProto_MatrixLayout_Order order() const;
  void set_order(::xla::GemmConfigProto_MatrixLayout_Order value);
  private:
  ::xla::GemmConfigProto_MatrixLayout_Order _internal_order() const;
  void _internal_set_order(::xla::GemmConfigProto_MatrixLayout_Order value);
  public:

  // .xla.BlasTransposeProto transpose = 7;
  void clear_transpose();
  ::xla::BlasTransposeProto transpose() const;
  void set_transpose(::xla::BlasTransposeProto value);
  private:
  ::xla::BlasTransposeProto _internal_transpose() const;
  void _internal_set_transpose(::xla::BlasTransposeProto value);
  public:

  // int64 leading_dim_stride = 5;
  void clear_leading_dim_stride();
  int64_t leading_dim_stride() const;
  void set_leading_dim_stride(int64_t value);
  private:
  int64_t _internal_leading_dim_stride() const;
  void _internal_set_leading_dim_stride(int64_t value);
  public:

  // int64 batch_stride = 6;
  void clear_batch_stride();
  int64_t batch_stride() const;
  void set_batch_stride(int64_t value);
  private:
  int64_t _internal_batch_stride() const;
  void _internal_set_batch_stride(int64_t value);
  public:

  // .xla.PrimitiveType dtype = 8;
  void clear_dtype();
  ::xla::PrimitiveType dtype() const;
  void set_dtype(::xla::PrimitiveType value);
  private:
  ::xla::PrimitiveType _internal_dtype() const;
  void _internal_set_dtype(::xla::PrimitiveType value);
  public:

  // @@protoc_insertion_point(class_scope:xla.GemmConfigProto.MatrixLayout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t num_rows_;
    int64_t num_cols_;
    int64_t batch_size_;
    int order_;
    int transpose_;
    int64_t leading_dim_stride_;
    int64_t batch_stride_;
    int dtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fstream_5fexecutor_2fgpu_2fgpu_5fblas_5flt_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT GemmConfigProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.GemmConfigProto) */ {
 public:
  inline GemmConfigProto() : GemmConfigProto(nullptr) {}
  ~GemmConfigProto() override;
  explicit PROTOBUF_CONSTEXPR GemmConfigProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GemmConfigProto(const GemmConfigProto& from);
  GemmConfigProto(GemmConfigProto&& from) noexcept
    : GemmConfigProto() {
    *this = ::std::move(from);
  }

  inline GemmConfigProto& operator=(const GemmConfigProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GemmConfigProto& operator=(GemmConfigProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GemmConfigProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const GemmConfigProto* internal_default_instance() {
    return reinterpret_cast<const GemmConfigProto*>(
               &_GemmConfigProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GemmConfigProto& a, GemmConfigProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GemmConfigProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GemmConfigProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GemmConfigProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GemmConfigProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GemmConfigProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GemmConfigProto& from) {
    GemmConfigProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GemmConfigProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.GemmConfigProto";
  }
  protected:
  explicit GemmConfigProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GemmConfigProto_MatrixLayout MatrixLayout;

  // accessors -------------------------------------------------------

  enum : int {
    kLhsLayoutFieldNumber = 1,
    kRhsLayoutFieldNumber = 2,
    kCLayoutFieldNumber = 3,
    kOutputLayoutFieldNumber = 4,
    kAlphaRealFieldNumber = 5,
    kAlphaImagFieldNumber = 6,
    kBetaFieldNumber = 7,
    kComputePrecisionFieldNumber = 8,
    kAlgorithmFieldNumber = 10,
    kPrecisionAlgorithmFieldNumber = 9,
    kGradXFieldNumber = 11,
    kGradYFieldNumber = 12,
    kComputeTypeFieldNumber = 13,
  };
  // .xla.GemmConfigProto.MatrixLayout lhs_layout = 1;
  bool has_lhs_layout() const;
  private:
  bool _internal_has_lhs_layout() const;
  public:
  void clear_lhs_layout();
  const ::xla::GemmConfigProto_MatrixLayout& lhs_layout() const;
  PROTOBUF_NODISCARD ::xla::GemmConfigProto_MatrixLayout* release_lhs_layout();
  ::xla::GemmConfigProto_MatrixLayout* mutable_lhs_layout();
  void set_allocated_lhs_layout(::xla::GemmConfigProto_MatrixLayout* lhs_layout);
  private:
  const ::xla::GemmConfigProto_MatrixLayout& _internal_lhs_layout() const;
  ::xla::GemmConfigProto_MatrixLayout* _internal_mutable_lhs_layout();
  public:
  void unsafe_arena_set_allocated_lhs_layout(
      ::xla::GemmConfigProto_MatrixLayout* lhs_layout);
  ::xla::GemmConfigProto_MatrixLayout* unsafe_arena_release_lhs_layout();

  // .xla.GemmConfigProto.MatrixLayout rhs_layout = 2;
  bool has_rhs_layout() const;
  private:
  bool _internal_has_rhs_layout() const;
  public:
  void clear_rhs_layout();
  const ::xla::GemmConfigProto_MatrixLayout& rhs_layout() const;
  PROTOBUF_NODISCARD ::xla::GemmConfigProto_MatrixLayout* release_rhs_layout();
  ::xla::GemmConfigProto_MatrixLayout* mutable_rhs_layout();
  void set_allocated_rhs_layout(::xla::GemmConfigProto_MatrixLayout* rhs_layout);
  private:
  const ::xla::GemmConfigProto_MatrixLayout& _internal_rhs_layout() const;
  ::xla::GemmConfigProto_MatrixLayout* _internal_mutable_rhs_layout();
  public:
  void unsafe_arena_set_allocated_rhs_layout(
      ::xla::GemmConfigProto_MatrixLayout* rhs_layout);
  ::xla::GemmConfigProto_MatrixLayout* unsafe_arena_release_rhs_layout();

  // .xla.GemmConfigProto.MatrixLayout c_layout = 3;
  bool has_c_layout() const;
  private:
  bool _internal_has_c_layout() const;
  public:
  void clear_c_layout();
  const ::xla::GemmConfigProto_MatrixLayout& c_layout() const;
  PROTOBUF_NODISCARD ::xla::GemmConfigProto_MatrixLayout* release_c_layout();
  ::xla::GemmConfigProto_MatrixLayout* mutable_c_layout();
  void set_allocated_c_layout(::xla::GemmConfigProto_MatrixLayout* c_layout);
  private:
  const ::xla::GemmConfigProto_MatrixLayout& _internal_c_layout() const;
  ::xla::GemmConfigProto_MatrixLayout* _internal_mutable_c_layout();
  public:
  void unsafe_arena_set_allocated_c_layout(
      ::xla::GemmConfigProto_MatrixLayout* c_layout);
  ::xla::GemmConfigProto_MatrixLayout* unsafe_arena_release_c_layout();

  // .xla.GemmConfigProto.MatrixLayout output_layout = 4;
  bool has_output_layout() const;
  private:
  bool _internal_has_output_layout() const;
  public:
  void clear_output_layout();
  const ::xla::GemmConfigProto_MatrixLayout& output_layout() const;
  PROTOBUF_NODISCARD ::xla::GemmConfigProto_MatrixLayout* release_output_layout();
  ::xla::GemmConfigProto_MatrixLayout* mutable_output_layout();
  void set_allocated_output_layout(::xla::GemmConfigProto_MatrixLayout* output_layout);
  private:
  const ::xla::GemmConfigProto_MatrixLayout& _internal_output_layout() const;
  ::xla::GemmConfigProto_MatrixLayout* _internal_mutable_output_layout();
  public:
  void unsafe_arena_set_allocated_output_layout(
      ::xla::GemmConfigProto_MatrixLayout* output_layout);
  ::xla::GemmConfigProto_MatrixLayout* unsafe_arena_release_output_layout();

  // double alpha_real = 5;
  void clear_alpha_real();
  double alpha_real() const;
  void set_alpha_real(double value);
  private:
  double _internal_alpha_real() const;
  void _internal_set_alpha_real(double value);
  public:

  // double alpha_imag = 6;
  void clear_alpha_imag();
  double alpha_imag() const;
  void set_alpha_imag(double value);
  private:
  double _internal_alpha_imag() const;
  void _internal_set_alpha_imag(double value);
  public:

  // double beta = 7;
  void clear_beta();
  double beta() const;
  void set_beta(double value);
  private:
  double _internal_beta() const;
  void _internal_set_beta(double value);
  public:

  // int64 compute_precision = 8;
  void clear_compute_precision();
  int64_t compute_precision() const;
  void set_compute_precision(int64_t value);
  private:
  int64_t _internal_compute_precision() const;
  void _internal_set_compute_precision(int64_t value);
  public:

  // optional int64 algorithm = 10;
  bool has_algorithm() const;
  private:
  bool _internal_has_algorithm() const;
  public:
  void clear_algorithm();
  int64_t algorithm() const;
  void set_algorithm(int64_t value);
  private:
  int64_t _internal_algorithm() const;
  void _internal_set_algorithm(int64_t value);
  public:

  // .xla.PrecisionConfig.Algorithm precision_algorithm = 9;
  void clear_precision_algorithm();
  ::xla::PrecisionConfig_Algorithm precision_algorithm() const;
  void set_precision_algorithm(::xla::PrecisionConfig_Algorithm value);
  private:
  ::xla::PrecisionConfig_Algorithm _internal_precision_algorithm() const;
  void _internal_set_precision_algorithm(::xla::PrecisionConfig_Algorithm value);
  public:

  // bool grad_x = 11;
  void clear_grad_x();
  bool grad_x() const;
  void set_grad_x(bool value);
  private:
  bool _internal_grad_x() const;
  void _internal_set_grad_x(bool value);
  public:

  // bool grad_y = 12;
  void clear_grad_y();
  bool grad_y() const;
  void set_grad_y(bool value);
  private:
  bool _internal_grad_y() const;
  void _internal_set_grad_y(bool value);
  public:

  // .xla.BlasComputationTypeProto compute_type = 13;
  void clear_compute_type();
  ::xla::BlasComputationTypeProto compute_type() const;
  void set_compute_type(::xla::BlasComputationTypeProto value);
  private:
  ::xla::BlasComputationTypeProto _internal_compute_type() const;
  void _internal_set_compute_type(::xla::BlasComputationTypeProto value);
  public:

  // @@protoc_insertion_point(class_scope:xla.GemmConfigProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::xla::GemmConfigProto_MatrixLayout* lhs_layout_;
    ::xla::GemmConfigProto_MatrixLayout* rhs_layout_;
    ::xla::GemmConfigProto_MatrixLayout* c_layout_;
    ::xla::GemmConfigProto_MatrixLayout* output_layout_;
    double alpha_real_;
    double alpha_imag_;
    double beta_;
    int64_t compute_precision_;
    int64_t algorithm_;
    int precision_algorithm_;
    bool grad_x_;
    bool grad_y_;
    int compute_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fstream_5fexecutor_2fgpu_2fgpu_5fblas_5flt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GemmConfigProto_MatrixLayout

// .xla.GemmConfigProto.MatrixLayout.Order order = 1;
inline void GemmConfigProto_MatrixLayout::clear_order() {
  _impl_.order_ = 0;
}
inline ::xla::GemmConfigProto_MatrixLayout_Order GemmConfigProto_MatrixLayout::_internal_order() const {
  return static_cast< ::xla::GemmConfigProto_MatrixLayout_Order >(_impl_.order_);
}
inline ::xla::GemmConfigProto_MatrixLayout_Order GemmConfigProto_MatrixLayout::order() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.MatrixLayout.order)
  return _internal_order();
}
inline void GemmConfigProto_MatrixLayout::_internal_set_order(::xla::GemmConfigProto_MatrixLayout_Order value) {
  
  _impl_.order_ = value;
}
inline void GemmConfigProto_MatrixLayout::set_order(::xla::GemmConfigProto_MatrixLayout_Order value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.MatrixLayout.order)
}

// int64 num_rows = 2;
inline void GemmConfigProto_MatrixLayout::clear_num_rows() {
  _impl_.num_rows_ = int64_t{0};
}
inline int64_t GemmConfigProto_MatrixLayout::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int64_t GemmConfigProto_MatrixLayout::num_rows() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.MatrixLayout.num_rows)
  return _internal_num_rows();
}
inline void GemmConfigProto_MatrixLayout::_internal_set_num_rows(int64_t value) {
  
  _impl_.num_rows_ = value;
}
inline void GemmConfigProto_MatrixLayout::set_num_rows(int64_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.MatrixLayout.num_rows)
}

// int64 num_cols = 3;
inline void GemmConfigProto_MatrixLayout::clear_num_cols() {
  _impl_.num_cols_ = int64_t{0};
}
inline int64_t GemmConfigProto_MatrixLayout::_internal_num_cols() const {
  return _impl_.num_cols_;
}
inline int64_t GemmConfigProto_MatrixLayout::num_cols() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.MatrixLayout.num_cols)
  return _internal_num_cols();
}
inline void GemmConfigProto_MatrixLayout::_internal_set_num_cols(int64_t value) {
  
  _impl_.num_cols_ = value;
}
inline void GemmConfigProto_MatrixLayout::set_num_cols(int64_t value) {
  _internal_set_num_cols(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.MatrixLayout.num_cols)
}

// int64 batch_size = 4;
inline void GemmConfigProto_MatrixLayout::clear_batch_size() {
  _impl_.batch_size_ = int64_t{0};
}
inline int64_t GemmConfigProto_MatrixLayout::_internal_batch_size() const {
  return _impl_.batch_size_;
}
inline int64_t GemmConfigProto_MatrixLayout::batch_size() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.MatrixLayout.batch_size)
  return _internal_batch_size();
}
inline void GemmConfigProto_MatrixLayout::_internal_set_batch_size(int64_t value) {
  
  _impl_.batch_size_ = value;
}
inline void GemmConfigProto_MatrixLayout::set_batch_size(int64_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.MatrixLayout.batch_size)
}

// int64 leading_dim_stride = 5;
inline void GemmConfigProto_MatrixLayout::clear_leading_dim_stride() {
  _impl_.leading_dim_stride_ = int64_t{0};
}
inline int64_t GemmConfigProto_MatrixLayout::_internal_leading_dim_stride() const {
  return _impl_.leading_dim_stride_;
}
inline int64_t GemmConfigProto_MatrixLayout::leading_dim_stride() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.MatrixLayout.leading_dim_stride)
  return _internal_leading_dim_stride();
}
inline void GemmConfigProto_MatrixLayout::_internal_set_leading_dim_stride(int64_t value) {
  
  _impl_.leading_dim_stride_ = value;
}
inline void GemmConfigProto_MatrixLayout::set_leading_dim_stride(int64_t value) {
  _internal_set_leading_dim_stride(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.MatrixLayout.leading_dim_stride)
}

// int64 batch_stride = 6;
inline void GemmConfigProto_MatrixLayout::clear_batch_stride() {
  _impl_.batch_stride_ = int64_t{0};
}
inline int64_t GemmConfigProto_MatrixLayout::_internal_batch_stride() const {
  return _impl_.batch_stride_;
}
inline int64_t GemmConfigProto_MatrixLayout::batch_stride() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.MatrixLayout.batch_stride)
  return _internal_batch_stride();
}
inline void GemmConfigProto_MatrixLayout::_internal_set_batch_stride(int64_t value) {
  
  _impl_.batch_stride_ = value;
}
inline void GemmConfigProto_MatrixLayout::set_batch_stride(int64_t value) {
  _internal_set_batch_stride(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.MatrixLayout.batch_stride)
}

// .xla.BlasTransposeProto transpose = 7;
inline void GemmConfigProto_MatrixLayout::clear_transpose() {
  _impl_.transpose_ = 0;
}
inline ::xla::BlasTransposeProto GemmConfigProto_MatrixLayout::_internal_transpose() const {
  return static_cast< ::xla::BlasTransposeProto >(_impl_.transpose_);
}
inline ::xla::BlasTransposeProto GemmConfigProto_MatrixLayout::transpose() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.MatrixLayout.transpose)
  return _internal_transpose();
}
inline void GemmConfigProto_MatrixLayout::_internal_set_transpose(::xla::BlasTransposeProto value) {
  
  _impl_.transpose_ = value;
}
inline void GemmConfigProto_MatrixLayout::set_transpose(::xla::BlasTransposeProto value) {
  _internal_set_transpose(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.MatrixLayout.transpose)
}

// .xla.PrimitiveType dtype = 8;
inline void GemmConfigProto_MatrixLayout::clear_dtype() {
  _impl_.dtype_ = 0;
}
inline ::xla::PrimitiveType GemmConfigProto_MatrixLayout::_internal_dtype() const {
  return static_cast< ::xla::PrimitiveType >(_impl_.dtype_);
}
inline ::xla::PrimitiveType GemmConfigProto_MatrixLayout::dtype() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.MatrixLayout.dtype)
  return _internal_dtype();
}
inline void GemmConfigProto_MatrixLayout::_internal_set_dtype(::xla::PrimitiveType value) {
  
  _impl_.dtype_ = value;
}
inline void GemmConfigProto_MatrixLayout::set_dtype(::xla::PrimitiveType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.MatrixLayout.dtype)
}

// -------------------------------------------------------------------

// GemmConfigProto

// .xla.GemmConfigProto.MatrixLayout lhs_layout = 1;
inline bool GemmConfigProto::_internal_has_lhs_layout() const {
  return this != internal_default_instance() && _impl_.lhs_layout_ != nullptr;
}
inline bool GemmConfigProto::has_lhs_layout() const {
  return _internal_has_lhs_layout();
}
inline void GemmConfigProto::clear_lhs_layout() {
  if (GetArenaForAllocation() == nullptr && _impl_.lhs_layout_ != nullptr) {
    delete _impl_.lhs_layout_;
  }
  _impl_.lhs_layout_ = nullptr;
}
inline const ::xla::GemmConfigProto_MatrixLayout& GemmConfigProto::_internal_lhs_layout() const {
  const ::xla::GemmConfigProto_MatrixLayout* p = _impl_.lhs_layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::GemmConfigProto_MatrixLayout&>(
      ::xla::_GemmConfigProto_MatrixLayout_default_instance_);
}
inline const ::xla::GemmConfigProto_MatrixLayout& GemmConfigProto::lhs_layout() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.lhs_layout)
  return _internal_lhs_layout();
}
inline void GemmConfigProto::unsafe_arena_set_allocated_lhs_layout(
    ::xla::GemmConfigProto_MatrixLayout* lhs_layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lhs_layout_);
  }
  _impl_.lhs_layout_ = lhs_layout;
  if (lhs_layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.GemmConfigProto.lhs_layout)
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::release_lhs_layout() {
  
  ::xla::GemmConfigProto_MatrixLayout* temp = _impl_.lhs_layout_;
  _impl_.lhs_layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::unsafe_arena_release_lhs_layout() {
  // @@protoc_insertion_point(field_release:xla.GemmConfigProto.lhs_layout)
  
  ::xla::GemmConfigProto_MatrixLayout* temp = _impl_.lhs_layout_;
  _impl_.lhs_layout_ = nullptr;
  return temp;
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::_internal_mutable_lhs_layout() {
  
  if (_impl_.lhs_layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::GemmConfigProto_MatrixLayout>(GetArenaForAllocation());
    _impl_.lhs_layout_ = p;
  }
  return _impl_.lhs_layout_;
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::mutable_lhs_layout() {
  ::xla::GemmConfigProto_MatrixLayout* _msg = _internal_mutable_lhs_layout();
  // @@protoc_insertion_point(field_mutable:xla.GemmConfigProto.lhs_layout)
  return _msg;
}
inline void GemmConfigProto::set_allocated_lhs_layout(::xla::GemmConfigProto_MatrixLayout* lhs_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lhs_layout_;
  }
  if (lhs_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lhs_layout);
    if (message_arena != submessage_arena) {
      lhs_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lhs_layout, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lhs_layout_ = lhs_layout;
  // @@protoc_insertion_point(field_set_allocated:xla.GemmConfigProto.lhs_layout)
}

// .xla.GemmConfigProto.MatrixLayout rhs_layout = 2;
inline bool GemmConfigProto::_internal_has_rhs_layout() const {
  return this != internal_default_instance() && _impl_.rhs_layout_ != nullptr;
}
inline bool GemmConfigProto::has_rhs_layout() const {
  return _internal_has_rhs_layout();
}
inline void GemmConfigProto::clear_rhs_layout() {
  if (GetArenaForAllocation() == nullptr && _impl_.rhs_layout_ != nullptr) {
    delete _impl_.rhs_layout_;
  }
  _impl_.rhs_layout_ = nullptr;
}
inline const ::xla::GemmConfigProto_MatrixLayout& GemmConfigProto::_internal_rhs_layout() const {
  const ::xla::GemmConfigProto_MatrixLayout* p = _impl_.rhs_layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::GemmConfigProto_MatrixLayout&>(
      ::xla::_GemmConfigProto_MatrixLayout_default_instance_);
}
inline const ::xla::GemmConfigProto_MatrixLayout& GemmConfigProto::rhs_layout() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.rhs_layout)
  return _internal_rhs_layout();
}
inline void GemmConfigProto::unsafe_arena_set_allocated_rhs_layout(
    ::xla::GemmConfigProto_MatrixLayout* rhs_layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rhs_layout_);
  }
  _impl_.rhs_layout_ = rhs_layout;
  if (rhs_layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.GemmConfigProto.rhs_layout)
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::release_rhs_layout() {
  
  ::xla::GemmConfigProto_MatrixLayout* temp = _impl_.rhs_layout_;
  _impl_.rhs_layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::unsafe_arena_release_rhs_layout() {
  // @@protoc_insertion_point(field_release:xla.GemmConfigProto.rhs_layout)
  
  ::xla::GemmConfigProto_MatrixLayout* temp = _impl_.rhs_layout_;
  _impl_.rhs_layout_ = nullptr;
  return temp;
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::_internal_mutable_rhs_layout() {
  
  if (_impl_.rhs_layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::GemmConfigProto_MatrixLayout>(GetArenaForAllocation());
    _impl_.rhs_layout_ = p;
  }
  return _impl_.rhs_layout_;
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::mutable_rhs_layout() {
  ::xla::GemmConfigProto_MatrixLayout* _msg = _internal_mutable_rhs_layout();
  // @@protoc_insertion_point(field_mutable:xla.GemmConfigProto.rhs_layout)
  return _msg;
}
inline void GemmConfigProto::set_allocated_rhs_layout(::xla::GemmConfigProto_MatrixLayout* rhs_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rhs_layout_;
  }
  if (rhs_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rhs_layout);
    if (message_arena != submessage_arena) {
      rhs_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rhs_layout, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rhs_layout_ = rhs_layout;
  // @@protoc_insertion_point(field_set_allocated:xla.GemmConfigProto.rhs_layout)
}

// .xla.GemmConfigProto.MatrixLayout c_layout = 3;
inline bool GemmConfigProto::_internal_has_c_layout() const {
  return this != internal_default_instance() && _impl_.c_layout_ != nullptr;
}
inline bool GemmConfigProto::has_c_layout() const {
  return _internal_has_c_layout();
}
inline void GemmConfigProto::clear_c_layout() {
  if (GetArenaForAllocation() == nullptr && _impl_.c_layout_ != nullptr) {
    delete _impl_.c_layout_;
  }
  _impl_.c_layout_ = nullptr;
}
inline const ::xla::GemmConfigProto_MatrixLayout& GemmConfigProto::_internal_c_layout() const {
  const ::xla::GemmConfigProto_MatrixLayout* p = _impl_.c_layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::GemmConfigProto_MatrixLayout&>(
      ::xla::_GemmConfigProto_MatrixLayout_default_instance_);
}
inline const ::xla::GemmConfigProto_MatrixLayout& GemmConfigProto::c_layout() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.c_layout)
  return _internal_c_layout();
}
inline void GemmConfigProto::unsafe_arena_set_allocated_c_layout(
    ::xla::GemmConfigProto_MatrixLayout* c_layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.c_layout_);
  }
  _impl_.c_layout_ = c_layout;
  if (c_layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.GemmConfigProto.c_layout)
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::release_c_layout() {
  
  ::xla::GemmConfigProto_MatrixLayout* temp = _impl_.c_layout_;
  _impl_.c_layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::unsafe_arena_release_c_layout() {
  // @@protoc_insertion_point(field_release:xla.GemmConfigProto.c_layout)
  
  ::xla::GemmConfigProto_MatrixLayout* temp = _impl_.c_layout_;
  _impl_.c_layout_ = nullptr;
  return temp;
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::_internal_mutable_c_layout() {
  
  if (_impl_.c_layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::GemmConfigProto_MatrixLayout>(GetArenaForAllocation());
    _impl_.c_layout_ = p;
  }
  return _impl_.c_layout_;
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::mutable_c_layout() {
  ::xla::GemmConfigProto_MatrixLayout* _msg = _internal_mutable_c_layout();
  // @@protoc_insertion_point(field_mutable:xla.GemmConfigProto.c_layout)
  return _msg;
}
inline void GemmConfigProto::set_allocated_c_layout(::xla::GemmConfigProto_MatrixLayout* c_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.c_layout_;
  }
  if (c_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(c_layout);
    if (message_arena != submessage_arena) {
      c_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c_layout, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.c_layout_ = c_layout;
  // @@protoc_insertion_point(field_set_allocated:xla.GemmConfigProto.c_layout)
}

// .xla.GemmConfigProto.MatrixLayout output_layout = 4;
inline bool GemmConfigProto::_internal_has_output_layout() const {
  return this != internal_default_instance() && _impl_.output_layout_ != nullptr;
}
inline bool GemmConfigProto::has_output_layout() const {
  return _internal_has_output_layout();
}
inline void GemmConfigProto::clear_output_layout() {
  if (GetArenaForAllocation() == nullptr && _impl_.output_layout_ != nullptr) {
    delete _impl_.output_layout_;
  }
  _impl_.output_layout_ = nullptr;
}
inline const ::xla::GemmConfigProto_MatrixLayout& GemmConfigProto::_internal_output_layout() const {
  const ::xla::GemmConfigProto_MatrixLayout* p = _impl_.output_layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::GemmConfigProto_MatrixLayout&>(
      ::xla::_GemmConfigProto_MatrixLayout_default_instance_);
}
inline const ::xla::GemmConfigProto_MatrixLayout& GemmConfigProto::output_layout() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.output_layout)
  return _internal_output_layout();
}
inline void GemmConfigProto::unsafe_arena_set_allocated_output_layout(
    ::xla::GemmConfigProto_MatrixLayout* output_layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_layout_);
  }
  _impl_.output_layout_ = output_layout;
  if (output_layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.GemmConfigProto.output_layout)
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::release_output_layout() {
  
  ::xla::GemmConfigProto_MatrixLayout* temp = _impl_.output_layout_;
  _impl_.output_layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::unsafe_arena_release_output_layout() {
  // @@protoc_insertion_point(field_release:xla.GemmConfigProto.output_layout)
  
  ::xla::GemmConfigProto_MatrixLayout* temp = _impl_.output_layout_;
  _impl_.output_layout_ = nullptr;
  return temp;
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::_internal_mutable_output_layout() {
  
  if (_impl_.output_layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::GemmConfigProto_MatrixLayout>(GetArenaForAllocation());
    _impl_.output_layout_ = p;
  }
  return _impl_.output_layout_;
}
inline ::xla::GemmConfigProto_MatrixLayout* GemmConfigProto::mutable_output_layout() {
  ::xla::GemmConfigProto_MatrixLayout* _msg = _internal_mutable_output_layout();
  // @@protoc_insertion_point(field_mutable:xla.GemmConfigProto.output_layout)
  return _msg;
}
inline void GemmConfigProto::set_allocated_output_layout(::xla::GemmConfigProto_MatrixLayout* output_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.output_layout_;
  }
  if (output_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(output_layout);
    if (message_arena != submessage_arena) {
      output_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_layout, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.output_layout_ = output_layout;
  // @@protoc_insertion_point(field_set_allocated:xla.GemmConfigProto.output_layout)
}

// double alpha_real = 5;
inline void GemmConfigProto::clear_alpha_real() {
  _impl_.alpha_real_ = 0;
}
inline double GemmConfigProto::_internal_alpha_real() const {
  return _impl_.alpha_real_;
}
inline double GemmConfigProto::alpha_real() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.alpha_real)
  return _internal_alpha_real();
}
inline void GemmConfigProto::_internal_set_alpha_real(double value) {
  
  _impl_.alpha_real_ = value;
}
inline void GemmConfigProto::set_alpha_real(double value) {
  _internal_set_alpha_real(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.alpha_real)
}

// double alpha_imag = 6;
inline void GemmConfigProto::clear_alpha_imag() {
  _impl_.alpha_imag_ = 0;
}
inline double GemmConfigProto::_internal_alpha_imag() const {
  return _impl_.alpha_imag_;
}
inline double GemmConfigProto::alpha_imag() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.alpha_imag)
  return _internal_alpha_imag();
}
inline void GemmConfigProto::_internal_set_alpha_imag(double value) {
  
  _impl_.alpha_imag_ = value;
}
inline void GemmConfigProto::set_alpha_imag(double value) {
  _internal_set_alpha_imag(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.alpha_imag)
}

// double beta = 7;
inline void GemmConfigProto::clear_beta() {
  _impl_.beta_ = 0;
}
inline double GemmConfigProto::_internal_beta() const {
  return _impl_.beta_;
}
inline double GemmConfigProto::beta() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.beta)
  return _internal_beta();
}
inline void GemmConfigProto::_internal_set_beta(double value) {
  
  _impl_.beta_ = value;
}
inline void GemmConfigProto::set_beta(double value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.beta)
}

// int64 compute_precision = 8;
inline void GemmConfigProto::clear_compute_precision() {
  _impl_.compute_precision_ = int64_t{0};
}
inline int64_t GemmConfigProto::_internal_compute_precision() const {
  return _impl_.compute_precision_;
}
inline int64_t GemmConfigProto::compute_precision() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.compute_precision)
  return _internal_compute_precision();
}
inline void GemmConfigProto::_internal_set_compute_precision(int64_t value) {
  
  _impl_.compute_precision_ = value;
}
inline void GemmConfigProto::set_compute_precision(int64_t value) {
  _internal_set_compute_precision(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.compute_precision)
}

// .xla.PrecisionConfig.Algorithm precision_algorithm = 9;
inline void GemmConfigProto::clear_precision_algorithm() {
  _impl_.precision_algorithm_ = 0;
}
inline ::xla::PrecisionConfig_Algorithm GemmConfigProto::_internal_precision_algorithm() const {
  return static_cast< ::xla::PrecisionConfig_Algorithm >(_impl_.precision_algorithm_);
}
inline ::xla::PrecisionConfig_Algorithm GemmConfigProto::precision_algorithm() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.precision_algorithm)
  return _internal_precision_algorithm();
}
inline void GemmConfigProto::_internal_set_precision_algorithm(::xla::PrecisionConfig_Algorithm value) {
  
  _impl_.precision_algorithm_ = value;
}
inline void GemmConfigProto::set_precision_algorithm(::xla::PrecisionConfig_Algorithm value) {
  _internal_set_precision_algorithm(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.precision_algorithm)
}

// optional int64 algorithm = 10;
inline bool GemmConfigProto::_internal_has_algorithm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GemmConfigProto::has_algorithm() const {
  return _internal_has_algorithm();
}
inline void GemmConfigProto::clear_algorithm() {
  _impl_.algorithm_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t GemmConfigProto::_internal_algorithm() const {
  return _impl_.algorithm_;
}
inline int64_t GemmConfigProto::algorithm() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.algorithm)
  return _internal_algorithm();
}
inline void GemmConfigProto::_internal_set_algorithm(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.algorithm_ = value;
}
inline void GemmConfigProto::set_algorithm(int64_t value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.algorithm)
}

// bool grad_x = 11;
inline void GemmConfigProto::clear_grad_x() {
  _impl_.grad_x_ = false;
}
inline bool GemmConfigProto::_internal_grad_x() const {
  return _impl_.grad_x_;
}
inline bool GemmConfigProto::grad_x() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.grad_x)
  return _internal_grad_x();
}
inline void GemmConfigProto::_internal_set_grad_x(bool value) {
  
  _impl_.grad_x_ = value;
}
inline void GemmConfigProto::set_grad_x(bool value) {
  _internal_set_grad_x(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.grad_x)
}

// bool grad_y = 12;
inline void GemmConfigProto::clear_grad_y() {
  _impl_.grad_y_ = false;
}
inline bool GemmConfigProto::_internal_grad_y() const {
  return _impl_.grad_y_;
}
inline bool GemmConfigProto::grad_y() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.grad_y)
  return _internal_grad_y();
}
inline void GemmConfigProto::_internal_set_grad_y(bool value) {
  
  _impl_.grad_y_ = value;
}
inline void GemmConfigProto::set_grad_y(bool value) {
  _internal_set_grad_y(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.grad_y)
}

// .xla.BlasComputationTypeProto compute_type = 13;
inline void GemmConfigProto::clear_compute_type() {
  _impl_.compute_type_ = 0;
}
inline ::xla::BlasComputationTypeProto GemmConfigProto::_internal_compute_type() const {
  return static_cast< ::xla::BlasComputationTypeProto >(_impl_.compute_type_);
}
inline ::xla::BlasComputationTypeProto GemmConfigProto::compute_type() const {
  // @@protoc_insertion_point(field_get:xla.GemmConfigProto.compute_type)
  return _internal_compute_type();
}
inline void GemmConfigProto::_internal_set_compute_type(::xla::BlasComputationTypeProto value) {
  
  _impl_.compute_type_ = value;
}
inline void GemmConfigProto::set_compute_type(::xla::BlasComputationTypeProto value) {
  _internal_set_compute_type(value);
  // @@protoc_insertion_point(field_set:xla.GemmConfigProto.compute_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xla

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xla::GemmConfigProto_MatrixLayout_Order> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::GemmConfigProto_MatrixLayout_Order>() {
  return ::xla::GemmConfigProto_MatrixLayout_Order_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fstream_5fexecutor_2fgpu_2fgpu_5fblas_5flt_2eproto
