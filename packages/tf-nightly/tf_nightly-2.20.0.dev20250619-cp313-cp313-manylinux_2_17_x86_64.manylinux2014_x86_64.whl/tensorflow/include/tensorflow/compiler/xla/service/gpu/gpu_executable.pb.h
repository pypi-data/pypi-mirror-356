// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/service/gpu/gpu_executable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2fgpu_5fexecutable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2fgpu_5fexecutable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "xla/service/hlo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fservice_2fgpu_2fgpu_5fexecutable_2eproto PROTOBUF_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2fservice_2fgpu_2fgpu_5fexecutable_2eproto {
  static const uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fservice_2fgpu_2fgpu_5fexecutable_2eproto;
namespace xla {
namespace gpu {
class OutputInfoProto;
struct OutputInfoProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern OutputInfoProtoDefaultTypeInternal _OutputInfoProto_default_instance_;
}  // namespace gpu
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_EXPORT ::xla::gpu::OutputInfoProto* Arena::CreateMaybeMessage<::xla::gpu::OutputInfoProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {
namespace gpu {

// ===================================================================

class PROTOBUF_EXPORT OutputInfoProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.gpu.OutputInfoProto) */ {
 public:
  inline OutputInfoProto() : OutputInfoProto(nullptr) {}
  ~OutputInfoProto() override;
  explicit PROTOBUF_CONSTEXPR OutputInfoProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputInfoProto(const OutputInfoProto& from);
  OutputInfoProto(OutputInfoProto&& from) noexcept
    : OutputInfoProto() {
    *this = ::std::move(from);
  }

  inline OutputInfoProto& operator=(const OutputInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputInfoProto& operator=(OutputInfoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputInfoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputInfoProto* internal_default_instance() {
    return reinterpret_cast<const OutputInfoProto*>(
               &_OutputInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OutputInfoProto& a, OutputInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputInfoProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputInfoProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputInfoProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutputInfoProto& from) {
    OutputInfoProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputInfoProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.gpu.OutputInfoProto";
  }
  protected:
  explicit OutputInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAliasConfigFieldNumber = 3,
    kAllocationIndexFieldNumber = 1,
    kPassthroughFieldNumber = 2,
  };
  // optional .xla.HloInputOutputAliasProto.AliasEntryProto alias_config = 3;
  bool has_alias_config() const;
  private:
  bool _internal_has_alias_config() const;
  public:
  void clear_alias_config();
  const ::xla::HloInputOutputAliasProto_AliasEntryProto& alias_config() const;
  PROTOBUF_NODISCARD ::xla::HloInputOutputAliasProto_AliasEntryProto* release_alias_config();
  ::xla::HloInputOutputAliasProto_AliasEntryProto* mutable_alias_config();
  void set_allocated_alias_config(::xla::HloInputOutputAliasProto_AliasEntryProto* alias_config);
  private:
  const ::xla::HloInputOutputAliasProto_AliasEntryProto& _internal_alias_config() const;
  ::xla::HloInputOutputAliasProto_AliasEntryProto* _internal_mutable_alias_config();
  public:
  void unsafe_arena_set_allocated_alias_config(
      ::xla::HloInputOutputAliasProto_AliasEntryProto* alias_config);
  ::xla::HloInputOutputAliasProto_AliasEntryProto* unsafe_arena_release_alias_config();

  // int64 allocation_index = 1;
  void clear_allocation_index();
  int64_t allocation_index() const;
  void set_allocation_index(int64_t value);
  private:
  int64_t _internal_allocation_index() const;
  void _internal_set_allocation_index(int64_t value);
  public:

  // bool passthrough = 2;
  void clear_passthrough();
  bool passthrough() const;
  void set_passthrough(bool value);
  private:
  bool _internal_passthrough() const;
  void _internal_set_passthrough(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xla.gpu.OutputInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::xla::HloInputOutputAliasProto_AliasEntryProto* alias_config_;
    int64_t allocation_index_;
    bool passthrough_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fgpu_2fgpu_5fexecutable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OutputInfoProto

// int64 allocation_index = 1;
inline void OutputInfoProto::clear_allocation_index() {
  _impl_.allocation_index_ = int64_t{0};
}
inline int64_t OutputInfoProto::_internal_allocation_index() const {
  return _impl_.allocation_index_;
}
inline int64_t OutputInfoProto::allocation_index() const {
  // @@protoc_insertion_point(field_get:xla.gpu.OutputInfoProto.allocation_index)
  return _internal_allocation_index();
}
inline void OutputInfoProto::_internal_set_allocation_index(int64_t value) {
  
  _impl_.allocation_index_ = value;
}
inline void OutputInfoProto::set_allocation_index(int64_t value) {
  _internal_set_allocation_index(value);
  // @@protoc_insertion_point(field_set:xla.gpu.OutputInfoProto.allocation_index)
}

// bool passthrough = 2;
inline void OutputInfoProto::clear_passthrough() {
  _impl_.passthrough_ = false;
}
inline bool OutputInfoProto::_internal_passthrough() const {
  return _impl_.passthrough_;
}
inline bool OutputInfoProto::passthrough() const {
  // @@protoc_insertion_point(field_get:xla.gpu.OutputInfoProto.passthrough)
  return _internal_passthrough();
}
inline void OutputInfoProto::_internal_set_passthrough(bool value) {
  
  _impl_.passthrough_ = value;
}
inline void OutputInfoProto::set_passthrough(bool value) {
  _internal_set_passthrough(value);
  // @@protoc_insertion_point(field_set:xla.gpu.OutputInfoProto.passthrough)
}

// optional .xla.HloInputOutputAliasProto.AliasEntryProto alias_config = 3;
inline bool OutputInfoProto::_internal_has_alias_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alias_config_ != nullptr);
  return value;
}
inline bool OutputInfoProto::has_alias_config() const {
  return _internal_has_alias_config();
}
inline const ::xla::HloInputOutputAliasProto_AliasEntryProto& OutputInfoProto::_internal_alias_config() const {
  const ::xla::HloInputOutputAliasProto_AliasEntryProto* p = _impl_.alias_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::HloInputOutputAliasProto_AliasEntryProto&>(
      ::xla::_HloInputOutputAliasProto_AliasEntryProto_default_instance_);
}
inline const ::xla::HloInputOutputAliasProto_AliasEntryProto& OutputInfoProto::alias_config() const {
  // @@protoc_insertion_point(field_get:xla.gpu.OutputInfoProto.alias_config)
  return _internal_alias_config();
}
inline void OutputInfoProto::unsafe_arena_set_allocated_alias_config(
    ::xla::HloInputOutputAliasProto_AliasEntryProto* alias_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alias_config_);
  }
  _impl_.alias_config_ = alias_config;
  if (alias_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.gpu.OutputInfoProto.alias_config)
}
inline ::xla::HloInputOutputAliasProto_AliasEntryProto* OutputInfoProto::release_alias_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xla::HloInputOutputAliasProto_AliasEntryProto* temp = _impl_.alias_config_;
  _impl_.alias_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::HloInputOutputAliasProto_AliasEntryProto* OutputInfoProto::unsafe_arena_release_alias_config() {
  // @@protoc_insertion_point(field_release:xla.gpu.OutputInfoProto.alias_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xla::HloInputOutputAliasProto_AliasEntryProto* temp = _impl_.alias_config_;
  _impl_.alias_config_ = nullptr;
  return temp;
}
inline ::xla::HloInputOutputAliasProto_AliasEntryProto* OutputInfoProto::_internal_mutable_alias_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.alias_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::HloInputOutputAliasProto_AliasEntryProto>(GetArenaForAllocation());
    _impl_.alias_config_ = p;
  }
  return _impl_.alias_config_;
}
inline ::xla::HloInputOutputAliasProto_AliasEntryProto* OutputInfoProto::mutable_alias_config() {
  ::xla::HloInputOutputAliasProto_AliasEntryProto* _msg = _internal_mutable_alias_config();
  // @@protoc_insertion_point(field_mutable:xla.gpu.OutputInfoProto.alias_config)
  return _msg;
}
inline void OutputInfoProto::set_allocated_alias_config(::xla::HloInputOutputAliasProto_AliasEntryProto* alias_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alias_config_);
  }
  if (alias_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alias_config));
    if (message_arena != submessage_arena) {
      alias_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alias_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.alias_config_ = alias_config;
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.OutputInfoProto.alias_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gpu
}  // namespace xla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2fgpu_5fexecutable_2eproto
