// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/pjrt/proto/pjrt_value_type.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fpjrt_2fproto_2fpjrt_5fvalue_5ftype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fpjrt_2fproto_2fpjrt_5fvalue_5ftype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fpjrt_2fproto_2fpjrt_5fvalue_5ftype_2eproto PROTOBUF_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2fpjrt_2fproto_2fpjrt_5fvalue_5ftype_2eproto {
  static const uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fpjrt_2fproto_2fpjrt_5fvalue_5ftype_2eproto;
namespace xla {
class PjRtValueTypeProto;
struct PjRtValueTypeProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern PjRtValueTypeProtoDefaultTypeInternal _PjRtValueTypeProto_default_instance_;
class PjRtValueTypeProto_IntVector;
struct PjRtValueTypeProto_IntVectorDefaultTypeInternal;
PROTOBUF_EXPORT extern PjRtValueTypeProto_IntVectorDefaultTypeInternal _PjRtValueTypeProto_IntVector_default_instance_;
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_EXPORT ::xla::PjRtValueTypeProto* Arena::CreateMaybeMessage<::xla::PjRtValueTypeProto>(Arena*);
template<> PROTOBUF_EXPORT ::xla::PjRtValueTypeProto_IntVector* Arena::CreateMaybeMessage<::xla::PjRtValueTypeProto_IntVector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {

// ===================================================================

class PROTOBUF_EXPORT PjRtValueTypeProto_IntVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.PjRtValueTypeProto.IntVector) */ {
 public:
  inline PjRtValueTypeProto_IntVector() : PjRtValueTypeProto_IntVector(nullptr) {}
  ~PjRtValueTypeProto_IntVector() override;
  explicit PROTOBUF_CONSTEXPR PjRtValueTypeProto_IntVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PjRtValueTypeProto_IntVector(const PjRtValueTypeProto_IntVector& from);
  PjRtValueTypeProto_IntVector(PjRtValueTypeProto_IntVector&& from) noexcept
    : PjRtValueTypeProto_IntVector() {
    *this = ::std::move(from);
  }

  inline PjRtValueTypeProto_IntVector& operator=(const PjRtValueTypeProto_IntVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline PjRtValueTypeProto_IntVector& operator=(PjRtValueTypeProto_IntVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PjRtValueTypeProto_IntVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const PjRtValueTypeProto_IntVector* internal_default_instance() {
    return reinterpret_cast<const PjRtValueTypeProto_IntVector*>(
               &_PjRtValueTypeProto_IntVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PjRtValueTypeProto_IntVector& a, PjRtValueTypeProto_IntVector& b) {
    a.Swap(&b);
  }
  inline void Swap(PjRtValueTypeProto_IntVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PjRtValueTypeProto_IntVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PjRtValueTypeProto_IntVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PjRtValueTypeProto_IntVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PjRtValueTypeProto_IntVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PjRtValueTypeProto_IntVector& from) {
    PjRtValueTypeProto_IntVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PjRtValueTypeProto_IntVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.PjRtValueTypeProto.IntVector";
  }
  protected:
  explicit PjRtValueTypeProto_IntVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int64 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  int64_t _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_values() const;
  void _internal_add_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_values();
  public:
  int64_t values(int index) const;
  void set_values(int index, int64_t value);
  void add_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:xla.PjRtValueTypeProto.IntVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > values_;
    mutable std::atomic<int> _values_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fpjrt_2fproto_2fpjrt_5fvalue_5ftype_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT PjRtValueTypeProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.PjRtValueTypeProto) */ {
 public:
  inline PjRtValueTypeProto() : PjRtValueTypeProto(nullptr) {}
  ~PjRtValueTypeProto() override;
  explicit PROTOBUF_CONSTEXPR PjRtValueTypeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PjRtValueTypeProto(const PjRtValueTypeProto& from);
  PjRtValueTypeProto(PjRtValueTypeProto&& from) noexcept
    : PjRtValueTypeProto() {
    *this = ::std::move(from);
  }

  inline PjRtValueTypeProto& operator=(const PjRtValueTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PjRtValueTypeProto& operator=(PjRtValueTypeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PjRtValueTypeProto& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 1,
    kBoolValue = 2,
    kIntValue = 3,
    kIntVector = 4,
    kFloatValue = 5,
    VALUE_NOT_SET = 0,
  };

  static inline const PjRtValueTypeProto* internal_default_instance() {
    return reinterpret_cast<const PjRtValueTypeProto*>(
               &_PjRtValueTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PjRtValueTypeProto& a, PjRtValueTypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PjRtValueTypeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PjRtValueTypeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PjRtValueTypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PjRtValueTypeProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PjRtValueTypeProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PjRtValueTypeProto& from) {
    PjRtValueTypeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PjRtValueTypeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.PjRtValueTypeProto";
  }
  protected:
  explicit PjRtValueTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PjRtValueTypeProto_IntVector IntVector;

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kBoolValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
    kIntVectorFieldNumber = 4,
    kFloatValueFieldNumber = 5,
  };
  // string string_value = 1;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bool bool_value = 2;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // int64 int_value = 3;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  int64_t int_value() const;
  void set_int_value(int64_t value);
  private:
  int64_t _internal_int_value() const;
  void _internal_set_int_value(int64_t value);
  public:

  // .xla.PjRtValueTypeProto.IntVector int_vector = 4;
  bool has_int_vector() const;
  private:
  bool _internal_has_int_vector() const;
  public:
  void clear_int_vector();
  const ::xla::PjRtValueTypeProto_IntVector& int_vector() const;
  PROTOBUF_NODISCARD ::xla::PjRtValueTypeProto_IntVector* release_int_vector();
  ::xla::PjRtValueTypeProto_IntVector* mutable_int_vector();
  void set_allocated_int_vector(::xla::PjRtValueTypeProto_IntVector* int_vector);
  private:
  const ::xla::PjRtValueTypeProto_IntVector& _internal_int_vector() const;
  ::xla::PjRtValueTypeProto_IntVector* _internal_mutable_int_vector();
  public:
  void unsafe_arena_set_allocated_int_vector(
      ::xla::PjRtValueTypeProto_IntVector* int_vector);
  ::xla::PjRtValueTypeProto_IntVector* unsafe_arena_release_int_vector();

  // float float_value = 5;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:xla.PjRtValueTypeProto)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_int_value();
  void set_has_int_vector();
  void set_has_float_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      bool bool_value_;
      int64_t int_value_;
      ::xla::PjRtValueTypeProto_IntVector* int_vector_;
      float float_value_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fpjrt_2fproto_2fpjrt_5fvalue_5ftype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PjRtValueTypeProto_IntVector

// repeated int64 values = 1;
inline int PjRtValueTypeProto_IntVector::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int PjRtValueTypeProto_IntVector::values_size() const {
  return _internal_values_size();
}
inline void PjRtValueTypeProto_IntVector::clear_values() {
  _impl_.values_.Clear();
}
inline int64_t PjRtValueTypeProto_IntVector::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline int64_t PjRtValueTypeProto_IntVector::values(int index) const {
  // @@protoc_insertion_point(field_get:xla.PjRtValueTypeProto.IntVector.values)
  return _internal_values(index);
}
inline void PjRtValueTypeProto_IntVector::set_values(int index, int64_t value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.PjRtValueTypeProto.IntVector.values)
}
inline void PjRtValueTypeProto_IntVector::_internal_add_values(int64_t value) {
  _impl_.values_.Add(value);
}
inline void PjRtValueTypeProto_IntVector::add_values(int64_t value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:xla.PjRtValueTypeProto.IntVector.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
PjRtValueTypeProto_IntVector::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
PjRtValueTypeProto_IntVector::values() const {
  // @@protoc_insertion_point(field_list:xla.PjRtValueTypeProto.IntVector.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
PjRtValueTypeProto_IntVector::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
PjRtValueTypeProto_IntVector::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:xla.PjRtValueTypeProto.IntVector.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// PjRtValueTypeProto

// string string_value = 1;
inline bool PjRtValueTypeProto::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool PjRtValueTypeProto::has_string_value() const {
  return _internal_has_string_value();
}
inline void PjRtValueTypeProto::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void PjRtValueTypeProto::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& PjRtValueTypeProto::string_value() const {
  // @@protoc_insertion_point(field_get:xla.PjRtValueTypeProto.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void PjRtValueTypeProto::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.PjRtValueTypeProto.string_value)
}
inline std::string* PjRtValueTypeProto::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:xla.PjRtValueTypeProto.string_value)
  return _s;
}
inline const std::string& PjRtValueTypeProto::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PjRtValueTypeProto::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* PjRtValueTypeProto::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* PjRtValueTypeProto::release_string_value() {
  // @@protoc_insertion_point(field_release:xla.PjRtValueTypeProto.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return _impl_.value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void PjRtValueTypeProto::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:xla.PjRtValueTypeProto.string_value)
}

// bool bool_value = 2;
inline bool PjRtValueTypeProto::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool PjRtValueTypeProto::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void PjRtValueTypeProto::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void PjRtValueTypeProto::clear_bool_value() {
  if (_internal_has_bool_value()) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool PjRtValueTypeProto::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void PjRtValueTypeProto::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}
inline bool PjRtValueTypeProto::bool_value() const {
  // @@protoc_insertion_point(field_get:xla.PjRtValueTypeProto.bool_value)
  return _internal_bool_value();
}
inline void PjRtValueTypeProto::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:xla.PjRtValueTypeProto.bool_value)
}

// int64 int_value = 3;
inline bool PjRtValueTypeProto::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool PjRtValueTypeProto::has_int_value() const {
  return _internal_has_int_value();
}
inline void PjRtValueTypeProto::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void PjRtValueTypeProto::clear_int_value() {
  if (_internal_has_int_value()) {
    _impl_.value_.int_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t PjRtValueTypeProto::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return _impl_.value_.int_value_;
  }
  return int64_t{0};
}
inline void PjRtValueTypeProto::_internal_set_int_value(int64_t value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
}
inline int64_t PjRtValueTypeProto::int_value() const {
  // @@protoc_insertion_point(field_get:xla.PjRtValueTypeProto.int_value)
  return _internal_int_value();
}
inline void PjRtValueTypeProto::set_int_value(int64_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:xla.PjRtValueTypeProto.int_value)
}

// .xla.PjRtValueTypeProto.IntVector int_vector = 4;
inline bool PjRtValueTypeProto::_internal_has_int_vector() const {
  return value_case() == kIntVector;
}
inline bool PjRtValueTypeProto::has_int_vector() const {
  return _internal_has_int_vector();
}
inline void PjRtValueTypeProto::set_has_int_vector() {
  _impl_._oneof_case_[0] = kIntVector;
}
inline void PjRtValueTypeProto::clear_int_vector() {
  if (_internal_has_int_vector()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.int_vector_;
    }
    clear_has_value();
  }
}
inline ::xla::PjRtValueTypeProto_IntVector* PjRtValueTypeProto::release_int_vector() {
  // @@protoc_insertion_point(field_release:xla.PjRtValueTypeProto.int_vector)
  if (_internal_has_int_vector()) {
    clear_has_value();
    ::xla::PjRtValueTypeProto_IntVector* temp = _impl_.value_.int_vector_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.int_vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xla::PjRtValueTypeProto_IntVector& PjRtValueTypeProto::_internal_int_vector() const {
  return _internal_has_int_vector()
      ? *_impl_.value_.int_vector_
      : reinterpret_cast< ::xla::PjRtValueTypeProto_IntVector&>(::xla::_PjRtValueTypeProto_IntVector_default_instance_);
}
inline const ::xla::PjRtValueTypeProto_IntVector& PjRtValueTypeProto::int_vector() const {
  // @@protoc_insertion_point(field_get:xla.PjRtValueTypeProto.int_vector)
  return _internal_int_vector();
}
inline ::xla::PjRtValueTypeProto_IntVector* PjRtValueTypeProto::unsafe_arena_release_int_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xla.PjRtValueTypeProto.int_vector)
  if (_internal_has_int_vector()) {
    clear_has_value();
    ::xla::PjRtValueTypeProto_IntVector* temp = _impl_.value_.int_vector_;
    _impl_.value_.int_vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PjRtValueTypeProto::unsafe_arena_set_allocated_int_vector(::xla::PjRtValueTypeProto_IntVector* int_vector) {
  clear_value();
  if (int_vector) {
    set_has_int_vector();
    _impl_.value_.int_vector_ = int_vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.PjRtValueTypeProto.int_vector)
}
inline ::xla::PjRtValueTypeProto_IntVector* PjRtValueTypeProto::_internal_mutable_int_vector() {
  if (!_internal_has_int_vector()) {
    clear_value();
    set_has_int_vector();
    _impl_.value_.int_vector_ = CreateMaybeMessage< ::xla::PjRtValueTypeProto_IntVector >(GetArenaForAllocation());
  }
  return _impl_.value_.int_vector_;
}
inline ::xla::PjRtValueTypeProto_IntVector* PjRtValueTypeProto::mutable_int_vector() {
  ::xla::PjRtValueTypeProto_IntVector* _msg = _internal_mutable_int_vector();
  // @@protoc_insertion_point(field_mutable:xla.PjRtValueTypeProto.int_vector)
  return _msg;
}

// float float_value = 5;
inline bool PjRtValueTypeProto::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline bool PjRtValueTypeProto::has_float_value() const {
  return _internal_has_float_value();
}
inline void PjRtValueTypeProto::set_has_float_value() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void PjRtValueTypeProto::clear_float_value() {
  if (_internal_has_float_value()) {
    _impl_.value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float PjRtValueTypeProto::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return _impl_.value_.float_value_;
  }
  return 0;
}
inline void PjRtValueTypeProto::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  _impl_.value_.float_value_ = value;
}
inline float PjRtValueTypeProto::float_value() const {
  // @@protoc_insertion_point(field_get:xla.PjRtValueTypeProto.float_value)
  return _internal_float_value();
}
inline void PjRtValueTypeProto::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:xla.PjRtValueTypeProto.float_value)
}

inline bool PjRtValueTypeProto::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void PjRtValueTypeProto::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline PjRtValueTypeProto::ValueCase PjRtValueTypeProto::value_case() const {
  return PjRtValueTypeProto::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fpjrt_2fproto_2fpjrt_5fvalue_5ftype_2eproto
