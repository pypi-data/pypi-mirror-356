#  -*- coding: utf-8 -*-
"""
Author: Rafael R. L. Benevides
"""

import pandas
import numpy

from spacekernel.typing import DatetimeLike

from typing import Any, Union, Optional, overload, Literal, Sequence



class Time:
    """
    Mission-designed Time object for Earth satellite applications.
    """

    # ---------- Class methods ----------
    @classmethod
    def range(
        cls,
        scale: str = "UTC",
        *,
        start: Optional[DatetimeLike] = None,
        end: Optional[DatetimeLike] = None,
        step: Optional[Union[float, str]] = None,
        n_points: Optional[int] = None
    ) -> "Time": ...

    @classmethod
    def now(cls) -> "Time": ...

    @classmethod
    def concatenate(
        cls,
        *args: DatetimeLike,
        scale: Optional[str] = None,
        sort: bool = False
    ) -> "Time": ...

    @classmethod
    def merge(
            cls,
            *args: DatetimeLike,
            scale: Optional[str] = None
    ) -> "Time": ...

    @classmethod
    def overlap(
            cls,
            time1: DatetimeLike,
            time2: DatetimeLike,
            assume_sorted: bool = True
    ) -> Optional["Time"]: ...

    # ---------- Constructor ----------
    def __init__(
        self,
        data: DatetimeLike,
        scale: str = "UTC",
        format: Optional[str] = None
    ) -> None: ...

    # ---------- Dunder methods ----------
    def __getitem__(self, item: Any) -> "Time": ...
    def __add__(self, other: Union[float, str, numpy.ndarray]) -> "Time": ...
    def __radd__(self, other: Union[float, str, numpy.ndarray]) -> "Time": ...
    def __sub__(self, other: Union["Time", float, str, numpy.ndarray]) -> Union[numpy.ndarray, "Time"]: ...
    def __isub__(self, other: Union["Time", float, str, numpy.ndarray]) -> Union[numpy.ndarray, "Time"]: ...
    def __len__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self, other: Any, op: int) -> numpy.ndarray: ...

    # ---------- Conversion methods ----------
    def to_astropy(self) -> 'astropy.time.Time': ...
    def to_pandas(self) -> pandas.DatetimeIndex: ...
    def to_scale(self, scale: Literal["TAI", "TT", "UTC", "UT1"]) -> "Time": ...
    def sorted(self) -> "Time": ...
    def argsort(self) -> numpy.ndarray: ...
    def insert(self, time: DatetimeLike) -> "Time": ...

    # ---------- Properties ----------
    @property
    def scale(self) -> str: ...
    @property
    def size(self) -> int: ...
    @property
    def steps(self) -> numpy.ndarray: ...

    # Time Scales
    @property
    def tai(self) -> "Time": ...
    @property
    def tt(self) -> "Time": ...
    @property
    def ut1(self) -> "Time": ...
    @property
    def utc(self) -> "Time": ...

    # Formats
    @property
    def jd12(self) -> numpy.ndarray: ...
    @property
    def jd(self) -> numpy.ndarray: ...
    @property
    def mjd(self) -> numpy.ndarray: ...
    @property
    def jyear(self) -> numpy.ndarray: ...
    @property
    def byear(self) -> numpy.ndarray: ...
    @property
    def dtf(self) -> numpy.ndarray: ...
    @property
    def datetime64(self) -> numpy.ndarray: ...
    @property
    def int64(self) -> numpy.ndarray: ...

    # Placeholders for future
    @property
    def unixtime(self) -> numpy.ndarray: ...
    @property
    def ptp(self) -> numpy.ndarray: ...

    # Scale deltas
    @property
    def ut1_utc(self) -> numpy.ndarray: ...
    @property
    def ut1_tai(self) -> numpy.ndarray: ...
    @property
    def tt_ut1(self) -> numpy.ndarray: ...
    @property
    def tai_utc(self) -> numpy.ndarray: ...