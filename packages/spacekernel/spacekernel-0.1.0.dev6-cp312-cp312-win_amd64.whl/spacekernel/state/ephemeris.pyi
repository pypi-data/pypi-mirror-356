#  -*- coding: utf-8 -*-
"""
Author: Rafael R. L. Benevides
"""

import numpy
from numpy import ndarray

from typing import Any, Iterator, Union

from numpy.typing import ArrayLike

from matplotlib.axes import Axes
from matplotlib.figure import Figure

from spacekernel.utils import Representable
from spacekernel.frames import Frame
from spacekernel.time import Time
from spacekernel.state import State, StateVector, COE, GeoState
from spacekernel.typing import DatetimeLike
from spacekernel.mathtools.ellipsoid import Ellipsoid


class Ephemeris(Representable):
    frame: Frame
    epoch: Time
    _mass: numpy.ndarray

    def __getitem__(self, item: Any) -> "Ephemeris | State": ...
    def __iter__(self) -> "Ephemeris": ...
    def __next__(self) -> State: ...

    def copy(self) -> "Ephemeris": ...
    def pairwise(self) -> Iterator[tuple[State, State]]: ...

    @property
    def size(self) -> int: ...
    @property
    def mass(self) -> numpy.ndarray: ...

    # Required protected methods
    def _get_header(self) -> str: ...
    def _get_body(self) -> str: ...
    def _getitem_integral(self, item: int) -> State: ...
    def _getitem_integral_slice(self, item: slice) -> "Ephemeris": ...
    def _getitem_selection(self, selection: numpy.ndarray) -> "Ephemeris": ...


class StateVectorEphemeris(Ephemeris):
    def __init__(
        self,
        epoch: DatetimeLike,
        r: ArrayLike,
        v: ArrayLike,
        frame: Union[Frame, str] = Frame.GCRF,
        mass: Union[float, ArrayLike] = float("nan")
    ) -> None: ...

    def copy(self) -> "StateVectorEphemeris": ...
    def transform_to(self, frame: Frame) -> "StateVectorEphemeris": ...
    def plot(
        self,
        units: str = 'op',
        show: bool = False,
        plot_mass: bool = True
    ) -> tuple[Figure, Iterator[Axes]]: ...

    def to_coe(
            self,
            GM: float = ...,
            Re: float = ...,
            frame: Union[Frame, str] = Frame.GCRF
    ) -> "COEEphemeris": ...
    def to_geostate(
            self,
            frame: Frame = ...,
            ell: "Ellipsoid" = ...
    ) -> "GeoStateEphemeris": ...

    @property
    def r(self) -> numpy.ndarray: ...
    @property
    def v(self) -> numpy.ndarray: ...
    @property
    def x(self) -> numpy.ndarray: ...

    def _get_header(self) -> str: ...
    def _get_body(self) -> str: ...
    def _getitem_integral(self, item: int) -> StateVector: ...
    def _getitem_integral_slice(self, item: slice) -> "StateVectorEphemeris": ...
    def _getitem_selection(self, selection: numpy.ndarray) -> "StateVectorEphemeris": ...


class COEEphemeris(Ephemeris):
    GM: float
    Re: float

    def __init__(
        self,
        epoch: DatetimeLike,
        frame: Union[Frame, str] = Frame.GCRF,
        GM: float = ...,
        Re: float = ...,
        mass: Union[float, ArrayLike] = float("nan"),
        **kwargs: ArrayLike
    ) -> None: ...

    def to_numpy(self) -> numpy.ndarray: ...
    def to_sv(self) -> StateVectorEphemeris: ...
    def copy(self) -> "COEEphemeris": ...
    def plot(
        self,
        units: str = 'op',
        show: bool = False,
        plot_mass: bool = True
    ) -> tuple[Figure, Iterator[Axes]]: ...

    def _getitem_integral(self, item: int) -> COE: ...
    def _getitem_integral_slice(self, item: slice) -> "COEEphemeris": ...
    def _getitem_selection(self, selection: numpy.ndarray) -> "COEEphemeris": ...

    # ---------- Orbital elements ----------
    @property
    def ecc(self) -> numpy.ndarray: ...
    @property
    def sma(self) -> numpy.ndarray: ...
    @property
    def inc(self) -> numpy.ndarray: ...
    @property
    def raa(self) -> numpy.ndarray: ...
    @property
    def arp(self) -> numpy.ndarray: ...
    @property
    def tra(self) -> numpy.ndarray: ...
    @property
    def slr(self) -> numpy.ndarray: ...

    # ---------- Derived quantities ----------
    @property
    def orp(self) -> numpy.ndarray: ...
    @property
    def mnm(self) -> numpy.ndarray: ...
    @property
    def mea(self) -> numpy.ndarray: ...
    @property
    def eca(self) -> numpy.ndarray: ...
    @property
    def pge(self) -> numpy.ndarray: ...
    @property
    def apg(self) -> numpy.ndarray: ...


class GeoStateEphemeris(Ephemeris):
    frame: Frame
    epoch: Time
    ell: Ellipsoid
    mass: ndarray

    def __init__(
        self,
        epoch: DatetimeLike,
        lon: float | ArrayLike = ...,
        lat: float | ArrayLike = ...,
        alt: float | ArrayLike = ...,
        lon_dot: float | ArrayLike | None = ...,
        lat_dot: float | ArrayLike | None = ...,
        alt_dot: float | ArrayLike | None = ...,
        frame: Frame | str = ...,
        ell: Ellipsoid = ...,
        mass: float | ArrayLike = ...
    ) -> None: ...

    def __getitem__(self, item: Any) -> GeoStateEphemeris | GeoState: ...
    def __iter__(self) -> Iterator[GeoState]: ...
    def __next__(self) -> GeoState: ...

    def to_sv(self) -> StateVectorEphemeris: ...
    def to_numpy(self) -> ndarray: ...
    def copy(self) -> GeoStateEphemeris: ...
    def plot(
        self,
        units: str = ...,
        show: bool = ...,
        plot_mass: bool = ...
    ) -> tuple[Figure, Iterator[Axes]]: ...

    @property
    def lon(self) -> ndarray: ...
    @property
    def lat(self) -> ndarray: ...
    @property
    def alt(self) -> ndarray: ...
    @property
    def lon_dot(self) -> ndarray: ...
    @property
    def lat_dot(self) -> ndarray: ...
    @property
    def alt_dot(self) -> ndarray: ...