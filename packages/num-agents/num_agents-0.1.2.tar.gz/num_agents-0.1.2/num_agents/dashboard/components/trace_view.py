"""
Composant de vue des traces pour le tableau de bord.

Ce module fournit des fonctions pour visualiser les journaux d'ex√©cution,
les √©v√©nements et les erreurs des agents avec des visualisations avanc√©es
et des fonctionnalit√©s d'exportation.
"""

from pathlib import Path
from typing import Optional, List, Dict, Any
import datetime
import random
import pandas as pd
import streamlit as st
import plotly.express as px

from num_agents.dashboard.utils.visualizations import (
    create_timeline, create_gantt_chart, render_plotly_chart
)
from num_agents.dashboard.utils.export import create_export_section
from num_agents.dashboard.components.render_events import render_events
from num_agents.dashboard.components.render_errors import render_errors

def get_available_agents(target_dir: Path) -> List[str]:
    """
    R√©cup√®re la liste des agents disponibles dans le r√©pertoire.
    (Impl√©mentation factice pour l'exemple)
    """
    # √Ä remplacer par une lecture r√©elle du dossier
    return [p.name for p in target_dir.iterdir() if p.is_dir()]

def render_execution_logs(target_dir: Path, agent_name: Optional[str] = None):
    """
    Affiche les journaux d'ex√©cution d'un agent avec des visualisations avanc√©es.

    Args:
        target_dir: R√©pertoire de l'agent ou du syst√®me
        agent_name: Nom de l'agent √† visualiser (pour les syst√®mes multi-agents)
    """
    st.subheader("Journaux d'ex√©cution")

    now = datetime.datetime.now()
    log_levels = ["INFO", "DEBUG", "WARNING", "ERROR"]
    log_components = ["Core", "LLM", "Memory", "Reasoning", "EventBus", "Scheduler"]

    # G√©n√©rer des donn√©es d'exemple plus riches
    logs = []
    for i in range(50):  # Augmenter le nombre d'entr√©es pour de meilleures visualisations
        timestamp = now - datetime.timedelta(minutes=i * random.randint(1, 5))
        level = random.choices(log_levels, weights=[0.6, 0.3, 0.08, 0.02])[0]
        component = random.choice(log_components)
        duration = random.uniform(0.1, 5.0) if random.random() > 0.7 else None

        if level == "INFO":
            msg_list = [
                "Traitement de la requ√™te utilisateur termin√©",
                "Mod√®le LLM appel√© avec succ√®s",
                "Croyance mise √† jour dans la m√©moire",
                "√âv√©nement publi√© sur le bus d'√©v√©nements",
                "T√¢che planifi√©e ex√©cut√©e"
            ]
        elif level == "DEBUG":
            msg_list = [
                "Entr√©e LLM: 'Quelle est la capitale de la France?'",
                "Sortie LLM: 'La capitale de la France est Paris.'",
                "Temps de traitement: 1.23s",
                "Contexte logique initialis√©",
                "N≈ìud de raisonnement activ√©"
            ]
        elif level == "WARNING":
            msg_list = [
                "Temps de r√©ponse LLM sup√©rieur au seuil",
                "Croyance contradictoire d√©tect√©e",
                "Tentative de reconnexion au service externe",
                "M√©moire tampon presque pleine",
                "T√¢che planifi√©e retard√©e"
            ]
        else:  # ERROR
            msg_list = [
                "√âchec de l'appel au mod√®le LLM",
                "Exception lors du traitement de la requ√™te",
                "√âchec de la mise √† jour de la m√©moire",
                "Erreur de publication d'√©v√©nement",
                "T√¢che planifi√©e √©chou√©e"
            ]

        logs.append({
            "timestamp": timestamp,
            "level": level,
            "component": component,
            "message": random.choice(msg_list),
            "duration": duration,
            "agent": agent_name or "main_agent"
        })

    logs.sort(key=lambda x: x["timestamp"], reverse=True)
    
    # Convertir en DataFrame pour faciliter la manipulation
    df_logs = pd.DataFrame(logs)
    
    # Cr√©er des onglets pour diff√©rentes vues
    tab1, tab2, tab3, tab4 = st.tabs(["Liste", "Chronologie", "Statistiques", "Exportation"])
    
    with tab1:
        # Filtres interactifs
        col1, col2 = st.columns(2)
        with col1:
            selected_levels = st.multiselect("Filtrer par niveau", log_levels, default=log_levels)
        with col2:
            selected_components = st.multiselect("Filtrer par composant", log_components, default=log_components)

        # Appliquer les filtres
        filtered = df_logs[
            df_logs["level"].isin(selected_levels) & 
            df_logs["component"].isin(selected_components)
        ]

        # Afficher le nombre d'entr√©es filtr√©es
        st.info(f"{len(filtered)} journaux affich√©s sur {len(df_logs)} au total")

        if not filtered.empty:
            # Affichage am√©lior√© avec des couleurs et des ic√¥nes
            for _, log in filtered.iterrows():
                color = {
                    "ERROR": "red",
                    "WARNING": "orange",
                    "INFO": "blue",
                    "DEBUG": "gray"
                }[log["level"]]
                
                icon = {
                    "ERROR": "‚ùå",
                    "WARNING": "‚ö†Ô∏è",
                    "INFO": "‚ÑπÔ∏è",
                    "DEBUG": "üîç"
                }[log["level"]]

                st.markdown(
                    f"<div style='padding:8px; margin-bottom:8px; border-left:3px solid {color}; background-color:rgba(0,0,0,0.03); border-radius:4px;'>"
                    f"<span style='color:{color}; font-weight:bold;'>{icon} [{log['level']}]</span> "
                    f"<span style='color:gray;'>{log['timestamp'].strftime('%H:%M:%S')}</span> "
                    f"<span style='color:purple;'>[{log['component']}]</span> "
                    f"{log['message']}</div>",
                    unsafe_allow_html=True
                )
        else:
            st.warning("Aucun journal ne correspond aux filtres s√©lectionn√©s.")
    
    with tab2:
        st.subheader("Chronologie des journaux")
        
        # Pr√©parer les donn√©es pour la chronologie
        timeline_events = []
        for _, log in df_logs.iterrows():
            event = {
                'timestamp': log['timestamp'],
                'event_type': log['level'],
                'description': f"[{log['component']}] {log['message']}"
            }
            timeline_events.append(event)
        
        # Cr√©er et afficher la chronologie
        timeline_fig = create_timeline(timeline_events, "Chronologie des journaux d'ex√©cution")
        render_plotly_chart(timeline_fig)
        
        # Cr√©er un diagramme de Gantt pour les op√©rations avec dur√©e
        st.subheader("Dur√©e des op√©rations")
        
        # Filtrer les logs avec dur√©e
        duration_logs = df_logs.dropna(subset=['duration'])
        
        if not duration_logs.empty:
            # Pr√©parer les donn√©es pour le diagramme de Gantt
            gantt_tasks = []
            
            for _, log in duration_logs.iterrows():
                # Calculer l'heure de fin en ajoutant la dur√©e
                start_time = log['timestamp']
                end_time = start_time + datetime.timedelta(seconds=log['duration'])
                
                task = {
                    'task': f"{log['component']}: {log['message'][:30]}{'...' if len(log['message']) > 30 else ''}",
                    'start': start_time,
                    'finish': end_time,
                    'resource': log['level']
                }
                gantt_tasks.append(task)
            
            # Cr√©er et afficher le diagramme de Gantt
            gantt_fig = create_gantt_chart(gantt_tasks, "Dur√©e des op√©rations")
            render_plotly_chart(gantt_fig)
        else:
            st.info("Aucune op√©ration avec dur√©e disponible.")
    
    with tab3:
        st.subheader("Statistiques des journaux")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribution par niveau
            level_counts = df_logs['level'].value_counts().reset_index()
            level_counts.columns = ['Niveau', 'Nombre']
            
            st.write("Distribution par niveau de journal")
            fig = px.pie(level_counts, values='Nombre', names='Niveau', hole=.3,
                        color='Niveau',
                        color_discrete_map={
                            'INFO': 'blue',
                            'DEBUG': 'gray',
                            'WARNING': 'orange',
                            'ERROR': 'red'
                        })
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Distribution par composant
            component_counts = df_logs['component'].value_counts().reset_index()
            component_counts.columns = ['Composant', 'Nombre']
            
            st.write("Distribution par composant")
            st.bar_chart(component_counts.set_index('Composant'))
        
        # Distribution temporelle
        st.write("Distribution temporelle des journaux")
        try:
            # Grouper par intervalle de 5 minutes
            df_logs['time_group'] = df_logs['timestamp'].dt.floor('5min')
            time_counts = df_logs.groupby(['time_group', 'level']).size().reset_index()
            time_counts.columns = ['Temps', 'Niveau', 'Nombre']
            
            # Cr√©er un graphique temporel avec couleurs par niveau
            fig = px.line(time_counts, x='Temps', y='Nombre', color='Niveau',
                        color_discrete_map={
                            'INFO': 'blue',
                            'DEBUG': 'gray',
                            'WARNING': 'orange',
                            'ERROR': 'red'
                        })
            st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.warning(f"Impossible de cr√©er la distribution temporelle: {str(e)}")
    
    with tab4:
        st.subheader("Exportation des journaux")
        
        # Ajouter des options d'exportation
        create_export_section(df_logs, "logs_export")
        
        # Option pour t√©l√©charger uniquement les erreurs
        st.subheader("Exporter uniquement les erreurs")
        errors_df = df_logs[df_logs['level'] == 'ERROR']
        if not errors_df.empty:
            create_export_section(errors_df, "errors_export")
        else:
            st.success("Aucune erreur √† exporter.")
    
    st.info("Note: Ces donn√©es sont des exemples. Dans une impl√©mentation compl√®te, elles seraient charg√©es dynamiquement √† partir des journaux de l'agent.")


def render_trace_view(target_dir: Path, is_system: bool = False):
    """
    Affiche la vue des traces dans le tableau de bord.

    Args:
        target_dir: R√©pertoire de l'agent ou du syst√®me √† visualiser
        is_system: Indique si la cible est un syst√®me multi-agents
    """
    st.header("Vue des Traces")

    selected_agent = None
    if is_system:
        agents = get_available_agents(target_dir)
        if agents:
            selected_agent = st.selectbox("S√©lectionner un agent", agents)
        else:
            st.warning("Aucun agent trouv√© dans le syst√®me.")
            return

    trace_type = st.selectbox("Type de traces", ["Journaux d'ex√©cution", "√âv√©nements", "Erreurs"])

    if trace_type == "Journaux d'ex√©cution":
        render_execution_logs(target_dir, selected_agent)
    elif trace_type == "√âv√©nements":
        render_events(target_dir, selected_agent)
    elif trace_type == "Erreurs":
        render_errors(target_dir, selected_agent)
