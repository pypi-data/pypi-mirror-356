"""
Utilitaires de style pour le tableau de bord N√ºm Agents.

Ce module contient des fonctions pour g√©rer les th√®mes et les styles
du tableau de bord Streamlit.
"""

import streamlit as st
from typing import Dict, Any, Optional

def set_page_config(title: str = "N√ºm Agents Dashboard", 
                   layout: str = "wide",
                   initial_sidebar_state: str = "expanded") -> None:
    """
    Configure les param√®tres de la page Streamlit.
    
    Args:
        title: Titre de la page
        layout: Disposition de la page ('wide' ou 'centered')
        initial_sidebar_state: √âtat initial de la barre lat√©rale ('expanded' ou 'collapsed')
    """
    st.set_page_config(
        page_title=title,
        page_icon="üß†",
        layout=layout,
        initial_sidebar_state=initial_sidebar_state
    )

def apply_custom_css() -> None:
    """
    Applique des styles CSS personnalis√©s √† l'application Streamlit.
    """
    # Styles pour am√©liorer l'apparence du tableau de bord
    custom_css = """
    <style>
        /* Styles g√©n√©raux */
        .main {
            background-color: #f8f9fa;
        }
        
        /* En-t√™tes */
        h1, h2, h3 {
            color: #1e3a8a;
        }
        
        /* Cartes */
        div[data-testid="stMetric"] {
            background-color: white;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        /* Graphiques */
        .stPlotlyChart {
            background-color: white;
            border-radius: 10px;
            padding: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        /* Tableaux */
        .stDataFrame {
            border-radius: 10px;
            overflow: hidden;
        }
        
        /* Onglets */
        .stTabs [data-baseweb="tab-list"] {
            gap: 8px;
        }
        
        .stTabs [data-baseweb="tab"] {
            background-color: #f1f5f9;
            border-radius: 4px 4px 0px 0px;
            padding: 10px 20px;
            border: none;
        }
        
        .stTabs [aria-selected="true"] {
            background-color: #3b82f6;
            color: white;
        }
        
        /* Boutons */
        .stButton > button {
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .stButton > button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        /* Barre lat√©rale */
        .css-1d391kg {
            background-color: #1e293b;
        }
        
        /* S√©parateurs */
        hr {
            margin: 20px 0;
            border: none;
            height: 1px;
            background-color: #e2e8f0;
        }
    </style>
    """
    
    # Appliquer les styles
    st.markdown(custom_css, unsafe_allow_html=True)

def create_header(title: str, subtitle: Optional[str] = None, icon: Optional[str] = None) -> None:
    """
    Cr√©e un en-t√™te pour une page ou une section.
    
    Args:
        title: Titre principal
        subtitle: Sous-titre (optionnel)
        icon: Ic√¥ne (emoji) √† afficher avant le titre (optionnel)
    """
    # Afficher l'ic√¥ne et le titre
    if icon:
        st.markdown(f"# {icon} {title}")
    else:
        st.markdown(f"# {title}")
    
    # Afficher le sous-titre
    if subtitle:
        st.markdown(f"*{subtitle}*")
    
    # Ajouter un s√©parateur
    st.markdown("---")

def create_footer() -> None:
    """
    Cr√©e un pied de page pour l'application.
    """
    st.markdown("---")
    st.markdown(
        """
        <div style="text-align: center; color: #64748b; padding: 10px;">
            <p>N√ºm Agents Dashboard | D√©velopp√© par Lionel TAGNE</p>
            <p>¬© 2025 Tous droits r√©serv√©s</p>
        </div>
        """,
        unsafe_allow_html=True
    )

def create_info_box(message: str, type_: str = "info") -> None:
    """
    Cr√©e une bo√Æte d'information avec un style personnalis√©.
    
    Args:
        message: Message √† afficher
        type_: Type de bo√Æte (info, success, warning, error)
    """
    if type_ == "info":
        st.info(message)
    elif type_ == "success":
        st.success(message)
    elif type_ == "warning":
        st.warning(message)
    elif type_ == "error":
        st.error(message)
    else:
        st.write(message)

def create_card(title: str, content: str, icon: Optional[str] = None) -> None:
    """
    Cr√©e une carte avec un titre et un contenu.
    
    Args:
        title: Titre de la carte
        content: Contenu de la carte
        icon: Ic√¥ne (emoji) √† afficher avant le titre (optionnel)
    """
    # Cr√©er la carte
    with st.container():
        # Afficher le titre avec l'ic√¥ne
        if icon:
            st.markdown(f"### {icon} {title}")
        else:
            st.markdown(f"### {title}")
        
        # Afficher le contenu
        st.markdown(content)
        
        # Ajouter un peu d'espace
        st.write("")

def create_tabs(tabs: Dict[str, Any]) -> None:
    """
    Cr√©e un ensemble d'onglets.
    
    Args:
        tabs: Dictionnaire avec les noms d'onglets comme cl√©s et les fonctions de rendu comme valeurs
    """
    if not tabs:
        st.warning("Aucun onglet d√©fini.")
        return
    
    # Cr√©er les onglets
    tab_objects = st.tabs(list(tabs.keys()))
    
    # Afficher le contenu de chaque onglet
    for i, (name, render_func) in enumerate(tabs.items()):
        with tab_objects[i]:
            render_func()

def create_sidebar_navigation(pages: Dict[str, Any]) -> str:
    """
    Cr√©e une navigation dans la barre lat√©rale.
    
    Args:
        pages: Dictionnaire avec les noms de pages comme cl√©s et les fonctions de rendu comme valeurs
        
    Returns:
        Nom de la page s√©lectionn√©e
    """
    if not pages:
        st.sidebar.warning("Aucune page d√©finie.")
        return ""
    
    # Ajouter un titre √† la barre lat√©rale
    st.sidebar.title("Navigation")
    
    # Cr√©er un s√©lecteur de page
    selected_page = st.sidebar.radio("", list(pages.keys()))
    
    # Ajouter un s√©parateur
    st.sidebar.markdown("---")
    
    return selected_page

def create_theme_selector() -> Dict[str, Any]:
    """
    Cr√©e un s√©lecteur de th√®me dans la barre lat√©rale.
    
    Returns:
        Dictionnaire contenant les param√®tres du th√®me s√©lectionn√©
    """
    # D√©finir les th√®mes disponibles
    themes = {
        "Clair": {
            "primary_color": "#3b82f6",
            "background_color": "#f8f9fa",
            "text_color": "#1e293b",
            "font": "sans-serif"
        },
        "Sombre": {
            "primary_color": "#60a5fa",
            "background_color": "#1e293b",
            "text_color": "#f8fafc",
            "font": "sans-serif"
        },
        "Neutre": {
            "primary_color": "#6b7280",
            "background_color": "#f3f4f6",
            "text_color": "#1f2937",
            "font": "sans-serif"
        }
    }
    
    # Ajouter un s√©lecteur de th√®me dans la barre lat√©rale
    st.sidebar.subheader("Th√®me")
    selected_theme = st.sidebar.selectbox("", list(themes.keys()))
    
    # Retourner les param√®tres du th√®me s√©lectionn√©
    return themes[selected_theme]
