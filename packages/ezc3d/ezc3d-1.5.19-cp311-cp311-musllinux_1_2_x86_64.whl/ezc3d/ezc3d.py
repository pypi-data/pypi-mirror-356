# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ezc3d
else:
    import _ezc3d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ezc3d.delete_SwigPyIterator

    def value(self):
        return _ezc3d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ezc3d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ezc3d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ezc3d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ezc3d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ezc3d.SwigPyIterator_copy(self)

    def next(self):
        return _ezc3d.SwigPyIterator_next(self)

    def __next__(self):
        return _ezc3d.SwigPyIterator___next__(self)

    def previous(self):
        return _ezc3d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ezc3d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ezc3d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ezc3d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ezc3d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ezc3d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ezc3d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ezc3d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ezc3d:
_ezc3d.SwigPyIterator_swigregister(SwigPyIterator)

def _get_points(c3d, points):
    return _ezc3d._get_points(c3d, points)

def _get_point_residuals(c3d, points):
    return _ezc3d._get_point_residuals(c3d, points)

def _get_point_camera_masks(c3d, points):
    return _ezc3d._get_point_camera_masks(c3d, points)

def _get_analogs(c3d, analogs):
    return _ezc3d._get_analogs(c3d, analogs)

def _get_rotations(c3d, rotations, rotationInfo):
    return _ezc3d._get_rotations(c3d, rotations, rotationInfo)

def helper_getPyArrayObject(input, type):
    return _ezc3d.helper_getPyArrayObject(input, type)

def _import_numpy_data(_self, pointsData, residualsData, cameraMasksData, analogData, rotationData):
    return _ezc3d._import_numpy_data(_self, pointsData, residualsData, cameraMasksData, analogData, rotationData)
class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _ezc3d.ios_base_erase_event
    imbue_event = _ezc3d.ios_base_imbue_event
    copyfmt_event = _ezc3d.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _ezc3d.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _ezc3d.ios_base_flags(self, *args)

    def setf(self, *args):
        return _ezc3d.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _ezc3d.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _ezc3d.ios_base_precision(self, *args)

    def width(self, *args):
        return _ezc3d.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _ezc3d.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _ezc3d.ios_base_imbue(self, __loc)

    def getloc(self):
        return _ezc3d.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _ezc3d.ios_base_xalloc()

    def iword(self, __ix):
        return _ezc3d.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _ezc3d.ios_base_pword(self, __ix)
    __swig_destroy__ = _ezc3d.delete_ios_base

# Register ios_base in _ezc3d:
_ezc3d.ios_base_swigregister(ios_base)
cvar = _ezc3d.cvar
ios_base.boolalpha = _ezc3d.cvar.ios_base_boolalpha
ios_base.dec = _ezc3d.cvar.ios_base_dec
ios_base.fixed = _ezc3d.cvar.ios_base_fixed
ios_base.hex = _ezc3d.cvar.ios_base_hex
ios_base.internal = _ezc3d.cvar.ios_base_internal
ios_base.left = _ezc3d.cvar.ios_base_left
ios_base.oct = _ezc3d.cvar.ios_base_oct
ios_base.right = _ezc3d.cvar.ios_base_right
ios_base.scientific = _ezc3d.cvar.ios_base_scientific
ios_base.showbase = _ezc3d.cvar.ios_base_showbase
ios_base.showpoint = _ezc3d.cvar.ios_base_showpoint
ios_base.showpos = _ezc3d.cvar.ios_base_showpos
ios_base.skipws = _ezc3d.cvar.ios_base_skipws
ios_base.unitbuf = _ezc3d.cvar.ios_base_unitbuf
ios_base.uppercase = _ezc3d.cvar.ios_base_uppercase
ios_base.adjustfield = _ezc3d.cvar.ios_base_adjustfield
ios_base.basefield = _ezc3d.cvar.ios_base_basefield
ios_base.floatfield = _ezc3d.cvar.ios_base_floatfield
ios_base.badbit = _ezc3d.cvar.ios_base_badbit
ios_base.eofbit = _ezc3d.cvar.ios_base_eofbit
ios_base.failbit = _ezc3d.cvar.ios_base_failbit
ios_base.goodbit = _ezc3d.cvar.ios_base_goodbit
ios_base.app = _ezc3d.cvar.ios_base_app
ios_base.ate = _ezc3d.cvar.ios_base_ate
ios_base.binary = _ezc3d.cvar.ios_base_binary
ios_base.ios_base_in = _ezc3d.cvar.ios_base_ios_base_in
ios_base.out = _ezc3d.cvar.ios_base_out
ios_base.trunc = _ezc3d.cvar.ios_base_trunc
ios_base.beg = _ezc3d.cvar.ios_base_beg
ios_base.cur = _ezc3d.cvar.ios_base_cur
ios_base.end = _ezc3d.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _ezc3d.ios_rdstate(self)

    def clear(self, *args):
        return _ezc3d.ios_clear(self, *args)

    def setstate(self, __state):
        return _ezc3d.ios_setstate(self, __state)

    def good(self):
        return _ezc3d.ios_good(self)

    def eof(self):
        return _ezc3d.ios_eof(self)

    def fail(self):
        return _ezc3d.ios_fail(self)

    def bad(self):
        return _ezc3d.ios_bad(self)

    def exceptions(self, *args):
        return _ezc3d.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _ezc3d.ios_swiginit(self, _ezc3d.new_ios(__sb))
    __swig_destroy__ = _ezc3d.delete_ios

    def tie(self, *args):
        return _ezc3d.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _ezc3d.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _ezc3d.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _ezc3d.ios_fill(self, *args)

    def imbue(self, __loc):
        return _ezc3d.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _ezc3d.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _ezc3d.ios_widen(self, __c)

# Register ios in _ezc3d:
_ezc3d.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _ezc3d.ostream_swiginit(self, _ezc3d.new_ostream(__sb))
    __swig_destroy__ = _ezc3d.delete_ostream

    def __lshift__(self, *args):
        return _ezc3d.ostream___lshift__(self, *args)

    def put(self, __c):
        return _ezc3d.ostream_put(self, __c)

    def write(self, __s, __n):
        return _ezc3d.ostream_write(self, __s, __n)

    def flush(self):
        return _ezc3d.ostream_flush(self)

    def tellp(self):
        return _ezc3d.ostream_tellp(self)

    def seekp(self, *args):
        return _ezc3d.ostream_seekp(self, *args)

# Register ostream in _ezc3d:
_ezc3d.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _ezc3d.istream_swiginit(self, _ezc3d.new_istream(__sb))
    __swig_destroy__ = _ezc3d.delete_istream

    def __rshift__(self, *args):
        return _ezc3d.istream___rshift__(self, *args)

    def gcount(self):
        return _ezc3d.istream_gcount(self)

    def get(self, *args):
        return _ezc3d.istream_get(self, *args)

    def getline(self, *args):
        return _ezc3d.istream_getline(self, *args)

    def ignore(self, *args):
        return _ezc3d.istream_ignore(self, *args)

    def peek(self):
        return _ezc3d.istream_peek(self)

    def read(self, __s, __n):
        return _ezc3d.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _ezc3d.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _ezc3d.istream_putback(self, __c)

    def unget(self):
        return _ezc3d.istream_unget(self)

    def sync(self):
        return _ezc3d.istream_sync(self)

    def tellg(self):
        return _ezc3d.istream_tellg(self)

    def seekg(self, *args):
        return _ezc3d.istream_seekg(self, *args)

# Register istream in _ezc3d:
_ezc3d.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _ezc3d.iostream_swiginit(self, _ezc3d.new_iostream(__sb))
    __swig_destroy__ = _ezc3d.delete_iostream

# Register iostream in _ezc3d:
_ezc3d.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _ezc3d.endl_cb_ptr
endl = _ezc3d.endl
ends_cb_ptr = _ezc3d.ends_cb_ptr
ends = _ezc3d.ends
flush_cb_ptr = _ezc3d.flush_cb_ptr
flush = _ezc3d.flush
class VecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecBool___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecBool___bool__(self)

    def __len__(self):
        return _ezc3d.VecBool___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecBool___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecBool___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecBool___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecBool___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecBool___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecBool___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecBool_pop(self)

    def append(self, x):
        return _ezc3d.VecBool_append(self, x)

    def empty(self):
        return _ezc3d.VecBool_empty(self)

    def size(self):
        return _ezc3d.VecBool_size(self)

    def swap(self, v):
        return _ezc3d.VecBool_swap(self, v)

    def begin(self):
        return _ezc3d.VecBool_begin(self)

    def end(self):
        return _ezc3d.VecBool_end(self)

    def rbegin(self):
        return _ezc3d.VecBool_rbegin(self)

    def rend(self):
        return _ezc3d.VecBool_rend(self)

    def clear(self):
        return _ezc3d.VecBool_clear(self)

    def get_allocator(self):
        return _ezc3d.VecBool_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecBool_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecBool_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecBool_swiginit(self, _ezc3d.new_VecBool(*args))

    def push_back(self, x):
        return _ezc3d.VecBool_push_back(self, x)

    def front(self):
        return _ezc3d.VecBool_front(self)

    def back(self):
        return _ezc3d.VecBool_back(self)

    def assign(self, n, x):
        return _ezc3d.VecBool_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecBool_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecBool_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecBool_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecBool_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecBool

# Register VecBool in _ezc3d:
_ezc3d.VecBool_swigregister(VecBool)
class VecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecInt___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecInt___bool__(self)

    def __len__(self):
        return _ezc3d.VecInt___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecInt___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecInt_pop(self)

    def append(self, x):
        return _ezc3d.VecInt_append(self, x)

    def empty(self):
        return _ezc3d.VecInt_empty(self)

    def size(self):
        return _ezc3d.VecInt_size(self)

    def swap(self, v):
        return _ezc3d.VecInt_swap(self, v)

    def begin(self):
        return _ezc3d.VecInt_begin(self)

    def end(self):
        return _ezc3d.VecInt_end(self)

    def rbegin(self):
        return _ezc3d.VecInt_rbegin(self)

    def rend(self):
        return _ezc3d.VecInt_rend(self)

    def clear(self):
        return _ezc3d.VecInt_clear(self)

    def get_allocator(self):
        return _ezc3d.VecInt_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecInt_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecInt_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecInt_swiginit(self, _ezc3d.new_VecInt(*args))

    def push_back(self, x):
        return _ezc3d.VecInt_push_back(self, x)

    def front(self):
        return _ezc3d.VecInt_front(self)

    def back(self):
        return _ezc3d.VecInt_back(self)

    def assign(self, n, x):
        return _ezc3d.VecInt_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecInt_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecInt_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecInt_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecInt_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecInt

# Register VecInt in _ezc3d:
_ezc3d.VecInt_swigregister(VecInt)
class VecUInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecUInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecUInt___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecUInt___bool__(self)

    def __len__(self):
        return _ezc3d.VecUInt___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecUInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecUInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecUInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecUInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecUInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecUInt___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecUInt_pop(self)

    def append(self, x):
        return _ezc3d.VecUInt_append(self, x)

    def empty(self):
        return _ezc3d.VecUInt_empty(self)

    def size(self):
        return _ezc3d.VecUInt_size(self)

    def swap(self, v):
        return _ezc3d.VecUInt_swap(self, v)

    def begin(self):
        return _ezc3d.VecUInt_begin(self)

    def end(self):
        return _ezc3d.VecUInt_end(self)

    def rbegin(self):
        return _ezc3d.VecUInt_rbegin(self)

    def rend(self):
        return _ezc3d.VecUInt_rend(self)

    def clear(self):
        return _ezc3d.VecUInt_clear(self)

    def get_allocator(self):
        return _ezc3d.VecUInt_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecUInt_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecUInt_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecUInt_swiginit(self, _ezc3d.new_VecUInt(*args))

    def push_back(self, x):
        return _ezc3d.VecUInt_push_back(self, x)

    def front(self):
        return _ezc3d.VecUInt_front(self)

    def back(self):
        return _ezc3d.VecUInt_back(self)

    def assign(self, n, x):
        return _ezc3d.VecUInt_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecUInt_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecUInt_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecUInt_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecUInt_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecUInt

# Register VecUInt in _ezc3d:
_ezc3d.VecUInt_swigregister(VecUInt)
class VecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecFloat___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecFloat___bool__(self)

    def __len__(self):
        return _ezc3d.VecFloat___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecFloat___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecFloat_pop(self)

    def append(self, x):
        return _ezc3d.VecFloat_append(self, x)

    def empty(self):
        return _ezc3d.VecFloat_empty(self)

    def size(self):
        return _ezc3d.VecFloat_size(self)

    def swap(self, v):
        return _ezc3d.VecFloat_swap(self, v)

    def begin(self):
        return _ezc3d.VecFloat_begin(self)

    def end(self):
        return _ezc3d.VecFloat_end(self)

    def rbegin(self):
        return _ezc3d.VecFloat_rbegin(self)

    def rend(self):
        return _ezc3d.VecFloat_rend(self)

    def clear(self):
        return _ezc3d.VecFloat_clear(self)

    def get_allocator(self):
        return _ezc3d.VecFloat_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecFloat_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecFloat_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecFloat_swiginit(self, _ezc3d.new_VecFloat(*args))

    def push_back(self, x):
        return _ezc3d.VecFloat_push_back(self, x)

    def front(self):
        return _ezc3d.VecFloat_front(self)

    def back(self):
        return _ezc3d.VecFloat_back(self)

    def assign(self, n, x):
        return _ezc3d.VecFloat_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecFloat_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecFloat_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecFloat_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecFloat_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecFloat

# Register VecFloat in _ezc3d:
_ezc3d.VecFloat_swigregister(VecFloat)
class VecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecDouble___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecDouble___bool__(self)

    def __len__(self):
        return _ezc3d.VecDouble___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecDouble___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecDouble_pop(self)

    def append(self, x):
        return _ezc3d.VecDouble_append(self, x)

    def empty(self):
        return _ezc3d.VecDouble_empty(self)

    def size(self):
        return _ezc3d.VecDouble_size(self)

    def swap(self, v):
        return _ezc3d.VecDouble_swap(self, v)

    def begin(self):
        return _ezc3d.VecDouble_begin(self)

    def end(self):
        return _ezc3d.VecDouble_end(self)

    def rbegin(self):
        return _ezc3d.VecDouble_rbegin(self)

    def rend(self):
        return _ezc3d.VecDouble_rend(self)

    def clear(self):
        return _ezc3d.VecDouble_clear(self)

    def get_allocator(self):
        return _ezc3d.VecDouble_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecDouble_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecDouble_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecDouble_swiginit(self, _ezc3d.new_VecDouble(*args))

    def push_back(self, x):
        return _ezc3d.VecDouble_push_back(self, x)

    def front(self):
        return _ezc3d.VecDouble_front(self)

    def back(self):
        return _ezc3d.VecDouble_back(self)

    def assign(self, n, x):
        return _ezc3d.VecDouble_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecDouble_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecDouble_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecDouble_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecDouble_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecDouble

# Register VecDouble in _ezc3d:
_ezc3d.VecDouble_swigregister(VecDouble)
class VecString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecString___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecString___bool__(self)

    def __len__(self):
        return _ezc3d.VecString___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecString___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecString_pop(self)

    def append(self, x):
        return _ezc3d.VecString_append(self, x)

    def empty(self):
        return _ezc3d.VecString_empty(self)

    def size(self):
        return _ezc3d.VecString_size(self)

    def swap(self, v):
        return _ezc3d.VecString_swap(self, v)

    def begin(self):
        return _ezc3d.VecString_begin(self)

    def end(self):
        return _ezc3d.VecString_end(self)

    def rbegin(self):
        return _ezc3d.VecString_rbegin(self)

    def rend(self):
        return _ezc3d.VecString_rend(self)

    def clear(self):
        return _ezc3d.VecString_clear(self)

    def get_allocator(self):
        return _ezc3d.VecString_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecString_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecString_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecString_swiginit(self, _ezc3d.new_VecString(*args))

    def push_back(self, x):
        return _ezc3d.VecString_push_back(self, x)

    def front(self):
        return _ezc3d.VecString_front(self)

    def back(self):
        return _ezc3d.VecString_back(self)

    def assign(self, n, x):
        return _ezc3d.VecString_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecString_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecString_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecString_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecString_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecString

# Register VecString in _ezc3d:
_ezc3d.VecString_swigregister(VecString)
class VecGroups(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecGroups_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecGroups___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecGroups___bool__(self)

    def __len__(self):
        return _ezc3d.VecGroups___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecGroups___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecGroups___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecGroups___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecGroups___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecGroups___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecGroups___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecGroups_pop(self)

    def append(self, x):
        return _ezc3d.VecGroups_append(self, x)

    def empty(self):
        return _ezc3d.VecGroups_empty(self)

    def size(self):
        return _ezc3d.VecGroups_size(self)

    def swap(self, v):
        return _ezc3d.VecGroups_swap(self, v)

    def begin(self):
        return _ezc3d.VecGroups_begin(self)

    def end(self):
        return _ezc3d.VecGroups_end(self)

    def rbegin(self):
        return _ezc3d.VecGroups_rbegin(self)

    def rend(self):
        return _ezc3d.VecGroups_rend(self)

    def clear(self):
        return _ezc3d.VecGroups_clear(self)

    def get_allocator(self):
        return _ezc3d.VecGroups_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecGroups_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecGroups_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecGroups_swiginit(self, _ezc3d.new_VecGroups(*args))

    def push_back(self, x):
        return _ezc3d.VecGroups_push_back(self, x)

    def front(self):
        return _ezc3d.VecGroups_front(self)

    def back(self):
        return _ezc3d.VecGroups_back(self)

    def assign(self, n, x):
        return _ezc3d.VecGroups_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecGroups_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecGroups_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecGroups_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecGroups_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecGroups

# Register VecGroups in _ezc3d:
_ezc3d.VecGroups_swigregister(VecGroups)
class VecParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecParameters_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecParameters___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecParameters___bool__(self)

    def __len__(self):
        return _ezc3d.VecParameters___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecParameters___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecParameters___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecParameters___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecParameters___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecParameters___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecParameters___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecParameters_pop(self)

    def append(self, x):
        return _ezc3d.VecParameters_append(self, x)

    def empty(self):
        return _ezc3d.VecParameters_empty(self)

    def size(self):
        return _ezc3d.VecParameters_size(self)

    def swap(self, v):
        return _ezc3d.VecParameters_swap(self, v)

    def begin(self):
        return _ezc3d.VecParameters_begin(self)

    def end(self):
        return _ezc3d.VecParameters_end(self)

    def rbegin(self):
        return _ezc3d.VecParameters_rbegin(self)

    def rend(self):
        return _ezc3d.VecParameters_rend(self)

    def clear(self):
        return _ezc3d.VecParameters_clear(self)

    def get_allocator(self):
        return _ezc3d.VecParameters_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecParameters_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecParameters_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecParameters_swiginit(self, _ezc3d.new_VecParameters(*args))

    def push_back(self, x):
        return _ezc3d.VecParameters_push_back(self, x)

    def front(self):
        return _ezc3d.VecParameters_front(self)

    def back(self):
        return _ezc3d.VecParameters_back(self)

    def assign(self, n, x):
        return _ezc3d.VecParameters_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecParameters_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecParameters_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecParameters_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecParameters_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecParameters

# Register VecParameters in _ezc3d:
_ezc3d.VecParameters_swigregister(VecParameters)
class VecFrames(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecFrames_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecFrames___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecFrames___bool__(self)

    def __len__(self):
        return _ezc3d.VecFrames___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecFrames___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecFrames___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecFrames___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecFrames___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecFrames___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecFrames___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecFrames_pop(self)

    def append(self, x):
        return _ezc3d.VecFrames_append(self, x)

    def empty(self):
        return _ezc3d.VecFrames_empty(self)

    def size(self):
        return _ezc3d.VecFrames_size(self)

    def swap(self, v):
        return _ezc3d.VecFrames_swap(self, v)

    def begin(self):
        return _ezc3d.VecFrames_begin(self)

    def end(self):
        return _ezc3d.VecFrames_end(self)

    def rbegin(self):
        return _ezc3d.VecFrames_rbegin(self)

    def rend(self):
        return _ezc3d.VecFrames_rend(self)

    def clear(self):
        return _ezc3d.VecFrames_clear(self)

    def get_allocator(self):
        return _ezc3d.VecFrames_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecFrames_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecFrames_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecFrames_swiginit(self, _ezc3d.new_VecFrames(*args))

    def push_back(self, x):
        return _ezc3d.VecFrames_push_back(self, x)

    def front(self):
        return _ezc3d.VecFrames_front(self)

    def back(self):
        return _ezc3d.VecFrames_back(self)

    def assign(self, n, x):
        return _ezc3d.VecFrames_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecFrames_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecFrames_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecFrames_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecFrames_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecFrames

# Register VecFrames in _ezc3d:
_ezc3d.VecFrames_swigregister(VecFrames)
class VecPoints(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecPoints_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecPoints___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecPoints___bool__(self)

    def __len__(self):
        return _ezc3d.VecPoints___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecPoints___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecPoints___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecPoints___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecPoints___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecPoints___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecPoints___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecPoints_pop(self)

    def append(self, x):
        return _ezc3d.VecPoints_append(self, x)

    def empty(self):
        return _ezc3d.VecPoints_empty(self)

    def size(self):
        return _ezc3d.VecPoints_size(self)

    def swap(self, v):
        return _ezc3d.VecPoints_swap(self, v)

    def begin(self):
        return _ezc3d.VecPoints_begin(self)

    def end(self):
        return _ezc3d.VecPoints_end(self)

    def rbegin(self):
        return _ezc3d.VecPoints_rbegin(self)

    def rend(self):
        return _ezc3d.VecPoints_rend(self)

    def clear(self):
        return _ezc3d.VecPoints_clear(self)

    def get_allocator(self):
        return _ezc3d.VecPoints_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecPoints_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecPoints_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecPoints_swiginit(self, _ezc3d.new_VecPoints(*args))

    def push_back(self, x):
        return _ezc3d.VecPoints_push_back(self, x)

    def front(self):
        return _ezc3d.VecPoints_front(self)

    def back(self):
        return _ezc3d.VecPoints_back(self)

    def assign(self, n, x):
        return _ezc3d.VecPoints_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecPoints_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecPoints_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecPoints_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecPoints_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecPoints

# Register VecPoints in _ezc3d:
_ezc3d.VecPoints_swigregister(VecPoints)
class VecAnalogSubFrames(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecAnalogSubFrames_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecAnalogSubFrames___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecAnalogSubFrames___bool__(self)

    def __len__(self):
        return _ezc3d.VecAnalogSubFrames___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecAnalogSubFrames___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecAnalogSubFrames___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecAnalogSubFrames___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecAnalogSubFrames___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecAnalogSubFrames___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecAnalogSubFrames___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecAnalogSubFrames_pop(self)

    def append(self, x):
        return _ezc3d.VecAnalogSubFrames_append(self, x)

    def empty(self):
        return _ezc3d.VecAnalogSubFrames_empty(self)

    def size(self):
        return _ezc3d.VecAnalogSubFrames_size(self)

    def swap(self, v):
        return _ezc3d.VecAnalogSubFrames_swap(self, v)

    def begin(self):
        return _ezc3d.VecAnalogSubFrames_begin(self)

    def end(self):
        return _ezc3d.VecAnalogSubFrames_end(self)

    def rbegin(self):
        return _ezc3d.VecAnalogSubFrames_rbegin(self)

    def rend(self):
        return _ezc3d.VecAnalogSubFrames_rend(self)

    def clear(self):
        return _ezc3d.VecAnalogSubFrames_clear(self)

    def get_allocator(self):
        return _ezc3d.VecAnalogSubFrames_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecAnalogSubFrames_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecAnalogSubFrames_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecAnalogSubFrames_swiginit(self, _ezc3d.new_VecAnalogSubFrames(*args))

    def push_back(self, x):
        return _ezc3d.VecAnalogSubFrames_push_back(self, x)

    def front(self):
        return _ezc3d.VecAnalogSubFrames_front(self)

    def back(self):
        return _ezc3d.VecAnalogSubFrames_back(self)

    def assign(self, n, x):
        return _ezc3d.VecAnalogSubFrames_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecAnalogSubFrames_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecAnalogSubFrames_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecAnalogSubFrames_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecAnalogSubFrames_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecAnalogSubFrames

# Register VecAnalogSubFrames in _ezc3d:
_ezc3d.VecAnalogSubFrames_swigregister(VecAnalogSubFrames)
class VecAnalogChannels(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecAnalogChannels_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecAnalogChannels___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecAnalogChannels___bool__(self)

    def __len__(self):
        return _ezc3d.VecAnalogChannels___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecAnalogChannels___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecAnalogChannels___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecAnalogChannels___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecAnalogChannels___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecAnalogChannels___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecAnalogChannels___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecAnalogChannels_pop(self)

    def append(self, x):
        return _ezc3d.VecAnalogChannels_append(self, x)

    def empty(self):
        return _ezc3d.VecAnalogChannels_empty(self)

    def size(self):
        return _ezc3d.VecAnalogChannels_size(self)

    def swap(self, v):
        return _ezc3d.VecAnalogChannels_swap(self, v)

    def begin(self):
        return _ezc3d.VecAnalogChannels_begin(self)

    def end(self):
        return _ezc3d.VecAnalogChannels_end(self)

    def rbegin(self):
        return _ezc3d.VecAnalogChannels_rbegin(self)

    def rend(self):
        return _ezc3d.VecAnalogChannels_rend(self)

    def clear(self):
        return _ezc3d.VecAnalogChannels_clear(self)

    def get_allocator(self):
        return _ezc3d.VecAnalogChannels_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecAnalogChannels_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecAnalogChannels_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecAnalogChannels_swiginit(self, _ezc3d.new_VecAnalogChannels(*args))

    def push_back(self, x):
        return _ezc3d.VecAnalogChannels_push_back(self, x)

    def front(self):
        return _ezc3d.VecAnalogChannels_front(self)

    def back(self):
        return _ezc3d.VecAnalogChannels_back(self)

    def assign(self, n, x):
        return _ezc3d.VecAnalogChannels_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecAnalogChannels_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecAnalogChannels_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecAnalogChannels_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecAnalogChannels_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecAnalogChannels

# Register VecAnalogChannels in _ezc3d:
_ezc3d.VecAnalogChannels_swigregister(VecAnalogChannels)
class VecRotationSubFrames(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecRotationSubFrames_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecRotationSubFrames___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecRotationSubFrames___bool__(self)

    def __len__(self):
        return _ezc3d.VecRotationSubFrames___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecRotationSubFrames___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecRotationSubFrames___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecRotationSubFrames___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecRotationSubFrames___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecRotationSubFrames___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecRotationSubFrames___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecRotationSubFrames_pop(self)

    def append(self, x):
        return _ezc3d.VecRotationSubFrames_append(self, x)

    def empty(self):
        return _ezc3d.VecRotationSubFrames_empty(self)

    def size(self):
        return _ezc3d.VecRotationSubFrames_size(self)

    def swap(self, v):
        return _ezc3d.VecRotationSubFrames_swap(self, v)

    def begin(self):
        return _ezc3d.VecRotationSubFrames_begin(self)

    def end(self):
        return _ezc3d.VecRotationSubFrames_end(self)

    def rbegin(self):
        return _ezc3d.VecRotationSubFrames_rbegin(self)

    def rend(self):
        return _ezc3d.VecRotationSubFrames_rend(self)

    def clear(self):
        return _ezc3d.VecRotationSubFrames_clear(self)

    def get_allocator(self):
        return _ezc3d.VecRotationSubFrames_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecRotationSubFrames_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecRotationSubFrames_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecRotationSubFrames_swiginit(self, _ezc3d.new_VecRotationSubFrames(*args))

    def push_back(self, x):
        return _ezc3d.VecRotationSubFrames_push_back(self, x)

    def front(self):
        return _ezc3d.VecRotationSubFrames_front(self)

    def back(self):
        return _ezc3d.VecRotationSubFrames_back(self)

    def assign(self, n, x):
        return _ezc3d.VecRotationSubFrames_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecRotationSubFrames_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecRotationSubFrames_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecRotationSubFrames_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecRotationSubFrames_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecRotationSubFrames

# Register VecRotationSubFrames in _ezc3d:
_ezc3d.VecRotationSubFrames_swigregister(VecRotationSubFrames)
class VecRotations(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecRotations_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecRotations___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecRotations___bool__(self)

    def __len__(self):
        return _ezc3d.VecRotations___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecRotations___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecRotations___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecRotations___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecRotations___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecRotations___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecRotations___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecRotations_pop(self)

    def append(self, x):
        return _ezc3d.VecRotations_append(self, x)

    def empty(self):
        return _ezc3d.VecRotations_empty(self)

    def size(self):
        return _ezc3d.VecRotations_size(self)

    def swap(self, v):
        return _ezc3d.VecRotations_swap(self, v)

    def begin(self):
        return _ezc3d.VecRotations_begin(self)

    def end(self):
        return _ezc3d.VecRotations_end(self)

    def rbegin(self):
        return _ezc3d.VecRotations_rbegin(self)

    def rend(self):
        return _ezc3d.VecRotations_rend(self)

    def clear(self):
        return _ezc3d.VecRotations_clear(self)

    def get_allocator(self):
        return _ezc3d.VecRotations_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecRotations_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecRotations_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecRotations_swiginit(self, _ezc3d.new_VecRotations(*args))

    def push_back(self, x):
        return _ezc3d.VecRotations_push_back(self, x)

    def front(self):
        return _ezc3d.VecRotations_front(self)

    def back(self):
        return _ezc3d.VecRotations_back(self)

    def assign(self, n, x):
        return _ezc3d.VecRotations_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecRotations_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecRotations_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecRotations_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecRotations_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecRotations

# Register VecRotations in _ezc3d:
_ezc3d.VecRotations_swigregister(VecRotations)
EZC3D_VERSION = _ezc3d.EZC3D_VERSION
EZC3D_CONTACT = _ezc3d.EZC3D_CONTACT
CHAR = _ezc3d.CHAR
BYTE = _ezc3d.BYTE
INT = _ezc3d.INT
WORD = _ezc3d.WORD
FLOAT = _ezc3d.FLOAT
NO_DATA_TYPE = _ezc3d.NO_DATA_TYPE
INTEL = _ezc3d.INTEL
DEC = _ezc3d.DEC
MIPS = _ezc3d.MIPS
NO_PROCESSOR_TYPE = _ezc3d.NO_PROCESSOR_TYPE
DEFAULT = _ezc3d.DEFAULT
NEXUS = _ezc3d.NEXUS

def removeTrailingSpaces(str):
    return _ezc3d.removeTrailingSpaces(str)

def toUpper(str):
    return _ezc3d.toUpper(str)
class c3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.c3d_swiginit(self, _ezc3d.new_c3d(*args))

    def console_print(self):
        return _ezc3d.c3d_console_print(self)

    def write(self, *args):
        return _ezc3d.c3d_write(self, *args)

    def parametrizedWrite(self, *args):
        return _ezc3d.c3d_parametrizedWrite(self, *args)

    def readInt(self, *args):
        return _ezc3d.c3d_readInt(self, *args)

    def readUint(self, *args):
        return _ezc3d.c3d_readUint(self, *args)

    def readFloat(self, *args):
        return _ezc3d.c3d_readFloat(self, *args)

    def readString(self, *args):
        return _ezc3d.c3d_readString(self, *args)

    def readParam(self, *args):
        return _ezc3d.c3d_readParam(self, *args)

    @staticmethod
    def moveCursorToANewBlock(file):
        return _ezc3d.c3d_moveCursorToANewBlock(file)

    def header(self):
        return _ezc3d.c3d_header(self)

    def parameters(self):
        return _ezc3d.c3d_parameters(self)

    def data(self):
        return _ezc3d.c3d_data(self)

    def pointNames(self):
        return _ezc3d.c3d_pointNames(self)

    def pointScales(self):
        return _ezc3d.c3d_pointScales(self)

    def pointIdx(self, pointName):
        return _ezc3d.c3d_pointIdx(self, pointName)

    def channelNames(self):
        return _ezc3d.c3d_channelNames(self)

    def channelScales(self):
        return _ezc3d.c3d_channelScales(self)

    def channelOffsets(self):
        return _ezc3d.c3d_channelOffsets(self)

    def channelIdx(self, channelName):
        return _ezc3d.c3d_channelIdx(self, channelName)

    def setFirstFrame(self, firstFrame):
        return _ezc3d.c3d_setFirstFrame(self, firstFrame)

    def setGroupMetadata(self, groupName, description, isLocked):
        return _ezc3d.c3d_setGroupMetadata(self, groupName, description, isLocked)

    def parameter(self, groupName, parameter):
        return _ezc3d.c3d_parameter(self, groupName, parameter)

    def remove(self, *args):
        return _ezc3d.c3d_remove(self, *args)

    def lockGroup(self, groupName):
        return _ezc3d.c3d_lockGroup(self, groupName)

    def unlockGroup(self, groupName):
        return _ezc3d.c3d_unlockGroup(self, groupName)

    def frame(self, *args):
        return _ezc3d.c3d_frame(self, *args)

    def frames(self, *args):
        return _ezc3d.c3d_frames(self, *args)

    def point(self, *args):
        return _ezc3d.c3d_point(self, *args)

    def analog(self, *args):
        return _ezc3d.c3d_analog(self, *args)

    def import_numpy_data(self, pointsData, residualsData, cameraMasksData, analogData, rotationsData):
        return _ezc3d.c3d_import_numpy_data(self, pointsData, residualsData, cameraMasksData, analogData, rotationsData)

    def get_points(self, *args):
        return _ezc3d.c3d_get_points(self, *args)

    def get_point_residuals(self, *args):
        return _ezc3d.c3d_get_point_residuals(self, *args)

    def get_point_camera_masks(self):
        return _ezc3d.c3d_get_point_camera_masks(self)

    def get_analogs(self, *args):
        return _ezc3d.c3d_get_analogs(self, *args)

    def get_rotations(self, *args):
        return _ezc3d.c3d_get_rotations(self, *args)
    __swig_destroy__ = _ezc3d.delete_c3d

# Register c3d in _ezc3d:
_ezc3d.c3d_swigregister(c3d)
class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Matrix_swiginit(self, _ezc3d.new_Matrix(*args))

    def console_print(self):
        return _ezc3d.Matrix_console_print(self)

    def sum(self):
        return _ezc3d.Matrix_sum(self)

    def setZeros(self):
        return _ezc3d.Matrix_setZeros(self)

    def setOnes(self):
        return _ezc3d.Matrix_setOnes(self)

    def setIdentity(self):
        return _ezc3d.Matrix_setIdentity(self)

    def size(self):
        return _ezc3d.Matrix_size(self)

    def nbRows(self):
        return _ezc3d.Matrix_nbRows(self)

    def nbCols(self):
        return _ezc3d.Matrix_nbCols(self)

    def resize(self, nbRows, nbCols):
        return _ezc3d.Matrix_resize(self, nbRows, nbCols)

    def __call__(self, row, col):
        return _ezc3d.Matrix___call__(self, row, col)

    def T(self):
        return _ezc3d.Matrix_T(self)

    def __add__(self, *args):
        return _ezc3d.Matrix___add__(self, *args)

    def __iadd__(self, *args):
        return _ezc3d.Matrix___iadd__(self, *args)

    def __sub__(self, *args):
        return _ezc3d.Matrix___sub__(self, *args)

    def __isub__(self, *args):
        return _ezc3d.Matrix___isub__(self, *args)

    def __imul__(self, scalar):
        return _ezc3d.Matrix___imul__(self, scalar)

    def __mul__(self, *args):
        return _ezc3d.Matrix___mul__(self, *args)

    def __truediv__(self, *args):
        return _ezc3d.Matrix___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _ezc3d.Matrix___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def to_array(self):
        return _ezc3d.Matrix_to_array(self)
    __swig_destroy__ = _ezc3d.delete_Matrix

# Register Matrix in _ezc3d:
_ezc3d.Matrix_swigregister(Matrix)
class Matrix33(Matrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Matrix33_swiginit(self, _ezc3d.new_Matrix33(*args))

    def size(self):
        return _ezc3d.Matrix33_size(self)

    def nbRows(self):
        return _ezc3d.Matrix33_nbRows(self)

    def nbCols(self):
        return _ezc3d.Matrix33_nbCols(self)

    def resize(self, arg2, arg3):
        return _ezc3d.Matrix33_resize(self, arg2, arg3)

    def __mul__(self, *args):
        return _ezc3d.Matrix33___mul__(self, *args)
    __swig_destroy__ = _ezc3d.delete_Matrix33

# Register Matrix33 in _ezc3d:
_ezc3d.Matrix33_swigregister(Matrix33)
class Matrix44(Matrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Matrix44_swiginit(self, _ezc3d.new_Matrix44(*args))

    def size(self):
        return _ezc3d.Matrix44_size(self)

    def nbRows(self):
        return _ezc3d.Matrix44_nbRows(self)

    def nbCols(self):
        return _ezc3d.Matrix44_nbCols(self)

    def resize(self, arg2, arg3):
        return _ezc3d.Matrix44_resize(self, arg2, arg3)

    def set(self, elem00, elem01, elem02, elem03, elem10, elem11, elem12, elem13, elem20, elem21, elem22, elem23, elem30, elem31, elem32, elem33):
        return _ezc3d.Matrix44_set(self, elem00, elem01, elem02, elem03, elem10, elem11, elem12, elem13, elem20, elem21, elem22, elem23, elem30, elem31, elem32, elem33)

    def __mul__(self, *args):
        return _ezc3d.Matrix44___mul__(self, *args)
    __swig_destroy__ = _ezc3d.delete_Matrix44

# Register Matrix44 in _ezc3d:
_ezc3d.Matrix44_swigregister(Matrix44)
class Matrix66(Matrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Matrix66_swiginit(self, _ezc3d.new_Matrix66(*args))

    def size(self):
        return _ezc3d.Matrix66_size(self)

    def nbRows(self):
        return _ezc3d.Matrix66_nbRows(self)

    def nbCols(self):
        return _ezc3d.Matrix66_nbCols(self)

    def resize(self, arg2, arg3):
        return _ezc3d.Matrix66_resize(self, arg2, arg3)

    def __mul__(self, other):
        return _ezc3d.Matrix66___mul__(self, other)
    __swig_destroy__ = _ezc3d.delete_Matrix66

# Register Matrix66 in _ezc3d:
_ezc3d.Matrix66_swigregister(Matrix66)
class Vector3d(Matrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Vector3d_swiginit(self, _ezc3d.new_Vector3d(*args))

    def console_print(self):
        return _ezc3d.Vector3d_console_print(self)

    def resize(self, arg2, arg3):
        return _ezc3d.Vector3d_resize(self, arg2, arg3)

    def set(self, x, y, z):
        return _ezc3d.Vector3d_set(self, x, y, z)

    def x(self, *args):
        return _ezc3d.Vector3d_x(self, *args)

    def y(self, *args):
        return _ezc3d.Vector3d_y(self, *args)

    def z(self, *args):
        return _ezc3d.Vector3d_z(self, *args)

    def isValid(self):
        return _ezc3d.Vector3d_isValid(self)

    def __call__(self, row):
        return _ezc3d.Vector3d___call__(self, row)

    def dot(self, other):
        return _ezc3d.Vector3d_dot(self, other)

    def cross(self, other):
        return _ezc3d.Vector3d_cross(self, other)

    def norm(self):
        return _ezc3d.Vector3d_norm(self)

    def normalize(self):
        return _ezc3d.Vector3d_normalize(self)
    __swig_destroy__ = _ezc3d.delete_Vector3d

# Register Vector3d in _ezc3d:
_ezc3d.Vector3d_swigregister(Vector3d)
class Vector6d(Matrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Vector6d_swiginit(self, _ezc3d.new_Vector6d(*args))

    def console_print(self):
        return _ezc3d.Vector6d_console_print(self)

    def resize(self, arg2, arg3):
        return _ezc3d.Vector6d_resize(self, arg2, arg3)

    def __call__(self, row):
        return _ezc3d.Vector6d___call__(self, row)
    __swig_destroy__ = _ezc3d.delete_Vector6d

# Register Vector6d in _ezc3d:
_ezc3d.Vector6d_swigregister(Vector6d)
class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Header_swiginit(self, _ezc3d.new_Header(*args))

    def console_print(self):
        return _ezc3d.Header_console_print(self)

    def write(self, f, dataStartPositionToFill, forceZeroBasedOnFrameCount=False):
        return _ezc3d.Header_write(self, f, dataStartPositionToFill, forceZeroBasedOnFrameCount)

    def read(self, c3d, file):
        return _ezc3d.Header_read(self, c3d, file)

    def nbOfZerosBeforeHeader(self):
        return _ezc3d.Header_nbOfZerosBeforeHeader(self)

    def parametersAddress(self):
        return _ezc3d.Header_parametersAddress(self)

    def checksum(self):
        return _ezc3d.Header_checksum(self)

    def nb3dPoints(self, *args):
        return _ezc3d.Header_nb3dPoints(self, *args)

    def nbAnalogs(self, *args):
        return _ezc3d.Header_nbAnalogs(self, *args)

    def nbAnalogsMeasurement(self):
        return _ezc3d.Header_nbAnalogsMeasurement(self)

    def hasRotationalData(self, *args):
        return _ezc3d.Header_hasRotationalData(self, *args)

    def nbFrames(self):
        return _ezc3d.Header_nbFrames(self)

    def firstFrame(self, *args):
        return _ezc3d.Header_firstFrame(self, *args)

    def lastFrame(self, *args):
        return _ezc3d.Header_lastFrame(self, *args)

    def nbMaxInterpGap(self):
        return _ezc3d.Header_nbMaxInterpGap(self)

    def scaleFactor(self):
        return _ezc3d.Header_scaleFactor(self)

    def dataStart(self):
        return _ezc3d.Header_dataStart(self)

    def nbAnalogByFrame(self, *args):
        return _ezc3d.Header_nbAnalogByFrame(self, *args)

    def frameRate(self, *args):
        return _ezc3d.Header_frameRate(self, *args)

    def emptyBlock1(self):
        return _ezc3d.Header_emptyBlock1(self)

    def emptyBlock2(self):
        return _ezc3d.Header_emptyBlock2(self)

    def emptyBlock3(self):
        return _ezc3d.Header_emptyBlock3(self)

    def emptyBlock4(self):
        return _ezc3d.Header_emptyBlock4(self)

    def keyLabelPresent(self):
        return _ezc3d.Header_keyLabelPresent(self)

    def firstBlockKeyLabel(self):
        return _ezc3d.Header_firstBlockKeyLabel(self)

    def fourCharPresent(self):
        return _ezc3d.Header_fourCharPresent(self)

    def nbEvents(self):
        return _ezc3d.Header_nbEvents(self)

    def eventsTime(self, *args):
        return _ezc3d.Header_eventsTime(self, *args)

    def eventsDisplay(self, *args):
        return _ezc3d.Header_eventsDisplay(self, *args)

    def eventsLabel(self, *args):
        return _ezc3d.Header_eventsLabel(self, *args)
    __swig_destroy__ = _ezc3d.delete_Header

# Register Header in _ezc3d:
_ezc3d.Header_swigregister(Header)
class Parameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Parameters_swiginit(self, _ezc3d.new_Parameters(*args))

    @staticmethod
    def isMandatory(*args):
        return _ezc3d.Parameters_isMandatory(*args)

    def console_print(self):
        return _ezc3d.Parameters_console_print(self)

    def write(self, *args):
        return _ezc3d.Parameters_write(self, *args)

    def parametersStart(self):
        return _ezc3d.Parameters_parametersStart(self)

    def checksum(self):
        return _ezc3d.Parameters_checksum(self)

    def nbParamBlock(self):
        return _ezc3d.Parameters_nbParamBlock(self)

    def processorType(self):
        return _ezc3d.Parameters_processorType(self)

    def nbGroups(self):
        return _ezc3d.Parameters_nbGroups(self)

    def isGroup(self, groupName):
        return _ezc3d.Parameters_isGroup(self, groupName)

    def groupIdx(self, groupName):
        return _ezc3d.Parameters_groupIdx(self, groupName)

    def group(self, *args):
        return _ezc3d.Parameters_group(self, *args)

    def remove(self, *args):
        return _ezc3d.Parameters_remove(self, *args)

    def groups(self):
        return _ezc3d.Parameters_groups(self)
    __swig_destroy__ = _ezc3d.delete_Parameters

# Register Parameters in _ezc3d:
_ezc3d.Parameters_swigregister(Parameters)
class Group(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Group_swiginit(self, _ezc3d.new_Group(*args))

    def console_print(self):
        return _ezc3d.Group_console_print(self)

    def write(self, f, groupIdx, dataStartPositionToFill):
        return _ezc3d.Group_write(self, f, groupIdx, dataStartPositionToFill)

    def read(self, c3d, params, file, nbCharInName):
        return _ezc3d.Group_read(self, c3d, params, file, nbCharInName)

    def isEmpty(self):
        return _ezc3d.Group_isEmpty(self)

    def name(self, *args):
        return _ezc3d.Group_name(self, *args)

    def description(self, *args):
        return _ezc3d.Group_description(self, *args)

    def isLocked(self):
        return _ezc3d.Group_isLocked(self)

    def lock(self):
        return _ezc3d.Group_lock(self)

    def unlock(self):
        return _ezc3d.Group_unlock(self)

    def nbParameters(self):
        return _ezc3d.Group_nbParameters(self)

    def isParameter(self, parameterName):
        return _ezc3d.Group_isParameter(self, parameterName)

    def parameterIdx(self, parameterName):
        return _ezc3d.Group_parameterIdx(self, parameterName)

    def parameter(self, *args):
        return _ezc3d.Group_parameter(self, *args)

    def remove(self, *args):
        return _ezc3d.Group_remove(self, *args)

    def parameters(self):
        return _ezc3d.Group_parameters(self)
    __swig_destroy__ = _ezc3d.delete_Group

# Register Group in _ezc3d:
_ezc3d.Group_swigregister(Group)
class Parameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Parameter_swiginit(self, _ezc3d.new_Parameter(*args))

    def console_print(self):
        return _ezc3d.Parameter_console_print(self)

    def write(self, f, groupIdx, dataStartPositionToFill, dataStartType):
        return _ezc3d.Parameter_write(self, f, groupIdx, dataStartPositionToFill, dataStartType)

    def read(self, c3d, params, file, nbCharInName):
        return _ezc3d.Parameter_read(self, c3d, params, file, nbCharInName)

    def name(self, *args):
        return _ezc3d.Parameter_name(self, *args)

    def description(self, *args):
        return _ezc3d.Parameter_description(self, *args)

    def isLocked(self):
        return _ezc3d.Parameter_isLocked(self)

    def lock(self):
        return _ezc3d.Parameter_lock(self)

    def unlock(self):
        return _ezc3d.Parameter_unlock(self)

    def dimension(self):
        return _ezc3d.Parameter_dimension(self)

    def isDimensionConsistent(self, dataSize, dimension):
        return _ezc3d.Parameter_isDimensionConsistent(self, dataSize, dimension)

    def type(self):
        return _ezc3d.Parameter_type(self)

    def valuesAsByte(self):
        return _ezc3d.Parameter_valuesAsByte(self)

    def valuesAsInt(self):
        return _ezc3d.Parameter_valuesAsInt(self)

    def valuesConvertedAsInt(self):
        return _ezc3d.Parameter_valuesConvertedAsInt(self)

    def valuesAsDouble(self):
        return _ezc3d.Parameter_valuesAsDouble(self)

    def valuesConvertedAsDouble(self):
        return _ezc3d.Parameter_valuesConvertedAsDouble(self)

    def valuesAsString(self):
        return _ezc3d.Parameter_valuesAsString(self)

    def set(self, *args):
        return _ezc3d.Parameter_set(self, *args)
    __swig_destroy__ = _ezc3d.delete_Parameter

# Register Parameter in _ezc3d:
_ezc3d.Parameter_swigregister(Parameter)
class Data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Data_swiginit(self, _ezc3d.new_Data(*args))

    def console_print(self):
        return _ezc3d.Data_console_print(self)

    def write(self, header, f, pointScaleFactor, analogScaleFactors, dataStartInfoToFill):
        return _ezc3d.Data_write(self, header, f, pointScaleFactor, analogScaleFactors, dataStartInfoToFill)

    def nbFrames(self):
        return _ezc3d.Data_nbFrames(self)

    def frame(self, *args):
        return _ezc3d.Data_frame(self, *args)

    def frames(self):
        return _ezc3d.Data_frames(self)
    __swig_destroy__ = _ezc3d.delete_Data

# Register Data in _ezc3d:
_ezc3d.Data_swigregister(Data)
class Frame(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ezc3d.Frame_swiginit(self, _ezc3d.new_Frame())

    def console_print(self):
        return _ezc3d.Frame_console_print(self)

    def write(self, f, pointScaleFactor, analogScaleFactors, dataTypeToWrite):
        return _ezc3d.Frame_write(self, f, pointScaleFactor, analogScaleFactors, dataTypeToWrite)

    def points(self, *args):
        return _ezc3d.Frame_points(self, *args)

    def analogs(self, *args):
        return _ezc3d.Frame_analogs(self, *args)

    def rotations(self, *args):
        return _ezc3d.Frame_rotations(self, *args)

    def add(self, *args):
        return _ezc3d.Frame_add(self, *args)

    def isEmpty(self):
        return _ezc3d.Frame_isEmpty(self)
    __swig_destroy__ = _ezc3d.delete_Frame

# Register Frame in _ezc3d:
_ezc3d.Frame_swigregister(Frame)
class Points(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Points_swiginit(self, _ezc3d.new_Points(*args))

    def console_print(self):
        return _ezc3d.Points_console_print(self)

    def write(self, f, scaleFactor):
        return _ezc3d.Points_write(self, f, scaleFactor)

    def nbPoints(self):
        return _ezc3d.Points_nbPoints(self)

    def point(self, *args):
        return _ezc3d.Points_point(self, *args)

    def points(self):
        return _ezc3d.Points_points(self)

    def isEmpty(self):
        return _ezc3d.Points_isEmpty(self)
    __swig_destroy__ = _ezc3d.delete_Points

# Register Points in _ezc3d:
_ezc3d.Points_swigregister(Points)
class Point(Vector3d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Point_swiginit(self, _ezc3d.new_Point(*args))

    def console_print(self):
        return _ezc3d.Point_console_print(self)

    def write(self, f, scaleFactor):
        return _ezc3d.Point_write(self, f, scaleFactor)

    def set(self, *args):
        return _ezc3d.Point_set(self, *args)

    def x(self, *args):
        return _ezc3d.Point_x(self, *args)

    def y(self, *args):
        return _ezc3d.Point_y(self, *args)

    def z(self, *args):
        return _ezc3d.Point_z(self, *args)

    def residual(self, *args):
        return _ezc3d.Point_residual(self, *args)

    def cameraMask(self, *args):
        return _ezc3d.Point_cameraMask(self, *args)

    def isEmpty(self):
        return _ezc3d.Point_isEmpty(self)
    __swig_destroy__ = _ezc3d.delete_Point

# Register Point in _ezc3d:
_ezc3d.Point_swigregister(Point)
class Analogs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Analogs_swiginit(self, _ezc3d.new_Analogs(*args))

    def console_print(self):
        return _ezc3d.Analogs_console_print(self)

    def write(self, f, scaleFactors):
        return _ezc3d.Analogs_write(self, f, scaleFactors)

    def nbSubframes(self, *args):
        return _ezc3d.Analogs_nbSubframes(self, *args)

    def subframe(self, *args):
        return _ezc3d.Analogs_subframe(self, *args)

    def subframes(self):
        return _ezc3d.Analogs_subframes(self)

    def isEmpty(self):
        return _ezc3d.Analogs_isEmpty(self)
    __swig_destroy__ = _ezc3d.delete_Analogs

# Register Analogs in _ezc3d:
_ezc3d.Analogs_swigregister(Analogs)
class AnalogsSubframe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.AnalogsSubframe_swiginit(self, _ezc3d.new_AnalogsSubframe(*args))

    def console_print(self):
        return _ezc3d.AnalogsSubframe_console_print(self)

    def write(self, f, scaleFactors):
        return _ezc3d.AnalogsSubframe_write(self, f, scaleFactors)

    def nbChannels(self, *args):
        return _ezc3d.AnalogsSubframe_nbChannels(self, *args)

    def channel(self, *args):
        return _ezc3d.AnalogsSubframe_channel(self, *args)

    def channels(self):
        return _ezc3d.AnalogsSubframe_channels(self)

    def isEmpty(self):
        return _ezc3d.AnalogsSubframe_isEmpty(self)
    __swig_destroy__ = _ezc3d.delete_AnalogsSubframe

# Register AnalogsSubframe in _ezc3d:
_ezc3d.AnalogsSubframe_swigregister(AnalogsSubframe)
class Channel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Channel_swiginit(self, _ezc3d.new_Channel(*args))

    def console_print(self):
        return _ezc3d.Channel_console_print(self)

    def write(self, f, scaleFactor):
        return _ezc3d.Channel_write(self, f, scaleFactor)

    def data(self, *args):
        return _ezc3d.Channel_data(self, *args)

    def isEmpty(self):
        return _ezc3d.Channel_isEmpty(self)
    __swig_destroy__ = _ezc3d.delete_Channel

# Register Channel in _ezc3d:
_ezc3d.Channel_swigregister(Channel)
class Rotations(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Rotations_swiginit(self, _ezc3d.new_Rotations(*args))

    def console_print(self):
        return _ezc3d.Rotations_console_print(self)

    def write(self, f):
        return _ezc3d.Rotations_write(self, f)

    def nbSubframes(self, *args):
        return _ezc3d.Rotations_nbSubframes(self, *args)

    def subframe(self, *args):
        return _ezc3d.Rotations_subframe(self, *args)

    def subframes(self):
        return _ezc3d.Rotations_subframes(self)

    def isEmpty(self):
        return _ezc3d.Rotations_isEmpty(self)
    __swig_destroy__ = _ezc3d.delete_Rotations

# Register Rotations in _ezc3d:
_ezc3d.Rotations_swigregister(Rotations)
class RotationsSubframe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.RotationsSubframe_swiginit(self, _ezc3d.new_RotationsSubframe(*args))

    def console_print(self):
        return _ezc3d.RotationsSubframe_console_print(self)

    def write(self, f):
        return _ezc3d.RotationsSubframe_write(self, f)

    def nbRotations(self, *args):
        return _ezc3d.RotationsSubframe_nbRotations(self, *args)

    def rotation(self, *args):
        return _ezc3d.RotationsSubframe_rotation(self, *args)

    def rotations(self):
        return _ezc3d.RotationsSubframe_rotations(self)

    def isEmpty(self):
        return _ezc3d.RotationsSubframe_isEmpty(self)
    __swig_destroy__ = _ezc3d.delete_RotationsSubframe

# Register RotationsSubframe in _ezc3d:
_ezc3d.RotationsSubframe_swigregister(RotationsSubframe)
class Rotation(Matrix44):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.Rotation_swiginit(self, _ezc3d.new_Rotation(*args))

    def console_print(self):
        return _ezc3d.Rotation_console_print(self)

    def write(self, f):
        return _ezc3d.Rotation_write(self, f)

    def set(self, *args):
        return _ezc3d.Rotation_set(self, *args)

    def reliability(self, *args):
        return _ezc3d.Rotation_reliability(self, *args)

    def isValid(self):
        return _ezc3d.Rotation_isValid(self)

    def isEmpty(self):
        return _ezc3d.Rotation_isEmpty(self)
    __swig_destroy__ = _ezc3d.delete_Rotation

# Register Rotation in _ezc3d:
_ezc3d.Rotation_swigregister(Rotation)
class RotationsInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c3d):
        _ezc3d.RotationsInfo_swiginit(self, _ezc3d.new_RotationsInfo(c3d))

    def hasGroup(self):
        return _ezc3d.RotationsInfo_hasGroup(self)

    def dataStart(self):
        return _ezc3d.RotationsInfo_dataStart(self)

    def used(self):
        return _ezc3d.RotationsInfo_used(self)

    def ratio(self):
        return _ezc3d.RotationsInfo_ratio(self)

    def processorType(self):
        return _ezc3d.RotationsInfo_processorType(self)
    __swig_destroy__ = _ezc3d.delete_RotationsInfo

# Register RotationsInfo in _ezc3d:
_ezc3d.RotationsInfo_swigregister(RotationsInfo)
class VecPlatforms(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecPlatforms_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecPlatforms___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecPlatforms___bool__(self)

    def __len__(self):
        return _ezc3d.VecPlatforms___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecPlatforms___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecPlatforms___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecPlatforms___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecPlatforms___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecPlatforms___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecPlatforms___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecPlatforms_pop(self)

    def append(self, x):
        return _ezc3d.VecPlatforms_append(self, x)

    def empty(self):
        return _ezc3d.VecPlatforms_empty(self)

    def size(self):
        return _ezc3d.VecPlatforms_size(self)

    def swap(self, v):
        return _ezc3d.VecPlatforms_swap(self, v)

    def begin(self):
        return _ezc3d.VecPlatforms_begin(self)

    def end(self):
        return _ezc3d.VecPlatforms_end(self)

    def rbegin(self):
        return _ezc3d.VecPlatforms_rbegin(self)

    def rend(self):
        return _ezc3d.VecPlatforms_rend(self)

    def clear(self):
        return _ezc3d.VecPlatforms_clear(self)

    def get_allocator(self):
        return _ezc3d.VecPlatforms_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecPlatforms_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecPlatforms_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecPlatforms_swiginit(self, _ezc3d.new_VecPlatforms(*args))

    def push_back(self, x):
        return _ezc3d.VecPlatforms_push_back(self, x)

    def front(self):
        return _ezc3d.VecPlatforms_front(self)

    def back(self):
        return _ezc3d.VecPlatforms_back(self)

    def assign(self, n, x):
        return _ezc3d.VecPlatforms_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecPlatforms_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecPlatforms_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecPlatforms_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecPlatforms_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecPlatforms

# Register VecPlatforms in _ezc3d:
_ezc3d.VecPlatforms_swigregister(VecPlatforms)
class VecVector3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecVector3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecVector3d___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecVector3d___bool__(self)

    def __len__(self):
        return _ezc3d.VecVector3d___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecVector3d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecVector3d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecVector3d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecVector3d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecVector3d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecVector3d___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecVector3d_pop(self)

    def append(self, x):
        return _ezc3d.VecVector3d_append(self, x)

    def empty(self):
        return _ezc3d.VecVector3d_empty(self)

    def size(self):
        return _ezc3d.VecVector3d_size(self)

    def swap(self, v):
        return _ezc3d.VecVector3d_swap(self, v)

    def begin(self):
        return _ezc3d.VecVector3d_begin(self)

    def end(self):
        return _ezc3d.VecVector3d_end(self)

    def rbegin(self):
        return _ezc3d.VecVector3d_rbegin(self)

    def rend(self):
        return _ezc3d.VecVector3d_rend(self)

    def clear(self):
        return _ezc3d.VecVector3d_clear(self)

    def get_allocator(self):
        return _ezc3d.VecVector3d_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecVector3d_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecVector3d_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecVector3d_swiginit(self, _ezc3d.new_VecVector3d(*args))

    def push_back(self, x):
        return _ezc3d.VecVector3d_push_back(self, x)

    def front(self):
        return _ezc3d.VecVector3d_front(self)

    def back(self):
        return _ezc3d.VecVector3d_back(self)

    def assign(self, n, x):
        return _ezc3d.VecVector3d_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecVector3d_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecVector3d_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecVector3d_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecVector3d_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecVector3d

# Register VecVector3d in _ezc3d:
_ezc3d.VecVector3d_swigregister(VecVector3d)
class VecVector6d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ezc3d.VecVector6d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ezc3d.VecVector6d___nonzero__(self)

    def __bool__(self):
        return _ezc3d.VecVector6d___bool__(self)

    def __len__(self):
        return _ezc3d.VecVector6d___len__(self)

    def __getslice__(self, i, j):
        return _ezc3d.VecVector6d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ezc3d.VecVector6d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ezc3d.VecVector6d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ezc3d.VecVector6d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ezc3d.VecVector6d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ezc3d.VecVector6d___setitem__(self, *args)

    def pop(self):
        return _ezc3d.VecVector6d_pop(self)

    def append(self, x):
        return _ezc3d.VecVector6d_append(self, x)

    def empty(self):
        return _ezc3d.VecVector6d_empty(self)

    def size(self):
        return _ezc3d.VecVector6d_size(self)

    def swap(self, v):
        return _ezc3d.VecVector6d_swap(self, v)

    def begin(self):
        return _ezc3d.VecVector6d_begin(self)

    def end(self):
        return _ezc3d.VecVector6d_end(self)

    def rbegin(self):
        return _ezc3d.VecVector6d_rbegin(self)

    def rend(self):
        return _ezc3d.VecVector6d_rend(self)

    def clear(self):
        return _ezc3d.VecVector6d_clear(self)

    def get_allocator(self):
        return _ezc3d.VecVector6d_get_allocator(self)

    def pop_back(self):
        return _ezc3d.VecVector6d_pop_back(self)

    def erase(self, *args):
        return _ezc3d.VecVector6d_erase(self, *args)

    def __init__(self, *args):
        _ezc3d.VecVector6d_swiginit(self, _ezc3d.new_VecVector6d(*args))

    def push_back(self, x):
        return _ezc3d.VecVector6d_push_back(self, x)

    def front(self):
        return _ezc3d.VecVector6d_front(self)

    def back(self):
        return _ezc3d.VecVector6d_back(self)

    def assign(self, n, x):
        return _ezc3d.VecVector6d_assign(self, n, x)

    def resize(self, *args):
        return _ezc3d.VecVector6d_resize(self, *args)

    def insert(self, *args):
        return _ezc3d.VecVector6d_insert(self, *args)

    def reserve(self, n):
        return _ezc3d.VecVector6d_reserve(self, n)

    def capacity(self):
        return _ezc3d.VecVector6d_capacity(self)
    __swig_destroy__ = _ezc3d.delete_VecVector6d

# Register VecVector6d in _ezc3d:
_ezc3d.VecVector6d_swigregister(VecVector6d)
class ForcePlatform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ezc3d.ForcePlatform_swiginit(self, _ezc3d.new_ForcePlatform(*args))

    def forceUnit(self):
        return _ezc3d.ForcePlatform_forceUnit(self)

    def momentUnit(self):
        return _ezc3d.ForcePlatform_momentUnit(self)

    def positionUnit(self):
        return _ezc3d.ForcePlatform_positionUnit(self)

    def nbFrames(self):
        return _ezc3d.ForcePlatform_nbFrames(self)

    def type(self):
        return _ezc3d.ForcePlatform_type(self)

    def calMatrix(self):
        return _ezc3d.ForcePlatform_calMatrix(self)

    def corners(self):
        return _ezc3d.ForcePlatform_corners(self)

    def meanCorners(self):
        return _ezc3d.ForcePlatform_meanCorners(self)

    def origin(self):
        return _ezc3d.ForcePlatform_origin(self)

    def forces(self):
        return _ezc3d.ForcePlatform_forces(self)

    def moments(self):
        return _ezc3d.ForcePlatform_moments(self)

    def CoP(self):
        return _ezc3d.ForcePlatform_CoP(self)

    def Tz(self):
        return _ezc3d.ForcePlatform_Tz(self)
    __swig_destroy__ = _ezc3d.delete_ForcePlatform

# Register ForcePlatform in _ezc3d:
_ezc3d.ForcePlatform_swigregister(ForcePlatform)
class ForcePlatforms(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c3d):
        _ezc3d.ForcePlatforms_swiginit(self, _ezc3d.new_ForcePlatforms(c3d))

    def forcePlatforms(self):
        return _ezc3d.ForcePlatforms_forcePlatforms(self)

    def forcePlatform(self, idx):
        return _ezc3d.ForcePlatforms_forcePlatform(self, idx)
    __swig_destroy__ = _ezc3d.delete_ForcePlatforms

# Register ForcePlatforms in _ezc3d:
_ezc3d.ForcePlatforms_swigregister(ForcePlatforms)

