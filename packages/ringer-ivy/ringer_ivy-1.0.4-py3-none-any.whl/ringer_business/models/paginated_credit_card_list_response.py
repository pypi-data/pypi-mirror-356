# coding: utf-8

"""
    Ringer Business API - Credit Card Management

    This API provides endpoints for managing credit card payment methods associated with a customer account. It allows developers to: - List existing credit cards. - Add a new credit card. - Retrieve details of a specific credit card. - Update information for an existing credit card. - Delete a credit card. - Verify a newly added credit card.  Proper security and PCI compliance considerations are paramount when handling credit card data. These endpoints are designed to interact with a secure payment processing backend. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from ringer_business.models.credit_card_response import CreditCardResponse
from ringer_business.models.link import Link
from typing import Optional, Set
from typing_extensions import Self

class PaginatedCreditCardListResponse(BaseModel):
    """
    A paginated list of credit cards associated with an account.
    """ # noqa: E501
    credit_cards: List[CreditCardResponse]
    total_items: Optional[StrictInt] = Field(default=None, description="Total number of credit cards.")
    total_pages: Optional[StrictInt] = Field(default=None, description="Total number of pages.")
    current_page: Optional[StrictInt] = Field(default=None, description="Current page number.")
    per_page: Optional[StrictInt] = Field(default=None, description="Number of items per page.")
    links: Optional[List[Link]] = None
    __properties: ClassVar[List[str]] = ["credit_cards", "total_items", "total_pages", "current_page", "per_page", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaginatedCreditCardListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in credit_cards (list)
        _items = []
        if self.credit_cards:
            for _item_credit_cards in self.credit_cards:
                if _item_credit_cards:
                    _items.append(_item_credit_cards.to_dict())
            _dict['credit_cards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaginatedCreditCardListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "credit_cards": [CreditCardResponse.from_dict(_item) for _item in obj["credit_cards"]] if obj.get("credit_cards") is not None else None,
            "total_items": obj.get("total_items"),
            "total_pages": obj.get("total_pages"),
            "current_page": obj.get("current_page"),
            "per_page": obj.get("per_page"),
            "links": [Link.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


