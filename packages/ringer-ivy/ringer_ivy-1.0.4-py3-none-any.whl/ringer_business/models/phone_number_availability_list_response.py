# coding: utf-8

"""
    Ringer Business API - Phone Number Management

    This API provides endpoints for managing phone numbers within a Ringer Business account and its sites. Phone numbers are essential for making and receiving calls and can be routed to various features like devices, menus, or voicemail.  Functionality includes: - Listing phone numbers associated with a specific site. - Assigning (creating) a new phone number to a site. - Retrieving details of a specific phone number. - Updating a phone number's configuration (e.g., its routing destination). - Deleting/unassigning a phone number from a site. - Transferring a phone number between sites. - Listing available phone numbers for assignment to a site (from inventory or search). - Searching for available phone numbers based on criteria like area code, city, etc. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from ringer_business.models.phone_number_availability import PhoneNumberAvailability
from typing import Optional, Set
from typing_extensions import Self

class PhoneNumberAvailabilityListResponse(BaseModel):
    """
    A list of available phone numbers from a search.
    """ # noqa: E501
    available_numbers: List[PhoneNumberAvailability]
    __properties: ClassVar[List[str]] = ["available_numbers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhoneNumberAvailabilityListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in available_numbers (list)
        _items = []
        if self.available_numbers:
            for _item_available_numbers in self.available_numbers:
                if _item_available_numbers:
                    _items.append(_item_available_numbers.to_dict())
            _dict['available_numbers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhoneNumberAvailabilityListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "available_numbers": [PhoneNumberAvailability.from_dict(_item) for _item in obj["available_numbers"]] if obj.get("available_numbers") is not None else None
        })
        return _obj


