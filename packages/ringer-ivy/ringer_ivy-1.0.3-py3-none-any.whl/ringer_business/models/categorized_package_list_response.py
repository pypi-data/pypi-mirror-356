# coding: utf-8

"""
    Ringer Business API - Packages Management

    This API provides endpoints for managing packages. Packages are collections of items or features that can be included in or added to subscription plans. This API allows retrieving details of specific packages and listing available packages.  - **Included Packages**: Provide a quantity of a specific rate item which is included in the plan subscription cost. - **Optional Packages**: Provide a quantity of a specific rate item for an additional monthly fee. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from ringer_business.models.package_response import PackageResponse
from typing import Optional, Set
from typing_extensions import Self

class CategorizedPackageListResponse(BaseModel):
    """
    A list of packages, typically categorized into included and optional. (Used by Plans API)
    """ # noqa: E501
    included_packages: List[PackageResponse] = Field(description="Packages that are automatically part of a plan.")
    optional_packages: List[PackageResponse] = Field(description="Additional packages that can be added to a plan.")
    __properties: ClassVar[List[str]] = ["included_packages", "optional_packages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CategorizedPackageListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in included_packages (list)
        _items = []
        if self.included_packages:
            for _item_included_packages in self.included_packages:
                if _item_included_packages:
                    _items.append(_item_included_packages.to_dict())
            _dict['included_packages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in optional_packages (list)
        _items = []
        if self.optional_packages:
            for _item_optional_packages in self.optional_packages:
                if _item_optional_packages:
                    _items.append(_item_optional_packages.to_dict())
            _dict['optional_packages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CategorizedPackageListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "included_packages": [PackageResponse.from_dict(_item) for _item in obj["included_packages"]] if obj.get("included_packages") is not None else None,
            "optional_packages": [PackageResponse.from_dict(_item) for _item in obj["optional_packages"]] if obj.get("optional_packages") is not None else None
        })
        return _obj


