# coding: utf-8

"""
    Ringer Business API - Call Blocking Management

    This API provides endpoints for managing call blocking rules on a specific site. Call blocking allows customers to prevent inbound calls from specified numbers to certain extensions or all extensions on a site. When a blocked number attempts to call, they will typically receive a busy tone.  Functionality includes: - Listing all call block rules for a site. - Creating a new call block rule. - Retrieving details of a specific call block rule. - Updating an existing call block rule. - Deleting a call block rule. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from ringer_business.models.call_block_response import CallBlockResponse
from typing import Optional, Set
from typing_extensions import Self

class CallBlockListResponse(BaseModel):
    """
    A list of call block rules for a site.
    """ # noqa: E501
    call_blocks: List[CallBlockResponse]
    __properties: ClassVar[List[str]] = ["call_blocks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CallBlockListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in call_blocks (list)
        _items = []
        if self.call_blocks:
            for _item_call_blocks in self.call_blocks:
                if _item_call_blocks:
                    _items.append(_item_call_blocks.to_dict())
            _dict['call_blocks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CallBlockListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "call_blocks": [CallBlockResponse.from_dict(_item) for _item in obj["call_blocks"]] if obj.get("call_blocks") is not None else None
        })
        return _obj


