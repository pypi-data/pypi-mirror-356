# coding: utf-8

"""
    Ringer Business API - Sites Management

    This API provides endpoints for managing Sites within a Ringer Business account. Sites are collections of telephony features and can represent physical locations, departments, or logical groupings of phone system behaviors.  Developers can use this API to: - List all sites for an account. - Create a new site. - Retrieve details of a specific site. - Update an existing site's configuration. - Delete a site (and its associated features). - Rebuild a site's configuration with the call processing system. - List potential destinations and failovers for site features.  Site management often involves configuring various telephony features, which will be detailed in separate feature-specific API documents (e.g., devices, phone numbers, menus). 

    The version of the OpenAPI document: 1.0.0
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from ringer_business.models.site_destination import SiteDestination
from typing import Optional, Set
from typing_extensions import Self

class SiteDestinationListResponse(BaseModel):
    """
    A list of potential call destinations for features within a site.
    """ # noqa: E501
    destinations: List[SiteDestination]
    __properties: ClassVar[List[str]] = ["destinations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SiteDestinationListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in destinations (list)
        _items = []
        if self.destinations:
            for _item_destinations in self.destinations:
                if _item_destinations:
                    _items.append(_item_destinations.to_dict())
            _dict['destinations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SiteDestinationListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destinations": [SiteDestination.from_dict(_item) for _item in obj["destinations"]] if obj.get("destinations") is not None else None
        })
        return _obj


