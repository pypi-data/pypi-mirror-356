# coding: utf-8

"""
    Ringer Business API - Template Management

    This API provides endpoints for managing service templates within a Ringer Business account. Templates offer a pre-configured set of resources (e.g., phone numbers, devices, voicemail) that can be quickly deployed for new users or seats, ensuring consistency and simplifying setup.  Functionality includes: - Listing available templates. - Creating a new template. - Retrieving details of a specific template. - Updating an existing template. - Deleting a template. - Cloning an existing template to create a new one. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ringer_business.models.template_feature import TemplateFeature

class TestTemplateFeature(unittest.TestCase):
    """TemplateFeature unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TemplateFeature:
        """Test TemplateFeature
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TemplateFeature`
        """
        model = TemplateFeature()
        if include_optional:
            return TemplateFeature(
                switchable = '',
                position = 56,
                attrs = [
                    {"name":"timeout","derivative":"predefined","default":"120"}
                    ],
                destinations = [
                    {"switchable":"PhoneNumber","position":1,"attrs":[{"name":"name","derivative":"calculated","default":"Phone Number"}]}
                    ],
                feature_type = 'device',
                failover = {"name":"Support Voicemail","code":"voicemailbox:vm_support"},
                target_type = ''
            )
        else:
            return TemplateFeature(
                switchable = '',
                position = 56,
        )
        """

    def testTemplateFeature(self):
        """Test TemplateFeature"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
