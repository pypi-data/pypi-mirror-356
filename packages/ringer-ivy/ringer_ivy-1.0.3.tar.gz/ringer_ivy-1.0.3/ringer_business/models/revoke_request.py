# coding: utf-8

"""
    Ringer Business API - Authentication

    The Ringer Business API uses OAuth 2.0 to authenticate and authorize client applications. This section details the endpoints for obtaining and revoking access tokens.  **Supported Grant Types for Obtaining Access Tokens (`/auth/token`):**  *   **Password Grant:**     For trusted first-party applications where users directly provide their credentials.     Requires: `grant_type=\"password\"`, `username`, `password`, `client_id`, `client_secret`.  *   **Client Credentials Grant:**     For server-to-server authentication where the client is acting on its own behalf.     Requires: `grant_type=\"client_credentials\"`, `client_id`, `client_secret`.  *   **Refresh Token Grant:**     To obtain a new access token using a previously issued refresh token.     Requires: `grant_type=\"refresh_token\"`, `refresh_token`, `client_id`, `client_secret`.  Access tokens are typically short-lived (e.g., 2 hours). Use the refresh token to maintain an active session without requiring users to re-authenticate frequently.  **Important Security Note:** Your `client_id` and `client_secret` are confidential. Secure them appropriately and never expose them in client-side code or public repositories. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class RevokeRequest(BaseModel):
    """
    Parameters for revoking an OAuth 2.0 token.
    """ # noqa: E501
    token: StrictStr = Field(description="The access token or refresh token to be revoked.")
    client_id: StrictStr = Field(description="The client ID of the application making the revocation request.")
    client_secret: StrictStr = Field(description="The client secret of the application making the revocation request.")
    __properties: ClassVar[List[str]] = ["token", "client_id", "client_secret"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RevokeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RevokeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "token": obj.get("token"),
            "client_id": obj.get("client_id"),
            "client_secret": obj.get("client_secret")
        })
        return _obj


