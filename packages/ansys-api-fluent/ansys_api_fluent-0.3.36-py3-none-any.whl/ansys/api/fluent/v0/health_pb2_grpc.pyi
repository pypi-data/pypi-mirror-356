"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.fluent.v0.health_pb2
import grpc
import typing

class HealthStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    Check: grpc.UnaryUnaryMultiCallable[
        ansys.api.fluent.v0.health_pb2.HealthCheckRequest,
        ansys.api.fluent.v0.health_pb2.HealthCheckResponse] = ...
    """If the requested service is unknown, the call will fail with status
    NOT_FOUND.
    """

    Watch: grpc.UnaryStreamMultiCallable[
        ansys.api.fluent.v0.health_pb2.HealthCheckRequest,
        ansys.api.fluent.v0.health_pb2.HealthCheckResponse] = ...
    """Performs a watch for the serving status of the requested service.
    The server will immediately send back a message indicating the current
    serving status.  It will then subsequently send a new message whenever
    the service's serving status changes.

    If the requested service is unknown when the call is received, the
    server will send a message setting the serving status to
    SERVICE_UNKNOWN but will *not* terminate the call.  If at some
    future point, the serving status of the service becomes known, the
    server will send a new message with the service's serving status.

    If the call terminates with status UNIMPLEMENTED, then clients
    should assume this method is not supported and should not retry the
    call.  If the call terminates with any other status (including OK),
    clients should retry the call with appropriate exponential backoff.
    """


class HealthServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Check(self,
        request: ansys.api.fluent.v0.health_pb2.HealthCheckRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.fluent.v0.health_pb2.HealthCheckResponse:
        """If the requested service is unknown, the call will fail with status
        NOT_FOUND.
        """
        pass

    @abc.abstractmethod
    def Watch(self,
        request: ansys.api.fluent.v0.health_pb2.HealthCheckRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.fluent.v0.health_pb2.HealthCheckResponse]:
        """Performs a watch for the serving status of the requested service.
        The server will immediately send back a message indicating the current
        serving status.  It will then subsequently send a new message whenever
        the service's serving status changes.

        If the requested service is unknown when the call is received, the
        server will send a message setting the serving status to
        SERVICE_UNKNOWN but will *not* terminate the call.  If at some
        future point, the serving status of the service becomes known, the
        server will send a new message with the service's serving status.

        If the call terminates with status UNIMPLEMENTED, then clients
        should assume this method is not supported and should not retry the
        call.  If the call terminates with any other status (including OK),
        clients should retry the call with appropriate exponential backoff.
        """
        pass


def add_HealthServicer_to_server(servicer: HealthServicer, server: grpc.Server) -> None: ...
