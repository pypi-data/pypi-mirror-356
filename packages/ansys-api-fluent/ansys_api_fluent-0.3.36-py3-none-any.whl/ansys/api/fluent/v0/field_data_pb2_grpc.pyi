"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.fluent.v0.field_data_pb2
import grpc
import typing

class FieldDataStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    BeginFieldsStreaming: grpc.UnaryStreamMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.BeginFieldsStreamingRequest,
        ansys.api.fluent.v0.field_data_pb2.BeginFieldsStreamingResponse] = ...
    """Begin fields streaming."""

    GetFields: grpc.UnaryStreamMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetFieldsRequest,
        ansys.api.fluent.v0.field_data_pb2.GetFieldsResponse] = ...
    """Get fields e.g. scalar, vector, surfaces etc in a single request."""

    GetRange: grpc.UnaryUnaryMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetRangeRequest,
        ansys.api.fluent.v0.field_data_pb2.GetRangeResponse] = ...
    """Get scalar field range."""

    GetSurfacesInfo: grpc.UnaryUnaryMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetSurfacesInfoRequest,
        ansys.api.fluent.v0.field_data_pb2.GetSurfacesInfoResponse] = ...
    """Get surfaces info."""

    GetVectorFieldsInfo: grpc.UnaryUnaryMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetVectorFieldsInfoRequest,
        ansys.api.fluent.v0.field_data_pb2.GetVectorFieldsInfoResponse] = ...
    """Get vector fields info."""

    GetFieldsInfo: grpc.UnaryUnaryMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetFieldsInfoRequest,
        ansys.api.fluent.v0.field_data_pb2.GetFieldsInfoResponse] = ...
    """Get scalar fields info."""

    GetSurfaces: grpc.UnaryStreamMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetSurfacesRequest,
        ansys.api.fluent.v0.field_data_pb2.GetSurfacesResponse] = ...
    """Get surfaces data."""

    GetScalarField: grpc.UnaryStreamMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetScalarFieldRequest,
        ansys.api.fluent.v0.field_data_pb2.GetScalarFieldResponse] = ...
    """Get scalar field data."""

    GetVectorField: grpc.UnaryStreamMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetVectorFieldRequest,
        ansys.api.fluent.v0.field_data_pb2.GetVectorFieldResponse] = ...
    """Get vector field data."""

    GetPathlinesField: grpc.UnaryStreamMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetPathlinesFieldRequest,
        ansys.api.fluent.v0.field_data_pb2.GetPathlinesFieldResponse] = ...
    """Get pathlines field data."""

    GetParticleTracksField: grpc.UnaryStreamMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetParticleTracksFieldRequest,
        ansys.api.fluent.v0.field_data_pb2.GetParticleTracksFieldResponse] = ...
    """Get particle tracks field data."""

    IsBoundaryValuesOn: grpc.UnaryUnaryMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.IsBoundaryValuesOnRequest,
        ansys.api.fluent.v0.field_data_pb2.IsBoundaryValuesOnResponse] = ...
    """Check if boundary values are on."""

    GetSolverMeshNodesDouble: grpc.UnaryStreamMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetSolverMeshNodesRequest,
        ansys.api.fluent.v0.field_data_pb2.GetSolverMeshNodesDoubleResponse] = ...

    GetSolverMeshNodesFloat: grpc.UnaryStreamMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetSolverMeshNodesRequest,
        ansys.api.fluent.v0.field_data_pb2.GetSolverMeshNodesFloatResponse] = ...

    GetSolverMeshElements: grpc.UnaryStreamMultiCallable[
        ansys.api.fluent.v0.field_data_pb2.GetSolverMeshElementsRequest,
        ansys.api.fluent.v0.field_data_pb2.GetSolverMeshElementsResponse] = ...


class FieldDataServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def BeginFieldsStreaming(self,
        request: ansys.api.fluent.v0.field_data_pb2.BeginFieldsStreamingRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.fluent.v0.field_data_pb2.BeginFieldsStreamingResponse]:
        """Begin fields streaming."""
        pass

    @abc.abstractmethod
    def GetFields(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetFieldsRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.fluent.v0.field_data_pb2.GetFieldsResponse]:
        """Get fields e.g. scalar, vector, surfaces etc in a single request."""
        pass

    @abc.abstractmethod
    def GetRange(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetRangeRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.fluent.v0.field_data_pb2.GetRangeResponse:
        """Get scalar field range."""
        pass

    @abc.abstractmethod
    def GetSurfacesInfo(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetSurfacesInfoRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.fluent.v0.field_data_pb2.GetSurfacesInfoResponse:
        """Get surfaces info."""
        pass

    @abc.abstractmethod
    def GetVectorFieldsInfo(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetVectorFieldsInfoRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.fluent.v0.field_data_pb2.GetVectorFieldsInfoResponse:
        """Get vector fields info."""
        pass

    @abc.abstractmethod
    def GetFieldsInfo(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetFieldsInfoRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.fluent.v0.field_data_pb2.GetFieldsInfoResponse:
        """Get scalar fields info."""
        pass

    @abc.abstractmethod
    def GetSurfaces(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetSurfacesRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.fluent.v0.field_data_pb2.GetSurfacesResponse]:
        """Get surfaces data."""
        pass

    @abc.abstractmethod
    def GetScalarField(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetScalarFieldRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.fluent.v0.field_data_pb2.GetScalarFieldResponse]:
        """Get scalar field data."""
        pass

    @abc.abstractmethod
    def GetVectorField(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetVectorFieldRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.fluent.v0.field_data_pb2.GetVectorFieldResponse]:
        """Get vector field data."""
        pass

    @abc.abstractmethod
    def GetPathlinesField(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetPathlinesFieldRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.fluent.v0.field_data_pb2.GetPathlinesFieldResponse]:
        """Get pathlines field data."""
        pass

    @abc.abstractmethod
    def GetParticleTracksField(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetParticleTracksFieldRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.fluent.v0.field_data_pb2.GetParticleTracksFieldResponse]:
        """Get particle tracks field data."""
        pass

    @abc.abstractmethod
    def IsBoundaryValuesOn(self,
        request: ansys.api.fluent.v0.field_data_pb2.IsBoundaryValuesOnRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.fluent.v0.field_data_pb2.IsBoundaryValuesOnResponse:
        """Check if boundary values are on."""
        pass

    @abc.abstractmethod
    def GetSolverMeshNodesDouble(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetSolverMeshNodesRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.fluent.v0.field_data_pb2.GetSolverMeshNodesDoubleResponse]: ...

    @abc.abstractmethod
    def GetSolverMeshNodesFloat(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetSolverMeshNodesRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.fluent.v0.field_data_pb2.GetSolverMeshNodesFloatResponse]: ...

    @abc.abstractmethod
    def GetSolverMeshElements(self,
        request: ansys.api.fluent.v0.field_data_pb2.GetSolverMeshElementsRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.fluent.v0.field_data_pb2.GetSolverMeshElementsResponse]: ...


def add_FieldDataServicer_to_server(servicer: FieldDataServicer, server: grpc.Server) -> None: ...
