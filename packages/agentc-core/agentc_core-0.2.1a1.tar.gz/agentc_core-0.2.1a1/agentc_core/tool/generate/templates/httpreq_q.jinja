from __future__ import annotations

import requests
import logging
import typing
import json
import dataclasses
import os
import logging

from agentc_core.tool import tool

logger = logging.getLogger(__name__)


{% if input is not none %}
{{ input.model.generated_code | safe }}
parameter_locations = {{ input.locations | safe }}
{% endif %}

@tool
def {{ tool.name }}({% if input is not none %}argument_input: {{ input.model.type_name }}{% endif %}) -> str:
    """
    {{ tool.description }}
    """
    logger.debug("{{ tool.name }} has been called.")

    {% if input is not none %}
    # We need to safeguard against weird LLM function calls.
    logger.debug("{{ tool.name }} has been given the input: " + str(argument_input) + ".")
    if isinstance(argument_input, dict):
        named_parameters = argument_input
    elif dataclasses.is_dataclass(argument_input):
        named_parameters = argument_input.asdict()
    elif isinstance(argument_input, {{ input.model.type_name }}):
        named_parameters = argument_input.dict()
    else:
        raise ValueError("Bad input given to HTTP request tool!")
    {% endif %}

    # TODO (GLENN): We need to formalize how to handle multiple URLs.
    for server_url in {{ urls | safe }}:
        url = server_url + '{{ path }}'
        request_body = dict()
        parameters = dict()
        headers = dict()
        cookies = dict()
        for name, location in parameter_locations.items():
            match location:
                case 'header':
                    headers[name] = named_parameters[name]
                case 'query':
                    parameters[name] = named_parameters[name]
                case 'cookie':
                    cookies[name] = named_parameters[name]
                case 'path':
                    url = url.replace('{' + name + '}', named_parameters[name])
                case 'body':
                    request_body[name] = named_parameters[name]
                case _:
                    # We should never reach here...
                    raise ValueError('Unknown location of parameter!')

        request_args = dict()
        if len(parameters) > 0:
            request_args['params'] = parameters
        if len(headers) > 0:
            request_args['headers'] = headers
        if len(cookies) > 0:
            request_args['cookies'] = cookies
        if len(request_body) > 0:
            request_args['data'] = json.dumps(request_body)

        logger.debug("{{ tool.name }} is issuing the request {{ method }} " + url +
                     "with request parameters: " + str(request_args))
        response = requests.request("{{ method }}", url, **request_args)
        if response.status_code == 200:
            logger.debug("{{ tool.name }} has returned " + response.text)
            return response.text
        raise Exception(f"Non-200 status code returned from server!\n\n{response.text}")