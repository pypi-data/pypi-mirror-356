#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.2.0
# Product:       stcc4
# Model-Version: 3.4.0
#

import pytest
from sensirion_i2c_stcc4.device import Stcc4Device


@pytest.fixture
def sensor(channel_provider):
    channel_provider.i2c_frequency = 100e3
    channel_provider.supply_voltage = 3.3
    with channel_provider:
        channel = channel_provider.get_channel(slave_address=0x64,
                                               crc_parameters=(8, 0x31, 0xff, 0x0))
        yield Stcc4Device(channel)


def test_get_product_id1(sensor):
    (product_id, serial_number
     ) = sensor.get_product_id()
    print(f"product_id: {product_id}; "
          f"serial_number: {serial_number}; "
          )


def test_set_rht_compensation1(sensor):
    sensor.set_rht_compensation(26214, 29359)


def test_set_pressure_compensation1(sensor):
    sensor.set_pressure_compensation(101300)


def test_set_pressure_compensation_raw1(sensor):
    sensor.set_pressure_compensation_raw(50650)


def test_perform_self_test1(sensor):
    test_result = sensor.perform_self_test()
    print(f"test_result: {test_result}; "
          )


def test_perform_conditioning1(sensor):
    sensor.perform_conditioning()


def test_stop_continuous_measurement1(sensor):
    sensor.stop_continuous_measurement()


def test_start_continuous_measurement1(sensor):
    sensor.start_continuous_measurement()
    (co2_concentration_raw, temperature_raw, relative_humidity_raw, sensor_status_raw
     ) = sensor.read_measurement_raw()
    print(f"co2_concentration_raw: {co2_concentration_raw}; "
          f"temperature_raw: {temperature_raw}; "
          f"relative_humidity_raw: {relative_humidity_raw}; "
          f"sensor_status_raw: {sensor_status_raw}; "
          )
    (co2_concentration, temperature, relative_humidity, sensor_status
     ) = sensor.read_measurement()
    print(f"co2_concentration: {co2_concentration}; "
          f"temperature: {temperature}; "
          f"relative_humidity: {relative_humidity}; "
          f"sensor_status: {sensor_status}; "
          )
    sensor.set_rht_compensation(26214, 29359)
    sensor.set_pressure_compensation(101300)
    sensor.set_pressure_compensation_raw(50650)
    sensor.stop_continuous_measurement()

