"""See the [`litellm` documention](https://docs.litellm.ai/docs/embedding/supported_embedding)."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../pts/api/llm/08_embeddings.pct.py.

# %% auto 0
__all__ = ['embedding', 'async_embedding']

# %% ../../../pts/api/llm/08_embeddings.pct.py 3
try:
    import litellm
    import functools
    from adulib.llm._utils import _llm_func_factory, _llm_async_func_factory
    from adulib.llm.tokens import token_counter
except ImportError as e:
    raise ImportError(f"Install adulib[llm] to use this API.") from e

# %% ../../../pts/api/llm/08_embeddings.pct.py 7
embedding = _llm_func_factory(
    func=litellm.embedding,
    func_name="embedding",
    func_cache_name="embedding",
    retrieve_log_data=lambda model, func_kwargs, response, cache_args: {
        "method": "embedding",
        "input_tokens": sum([token_counter(model=model, text=inp, **cache_args) for inp in func_kwargs['input']]),
        "output_tokens": None,
        "cost": response._hidden_params['response_cost'],
    }
)

embedding.__doc__ = """
This function is a wrapper around a corresponding function in the `litellm` library, see [this](https://docs.litellm.ai/docs/embedding/supported_embedding) for a full list of the available arguments.
""".strip()

# %% ../../../pts/api/llm/08_embeddings.pct.py 10
async_embedding = _llm_async_func_factory(
    func=functools.wraps(litellm.embedding)(litellm.aembedding), # This is needed as 'litellm.aembedding' lacks the right signature
    func_name="async_embedding",
    func_cache_name="embedding",
    retrieve_log_data=lambda model, func_kwargs, response, cache_args: {
        "method": "embedding",
        "input_tokens": sum([token_counter(model=model, text=inp, **cache_args) for inp in func_kwargs['input']]),
        "output_tokens": None,
        "cost": response._hidden_params['response_cost'],
    }
)

embedding.__doc__ = """
This function is a wrapper around a corresponding function in the `litellm` library, see [this](https://docs.litellm.ai/docs/embedding/supported_embedding) for a full list of the available arguments.
""".strip()
