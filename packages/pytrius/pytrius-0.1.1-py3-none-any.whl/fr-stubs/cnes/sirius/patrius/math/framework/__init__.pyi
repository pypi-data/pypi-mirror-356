
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import jpype
import typing



class MathLibrary:
    def IEEEremainder(self, double: float, double2: float) -> float: ...
    @typing.overload
    def abs(self, double: float) -> float: ...
    @typing.overload
    def abs(self, float: float) -> float: ...
    @typing.overload
    def abs(self, int: int) -> int: ...
    @typing.overload
    def abs(self, long: int) -> int: ...
    def acos(self, double: float) -> float: ...
    def acosh(self, double: float) -> float: ...
    def asin(self, double: float) -> float: ...
    def asinh(self, double: float) -> float: ...
    def atan(self, double: float) -> float: ...
    def atan2(self, double: float, double2: float) -> float: ...
    def atanh(self, double: float) -> float: ...
    def cbrt(self, double: float) -> float: ...
    def ceil(self, double: float) -> float: ...
    @typing.overload
    def copySign(self, double: float, double2: float) -> float: ...
    @typing.overload
    def copySign(self, float: float, float2: float) -> float: ...
    def cos(self, double: float) -> float: ...
    def cosh(self, double: float) -> float: ...
    def exp(self, double: float) -> float: ...
    def expm1(self, double: float) -> float: ...
    def floor(self, double: float) -> float: ...
    @typing.overload
    def getExponent(self, double: float) -> int: ...
    @typing.overload
    def getExponent(self, float: float) -> int: ...
    def hypot(self, double: float, double2: float) -> float: ...
    def log(self, double: float) -> float: ...
    def log10(self, double: float) -> float: ...
    def log1p(self, double: float) -> float: ...
    @typing.overload
    def max(self, double: float, double2: float) -> float: ...
    @typing.overload
    def max(self, float: float, float2: float) -> float: ...
    @typing.overload
    def max(self, int: int, int2: int) -> int: ...
    @typing.overload
    def max(self, long: int, long2: int) -> int: ...
    @typing.overload
    def min(self, double: float, double2: float) -> float: ...
    @typing.overload
    def min(self, float: float, float2: float) -> float: ...
    @typing.overload
    def min(self, int: int, int2: int) -> int: ...
    @typing.overload
    def min(self, long: int, long2: int) -> int: ...
    @typing.overload
    def nextAfter(self, double: float, double2: float) -> float: ...
    @typing.overload
    def nextAfter(self, float: float, double: float) -> float: ...
    @typing.overload
    def nextUp(self, double: float) -> float: ...
    @typing.overload
    def nextUp(self, float: float) -> float: ...
    @typing.overload
    def pow(self, double: float, double2: float) -> float: ...
    @typing.overload
    def pow(self, double: float, int: int) -> float: ...
    def random(self) -> float: ...
    def rint(self, double: float) -> float: ...
    @typing.overload
    def round(self, float: float) -> int: ...
    @typing.overload
    def round(self, double: float) -> int: ...
    @typing.overload
    def scalb(self, double: float, int: int) -> float: ...
    @typing.overload
    def scalb(self, float: float, int: int) -> float: ...
    @typing.overload
    def signum(self, double: float) -> float: ...
    @typing.overload
    def signum(self, float: float) -> float: ...
    def sin(self, double: float) -> float: ...
    @typing.overload
    def sinAndCos(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinAndCos(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sinh(self, double: float) -> float: ...
    @typing.overload
    def sinhAndCosh(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinhAndCosh(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sqrt(self, double: float) -> float: ...
    def tan(self, double: float) -> float: ...
    def tanh(self, double: float) -> float: ...
    def toDegrees(self, double: float) -> float: ...
    def toRadians(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, float: float) -> float: ...

class MathLibraryType(java.lang.Enum['MathLibraryType']):
    """
    public enum MathLibraryType extends `Enum <http://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html?is-external=true>`<:class:`~fr.cnes.sirius.patrius.math.framework.MathLibraryType`>
    
        Enumeration of Math library types currently available in PATRIUS.
    
        Since:
            4.2
    """
    MATH: typing.ClassVar['MathLibraryType'] = ...
    STRICTMATH: typing.ClassVar['MathLibraryType'] = ...
    FASTMATH: typing.ClassVar['MathLibraryType'] = ...
    JAFAMA_FASTMATH: typing.ClassVar['MathLibraryType'] = ...
    JAFAMA_STRICT_FASTMATH: typing.ClassVar['MathLibraryType'] = ...
    FASTEST_MATHLIB: typing.ClassVar['MathLibraryType'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'MathLibraryType':
        """
            Returns the enum constant of this type with the specified name. The string must match *exactly* an identifier used to
            declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)
        
            Parameters:
                name (`String <http://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true>`): the name of the enum constant to be returned.
        
            Returns:
                the enum constant with the specified name
        
            Raises:
                : if this enum type has no constant with the specified name
                : if the argument is null
        
        
        """
        ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.MutableSequence['MathLibraryType']:
        """
            Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to
            iterate over the constants as follows:
        
            .. code-block: java
            
            
            for (MathLibraryType c : MathLibraryType.values())
                System.out.println(c);
            
        
            Returns:
                an array containing the constants of this enum type, in the order they are declared
        
        
        """
        ...

class FastMathWrapper(MathLibrary):
    def __init__(self): ...
    def IEEEremainder(self, double: float, double2: float) -> float: ...
    @typing.overload
    def abs(self, double: float) -> float: ...
    @typing.overload
    def abs(self, float: float) -> float: ...
    @typing.overload
    def abs(self, int: int) -> int: ...
    @typing.overload
    def abs(self, long: int) -> int: ...
    def acos(self, double: float) -> float: ...
    def acosh(self, double: float) -> float: ...
    def asin(self, double: float) -> float: ...
    def asinh(self, double: float) -> float: ...
    def atan(self, double: float) -> float: ...
    def atan2(self, double: float, double2: float) -> float: ...
    def atanh(self, double: float) -> float: ...
    def cbrt(self, double: float) -> float: ...
    def ceil(self, double: float) -> float: ...
    @typing.overload
    def copySign(self, double: float, double2: float) -> float: ...
    @typing.overload
    def copySign(self, float: float, float2: float) -> float: ...
    def cos(self, double: float) -> float: ...
    def cosh(self, double: float) -> float: ...
    def exp(self, double: float) -> float: ...
    def expm1(self, double: float) -> float: ...
    def floor(self, double: float) -> float: ...
    @typing.overload
    def getExponent(self, double: float) -> int: ...
    @typing.overload
    def getExponent(self, float: float) -> int: ...
    def hypot(self, double: float, double2: float) -> float: ...
    def log(self, double: float) -> float: ...
    def log10(self, double: float) -> float: ...
    def log1p(self, double: float) -> float: ...
    @typing.overload
    def max(self, double: float, double2: float) -> float: ...
    @typing.overload
    def max(self, float: float, float2: float) -> float: ...
    @typing.overload
    def max(self, int: int, int2: int) -> int: ...
    @typing.overload
    def max(self, long: int, long2: int) -> int: ...
    @typing.overload
    def min(self, double: float, double2: float) -> float: ...
    @typing.overload
    def min(self, float: float, float2: float) -> float: ...
    @typing.overload
    def min(self, int: int, int2: int) -> int: ...
    @typing.overload
    def min(self, long: int, long2: int) -> int: ...
    @typing.overload
    def nextAfter(self, double: float, double2: float) -> float: ...
    @typing.overload
    def nextAfter(self, float: float, double: float) -> float: ...
    @typing.overload
    def nextUp(self, double: float) -> float: ...
    @typing.overload
    def nextUp(self, float: float) -> float: ...
    @typing.overload
    def pow(self, double: float, double2: float) -> float: ...
    @typing.overload
    def pow(self, double: float, int: int) -> float: ...
    def random(self) -> float: ...
    def rint(self, double: float) -> float: ...
    @typing.overload
    def round(self, float: float) -> int: ...
    @typing.overload
    def round(self, double: float) -> int: ...
    @typing.overload
    def scalb(self, double: float, int: int) -> float: ...
    @typing.overload
    def scalb(self, float: float, int: int) -> float: ...
    @typing.overload
    def signum(self, double: float) -> float: ...
    @typing.overload
    def signum(self, float: float) -> float: ...
    def sin(self, double: float) -> float: ...
    @typing.overload
    def sinAndCos(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinAndCos(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sinh(self, double: float) -> float: ...
    @typing.overload
    def sinhAndCosh(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinhAndCosh(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sqrt(self, double: float) -> float: ...
    def tan(self, double: float) -> float: ...
    def tanh(self, double: float) -> float: ...
    def toDegrees(self, double: float) -> float: ...
    def toRadians(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, float: float) -> float: ...

class FastestMathLibWrapper(MathLibrary):
    def __init__(self): ...
    def IEEEremainder(self, double: float, double2: float) -> float: ...
    @typing.overload
    def abs(self, double: float) -> float: ...
    @typing.overload
    def abs(self, float: float) -> float: ...
    @typing.overload
    def abs(self, int: int) -> int: ...
    @typing.overload
    def abs(self, long: int) -> int: ...
    def acos(self, double: float) -> float: ...
    def acosh(self, double: float) -> float: ...
    def asin(self, double: float) -> float: ...
    def asinh(self, double: float) -> float: ...
    def atan(self, double: float) -> float: ...
    def atan2(self, double: float, double2: float) -> float: ...
    def atanh(self, double: float) -> float: ...
    def cbrt(self, double: float) -> float: ...
    def ceil(self, double: float) -> float: ...
    @typing.overload
    def copySign(self, double: float, double2: float) -> float: ...
    @typing.overload
    def copySign(self, float: float, float2: float) -> float: ...
    def cos(self, double: float) -> float: ...
    def cosh(self, double: float) -> float: ...
    def exp(self, double: float) -> float: ...
    def expm1(self, double: float) -> float: ...
    def floor(self, double: float) -> float: ...
    @typing.overload
    def getExponent(self, double: float) -> int: ...
    @typing.overload
    def getExponent(self, float: float) -> int: ...
    def hypot(self, double: float, double2: float) -> float: ...
    def log(self, double: float) -> float: ...
    def log10(self, double: float) -> float: ...
    def log1p(self, double: float) -> float: ...
    @typing.overload
    def max(self, double: float, double2: float) -> float: ...
    @typing.overload
    def max(self, float: float, float2: float) -> float: ...
    @typing.overload
    def max(self, int: int, int2: int) -> int: ...
    @typing.overload
    def max(self, long: int, long2: int) -> int: ...
    @typing.overload
    def min(self, double: float, double2: float) -> float: ...
    @typing.overload
    def min(self, float: float, float2: float) -> float: ...
    @typing.overload
    def min(self, int: int, int2: int) -> int: ...
    @typing.overload
    def min(self, long: int, long2: int) -> int: ...
    @typing.overload
    def nextAfter(self, double: float, double2: float) -> float: ...
    @typing.overload
    def nextAfter(self, float: float, double: float) -> float: ...
    @typing.overload
    def nextUp(self, double: float) -> float: ...
    @typing.overload
    def nextUp(self, float: float) -> float: ...
    @typing.overload
    def pow(self, double: float, double2: float) -> float: ...
    @typing.overload
    def pow(self, double: float, int: int) -> float: ...
    def random(self) -> float: ...
    def rint(self, double: float) -> float: ...
    @typing.overload
    def round(self, float: float) -> int: ...
    @typing.overload
    def round(self, double: float) -> int: ...
    @typing.overload
    def scalb(self, double: float, int: int) -> float: ...
    @typing.overload
    def scalb(self, float: float, int: int) -> float: ...
    @typing.overload
    def signum(self, double: float) -> float: ...
    @typing.overload
    def signum(self, float: float) -> float: ...
    def sin(self, double: float) -> float: ...
    @typing.overload
    def sinAndCos(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinAndCos(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sinh(self, double: float) -> float: ...
    @typing.overload
    def sinhAndCosh(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinhAndCosh(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sqrt(self, double: float) -> float: ...
    def tan(self, double: float) -> float: ...
    def tanh(self, double: float) -> float: ...
    def toDegrees(self, double: float) -> float: ...
    def toRadians(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, float: float) -> float: ...

class JafamaFastMathWrapper(MathLibrary):
    def __init__(self): ...
    def IEEEremainder(self, double: float, double2: float) -> float: ...
    @typing.overload
    def abs(self, double: float) -> float: ...
    @typing.overload
    def abs(self, float: float) -> float: ...
    @typing.overload
    def abs(self, int: int) -> int: ...
    @typing.overload
    def abs(self, long: int) -> int: ...
    def acos(self, double: float) -> float: ...
    def acosh(self, double: float) -> float: ...
    def asin(self, double: float) -> float: ...
    def asinh(self, double: float) -> float: ...
    def atan(self, double: float) -> float: ...
    def atan2(self, double: float, double2: float) -> float: ...
    def atanh(self, double: float) -> float: ...
    def cbrt(self, double: float) -> float: ...
    def ceil(self, double: float) -> float: ...
    @typing.overload
    def copySign(self, double: float, double2: float) -> float: ...
    @typing.overload
    def copySign(self, float: float, float2: float) -> float: ...
    def cos(self, double: float) -> float: ...
    def cosh(self, double: float) -> float: ...
    def exp(self, double: float) -> float: ...
    def expm1(self, double: float) -> float: ...
    def floor(self, double: float) -> float: ...
    @typing.overload
    def getExponent(self, double: float) -> int: ...
    @typing.overload
    def getExponent(self, float: float) -> int: ...
    def hypot(self, double: float, double2: float) -> float: ...
    def log(self, double: float) -> float: ...
    def log10(self, double: float) -> float: ...
    def log1p(self, double: float) -> float: ...
    @typing.overload
    def max(self, double: float, double2: float) -> float: ...
    @typing.overload
    def max(self, float: float, float2: float) -> float: ...
    @typing.overload
    def max(self, int: int, int2: int) -> int: ...
    @typing.overload
    def max(self, long: int, long2: int) -> int: ...
    @typing.overload
    def min(self, double: float, double2: float) -> float: ...
    @typing.overload
    def min(self, float: float, float2: float) -> float: ...
    @typing.overload
    def min(self, int: int, int2: int) -> int: ...
    @typing.overload
    def min(self, long: int, long2: int) -> int: ...
    @typing.overload
    def nextAfter(self, double: float, double2: float) -> float: ...
    @typing.overload
    def nextAfter(self, float: float, double: float) -> float: ...
    @typing.overload
    def nextUp(self, double: float) -> float: ...
    @typing.overload
    def nextUp(self, float: float) -> float: ...
    @typing.overload
    def pow(self, double: float, double2: float) -> float: ...
    @typing.overload
    def pow(self, double: float, int: int) -> float: ...
    def random(self) -> float: ...
    def rint(self, double: float) -> float: ...
    @typing.overload
    def round(self, float: float) -> int: ...
    @typing.overload
    def round(self, double: float) -> int: ...
    @typing.overload
    def scalb(self, double: float, int: int) -> float: ...
    @typing.overload
    def scalb(self, float: float, int: int) -> float: ...
    @typing.overload
    def signum(self, double: float) -> float: ...
    @typing.overload
    def signum(self, float: float) -> float: ...
    def sin(self, double: float) -> float: ...
    @typing.overload
    def sinAndCos(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinAndCos(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sinh(self, double: float) -> float: ...
    @typing.overload
    def sinhAndCosh(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinhAndCosh(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sqrt(self, double: float) -> float: ...
    def tan(self, double: float) -> float: ...
    def tanh(self, double: float) -> float: ...
    def toDegrees(self, double: float) -> float: ...
    def toRadians(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, float: float) -> float: ...

class JafamaStrictFastMathWrapper(MathLibrary):
    def __init__(self): ...
    def IEEEremainder(self, double: float, double2: float) -> float: ...
    @typing.overload
    def abs(self, double: float) -> float: ...
    @typing.overload
    def abs(self, float: float) -> float: ...
    @typing.overload
    def abs(self, int: int) -> int: ...
    @typing.overload
    def abs(self, long: int) -> int: ...
    def acos(self, double: float) -> float: ...
    def acosh(self, double: float) -> float: ...
    def asin(self, double: float) -> float: ...
    def asinh(self, double: float) -> float: ...
    def atan(self, double: float) -> float: ...
    def atan2(self, double: float, double2: float) -> float: ...
    def atanh(self, double: float) -> float: ...
    def cbrt(self, double: float) -> float: ...
    def ceil(self, double: float) -> float: ...
    @typing.overload
    def copySign(self, double: float, double2: float) -> float: ...
    @typing.overload
    def copySign(self, float: float, float2: float) -> float: ...
    def cos(self, double: float) -> float: ...
    def cosh(self, double: float) -> float: ...
    def exp(self, double: float) -> float: ...
    def expm1(self, double: float) -> float: ...
    def floor(self, double: float) -> float: ...
    @typing.overload
    def getExponent(self, double: float) -> int: ...
    @typing.overload
    def getExponent(self, float: float) -> int: ...
    def hypot(self, double: float, double2: float) -> float: ...
    def log(self, double: float) -> float: ...
    def log10(self, double: float) -> float: ...
    def log1p(self, double: float) -> float: ...
    @typing.overload
    def max(self, double: float, double2: float) -> float: ...
    @typing.overload
    def max(self, float: float, float2: float) -> float: ...
    @typing.overload
    def max(self, int: int, int2: int) -> int: ...
    @typing.overload
    def max(self, long: int, long2: int) -> int: ...
    @typing.overload
    def min(self, double: float, double2: float) -> float: ...
    @typing.overload
    def min(self, float: float, float2: float) -> float: ...
    @typing.overload
    def min(self, int: int, int2: int) -> int: ...
    @typing.overload
    def min(self, long: int, long2: int) -> int: ...
    @typing.overload
    def nextAfter(self, double: float, double2: float) -> float: ...
    @typing.overload
    def nextAfter(self, float: float, double: float) -> float: ...
    @typing.overload
    def nextUp(self, double: float) -> float: ...
    @typing.overload
    def nextUp(self, float: float) -> float: ...
    @typing.overload
    def pow(self, double: float, double2: float) -> float: ...
    @typing.overload
    def pow(self, double: float, int: int) -> float: ...
    def random(self) -> float: ...
    def rint(self, double: float) -> float: ...
    @typing.overload
    def round(self, float: float) -> int: ...
    @typing.overload
    def round(self, double: float) -> int: ...
    @typing.overload
    def scalb(self, double: float, int: int) -> float: ...
    @typing.overload
    def scalb(self, float: float, int: int) -> float: ...
    @typing.overload
    def signum(self, double: float) -> float: ...
    @typing.overload
    def signum(self, float: float) -> float: ...
    def sin(self, double: float) -> float: ...
    @typing.overload
    def sinAndCos(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinAndCos(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sinh(self, double: float) -> float: ...
    @typing.overload
    def sinhAndCosh(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinhAndCosh(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sqrt(self, double: float) -> float: ...
    def tan(self, double: float) -> float: ...
    def tanh(self, double: float) -> float: ...
    def toDegrees(self, double: float) -> float: ...
    def toRadians(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, float: float) -> float: ...

class MathWrapper(MathLibrary):
    def __init__(self): ...
    def IEEEremainder(self, double: float, double2: float) -> float: ...
    @typing.overload
    def abs(self, double: float) -> float: ...
    @typing.overload
    def abs(self, float: float) -> float: ...
    @typing.overload
    def abs(self, int: int) -> int: ...
    @typing.overload
    def abs(self, long: int) -> int: ...
    def acos(self, double: float) -> float: ...
    def acosh(self, double: float) -> float: ...
    def asin(self, double: float) -> float: ...
    def asinh(self, double: float) -> float: ...
    def atan(self, double: float) -> float: ...
    def atan2(self, double: float, double2: float) -> float: ...
    def atanh(self, double: float) -> float: ...
    def cbrt(self, double: float) -> float: ...
    def ceil(self, double: float) -> float: ...
    @typing.overload
    def copySign(self, double: float, double2: float) -> float: ...
    @typing.overload
    def copySign(self, float: float, float2: float) -> float: ...
    def cos(self, double: float) -> float: ...
    def cosh(self, double: float) -> float: ...
    def exp(self, double: float) -> float: ...
    def expm1(self, double: float) -> float: ...
    def floor(self, double: float) -> float: ...
    @typing.overload
    def getExponent(self, double: float) -> int: ...
    @typing.overload
    def getExponent(self, float: float) -> int: ...
    def hypot(self, double: float, double2: float) -> float: ...
    def log(self, double: float) -> float: ...
    def log10(self, double: float) -> float: ...
    def log1p(self, double: float) -> float: ...
    @typing.overload
    def max(self, double: float, double2: float) -> float: ...
    @typing.overload
    def max(self, float: float, float2: float) -> float: ...
    @typing.overload
    def max(self, int: int, int2: int) -> int: ...
    @typing.overload
    def max(self, long: int, long2: int) -> int: ...
    @typing.overload
    def min(self, double: float, double2: float) -> float: ...
    @typing.overload
    def min(self, float: float, float2: float) -> float: ...
    @typing.overload
    def min(self, int: int, int2: int) -> int: ...
    @typing.overload
    def min(self, long: int, long2: int) -> int: ...
    @typing.overload
    def nextAfter(self, double: float, double2: float) -> float: ...
    @typing.overload
    def nextAfter(self, float: float, double: float) -> float: ...
    @typing.overload
    def nextUp(self, double: float) -> float: ...
    @typing.overload
    def nextUp(self, float: float) -> float: ...
    @typing.overload
    def pow(self, double: float, double2: float) -> float: ...
    @typing.overload
    def pow(self, double: float, int: int) -> float: ...
    def random(self) -> float: ...
    def rint(self, double: float) -> float: ...
    @typing.overload
    def round(self, float: float) -> int: ...
    @typing.overload
    def round(self, double: float) -> int: ...
    @typing.overload
    def scalb(self, double: float, int: int) -> float: ...
    @typing.overload
    def scalb(self, float: float, int: int) -> float: ...
    @typing.overload
    def signum(self, double: float) -> float: ...
    @typing.overload
    def signum(self, float: float) -> float: ...
    def sin(self, double: float) -> float: ...
    @typing.overload
    def sinAndCos(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinAndCos(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sinh(self, double: float) -> float: ...
    @typing.overload
    def sinhAndCosh(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinhAndCosh(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sqrt(self, double: float) -> float: ...
    def tan(self, double: float) -> float: ...
    def tanh(self, double: float) -> float: ...
    def toDegrees(self, double: float) -> float: ...
    def toRadians(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, float: float) -> float: ...

class StrictMathWrapper(MathLibrary):
    def __init__(self): ...
    def IEEEremainder(self, double: float, double2: float) -> float: ...
    @typing.overload
    def abs(self, double: float) -> float: ...
    @typing.overload
    def abs(self, float: float) -> float: ...
    @typing.overload
    def abs(self, int: int) -> int: ...
    @typing.overload
    def abs(self, long: int) -> int: ...
    def acos(self, double: float) -> float: ...
    def acosh(self, double: float) -> float: ...
    def asin(self, double: float) -> float: ...
    def asinh(self, double: float) -> float: ...
    def atan(self, double: float) -> float: ...
    def atan2(self, double: float, double2: float) -> float: ...
    def atanh(self, double: float) -> float: ...
    def cbrt(self, double: float) -> float: ...
    def ceil(self, double: float) -> float: ...
    @typing.overload
    def copySign(self, double: float, double2: float) -> float: ...
    @typing.overload
    def copySign(self, float: float, float2: float) -> float: ...
    def cos(self, double: float) -> float: ...
    def cosh(self, double: float) -> float: ...
    def exp(self, double: float) -> float: ...
    def expm1(self, double: float) -> float: ...
    def floor(self, double: float) -> float: ...
    @typing.overload
    def getExponent(self, double: float) -> int: ...
    @typing.overload
    def getExponent(self, float: float) -> int: ...
    def hypot(self, double: float, double2: float) -> float: ...
    def log(self, double: float) -> float: ...
    def log10(self, double: float) -> float: ...
    def log1p(self, double: float) -> float: ...
    @typing.overload
    def max(self, double: float, double2: float) -> float: ...
    @typing.overload
    def max(self, float: float, float2: float) -> float: ...
    @typing.overload
    def max(self, int: int, int2: int) -> int: ...
    @typing.overload
    def max(self, long: int, long2: int) -> int: ...
    @typing.overload
    def min(self, double: float, double2: float) -> float: ...
    @typing.overload
    def min(self, float: float, float2: float) -> float: ...
    @typing.overload
    def min(self, int: int, int2: int) -> int: ...
    @typing.overload
    def min(self, long: int, long2: int) -> int: ...
    @typing.overload
    def nextAfter(self, double: float, double2: float) -> float: ...
    @typing.overload
    def nextAfter(self, float: float, double: float) -> float: ...
    @typing.overload
    def nextUp(self, double: float) -> float: ...
    @typing.overload
    def nextUp(self, float: float) -> float: ...
    @typing.overload
    def pow(self, double: float, double2: float) -> float: ...
    @typing.overload
    def pow(self, double: float, int: int) -> float: ...
    def random(self) -> float: ...
    def rint(self, double: float) -> float: ...
    @typing.overload
    def round(self, float: float) -> int: ...
    @typing.overload
    def round(self, double: float) -> int: ...
    @typing.overload
    def scalb(self, double: float, int: int) -> float: ...
    @typing.overload
    def scalb(self, float: float, int: int) -> float: ...
    @typing.overload
    def signum(self, double: float) -> float: ...
    @typing.overload
    def signum(self, float: float) -> float: ...
    def sin(self, double: float) -> float: ...
    @typing.overload
    def sinAndCos(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinAndCos(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sinh(self, double: float) -> float: ...
    @typing.overload
    def sinhAndCosh(self, double: float) -> typing.MutableSequence[float]: ...
    @typing.overload
    def sinhAndCosh(self, double: float, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def sqrt(self, double: float) -> float: ...
    def tan(self, double: float) -> float: ...
    def tanh(self, double: float) -> float: ...
    def toDegrees(self, double: float) -> float: ...
    def toRadians(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, double: float) -> float: ...
    @typing.overload
    def ulp(self, float: float) -> float: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("fr.cnes.sirius.patrius.math.framework")``.

    FastMathWrapper: typing.Type[FastMathWrapper]
    FastestMathLibWrapper: typing.Type[FastestMathLibWrapper]
    JafamaFastMathWrapper: typing.Type[JafamaFastMathWrapper]
    JafamaStrictFastMathWrapper: typing.Type[JafamaStrictFastMathWrapper]
    MathLibrary: typing.Type[MathLibrary]
    MathLibraryType: typing.Type[MathLibraryType]
    MathWrapper: typing.Type[MathWrapper]
    StrictMathWrapper: typing.Type[StrictMathWrapper]
