from SyloraQ.module import runwithin,decode_base64,reverse_string,shiftinwin,replace
from SyloraQAPI import SQNode, QAE_MP

class inviShade: # Obfuscated to enhance security and mitigate the risk of algorithm reverse engineering or data compromise.
    def encode(text):return runwithin(decode_base64(reverse_string(shiftinwin(-8381,SQNode("inviSenc")))),"DEcode.ec()",text)
    def decode(text):return runwithin(decode_base64(reverse_string(shiftinwin(-8381,SQNode("inviSenc")))),"DEcode.dc()",text)

class Quasar: # Obfuscated to enhance security and mitigate the risk of algorithm reverse engineering or data compromise.
    @staticmethod
    def encrypt(original, algo_index, pad_index, key, seed):return runwithin(replace(replace(replace(decode_base64(reverse_string(shiftinwin(QAE_MP,"""GajBibpByYgYWagACIgACIgAiC0ZWaoNXLg0DI0ZWaoNHIgACIgACIgACIgAiC6UGZvNmblBCdv5GImlGIgACIgACIgoQKxASLg4WZs9lchh2YgwSMoQnbpRmbhJnLyBSPgQnZph2cgACIgACIgAiC6QHelRHIulGIjBicvZGIgACIK01Wg0DI0xWdzVmcgACIgoQKkVWZzhSbvRmbhJlLt9GZuFmcg0DIyBCIgAiCpMnchh2Yo4WZsBSPg4WZs9lchh2YgACIgoQZsJWY05WayBnLn5WayR3cg0DIzJXYoNGIgACIKojc0NHI+0CIpUWdyRVPlR2bj5WZgwCdulGI6QWZlNHIsIHdzBiO0hXZ0hCZlV2cfhGdpd3X0ZWaoNHImVGZKoAdulmMyR3cgQncvBXbpBSUhJ3bsl3Ug02byZmCz92ZsFGZhBHIzFGIz92ZsF2Xn5WakRWYwBCLz92ZsFGIzFGIz1Ga0lmcvdGbhBCdy9GctlGIHFkchNXY1FFIt9mcmpQbvRmbhJHIscmbpJHdzBCdy9GctlmCKkCZlRGZhBnb1hyYuVnZfVGZvNWZkBibyVHdlJHIgACIgACIgoQZu9mTg4mc1RXZyBCIgACIgACIgACIgogOl52bOBycpBCZlRGZhBnb1BiZpBCIgACIgACIKkyajFmYfRWZ0ZWaoNHKj5Wdm9VZk92YlR2XkFGcg0DIkVGZkFGcuVHIgACIgACIgoQKlNHbhZUPlR2bj5WZgwCZlV2cgsCIpkXZrhCdulmMyR3cgwycoQWZlN3XoRXa39FdmlGazBSPgs2YhJ2XkVGdmlGazBCIgACIgACIK0FelRmbp91bnxWYbN3bnxWYg0DIj5Wdm9VZk92YlRGIs8FIgACIgACIgoQX4VGZul2XkFGcbN3bnxWYkFGcg0DIj5Wdm9VZk92YlR2XkFGcgwyXgACIgACIgAiC6kCZlV2cgwSeltGIsgXZk5WafRWYwBCL4VGZul2XvdGbhBCLzhyZulGZkFGcfhGdpd3XlR2bjVGZgYWZkBCIgAiCk9Ga0VWbjlGdhR3cABCIgAiCKkSZ1JHV9UGZvNmblBCLkVWZzByKgkSeltGK05WayIHdzBCLkVGZkFGcoQWZlN3XoRXa39FdmlGazBibyVHdlJHIgACIgACIgoQKkVGZvNmblhyYuVnZfVGZvNmbl9FZhBHI9ACZlRGZhBHIgACIgACIgoQKzhyYuVnZfVGZvNmblBSPgQWZk92YuVGIgACIgACIgoQX4VGZul2XkFGcbN3bnxWYkFGcg0DIfBCLj5Wdm9VZk92YuV2XkFGcgACIgACIgAiCdhXZk5Waf92ZsF2Wz92ZsFGI9AyXgwyYuVnZfVGZvNmblBCIgACIgACIKoTKkVWZzBCL5V2agwCelRmbp9FZhBHIsgXZk5Waf92ZsFGIsMHKn5WakRWYw9Fa0l2dfVGZvNmblBiZlRGIgACIKQ2boRXZtNWa0FGdzBEIgACIKojUTFFIzNXYsNmCKkCdsV3clJHKul2bq5yJnAibyVHdlJHIgACIKkyYoQmblBHch5CdsV3clJHIgACIgACIgACIgAiC6U2csVGIgACIgACIgoQKdhHZp91dl52WzJXYoNGKk5WZwBXYuQHb1NXZyBCIgACIgACIgACIgogblx2XyFGajBSJgkCdmlGazByKggHZphCI9ACekl2X3VmbgACIgACIgACIgACIKkyYogXZk5WauMnchh2Yg0DI4RWagACIgACIgACIgACIKozcyF"""))),"QuasarAG","SyloraQAPI"),"encode_with_padding","ewp"),"decode_with_padding","dwp"), "QSR.ewp", original, algo_index, pad_index, key, seed)
    @staticmethod
    def decyrpt(encrypted, algo_index, pad_index, key, seed):return runwithin(replace(replace(replace(decode_base64(reverse_string(shiftinwin(QAE_MP,"""GajBibpByYgYWagACIgACIgAiC0ZWaoNXLg0DI0ZWaoNHIgACIgACIgACIgAiC6UGZvNmblBCdv5GImlGIgACIgACIgoQKxASLg4WZs9lchh2YgwSMoQnbpRmbhJnLyBSPgQnZph2cgACIgACIgAiC6QHelRHIulGIjBicvZGIgACIK01Wg0DI0xWdzVmcgACIgoQKkVWZzhSbvRmbhJlLt9GZuFmcg0DIyBCIgAiCpMnchh2Yo4WZsBSPg4WZs9lchh2YgACIgoQZsJWY05WayBnLn5WayR3cg0DIzJXYoNGIgACIKojc0NHI+0CIpUWdyRVPlR2bj5WZgwCdulGI6QWZlNHIsIHdzBiO0hXZ0hCZlV2cfhGdpd3X0ZWaoNHImVGZKoAdulmMyR3cgQncvBXbpBSUhJ3bsl3Ug02byZmCz92ZsFGZhBHIzFGIz92ZsF2Xn5WakRWYwBCLz92ZsFGIzFGIz1Ga0lmcvdGbhBCdy9GctlGIHFkchNXY1FFIt9mcmpQbvRmbhJHIscmbpJHdzBCdy9GctlmCKkCZlRGZhBnb1hyYuVnZfVGZvNWZkBibyVHdlJHIgACIgACIgoQZu9mTg4mc1RXZyBCIgACIgACIgACIgogOl52bOBycpBCZlRGZhBnb1BiZpBCIgACIgACIKkyajFmYfRWZ0ZWaoNHKj5Wdm9VZk92YlR2XkFGcg0DIkVGZkFGcuVHIgACIgACIgoQKlNHbhZUPlR2bj5WZgwCZlV2cgsCIpkXZrhCdulmMyR3cgwycoQWZlN3XoRXa39FdmlGazBSPgs2YhJ2XkVGdmlGazBCIgACIgACIK0FelRmbp91bnxWYbN3bnxWYg0DIj5Wdm9VZk92YlRGIs8FIgACIgACIgoQX4VGZul2XkFGcbN3bnxWYkFGcg0DIj5Wdm9VZk92YlR2XkFGcgwyXgACIgACIgAiC6kCZlV2cgwSeltGIsgXZk5WafRWYwBCL4VGZul2XvdGbhBCLzhyZulGZkFGcfhGdpd3XlR2bjVGZgYWZkBCIgAiCk9Ga0VWbjlGdhR3cABCIgAiCKkSZ1JHV9UGZvNmblBCLkVWZzByKgkSeltGK05WayIHdzBCLkVGZkFGcoQWZlN3XoRXa39FdmlGazBibyVHdlJHIgACIgACIgoQKkVGZvNmblhyYuVnZfVGZvNmbl9FZhBHI9ACZlRGZhBHIgACIgACIgoQKzhyYuVnZfVGZvNmblBSPgQWZk92YuVGIgACIgACIgoQX4VGZul2XkFGcbN3bnxWYkFGcg0DIfBCLj5Wdm9VZk92YuV2XkFGcgACIgACIgAiCdhXZk5Waf92ZsF2Wz92ZsFGI9AyXgwyYuVnZfVGZvNmblBCIgACIgACIKoTKkVWZzBCL5V2agwCelRmbp9FZhBHIsgXZk5Waf92ZsFGIsMHKn5WakRWYw9Fa0l2dfVGZvNmblBiZlRGIgACIKQ2boRXZtNWa0FGdzBEIgACIKojUTFFIzNXYsNmCKkCdsV3clJHKul2bq5yJnAibyVHdlJHIgACIKkyYoQmblBHch5CdsV3clJHIgACIgACIgACIgAiC6U2csVGIgACIgACIgoQKdhHZp91dl52WzJXYoNGKk5WZwBXYuQHb1NXZyBCIgACIgACIgACIgogblx2XyFGajBSJgkCdmlGazByKggHZphCI9ACekl2X3VmbgACIgACIgACIgACIKkyYogXZk5WauMnchh2Yg0DI4RWagACIgACIgACIgACIKozcyF"""))),"QuasarAG","SyloraQAPI"),"encode_with_padding","ewp"),"decode_with_padding","dwp"), "QSR.dwp", encrypted, algo_index, pad_index, key, seed)