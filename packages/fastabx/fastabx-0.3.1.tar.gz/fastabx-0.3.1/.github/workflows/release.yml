name: Release Workflow

on:
  push:
    tags:
      - "*"

jobs:
  build:
    name: Build wheel
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-14, windows-latest]
        cuda-version: ["12.4.1"]
      fail-fast: false
    env:
      GLIBC_VERSION: "2_34"
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

        # https://github.com/Dao-AILab/flash-attention/blob/main/.github/workflows/publish.yml
      - name: Free up disk space
        if: runner.os == 'Linux'
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL

      - name: Set up swap space
        if: runner.os == 'Linux'
        uses: pierotofy/set-swap-space@v1.0
        with:
          swap-size-gb: 10

      - name: Install CUDA ${{ matrix.cuda-version }} on Windows
        if: ${{ runner.os == 'Windows' }}
        id: cuda-toolkit-windows
        shell: pwsh
        run: packaging/setup_cuda.ps1
        env:
            INPUT_CUDA_VERSION: ${{ matrix.cuda-version }}

      - name: Install CUDA ${{ matrix.cuda-version }} on Linux
        if: ${{ runner.os == 'Linux' }}
        uses: Jimver/cuda-toolkit@v0.2.21
        id: cuda-toolkit-linux
        with:
          cuda: ${{ matrix.cuda-version }}
          method: "network"
          sub-packages: '["nvcc"]'
          linux-local-args: '["--toolkit"]'

      - name: Set CUDA_HOME on Linux
        if: ${{ runner.os == 'Linux' }}
        run: echo "CUDA_HOME=${{steps.cuda-toolkit.outputs.CUDA_PATH}}" >> $GITHUB_ENV

      - name: Check CUDA installation
        if: ${{ runner.os == 'Linux' || runner.os == 'Windows' }}
        run: nvcc -V

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Build wheel
        run: uv build

      - name: Set manylinux version
        if: runner.os == 'Linux'
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            echo "PLATFORM=manylinux_${GLIBC_VERSION}_x86_64" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "ubuntu-22.04-arm" ]]; then
            echo "PLATFORM=manylinux_${GLIBC_VERSION}_aarch64" >> $GITHUB_ENV
          fi

      - name: Relabel the Linux wheel
        if: runner.os == 'Linux'
        run: |
          uvx --with patchelf auditwheel repair ./dist/*abi3-linux*.whl -w ./dist --plat $PLATFORM --exclude "libtorch*" --exclude "libc10*" --exclude "libcu*"
          rm ./dist/*abi3-linux*.whl

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: ./dist/*

  release:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move the artifacts
        run: |
          mkdir ./dist
          mv ./artifacts/**/*.whl ./artifacts/dist-ubuntu-22.04/*.tar.gz ./dist

      - name: List artifacts
        run: find ./dist

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.get_tag.outputs.TAG_NAME }}
        run: gh release create "$TAG" ./dist/*

      - name: Upload to PyPI
        run: uv publish -t ${{ secrets.UV_PUBLISH_TOKEN }}
