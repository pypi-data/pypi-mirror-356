name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"
        
    - name: Run Black formatter check
      run: black --check --diff .
      
    - name: Run Ruff linter
      run: ruff check .
      
    - name: Run MyPy type checker
      run: mypy pydoll_mcp/
      continue-on-error: true
      
    - name: Check imports with isort
      run: isort --check-only --diff .
      continue-on-error: true

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security linter
      uses: securecodewarrior/github-action-bandit@v1
      with:
        config_file: .bandit
      continue-on-error: true
      
    - name: Run Safety check
      run: |
        pip install safety
        safety check --json || true

  # Testing Matrix
  test:
    name: Test Suite
    needs: [quality]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip some combinations to save CI time
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.8'
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable xvfb
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install --cask google-chrome
        
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install googlechrome -y
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pypoetry
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[test]"
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=pydoll_mcp --cov-report=xml --cov-report=term-missing
      env:
        PYDOLL_HEADLESS: true
        PYDOLL_LOG_LEVEL: DEBUG
        
    - name: Run integration tests
      if: matrix.os == 'ubuntu-latest'
      run: |
        xvfb-run -a pytest tests/integration/ -v
      env:
        PYDOLL_HEADLESS: false
        DISPLAY: :99
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Browser Compatibility Testing
  browser-test:
    name: Browser Compatibility
    needs: [test]
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chrome, edge]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Chrome
      if: matrix.browser == 'chrome'
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: Install Edge
      if: matrix.browser == 'edge'
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
        sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
        sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/microsoft.gpg] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-dev.list'
        sudo apt update
        sudo apt install microsoft-edge-stable
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: Test browser automation
      run: |
        python -m pydoll_mcp.cli test --browser
      env:
        PYDOLL_BROWSER_TYPE: ${{ matrix.browser }}
        PYDOLL_HEADLESS: true

  # Docker Testing
  docker-test:
    name: Docker Build & Test
    needs: [quality]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t pydoll-mcp:test .
        
    - name: Test Docker container
      run: |
        docker run --rm pydoll-mcp:test python -m pydoll_mcp.cli test
        
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose up -d
        sleep 30
        docker-compose exec -T pydoll-mcp python -m pydoll_mcp.cli health
        docker-compose down

  # Package Building
  build:
    name: Build Distribution
    needs: [test, security]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest
        
    - name: Check manifest
      run: check-manifest
      
    - name: Build source distribution
      run: python -m build --sdist
      
    - name: Build wheel distribution
      run: python -m build --wheel
      
    - name: Check distribution
      run: |
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # Release Creation
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, docker-test, build]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # PyPI Publishing
  publish-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [release]
    runs-on: ubuntu-latest
    environment: release
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verify_metadata: true

  # Docker Publishing
  publish-docker:
    name: Publish Docker Image
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [docker-test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: jinsongroh/pydoll-mcp
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment Notification
  notify:
    name: Deployment Notification
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [publish-pypi, publish-docker]
    runs-on: ubuntu-latest
    
    steps:
    - name: Send deployment notification
      run: |
        echo "🚀 PyDoll MCP Server ${{ github.ref_name }} has been successfully deployed!"
        echo "📦 PyPI: https://pypi.org/project/pydoll-mcp/"
        echo "🐳 Docker Hub: https://hub.docker.com/r/jinsongroh/pydoll-mcp"
        echo "📖 GitHub Release: https://github.com/JinsongRoh/pydoll-mcp/releases/tag/${{ github.ref_name }}"