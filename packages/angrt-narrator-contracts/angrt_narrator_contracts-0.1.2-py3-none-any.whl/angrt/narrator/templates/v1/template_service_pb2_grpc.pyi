"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import narrator.templates.v1.template_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class TemplateServiceStub:
    """---------- Сервис ----------"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetTemplate: grpc.UnaryUnaryMultiCallable[
        narrator.templates.v1.template_service_pb2.GetTemplateRequest,
        narrator.templates.v1.template_service_pb2.GetTemplateResponse,
    ]

    FindTemplates: grpc.UnaryUnaryMultiCallable[
        narrator.templates.v1.template_service_pb2.FindTemplatesRequest,
        narrator.templates.v1.template_service_pb2.FindTemplatesResponse,
    ]

    UpsertTemplate: grpc.UnaryUnaryMultiCallable[
        narrator.templates.v1.template_service_pb2.UpsertTemplateRequest,
        narrator.templates.v1.template_service_pb2.UpsertTemplateResponse,
    ]

class TemplateServiceAsyncStub:
    """---------- Сервис ----------"""

    GetTemplate: grpc.aio.UnaryUnaryMultiCallable[
        narrator.templates.v1.template_service_pb2.GetTemplateRequest,
        narrator.templates.v1.template_service_pb2.GetTemplateResponse,
    ]

    FindTemplates: grpc.aio.UnaryUnaryMultiCallable[
        narrator.templates.v1.template_service_pb2.FindTemplatesRequest,
        narrator.templates.v1.template_service_pb2.FindTemplatesResponse,
    ]

    UpsertTemplate: grpc.aio.UnaryUnaryMultiCallable[
        narrator.templates.v1.template_service_pb2.UpsertTemplateRequest,
        narrator.templates.v1.template_service_pb2.UpsertTemplateResponse,
    ]

class TemplateServiceServicer(metaclass=abc.ABCMeta):
    """---------- Сервис ----------"""

    @abc.abstractmethod
    def GetTemplate(
        self,
        request: narrator.templates.v1.template_service_pb2.GetTemplateRequest,
        context: _ServicerContext,
    ) -> typing.Union[narrator.templates.v1.template_service_pb2.GetTemplateResponse, collections.abc.Awaitable[narrator.templates.v1.template_service_pb2.GetTemplateResponse]]: ...

    @abc.abstractmethod
    def FindTemplates(
        self,
        request: narrator.templates.v1.template_service_pb2.FindTemplatesRequest,
        context: _ServicerContext,
    ) -> typing.Union[narrator.templates.v1.template_service_pb2.FindTemplatesResponse, collections.abc.Awaitable[narrator.templates.v1.template_service_pb2.FindTemplatesResponse]]: ...

    @abc.abstractmethod
    def UpsertTemplate(
        self,
        request: narrator.templates.v1.template_service_pb2.UpsertTemplateRequest,
        context: _ServicerContext,
    ) -> typing.Union[narrator.templates.v1.template_service_pb2.UpsertTemplateResponse, collections.abc.Awaitable[narrator.templates.v1.template_service_pb2.UpsertTemplateResponse]]: ...

def add_TemplateServiceServicer_to_server(servicer: TemplateServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
