Metadata-Version: 2.4
Name: ogmready
Version: 0.1.6
Summary: An object-graph mapper based on owlready2
Author-email: Gianluca Zavan <gianlucagianluca18@gmail.com>
License:                    GNU LESSER GENERAL PUBLIC LICENSE
                               Version 3, 29 June 2007
        
        Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
        Everyone is permitted to copy and distribute verbatim copies
        of this license document, but changing it is not allowed.
        
        This version of the GNU Lesser General Public License incorporates
        the terms and conditions of version 3 of the GNU General Public
        License, supplemented by the additional permissions listed below.
        
        0. Additional Definitions.
        
        As used herein, "this License" refers to version 3 of the GNU Lesser
        General Public License, and the "GNU GPL" refers to version 3 of the GNU
        General Public License.
        
        "The Library" refers to a covered work governed by this License,
        other than an Application or a Combined Work as defined below.
        
        An "Application" is any work that makes use of an interface provided
        by the Library, but which is not otherwise based on the Library.
        Defining a subclass of a class defined by the Library is deemed a mode
        of using an interface provided by the Library.
        
        A "Combined Work" is a work produced by combining or linking an
        Application with the Library. The particular version of the Library
        with which the Combined Work was made is also called the "Linked
        Version".
        
        The "Minimal Corresponding Source" for a Combined Work means the
        Corresponding Source for the Combined Work, excluding any source code
        for portions of the Combined Work that, considered in isolation, are
        based on the Application, and not on the Linked Version.
        
        The "Corresponding Application Code" for a Combined Work means the
        object code and/or source code for the Application, including any data
        and utility programs needed for reproducing the Combined Work from the
        Application, but excluding the System Libraries of the Combined Work.
        
        1. Exception to Section 3 of the GNU GPL.
        
        You may convey a covered work under sections 3 and 4 of this License
        without being bound by section 3 of the GNU GPL.
        
        2. Conveying Modified Versions.
        
        If you modify a copy of the Library, and, in your modifications, a
        facility refers to a function or data to be supplied by an Application
        that uses the facility (other than as an argument passed when the
        facility is invoked), then you may convey a copy of the modified
        version:
        
        a) under this License, provided that you make a good faith effort to
        ensure that, in the event an Application does not supply the
        function or data, the facility still operates, and performs
        whatever part of its purpose remains meaningful, or
        
        b) under the GNU GPL, with none of the additional permissions of
        this License applicable to that copy.
        
        3. Object Code Incorporating Material from Library Header Files.
        
        The object code form of an Application may incorporate material from
        a header file that is part of the Library. You may convey such object
        code under terms of your choice, provided that, if the incorporated
        material is not limited to numerical parameters, data structure
        layouts and accessors, or small macros, inline functions and templates
        (ten or fewer lines in length), you do both of the following:
        
        a) Give prominent notice with each copy of the object code that the
        Library is used in it and that the Library and its use are
        covered by this License.
        
        b) Accompany the object code with a copy of the GNU GPL and this license
        document.
        
        4. Combined Works.
        
        You may convey a Combined Work under terms of your choice that,
        taken together, effectively do not restrict modification of the
        portions of the Library contained in the Combined Work and reverse
        engineering for debugging such modifications, if you also do each of
        the following:
        
        a) Give prominent notice with each copy of the Combined Work that
        the Library is used in it and that the Library and its use are
        covered by this License.
        
        b) Accompany the Combined Work with a copy of the GNU GPL and this license
        document.
        
        c) For a Combined Work that displays copyright notices during
        execution, include the copyright notice for the Library among
        these notices, as well as a reference directing the user to the
        copies of the GNU GPL and this license document.
        
        d) Do one of the following:
        
               0) Convey the Minimal Corresponding Source under the terms of this
               License, and the Corresponding Application Code in a form
               suitable for, and under terms that permit, the user to
               recombine or relink the Application with a modified version of
               the Linked Version to produce a modified Combined Work, in the
               manner specified by section 6 of the GNU GPL for conveying
               Corresponding Source.
        
               1) Use a suitable shared library mechanism for linking with the
               Library.  A suitable mechanism is one that (a) uses at run time
               a copy of the Library already present on the user's computer
               system, and (b) will operate properly with a modified version
               of the Library that is interface-compatible with the Linked
               Version.
        
        e) Provide Installation Information, but only if you would otherwise
        be required to provide such information under section 6 of the
        GNU GPL, and only to the extent that such information is
        necessary to install and execute a modified version of the
        Combined Work produced by recombining or relinking the
        Application with a modified version of the Linked Version. (If
        you use option 4d0, the Installation Information must accompany
        the Minimal Corresponding Source and Corresponding Application
        Code. If you use option 4d1, you must provide the Installation
        Information in the manner specified by section 6 of the GNU GPL
        for conveying Corresponding Source.)
        
        5. Combined Libraries.
        
        You may place library facilities that are a work based on the
        Library side by side in a single library together with other library
        facilities that are not Applications and are not covered by this
        License, and convey such a combined library under terms of your
        choice, if you do both of the following:
        
        a) Accompany the combined library with a copy of the same work based
        on the Library, uncombined with any other library facilities,
        conveyed under the terms of this License.
        
        b) Give prominent notice with the combined library that part of it
        is a work based on the Library, and explaining where to find the
        accompanying uncombined form of the same work.
        
        6. Revised Versions of the GNU Lesser General Public License.
        
        The Free Software Foundation may publish revised and/or new versions
        of the GNU Lesser General Public License from time to time. Such new
        versions will be similar in spirit to the present version, but may
        differ in detail to address new problems or concerns.
        
        Each version is given a distinguishing version number. If the
        Library as you received it specifies that a certain numbered version
        of the GNU Lesser General Public License "or any later version"
        applies to it, you have the option of following the terms and
        conditions either of that published version or of any later version
        published by the Free Software Foundation. If the Library as you
        received it does not specify a version number of the GNU Lesser
        General Public License, you may choose any version of the GNU Lesser
        General Public License ever published by the Free Software Foundation.
        
        If the Library as you received it specifies that a proxy can decide
        whether future versions of the GNU Lesser General Public License shall
        apply, that proxy's public statement of acceptance of any version is
        permanent authorization for you to choose that version for the
        Library.
        
Project-URL: Homepage, https://github.com/gianzav/ogmready
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: owlready2>=0.47
Requires-Dist: inflection
Dynamic: license-file

ogmready is a python library that is built upon
[owlready2](https://pypi.org/project/owlready2/) and strives to be an easy to
use Object-Graph Mapper, enabling the use of a Knowledge Graph based on an
Ontology as a viable alternative to relational databases. ogmready lets the user
define their domain classes and specify later how they should be mapped to
ontology concepts, leaving the application logic and the persistance strategy
decoupled.

# Quickstart

First, install the package:

```
pip install ogmready
```

Then define an Ontology, using owlready2 or your tool of choice:

```python
onto = owlready2.get_ontology("http://example.org/")

with onto:
    class Person(owlready2.Thing):
        pass

    class Dog(owlready2.Thing):
        pass

    class name(owlready2.DataProperty, owlready2.FunctionalProperty):
        range = [str]

    class age(owlready2.DataProperty, owlready2.FunctionalProperty):
        range = [int]

    class id(owlready2.DataProperty, owlready2.FunctionalProperty):
        range = [int]

    class hasDog(owlready2.ObjectProperty, owlready2.FunctionalProperty):
        domain = [Person]
        range = [Dog]

```

You can also add definitions under different namespaces:

```python
other_namespace = "http://other.org/"
with onto.get_namespace(other_namespace):
    class color(owlready2.DataProperty):
        range = [str]
```

Define your domain classes:

```python
@dataclass
class Dog:
    id: int
    name: str
    colors: Set[str]

@dataclass
class Person:
    id: int
    name: str
    age: int
    dog: Dog
```

And finally the mappers

```python
# Create a subclass of Mapper
class DogMapper(Mapper):
    # Specify the domain and ontology classes to perfom the mapping
    __source_class__ = Dog
    __target_class__ = ("Dog", "http://example.org/")

    # Define the mappings
    # Data property, functional by default
    id = DataPropertyMapping("id", primary_key=True),
    name = DataPropertyMapping("name"),

    # functional = False means that the property is a Set
    # we can pass a tuple (name, namespace) to say that a name is in a
    # different namespace than the default one
    colors = DataPropertyMapping(("color", other_namespace), functional=False)

class PersonMapper(Mapper):
    __source_class__ = Person
    __target_class__ = ("Person", "http://example.org")

    id = DataPropertyMapping("id", primary_key=True),
    name = DataPropertyMapping("name"),
    age = DataPropertyMapping("age"),
    # We can reference other object mappers
    dog = ObjectPropertyMapping("hasDog", DogMapper)
```

At this point, we can use the methods `from_owl` and `to_owl` of the mappers:

```python
# create the objects
d = Dog(1, "pluto", {"black", "white"})
p = Person(2, "mario", 10, d)

# create the mapper objects, passing the ontology as an argument
person_mapper = PersonMapper(onto)
dog_mapper = DogMapper(onto)

# map to owlready2 objects
onto_dog = dog_mapper.to_owl(d)
onto_person = person_mapper.to_owl(p)

# map back
p == person_mapper.from_owl(onto_person)
d == dog_mapper.from_owl(onto_dog)
```

# About lists

Since Knowledge Graph are usually stored in RDF format, which is based on
triples `<subject, predicate, object>`, storing lists is not straightforward.
While we use an OWL Ontology, we cannot use `rdf:List`, because it is used in the
OWL specification. A way around this is to use an Ontology that
lets us express the relations between lists and their elements: an example is
the [Collections
Ontology](https://github.com/collections-ontology/collections-ontology), which
defines the semantics of lists. To express something like `L = [a]`, using
the Collections Ontology we would say something like (mind that this is a
simplified RDF):

- `<L, is_a, List>`
- `<L, item, a_in_L>`
- `<a_in_L, is_a, ListItem>`
- `<a_in_L, index, 0>`
- `<a_in_L, itemContent, a>`

So `a_in_L` acts as a connecting object between `L` and its content `a`. An
intermediate element like `a_in_L` is needed because we could have more
occurrences of `a` inside of `L`. Moreover, with `index` we can express the
order of the elements.

In ogmready, an example could be (using `"http://purl.org/co/"`, the
Collections ontology):

```python
@dataclass
class Person:
    friends: List[Person]

co = "http://purl.org/co/"

class PersonMapper(Mapper):
    __source_class__ = Person
    __target_class__ = ("Person", "http://example.org/")

    # the parameters are:
    # - relation to connect list to items (e.g. 'item')
    # - OWL class of the connecting item (e.g. 'ListItem')
    # - relation to get to the actual item (e.g. 'itemContent')
    # - mapper for the item contents
    # - property to express the ordering of the elements
    friends = ListMapping(("item", co), ("ListItem", co), ("itemContent", co), PersonMapper, ("index", co))
```

# Defining your own mappings

It suffices to create a subclass of `Mapping` and implement the methods
`from_owl` and `to_owl`. The method `to_query` is relevant if the field that you
are mapping will be used in the queries to search for an already available
object in the ontology. The method `is_primary_key` by default returns `False`,
so changing its implementation makes sense if a property that you are mapping
could be a primary key, like `DataPropertyMapping`.

# A note on object retrieval

**TL;DR. It is always a good idea to specify a field as a primary key, if it is
possible**.

Since we could be mapping a deeply nested object, of course we don't want to
create new objects inside the Knowledge Graph if they are referenced by others
but are already storedy. By default, the `Mapper` class tries to search for the
referenced objects based on the fields that were specified as `primary_key`, but
in case no `primary_key` is defined, it defaults to a deep search (search of
_all_ object fields inside the Knowledge Graph), which could become slow and in
certain cases it could loop if there are circular references.

# Missing features (contributions are welcome!)

- [ ] Allowing the use of multiple mappers for a field, e.g. for `friend: Person
| Dog` it would be nice to say "use `PersonMapper` or `DogMapper`" based on
      what you find
