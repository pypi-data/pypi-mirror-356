[tool.poetry]
name = "plate-simulation"
version = "0.2.0"

license = "MIT"
description = """
    Specialized mesh, model, and simulation for a parameterization of \
    the halfspace + overburden and plate geological setting"""

authors = ["Mira Geoscience <support@mirageoscience.com>"]
readme = "package.rst"
repository = "https://github.com/MiraGeoscience/plate-simulation"
maintainers = [
    "Benjamin Kary <benjamink@mirageoscience.com>",
    "Dominique Fournier <dominiquef@mirageoscience.com>",
]
documentation  = "https://mirageoscience-plate-simulation.readthedocs-hosted.com/"
homepage = "https://www.mirageoscience.com/mining-industry-software/python-integration/"
keywords = ["geology", "geophysics", "modelling", "simulation"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Natural Language :: English",
]

packages = [
    { include = "plate_simulation" },
    { include = "plate_simulation-assets" },
]

include = [
    { path = "COPYING" },
    { path = "COPYING.LESSER" },
    { path = "LICENSE" },
    { path = "README.rst" },
    { path = "THIRD_PARTY_SOFTWARE.rst" },
    { path = "docs/**/THIRD_PARTY_SOFTWARE.rst" },
]

exclude = [
]

[tool.poetry.dependencies]
python = "^3.10"

numpy = "~1.26.0"  # also in geoh5py, simpeg and geoana
pydantic = "^2.5.2"
Rtree = "~1.2.0"
scipy = "~1.14.0"  # also in geoapps-utils
threadpoolctl = "~3.3.0"
trimesh = "~4.1.3"

## Pip dependencies from Git repositories
#----------------------------------------
geoh5py = {version = ">=0.11.0, <0.12.dev", allow-prereleases = true}
#geoh5py = {git = "https://github.com/MiraGeoscience/geoh5py.git", rev = "release/0.11.0"}

param-sweeps = {version = ">=0.2.1, <0.3.dev", allow-prereleases = true}
#param-sweeps = {git = "https://github.com/MiraGeoscience/param-sweeps.git", rev = "release/0.2.1"}

geoapps-utils = {version = ">=0.5.0, <0.6.dev", allow-prereleases = true}
#geoapps-utils = {git = "https://github.com/MiraGeoscience/geoapps-utils.git", rev = "release/0.5.0"}

octree-creation-app = {version = ">=0.3.0, <0.4.dev", allow-prereleases = true}
#octree-creation-app = {git = "https://github.com/MiraGeoscience/octree-creation-app.git", rev = "release/0.3.0"}

simpeg-drivers = {version = ">=0.3.0, <0.4.dev", source = "pypi", allow-prereleases = true}
#simpeg-drivers = {git = "https://github.com/MiraGeoscience/simpeg-drivers.git", rev = "release/0.3.0" }


## about pip dependencies
# to be specified to work with conda-lock
# - from PyPI: my_package = { version = "1.2.3", source = "pypi" }
# - from JFrog Artifactory: my_package = { version = "1.2.3" }
# - from URL:
#   - for a tags:   my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/tags/VERSION_TAG.zip#sha256=" }
#   - for a branch: my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/heads/BRANCH.zip#sha256=" }
# Note - conda-lock does not support the syntax: my_package = { git = ... }
#        while poetry2conda supports only { git = "...", tag = "..." }, and not { url = ... }

[[tool.poetry.source]]
name = "public"
url = "https://mirageoscienceltd.jfrog.io/artifactory/api/pypi/public-pypi-dev/simple"
priority = "supplemental"


[[tool.poetry.source]]
name = "test"
url = "https://mirageoscienceltd.jfrog.io/artifactory/api/pypi/test-pypi/simple"
priority = "supplemental"

[tool.conda-lock.dependencies]
libblas = "*=*mkl"  # because simpeg already brings in the MKL

## indirect dependencies, forcing them here for installation through Conda not pip
#---------------------------------------------------------------------------------
dask-core = "2025.3.*"  # from simpeg[dask], simpeg-drivers
discretize = ">=0.11.0, <0.12.dev"  # also in simpeg, simpeg-drivers, octree-creation-app
distributed = "2025.3.*"  # conda needs explicit dask-core etc for equivalent dask[distributed]
fsspec = ">=2022.*"  # from simpeg[dask]
geoana = ">=0.7.0, <0.8.dev"  # from simpeg
h5py = ">=3.2.1, <4.0.dev"  # from geoh5py
matplotlib-base = ">=3.8.4, <3.9.dev"  # from simpeg
mkl = ">=2024.2.2"
Pillow = ">=10.3.0, <10.4.dev"  # from geoh5py
pydiso = ">=0.1.0, <0.2.dev"  # from simpeg-drivers: possible solver for simpeg
pymatsolver = ">=0.3.0, <0.4.dev"  # from simpeg
python-mumps = ">=0.0.3, <0.0.4.dev"  # from simpeg-drivers: possible solver for simpeg
scikit-learn = ">=1.4.0, <1.5.dev"  # from simpeg-drivers
tqdm = ">=4.66.1, <5.0.dev"  # from curve-apps, peak-finder-app, simpeg
zarr = ">=2.14.2, <2.15.dev"  # from simpeg[dask], simpeg-drivers

[tool.poetry.dev-dependencies]
Pygments = "*"
pylint = "*"
pytest = "*"
pytest-cov = "*"
pyyaml = '*'
jinja2 = '*'
packaging = '*'
tomli = "*"
sphinx = "^5.0"
readthedocs-sphinx-ext = "*"

## about jfrog repository
# change url to have access to other repo (e.g. public-pypi-prod, public-pypi-dev)

[tool.conda-lock]
platforms = ["win-64", "linux-64"]
channels = ["conda-forge"]

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
ignore = [
    "B028",  # no-explicit-stacklevel for warnings.warn()
    "E501",  # line-too-long - code is reformatted (do not care about comments and docstring)
    "F401",  # unsused-import - covered by pycln
        "RUF005",  # collection-literal-concatenation - wrong suggestion with numpy arrays

]
select = [
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "B006",  # Do not use mutable data structures for argument defaults
    "B9",  # flake8-bugbear opiniated warnings
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C9",  # mccabe
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "RUF",  # ruff rules
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.format]
# default formatting is just fine

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true

plugins = [
    'numpy.typing.mypy_plugin'
]

[tool.coverage.run]
branch = true
source = ["plate_simulation"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]

[tool.coverage.html]
skip_empty = true
skip_covered = true

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"
