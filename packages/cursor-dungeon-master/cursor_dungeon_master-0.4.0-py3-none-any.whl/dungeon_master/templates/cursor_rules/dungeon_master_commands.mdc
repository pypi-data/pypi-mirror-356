---
description: 
globs: 
alwaysApply: false
---
# Dungeon Master CLI Command Reference

This document provides a comprehensive reference for all Dungeon Master CLI commands, their options, and example outputs.

## Core Commands Overview

Dungeon Master provides these primary commands:

1. **`dm init`** - Initialize the Dungeon Master environment
2. **`dm validate`** - Core pre-commit hook functionality
3. **`dm review`** - Display documentation status
4. **`dm create_lore`** - Create missing documentation files
5. **`dm map`** - Generate visual repository structure

## Command Details

### 1. `dm init`

Initializes the Dungeon Master environment in your repository.

**Usage:**
```bash
dm init
```

**Actions:**
- Creates `.lore/` directory if it doesn't exist
- Generates `cursor.rules` file
- Creates empty `dmconfig.json` and `dmcache.json` files
- Updates `.gitignore` to exclude `dmcache.json`
- Sets up pre-commit hook

**Example Output:**
```
✨ [bold green]Initializing Dungeon Master[/bold green] ✨

📁 Creating directory structure...
  ✅ Created [cyan].lore/[/cyan] directory
  
📝 Creating configuration files...
  ✅ Created [cyan]dmconfig.json[/cyan]
  ✅ Created [cyan]dmcache.json[/cyan]
  
🔮 Setting up gitignore...
  ✅ Updated [cyan].gitignore[/cyan] to exclude [cyan]dmcache.json[/cyan]
  
🧙 Creating Cursor rules...
  ✅ Generated [cyan]cursor.rules[/cyan]
  
[bold green]Initialization complete! Your project is now protected by Dungeon Master.[/bold green]
```

### 2. `dm validate`

Core pre-commit hook functionality that verifies documentation is up-to-date.

**Usage:**
```bash
dm validate
```

**Actions:**
- Verifies each tracked file has corresponding lore file
- Checks that changed tracked files have updated lore
- Ensures lore files contain more than just template content
- Detects placeholder text in required sections
- Validates professional diagrams are included when required
- Blocks commits when validation fails

**Example Output:**
```
🔒 [bold green]Validating Documentation[/bold green] 🔒

🔍 Checking git staged changes...
  Found 4 changed files with track_lore decorators

📝 Checking documentation status...
  ✓ [cyan]src/models/user.py[/cyan] → [cyan].lore/users.md[/cyan] [bold green]UPDATED[/bold green]
  ✓ [cyan]src/api/payouts.py[/cyan] → [cyan].lore/payments-platform/payouts.md[/cyan] [bold green]UPDATED[/bold green]
  ✗ [cyan]src/api/payment.py[/cyan] → [cyan].lore/payments.md[/cyan] [bold red]NOT UPDATED[/bold red]
  ✗ [cyan]src/auth/login.py[/cyan] → [cyan].lore/auth/login.md[/cyan] [bold yellow]TEMPLATE ONLY[/bold yellow]

❌ [bold red]VALIDATION FAILED[/bold red]

[bold yellow]REQUIRED ACTIONS:[/bold yellow]
  1. UPDATE [cyan].lore/payments.md[/cyan] TO REFLECT CHANGES IN [cyan]src/api/payment.py[/cyan]
     REVIEW ALL FILES TRACKED BY THIS LORE FILE:
     - src/api/payment.py
     - src/api/payment_processor.py
     
  2. COMPLETE [cyan].lore/auth/login.md[/cyan] TEMPLATE WITH ACTUAL DOCUMENTATION
     REVIEW ALL FILES TRACKED BY THIS LORE FILE:
     - src/auth/login.py
     
     MISSING REQUIRED SECTIONS: Overview, Key Functions/Components, Diagrams

🛑 [bold red]COMMIT BLOCKED: UPDATE DOCUMENTATION BEFORE PROCEEDING[/bold red]
```

### 3. `dm review`

Displays documentation status using rich formatting.

**Usage:**
```bash
dm review [options]
```

**Options:**
```
--mark-reviewed <file>  Mark a file as reviewed (use with EXTREME caution)
```

**Actions:**
- Shows table with lore file paths
- Lists all files associated with each lore document
- Highlights lore files requiring updates based on changed source files
- Identifies lore files that still contain template placeholders
- Provides clear visualization of documentation needs

**Example Output:**
```
🔍 [bold green]Documentation Review[/bold green] 🔍

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━┓
┃ [bold]Lore File[/bold]                      ┃ [bold]Tracked Files[/bold]                              ┃ [bold]Status[/bold]              ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━┩
│ .lore/payments.md              │ src/api/payment.py [bold yellow][changed][/bold yellow]               │ [bold red]NEEDS UPDATE[/bold red]         │
│                               │ src/api/payment_processor.py                  │                      │
├───────────────────────────────┼────────────────────────────────────────────────┼──────────────────────────┤
│ .lore/payments-platform/      │ src/api/payouts.py                            │ [bold green]UP TO DATE[/bold green]         │
│ payouts.md                    │                                                │                      │
├───────────────────────────────┼────────────────────────────────────────────────┼──────────────────────────┤
│ .lore/users.md                │ src/models/user.py                             │ [bold green]UP TO DATE[/bold green]         │
├───────────────────────────────┼────────────────────────────────────────────────┼──────────────────────────┤
│ .lore/auth/login.md           │ src/auth/login.py                              │ [bold yellow]TEMPLATE ONLY[/bold yellow]      │
└───────────────────────────────┴────────────────────────────────────────────────┴──────────────────────────┘

❗ [bold yellow]REQUIRED ACTIONS:[/bold yellow]
  → UPDATE [cyan].lore/payments.md[/cyan] TO REFLECT CHANGES IN [cyan]src/api/payment.py[/cyan]
    REVIEW THESE FILES TO UNDERSTAND THE ENTIRE SYSTEM:
    - src/api/payment.py
    - src/api/payment_processor.py
    
  → COMPLETE [cyan].lore/auth/login.md[/cyan] TEMPLATE WITH ACTUAL DOCUMENTATION
    REVIEW THESE FILES TO UNDERSTAND THE ENTIRE SYSTEM:
    - src/auth/login.py
```

#### The `--mark-reviewed` Option

**CRITICAL WARNING: RESTRICTED USE ONLY**

The `--mark-reviewed` option exists as an emergency override for extremely specific cases. It should be used with extreme caution and only after thorough evaluation.

**Usage:**
```bash
dm review --mark-reviewed <file>
```

**When to use:**
- ONLY when file changes are so minor they have absolutely NO impact on documentation accuracy
- ONLY after thoroughly reviewing both the code changes and existing documentation
- ONLY when you can confidently confirm the documentation remains accurate

**Example (proper use):**
```bash
# A file with only formatting changes or typo fixes
dm review --mark-reviewed src/api/payment.py
```

**WARNING: NEVER use for:**
- Changes that affect behavior documented in the lore file
- Changes that add or remove functionality
- Changes that modify interfaces or APIs
- When rushing to meet deadlines
- When you're uncertain about documentation impact

**Accountability:**
All uses of this override are logged and should be justified in commit messages.

### 4. `dm create_lore`

Creates missing documentation files based on track_lore decorators.

**Usage:**
```bash
dm create_lore [lore_file]
```

**Parameters:**
- `lore_file` (optional) - Specific lore file to create

**Actions:**
- Scans all decorators in codebase
- Creates empty lore files that don't exist yet
- Creates any necessary subdirectories within `.lore/`
- Populates new files with the standard documentation template

**Example Output:**
```
🔮 [bold green]Creating Lore Files[/bold green] 🔮

🔍 Scanning for track_lore decorators...
  Found 5 unique lore files referenced in code

📝 Checking documentation status...
  ✅ [cyan].lore/payments.md[/cyan] (exists)
  ✅ [cyan].lore/payments-platform/payouts.md[/cyan] (exists)
  ✅ [cyan].lore/users.md[/cyan] (exists)
  ❌ [cyan].lore/config.md[/cyan] (missing)
  ❌ [cyan].lore/auth/login.md[/cyan] (missing)
  
📁 Creating necessary directories...
  ✅ Created [cyan].lore/auth/[/cyan] directory
  
📑 Creating missing lore files with templates...
  ✅ Created [cyan].lore/config.md[/cyan] with documentation template
  ✅ Created [cyan].lore/auth/login.md[/cyan] with documentation template

✨ [bold green]Complete![/bold green] All lore files are now created.
⚠️ [bold yellow]WARNING:[/bold yellow] FILL OUT ALL TEMPLATES WITH ACTUAL DOCUMENTATION BEFORE COMMITTING.
```

### 5. `dm map`

Generates a visual representation of repository structure.

**Usage:**
```bash
dm map
```

**Actions:**
- Creates a file tree map of all tracked files
- Shows relationships between source files and documentation
- Saves output as `map.md` in `.lore/` directory

**Example Output:**
```
📊 [bold green]Generating Repository Map[/bold green] 📊

🔍 Scanning repository structure...

📂 [bold]Project Tree:[/bold]
├── 📁 src/
│  ├── 📄 api/
│  │  ├── 📄 payment.py [italic yellow](mdc:tracked by .lore/payments.md)[/italic yellow]
│  │  ├── 📄 payment_processor.py [italic yellow](mdc:tracked by .lore/payments.md)[/italic yellow]
│  │  └── 📄 payouts.py [italic yellow](mdc:tracked by .lore/payments-platform/payouts.md)[/italic yellow]
│  ├── 📄 models/
│  │  └── 📄 user.py [italic yellow](mdc:tracked by .lore/users.md)[/italic yellow]
│  ├── 📄 auth/
│  │  └── 📄 login.py [italic yellow](mdc:tracked by .lore/auth/login.md)[/italic yellow]
│  └── 📄 main.py [italic yellow](mdc:tracked by .lore/app.md)[/italic yellow]
├── 📁 tests/
│  └── 📄 test_payment.py
└── 📁 .lore/
   ├── 📄 payments.md
   ├── 📁 payments-platform/
   │  └── 📄 payouts.md
   ├── 📄 users.md
   ├── 📁 auth/
   │  └── 📄 login.md
   └── 📄 app.md

✅ Map generated and saved to [cyan].lore/map.md[/cyan]
```

## Command Combinations

### Common Workflows

#### Initial Setup
```bash
dm init
# Add track_lore decorators to files
dm create_lore
# Fill out documentation templates
```

#### Check Documentation Status
```bash
dm review
```

#### Prepare for Commit
```bash
dm validate
# Address any issues
git add .
git commit -m "Your commit message"
```

#### Force Documentation Creation
```bash
dm create_lore
```

## Error Handling

### Common Errors

#### Missing Configuration
```
❌ Error: Dungeon Master not initialized in this repository.
Run `dm init` to set up Dungeon Master.
```

#### Invalid Decorator Format
```
⚠️ Warning: Invalid track_lore format in src/api/payment.py:
# track_lore(payments.md)
Should be: # track_lore("payments.md")
```

#### Pre-commit Hook Failure
```
❌ Pre-commit hook failed: Documentation validation failed.
Run `dm validate` for details.
```

## Environment Variables

### Configuration Options
- `DM_CONFIG_PATH` - Custom path to config file
- `DM_LORE_DIR` - Custom documentation directory
- `DM_DISABLE_COLORS` - Disable colored output
- `DM_LOG_LEVEL` - Set logging level (debug, info, warning, error)
