---
description: 
globs: 
alwaysApply: false
---
# Dungeon Master Documentation Enforcement

Dungeon Master is a pre-commit enforcement tool that **blocks commits when documentation is missing or outdated**. It ensures all tracked source files are accompanied by comprehensive, up-to-date documentation in the `.lore/` directory.

## Core Enforcement Principles

### **Documentation is MANDATORY**
- ‚úÖ **ALWAYS maintain** documentation for tracked files
- ‚úÖ **ALWAYS update** documentation when modifying tracked files
- ‚ùå **NEVER bypass** validation with `git commit --no-verify`
- ‚ùå **NEVER leave** empty documentation templates

### **Pre-commit Blocking is a FEATURE**
When Dungeon Master blocks your commit, it's protecting code quality. Embrace it.

## File Tracking with track_lore

### Decorator Syntax
Mark files that require documentation using the `track_lore` decorator:

**Python:**
```python
# track_lore("payments.md")
# track_lore("payments-platform/payouts.md")
def process_payment():
    # ...
```

**TypeScript/JavaScript:**
```typescript
// track_lore("payments.md")
// track_lore("payments-platform/agents.md")
function processPayment() {
    // ...
}
```

### Decorator Rules
- Multiple decorators allowed per file
- Path is relative to `.lore/` directory (no need to include `.lore/` prefix)
- Supports nested directory structures (e.g., `payments-platform/payouts.md`)
- Subdirectories are automatically created as needed

## Documentation Requirements

### Template Structure
Every documentation file **MUST** be properly filled out with:

1. **Overview**
   - Clear, specific description of what the file does and its purpose
   - NOT generic placeholders

2. **Key Functions/Components**
   - Document ALL main functions, classes, or features
   - Include usage examples

3. **Dependencies**
   - List any important dependencies or related components
   - Explain why each is needed

4. **Professional Diagrams**
   - At least one sequence diagram
   - At least one component/architecture diagram
   - Additional diagrams as appropriate

### Required Sections
Sections marked "REQUIRED" in the template **MUST** be filled out:
- Overview
- Key Functions/Components
- Diagrams

### Quality Standards

#### Valid Documentation
‚úÖ **GOOD** - Specific and comprehensive:
```markdown
## Overview
Implements payment processing operations using Stripe API.
Handles credit card transactions, refunds, and subscription management.
```

‚ùå **BAD** - Generic placeholder:
```markdown
## Overview
[PLEASE FILL OUT: Overview]
```

### Empty Templates = INVALID
- Documentation with placeholder text ‚Üí **INVALID**
- Generic descriptions ‚Üí **INVALID**
- Missing required sections ‚Üí **INVALID**
- Missing professional diagrams ‚Üí **INVALID**

## Validation Process

### What Gets Validated
1. **File Existence**: Each tracked file must have a corresponding documentation file
2. **Documentation Updates**: When tracked files change, documentation must be updated
3. **Template Completion**: Documentation files must not contain placeholder text
4. **Required Sections**: All sections marked "REQUIRED" must be filled out
5. **Diagram Quality**: Professional diagrams must be included and properly formatted

### When Validation Occurs
- During pre-commit hook (automatically)
- When running `dm validate` manually
- When running `dm review` to check status

### Validation Failures
When validation fails, the commit is blocked with clear error messages:
```
‚ùå VALIDATION FAILED

REQUIRED ACTIONS:
  1. UPDATE .lore/payments.md TO REFLECT CHANGES IN src/api/payment.py
     REVIEW ALL FILES TRACKED BY THIS LORE FILE:
     - src/api/payment.py
     - src/api/payment_processor.py
  
  2. COMPLETE .lore/auth/login.md TEMPLATE WITH ACTUAL DOCUMENTATION
     REVIEW ALL FILES TRACKED BY THIS LORE FILE:
     - src/auth/login.py
     
     MISSING REQUIRED SECTIONS: Overview, Key Functions/Components, Diagrams

üõë COMMIT BLOCKED: UPDATE DOCUMENTATION BEFORE PROCEEDING
```

## Manual Review Override

### Strict Usage Policy

The `dm review --mark-reviewed <file>` command exists as an **EMERGENCY ESCAPE HATCH ONLY**. It should be used with **EXTREME CAUTION** and only in very specific circumstances.

**CRITICAL: This override exists ONLY for cases where:**
1. A file change is so minor it truly has NO IMPACT on documentation (e.g., formatting fixes, typo corrections)
2. You have THOROUGHLY REVIEWED both the code changes and existing documentation
3. You can CONFIDENTLY CONFIRM the documentation remains accurate despite the code changes

**WARNING: SEVERE MISUSE OF THIS FEATURE WILL LEAD TO:**
- Outdated documentation
- Broken trust in documentation accuracy
- Confusion for new team members
- Technical debt accumulation
- Potential project failure

### Proper Evaluation Before Override

BEFORE using the override command, you MUST:
1. THOROUGHLY REVIEW the changed file to understand all modifications
2. ASSESS the corresponding documentation to verify it remains accurate
3. CONFIRM the changes are truly minor and don't affect documented behavior

### When NOT to Use Override
**NEVER use the override when:**
- The code change affects behavior described in documentation
- The code change adds or removes functionality
- The code change modifies interfaces or APIs
- You are uncertain about the documentation impact
- You are rushing to meet a deadline
- You plan to "update documentation later"

### Accountability
All uses of the override are logged and should be justified in commit messages.

## Template Validation

### Template Detection
The system detects template-only documentation by:
- Checking for placeholder text like `[PLEASE FILL OUT: Overview]`
- Verifying required sections have been modified from their default state
- Ensuring diagrams have been customized for the specific component

### Template Requirements
Documentation templates must be filled out with:
- Comprehensive overview of the component
- Detailed description of key functions/features
- Professional diagrams showing relationships and behavior
- Concrete usage examples where appropriate

## Enforcement Configuration

### Configuration File
The `dmconfig.json` file allows customization of enforcement rules:
```json
{
  "requiredSections": ["Overview", "Key Functions/Components", "Diagrams"],
  "templateDetection": {
    "placeholderPatterns": ["\\[PLEASE FILL OUT:.*\\]"],
    "diagramRequired": true
  }
}
```

### Customization Options
- Define which sections are required
- Adjust template detection patterns
- Configure diagram requirements
- Set file exclusion patterns

## What to Track

### DO Track
- Core business logic
- API endpoints and routes
- Complex algorithms
- Configuration modules
- Database models
- Critical utilities

### DON'T Track
- Test files
- Simple configs
- Auto-generated code
- Build artifacts
- Third-party code

## Error Recovery

### "Validation Failed" on Commit
```bash
dm validate          # See specific issues
dm create_lore       # Create any missing documentation files
# Edit documentation files - fill ALL sections
git add .lore/       # Stage documentation
git commit           # Retry
```

### Common Issues
1. **Empty templates**: Fill out all sections with real content
2. **Outdated docs**: Update documentation to match code changes
3. **Missing files**: Run `dm create_lore` to create documentation
4. **Missing diagrams**: Add professional diagrams using mermaid.js syntax

## Integration Points

### Pre-commit Hook
- Installed automatically with `dm init`
- Runs validation before every commit
- Cannot be bypassed (except emergency: `git commit --no-verify`)

### CI/CD Pipeline
```bash
# Add to CI pipeline
dm validate
```

## Strict Rules

### MANDATORY
1. **ALWAYS** run `dm validate` before pushing
2. **ALWAYS** fill templates with meaningful content
3. **ALWAYS** update docs with code changes
4. **ALWAYS** include professional diagrams

### FORBIDDEN
1. **NEVER** use `git commit --no-verify`
2. **NEVER** leave placeholder text
3. **NEVER** ignore validation failures
4. **NEVER** remove `track_lore` to avoid documentation

### Documentation Philosophy
- Documentation is **part of the code**, not separate
- Empty documentation is **worse than none**
- Pre-commit blocking **protects code quality**
- Diagrams are **essential** for understanding complex systems
- Embrace documentation as **communication with future developers**

---
**Remember**: Dungeon Master blocks commits to ensure documentation quality. This is intentional. Work with it, not against it.
