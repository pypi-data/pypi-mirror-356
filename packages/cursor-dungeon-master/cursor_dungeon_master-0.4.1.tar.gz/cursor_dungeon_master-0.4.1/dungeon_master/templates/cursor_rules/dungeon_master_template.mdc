---
description: 
globs: 
alwaysApply: false
---
# Dungeon Master Documentation Template

This document outlines the standard documentation template used by Dungeon Master and the requirements for proper documentation.

## Template Structure

When new documentation files are created, they are populated with a standard template that:

- Provides guidance on what documentation should cover
- Contains placeholders for relevant sections
- Includes clear indicators for sections that must be filled out
- Helps developers understand what documentation is needed

## Standard Template

```markdown
# Documentation for {filename}

## Overview
<!-- REQUIRED: Provide a brief overview of what this file does and its purpose -->
[PLEASE FILL OUT: Overview]

## Dependencies
<!-- List any important dependencies or related components -->
[PLEASE FILL OUT: Dependencies]

## Key Functions/Components
<!-- REQUIRED: Document the main functions, classes, or features -->
[PLEASE FILL OUT: Functions/Components]

## Usage Examples
<!-- Provide examples of how to use this code -->
[PLEASE FILL OUT: Examples]

## Diagrams
<!-- REQUIRED: Include professional-quality diagrams that illustrate the component's structure, behavior, or relationships -->
<!-- Use mermaid.js syntax for diagrams: https://mermaid-js.github.io/ -->
<!-- Include at least one diagram that best represents this component -->

### Sequence Diagram
```mermaid
sequenceDiagram
    participant User
    participant Component
    participant Service
    
    User->>Component: Action
    Component->>Service: Request
    Service-->>Component: Response
    Component-->>User: Result
    
    %% Replace with actual sequence flow relevant to this component
```

### Component/Architecture Diagram
```mermaid
flowchart TD
    A[Client] --> B[This Component]
    B --> C[Database]
    B --> D[External Service]
    
    %% Replace with actual architecture relevant to this component
```

### Additional Diagrams
<!-- Add any other diagrams that help explain this component -->
<!-- Class diagrams, state diagrams, etc. as appropriate -->

## Notes
<!-- Any additional information that might be important -->

---

_This documentation is linked to {tracked_files}_
```

## Template Fields

- `{filename}` - Automatically populated with the name of the documentation file
- `{tracked_files}` - Automatically populated with a list of source files that track this documentation

## Required Sections

The following sections MUST be completed before validation will pass:

1. **Overview** - Explain what this component does and its purpose
2. **Key Functions/Components** - Document the main functionality
3. **Diagrams** - Include professional diagrams showing relationships and behavior

## Diagram Requirements

Diagrams are a critical part of documentation and must:

- Be professional and detailed, not high-level or superficial
- Use proper mermaid.js syntax
- Be customized to accurately represent the component
- Include at least one sequence or flow diagram
- Show relationships between components

## Template Completion Process

1. Start by understanding all source files that reference this documentation
2. Fill out the Overview section with a clear description of purpose
3. Document all key functions, classes, or features
4. Replace placeholder diagrams with accurate representations
5. Add usage examples to demonstrate proper implementation
6. Include any additional notes or context

## Template Detection

The system detects template-only documentation by:

- Checking for placeholder text like `[PLEASE FILL OUT: Overview]`
- Verifying required sections have been modified from their default state
- Ensuring diagrams have been customized for the specific component

## Best Practices for Documentation

### Content Guidelines

- **Be Specific**: Avoid generic descriptions; provide concrete details
- **Show Examples**: Include code snippets demonstrating usage
- **Document Behavior**: Explain not just what it does, but how it works
- **Note Limitations**: Document edge cases and constraints
- **Cross-Reference**: Link to related documentation when appropriate

### Diagram Guidelines

- **Keep It Simple**: Focus on clarity over complexity
- **Show Relationships**: Illustrate how components interact
- **Use Consistent Styling**: Maintain visual consistency across diagrams
- **Label Everything**: Ensure all nodes and edges are clearly labeled
- **Update When Code Changes**: Keep diagrams synchronized with implementation

### Writing Style

- Use clear, concise language
- Write in present tense
- Use active voice
- Break complex concepts into bullet points
- Include code examples for clarity

## Template Customization

The standard template can be customized by modifying the template file in your project. However, the required sections must still be present and completed.

## Documentation Review Checklist

Before submitting documentation for review, ensure:

- [ ] All required sections are filled out
- [ ] Placeholder text has been replaced
- [ ] Diagrams accurately represent the component
- [ ] Examples are provided where appropriate
- [ ] Information is accurate and up-to-date
- [ ] No template artifacts remain

## Common Documentation Pitfalls

- **Placeholder Text**: Leaving `[PLEASE FILL OUT: ...]` in the document
- **Generic Diagrams**: Not customizing diagrams for the specific component
- **Missing Context**: Not explaining why the component exists
- **Incomplete Coverage**: Not documenting all key functions
- **Outdated Information**: Not updating when code changes
