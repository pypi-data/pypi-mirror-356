---
description: 
globs: 
alwaysApply: false
---
# Dungeon Master Documentation Workflow

This guide outlines the documentation-driven development workflow using Dungeon Master to ensure code and documentation evolve together.

## Primary Interaction: CLI Commands

Dungeon Master provides a set of CLI commands that enforce documentation requirements throughout development:

1. **`dm validate`** - Core pre-commit hook that blocks commits when documentation isn't updated
2. **`dm review`** - Display documentation status with rich formatting
3. **`dm create_lore`** - Create missing documentation files from decorators
4. **`dm map`** - Generate visual representation of repository structure
5. **`dm init`** - Initialize Dungeon Master in a repository

## Standard Development Workflow

### 1. Project Initialization
- Run `dm init` to set up the Dungeon Master environment
- Creates `.lore/` directory, config files, and git hooks

### 2. Code Decoration
- Add `track_lore` decorators to source files
- Python: `# track_lore("path/to/doc.md")`
- TypeScript: `// track_lore("path/to/doc.md")`
- Multiple decorators per file are supported
- Path is relative to `.lore/` directory (no need to include `.lore/` prefix)

### 3. Documentation Creation
- Run `dm create_lore` to generate documentation templates
- Templates are created in `.lore/` directory with the specified path
- Fill out ALL required sections in the template
- Include professional diagrams using mermaid.js syntax

### 4. Status Review
- Run `dm review` to check documentation status
- Shows which files need updates or have template-only documentation
- Provides clear action items for required updates

### 5. Pre-commit Validation
- `dm validate` runs automatically as a pre-commit hook
- Blocks commits when documentation isn't updated
- Provides specific instructions for resolving issues

## Documentation Update Scenarios

### Scenario 1: New File Creation
1. Create a new source file with `track_lore` decorator
2. Run `dm create_lore` to generate documentation template
3. Fill out ALL required sections in the template
4. Commit both source file and documentation together

### Scenario 2: Existing File Modification
1. Modify a source file that has `track_lore` decorator
2. Update the corresponding documentation in `.lore/` directory
3. Ensure documentation accurately reflects the changes
4. Commit both modified source and updated documentation together

### Scenario 3: Documentation-Only Updates
1. Identify documentation that needs improvement
2. Update the documentation file in `.lore/` directory
3. Commit the documentation changes

## Important Guidelines

### Documentation Requirements
- All template sections marked "REQUIRED" must be filled out
- Diagrams must be professional and detailed
- Documentation must be accurate and comprehensive
- Multiple files can reference the same documentation

### Manual Review Override

**CRITICAL: The manual review override should be used EXTREMELY SPARINGLY and ONLY in specific circumstances.**

The `dm review --mark-reviewed <file>` command exists for the rare case where:
1. A file change is so minor it truly has NO IMPACT on documentation (e.g., formatting fixes, typo corrections)
2. You have THOROUGHLY REVIEWED both the code changes and existing documentation
3. You can CONFIDENTLY CONFIRM the documentation remains accurate despite the code changes

**WARNING: NEVER use this override when:**
- The code change affects behavior described in documentation
- The code change adds or removes functionality
- The code change modifies interfaces or APIs
- You are uncertain about the documentation impact

**Proper evaluation process before using override:**
1. THOROUGHLY REVIEW the changed file to understand all modifications
2. ASSESS the corresponding documentation to verify it remains accurate
3. CONFIRM the changes are truly minor and don't affect documented behavior

The override applies to both files needing updates and template-only files, but should be used with extreme caution in both cases.

## Visualization Tools

### Repository Mapping
- Run `dm map` to generate a visual representation of the repository
- Shows relationships between source files and documentation
- Helps identify documentation coverage gaps
- Saved as `.lore/map.md` for reference

## Best Practices

### Documentation Quality
- Write documentation for humans first, tools second
- Include concrete examples and use cases
- Keep diagrams updated with code changes
- Use clear, concise language
- Document "why" not just "what"

### Code Organization
- Group related functionality under shared documentation
- Use multiple decorators when code affects multiple areas
- Consider documentation needs when designing code structure

### Team Workflow
- Review documentation changes as part of code reviews
- Treat documentation as a first-class deliverable
- Discuss documentation strategy before implementation
- Update documentation before marking tasks as complete

## Iterative Documentation Pattern

### Initial Documentation (Before Coding)
1. Add `track_lore` to new file
2. Run `dm create_lore` to create templates
3. Fill out documentation with:
   - Intended purpose and design
   - Planned functions/classes
   - Expected dependencies
   - Required diagrams

### During Implementation
1. Code incrementally, checking `dm review` regularly
2. When implementation differs from plan:
   - Update documentation to reflect reality, not original plans
   - Ensure diagrams are updated to match implementation

### After Implementation
1. Final documentation review:
   ```bash
   dm validate  # Run validation
   ```
2. Ensure documentation accurately describes:
   - What the code actually does
   - Real function signatures
   - Actual dependencies used
   - Discovered edge cases
   - Professional diagrams showing component relationships

## Common Workflows

### Adding New Tracked File
```bash
# 1. Add decorator to file
echo '# track_lore("payments.md")' > src/api/payment.py

# 2. Create documentation
dm create_lore

# 3. Fill out documentation completely
$EDITOR .lore/payments.md

# 4. Implement feature
# ... write code ...

# 5. Commit everything
git add src/api/payment.py .lore/
git commit -m "feat: Add payment API"
```

### Refactoring Existing Code
```bash
# 1. Check current status
dm review

# 2. Make refactoring changes
# ... modify code ...

# 3. Run validation to see what needs updating
dm validate

# 4. Update documentation with new design
$EDITOR .lore/payments.md

# 5. Commit changes
git add -A
git commit -m "refactor: Optimize payment processing"
```

### Emergency Fixes
For critical production fixes when documentation can't be updated immediately:
```bash
# ONLY for true emergencies
git commit --no-verify -m "EMERGENCY: Fix critical production bug"

# Immediately after:
dm review  # Check what documentation needs updating
# Update documentation files with fix details
git commit -m "docs: Update documentation for emergency fix"
```

## Integration with Development Tools

### IDE Integration
- Keep `.lore/` directories visible in file explorer
- Set up file watchers to run `dm review` on save
- Create snippets for `track_lore` decorators

### Code Review Process
- Review documentation changes alongside code
- Ensure documentation updates match code changes
- Check for empty or generic documentation
- Verify professional diagrams are included and accurate

### Continuous Integration
Add to CI pipeline:
```yaml
# Example GitHub Actions
- name: Validate Documentation
  run: |
    dm validate
    if [ $? -ne 0 ]; then
      echo "Documentation validation failed"
      exit 1
    fi
```

## Troubleshooting Workflow Issues

### "Documentation is up-to-date" but it's not
```bash
dm validate  # Run validation again
```

### Large refactoring with many files
```bash
# Check what needs updating
dm review

# Create any missing documentation files
dm create_lore

# Then edit each documentation file individually
```

### Merge conflicts in .lore/
```bash
# Resolve conflicts manually
git add .lore/
dm validate  # Ensure documentation is still valid
```

## Workflow Philosophy

1. **Documentation is part of the definition of "done"**
2. **Empty documentation is technical debt**
3. **Documentation drives understanding**
4. **Commit rejection is protection, not punishment**
5. **Professional diagrams are essential for understanding**

---
*Dungeon Master ensures your future self (and teammates) will thank you for maintaining documentation. Embrace the workflow, don't fight it.*
