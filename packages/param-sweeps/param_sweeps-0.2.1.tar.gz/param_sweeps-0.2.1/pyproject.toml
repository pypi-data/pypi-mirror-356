[tool.poetry]
name = "param-sweeps"
version = "0.2.1"

description = "Parameter sweeper for ui.json powered applications."
license = "MIT"
authors = ["Mira Geoscience <support@mirageoscience.com>"]
maintainers = ["Benjamin Kary <benjamink@mirageoscience.com>"]
repository = "https://github.com/MiraGeoscience/param-sweeps"
#documentation  = "https://mirageoscience-param-sweeps.readthedocs-hosted.com/"
homepage = "https://www.mirageoscience.com/mining-industry-software/python-integration/"

readme = "package.rst"
keywords = ["geology", "geophysics", "earth sciences"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
#    "Operating System :: MacOS",
    "Natural Language :: English",
]

include = [
    { path = "COPYING" },
    { path = "COPYING.LESSER" },
    { path = "LICENSE" },
    { path = "THIRD_PARTY_SOFTWARE.rst" },
    { path = "docs/**/THIRD_PARTY_SOFTWARE.rst" },
]

[tool.poetry.dependencies]
python = "^3.10"

numpy = "~1.26.0"  # also in geoh5py

## dependencies from Git repositories
#------------------------------------
geoh5py = {version = ">=0.11.0a3, <0.12.dev", allow-prereleases = true}
#geoh5py = {git = "https://github.com/MiraGeoscience/geoh5py.git", rev = "release/0.11.0"}
#geoh5py = {path = "../geoh5py", develop = true}

[tool.poetry.group.dev.dependencies]
Pygments = "*"
pylint = "*"
pytest = "*"
pytest-cov = "*"
pyyaml = '*'
jinja2 = '*'
packaging = '*'
tomli = "*"


[[tool.poetry.source]]
name = "public"
url = "https://mirageoscienceltd.jfrog.io/artifactory/api/pypi/public-pypi-dev/simple"
priority = "supplemental"


[[tool.poetry.source]]
name = "test"
url = "https://mirageoscienceltd.jfrog.io/artifactory/api/pypi/test-pypi/simple"
priority = "supplemental"

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
ignore = [
    "B028",  # no-explicit-stacklevel for warnings.warn()
    "E501",  # line-too-long - code is reformatted (do not care about comments and docstring)
    "F401",  # unsused-import - covered by pycln
    "RUF005",  # collection-literal-concatenation - wrong suggestion with numpy arrays
]
select = [
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "B006",  # Do not use mutable data structures for argument defaults
    "B9",  # flake8-bugbear opiniated warnings
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C9",  # mccabe
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "RUF",  # ruff rules
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.format]
# default formatting is just fine

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true

plugins = [
    'numpy.typing.mypy_plugin'
]

[tool.coverage.run]
branch = true
source = ["param_sweeps"]
omit = []

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]

fail_under = 85

[tool.coverage.html]
skip_empty = true
skip_covered = true

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"
