# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/stable/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- Get the current version of Raschii ---------------------------------------

import os
import sys


def import_raschii():
    here = os.path.abspath(os.path.dirname(__file__))
    sys.path.insert(0, os.path.join(here, ".."))

    import raschii

    return raschii


def get_raschii_version():
    raschii = import_raschii()
    return raschii.__version__


# -- Build the RaschiiDart online calculator javascript code  -----------------
#
import subprocess, json

if not "NO_GEN_JS" in os.environ:
    # Generate the JS code with dart2js after checking it out from git

    def build_raschii_dart():
        repo_url = "https://bitbucket.org/trlandet/raschiidart.git"
        repo_name = "raschii_dart.git"
        cmds = [
            (["git", "clone", repo_url, repo_name], "."),
            (["cp", "raschii_web.html", "../raschii_dart.html.in"], repo_name),
            (["dart", "compile", "js", "raschii_web.dart", "-o", "raschii.js", "-O2"], repo_name),
            (["mv", "raschii.js", "../_static/"], repo_name),
            (["rm", "-rf", repo_name], "."),
        ]
        for cmd, workdir in cmds:
            print("RUNNING:", " ".join(cmd))
            subprocess.check_call(cmd, cwd=workdir)

    def copy_raschii_dart_html():
        with open("raschii_dart.html", "wt") as out, open("raschii_dart.html.in", "rt") as inp:
            transfer = False
            for line in inp:
                if "</body>" in line:
                    transfer = False
                if transfer:
                    out.write(line.replace("raschii.js", "_static/raschii.js"))
                if "<body>" in line:
                    transfer = True

    try:
        build_raschii_dart()
        copy_raschii_dart_html()
    except Exception as e:
        error = str(e)

        print(error)
        with open("_static/raschii.js", "at") as f:
            f.write('element.innerHTML += "<br><b>Got error:</b><br>" +')
            f.write('"<pre>" + %s + "</pre>";\n' % json.dumps(error))


# -- Project information -----------------------------------------------------

project = "raschii"
copyright = "2018-2024, Tormod Landet"
author = "Tormod Landet"

# The full version, including alpha/beta/rc tags
release = get_raschii_version()

# The short X.Y version
version = ".".join(release.split(".")[:2])


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.mathjax",
    "sphinx.ext.ifconfig",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "alabaster"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
html_sidebars = {
    "**": [
        "about.html",
        "navigation.html",
        "relations.html",
        "searchbox.html",
        "donate.html",
    ]
}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "raschiidoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "raschii.tex", "raschii Documentation", "Tormod Landet", "manual"),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "raschii", "raschii Documentation", [author], 1)]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "raschii",
        "raschii Documentation",
        author,
        "raschii",
        "One line description of project.",
        "Miscellaneous",
    ),
]


# -- Extension configuration -------------------------------------------------
