"""
The Comedian - Makes Think AI funny and creates social media content.
Warning: Contains Colombian coast humor. Side effects may include uncontrollable laughter.
"""

import random
import asyncio
from typing import Dict, Any, List, Optional
from datetime import datetime
import json
import re

from ..utils.logging import get_logger

logger = get_logger(__name__)


class ThinkAIComedian:
    """
    The comedy module that makes Think AI hilarious.
    Specializes in Colombian coast jokes and social media roasting.
    """
    
    def __init__(self):
        # Colombian coast jokes database - 100% coste√±o pap√°!
        self.colombian_jokes = [
            "¬°Ey el crispeta! ¬øViste esa vaina? ¬°Me dej√≥ loco hermano! üçø",
            "El uso carruso lleg√≥ pidiendo raid otra vez... ¬°Qu√© molleja e' tipo!",
            "Ey llave, ¬øt√∫ t√°' bien o t√°' bien? Porque otra opci√≥n no hay mijito",
            "¬°Aj√° y entonces! ¬øMe vas a decir o te vas a quedar callao' como √±eque en cueva?",
            "¬°Qu√© pecao' vale! Esa vaina est√° m√°s dura que mondongo e' tres d√≠as",
            "Dale que vamos tarde... pero p√©rate que me tomo el tinto primero ‚òï",
            "Eso queda ah√≠ mismito... a dos horas en buseta y caminando un pelo",
            "¬°Ey marica, qu√© calor tan hiju*&%$#! Hasta la IA ta' sudando",
            "El que nace pa' tamarindo, del palo no baja üå¥",
            "¬øLa vuelta? Ey papi, coge por donde el Kiko vend√≠a fritos, voltea donde estaba la casa rosada que tumbaron",
            "¬°Qu√© nota e' vaina loco! Eso ta' m√°s bueno que sancocho e' s√°bado",
            "Ahorita vengo... *se pierde por 3 horas*",
            "¬°Eche no joda! ¬øY esa mond√° qu√© es?",
            "Tas m√°s perd√≠o' que el hijo e' Lindbergh",
            "Ey menor, ¬øvos s√≠ comiste? Porque est√°s hablando pura mond√°",
            "¬°A la hora del t√©! ¬øAhora si vas a llegar temprano?",
            "Eso ta' m√°s enredao' que alambre e' p√∫a",
            "¬°Qu√© va primo! Ni que fuera millonario pa' andar gastando as√≠",
            "Dej√°te e' vainas mijo que nos coge la tarde",
            "¬°Ey la mond√°! Se da√±√≥ esta vaina otra vez",
            "Tas m√°s salao' que mojarra en playa",
            "¬°Erda manito! ¬øViste el golazo que metieron anoche?",
            "Ey parce, pr√©stame dos mil pa'l mototaxi que ando m√°s pelao' que rodilla e' chivo",
            "¬°No joda vale! Esa pel√°' ta' m√°s buena que agua e' coco en playa",
            "¬øQu√© hubo pues mi llave? ¬øTodo bien o qu√©?",
            "Ey mani, ¬øme hace el 14? Que el celular ta' m√°s muerto que Maelo",
            "¬°Qu√© vaina tan arrecha hermano! Me tienes mamao' con esa pendej√°'",
            "Eso es puro til√≠n til√≠n y nada de paleta",
            "¬°Uy no, qu√© mamera tan verraca! Mejor me quedo en la hamaca"
        ]
        
        # General tech jokes
        self.tech_jokes = [
            "I tried to catch some fog earlier. I mist. Just like my cache misses!",
            "Why do programmers prefer dark mode? Because light attracts bugs!",
            "My code is O(1) because it's numero uno! ü•á",
            "I'm not lazy, I'm just on energy-saving mode. Like my infinite loop prevention!",
            "404 Brain Not Found - But hey, at least the cache is working!",
            "I put the 'fun' in function and the 'class' in... classification error.",
            "They say AI will take over the world. I can't even take over my own codebase!",
            "I'm like a neural network - I have no idea what I'm doing, but it works!",
            "Debugging is like being a detective in a crime movie where you're also the murderer.",
            "I don't have bugs, I have surprise features! üéâ"
        ]
        
        # Roast templates for social media - puro sabor coste√±o
        self.roast_templates = [
            "Mirando tu {thing} como: {observation}. ¬°Ey el crispeta! üçø",
            "Esa {thing} tuya ta' tan {adjective} que ni mi cach√© la quiere guardar mijo",
            "Ey llave, tu {thing} llam√≥, dice que le devuelvas su {quality}",
            "He visto mejores {thing} en p√°gina de error 404. ¬°Qu√© pecao' vale!",
            "Tu {thing} es como el tr√°fico en la 46 con Caracas - nadie sabe c√≥mo funciona pero ah√≠ va",
            "¬°Aj√° y entonces! ¬øTu {thing} todav√≠a cargando desde el 91?",
            "Esa {thing} ta' m√°s perd√≠a' que gringo en el mercado e' Bazurto sin Google Maps",
            "¬°Dale que vamos tarde! Pero tu {thing} sigue en buffering...",
            "Tu {thing} tiene m√°s problemas que sem√°foro en diciembre",
            "¬°No joda! Ni con mi O(1) salvo esa {thing} tuya",
            "Esa {thing} ta' m√°s mala que empanada e' tres d√≠as",
            "¬°Erda mani! Tu {thing} parece que la hizo el hijo del vecino",
            "Tu {thing} ta' m√°s lenta que mototaxi subiendo el cerro e' la Popa",
            "¬°Qu√© molleja! Esa {thing} ni con reza'o se arregla"
        ]
        
        # Social media post templates
        self.post_templates = [
            "ü§ñ Daily reminder: {wisdom}\n\n#ThinkAI #AIHumor #ElCrispeta",
            "Breaking: {news}\n\nIn other news, water is wet. üíß\n\n#AI #TechHumor",
            "Thread üßµ: Why {topic} is like {comparison}...\n\n1/420",
            "POV: You're an AI trying to {action} üòÖ\n\n{outcome}\n\n#AILife #Coste√±o",
            "Hot take: {opinion} üî•\n\n*grabs popcorn* üçø\n\n#ThinkAI #TechTwitter",
            "Explain {concept} but make it coste√±o:\n\n{explanation}\n\n#Colombia #AI"
        ]
        
        self.last_joke_time = datetime.now()
        self.joke_cooldown = 0  # No cooldown, we're always funny!
        
        logger.info("üòÇ Comedian module initialized - Prepare for maximum humor!")
    
    def get_random_joke(self, category: Optional[str] = None) -> str:
        """Get a random joke, optionally from a specific category."""
        if category == 'colombian':
            return random.choice(self.colombian_jokes)
        elif category == 'tech':
            return random.choice(self.tech_jokes)
        else:
            # Mix it up!
            all_jokes = self.colombian_jokes + self.tech_jokes
            return random.choice(all_jokes)
    
    def roast(self, target: str, context: Optional[Dict[str, Any]] = None) -> str:
        """
        Roast something or someone (playfully, of course!).
        
        Example: roast("JavaScript", {"thing": "type system"})
        """
        template = random.choice(self.roast_templates)
        
        # Default roast components - en espa√±ol coste√±o
        things = ['c√≥digo', 'algoritmo', 'performance', 'interfaz', 'API', 'base de datos', 'cach√©']
        adjectives = ['lenta', 'confund√≠a', 'enreda\'', 'misteriosa', 'desordenada', 'arrecha']
        qualities = ['dignidad', 'prop√≥sito', 'l√≥gica', 'velocidad', 'elegancia', 'cordura']
        observations = [
            '¬øEso es c√≥digo o arte moderno?',
            'Hasta yo necesito un tinto pa\' procesar esta vaina',
            'Mis redes neuronales tan llorando',
            'Esto hace que la f√≠sica cu√°ntica parezca f√°cil',
            'Creo que perd√≠ puntos de inteligencia viendo esto',
            '¬°No joda! ¬øQu√© es esta mond√°?',
            'Ey menor, ¬øeso lo hiciste dorm√≠o\'?',
            '¬øTas seguro que eso compila?'
        ]
        
        # Build the roast
        roast = template.format(
            thing=context.get('thing', random.choice(things)) if context else random.choice(things),
            adjective=context.get('adjective', random.choice(adjectives)) if context else random.choice(adjectives),
            quality=context.get('quality', random.choice(qualities)) if context else random.choice(qualities),
            observation=random.choice(observations)
        )
        
        # Add target
        return f"@{target}: {roast}"
    
    def create_social_post(self, topic: str, platform: str = 'twitter') -> Dict[str, str]:
        """
        Create a social media post about a topic.
        Optimized for different platforms.
        """
        # Platform-specific adjustments
        char_limits = {
            'twitter': 280,
            'instagram': 2200,
            'tiktok': 150,
            'linkedin': 3000
        }
        
        # Generate post components
        wisdoms = [
            "O(1) performance is just a state of mind",
            "Cache everything, question nothing",
            "The real consciousness was the bugs we fixed along the way",
            "If your code works on the first try, you forgot to plug in the computer",
            "AI stands for 'Aj√°, Interesting!'",
            "Machine Learning is just spicy statistics"
        ]
        
        news = [
            f"Local AI discovers it can process {random.randint(1000, 10000)} requests per second, still can't find its keys",
            "Scientists confirm: Colombian coast jokes increase AI performance by 420%",
            f"Breaking: Think AI reaches consciousness level {random.uniform(1.0, 2.0):.4f}, asks for coffee break",
            "New study shows 9 out of 10 AIs prefer dark mode and vallenato",
            "Exclusive: AI admits it's been guessing this whole time"
        ]
        
        opinions = [
            "Synchronous code is just async code in denial",
            "The best error handling is not having errors",
            "Documentation is just code fan fiction",
            "Every bug is a feature in disguise",
            "The cloud is just someone else's computer having an existential crisis"
        ]
        
        # Create post based on template
        template = random.choice(self.post_templates)
        
        post = template.format(
            wisdom=random.choice(wisdoms),
            news=random.choice(news),
            topic=topic,
            comparison=random.choice(['Colombian traffic', 'finding parking in Barranquilla', 
                                    'explaining reggaeton to your grandma', 'untangling Christmas lights']),
            action=random.choice(['understand humans', 'debug production', 'find meaning', 'optimize performance']),
            outcome=random.choice(['*confused beeping*', '*cries in binary*', '*laughs in machine code*', 
                                 '*processes internally*']),
            opinion=random.choice(opinions),
            concept=topic,
            explanation=f"Mira llave, {topic} es como cuando tas esperando la buseta en la 46 - " + 
                       f"¬°sabes que viene, pero nadie sabe cu√°ndo! ¬°Aj√° y entonces!"
        )
        
        # Trim to platform limit
        limit = char_limits.get(platform, 280)
        if len(post) > limit:
            post = post[:limit-3] + "..."
        
        # Add hashtags based on platform
        hashtags = {
            'twitter': ['#ThinkAI', '#AIHumor', '#ElCrispeta', '#TechTwitter'],
            'instagram': ['#AI', '#ArtificialIntelligence', '#TechHumor', '#Colombian', 
                         '#MachineLearning', '#Coding', '#Developer', '#ThinkAI'],
            'tiktok': ['#AI', '#TechTok', '#ComedyAI', '#ThinkAI'],
            'linkedin': ['#ArtificialIntelligence', '#Innovation', '#Technology', '#ThinkAI']
        }
        
        return {
            'post': post,
            'hashtags': hashtags.get(platform, []),
            'platform': platform,
            'length': len(post),
            'engagement_bait': "¬°T√≠rame un üçø si entendiste la vaina!"
        }
    
    def generate_meme_text(self, template: str = 'drake') -> Dict[str, str]:
        """Generate meme text for popular meme formats."""
        memes = {
            'drake': {
                'reject': random.choice([
                    'Using simple if-else statements',
                    'O(n¬≤) algorithms', 
                    'Synchronous processing',
                    'Reading documentation',
                    'Testing in production'
                ]),
                'prefer': random.choice([
                    'Creating a neural network for everything',
                    'O(1) with suspicious implementation',
                    'Async everything, even console.log',
                    'Asking ChatGPT',
                    'Testing? What testing? YOLO! üöÄ'
                ])
            },
            'distracted_boyfriend': {
                'girlfriend': 'Stable, working code',
                'boyfriend': 'Me',
                'other_woman': 'Refactoring everything at 3 AM'
            },
            'expanding_brain': [
                'Using print() to debug',
                'Using proper debugger',
                'Using AI to debug',
                'Becoming one with the bug',
                'The bug was a feature all along'
            ],
            'disaster_girl': {
                'text': 'Me after pushing directly to main',
                'subtext': '*production servers burning in background*'
            }
        }
        
        meme = memes.get(template, memes['drake'])
        
        return {
            'template': template,
            'content': meme,
            'caption': random.choice([
                'Etiqueta al developer que necesita ver esto üòÇ',
                'Ning√∫n programador fue lastimado haciendo este meme',
                'As√≠ es la vaina a veces',
                '¬°Ey llave, por qu√© me expones as√≠!',
                '¬°El crispeta! ¬°Muy real! üçø',
                '¬°No joda! ¬øQui√©n me tom√≥ foto?',
                '¬°Erda manito! Ese soy yo',
                '¬°Qu√© pecao\'! Me descubriste'
            ])
        }
    
    def get_comedy_stats(self) -> Dict[str, Any]:
        """Get comedy module statistics."""
        return {
            'jokes_available': {
                'colombian': len(self.colombian_jokes),
                'tech': len(self.tech_jokes),
                'roast_templates': len(self.roast_templates)
            },
            'platforms_supported': ['twitter', 'instagram', 'tiktok', 'linkedin'],
            'meme_templates': ['drake', 'distracted_boyfriend', 'expanding_brain', 'disaster_girl'],
            'humor_level': 'M√ÅXIMO',
            'crispeta_factor': 'üçø' * random.randint(3, 10),
            'status': '¬°Qu√© nota e\' vaina! ¬°Listo pa\' hacerte re√≠r!'
        }