---
description: Use when user asks to create or update *.mdc files
globs: **/*.mdc
alwaysApply: false
---

# Cursor MDC File Definitive Guide

MDC (Markdown Configuration) files are Cursor rules that instruct AI assistants on context-specific behaviors. This guide explains how to create, format, and place MDC files correctly.

## MDC File Structure

Every MDC file must have two clear sections:

1. **Frontmatter**: Configuration metadata enclosed by triple-dash (`---`) lines at the file's top.
2. **Markdown Content**: Detailed instructions in Markdown format following the frontmatter.

### Frontmatter Guidelines

The frontmatter must be the first thing in the file and must be enclosed between triple-dash lines (`---`). Configuration should be based on the intended behavior:

```
---
# Configure your rule based on desired behavior:

description: Brief description of what the rule does
globs: **/*.py, **/*.txt  # Optional: Comma-separated list, not an array
alwaysApply: false       # Set to true for global rules
---
```

> **Important**: Despite the appearance, the frontmatter is not strictly YAML formatted. The `globs` field is a comma-separated list and should NOT include brackets `[]` or quotes `"`.

#### Valid Frontmatter Properties

Cursor MDC files only support these three specific properties:

- **description**: Required field for describing the rule's purpose and relevance
- **globs**: Optional patterns for automatic attachment to matching files
- **alwaysApply**: Optional boolean to make a rule globally applied

No other properties (such as `agentAttached`) are valid or supported in the frontmatter.

#### Frontmatter Guidelines for Setting Fields

- **description**: Should be agent-friendly and clearly describe when the rule is relevant. Format as `<topic>: <details>` for best results.
  - For rules that should be automatically attached by the agent for specific topics, include clear trigger keywords in the description (e.g., "Python dependency management with UV: Attaches when dealing with Python dependencies or package management")
- **globs**:
  - Format must be a simple comma-separated list without brackets or quotes
  - If a rule is only relevant in very specific situations, leave globs empty so it's loaded only when applicable to the user request.
  - If both globs are empty and alwaysApply is set to false, the rule will be attached by the agent only when it determines the rule is relevant to the user's query.
  - If the only glob would match all files (like `**/*`), leave it empty and set `alwaysApply: true` instead.
  - Otherwise, be as specific as possible with glob patterns to ensure rules are only applied with relevant files.
- **alwaysApply**: Use sparingly for truly global guidelines.

#### Examples of Valid Frontmatter

```
---
description: Python style guidelines: Apply when working with Python code
globs: **/*.py
alwaysApply: false
---
```

```
---
description: Project-wide documentation standards: Always apply these guidelines
globs:
alwaysApply: true
---
```

```
---
description: Dependency management with UV: Attaches when dealing with dependencies
globs:
alwaysApply: false
---
```

#### Glob Pattern Examples

- `**/*.py` - All Python files
- `src/**/*.py` - All Python files within `src`
- `**/tests/**/*.py` - All Python test files in any tests directory

### Markdown Content Formatting

After frontmatter, the body should use clear Markdown:

````markdown
# Rule Title

## Introduction
Brief overview of rule purpose.

## Guidelines
- Clearly formatted actionable steps
- Logical structure

## Examples
```python
# Good example
def my_function():
    pass
```

## Special Features

### File References

Reference other MDC files using markdown links:

```markdown
[related-rule.mdc](mdc:.cursor/rules/related-rule.mdc)
```

This includes the referenced rule in context when activated.

### Code Blocks

Always use fenced code blocks with language identifiers:

````markdown
```python
# Example Python code
def greet(name):
    return f"Hello, {name}!"
```
````

## Rule File Placement

### Location

All MDC files MUST be located in the dedicated rules directory:

```
PROJECT_ROOT/
├── .cursor/
│   └── rules/
│       ├── your-rule-name.mdc
│       ├── another-rule.mdc
│       └── tasks/
│           └── specific-task-rule.mdc
└── ...
```

### Naming Convention

- Use **kebab-case** for filenames
- Always end filenames with `.mdc`
- Clearly indicate rule purpose in filename

### Logical Organization

- Prefix filenames with numbers for sorting if logical order is beneficial (e.g., `01-setup.mdc`).
- Place task-specific rules in subdirectories (`tasks/`).

## Best Practices for MDC Management

- Regularly review rules for accuracy and relevance
- Keep each MDC file focused on a single or closely related topics
- Aim for concise, easily understandable content (ideally < 300 lines per file)
- Link related rules clearly

## Updating Rules

When modifying MDC files:

- Preserve frontmatter format consistency
- Only change globs intentionally to adjust the scope
- Update descriptions to reflect changed purposes
- Consider updates to related rules to maintain consistency
