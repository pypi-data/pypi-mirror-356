name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (e.g., v0.4.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.12"

jobs:
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/automake-cli
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.tag || github.ref }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Verify version matches release tag
      run: |
        # Extract version from pyproject.toml
        PACKAGE_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")

        # Extract version from release tag or workflow input (remove 'v' prefix if present)
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          RELEASE_VERSION=${{ github.event.inputs.tag }}
          RELEASE_VERSION=${RELEASE_VERSION#v}
        else
          RELEASE_VERSION=${GITHUB_REF_NAME#v}
        fi

        echo "Package version: $PACKAGE_VERSION"
        echo "Release version: $RELEASE_VERSION"

        if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
          echo "‚ùå Version mismatch: package version ($PACKAGE_VERSION) does not match release tag ($RELEASE_VERSION)"
          exit 1
        fi
        echo "‚úÖ Version verification passed"

    - name: Install dependencies
      run: uv sync --dev

    - name: Run tests
      run: |
        uv run pytest -q --disable-warnings --tb=short --cov=automake --cov-report=term-missing --cov-fail-under=80

    - name: Build package
      run: uv build

    - name: Verify package contents
      run: |
        echo "üì¶ Built packages:"
        ls -la dist/

        echo "üîç Checking wheel contents:"
        uv run python -m zipfile -l dist/*.whl

        echo "üß™ Testing package installation:"
        uv venv test-env
        source test-env/bin/activate
        uv pip install dist/*.whl

        echo "‚úÖ Testing both entry points:"
        automake --version
        automake-cli --version

        # Verify both commands show the same version
        AUTOMAKE_VERSION=$(automake --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
        AUTOMAKE_CLI_VERSION=$(automake-cli --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')

        if [ "$AUTOMAKE_VERSION" != "$AUTOMAKE_CLI_VERSION" ]; then
          echo "‚ùå Version mismatch between entry points"
          exit 1
        fi
        echo "‚úÖ Both entry points working correctly with version $AUTOMAKE_VERSION"

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true
        verbose: true

    - name: Verify PyPI publication
      run: |
        echo "‚è≥ Waiting for package to be available on PyPI..."
        sleep 30

        # Try to install from PyPI to verify publication
        PACKAGE_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")

        echo "üîç Attempting to install automake-cli==$PACKAGE_VERSION from PyPI..."
        uv venv verify-env
        source verify-env/bin/activate

        # Retry logic for PyPI propagation
        for i in {1..5}; do
          if uv pip install "automake-cli==$PACKAGE_VERSION" --index-url https://pypi.org/simple/; then
            echo "‚úÖ Package successfully installed from PyPI"
            automake-cli --version
            break
          else
            echo "‚è≥ Attempt $i failed, waiting 30 seconds..."
            sleep 30
          fi
        done
