[build-system]
requires = ["setuptools>=68.0"]
build-backend = "setuptools.build_meta"

[project]
name = "ddeutil-observe"
description = "Lightweight observation web application"
readme = {file = "README.md", content-type = "text/markdown"}
license = {text = "MIT"}
authors = [{ name = "ddeutils", email = "korawich.anu@gmail.com" }]
keywords = ['data', 'observe', 'utility', 'webserver', 'fastapi']
classifiers = [
    "Topic :: Utilities",
    "Natural Language :: English",
    "Development Status :: 4 - Beta",
    # "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.9.13"
dependencies = [
    "ddeutil[all]>=0.4.10,<0.5.0",
    "ddeutil-workflow>=0.0.78",
    "python-dotenv==1.1.0",
    "fastapi==0.115.12",
    "uvicorn==0.34.3",
    "jinja2==3.1.6",
    "sqlalchemy==2.0.41",
    "greenlet==3.2.3",

    # Authen & Security.
    "python-multipart==0.0.20",
    "email-validator==2.2.0",
    "pyjwt==2.10.1",
    "bcrypt==4.3.0",
]
dynamic = ["version"]

[project.optional-dependencies]
perf = [
    "httptools",  # NOTE: It is faster than H11
    "uvloop",
]
test = [
    "httpx==0.28.1",
    "aiosqlite==0.21.0",
    "pytest-asyncio==0.26.0",
]

[project.urls]
Homepage = "https://github.com/ddeutils/ddeutil-observe/"
"Source Code" = "https://github.com/ddeutils/ddeutil-observe/"

[tool.setuptools.dynamic]
version = {attr = "ddeutil.observe.__about__.__version__"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.shelf.version]
version = "./src/ddeutil/observe/__about__.py"
changelog = "CHANGELOG.md"
commit_msg_format = "- {subject}"

[tool.shelf.git]
commit_prefix_force_fix = true

[tool.coverage.run]
branch = true
relative_files = true
concurrency = ["thread", "multiprocessing"]
source = ["ddeutil", "tests"]

[tool.coverage.report]
exclude_lines = ["raise NotImplementedError"]

[tool.pytest.ini_options]
pythonpath = ["src"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
console_output_style = "count"
addopts = [
    "--strict-config",
    "--strict-markers",
]
filterwarnings = ["error"]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)7s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.black]
line-length = 80
target-version = ['py39']
exclude = """
(
    /(
        \\.git
        | \\.eggs
        | \\.__pycache__
        | \\.idea
        | \\.ruff_cache
        | \\.mypy_cache
        | \\.pytest_cache
        | \\.venv
        | build
        | dist
        | venv
    )/
)
"""

[tool.ruff]
line-length = 80
exclude = [
    "__pypackages__",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "build",
    "dist",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",
    "F403",
    "E402",  # Module level import not at top of file
]
