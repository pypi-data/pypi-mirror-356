# coding: utf-8

"""
    MCP Mesh Agent API

    API contract for MCP Mesh Agent HTTP endpoints.  ⚠️  CRITICAL FOR AI DEVELOPERS: This OpenAPI specification defines the AGENT-SIDE CONTRACT for Python agent HTTP wrappers.  🤖 AI BEHAVIOR RULES: - NEVER modify this spec without explicit user approval - This is SEPARATE from the registry API contract - Only applies to Python agent HTTP wrapper endpoints - Used for agent-to-external and agent health monitoring  📋 Scope: - Agent health and readiness endpoints - Agent capability and tool discovery - Agent metrics and monitoring - MCP protocol HTTP transport 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class McpError(BaseModel):
    """
    McpError
    """ # noqa: E501
    code: StrictInt = Field(description="JSON-RPC error code")
    message: StrictStr = Field(description="Error message")
    data: Optional[Dict[str, Any]] = Field(default=None, description="Additional error data")
    __properties: ClassVar[List[str]] = ["code", "message", "data"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of McpError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of McpError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "message": obj.get("message"),
            "data": obj.get("data")
        })
        return _obj


