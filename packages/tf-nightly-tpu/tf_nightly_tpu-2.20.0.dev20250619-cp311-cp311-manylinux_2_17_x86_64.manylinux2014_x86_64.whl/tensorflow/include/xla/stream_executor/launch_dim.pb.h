// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/stream_executor/launch_dim.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fstream_5fexecutor_2flaunch_5fdim_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fstream_5fexecutor_2flaunch_5fdim_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fstream_5fexecutor_2flaunch_5fdim_2eproto PROTOBUF_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2fstream_5fexecutor_2flaunch_5fdim_2eproto {
  static const uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fstream_5fexecutor_2flaunch_5fdim_2eproto;
namespace stream_executor {
class BlockDimProto;
struct BlockDimProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern BlockDimProtoDefaultTypeInternal _BlockDimProto_default_instance_;
class ClusterDimProto;
struct ClusterDimProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern ClusterDimProtoDefaultTypeInternal _ClusterDimProto_default_instance_;
class Dim3DProto;
struct Dim3DProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern Dim3DProtoDefaultTypeInternal _Dim3DProto_default_instance_;
class ThreadDimProto;
struct ThreadDimProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern ThreadDimProtoDefaultTypeInternal _ThreadDimProto_default_instance_;
}  // namespace stream_executor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_EXPORT ::stream_executor::BlockDimProto* Arena::CreateMaybeMessage<::stream_executor::BlockDimProto>(Arena*);
template<> PROTOBUF_EXPORT ::stream_executor::ClusterDimProto* Arena::CreateMaybeMessage<::stream_executor::ClusterDimProto>(Arena*);
template<> PROTOBUF_EXPORT ::stream_executor::Dim3DProto* Arena::CreateMaybeMessage<::stream_executor::Dim3DProto>(Arena*);
template<> PROTOBUF_EXPORT ::stream_executor::ThreadDimProto* Arena::CreateMaybeMessage<::stream_executor::ThreadDimProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace stream_executor {

// ===================================================================

class PROTOBUF_EXPORT Dim3DProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stream_executor.Dim3DProto) */ {
 public:
  inline Dim3DProto() : Dim3DProto(nullptr) {}
  ~Dim3DProto() override;
  explicit PROTOBUF_CONSTEXPR Dim3DProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dim3DProto(const Dim3DProto& from);
  Dim3DProto(Dim3DProto&& from) noexcept
    : Dim3DProto() {
    *this = ::std::move(from);
  }

  inline Dim3DProto& operator=(const Dim3DProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dim3DProto& operator=(Dim3DProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dim3DProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dim3DProto* internal_default_instance() {
    return reinterpret_cast<const Dim3DProto*>(
               &_Dim3DProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Dim3DProto& a, Dim3DProto& b) {
    a.Swap(&b);
  }
  inline void Swap(Dim3DProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dim3DProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dim3DProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dim3DProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dim3DProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dim3DProto& from) {
    Dim3DProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dim3DProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stream_executor.Dim3DProto";
  }
  protected:
  explicit Dim3DProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // int64 x = 1;
  void clear_x();
  int64_t x() const;
  void set_x(int64_t value);
  private:
  int64_t _internal_x() const;
  void _internal_set_x(int64_t value);
  public:

  // int64 y = 2;
  void clear_y();
  int64_t y() const;
  void set_y(int64_t value);
  private:
  int64_t _internal_y() const;
  void _internal_set_y(int64_t value);
  public:

  // int64 z = 3;
  void clear_z();
  int64_t z() const;
  void set_z(int64_t value);
  private:
  int64_t _internal_z() const;
  void _internal_set_z(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:stream_executor.Dim3DProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t x_;
    int64_t y_;
    int64_t z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fstream_5fexecutor_2flaunch_5fdim_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT ThreadDimProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stream_executor.ThreadDimProto) */ {
 public:
  inline ThreadDimProto() : ThreadDimProto(nullptr) {}
  ~ThreadDimProto() override;
  explicit PROTOBUF_CONSTEXPR ThreadDimProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThreadDimProto(const ThreadDimProto& from);
  ThreadDimProto(ThreadDimProto&& from) noexcept
    : ThreadDimProto() {
    *this = ::std::move(from);
  }

  inline ThreadDimProto& operator=(const ThreadDimProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreadDimProto& operator=(ThreadDimProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThreadDimProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreadDimProto* internal_default_instance() {
    return reinterpret_cast<const ThreadDimProto*>(
               &_ThreadDimProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ThreadDimProto& a, ThreadDimProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreadDimProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreadDimProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThreadDimProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThreadDimProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThreadDimProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ThreadDimProto& from) {
    ThreadDimProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadDimProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stream_executor.ThreadDimProto";
  }
  protected:
  explicit ThreadDimProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatesFieldNumber = 1,
  };
  // .stream_executor.Dim3DProto coordinates = 1;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::stream_executor::Dim3DProto& coordinates() const;
  PROTOBUF_NODISCARD ::stream_executor::Dim3DProto* release_coordinates();
  ::stream_executor::Dim3DProto* mutable_coordinates();
  void set_allocated_coordinates(::stream_executor::Dim3DProto* coordinates);
  private:
  const ::stream_executor::Dim3DProto& _internal_coordinates() const;
  ::stream_executor::Dim3DProto* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::stream_executor::Dim3DProto* coordinates);
  ::stream_executor::Dim3DProto* unsafe_arena_release_coordinates();

  // @@protoc_insertion_point(class_scope:stream_executor.ThreadDimProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::stream_executor::Dim3DProto* coordinates_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fstream_5fexecutor_2flaunch_5fdim_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT BlockDimProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stream_executor.BlockDimProto) */ {
 public:
  inline BlockDimProto() : BlockDimProto(nullptr) {}
  ~BlockDimProto() override;
  explicit PROTOBUF_CONSTEXPR BlockDimProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockDimProto(const BlockDimProto& from);
  BlockDimProto(BlockDimProto&& from) noexcept
    : BlockDimProto() {
    *this = ::std::move(from);
  }

  inline BlockDimProto& operator=(const BlockDimProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockDimProto& operator=(BlockDimProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockDimProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockDimProto* internal_default_instance() {
    return reinterpret_cast<const BlockDimProto*>(
               &_BlockDimProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockDimProto& a, BlockDimProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockDimProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockDimProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockDimProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockDimProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockDimProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockDimProto& from) {
    BlockDimProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockDimProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stream_executor.BlockDimProto";
  }
  protected:
  explicit BlockDimProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatesFieldNumber = 2,
  };
  // .stream_executor.Dim3DProto coordinates = 2;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::stream_executor::Dim3DProto& coordinates() const;
  PROTOBUF_NODISCARD ::stream_executor::Dim3DProto* release_coordinates();
  ::stream_executor::Dim3DProto* mutable_coordinates();
  void set_allocated_coordinates(::stream_executor::Dim3DProto* coordinates);
  private:
  const ::stream_executor::Dim3DProto& _internal_coordinates() const;
  ::stream_executor::Dim3DProto* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::stream_executor::Dim3DProto* coordinates);
  ::stream_executor::Dim3DProto* unsafe_arena_release_coordinates();

  // @@protoc_insertion_point(class_scope:stream_executor.BlockDimProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::stream_executor::Dim3DProto* coordinates_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fstream_5fexecutor_2flaunch_5fdim_2eproto;
};
// -------------------------------------------------------------------

class PROTOBUF_EXPORT ClusterDimProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stream_executor.ClusterDimProto) */ {
 public:
  inline ClusterDimProto() : ClusterDimProto(nullptr) {}
  ~ClusterDimProto() override;
  explicit PROTOBUF_CONSTEXPR ClusterDimProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClusterDimProto(const ClusterDimProto& from);
  ClusterDimProto(ClusterDimProto&& from) noexcept
    : ClusterDimProto() {
    *this = ::std::move(from);
  }

  inline ClusterDimProto& operator=(const ClusterDimProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterDimProto& operator=(ClusterDimProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClusterDimProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClusterDimProto* internal_default_instance() {
    return reinterpret_cast<const ClusterDimProto*>(
               &_ClusterDimProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClusterDimProto& a, ClusterDimProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterDimProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterDimProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClusterDimProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClusterDimProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClusterDimProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClusterDimProto& from) {
    ClusterDimProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterDimProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stream_executor.ClusterDimProto";
  }
  protected:
  explicit ClusterDimProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatesFieldNumber = 3,
  };
  // .stream_executor.Dim3DProto coordinates = 3;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::stream_executor::Dim3DProto& coordinates() const;
  PROTOBUF_NODISCARD ::stream_executor::Dim3DProto* release_coordinates();
  ::stream_executor::Dim3DProto* mutable_coordinates();
  void set_allocated_coordinates(::stream_executor::Dim3DProto* coordinates);
  private:
  const ::stream_executor::Dim3DProto& _internal_coordinates() const;
  ::stream_executor::Dim3DProto* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::stream_executor::Dim3DProto* coordinates);
  ::stream_executor::Dim3DProto* unsafe_arena_release_coordinates();

  // @@protoc_insertion_point(class_scope:stream_executor.ClusterDimProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::stream_executor::Dim3DProto* coordinates_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fstream_5fexecutor_2flaunch_5fdim_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Dim3DProto

// int64 x = 1;
inline void Dim3DProto::clear_x() {
  _impl_.x_ = int64_t{0};
}
inline int64_t Dim3DProto::_internal_x() const {
  return _impl_.x_;
}
inline int64_t Dim3DProto::x() const {
  // @@protoc_insertion_point(field_get:stream_executor.Dim3DProto.x)
  return _internal_x();
}
inline void Dim3DProto::_internal_set_x(int64_t value) {
  
  _impl_.x_ = value;
}
inline void Dim3DProto::set_x(int64_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:stream_executor.Dim3DProto.x)
}

// int64 y = 2;
inline void Dim3DProto::clear_y() {
  _impl_.y_ = int64_t{0};
}
inline int64_t Dim3DProto::_internal_y() const {
  return _impl_.y_;
}
inline int64_t Dim3DProto::y() const {
  // @@protoc_insertion_point(field_get:stream_executor.Dim3DProto.y)
  return _internal_y();
}
inline void Dim3DProto::_internal_set_y(int64_t value) {
  
  _impl_.y_ = value;
}
inline void Dim3DProto::set_y(int64_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:stream_executor.Dim3DProto.y)
}

// int64 z = 3;
inline void Dim3DProto::clear_z() {
  _impl_.z_ = int64_t{0};
}
inline int64_t Dim3DProto::_internal_z() const {
  return _impl_.z_;
}
inline int64_t Dim3DProto::z() const {
  // @@protoc_insertion_point(field_get:stream_executor.Dim3DProto.z)
  return _internal_z();
}
inline void Dim3DProto::_internal_set_z(int64_t value) {
  
  _impl_.z_ = value;
}
inline void Dim3DProto::set_z(int64_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:stream_executor.Dim3DProto.z)
}

// -------------------------------------------------------------------

// ThreadDimProto

// .stream_executor.Dim3DProto coordinates = 1;
inline bool ThreadDimProto::_internal_has_coordinates() const {
  return this != internal_default_instance() && _impl_.coordinates_ != nullptr;
}
inline bool ThreadDimProto::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void ThreadDimProto::clear_coordinates() {
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
}
inline const ::stream_executor::Dim3DProto& ThreadDimProto::_internal_coordinates() const {
  const ::stream_executor::Dim3DProto* p = _impl_.coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::stream_executor::Dim3DProto&>(
      ::stream_executor::_Dim3DProto_default_instance_);
}
inline const ::stream_executor::Dim3DProto& ThreadDimProto::coordinates() const {
  // @@protoc_insertion_point(field_get:stream_executor.ThreadDimProto.coordinates)
  return _internal_coordinates();
}
inline void ThreadDimProto::unsafe_arena_set_allocated_coordinates(
    ::stream_executor::Dim3DProto* coordinates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  _impl_.coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stream_executor.ThreadDimProto.coordinates)
}
inline ::stream_executor::Dim3DProto* ThreadDimProto::release_coordinates() {
  
  ::stream_executor::Dim3DProto* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::stream_executor::Dim3DProto* ThreadDimProto::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:stream_executor.ThreadDimProto.coordinates)
  
  ::stream_executor::Dim3DProto* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
  return temp;
}
inline ::stream_executor::Dim3DProto* ThreadDimProto::_internal_mutable_coordinates() {
  
  if (_impl_.coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::stream_executor::Dim3DProto>(GetArenaForAllocation());
    _impl_.coordinates_ = p;
  }
  return _impl_.coordinates_;
}
inline ::stream_executor::Dim3DProto* ThreadDimProto::mutable_coordinates() {
  ::stream_executor::Dim3DProto* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:stream_executor.ThreadDimProto.coordinates)
  return _msg;
}
inline void ThreadDimProto::set_allocated_coordinates(::stream_executor::Dim3DProto* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coordinates);
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:stream_executor.ThreadDimProto.coordinates)
}

// -------------------------------------------------------------------

// BlockDimProto

// .stream_executor.Dim3DProto coordinates = 2;
inline bool BlockDimProto::_internal_has_coordinates() const {
  return this != internal_default_instance() && _impl_.coordinates_ != nullptr;
}
inline bool BlockDimProto::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void BlockDimProto::clear_coordinates() {
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
}
inline const ::stream_executor::Dim3DProto& BlockDimProto::_internal_coordinates() const {
  const ::stream_executor::Dim3DProto* p = _impl_.coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::stream_executor::Dim3DProto&>(
      ::stream_executor::_Dim3DProto_default_instance_);
}
inline const ::stream_executor::Dim3DProto& BlockDimProto::coordinates() const {
  // @@protoc_insertion_point(field_get:stream_executor.BlockDimProto.coordinates)
  return _internal_coordinates();
}
inline void BlockDimProto::unsafe_arena_set_allocated_coordinates(
    ::stream_executor::Dim3DProto* coordinates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  _impl_.coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stream_executor.BlockDimProto.coordinates)
}
inline ::stream_executor::Dim3DProto* BlockDimProto::release_coordinates() {
  
  ::stream_executor::Dim3DProto* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::stream_executor::Dim3DProto* BlockDimProto::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:stream_executor.BlockDimProto.coordinates)
  
  ::stream_executor::Dim3DProto* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
  return temp;
}
inline ::stream_executor::Dim3DProto* BlockDimProto::_internal_mutable_coordinates() {
  
  if (_impl_.coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::stream_executor::Dim3DProto>(GetArenaForAllocation());
    _impl_.coordinates_ = p;
  }
  return _impl_.coordinates_;
}
inline ::stream_executor::Dim3DProto* BlockDimProto::mutable_coordinates() {
  ::stream_executor::Dim3DProto* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:stream_executor.BlockDimProto.coordinates)
  return _msg;
}
inline void BlockDimProto::set_allocated_coordinates(::stream_executor::Dim3DProto* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coordinates);
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:stream_executor.BlockDimProto.coordinates)
}

// -------------------------------------------------------------------

// ClusterDimProto

// .stream_executor.Dim3DProto coordinates = 3;
inline bool ClusterDimProto::_internal_has_coordinates() const {
  return this != internal_default_instance() && _impl_.coordinates_ != nullptr;
}
inline bool ClusterDimProto::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void ClusterDimProto::clear_coordinates() {
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
}
inline const ::stream_executor::Dim3DProto& ClusterDimProto::_internal_coordinates() const {
  const ::stream_executor::Dim3DProto* p = _impl_.coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::stream_executor::Dim3DProto&>(
      ::stream_executor::_Dim3DProto_default_instance_);
}
inline const ::stream_executor::Dim3DProto& ClusterDimProto::coordinates() const {
  // @@protoc_insertion_point(field_get:stream_executor.ClusterDimProto.coordinates)
  return _internal_coordinates();
}
inline void ClusterDimProto::unsafe_arena_set_allocated_coordinates(
    ::stream_executor::Dim3DProto* coordinates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  _impl_.coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stream_executor.ClusterDimProto.coordinates)
}
inline ::stream_executor::Dim3DProto* ClusterDimProto::release_coordinates() {
  
  ::stream_executor::Dim3DProto* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::stream_executor::Dim3DProto* ClusterDimProto::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:stream_executor.ClusterDimProto.coordinates)
  
  ::stream_executor::Dim3DProto* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
  return temp;
}
inline ::stream_executor::Dim3DProto* ClusterDimProto::_internal_mutable_coordinates() {
  
  if (_impl_.coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::stream_executor::Dim3DProto>(GetArenaForAllocation());
    _impl_.coordinates_ = p;
  }
  return _impl_.coordinates_;
}
inline ::stream_executor::Dim3DProto* ClusterDimProto::mutable_coordinates() {
  ::stream_executor::Dim3DProto* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:stream_executor.ClusterDimProto.coordinates)
  return _msg;
}
inline void ClusterDimProto::set_allocated_coordinates(::stream_executor::Dim3DProto* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coordinates);
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:stream_executor.ClusterDimProto.coordinates)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream_executor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fstream_5fexecutor_2flaunch_5fdim_2eproto
