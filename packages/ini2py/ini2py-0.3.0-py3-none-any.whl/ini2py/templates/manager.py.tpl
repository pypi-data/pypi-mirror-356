# THIS FILE IS AUTO-GENERATED BY ini2py.
# DO NOT EDIT THIS FILE MANUALLY.

import time
import configparser
import os
from watchdog.observers import Observer
# --- MODIFICATION 1: Import IgnorePatternsMatchingEventHandler ---
from watchdog.events import FileSystemEventHandler, IgnorePatternsMatchingEventHandler
from threading import Thread
from .schema import (
{{SCHEMA_IMPORTS}}
)


def find_config_path(filename="config.ini", max_depth=5):
    """
    從當前工作目錄開始向上查找配置文件。
    會依次尋找 'filename', 'config/filename', 'conf/filename'。

    參數：
        filename (str): 配置文件名稱，預設為 'config.ini'。
        max_depth (int): 最大向上查找的目錄層數，預設為 5。

    返回：
        str 或 None: 找到的配置文件路徑，若未找到則返回 None。
    """
    path = "."
    for _ in range(max_depth):
        abs_path = os.path.abspath(path)
        
        check_paths = [
            os.path.join(abs_path, filename),
            os.path.join(abs_path, 'config', filename),
            os.path.join(abs_path, 'conf', filename),
        ]
        
        for p in check_paths:
            if os.path.exists(p):
                return p
        
        if os.path.dirname(abs_path) == abs_path:
            break
        path = os.path.join(path, "..")
        
    return None


# --- MODIFICATION 2: Create a new handler that combines ignore logic with your specific logic ---
# 這個新的處理器繼承了兩個類：
# 1. IgnorePatternsMatchingEventHandler: 用於根據模式忽略事件。
# 2. FileSystemEventHandler: 提供了 on_modified 等基本方法。
class CustomConfigHandler(IgnorePatternsMatchingEventHandler, FileSystemEventHandler):
    """
    自訂的文件系統事件處理器，
    它會忽略指定的目錄模式，並在目標配置文件變更時觸發重載。
    """
    def __init__(self, config_manager, ignore_patterns=None):
        """
        初始化事件處理器。

        參數：
            config_manager (ConfigManager): 配置管理器實例。
            ignore_patterns (list): 要忽略的路徑模式列表。
        """
        # 初始化 IgnorePatternsMatchingEventHandler
        # 注意：我們將 ignore_directories 設為 True，這樣模式 '*/data/*' 會匹配到 data 目錄
        IgnorePatternsMatchingEventHandler.__init__(self, patterns=ignore_patterns, ignore_directories=True, case_sensitive=False)
        
        # 初始化 FileSystemEventHandler 的部分 (雖然它沒有 __init__，但這是良好實踐)
        FileSystemEventHandler.__init__(self)

        self.config_manager = config_manager
        self.last_modified_time = 0

    def on_modified(self, event):
        """
        當監控的文件被修改時觸發。
        在 IgnorePatternsMatchingEventHandler 過濾掉不想要的事件後，這個方法才會被呼叫。
        """
        # 因為 IgnorePatternsMatchingEventHandler 已經排除了不該理會的目錄，
        # 我們這裡只需要專注於目標檔案即可。
        if event.is_directory:
            return

        if os.path.normpath(event.src_path) == os.path.normpath(self.config_manager.config_path):
            current_time = time.time()
            if current_time - self.last_modified_time > 1:
                self.last_modified_time = current_time
                print(f"Config file {event.src_path} changed, reloading values...")
                self.config_manager.reload_config()


class ConfigManager(object):
    """
    配置管理器，負責加載、管理和監控配置文件。

    使用單例模式確保全局只有一個配置管理器實例。
    """
    _instance = None
    _initialized = False

    def __new__(cls, *args, **kwargs): 
        if cls._instance is None: 
            cls._instance = super().__new__(cls) 
        return cls._instance

    def __init__(self, config_path: str = None):
        if self._initialized:
            if config_path and config_path != self.config_path:
                print(f"Warning: ConfigManager already initialized with path '{self.config_path}'. Ignoring new path '{config_path}'.")
            return
        
        if config_path:
            self.config_path = config_path
        else:
            self.config_path = find_config_path()

        if not self.config_path or not os.path.exists(self.config_path):
            raise FileNotFoundError(
                "Could not find config.ini. Please provide the path explicitly "
                "to ConfigManager(config_path='/path/to/your/config.ini') "
                "or place it in the project root or a 'config/' subdirectory."
            )
        
        print(f"ConfigManager is using configuration file: {self.config_path}")

        self._config = configparser.RawConfigParser()
        self._load_config()

        self._start_watchdog()
        self._initialized = True

    def _load_config(self):
        self._config.read(self.config_path, encoding='utf-8')
{{MANAGER_PROPERTIES}}

    def reload_config(self):
        try:
            new_config = configparser.RawConfigParser()
            new_config.read(self.config_path, encoding='utf-8')
            self._config = new_config
            self._load_config() 
            print("Configuration values reloaded successfully.")
        except Exception as e:
            print(f"Error reloading configuration: {e}")

    def _start_watchdog(self):
        """
        啟動 Watchdog 觀察者以監控配置文件的變更，並排除指定目錄。
        """
        # --- MODIFICATION 3: Define exclusion patterns and use the new handler ---
        
        # 定義要排除的目錄模式
        # '*/data' 會匹配任何名為 data 的目錄
        # '.*' 和 '__pycache__' 也是常見的排除對象
        ignore_patterns = [
            '*/data/*', '*/logs/*', '*/src/*',  # 您的需求
            '*/.git/*', '*/__pycache__/*'        # 建議加入的常見排除項
        ]
        
        # 使用我們新的 CustomConfigHandler
        event_handler = CustomConfigHandler(self, ignore_patterns=ignore_patterns)
        observer = Observer()
        
        # 監控的起點是設定檔所在的目錄的上一層，也就是專案根目錄
        # 這樣才能讓 '*/data' 這樣的模式正確匹配到
        # 如果 self.config_path 是 /project/config/config.ini，watch_path 會是 /project
        watch_path = os.path.dirname(os.path.dirname(self.config_path)) if 'config' in self.config_path or 'conf' in self.config_path else os.path.dirname(self.config_path)
        if not os.path.isdir(watch_path):
            print(f"Warning: Project directory '{watch_path}' does not exist. Watchdog not started.")
            return

        # 注意：我們現在使用 recursive=True，因為我們依賴模式匹配來排除目錄
        # 而不是依賴非遞迴掃描。
        observer.schedule(event_handler, watch_path, recursive=True)
        
        observer_thread = Thread(target=observer.start, daemon=True)
        observer_thread.start()
        print(f"Started watchdog for config changes in '{watch_path}', ignoring specified patterns.")