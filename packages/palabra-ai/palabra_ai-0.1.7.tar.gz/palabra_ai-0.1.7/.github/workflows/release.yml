name: Create Release with Assets

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write  # MANDATORY for OIDC PyPI publishing

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}  # Use the tag ref to get the updated commit

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python
      run: uv python install 3.11

    - name: Build package
      run: |
        # uv builds packages using hatchling
        uv build

    - name: Check package
      run: |
        # Install twine as a tool (not in system Python)
        uv tool install twine
        uv tool run twine check dist/*
        ls -la dist/

    - name: Get version from tag
      id: get_version
      run: |
        VERSION="${GITHUB_REF#refs/tags/v}"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    # Publish to PyPI FIRST (before GitHub Release and Docker)
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      # No 'with' parameters needed - OIDC authentication is automatic
      # The action will:
      # 1. Request OIDC token from GitHub
      # 2. Exchange it with PyPI for temporary API token
      # 3. Upload the package using that token
      # Your pending publisher configuration will be converted to active publisher on first use

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.TAG_NAME }}
        name: Release ${{ steps.get_version.outputs.TAG_NAME }}
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'a') || contains(steps.get_version.outputs.VERSION, 'b') || contains(steps.get_version.outputs.VERSION, 'rc') || contains(steps.get_version.outputs.VERSION, 'dev') }}
        generate_release_notes: true
        files: |
          dist/*.whl
          dist/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Docker image for package distribution
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Try to link the package to this repository if it exists
    - name: Link Docker package to repository
      continue-on-error: true
      run: |
        OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        IMAGE_BASE_NAME=$(echo "$REPO_NAME" | sed 's/^draft-//')
        
        # Try to link the package to this repository
        echo "Attempting to link ghcr.io/${OWNER_LOWER}/${IMAGE_BASE_NAME} to ${{ github.repository }}..."
        
        # Get repository ID
        REPO_ID=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}" | jq -r '.id')
        
        if [ "$REPO_ID" != "null" ] && [ -n "$REPO_ID" ]; then
          # Try to link the package to this repository
          curl -X PUT \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${IMAGE_BASE_NAME}" \
            -d "{\"repository_id\": ${REPO_ID}}" || true
        fi

    - name: Create Dockerfile for package
      run: |
        cat > Dockerfile << EOF
        FROM python:3.11-slim
        LABEL org.opencontainers.image.source=https://github.com/${{ github.repository }}
        LABEL org.opencontainers.image.description="Palabra AI Python SDK"
        LABEL org.opencontainers.image.licenses=MIT
        LABEL org.opencontainers.image.url=https://github.com/${{ github.repository }}
        LABEL org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
        LABEL org.opencontainers.image.vendor="${{ github.repository_owner }}"
        LABEL org.opencontainers.image.version="${{ steps.get_version.outputs.VERSION }}"
        
        COPY dist/*.whl /tmp/
        RUN pip install /tmp/*.whl && rm /tmp/*.whl
        
        # This is a library image, not meant to be run directly
        CMD ["python", "-c", "import palabra_ai; print(f'Palabra AI SDK v{palabra_ai.__version__} installed')"]
        EOF

    - name: Build and push Docker image with package
      run: |
        PACKAGE_VERSION=${{ steps.get_version.outputs.VERSION }}
        # Convert repository owner to lowercase for Docker
        OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        # Extract repository name from full repository path
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        # Remove 'draft-' prefix if present for cleaner image name
        IMAGE_BASE_NAME=$(echo "$REPO_NAME" | sed 's/^draft-//')
        IMAGE_NAME=ghcr.io/${OWNER_LOWER}/${IMAGE_BASE_NAME}
        
        docker build -t $IMAGE_NAME:$PACKAGE_VERSION -t $IMAGE_NAME:latest .
        
        # Try to push, but don't fail the whole workflow if it doesn't work
        if docker push $IMAGE_NAME:$PACKAGE_VERSION && docker push $IMAGE_NAME:latest; then
          echo "📦 Successfully pushed Docker images:"
          echo "  - $IMAGE_NAME:$PACKAGE_VERSION"
          echo "  - $IMAGE_NAME:latest"
        
          # Save image name for use in summary
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "DOCKER_PUSH_SUCCESS=true" >> $GITHUB_ENV
        else
          echo "⚠️ Failed to push Docker images to $IMAGE_NAME"
          echo "This might be due to permissions or existing package conflicts"
          echo "PyPI publishing will continue..."
          echo "DOCKER_PUSH_SUCCESS=false" >> $GITHUB_ENV
        fi

    - name: Release Summary
      run: |
        echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Package Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: ${{ steps.get_version.outputs.TAG_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Published Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Release**: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.TAG_NAME }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ env.DOCKER_PUSH_SUCCESS }}" == "true" ]; then
          echo "- **Docker Image**: \`${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Docker Image**: ⚠️ Failed to publish (permissions issue)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **PyPI Package**: https://pypi.org/project/palabra-ai/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Installation" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# PyPI" >> $GITHUB_STEP_SUMMARY
        echo "pip install palabra-ai==${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ env.DOCKER_PUSH_SUCCESS }}" == "true" ]; then
          echo "# Docker" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        echo "# From release assets" >> $GITHUB_STEP_SUMMARY
        echo "pip install https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.TAG_NAME }}/palabra_ai-${{ steps.get_version.outputs.VERSION }}-py3-none-any.whl" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY