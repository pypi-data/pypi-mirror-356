from typing import Optional, List
from agents import Agent as BaseAgent, Runner  # –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Ü–µ–ø–æ—á–µ–∫
import asyncio
from .memory_manager import MemoryManager  # –ö–ª–∞—Å—Å, –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É—é—â–∏–π –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∞—Ç–∫–æ- –∏ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é
import uuid
import re
import unicodedata

def normalize_agent_id(name: str) -> str:
    ascii_name = unicodedata.normalize("NFKD", name).encode("ascii", "ignore").decode()
    cleaned = re.sub(r'[^a-zA-Z0-9._-]', '_', ascii_name)
    if not cleaned or not re.match(r'^[a-zA-Z0-9]', cleaned):
        cleaned = f"agent_{uuid.uuid4().hex[:8]}"
    return cleaned[:64]  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É

class Agent(BaseAgent):
    def __init__(
        self,
        name: str,
        *,
        openai_api_key: str = "...",
        ttl_seconds: Optional[int] = None,
        short_memory_max_pairs: int = 10,
        short_memory_ttl_minutes: int = 60,
        short_memory_cleanup_minutes: int = 10,
        max_turns: int = 1,
        **kwargs
    ):
        super().__init__(name=name, **kwargs)

        self.max_turns = max_turns
        normalized_id = normalize_agent_id(name)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        self.memory_manager = MemoryManager(
            agent_id=name,
            openai_api_key=openai_api_key,
            long_memory_ttl=ttl_seconds,
            short_memory_max_pairs=short_memory_max_pairs,
            short_memory_ttl_minutes=short_memory_ttl_minutes,
            short_memory_cleanup_minutes=short_memory_cleanup_minutes,
        )
        self._initialized = False

    async def init(self):
        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è memory_manager (idempotent)
        if self._initialized:
            return
        await self.memory_manager.init()
        self._initialized = True

    async def message(
        self,
        input: str,
        *,
        context=None,
        tool_choice: Optional[str] = None,  # –Ø–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        max_turns: Optional[int] = None,    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ reasoning-–ø—Ä–æ—Ö–æ–¥–æ–≤
        enable_tracing: bool = True,        # –í–∫–ª—é—á–∏—Ç—å –ª–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        tags: Optional[List[str]] = None,   # –¢–µ–≥–∏ –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        user_id: Optional[str] = None,      # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file_name: Optional[str] = None,
        file_path: Optional[str] = None,
    ):
        await self.init()
        max_turns = max_turns or self.max_turns

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –ø–æ user_id –∏ —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
        memory_context = await self.memory_manager.get_memory_context(user_id=user_id, input=input)

        # –ï—Å–ª–∏ –ø–∞–º—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤ prompt
        if memory_context:
            augmented_input = (
                f"–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç, –≤–µ–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: {user_id}.\n"
                f"–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–≤—É–º —Ç–∏–ø–∞–º –ø–∞–º—è—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"1. üß† –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞.\n"
                f"2. üìö –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–Ω–∏—è –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π –æ–±–µ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n"
                f"{memory_context}\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{input}"
            )
        else:
            augmented_input = input  # –ï—Å–ª–∏ –ø–∞–º—è—Ç–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è tool_choice, user_id –∏ –ø—Ä–æ—á–µ–µ
        merged_metadata = {}
        if context and hasattr(context, "metadata") and context.metadata:
            merged_metadata.update(context.metadata)
        for k, v in (("user_id", user_id), ("file_name", file_name), ("file_path", file_path)):
            if v is not None:
                merged_metadata[k] = v

        trace_meta = {}
        if tool_choice is not None:
            merged_metadata["tool_choice"] = tool_choice
            trace_meta["tool_choice"] = tool_choice
        if tags:
            merged_metadata["tags"] = tags
            trace_meta["tags"] = tags

        # –ï—Å–ª–∏ context –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        if context is None:
            context = type("Ctx", (), {})()
        context.metadata = merged_metadata or None

        # –ó–∞–ø—É—Å–∫ reasoning-—Ü–µ–ø–æ—á–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Runner
        result = await Runner.run(
            starting_agent=self,
            input=augmented_input,
            context=context,
            max_turns=max_turns,
            run_config={"trace_metadata": trace_meta} if trace_meta else None,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø–∞–º—è—Ç—å
        await self.memory_manager.record_interaction(
            user_id=user_id,
            input=input,
            output=result.final_output,
            file_name=file_name,
            file_path=file_path,
        )

        return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç reasoning-–ø—Ä–æ—Ü–µ—Å—Å–∞