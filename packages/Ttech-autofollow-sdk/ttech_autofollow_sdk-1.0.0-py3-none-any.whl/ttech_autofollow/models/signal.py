# coding: utf-8

"""
TInvest Autofollow API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Self

from ttech_autofollow.models.direction import Direction
from ttech_autofollow.models.instrument_type import InstrumentType


class Signal(BaseModel):
    """
    Сигнал автоследования
    """  # noqa: E501

    signal_id: StrictStr = Field(
        description="Идентификатор торгового сигнала", alias="signalId"
    )
    instrument_uid: StrictStr = Field(
        description="Идентификатор инструмента", alias="instrumentUid"
    )
    position_uid: StrictStr = Field(
        description="Идентификатор позиции", alias="positionUid"
    )
    ticker: StrictStr = Field(description="Тикер инструмента")
    direction: Direction
    instrument_type: InstrumentType = Field(alias="instrumentType")
    lots_requested: Union[StrictFloat, StrictInt] = Field(
        description="Количество лотов", alias="lotsRequested"
    )
    lots_executed: Union[StrictFloat, StrictInt] = Field(
        description="Количество лотов", alias="lotsExecuted"
    )
    currency: StrictStr = Field(description="Валюта")
    total_amount: Union[StrictFloat, StrictInt] = Field(
        description="Количество единиц актива", alias="totalAmount"
    )
    logo_name: Optional[StrictStr] = Field(
        default=None, description="Логотип позиции сигнала", alias="logoName"
    )
    __properties: ClassVar[List[str]] = [
        "signalId",
        "instrumentUid",
        "positionUid",
        "ticker",
        "direction",
        "instrumentType",
        "lotsRequested",
        "lotsExecuted",
        "currency",
        "totalAmount",
        "logoName",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Signal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Signal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "signalId": obj.get("signalId"),
                "instrumentUid": obj.get("instrumentUid"),
                "positionUid": obj.get("positionUid"),
                "ticker": obj.get("ticker"),
                "direction": obj.get("direction"),
                "instrumentType": obj.get("instrumentType"),
                "lotsRequested": obj.get("lotsRequested"),
                "lotsExecuted": obj.get("lotsExecuted"),
                "currency": obj.get("currency"),
                "totalAmount": obj.get("totalAmount"),
                "logoName": obj.get("logoName"),
            }
        )
        return _obj
