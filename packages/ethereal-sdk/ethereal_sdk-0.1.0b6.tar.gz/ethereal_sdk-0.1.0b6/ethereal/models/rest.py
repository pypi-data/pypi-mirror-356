# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-06-03T16:38:25+00:00

from __future__ import annotations

from decimal import Decimal
from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, confloat, constr


class Type(Enum):
    limit = "LIMIT"
    market = "MARKET"


class Side(Enum):
    buy = 0
    sell = 1


class Status(Enum):
    canceled = "CANCELED"
    expired = "EXPIRED"
    filled = "FILLED"
    filled_partial = "FILLED_PARTIAL"
    new = "NEW"
    pending = "PENDING"
    rejected = "REJECTED"
    submitted = "SUBMITTED"


class StopType(Enum):
    gain = 0
    loss = 1


class StopPriceType(Enum):
    last_price = 0
    mark_price = 1


class TimeInForce(Enum):
    gtd = "GTD"
    ioc = "IOC"
    fok = "FOK"


class OtocoTriggerType(Enum):
    oto = 0
    oco = 1


class OrderDto(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the order",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    type: Type = Field(
        ..., description="Trade order type e.g. MARKET or LIMIT", examples=["LIMIT"]
    )
    available_quantity: str = Field(
        ...,
        alias="availableQuantity",
        description="Remaining quantity (if modified or reduced) in native units expressed as a decimal (precision: 9)",
        examples=["10.5"],
    )
    quantity: str = Field(
        ...,
        description="Original quantity (as per order submission) in native units expressed as a decimal (precision: 9)",
        examples=["10.5"],
    )
    side: Side = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product this order was placed against",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id of the subaccount associated to order",
        examples=["c25c39d9-ce2b-4753-960c-c5ad558aace8"],
    )
    status: Status = Field(..., description="Status of the order", examples=["FILLED"])
    reduce_only: bool = Field(
        ...,
        alias="reduceOnly",
        description="Indicates if the order is reduce only",
        examples=[True],
    )
    close: bool = Field(..., description="Order closes the entire current position")
    updated_at: float = Field(
        ...,
        alias="updatedAt",
        description="Order last updated timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Order creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    sender: str = Field(
        ...,
        description="Account or linked signer address that originally submitted this order",
        examples=["0x2501c477d0a35545a387aa4a3eee4292a9a8b3f0"],
    )
    price: str = Field(
        ...,
        description="Limit price in native units expressed as a decimal, zero if market order (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Filled amount in native units expressed as a decimal (precision: 9)",
        examples=["0.5"],
    )
    stop_price: str = Field(
        ...,
        alias="stopPrice",
        description="Stop price expressed as a decimal (zero if not a stop order, precision: 9)",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType] = Field(
        None,
        alias="stopType",
        description="Side as either BUY (0) or SELL (1)",
        examples=[1],
    )
    stop_price_type: Optional[StopPriceType] = Field(
        None,
        alias="stopPriceType",
        description="Type of stop price (stop orders only)",
        examples=[1],
    )
    time_in_force: Optional[TimeInForce] = Field(
        None,
        alias="timeInForce",
        description="How long an order will remain until executed/expired (required if limit)",
        examples=["GTD"],
    )
    expires_at: float = Field(
        ...,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    post_only: Optional[bool] = Field(
        None,
        alias="postOnly",
        description="Only add order if it does not immediately fill (limit only)",
        examples=[True],
    )
    otoco_trigger_type: Optional[OtocoTriggerType] = Field(
        None,
        alias="otocoTriggerType",
        description="Type of OTOCO relationship (OTO or OCO)",
        examples=[0],
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of the OTOCO group this order belongs to",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )


class Datum(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the order",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    type: Type = Field(
        ..., description="Trade order type e.g. MARKET or LIMIT", examples=["LIMIT"]
    )
    available_quantity: str = Field(
        ...,
        alias="availableQuantity",
        description="Remaining quantity (if modified or reduced) in native units expressed as a decimal (precision: 9)",
        examples=["10.5"],
    )
    quantity: str = Field(
        ...,
        description="Original quantity (as per order submission) in native units expressed as a decimal (precision: 9)",
        examples=["10.5"],
    )
    side: Side = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product this order was placed against",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id of the subaccount associated to order",
        examples=["c25c39d9-ce2b-4753-960c-c5ad558aace8"],
    )
    status: Status = Field(..., description="Status of the order", examples=["FILLED"])
    reduce_only: bool = Field(
        ...,
        alias="reduceOnly",
        description="Indicates if the order is reduce only",
        examples=[True],
    )
    close: bool = Field(..., description="Order closes the entire current position")
    updated_at: float = Field(
        ...,
        alias="updatedAt",
        description="Order last updated timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Order creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    sender: str = Field(
        ...,
        description="Account or linked signer address that originally submitted this order",
        examples=["0x2501c477d0a35545a387aa4a3eee4292a9a8b3f0"],
    )
    price: str = Field(
        ...,
        description="Limit price in native units expressed as a decimal, zero if market order (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Filled amount in native units expressed as a decimal (precision: 9)",
        examples=["0.5"],
    )
    stop_price: str = Field(
        ...,
        alias="stopPrice",
        description="Stop price expressed as a decimal (zero if not a stop order, precision: 9)",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType] = Field(
        None,
        alias="stopType",
        description="Side as either BUY (0) or SELL (1)",
        examples=[1],
    )
    stop_price_type: Optional[StopPriceType] = Field(
        None,
        alias="stopPriceType",
        description="Type of stop price (stop orders only)",
        examples=[1],
    )
    time_in_force: Optional[TimeInForce] = Field(
        None,
        alias="timeInForce",
        description="How long an order will remain until executed/expired (required if limit)",
        examples=["GTD"],
    )
    expires_at: float = Field(
        ...,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    post_only: Optional[bool] = Field(
        None,
        alias="postOnly",
        description="Only add order if it does not immediately fill (limit only)",
        examples=[True],
    )
    otoco_trigger_type: Optional[OtocoTriggerType] = Field(
        None,
        alias="otocoTriggerType",
        description="Type of OTOCO relationship (OTO or OCO)",
        examples=[0],
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of the OTOCO group this order belongs to",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )


class PageOfOrderDtos(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum] = Field(..., description="Array of order objects")


class StatusCode(Enum):
    number_400 = 400


class Error(Enum):
    bad_request = "Bad Request"


class BadRequestDto(BaseModel):
    status_code: StatusCode = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error


class StatusCode1(Enum):
    number_401 = 401


class Error1(Enum):
    unauthorized = "Unauthorized"


class UnauthorizedDto(BaseModel):
    status_code: StatusCode1 = Field(..., alias="statusCode")
    message: str
    error: Error1


class StatusCode2(Enum):
    number_403 = 403


class Error2(Enum):
    forbidden = "Forbidden"


class ForbiddenDto(BaseModel):
    status_code: StatusCode2 = Field(..., alias="statusCode")
    message: str
    error: Error2


class StatusCode3(Enum):
    number_404 = 404


class Error3(Enum):
    not_found = "Not Found"


class NotFoundDto(BaseModel):
    status_code: StatusCode3 = Field(..., alias="statusCode")
    message: str
    error: Error3


class StatusCode4(Enum):
    number_422 = 422


class Error4(Enum):
    unprocessable_entity = "Unprocessable Entity"


class UnprocessableEntityDto(BaseModel):
    status_code: StatusCode4 = Field(..., alias="statusCode")
    message: str
    error: Error4


class StatusCode5(Enum):
    number_429 = 429


class Error5(Enum):
    too_many_requests = "Too Many Requests"


class TooManyRequestsDto(BaseModel):
    status_code: StatusCode5 = Field(..., alias="statusCode")
    message: str
    error: Error5


class Type2(Enum):
    market = "MARKET"


class EngineType(Enum):
    perp = 0
    spot = 1


class SubmitOrderMarketDtoData(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    type: Type2 = Field(..., description="Market order type", examples=["MARKET"])
    quantity: Decimal = Field(
        ...,
        description="Quantity of product in native units expressed as a decimal (precision: 9)",
        examples=["5.5"],
    )
    side: Side = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    onchain_id: confloat(ge=1.0) = Field(
        ...,
        alias="onchainId",
        description="Onchain generated productId from prior product registration",
        examples=[1],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="Product engine type e.g. PERP (0)",
        examples=[0],
    )
    reduce_only: Optional[bool] = Field(
        False,
        alias="reduceOnly",
        description="Whether this should be a reduce-only order, required for close",
    )
    close: Optional[bool] = Field(
        False,
        description="Order closes the entire current position, requires zero quantity and reduceOnly",
    )
    stop_price: Optional[Decimal] = Field(
        Decimal("0"),
        alias="stopPrice",
        description="Stop price expressed as a decimal (precision: 9), requires stopType",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType] = Field(
        None,
        alias="stopType",
        description="Stop type, either 0 (take-profit) or 1 (stop-loss), requires non-zero stopPrice",
        examples=[1],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    expires_at: Optional[float] = Field(
        None,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch), defaults to the maximum allowed value: signedAt + 6652800",
    )
    otoco_trigger: Optional[bool] = Field(
        False,
        alias="otocoTrigger",
        description="Set if this order should be the OTO order in a new OTOCO group for triggering stop-loss/take-profit orders (precludes otocoGroup)",
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of an existing OTOCO group this order will join as an OCO order (precludes otocoTrigger)",
    )


class Type3(Enum):
    limit = "LIMIT"


class SubmitOrderLimitDtoData(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    type: Type3 = Field(..., description="Limit order type", examples=["LIMIT"])
    quantity: Decimal = Field(
        ...,
        description="Quantity of product in native units expressed as a decimal (precision: 9)",
        examples=["5.5"],
    )
    side: Side = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    onchain_id: confloat(ge=1.0) = Field(
        ...,
        alias="onchainId",
        description="Onchain generated productId from prior product registration",
        examples=[1],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="Product engine type e.g. PERP (0)",
        examples=[0],
    )
    reduce_only: Optional[bool] = Field(
        False,
        alias="reduceOnly",
        description="Whether this should be a reduce-only order, required for close",
    )
    close: Optional[bool] = Field(
        False,
        description="Order closes the entire current position, requires zero quantity and reduceOnly",
    )
    stop_price: Optional[Decimal] = Field(
        Decimal("0"),
        alias="stopPrice",
        description="Stop price expressed as a decimal (precision: 9), requires stopType",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType] = Field(
        None,
        alias="stopType",
        description="Stop type, either 0 (take-profit) or 1 (stop-loss), requires non-zero stopPrice",
        examples=[1],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    expires_at: Optional[float] = Field(
        None,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch), defaults to the maximum allowed value: signedAt + 6652800",
    )
    otoco_trigger: Optional[bool] = Field(
        False,
        alias="otocoTrigger",
        description="Set if this order should be the OTO order in a new OTOCO group for triggering stop-loss/take-profit orders (precludes otocoGroup)",
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of an existing OTOCO group this order will join as an OCO order (precludes otocoTrigger)",
    )
    price: Decimal = Field(
        ...,
        description="Limit price expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    time_in_force: TimeInForce = Field(
        ...,
        alias="timeInForce",
        description="How long an order will remain until executed/expired",
        examples=["IOC"],
    )
    post_only: bool = Field(
        ...,
        alias="postOnly",
        description="Only add order if it does not immediately fill",
        examples=[True],
    )


class Type4(Enum):
    market = "MARKET"


class Data(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    type: Type4 = Field(..., description="Market order type", examples=["MARKET"])
    quantity: Decimal = Field(
        ...,
        description="Quantity of product in native units expressed as a decimal (precision: 9)",
        examples=["5.5"],
    )
    side: Side = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    onchain_id: confloat(ge=1.0) = Field(
        ...,
        alias="onchainId",
        description="Onchain generated productId from prior product registration",
        examples=[1],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="Product engine type e.g. PERP (0)",
        examples=[0],
    )
    reduce_only: Optional[bool] = Field(
        False,
        alias="reduceOnly",
        description="Whether this should be a reduce-only order, required for close",
    )
    close: Optional[bool] = Field(
        False,
        description="Order closes the entire current position, requires zero quantity and reduceOnly",
    )
    stop_price: Optional[Decimal] = Field(
        Decimal("0"),
        alias="stopPrice",
        description="Stop price expressed as a decimal (precision: 9), requires stopType",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType] = Field(
        None,
        alias="stopType",
        description="Stop type, either 0 (take-profit) or 1 (stop-loss), requires non-zero stopPrice",
        examples=[1],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    expires_at: Optional[float] = Field(
        None,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch), defaults to the maximum allowed value: signedAt + 6652800",
    )
    otoco_trigger: Optional[bool] = Field(
        False,
        alias="otocoTrigger",
        description="Set if this order should be the OTO order in a new OTOCO group for triggering stop-loss/take-profit orders (precludes otocoGroup)",
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of an existing OTOCO group this order will join as an OCO order (precludes otocoTrigger)",
    )


class Type5(Enum):
    limit = "LIMIT"


class Data1(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    type: Type5 = Field(..., description="Limit order type", examples=["LIMIT"])
    quantity: Decimal = Field(
        ...,
        description="Quantity of product in native units expressed as a decimal (precision: 9)",
        examples=["5.5"],
    )
    side: Side = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    onchain_id: confloat(ge=1.0) = Field(
        ...,
        alias="onchainId",
        description="Onchain generated productId from prior product registration",
        examples=[1],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="Product engine type e.g. PERP (0)",
        examples=[0],
    )
    reduce_only: Optional[bool] = Field(
        False,
        alias="reduceOnly",
        description="Whether this should be a reduce-only order, required for close",
    )
    close: Optional[bool] = Field(
        False,
        description="Order closes the entire current position, requires zero quantity and reduceOnly",
    )
    stop_price: Optional[Decimal] = Field(
        Decimal("0"),
        alias="stopPrice",
        description="Stop price expressed as a decimal (precision: 9), requires stopType",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType] = Field(
        None,
        alias="stopType",
        description="Stop type, either 0 (take-profit) or 1 (stop-loss), requires non-zero stopPrice",
        examples=[1],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    expires_at: Optional[float] = Field(
        None,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch), defaults to the maximum allowed value: signedAt + 6652800",
    )
    otoco_trigger: Optional[bool] = Field(
        False,
        alias="otocoTrigger",
        description="Set if this order should be the OTO order in a new OTOCO group for triggering stop-loss/take-profit orders (precludes otocoGroup)",
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of an existing OTOCO group this order will join as an OCO order (precludes otocoTrigger)",
    )
    price: Decimal = Field(
        ...,
        description="Limit price expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    time_in_force: TimeInForce = Field(
        ...,
        alias="timeInForce",
        description="How long an order will remain until executed/expired",
        examples=["IOC"],
    )
    post_only: bool = Field(
        ...,
        alias="postOnly",
        description="Only add order if it does not immediately fill",
        examples=[True],
    )


class SubmitOrderDto(BaseModel):
    data: Union[Data, Data1]
    signature: str = Field(
        ..., description="The signature from signTypedData(...) signed by the sender"
    )


class Result(Enum):
    causes_immediate_liquidation = "CausesImmediateLiquidation"
    immediate_match_post_only = "ImmediateMatchPostOnly"
    insufficient_balance = "InsufficientBalance"
    liquidation_error = "LiquidationError"
    market_order_reached_max_slippage = "MarketOrderReachedMaxSlippage"
    oco_filled = "OcoFilled"
    ok = "Ok"
    open_value_cap_exceeded = "OpenValueCapExceeded"
    order_increases_position = "OrderIncreasesPosition"
    risk_limit_exceeded = "RiskLimitExceeded"
    trigger_canceled_error = "TriggerCanceledError"
    unfilled_fill_or_kill = "UnfilledFillOrKill"
    unfilled_immediate_or_cancel = "UnfilledImmediateOrCancel"
    unfilled_market_order = "UnfilledMarketOrder"


class SubmitOrderCreatedDto(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the created order",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    filled: str = Field(
        ...,
        description="Filled amount in native units expressed as a decimal (precision: 9)",
        examples=["0.5"],
    )
    otoco_trigger_type: Optional[OtocoTriggerType] = Field(
        None,
        alias="otocoTriggerType",
        description="Type of OTOCO relationship (OTO or OCO)",
        examples=[0],
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of the OTOCO group this order belongs to",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    result: Result = Field(
        ..., description="Code indicating the result of the submission", examples=["Ok"]
    )


class StatusCode6(Enum):
    number_422 = 422


class Message(Enum):
    too_many_open_orders = "TooManyOpenOrders"
    too_many_stop_orders = "TooManyStopOrders"
    exchange_suspended = "ExchangeSuspended"
    too_many_positions = "TooManyPositions"


class Error6(Enum):
    unprocessable_entity = "Unprocessable Entity"


class SubmitOrderFailedDto(BaseModel):
    status_code: StatusCode6 = Field(..., alias="statusCode")
    message: Message = Field(
        ...,
        description="Code indicating the reason for failure",
        examples=["TooManyOpenOrders"],
    )
    error: Error6


class Type6(Enum):
    market = "MARKET"


class Data2(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    type: Type6 = Field(..., description="Market order type", examples=["MARKET"])
    quantity: Decimal = Field(
        ...,
        description="Quantity of product in native units expressed as a decimal (precision: 9)",
        examples=["5.5"],
    )
    side: Side = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    onchain_id: confloat(ge=1.0) = Field(
        ...,
        alias="onchainId",
        description="Onchain generated productId from prior product registration",
        examples=[1],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="Product engine type e.g. PERP (0)",
        examples=[0],
    )
    reduce_only: Optional[bool] = Field(
        False,
        alias="reduceOnly",
        description="Whether this should be a reduce-only order, required for close",
    )
    close: Optional[bool] = Field(
        False,
        description="Order closes the entire current position, requires zero quantity and reduceOnly",
    )
    stop_price: Optional[Decimal] = Field(
        Decimal("0"),
        alias="stopPrice",
        description="Stop price expressed as a decimal (precision: 9), requires stopType",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType] = Field(
        None,
        alias="stopType",
        description="Stop type, either 0 (take-profit) or 1 (stop-loss), requires non-zero stopPrice",
        examples=[1],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    expires_at: Optional[float] = Field(
        None,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch), defaults to the maximum allowed value: signedAt + 6652800",
    )
    otoco_trigger: Optional[bool] = Field(
        False,
        alias="otocoTrigger",
        description="Set if this order should be the OTO order in a new OTOCO group for triggering stop-loss/take-profit orders (precludes otocoGroup)",
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of an existing OTOCO group this order will join as an OCO order (precludes otocoTrigger)",
    )


class Type7(Enum):
    limit = "LIMIT"


class Data3(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    type: Type7 = Field(..., description="Limit order type", examples=["LIMIT"])
    quantity: Decimal = Field(
        ...,
        description="Quantity of product in native units expressed as a decimal (precision: 9)",
        examples=["5.5"],
    )
    side: Side = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    onchain_id: confloat(ge=1.0) = Field(
        ...,
        alias="onchainId",
        description="Onchain generated productId from prior product registration",
        examples=[1],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="Product engine type e.g. PERP (0)",
        examples=[0],
    )
    reduce_only: Optional[bool] = Field(
        False,
        alias="reduceOnly",
        description="Whether this should be a reduce-only order, required for close",
    )
    close: Optional[bool] = Field(
        False,
        description="Order closes the entire current position, requires zero quantity and reduceOnly",
    )
    stop_price: Optional[Decimal] = Field(
        Decimal("0"),
        alias="stopPrice",
        description="Stop price expressed as a decimal (precision: 9), requires stopType",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType] = Field(
        None,
        alias="stopType",
        description="Stop type, either 0 (take-profit) or 1 (stop-loss), requires non-zero stopPrice",
        examples=[1],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    expires_at: Optional[float] = Field(
        None,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch), defaults to the maximum allowed value: signedAt + 6652800",
    )
    otoco_trigger: Optional[bool] = Field(
        False,
        alias="otocoTrigger",
        description="Set if this order should be the OTO order in a new OTOCO group for triggering stop-loss/take-profit orders (precludes otocoGroup)",
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of an existing OTOCO group this order will join as an OCO order (precludes otocoTrigger)",
    )
    price: Decimal = Field(
        ...,
        description="Limit price expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    time_in_force: TimeInForce = Field(
        ...,
        alias="timeInForce",
        description="How long an order will remain until executed/expired",
        examples=["IOC"],
    )
    post_only: bool = Field(
        ...,
        alias="postOnly",
        description="Only add order if it does not immediately fill",
        examples=[True],
    )


class SubmitDryOrderDto(BaseModel):
    data: Union[Data2, Data3]


class Code(Enum):
    ok = "Ok"
    causes_immediate_liquidation = "CausesImmediateLiquidation"
    immediate_match_post_only = "ImmediateMatchPostOnly"
    instrument_open_value_cap_exceeded = "InstrumentOpenValueCapExceeded"
    insufficient_balance = "InsufficientBalance"
    liquidation = "Liquidation"
    oco_filled = "OcoFilled"
    order_increases_position = "OrderIncreasesPosition"
    risk_limit_exceeded = "RiskLimitExceeded"
    trigger_canceled = "TriggerCanceled"
    unfilled_fill_or_kill = "UnfilledFillOrKill"
    unfilled_immediate_or_cancel = "UnfilledImmediateOrCancel"
    unfilled_market_order = "UnfilledMarketOrder"


class OrderDryRunDto(BaseModel):
    margin_required: str = Field(
        ...,
        alias="marginRequired",
        description="Margin required for order in USD expressed as a decimal (precision: 9)",
        examples=["1000.5"],
    )
    margin_available: str = Field(
        ...,
        alias="marginAvailable",
        description="Margin available excluding this order in USD expressed as a decimal (precision: 9)",
        examples=["5000.75"],
    )
    total_used_margin: str = Field(
        ...,
        alias="totalUsedMargin",
        description="Total used margin including this order in USD expressed as a decimal (precision: 9)",
        examples=["3000.25"],
    )
    risk_used: str = Field(
        ...,
        alias="riskUsed",
        description="Risk used including position and open orders in USD expressed as a decimal (precision: 9)",
        examples=["3000.25"],
    )
    risk_available: str = Field(
        ...,
        alias="riskAvailable",
        description="Risk available for the product in USD expressed as a decimal (precision: 9)",
        examples=["100000000"],
    )
    code: Code = Field(
        ..., description="Code indicating a result of the dry run", examples=["Ok"]
    )


class CancelOrderDtoData(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account that created the signature in this message",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    order_ids: List[str] = Field(
        ...,
        alias="orderIds",
        description="Ids of the orders to be canceled",
        examples=[["80569be0-afba-43f8-ac20-767d0974c6a3"]],
        max_length=256,
        min_length=1,
    )


class Data4(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account that created the signature in this message",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    order_ids: List[str] = Field(
        ...,
        alias="orderIds",
        description="Ids of the orders to be canceled",
        examples=[["80569be0-afba-43f8-ac20-767d0974c6a3"]],
        max_length=256,
        min_length=1,
    )


class CancelOrderDto(BaseModel):
    signature: str = Field(
        ..., description="The signature from signTypedData(...) signed by the sender"
    )
    data: Data4


class Result1(Enum):
    already_canceled = "AlreadyCanceled"
    already_expired = "AlreadyExpired"
    already_filled = "AlreadyFilled"
    not_found = "NotFound"
    ok = "Ok"


class CancelOrderResultDto(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the order",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    result: Result1 = Field(
        ..., description="Code indicating the result of the submission", examples=["Ok"]
    )


class Datum1(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the order",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    result: Result1 = Field(
        ..., description="Code indicating the result of the submission", examples=["Ok"]
    )


class ListOfCancelOrderResultDtos(BaseModel):
    data: List[Datum1] = Field(..., description="Array of order cancelation results")


class Type8(Enum):
    limit = "LIMIT"
    market = "MARKET"


class OrderFillDto(BaseModel):
    order_id: str = Field(
        ...,
        alias="orderId",
        description="Id of the order",
        examples=["b1234567-89ab-cdef-0123-456789abcdef"],
    )
    price: str = Field(
        ...,
        description="Fill price in expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Quantity filled in native units expressed as a decimal (precision: 9)",
        examples=["2.420"],
    )
    type: Type8 = Field(
        ...,
        description="The provided subaccount's order type e.g. MARKET or LIMIT",
        examples=["LIMIT"],
    )
    side: Side = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    reduce_only: bool = Field(
        ...,
        alias="reduceOnly",
        description="Indicates if the fill is reduce only",
        examples=[True],
    )
    fee_usd: str = Field(
        ...,
        alias="feeUsd",
        description="The provided subaccount's charged fee in USD expressed as a decimal (precision: 9)",
        examples=["3.049563"],
    )
    is_maker: bool = Field(
        ...,
        alias="isMaker",
        description="Indicates if the fill was a maker or taker",
        examples=[True],
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product the order fill was made against",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Fill creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class Datum2(BaseModel):
    order_id: str = Field(
        ...,
        alias="orderId",
        description="Id of the order",
        examples=["b1234567-89ab-cdef-0123-456789abcdef"],
    )
    price: str = Field(
        ...,
        description="Fill price in expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Quantity filled in native units expressed as a decimal (precision: 9)",
        examples=["2.420"],
    )
    type: Type8 = Field(
        ...,
        description="The provided subaccount's order type e.g. MARKET or LIMIT",
        examples=["LIMIT"],
    )
    side: Side = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    reduce_only: bool = Field(
        ...,
        alias="reduceOnly",
        description="Indicates if the fill is reduce only",
        examples=[True],
    )
    fee_usd: str = Field(
        ...,
        alias="feeUsd",
        description="The provided subaccount's charged fee in USD expressed as a decimal (precision: 9)",
        examples=["3.049563"],
    )
    is_maker: bool = Field(
        ...,
        alias="isMaker",
        description="Indicates if the fill was a maker or taker",
        examples=[True],
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product the order fill was made against",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Fill creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class PageOfOrderFillDtos(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum2] = Field(..., description="Array of order fill objects")


class MakerSide(Enum):
    buy = 0
    sell = 1


class TakerSide(Enum):
    buy = 0
    sell = 1


class TradeDto(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the trade",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    taker_order_id: str = Field(
        ...,
        alias="takerOrderId",
        description="Id of the taker order",
        examples=["b1234567-89ab-cdef-0123-456789abcdef"],
    )
    maker_order_id: str = Field(
        ...,
        alias="makerOrderId",
        description="Id of the maker order",
        examples=["e3f0a8b7-6daa-498a-bf53-c16dc5e779de"],
    )
    maker_fee_usd: str = Field(
        ...,
        alias="makerFeeUsd",
        description="Maker fee in USD expressed as a decimal (precision: 9)",
        examples=["3.049563"],
    )
    taker_fee_usd: str = Field(
        ...,
        alias="takerFeeUsd",
        description="Taker fee in USD expressed as a decimal (precision: 9)",
        examples=["4.5743445"],
    )
    price: str = Field(
        ...,
        description="Price expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Quantity filled in native units expressed as a decimal (precision: 9)",
        examples=["2.420"],
    )
    maker_side: MakerSide = Field(
        ...,
        alias="makerSide",
        description="Maker side as either BUY (0) or SELL (1)",
        examples=[1],
    )
    taker_side: TakerSide = Field(
        ...,
        alias="takerSide",
        description="Taker side as either BUY (0) or SELL (1)",
        examples=[0],
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product the trade was made against",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Trade creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class Datum3(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the trade",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    taker_order_id: str = Field(
        ...,
        alias="takerOrderId",
        description="Id of the taker order",
        examples=["b1234567-89ab-cdef-0123-456789abcdef"],
    )
    maker_order_id: str = Field(
        ...,
        alias="makerOrderId",
        description="Id of the maker order",
        examples=["e3f0a8b7-6daa-498a-bf53-c16dc5e779de"],
    )
    maker_fee_usd: str = Field(
        ...,
        alias="makerFeeUsd",
        description="Maker fee in USD expressed as a decimal (precision: 9)",
        examples=["3.049563"],
    )
    taker_fee_usd: str = Field(
        ...,
        alias="takerFeeUsd",
        description="Taker fee in USD expressed as a decimal (precision: 9)",
        examples=["4.5743445"],
    )
    price: str = Field(
        ...,
        description="Price expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Quantity filled in native units expressed as a decimal (precision: 9)",
        examples=["2.420"],
    )
    maker_side: MakerSide = Field(
        ...,
        alias="makerSide",
        description="Maker side as either BUY (0) or SELL (1)",
        examples=[1],
    )
    taker_side: TakerSide = Field(
        ...,
        alias="takerSide",
        description="Taker side as either BUY (0) or SELL (1)",
        examples=[0],
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product the trade was made against",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Trade creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class PageOfTradeDtos(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum3] = Field(..., description="Array of trade objects")


class PositionDto(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the position",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    cost: str = Field(
        ...,
        description="Current cost of the position in USD expressed as a decimal (precision: 9)",
        examples=["9.3"],
    )
    size: str = Field(
        ...,
        description="Position size in native units expressed as a decimal (precision: 9)",
        examples=["1.5"],
    )
    funding_usd: str = Field(
        ...,
        alias="fundingUsd",
        description="Amount in USD since position was opened expressed as a decimal (precision: 9)",
        examples=["10.5"],
    )
    fees_accrued_usd: str = Field(
        ...,
        alias="feesAccruedUsd",
        description="Fees accrued in USD expressed as a decimal (precision: 9)",
        examples=["0.5"],
    )
    realized_pnl: str = Field(
        ...,
        alias="realizedPnl",
        description="Realized PnL in USD expressed as a decimal (precision: 9)",
        examples=["-12.5"],
    )
    total_increase_notional: str = Field(
        ...,
        alias="totalIncreaseNotional",
        description="Cumulative USD value of all position increases expressed as a decimal (precision: 9)",
        examples=["1000.0"],
    )
    total_increase_quantity: str = Field(
        ...,
        alias="totalIncreaseQuantity",
        description="Cumulative quantity of all position increases expressed as a decimal (precision: 9)",
        examples=["2.5"],
    )
    total_decrease_notional: str = Field(
        ...,
        alias="totalDecreaseNotional",
        description="Cumulative USD value of all position decreases expressed as a decimal (precision: 9)",
        examples=["1050.0"],
    )
    total_decrease_quantity: str = Field(
        ...,
        alias="totalDecreaseQuantity",
        description="Cumulative quantity of all position decreases expressed as a decimal (precision: 9)",
        examples=["2.5"],
    )
    side: Side = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[0]
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product to this position belongs to",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    updated_at: float = Field(
        ...,
        alias="updatedAt",
        description="Position last updated timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Position creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    is_liquidated: bool = Field(
        ...,
        alias="isLiquidated",
        description="Whether the position was liquidated",
        examples=[False],
    )


class Datum4(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the position",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    cost: str = Field(
        ...,
        description="Current cost of the position in USD expressed as a decimal (precision: 9)",
        examples=["9.3"],
    )
    size: str = Field(
        ...,
        description="Position size in native units expressed as a decimal (precision: 9)",
        examples=["1.5"],
    )
    funding_usd: str = Field(
        ...,
        alias="fundingUsd",
        description="Amount in USD since position was opened expressed as a decimal (precision: 9)",
        examples=["10.5"],
    )
    fees_accrued_usd: str = Field(
        ...,
        alias="feesAccruedUsd",
        description="Fees accrued in USD expressed as a decimal (precision: 9)",
        examples=["0.5"],
    )
    realized_pnl: str = Field(
        ...,
        alias="realizedPnl",
        description="Realized PnL in USD expressed as a decimal (precision: 9)",
        examples=["-12.5"],
    )
    total_increase_notional: str = Field(
        ...,
        alias="totalIncreaseNotional",
        description="Cumulative USD value of all position increases expressed as a decimal (precision: 9)",
        examples=["1000.0"],
    )
    total_increase_quantity: str = Field(
        ...,
        alias="totalIncreaseQuantity",
        description="Cumulative quantity of all position increases expressed as a decimal (precision: 9)",
        examples=["2.5"],
    )
    total_decrease_notional: str = Field(
        ...,
        alias="totalDecreaseNotional",
        description="Cumulative USD value of all position decreases expressed as a decimal (precision: 9)",
        examples=["1050.0"],
    )
    total_decrease_quantity: str = Field(
        ...,
        alias="totalDecreaseQuantity",
        description="Cumulative quantity of all position decreases expressed as a decimal (precision: 9)",
        examples=["2.5"],
    )
    side: Side = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[0]
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product to this position belongs to",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    updated_at: float = Field(
        ...,
        alias="updatedAt",
        description="Position last updated timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Position creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    is_liquidated: bool = Field(
        ...,
        alias="isLiquidated",
        description="Whether the position was liquidated",
        examples=[False],
    )


class PageOfPositionDtos(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum4] = Field(..., description="Array of position objects")


class Type10(Enum):
    limit = "LIMIT"
    market = "MARKET"
    liquidation = "LIQUIDATION"


class PositionFillDto(BaseModel):
    price: str = Field(
        ...,
        description="Fill price expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Quantity filled in native units expressed as a decimal (precision: 9)",
        examples=["2.420"],
    )
    type: Type10 = Field(
        ...,
        description="Corresponding order type that led to the position fill, LIQUIDATED if takeover",
        examples=["LIMIT"],
    )
    side: Side = Field(
        ...,
        description="Direction of the fill as either BUY (0) or SELL (1)",
        examples=[1],
    )
    reduce_only: bool = Field(
        ...,
        alias="reduceOnly",
        description="Indicates if the fill is reduce only",
        examples=[False],
    )
    fee_usd: str = Field(
        ...,
        alias="feeUsd",
        description="The charged fee in USD expressed as a decimal (precision: 9)",
        examples=["3.049563"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Fill creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class Datum5(BaseModel):
    price: str = Field(
        ...,
        description="Fill price expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Quantity filled in native units expressed as a decimal (precision: 9)",
        examples=["2.420"],
    )
    type: Type10 = Field(
        ...,
        description="Corresponding order type that led to the position fill, LIQUIDATED if takeover",
        examples=["LIMIT"],
    )
    side: Side = Field(
        ...,
        description="Direction of the fill as either BUY (0) or SELL (1)",
        examples=[1],
    )
    reduce_only: bool = Field(
        ...,
        alias="reduceOnly",
        description="Indicates if the fill is reduce only",
        examples=[False],
    )
    fee_usd: str = Field(
        ...,
        alias="feeUsd",
        description="The charged fee in USD expressed as a decimal (precision: 9)",
        examples=["3.049563"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Fill creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class PageOfPositionFillDtos(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum5] = Field(..., description="Array of position fill objects")


class ProductDto(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the registered product",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    ticker: str = Field(
        ...,
        description="Product ticker based on the base quote token",
        examples=["ETHUSD"],
    )
    display_ticker: str = Field(
        ...,
        alias="displayTicker",
        description="Product display ticker based on the base quote token",
        examples=["ETH-USD"],
    )
    base_token_address: str = Field(
        ...,
        alias="baseTokenAddress",
        description="Address of the base token (zero address if virtual)",
        examples=["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"],
    )
    quote_token_address: str = Field(
        ...,
        alias="quoteTokenAddress",
        description="Address of quote token",
        examples=["0x4c9edd5852cd905f086c759e8383e09bff1e68b3"],
    )
    base_token_name: str = Field(
        ...,
        alias="baseTokenName",
        description="Name of the base token (e.g. BTC in BTCUSD)",
        examples=["ETH"],
    )
    quote_token_name: str = Field(
        ...,
        alias="quoteTokenName",
        description="Name of the quote token (e.g. USD in BTCUSD)",
        examples=["USDe"],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="The corresponding engine type this product was registered with",
        examples=[0],
    )
    onchain_id: float = Field(
        ...,
        alias="onchainId",
        description="The productId generated onchain after registering for the first time",
        examples=[1],
    )
    block_number: str = Field(
        ...,
        alias="blockNumber",
        description="Block number this product was registered on",
        examples=["123062737"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Product creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    funding_updated_at: Optional[float] = Field(
        None,
        alias="fundingUpdatedAt",
        description="Unix timestamp when funding was last updated",
        examples=[1721724269],
    )
    min_quantity: str = Field(
        ...,
        alias="minQuantity",
        description="The minimum order quantity in native units expressed as a decimal (precision: 9)",
        examples=["0.05"],
    )
    lot_size: str = Field(
        ...,
        alias="lotSize",
        description="Quantity must be divisible by the lotSize in expressed as a decimal (precision: 9)",
        examples=["0.01"],
    )
    tick_size: str = Field(
        ...,
        alias="tickSize",
        description="Minimum price increment (tickSize) expressed as a decimal (precision: 9)",
        examples=["0.0001"],
    )
    maker_fee: str = Field(
        ...,
        alias="makerFee",
        description="Fee charged to the maker on order trades expressed as a decimal (precision: 9)",
        examples=["0.001"],
    )
    taker_fee: str = Field(
        ...,
        alias="takerFee",
        description="Fee charged to the taker on order trades expressed as a decimal (precision: 9)",
        examples=["0.004"],
    )
    max_quantity: str = Field(
        ...,
        alias="maxQuantity",
        description="Max quantity per order in native units expressed as a decimal (precision: 9)",
        examples=["100000"],
    )
    min_price: str = Field(
        ...,
        alias="minPrice",
        description="Min price in USD expressed as a decimal (precision: 9)",
        examples=["0"],
    )
    max_price: str = Field(
        ...,
        alias="maxPrice",
        description="Max price in USD expressed as a decimal (precision: 9)",
        examples=["100000"],
    )
    volume24h: str = Field(
        ...,
        description="24h volume in base token native units expressed as a decimal (precision: 9)",
        examples=["500000000.42"],
    )
    max_leverage: float = Field(
        ...,
        alias="maxLeverage",
        description="Maximum leverage allowed for the product",
        examples=[20],
    )
    pyth_feed_id: float = Field(
        ..., alias="pythFeedId", description="Pyth price feed id", examples=[2]
    )
    funding_rate1h: str = Field(
        ...,
        alias="fundingRate1h",
        description="Last computed hourly funding rate expressed as a decimal (precision: 9)",
        examples=["0.01"],
    )
    open_interest: str = Field(
        ...,
        alias="openInterest",
        description="Open interest in native units expressed as a decimal (precision: 9)",
        examples=["3300.17"],
    )
    max_open_interest_usd: str = Field(
        ...,
        alias="maxOpenInterestUsd",
        description="Max open interest in USD expressed as a decimal (precision: 9)",
        examples=["200000000.0"],
    )
    max_position_notional_usd: str = Field(
        ...,
        alias="maxPositionNotionalUsd",
        description="Max position notional value, in USD expressed as a decimal (precision: 9)",
        examples=["50000000.0"],
    )


class Datum6(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the registered product",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    ticker: str = Field(
        ...,
        description="Product ticker based on the base quote token",
        examples=["ETHUSD"],
    )
    display_ticker: str = Field(
        ...,
        alias="displayTicker",
        description="Product display ticker based on the base quote token",
        examples=["ETH-USD"],
    )
    base_token_address: str = Field(
        ...,
        alias="baseTokenAddress",
        description="Address of the base token (zero address if virtual)",
        examples=["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"],
    )
    quote_token_address: str = Field(
        ...,
        alias="quoteTokenAddress",
        description="Address of quote token",
        examples=["0x4c9edd5852cd905f086c759e8383e09bff1e68b3"],
    )
    base_token_name: str = Field(
        ...,
        alias="baseTokenName",
        description="Name of the base token (e.g. BTC in BTCUSD)",
        examples=["ETH"],
    )
    quote_token_name: str = Field(
        ...,
        alias="quoteTokenName",
        description="Name of the quote token (e.g. USD in BTCUSD)",
        examples=["USDe"],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="The corresponding engine type this product was registered with",
        examples=[0],
    )
    onchain_id: float = Field(
        ...,
        alias="onchainId",
        description="The productId generated onchain after registering for the first time",
        examples=[1],
    )
    block_number: str = Field(
        ...,
        alias="blockNumber",
        description="Block number this product was registered on",
        examples=["123062737"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Product creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    funding_updated_at: Optional[float] = Field(
        None,
        alias="fundingUpdatedAt",
        description="Unix timestamp when funding was last updated",
        examples=[1721724269],
    )
    min_quantity: str = Field(
        ...,
        alias="minQuantity",
        description="The minimum order quantity in native units expressed as a decimal (precision: 9)",
        examples=["0.05"],
    )
    lot_size: str = Field(
        ...,
        alias="lotSize",
        description="Quantity must be divisible by the lotSize in expressed as a decimal (precision: 9)",
        examples=["0.01"],
    )
    tick_size: str = Field(
        ...,
        alias="tickSize",
        description="Minimum price increment (tickSize) expressed as a decimal (precision: 9)",
        examples=["0.0001"],
    )
    maker_fee: str = Field(
        ...,
        alias="makerFee",
        description="Fee charged to the maker on order trades expressed as a decimal (precision: 9)",
        examples=["0.001"],
    )
    taker_fee: str = Field(
        ...,
        alias="takerFee",
        description="Fee charged to the taker on order trades expressed as a decimal (precision: 9)",
        examples=["0.004"],
    )
    max_quantity: str = Field(
        ...,
        alias="maxQuantity",
        description="Max quantity per order in native units expressed as a decimal (precision: 9)",
        examples=["100000"],
    )
    min_price: str = Field(
        ...,
        alias="minPrice",
        description="Min price in USD expressed as a decimal (precision: 9)",
        examples=["0"],
    )
    max_price: str = Field(
        ...,
        alias="maxPrice",
        description="Max price in USD expressed as a decimal (precision: 9)",
        examples=["100000"],
    )
    volume24h: str = Field(
        ...,
        description="24h volume in base token native units expressed as a decimal (precision: 9)",
        examples=["500000000.42"],
    )
    max_leverage: float = Field(
        ...,
        alias="maxLeverage",
        description="Maximum leverage allowed for the product",
        examples=[20],
    )
    pyth_feed_id: float = Field(
        ..., alias="pythFeedId", description="Pyth price feed id", examples=[2]
    )
    funding_rate1h: str = Field(
        ...,
        alias="fundingRate1h",
        description="Last computed hourly funding rate expressed as a decimal (precision: 9)",
        examples=["0.01"],
    )
    open_interest: str = Field(
        ...,
        alias="openInterest",
        description="Open interest in native units expressed as a decimal (precision: 9)",
        examples=["3300.17"],
    )
    max_open_interest_usd: str = Field(
        ...,
        alias="maxOpenInterestUsd",
        description="Max open interest in USD expressed as a decimal (precision: 9)",
        examples=["200000000.0"],
    )
    max_position_notional_usd: str = Field(
        ...,
        alias="maxPositionNotionalUsd",
        description="Max position notional value, in USD expressed as a decimal (precision: 9)",
        examples=["50000000.0"],
    )


class PageOfProductDtos(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum6] = Field(..., description="Array of product objects")


class MarketLiquidityDto(BaseModel):
    timestamp: float = Field(
        ...,
        description="Most recent book update, created timestamp if never updated (ms since Unix Epoch)",
        examples=[1731664105881],
    )
    previous_timestamp: Optional[float] = Field(
        None,
        alias="previousTimestamp",
        description="Previous book update, undefined if never updated (ms since Unix Epoch)",
        examples=[1731664105881],
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id representing the product",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    asks: List[List[str]] = Field(
        ...,
        description="An array of ask tuple pairs (price, quantity) ordered in asc",
        examples=[[["4200.69", "1337.420"]]],
    )
    bids: List[List[str]] = Field(
        ...,
        description="An array of bid tuple pairs (price, quantity) ordered in desc",
        examples=[[["4199.42", "420.55"]]],
    )


class MarketPriceDto(BaseModel):
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id representing the registered product",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    best_bid_price: Optional[str] = Field(
        None,
        alias="bestBidPrice",
        description="Best bid price in USD expressed as a decimal (precision: 9)",
        examples=["104399.65"],
    )
    best_ask_price: Optional[str] = Field(
        None,
        alias="bestAskPrice",
        description="Best ask price in USD expressed as a decimal (precision: 9)",
        examples=["104400.1"],
    )
    oracle_price: Optional[str] = Field(
        None,
        alias="oraclePrice",
        description="Oracle price in USD expressed as a decimal (precision: 9)",
        examples=["104399.7"],
    )
    price24h_ago: Optional[str] = Field(
        None,
        alias="price24hAgo",
        description="Price of product 24hrs ago in USD expressed as a decimal (precision: 9)",
        examples=["101228.38"],
    )


class Datum7(BaseModel):
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id representing the registered product",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    best_bid_price: Optional[str] = Field(
        None,
        alias="bestBidPrice",
        description="Best bid price in USD expressed as a decimal (precision: 9)",
        examples=["104399.65"],
    )
    best_ask_price: Optional[str] = Field(
        None,
        alias="bestAskPrice",
        description="Best ask price in USD expressed as a decimal (precision: 9)",
        examples=["104400.1"],
    )
    oracle_price: Optional[str] = Field(
        None,
        alias="oraclePrice",
        description="Oracle price in USD expressed as a decimal (precision: 9)",
        examples=["104399.7"],
    )
    price24h_ago: Optional[str] = Field(
        None,
        alias="price24hAgo",
        description="Price of product 24hrs ago in USD expressed as a decimal (precision: 9)",
        examples=["101228.38"],
    )


class ListOfMarketPriceDtos(BaseModel):
    data: List[Datum7] = Field(..., description="Array of market price objects")


class FundingDto(BaseModel):
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Funding charge timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    funding_rate1h: str = Field(
        ...,
        alias="fundingRate1h",
        description="Hourly funding rate",
        examples=["0.013876480"],
    )


class Datum8(BaseModel):
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Funding charge timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    funding_rate1h: str = Field(
        ...,
        alias="fundingRate1h",
        description="Hourly funding rate",
        examples=["0.013876480"],
    )


class PageOfFundingDtos(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum8] = Field(..., description="Array of funding rate history objects")


class ProjectedFundingDto(BaseModel):
    funding_rate_projected1h: str = Field(
        ...,
        alias="fundingRateProjected1h",
        description="Projected funding rate",
        examples=["0.013876480"],
    )
    funding_rate1h: str = Field(
        ..., alias="fundingRate1h", description="Funding rate", examples=["0.013876480"]
    )


class DomainTypeDto(BaseModel):
    name: str = Field(..., description="Name of signing domain")
    version: str = Field(..., description="Current major version of the signing domain")
    chain_id: float = Field(..., alias="chainId", description="The EIP-155 chain id")
    verifying_contract: str = Field(
        ...,
        alias="verifyingContract",
        description="Address of the contract that will verify the signature",
    )


class SignatureTypesDto(BaseModel):
    link_signer: str = Field(
        ..., alias="LinkSigner", description="LinkSigner signature type"
    )
    trade_order: str = Field(
        ..., alias="TradeOrder", description="TradeOrder signature type"
    )
    initiate_withdraw: str = Field(
        ..., alias="InitiateWithdraw", description="InitiateWithdraw signature type"
    )
    revoke_linked_signer: str = Field(
        ..., alias="RevokeLinkedSigner", description="RevokeLinkedSigner signature type"
    )
    cancel_order: str = Field(
        ..., alias="CancelOrder", description="CancelOrder signature type"
    )


class Domain(BaseModel):
    name: str = Field(..., description="Name of signing domain")
    version: str = Field(..., description="Current major version of the signing domain")
    chain_id: float = Field(..., alias="chainId", description="The EIP-155 chain id")
    verifying_contract: str = Field(
        ...,
        alias="verifyingContract",
        description="Address of the contract that will verify the signature",
    )


class SignatureTypes(BaseModel):
    link_signer: str = Field(
        ..., alias="LinkSigner", description="LinkSigner signature type"
    )
    trade_order: str = Field(
        ..., alias="TradeOrder", description="TradeOrder signature type"
    )
    initiate_withdraw: str = Field(
        ..., alias="InitiateWithdraw", description="InitiateWithdraw signature type"
    )
    revoke_linked_signer: str = Field(
        ..., alias="RevokeLinkedSigner", description="RevokeLinkedSigner signature type"
    )
    cancel_order: str = Field(
        ..., alias="CancelOrder", description="CancelOrder signature type"
    )


class RpcConfigDto(BaseModel):
    domain: Domain = Field(..., description="Domain type")
    signature_types: SignatureTypes = Field(
        ..., alias="signatureTypes", description="Signature types"
    )


class SubaccountDto(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    name: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    account: str = Field(
        ...,
        description="Address of the account which registered the subaccount",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    created_block_number: str = Field(
        ...,
        alias="createdBlockNumber",
        description="Block number this subaccount was created on",
        examples=["123062737"],
    )
    registered_block_number: Optional[str] = Field(
        None,
        alias="registeredBlockNumber",
        description="Block number this subaccount was registered on",
        examples=["123062737"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Subaccount creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class Datum9(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    name: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    account: str = Field(
        ...,
        description="Address of the account which registered the subaccount",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    created_block_number: str = Field(
        ...,
        alias="createdBlockNumber",
        description="Block number this subaccount was created on",
        examples=["123062737"],
    )
    registered_block_number: Optional[str] = Field(
        None,
        alias="registeredBlockNumber",
        description="Block number this subaccount was registered on",
        examples=["123062737"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Subaccount creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class PageOfSubaccountDtos(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum9] = Field(..., description="Array of subaccount objects")


class SubaccountBalanceDto(BaseModel):
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id representing the subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    token_id: str = Field(
        ...,
        alias="tokenId",
        description="Id representing the token",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    token_address: str = Field(
        ...,
        alias="tokenAddress",
        description="ERC20 deposited token address (zero address if virtual)",
        examples=["0x70997970C51812dc3A010C7d01b50e0d17dc79C8"],
    )
    token_name: str = Field(
        ...,
        alias="tokenName",
        description="The unique exchange defined token name driven by addToken onchain",
        examples=["ETH"],
    )
    amount: Decimal = Field(
        ...,
        description="Token balance in native units expressed as a decimal (precision: 9)",
        examples=["1.5"],
    )
    available: Decimal = Field(
        ...,
        description="Portion of balance transferrable in native units expressed as a decimal (precision: 9)",
        examples=["0.1337"],
    )
    total_used: Decimal = Field(
        ...,
        alias="totalUsed",
        description="Portion of balance non-transferrable in native units expressed as a decimal (precision: 9)",
        examples=["1.3663"],
    )
    updated_at: float = Field(
        ...,
        alias="updatedAt",
        description="Token balance last updated timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class Datum10(BaseModel):
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id representing the subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    token_id: str = Field(
        ...,
        alias="tokenId",
        description="Id representing the token",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    token_address: str = Field(
        ...,
        alias="tokenAddress",
        description="ERC20 deposited token address (zero address if virtual)",
        examples=["0x70997970C51812dc3A010C7d01b50e0d17dc79C8"],
    )
    token_name: str = Field(
        ...,
        alias="tokenName",
        description="The unique exchange defined token name driven by addToken onchain",
        examples=["ETH"],
    )
    amount: Decimal = Field(
        ...,
        description="Token balance in native units expressed as a decimal (precision: 9)",
        examples=["1.5"],
    )
    available: Decimal = Field(
        ...,
        description="Portion of balance transferrable in native units expressed as a decimal (precision: 9)",
        examples=["0.1337"],
    )
    total_used: Decimal = Field(
        ...,
        alias="totalUsed",
        description="Portion of balance non-transferrable in native units expressed as a decimal (precision: 9)",
        examples=["1.3663"],
    )
    updated_at: float = Field(
        ...,
        alias="updatedAt",
        description="Token balance last updated timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class PageOfSubaccountBalanceDtos(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum10] = Field(..., description="Array of order subaccount balances")


class LinkSignerDtoData(BaseModel):
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    sender: str = Field(
        ...,
        description="Address of account that created the signature in this message",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    signer: str = Field(
        ...,
        description="Address of signer to allowed for delegated signing",
        examples=["0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )


class Data5(BaseModel):
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    sender: str = Field(
        ...,
        description="Address of account that created the signature in this message",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    signer: str = Field(
        ...,
        description="Address of signer to allowed for delegated signing",
        examples=["0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )


class LinkSignerDto(BaseModel):
    signature: str = Field(
        ..., description="The signature from signTypedData(...) signed by the sender"
    )
    signer_signature: str = Field(
        ...,
        alias="signerSignature",
        description="The signature from signTypedData(...) signed by the signer",
    )
    data: Data5


class SignerDto(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the linked signer",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    signer: str = Field(
        ...,
        description="Address of the signer linked with the subaccount",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    is_active: bool = Field(
        ...,
        alias="isActive",
        description="Whether this signer is the current active signer for the subaccount",
        examples=[True],
    )
    block_number: Optional[str] = Field(
        None,
        alias="blockNumber",
        description="Block number the signer has been linked on. Undefined means it has not be processed",
        examples=["123062737"],
    )
    linked_at: Optional[float] = Field(
        None,
        alias="linkedAt",
        description="Onchain linkage timestamp (ms since Unix Epoch)",
        examples=[1712019615000],
    )
    expires_at: float = Field(
        ...,
        alias="expiresAt",
        description="Signer expiry timestamp (ms since Unix Epoch)",
        examples=[1713229200000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Link signer submission timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class RevokeLinkedSignerDtoData(BaseModel):
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    sender: str = Field(
        ...,
        description="Address of account that created the signature in this message",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    signer: str = Field(
        ...,
        description="Address of signer to revoke",
        examples=["0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )


class Data6(BaseModel):
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    sender: str = Field(
        ...,
        description="Address of account that created the signature in this message",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    signer: str = Field(
        ...,
        description="Address of signer to revoke",
        examples=["0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )


class RevokeLinkedSignerDto(BaseModel):
    signature: str = Field(
        ..., description="The signature from signTypedData(...) signed by the sender"
    )
    data: Data6


class AccountSignerQuotaDto(BaseModel):
    max_linked_signers_period_days: float = Field(
        ...,
        alias="maxLinkedSignersPeriodDays",
        description="Ratelimit period in days for linking signers per account",
        examples=[7],
    )
    max_linked_signers_in_period: float = Field(
        ...,
        alias="maxLinkedSignersInPeriod",
        description="Max number of signer that can be linked within ratelimit period",
        examples=[10],
    )
    linked_signers_used_in_period: float = Field(
        ...,
        alias="linkedSignersUsedInPeriod",
        description="Number of signers linked within current ratelimit period",
        examples=[2],
    )


class Datum11(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the linked signer",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    signer: str = Field(
        ...,
        description="Address of the signer linked with the subaccount",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    is_active: bool = Field(
        ...,
        alias="isActive",
        description="Whether this signer is the current active signer for the subaccount",
        examples=[True],
    )
    block_number: Optional[str] = Field(
        None,
        alias="blockNumber",
        description="Block number the signer has been linked on. Undefined means it has not be processed",
        examples=["123062737"],
    )
    linked_at: Optional[float] = Field(
        None,
        alias="linkedAt",
        description="Onchain linkage timestamp (ms since Unix Epoch)",
        examples=[1712019615000],
    )
    expires_at: float = Field(
        ...,
        alias="expiresAt",
        description="Signer expiry timestamp (ms since Unix Epoch)",
        examples=[1713229200000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Link signer submission timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class PageOfSignersDto(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum11] = Field(..., description="Array of signer objects")


class Status2(Enum):
    submitted = "SUBMITTED"
    pending = "PENDING"
    completed = "COMPLETED"
    rejected = "REJECTED"


class WithdrawDto(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the withdraw",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    initiated_block_number: Optional[str] = Field(
        None,
        alias="initiatedBlockNumber",
        description="Block number the withdraw was initiated on",
        examples=["123062000"],
    )
    finalized_block_number: Optional[str] = Field(
        None,
        alias="finalizedBlockNumber",
        description="Block number the withdraw was completed on",
        examples=["123062992"],
    )
    status: Status2 = Field(
        ..., description="Current status of the withdraw", examples=["PENDING"]
    )
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    token: str = Field(
        ...,
        description="Address of asset withdraw",
        examples=["0xF3FC178157fb3c87548bAA86F9d24BA38E649B58"],
    )
    amount: str = Field(
        ...,
        description="Amount of asset transferred expressed as a decimal",
        examples=["1.5"],
    )
    is_ready: bool = Field(
        ...,
        alias="isReady",
        description="Indicates whether a withdraw is ready to be finalized onchain",
        examples=[True],
    )
    ready_at: Optional[float] = Field(
        None,
        alias="readyAt",
        description="Ready to be withdrawn onchain estimated timestamp (ms since Unix Epoch)",
        examples=[1712019615000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Withdraw creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class Datum12(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the withdraw",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    initiated_block_number: Optional[str] = Field(
        None,
        alias="initiatedBlockNumber",
        description="Block number the withdraw was initiated on",
        examples=["123062000"],
    )
    finalized_block_number: Optional[str] = Field(
        None,
        alias="finalizedBlockNumber",
        description="Block number the withdraw was completed on",
        examples=["123062992"],
    )
    status: Status2 = Field(
        ..., description="Current status of the withdraw", examples=["PENDING"]
    )
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    token: str = Field(
        ...,
        description="Address of asset withdraw",
        examples=["0xF3FC178157fb3c87548bAA86F9d24BA38E649B58"],
    )
    amount: str = Field(
        ...,
        description="Amount of asset transferred expressed as a decimal",
        examples=["1.5"],
    )
    is_ready: bool = Field(
        ...,
        alias="isReady",
        description="Indicates whether a withdraw is ready to be finalized onchain",
        examples=[True],
    )
    ready_at: Optional[float] = Field(
        None,
        alias="readyAt",
        description="Ready to be withdrawn onchain estimated timestamp (ms since Unix Epoch)",
        examples=[1712019615000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Withdraw creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class PageOfWithdrawDtos(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum12] = Field(..., description="Array of subaccount withdraw objects")


class Type12(Enum):
    deposit = "DEPOSIT"
    fees_claimed = "FEES_CLAIMED"
    withdraw = "WITHDRAW"


class TransferDto(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the transfer",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    initiated_block_number: Optional[str] = Field(
        None,
        alias="initiatedBlockNumber",
        description="Block number the transfer was initiated on",
        examples=["123062000"],
    )
    finalized_block_number: Optional[str] = Field(
        None,
        alias="finalizedBlockNumber",
        description="Block number the transfer was completed on",
        examples=["123062992"],
    )
    status: Status2 = Field(
        ..., description="Current status of the transfer", examples=["PENDING"]
    )
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    token_name: str = Field(
        ...,
        alias="tokenName",
        description="The unique exchange defined token name driven by addToken onchain",
        examples=["ETH"],
    )
    token_address: str = Field(
        ...,
        alias="tokenAddress",
        description="Address of token transferred",
        examples=["0xF3FC178157fb3c87548bAA86F9d24BA38E649B58"],
    )
    type: Type12 = Field(
        ..., description="Type of transfer (WITHDRAW or DEPOSIT)", examples=["WITHDRAW"]
    )
    amount: str = Field(
        ...,
        description="Amount of tokens transferred in native units expressed as a decimal (precision: 9)",
        examples=["0.42"],
    )
    fee: str = Field(
        ...,
        description="Fee paid for the transfer in native units expressed as a decimal (precision: 9)",
        examples=["0.42"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Transfer creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    initiated_transaction_hash: Optional[str] = Field(
        None,
        alias="initiatedTransactionHash",
        description="Transaction hash for the initiation of the transfer",
        examples=["0xF3FC178157fb3c87548bAA86F9d24BA38E649B58"],
    )
    finalized_transaction_hash: Optional[str] = Field(
        None,
        alias="finalizedTransactionHash",
        description="Transaction hash for the finalization of the transfer",
        examples=["0xF3FC178157fb3c87548bAA86F9d24BA38E649B58"],
    )


class Datum13(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the transfer",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    initiated_block_number: Optional[str] = Field(
        None,
        alias="initiatedBlockNumber",
        description="Block number the transfer was initiated on",
        examples=["123062000"],
    )
    finalized_block_number: Optional[str] = Field(
        None,
        alias="finalizedBlockNumber",
        description="Block number the transfer was completed on",
        examples=["123062992"],
    )
    status: Status2 = Field(
        ..., description="Current status of the transfer", examples=["PENDING"]
    )
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    token_name: str = Field(
        ...,
        alias="tokenName",
        description="The unique exchange defined token name driven by addToken onchain",
        examples=["ETH"],
    )
    token_address: str = Field(
        ...,
        alias="tokenAddress",
        description="Address of token transferred",
        examples=["0xF3FC178157fb3c87548bAA86F9d24BA38E649B58"],
    )
    type: Type12 = Field(
        ..., description="Type of transfer (WITHDRAW or DEPOSIT)", examples=["WITHDRAW"]
    )
    amount: str = Field(
        ...,
        description="Amount of tokens transferred in native units expressed as a decimal (precision: 9)",
        examples=["0.42"],
    )
    fee: str = Field(
        ...,
        description="Fee paid for the transfer in native units expressed as a decimal (precision: 9)",
        examples=["0.42"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Transfer creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    initiated_transaction_hash: Optional[str] = Field(
        None,
        alias="initiatedTransactionHash",
        description="Transaction hash for the initiation of the transfer",
        examples=["0xF3FC178157fb3c87548bAA86F9d24BA38E649B58"],
    )
    finalized_transaction_hash: Optional[str] = Field(
        None,
        alias="finalizedTransactionHash",
        description="Transaction hash for the finalization of the transfer",
        examples=["0xF3FC178157fb3c87548bAA86F9d24BA38E649B58"],
    )


class PageOfTransfersDtos(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum13] = Field(..., description="Array of transfer objects")


class InitiateWithdrawDtoData(BaseModel):
    account: str = Field(
        ...,
        description="Account address",
        examples=["0x70997970C51812dc3A010C7d01b50e0d17dc79C8"],
    )
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    token: str = Field(
        ...,
        description="Address of token to be withdrawn",
        examples=["0x5FC8d32690cc91D4c39d9d3abcBD16989F875707"],
    )
    amount: Decimal = Field(
        ...,
        description="Amount to withdraw in native units expressed as a decimal (precision: 9)",
        examples=["1337.42"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )


class Data7(BaseModel):
    account: str = Field(
        ...,
        description="Account address",
        examples=["0x70997970C51812dc3A010C7d01b50e0d17dc79C8"],
    )
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    token: str = Field(
        ...,
        description="Address of token to be withdrawn",
        examples=["0x5FC8d32690cc91D4c39d9d3abcBD16989F875707"],
    )
    amount: Decimal = Field(
        ...,
        description="Amount to withdraw in native units expressed as a decimal (precision: 9)",
        examples=["1337.42"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )


class InitiateWithdrawDto(BaseModel):
    signature: str = Field(
        ..., description="The signature from signTypedData(...) signed by the sender"
    )
    data: Data7


class Message1(Enum):
    insufficient_balance = "InsufficientBalance"
    token_address_mismatch = "TokenAddressMismatch"
    withdraw_disabled = "WithdrawDisabled"
    withdraw_amount_too_small = "WithdrawAmountTooSmall"
    pending_withdraw_exists = "PendingWithdrawExists"
    no_deposits_found = "NoDepositsFound"
    withdraw_amount_zero_or_negative = "WithdrawAmountZeroOrNegative"


class WithdrawFailedDto(BaseModel):
    status_code: StatusCode6 = Field(..., alias="statusCode")
    message: Message1 = Field(
        ...,
        description="Error code indicating the reason for failure",
        examples=["InsufficientBalance"],
    )
    error: Error6


class TokenDto(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the token",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    address: str = Field(
        ...,
        description="Address of the token (zero address virtual)",
        examples=["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"],
    )
    name: str = Field(
        ...,
        description="The unique exchange defined token name driven by addToken onchain",
        examples=["ETH"],
    )
    erc20_name: Optional[str] = Field(
        None,
        alias="erc20Name",
        description="ERC20 token name (available if not virtual)",
        examples=["Wrapped Ether"],
    )
    erc20_symbol: Optional[str] = Field(
        None,
        alias="erc20Symbol",
        description="ERC20 token symbol (available if not virtual)",
        examples=["WETH"],
    )
    erc20_decimals: Optional[float] = Field(
        None,
        alias="erc20Decimals",
        description="ERC20 token decimals (available if not virtual)",
        examples=[18],
    )
    deposit_enabled: bool = Field(
        ...,
        alias="depositEnabled",
        description="Whether the token is enabled for deposit",
        examples=[True],
    )
    withdraw_enabled: bool = Field(
        ...,
        alias="withdrawEnabled",
        description="Whether the token is enabled for withdraw",
        examples=[True],
    )
    deposit_fee: str = Field(
        ...,
        alias="depositFee",
        description="Amount of native units charged on deposit expressed as a decimal (precision: 9)",
        examples=["0"],
    )
    withdraw_fee: str = Field(
        ...,
        alias="withdrawFee",
        description="Amount of native units charged on withdraw expressed as a decimal (precision: 9)",
        examples=["0.0001"],
    )
    min_deposit: str = Field(
        ...,
        alias="minDeposit",
        description="Min deposit amount as native units expressed as a decimal (precision: 9)",
        examples=["0.1"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Token creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class Datum14(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the token",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    address: str = Field(
        ...,
        description="Address of the token (zero address virtual)",
        examples=["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"],
    )
    name: str = Field(
        ...,
        description="The unique exchange defined token name driven by addToken onchain",
        examples=["ETH"],
    )
    erc20_name: Optional[str] = Field(
        None,
        alias="erc20Name",
        description="ERC20 token name (available if not virtual)",
        examples=["Wrapped Ether"],
    )
    erc20_symbol: Optional[str] = Field(
        None,
        alias="erc20Symbol",
        description="ERC20 token symbol (available if not virtual)",
        examples=["WETH"],
    )
    erc20_decimals: Optional[float] = Field(
        None,
        alias="erc20Decimals",
        description="ERC20 token decimals (available if not virtual)",
        examples=[18],
    )
    deposit_enabled: bool = Field(
        ...,
        alias="depositEnabled",
        description="Whether the token is enabled for deposit",
        examples=[True],
    )
    withdraw_enabled: bool = Field(
        ...,
        alias="withdrawEnabled",
        description="Whether the token is enabled for withdraw",
        examples=[True],
    )
    deposit_fee: str = Field(
        ...,
        alias="depositFee",
        description="Amount of native units charged on deposit expressed as a decimal (precision: 9)",
        examples=["0"],
    )
    withdraw_fee: str = Field(
        ...,
        alias="withdrawFee",
        description="Amount of native units charged on withdraw expressed as a decimal (precision: 9)",
        examples=["0.0001"],
    )
    min_deposit: str = Field(
        ...,
        alias="minDeposit",
        description="Min deposit amount as native units expressed as a decimal (precision: 9)",
        examples=["0.1"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Token creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class PageOfTokensDtos(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum14] = Field(..., description="Array of token objects")


class SystemTimeDto(BaseModel):
    time: float = Field(
        ...,
        description="Current system timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class WhitelistDto(BaseModel):
    is_whitelisted: bool = Field(
        ..., alias="isWhitelisted", description="Whether the address is whitelisted"
    )


class Order(Enum):
    asc = "asc"
    desc = "desc"


class Side14(Enum):
    number_0 = 0
    number_1 = 1


class StopType8(Enum):
    number_0 = 0
    number_1 = 1


class Status6(Enum):
    canceled = "CANCELED"
    expired = "EXPIRED"
    filled = "FILLED"
    filled_partial = "FILLED_PARTIAL"
    new = "NEW"
    pending = "PENDING"
    rejected = "REJECTED"
    submitted = "SUBMITTED"


class OrderBy(Enum):
    type = "type"
    quantity = "quantity"
    price = "price"
    created_at = "createdAt"


class V1OrderGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    subaccount_id: str = Field(..., alias="subaccountId")
    product_ids: Optional[List[str]] = Field(None, alias="productIds")
    created_after: Optional[float] = Field(None, alias="createdAfter")
    created_before: Optional[float] = Field(None, alias="createdBefore")
    side: Optional[Side14] = None
    close: Optional[bool] = None
    stop_types: Optional[List[StopType8]] = Field(None, alias="stopTypes", examples=[0])
    statuses: Optional[List[Status6]] = Field(None, examples=["FILLED"])
    order_by: Optional[OrderBy] = Field(None, alias="orderBy", examples=["type"])


class Type14(Enum):
    limit = "LIMIT"
    market = "MARKET"


class Side15(Enum):
    buy = 0
    sell = 1


class StopType9(Enum):
    gain = 0
    loss = 1


class Datum15(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the order",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    type: Type14 = Field(
        ..., description="Trade order type e.g. MARKET or LIMIT", examples=["LIMIT"]
    )
    available_quantity: str = Field(
        ...,
        alias="availableQuantity",
        description="Remaining quantity (if modified or reduced) in native units expressed as a decimal (precision: 9)",
        examples=["10.5"],
    )
    quantity: str = Field(
        ...,
        description="Original quantity (as per order submission) in native units expressed as a decimal (precision: 9)",
        examples=["10.5"],
    )
    side: Side15 = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product this order was placed against",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id of the subaccount associated to order",
        examples=["c25c39d9-ce2b-4753-960c-c5ad558aace8"],
    )
    status: Status6 = Field(..., description="Status of the order", examples=["FILLED"])
    reduce_only: bool = Field(
        ...,
        alias="reduceOnly",
        description="Indicates if the order is reduce only",
        examples=[True],
    )
    close: bool = Field(..., description="Order closes the entire current position")
    updated_at: float = Field(
        ...,
        alias="updatedAt",
        description="Order last updated timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Order creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    sender: str = Field(
        ...,
        description="Account or linked signer address that originally submitted this order",
        examples=["0x2501c477d0a35545a387aa4a3eee4292a9a8b3f0"],
    )
    price: str = Field(
        ...,
        description="Limit price in native units expressed as a decimal, zero if market order (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Filled amount in native units expressed as a decimal (precision: 9)",
        examples=["0.5"],
    )
    stop_price: str = Field(
        ...,
        alias="stopPrice",
        description="Stop price expressed as a decimal (zero if not a stop order, precision: 9)",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType9] = Field(
        None,
        alias="stopType",
        description="Side as either BUY (0) or SELL (1)",
        examples=[1],
    )
    stop_price_type: Optional[StopPriceType] = Field(
        None,
        alias="stopPriceType",
        description="Type of stop price (stop orders only)",
        examples=[1],
    )
    time_in_force: Optional[TimeInForce] = Field(
        None,
        alias="timeInForce",
        description="How long an order will remain until executed/expired (required if limit)",
        examples=["GTD"],
    )
    expires_at: float = Field(
        ...,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    post_only: Optional[bool] = Field(
        None,
        alias="postOnly",
        description="Only add order if it does not immediately fill (limit only)",
        examples=[True],
    )
    otoco_trigger_type: Optional[OtocoTriggerType] = Field(
        None,
        alias="otocoTriggerType",
        description="Type of OTOCO relationship (OTO or OCO)",
        examples=[0],
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of the OTOCO group this order belongs to",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )


class V1OrderGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum15] = Field(..., description="Array of order objects")


class StatusCode8(Enum):
    number_400 = 400


class Error8(Enum):
    bad_request = "Bad Request"


class V1OrderGetResponse1(BaseModel):
    status_code: StatusCode8 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error8


class StatusCode9(Enum):
    number_401 = 401


class Error9(Enum):
    unauthorized = "Unauthorized"


class V1OrderGetResponse2(BaseModel):
    status_code: StatusCode9 = Field(..., alias="statusCode")
    message: str
    error: Error9


class StatusCode10(Enum):
    number_403 = 403


class Error10(Enum):
    forbidden = "Forbidden"


class V1OrderGetResponse3(BaseModel):
    status_code: StatusCode10 = Field(..., alias="statusCode")
    message: str
    error: Error10


class StatusCode11(Enum):
    number_404 = 404


class Error11(Enum):
    not_found = "Not Found"


class V1OrderGetResponse4(BaseModel):
    status_code: StatusCode11 = Field(..., alias="statusCode")
    message: str
    error: Error11


class StatusCode12(Enum):
    number_422 = 422


class Error12(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1OrderGetResponse5(BaseModel):
    status_code: StatusCode12 = Field(..., alias="statusCode")
    message: str
    error: Error12


class StatusCode13(Enum):
    number_429 = 429


class Error13(Enum):
    too_many_requests = "Too Many Requests"


class V1OrderGetResponse6(BaseModel):
    status_code: StatusCode13 = Field(..., alias="statusCode")
    message: str
    error: Error13


class Type15(Enum):
    market = "MARKET"


class Data8(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    type: Type15 = Field(..., description="Market order type", examples=["MARKET"])
    quantity: Decimal = Field(
        ...,
        description="Quantity of product in native units expressed as a decimal (precision: 9)",
        examples=["5.5"],
    )
    side: Side15 = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    onchain_id: confloat(ge=1.0) = Field(
        ...,
        alias="onchainId",
        description="Onchain generated productId from prior product registration",
        examples=[1],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="Product engine type e.g. PERP (0)",
        examples=[0],
    )
    reduce_only: Optional[bool] = Field(
        False,
        alias="reduceOnly",
        description="Whether this should be a reduce-only order, required for close",
    )
    close: Optional[bool] = Field(
        False,
        description="Order closes the entire current position, requires zero quantity and reduceOnly",
    )
    stop_price: Optional[Decimal] = Field(
        Decimal("0"),
        alias="stopPrice",
        description="Stop price expressed as a decimal (precision: 9), requires stopType",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType9] = Field(
        None,
        alias="stopType",
        description="Stop type, either 0 (take-profit) or 1 (stop-loss), requires non-zero stopPrice",
        examples=[1],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    expires_at: Optional[float] = Field(
        None,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch), defaults to the maximum allowed value: signedAt + 6652800",
    )
    otoco_trigger: Optional[bool] = Field(
        False,
        alias="otocoTrigger",
        description="Set if this order should be the OTO order in a new OTOCO group for triggering stop-loss/take-profit orders (precludes otocoGroup)",
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of an existing OTOCO group this order will join as an OCO order (precludes otocoTrigger)",
    )


class Type16(Enum):
    limit = "LIMIT"


class Data9(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    type: Type16 = Field(..., description="Limit order type", examples=["LIMIT"])
    quantity: Decimal = Field(
        ...,
        description="Quantity of product in native units expressed as a decimal (precision: 9)",
        examples=["5.5"],
    )
    side: Side15 = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    onchain_id: confloat(ge=1.0) = Field(
        ...,
        alias="onchainId",
        description="Onchain generated productId from prior product registration",
        examples=[1],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="Product engine type e.g. PERP (0)",
        examples=[0],
    )
    reduce_only: Optional[bool] = Field(
        False,
        alias="reduceOnly",
        description="Whether this should be a reduce-only order, required for close",
    )
    close: Optional[bool] = Field(
        False,
        description="Order closes the entire current position, requires zero quantity and reduceOnly",
    )
    stop_price: Optional[Decimal] = Field(
        Decimal("0"),
        alias="stopPrice",
        description="Stop price expressed as a decimal (precision: 9), requires stopType",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType9] = Field(
        None,
        alias="stopType",
        description="Stop type, either 0 (take-profit) or 1 (stop-loss), requires non-zero stopPrice",
        examples=[1],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    expires_at: Optional[float] = Field(
        None,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch), defaults to the maximum allowed value: signedAt + 6652800",
    )
    otoco_trigger: Optional[bool] = Field(
        False,
        alias="otocoTrigger",
        description="Set if this order should be the OTO order in a new OTOCO group for triggering stop-loss/take-profit orders (precludes otocoGroup)",
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of an existing OTOCO group this order will join as an OCO order (precludes otocoTrigger)",
    )
    price: Decimal = Field(
        ...,
        description="Limit price expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    time_in_force: TimeInForce = Field(
        ...,
        alias="timeInForce",
        description="How long an order will remain until executed/expired",
        examples=["IOC"],
    )
    post_only: bool = Field(
        ...,
        alias="postOnly",
        description="Only add order if it does not immediately fill",
        examples=[True],
    )


class V1OrderSubmitPostRequest(BaseModel):
    data: Union[Data8, Data9]
    signature: str = Field(
        ..., description="The signature from signTypedData(...) signed by the sender"
    )


class Result3(Enum):
    causes_immediate_liquidation = "CausesImmediateLiquidation"
    immediate_match_post_only = "ImmediateMatchPostOnly"
    insufficient_balance = "InsufficientBalance"
    liquidation_error = "LiquidationError"
    market_order_reached_max_slippage = "MarketOrderReachedMaxSlippage"
    oco_filled = "OcoFilled"
    ok = "Ok"
    open_value_cap_exceeded = "OpenValueCapExceeded"
    order_increases_position = "OrderIncreasesPosition"
    risk_limit_exceeded = "RiskLimitExceeded"
    trigger_canceled_error = "TriggerCanceledError"
    unfilled_fill_or_kill = "UnfilledFillOrKill"
    unfilled_immediate_or_cancel = "UnfilledImmediateOrCancel"
    unfilled_market_order = "UnfilledMarketOrder"


class V1OrderSubmitPostResponse(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the created order",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    filled: str = Field(
        ...,
        description="Filled amount in native units expressed as a decimal (precision: 9)",
        examples=["0.5"],
    )
    otoco_trigger_type: Optional[OtocoTriggerType] = Field(
        None,
        alias="otocoTriggerType",
        description="Type of OTOCO relationship (OTO or OCO)",
        examples=[0],
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of the OTOCO group this order belongs to",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    result: Result3 = Field(
        ..., description="Code indicating the result of the submission", examples=["Ok"]
    )


class StatusCode14(Enum):
    number_400 = 400


class Error14(Enum):
    bad_request = "Bad Request"


class V1OrderSubmitPostResponse1(BaseModel):
    status_code: StatusCode14 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error14


class StatusCode15(Enum):
    number_401 = 401


class Error15(Enum):
    unauthorized = "Unauthorized"


class V1OrderSubmitPostResponse2(BaseModel):
    status_code: StatusCode15 = Field(..., alias="statusCode")
    message: str
    error: Error15


class StatusCode16(Enum):
    number_403 = 403


class Error16(Enum):
    forbidden = "Forbidden"


class V1OrderSubmitPostResponse3(BaseModel):
    status_code: StatusCode16 = Field(..., alias="statusCode")
    message: str
    error: Error16


class StatusCode17(Enum):
    number_404 = 404


class Error17(Enum):
    not_found = "Not Found"


class V1OrderSubmitPostResponse4(BaseModel):
    status_code: StatusCode17 = Field(..., alias="statusCode")
    message: str
    error: Error17


class StatusCode18(Enum):
    number_422 = 422


class Message2(Enum):
    too_many_open_orders = "TooManyOpenOrders"
    too_many_stop_orders = "TooManyStopOrders"
    exchange_suspended = "ExchangeSuspended"
    too_many_positions = "TooManyPositions"


class Error18(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1OrderSubmitPostResponse5(BaseModel):
    status_code: StatusCode18 = Field(..., alias="statusCode")
    message: Message2 = Field(
        ...,
        description="Code indicating the reason for failure",
        examples=["TooManyOpenOrders"],
    )
    error: Error18


class StatusCode19(Enum):
    number_429 = 429


class Error19(Enum):
    too_many_requests = "Too Many Requests"


class V1OrderSubmitPostResponse6(BaseModel):
    status_code: StatusCode19 = Field(..., alias="statusCode")
    message: str
    error: Error19


class Type17(Enum):
    market = "MARKET"


class Data10(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    type: Type17 = Field(..., description="Market order type", examples=["MARKET"])
    quantity: Decimal = Field(
        ...,
        description="Quantity of product in native units expressed as a decimal (precision: 9)",
        examples=["5.5"],
    )
    side: Side15 = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    onchain_id: confloat(ge=1.0) = Field(
        ...,
        alias="onchainId",
        description="Onchain generated productId from prior product registration",
        examples=[1],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="Product engine type e.g. PERP (0)",
        examples=[0],
    )
    reduce_only: Optional[bool] = Field(
        False,
        alias="reduceOnly",
        description="Whether this should be a reduce-only order, required for close",
    )
    close: Optional[bool] = Field(
        False,
        description="Order closes the entire current position, requires zero quantity and reduceOnly",
    )
    stop_price: Optional[Decimal] = Field(
        Decimal("0"),
        alias="stopPrice",
        description="Stop price expressed as a decimal (precision: 9), requires stopType",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType9] = Field(
        None,
        alias="stopType",
        description="Stop type, either 0 (take-profit) or 1 (stop-loss), requires non-zero stopPrice",
        examples=[1],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    expires_at: Optional[float] = Field(
        None,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch), defaults to the maximum allowed value: signedAt + 6652800",
    )
    otoco_trigger: Optional[bool] = Field(
        False,
        alias="otocoTrigger",
        description="Set if this order should be the OTO order in a new OTOCO group for triggering stop-loss/take-profit orders (precludes otocoGroup)",
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of an existing OTOCO group this order will join as an OCO order (precludes otocoTrigger)",
    )


class Type18(Enum):
    limit = "LIMIT"


class Data11(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    type: Type18 = Field(..., description="Limit order type", examples=["LIMIT"])
    quantity: Decimal = Field(
        ...,
        description="Quantity of product in native units expressed as a decimal (precision: 9)",
        examples=["5.5"],
    )
    side: Side15 = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    onchain_id: confloat(ge=1.0) = Field(
        ...,
        alias="onchainId",
        description="Onchain generated productId from prior product registration",
        examples=[1],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="Product engine type e.g. PERP (0)",
        examples=[0],
    )
    reduce_only: Optional[bool] = Field(
        False,
        alias="reduceOnly",
        description="Whether this should be a reduce-only order, required for close",
    )
    close: Optional[bool] = Field(
        False,
        description="Order closes the entire current position, requires zero quantity and reduceOnly",
    )
    stop_price: Optional[Decimal] = Field(
        Decimal("0"),
        alias="stopPrice",
        description="Stop price expressed as a decimal (precision: 9), requires stopType",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType9] = Field(
        None,
        alias="stopType",
        description="Stop type, either 0 (take-profit) or 1 (stop-loss), requires non-zero stopPrice",
        examples=[1],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    expires_at: Optional[float] = Field(
        None,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch), defaults to the maximum allowed value: signedAt + 6652800",
    )
    otoco_trigger: Optional[bool] = Field(
        False,
        alias="otocoTrigger",
        description="Set if this order should be the OTO order in a new OTOCO group for triggering stop-loss/take-profit orders (precludes otocoGroup)",
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of an existing OTOCO group this order will join as an OCO order (precludes otocoTrigger)",
    )
    price: Decimal = Field(
        ...,
        description="Limit price expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    time_in_force: TimeInForce = Field(
        ...,
        alias="timeInForce",
        description="How long an order will remain until executed/expired",
        examples=["IOC"],
    )
    post_only: bool = Field(
        ...,
        alias="postOnly",
        description="Only add order if it does not immediately fill",
        examples=[True],
    )


class V1OrderDryRunPostRequest(BaseModel):
    data: Union[Data10, Data11]


class V1OrderDryRunPostResponse(BaseModel):
    margin_required: str = Field(
        ...,
        alias="marginRequired",
        description="Margin required for order in USD expressed as a decimal (precision: 9)",
        examples=["1000.5"],
    )
    margin_available: str = Field(
        ...,
        alias="marginAvailable",
        description="Margin available excluding this order in USD expressed as a decimal (precision: 9)",
        examples=["5000.75"],
    )
    total_used_margin: str = Field(
        ...,
        alias="totalUsedMargin",
        description="Total used margin including this order in USD expressed as a decimal (precision: 9)",
        examples=["3000.25"],
    )
    risk_used: str = Field(
        ...,
        alias="riskUsed",
        description="Risk used including position and open orders in USD expressed as a decimal (precision: 9)",
        examples=["3000.25"],
    )
    risk_available: str = Field(
        ...,
        alias="riskAvailable",
        description="Risk available for the product in USD expressed as a decimal (precision: 9)",
        examples=["100000000"],
    )
    code: Code = Field(
        ..., description="Code indicating a result of the dry run", examples=["Ok"]
    )


class StatusCode20(Enum):
    number_400 = 400


class Error20(Enum):
    bad_request = "Bad Request"


class V1OrderDryRunPostResponse1(BaseModel):
    status_code: StatusCode20 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error20


class StatusCode21(Enum):
    number_401 = 401


class Error21(Enum):
    unauthorized = "Unauthorized"


class V1OrderDryRunPostResponse2(BaseModel):
    status_code: StatusCode21 = Field(..., alias="statusCode")
    message: str
    error: Error21


class StatusCode22(Enum):
    number_403 = 403


class Error22(Enum):
    forbidden = "Forbidden"


class V1OrderDryRunPostResponse3(BaseModel):
    status_code: StatusCode22 = Field(..., alias="statusCode")
    message: str
    error: Error22


class StatusCode23(Enum):
    number_404 = 404


class Error23(Enum):
    not_found = "Not Found"


class V1OrderDryRunPostResponse4(BaseModel):
    status_code: StatusCode23 = Field(..., alias="statusCode")
    message: str
    error: Error23


class StatusCode24(Enum):
    number_422 = 422


class Error24(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1OrderDryRunPostResponse5(BaseModel):
    status_code: StatusCode24 = Field(..., alias="statusCode")
    message: str
    error: Error24


class StatusCode25(Enum):
    number_429 = 429


class Error25(Enum):
    too_many_requests = "Too Many Requests"


class V1OrderDryRunPostResponse6(BaseModel):
    status_code: StatusCode25 = Field(..., alias="statusCode")
    message: str
    error: Error25


class Data12(BaseModel):
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    sender: str = Field(
        ...,
        description="Address of account that created the signature in this message",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    order_ids: List[str] = Field(
        ...,
        alias="orderIds",
        description="Ids of the orders to be canceled",
        examples=[["80569be0-afba-43f8-ac20-767d0974c6a3"]],
        max_length=256,
        min_length=1,
    )


class V1OrderCancelPostRequest(BaseModel):
    signature: str = Field(
        ..., description="The signature from signTypedData(...) signed by the sender"
    )
    data: Data12


class Result4(Enum):
    already_canceled = "AlreadyCanceled"
    already_expired = "AlreadyExpired"
    already_filled = "AlreadyFilled"
    not_found = "NotFound"
    ok = "Ok"


class Datum16(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the order",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    result: Result4 = Field(
        ..., description="Code indicating the result of the submission", examples=["Ok"]
    )


class V1OrderCancelPostResponse(BaseModel):
    data: List[Datum16] = Field(..., description="Array of order cancelation results")


class StatusCode26(Enum):
    number_400 = 400


class Error26(Enum):
    bad_request = "Bad Request"


class V1OrderCancelPostResponse1(BaseModel):
    status_code: StatusCode26 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error26


class StatusCode27(Enum):
    number_401 = 401


class Error27(Enum):
    unauthorized = "Unauthorized"


class V1OrderCancelPostResponse2(BaseModel):
    status_code: StatusCode27 = Field(..., alias="statusCode")
    message: str
    error: Error27


class StatusCode28(Enum):
    number_403 = 403


class Error28(Enum):
    forbidden = "Forbidden"


class V1OrderCancelPostResponse3(BaseModel):
    status_code: StatusCode28 = Field(..., alias="statusCode")
    message: str
    error: Error28


class StatusCode29(Enum):
    number_404 = 404


class Error29(Enum):
    not_found = "Not Found"


class V1OrderCancelPostResponse4(BaseModel):
    status_code: StatusCode29 = Field(..., alias="statusCode")
    message: str
    error: Error29


class StatusCode30(Enum):
    number_422 = 422


class Error30(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1OrderCancelPostResponse5(BaseModel):
    status_code: StatusCode30 = Field(..., alias="statusCode")
    message: str
    error: Error30


class StatusCode31(Enum):
    number_429 = 429


class Error31(Enum):
    too_many_requests = "Too Many Requests"


class V1OrderCancelPostResponse6(BaseModel):
    status_code: StatusCode31 = Field(..., alias="statusCode")
    message: str
    error: Error31


class Side20(Enum):
    number_0 = 0
    number_1 = 1


class OrderBy1(Enum):
    product_id = "productId"
    filled = "filled"
    price = "price"
    created_at = "createdAt"


class V1OrderFillGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    subaccount_id: str = Field(..., alias="subaccountId")
    product_ids: Optional[List[str]] = Field(None, alias="productIds")
    created_after: Optional[float] = Field(None, alias="createdAfter")
    created_before: Optional[float] = Field(None, alias="createdBefore")
    side: Optional[Side20] = None
    statuses: Optional[List[Status6]] = None
    order_by: Optional[OrderBy1] = Field(None, alias="orderBy", examples=["productId"])
    include_self_trades: Optional[bool] = Field(False, alias="includeSelfTrades")


class Type19(Enum):
    limit = "LIMIT"
    market = "MARKET"


class Side21(Enum):
    buy = 0
    sell = 1


class Datum17(BaseModel):
    order_id: str = Field(
        ...,
        alias="orderId",
        description="Id of the order",
        examples=["b1234567-89ab-cdef-0123-456789abcdef"],
    )
    price: str = Field(
        ...,
        description="Fill price in expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Quantity filled in native units expressed as a decimal (precision: 9)",
        examples=["2.420"],
    )
    type: Type19 = Field(
        ...,
        description="The provided subaccount's order type e.g. MARKET or LIMIT",
        examples=["LIMIT"],
    )
    side: Side21 = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    reduce_only: bool = Field(
        ...,
        alias="reduceOnly",
        description="Indicates if the fill is reduce only",
        examples=[True],
    )
    fee_usd: str = Field(
        ...,
        alias="feeUsd",
        description="The provided subaccount's charged fee in USD expressed as a decimal (precision: 9)",
        examples=["3.049563"],
    )
    is_maker: bool = Field(
        ...,
        alias="isMaker",
        description="Indicates if the fill was a maker or taker",
        examples=[True],
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product the order fill was made against",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Fill creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class V1OrderFillGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum17] = Field(..., description="Array of order fill objects")


class StatusCode32(Enum):
    number_400 = 400


class Error32(Enum):
    bad_request = "Bad Request"


class V1OrderFillGetResponse1(BaseModel):
    status_code: StatusCode32 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error32


class StatusCode33(Enum):
    number_401 = 401


class Error33(Enum):
    unauthorized = "Unauthorized"


class V1OrderFillGetResponse2(BaseModel):
    status_code: StatusCode33 = Field(..., alias="statusCode")
    message: str
    error: Error33


class StatusCode34(Enum):
    number_403 = 403


class Error34(Enum):
    forbidden = "Forbidden"


class V1OrderFillGetResponse3(BaseModel):
    status_code: StatusCode34 = Field(..., alias="statusCode")
    message: str
    error: Error34


class StatusCode35(Enum):
    number_404 = 404


class Error35(Enum):
    not_found = "Not Found"


class V1OrderFillGetResponse4(BaseModel):
    status_code: StatusCode35 = Field(..., alias="statusCode")
    message: str
    error: Error35


class StatusCode36(Enum):
    number_422 = 422


class Error36(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1OrderFillGetResponse5(BaseModel):
    status_code: StatusCode36 = Field(..., alias="statusCode")
    message: str
    error: Error36


class StatusCode37(Enum):
    number_429 = 429


class Error37(Enum):
    too_many_requests = "Too Many Requests"


class V1OrderFillGetResponse6(BaseModel):
    status_code: StatusCode37 = Field(..., alias="statusCode")
    message: str
    error: Error37


class OrderBy2(Enum):
    created_at = "createdAt"
    price = "price"
    filled = "filled"


class V1OrderTradeGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    product_id: Optional[str] = Field(
        None, alias="productId", examples=["1b67d5b3-9dc7-4410-bc9c-7fd23ebd32ee"]
    )
    order_by: Optional[OrderBy2] = Field(None, alias="orderBy", examples=["createdAt"])


class Datum18(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the trade",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    taker_order_id: str = Field(
        ...,
        alias="takerOrderId",
        description="Id of the taker order",
        examples=["b1234567-89ab-cdef-0123-456789abcdef"],
    )
    maker_order_id: str = Field(
        ...,
        alias="makerOrderId",
        description="Id of the maker order",
        examples=["e3f0a8b7-6daa-498a-bf53-c16dc5e779de"],
    )
    maker_fee_usd: str = Field(
        ...,
        alias="makerFeeUsd",
        description="Maker fee in USD expressed as a decimal (precision: 9)",
        examples=["3.049563"],
    )
    taker_fee_usd: str = Field(
        ...,
        alias="takerFeeUsd",
        description="Taker fee in USD expressed as a decimal (precision: 9)",
        examples=["4.5743445"],
    )
    price: str = Field(
        ...,
        description="Price expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Quantity filled in native units expressed as a decimal (precision: 9)",
        examples=["2.420"],
    )
    maker_side: MakerSide = Field(
        ...,
        alias="makerSide",
        description="Maker side as either BUY (0) or SELL (1)",
        examples=[1],
    )
    taker_side: TakerSide = Field(
        ...,
        alias="takerSide",
        description="Taker side as either BUY (0) or SELL (1)",
        examples=[0],
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product the trade was made against",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Trade creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class V1OrderTradeGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum18] = Field(..., description="Array of trade objects")


class StatusCode38(Enum):
    number_400 = 400


class Error38(Enum):
    bad_request = "Bad Request"


class V1OrderTradeGetResponse1(BaseModel):
    status_code: StatusCode38 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error38


class StatusCode39(Enum):
    number_401 = 401


class Error39(Enum):
    unauthorized = "Unauthorized"


class V1OrderTradeGetResponse2(BaseModel):
    status_code: StatusCode39 = Field(..., alias="statusCode")
    message: str
    error: Error39


class StatusCode40(Enum):
    number_403 = 403


class Error40(Enum):
    forbidden = "Forbidden"


class V1OrderTradeGetResponse3(BaseModel):
    status_code: StatusCode40 = Field(..., alias="statusCode")
    message: str
    error: Error40


class StatusCode41(Enum):
    number_404 = 404


class Error41(Enum):
    not_found = "Not Found"


class V1OrderTradeGetResponse4(BaseModel):
    status_code: StatusCode41 = Field(..., alias="statusCode")
    message: str
    error: Error41


class StatusCode42(Enum):
    number_422 = 422


class Error42(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1OrderTradeGetResponse5(BaseModel):
    status_code: StatusCode42 = Field(..., alias="statusCode")
    message: str
    error: Error42


class StatusCode43(Enum):
    number_429 = 429


class Error43(Enum):
    too_many_requests = "Too Many Requests"


class V1OrderTradeGetResponse6(BaseModel):
    status_code: StatusCode43 = Field(..., alias="statusCode")
    message: str
    error: Error43


class V1OrderIdGetResponse(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the order",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    type: Type19 = Field(
        ..., description="Trade order type e.g. MARKET or LIMIT", examples=["LIMIT"]
    )
    available_quantity: str = Field(
        ...,
        alias="availableQuantity",
        description="Remaining quantity (if modified or reduced) in native units expressed as a decimal (precision: 9)",
        examples=["10.5"],
    )
    quantity: str = Field(
        ...,
        description="Original quantity (as per order submission) in native units expressed as a decimal (precision: 9)",
        examples=["10.5"],
    )
    side: Side21 = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[1]
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product this order was placed against",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id of the subaccount associated to order",
        examples=["c25c39d9-ce2b-4753-960c-c5ad558aace8"],
    )
    status: Status6 = Field(..., description="Status of the order", examples=["FILLED"])
    reduce_only: bool = Field(
        ...,
        alias="reduceOnly",
        description="Indicates if the order is reduce only",
        examples=[True],
    )
    close: bool = Field(..., description="Order closes the entire current position")
    updated_at: float = Field(
        ...,
        alias="updatedAt",
        description="Order last updated timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Order creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    sender: str = Field(
        ...,
        description="Account or linked signer address that originally submitted this order",
        examples=["0x2501c477d0a35545a387aa4a3eee4292a9a8b3f0"],
    )
    price: str = Field(
        ...,
        description="Limit price in native units expressed as a decimal, zero if market order (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Filled amount in native units expressed as a decimal (precision: 9)",
        examples=["0.5"],
    )
    stop_price: str = Field(
        ...,
        alias="stopPrice",
        description="Stop price expressed as a decimal (zero if not a stop order, precision: 9)",
        examples=["4200.5"],
    )
    stop_type: Optional[StopType9] = Field(
        None,
        alias="stopType",
        description="Side as either BUY (0) or SELL (1)",
        examples=[1],
    )
    stop_price_type: Optional[StopPriceType] = Field(
        None,
        alias="stopPriceType",
        description="Type of stop price (stop orders only)",
        examples=[1],
    )
    time_in_force: Optional[TimeInForce] = Field(
        None,
        alias="timeInForce",
        description="How long an order will remain until executed/expired (required if limit)",
        examples=["GTD"],
    )
    expires_at: float = Field(
        ...,
        alias="expiresAt",
        description="Order expiry timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )
    post_only: Optional[bool] = Field(
        None,
        alias="postOnly",
        description="Only add order if it does not immediately fill (limit only)",
        examples=[True],
    )
    otoco_trigger_type: Optional[OtocoTriggerType] = Field(
        None,
        alias="otocoTriggerType",
        description="Type of OTOCO relationship (OTO or OCO)",
        examples=[0],
    )
    otoco_group_id: Optional[str] = Field(
        None,
        alias="otocoGroupId",
        description="Id of the OTOCO group this order belongs to",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )


class StatusCode44(Enum):
    number_400 = 400


class Error44(Enum):
    bad_request = "Bad Request"


class V1OrderIdGetResponse1(BaseModel):
    status_code: StatusCode44 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error44


class StatusCode45(Enum):
    number_401 = 401


class Error45(Enum):
    unauthorized = "Unauthorized"


class V1OrderIdGetResponse2(BaseModel):
    status_code: StatusCode45 = Field(..., alias="statusCode")
    message: str
    error: Error45


class StatusCode46(Enum):
    number_403 = 403


class Error46(Enum):
    forbidden = "Forbidden"


class V1OrderIdGetResponse3(BaseModel):
    status_code: StatusCode46 = Field(..., alias="statusCode")
    message: str
    error: Error46


class StatusCode47(Enum):
    number_404 = 404


class Error47(Enum):
    not_found = "Not Found"


class V1OrderIdGetResponse4(BaseModel):
    status_code: StatusCode47 = Field(..., alias="statusCode")
    message: str
    error: Error47


class StatusCode48(Enum):
    number_422 = 422


class Error48(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1OrderIdGetResponse5(BaseModel):
    status_code: StatusCode48 = Field(..., alias="statusCode")
    message: str
    error: Error48


class StatusCode49(Enum):
    number_429 = 429


class Error49(Enum):
    too_many_requests = "Too Many Requests"


class V1OrderIdGetResponse6(BaseModel):
    status_code: StatusCode49 = Field(..., alias="statusCode")
    message: str
    error: Error49


class OrderBy3(Enum):
    size = "size"
    created_at = "createdAt"
    updated_at = "updatedAt"
    realized_pnl = "realizedPnl"


class Side23(Enum):
    number_0 = 0
    number_1 = 1


class V1PositionGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    subaccount_id: str = Field(..., alias="subaccountId")
    product_ids: Optional[List[str]] = Field(None, alias="productIds")
    open: Optional[bool] = Field(None, examples=[True])
    order_by: Optional[OrderBy3] = Field(None, alias="orderBy", examples=["size"])
    created_after: Optional[float] = Field(None, alias="createdAfter")
    created_before: Optional[float] = Field(None, alias="createdBefore")
    side: Optional[Side23] = Field(None, examples=[0])
    is_liquidated: Optional[bool] = Field(None, alias="isLiquidated", examples=[False])


class Side24(Enum):
    buy = 0
    sell = 1


class Datum19(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the position",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    cost: str = Field(
        ...,
        description="Current cost of the position in USD expressed as a decimal (precision: 9)",
        examples=["9.3"],
    )
    size: str = Field(
        ...,
        description="Position size in native units expressed as a decimal (precision: 9)",
        examples=["1.5"],
    )
    funding_usd: str = Field(
        ...,
        alias="fundingUsd",
        description="Amount in USD since position was opened expressed as a decimal (precision: 9)",
        examples=["10.5"],
    )
    fees_accrued_usd: str = Field(
        ...,
        alias="feesAccruedUsd",
        description="Fees accrued in USD expressed as a decimal (precision: 9)",
        examples=["0.5"],
    )
    realized_pnl: str = Field(
        ...,
        alias="realizedPnl",
        description="Realized PnL in USD expressed as a decimal (precision: 9)",
        examples=["-12.5"],
    )
    total_increase_notional: str = Field(
        ...,
        alias="totalIncreaseNotional",
        description="Cumulative USD value of all position increases expressed as a decimal (precision: 9)",
        examples=["1000.0"],
    )
    total_increase_quantity: str = Field(
        ...,
        alias="totalIncreaseQuantity",
        description="Cumulative quantity of all position increases expressed as a decimal (precision: 9)",
        examples=["2.5"],
    )
    total_decrease_notional: str = Field(
        ...,
        alias="totalDecreaseNotional",
        description="Cumulative USD value of all position decreases expressed as a decimal (precision: 9)",
        examples=["1050.0"],
    )
    total_decrease_quantity: str = Field(
        ...,
        alias="totalDecreaseQuantity",
        description="Cumulative quantity of all position decreases expressed as a decimal (precision: 9)",
        examples=["2.5"],
    )
    side: Side24 = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[0]
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product to this position belongs to",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    updated_at: float = Field(
        ...,
        alias="updatedAt",
        description="Position last updated timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Position creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    is_liquidated: bool = Field(
        ...,
        alias="isLiquidated",
        description="Whether the position was liquidated",
        examples=[False],
    )


class V1PositionGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum19] = Field(..., description="Array of position objects")


class StatusCode50(Enum):
    number_400 = 400


class Error50(Enum):
    bad_request = "Bad Request"


class V1PositionGetResponse1(BaseModel):
    status_code: StatusCode50 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error50


class StatusCode51(Enum):
    number_401 = 401


class Error51(Enum):
    unauthorized = "Unauthorized"


class V1PositionGetResponse2(BaseModel):
    status_code: StatusCode51 = Field(..., alias="statusCode")
    message: str
    error: Error51


class StatusCode52(Enum):
    number_403 = 403


class Error52(Enum):
    forbidden = "Forbidden"


class V1PositionGetResponse3(BaseModel):
    status_code: StatusCode52 = Field(..., alias="statusCode")
    message: str
    error: Error52


class StatusCode53(Enum):
    number_404 = 404


class Error53(Enum):
    not_found = "Not Found"


class V1PositionGetResponse4(BaseModel):
    status_code: StatusCode53 = Field(..., alias="statusCode")
    message: str
    error: Error53


class StatusCode54(Enum):
    number_422 = 422


class Error54(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1PositionGetResponse5(BaseModel):
    status_code: StatusCode54 = Field(..., alias="statusCode")
    message: str
    error: Error54


class StatusCode55(Enum):
    number_429 = 429


class Error55(Enum):
    too_many_requests = "Too Many Requests"


class V1PositionGetResponse6(BaseModel):
    status_code: StatusCode55 = Field(..., alias="statusCode")
    message: str
    error: Error55


class V1PositionIdGetResponse(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the position",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    cost: str = Field(
        ...,
        description="Current cost of the position in USD expressed as a decimal (precision: 9)",
        examples=["9.3"],
    )
    size: str = Field(
        ...,
        description="Position size in native units expressed as a decimal (precision: 9)",
        examples=["1.5"],
    )
    funding_usd: str = Field(
        ...,
        alias="fundingUsd",
        description="Amount in USD since position was opened expressed as a decimal (precision: 9)",
        examples=["10.5"],
    )
    fees_accrued_usd: str = Field(
        ...,
        alias="feesAccruedUsd",
        description="Fees accrued in USD expressed as a decimal (precision: 9)",
        examples=["0.5"],
    )
    realized_pnl: str = Field(
        ...,
        alias="realizedPnl",
        description="Realized PnL in USD expressed as a decimal (precision: 9)",
        examples=["-12.5"],
    )
    total_increase_notional: str = Field(
        ...,
        alias="totalIncreaseNotional",
        description="Cumulative USD value of all position increases expressed as a decimal (precision: 9)",
        examples=["1000.0"],
    )
    total_increase_quantity: str = Field(
        ...,
        alias="totalIncreaseQuantity",
        description="Cumulative quantity of all position increases expressed as a decimal (precision: 9)",
        examples=["2.5"],
    )
    total_decrease_notional: str = Field(
        ...,
        alias="totalDecreaseNotional",
        description="Cumulative USD value of all position decreases expressed as a decimal (precision: 9)",
        examples=["1050.0"],
    )
    total_decrease_quantity: str = Field(
        ...,
        alias="totalDecreaseQuantity",
        description="Cumulative quantity of all position decreases expressed as a decimal (precision: 9)",
        examples=["2.5"],
    )
    side: Side24 = Field(
        ..., description="Side as either BUY (0) or SELL (1)", examples=[0]
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id of product to this position belongs to",
        examples=["9c6bf870-a8ce-4de3-820b-542fd5c049ba"],
    )
    updated_at: float = Field(
        ...,
        alias="updatedAt",
        description="Position last updated timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Position creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    is_liquidated: bool = Field(
        ...,
        alias="isLiquidated",
        description="Whether the position was liquidated",
        examples=[False],
    )


class StatusCode56(Enum):
    number_400 = 400


class Error56(Enum):
    bad_request = "Bad Request"


class V1PositionIdGetResponse1(BaseModel):
    status_code: StatusCode56 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error56


class StatusCode57(Enum):
    number_401 = 401


class Error57(Enum):
    unauthorized = "Unauthorized"


class V1PositionIdGetResponse2(BaseModel):
    status_code: StatusCode57 = Field(..., alias="statusCode")
    message: str
    error: Error57


class StatusCode58(Enum):
    number_403 = 403


class Error58(Enum):
    forbidden = "Forbidden"


class V1PositionIdGetResponse3(BaseModel):
    status_code: StatusCode58 = Field(..., alias="statusCode")
    message: str
    error: Error58


class StatusCode59(Enum):
    number_404 = 404


class Error59(Enum):
    not_found = "Not Found"


class V1PositionIdGetResponse4(BaseModel):
    status_code: StatusCode59 = Field(..., alias="statusCode")
    message: str
    error: Error59


class StatusCode60(Enum):
    number_422 = 422


class Error60(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1PositionIdGetResponse5(BaseModel):
    status_code: StatusCode60 = Field(..., alias="statusCode")
    message: str
    error: Error60


class StatusCode61(Enum):
    number_429 = 429


class Error61(Enum):
    too_many_requests = "Too Many Requests"


class V1PositionIdGetResponse6(BaseModel):
    status_code: StatusCode61 = Field(..., alias="statusCode")
    message: str
    error: Error61


class OrderBy4(Enum):
    price = "price"
    filled = "filled"
    created_at = "createdAt"


class V1PositionFillGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    position_id: str = Field(
        ..., alias="positionId", examples=["81215694-2d9f-4a87-af57-a710118938c0"]
    )
    order_by: Optional[OrderBy4] = Field(None, alias="orderBy", examples=["price"])


class Type21(Enum):
    limit = "LIMIT"
    market = "MARKET"
    liquidation = "LIQUIDATION"


class Datum20(BaseModel):
    price: str = Field(
        ...,
        description="Fill price expressed as a decimal (precision: 9)",
        examples=["4200.5"],
    )
    filled: str = Field(
        ...,
        description="Quantity filled in native units expressed as a decimal (precision: 9)",
        examples=["2.420"],
    )
    type: Type21 = Field(
        ...,
        description="Corresponding order type that led to the position fill, LIQUIDATED if takeover",
        examples=["LIMIT"],
    )
    side: Side24 = Field(
        ...,
        description="Direction of the fill as either BUY (0) or SELL (1)",
        examples=[1],
    )
    reduce_only: bool = Field(
        ...,
        alias="reduceOnly",
        description="Indicates if the fill is reduce only",
        examples=[False],
    )
    fee_usd: str = Field(
        ...,
        alias="feeUsd",
        description="The charged fee in USD expressed as a decimal (precision: 9)",
        examples=["3.049563"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Fill creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class V1PositionFillGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum20] = Field(..., description="Array of position fill objects")


class StatusCode62(Enum):
    number_400 = 400


class Error62(Enum):
    bad_request = "Bad Request"


class V1PositionFillGetResponse1(BaseModel):
    status_code: StatusCode62 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error62


class StatusCode63(Enum):
    number_401 = 401


class Error63(Enum):
    unauthorized = "Unauthorized"


class V1PositionFillGetResponse2(BaseModel):
    status_code: StatusCode63 = Field(..., alias="statusCode")
    message: str
    error: Error63


class StatusCode64(Enum):
    number_403 = 403


class Error64(Enum):
    forbidden = "Forbidden"


class V1PositionFillGetResponse3(BaseModel):
    status_code: StatusCode64 = Field(..., alias="statusCode")
    message: str
    error: Error64


class StatusCode65(Enum):
    number_404 = 404


class Error65(Enum):
    not_found = "Not Found"


class V1PositionFillGetResponse4(BaseModel):
    status_code: StatusCode65 = Field(..., alias="statusCode")
    message: str
    error: Error65


class StatusCode66(Enum):
    number_422 = 422


class Error66(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1PositionFillGetResponse5(BaseModel):
    status_code: StatusCode66 = Field(..., alias="statusCode")
    message: str
    error: Error66


class StatusCode67(Enum):
    number_429 = 429


class Error67(Enum):
    too_many_requests = "Too Many Requests"


class V1PositionFillGetResponse6(BaseModel):
    status_code: StatusCode67 = Field(..., alias="statusCode")
    message: str
    error: Error67


class OrderBy5(Enum):
    created_at = "createdAt"
    open_interest = "openInterest"
    base_token_name = "baseTokenName"
    quote_token_name = "quoteTokenName"


class V1ProductGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    order_by: Optional[OrderBy5] = Field(None, alias="orderBy", examples=["createdAt"])
    ticker: Optional[constr(min_length=1, max_length=32)] = Field(
        None, examples=["ETHUSD"]
    )


class Datum21(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the registered product",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    ticker: str = Field(
        ...,
        description="Product ticker based on the base quote token",
        examples=["ETHUSD"],
    )
    display_ticker: str = Field(
        ...,
        alias="displayTicker",
        description="Product display ticker based on the base quote token",
        examples=["ETH-USD"],
    )
    base_token_address: str = Field(
        ...,
        alias="baseTokenAddress",
        description="Address of the base token (zero address if virtual)",
        examples=["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"],
    )
    quote_token_address: str = Field(
        ...,
        alias="quoteTokenAddress",
        description="Address of quote token",
        examples=["0x4c9edd5852cd905f086c759e8383e09bff1e68b3"],
    )
    base_token_name: str = Field(
        ...,
        alias="baseTokenName",
        description="Name of the base token (e.g. BTC in BTCUSD)",
        examples=["ETH"],
    )
    quote_token_name: str = Field(
        ...,
        alias="quoteTokenName",
        description="Name of the quote token (e.g. USD in BTCUSD)",
        examples=["USDe"],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="The corresponding engine type this product was registered with",
        examples=[0],
    )
    onchain_id: float = Field(
        ...,
        alias="onchainId",
        description="The productId generated onchain after registering for the first time",
        examples=[1],
    )
    block_number: str = Field(
        ...,
        alias="blockNumber",
        description="Block number this product was registered on",
        examples=["123062737"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Product creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    funding_updated_at: Optional[float] = Field(
        None,
        alias="fundingUpdatedAt",
        description="Unix timestamp when funding was last updated",
        examples=[1721724269],
    )
    min_quantity: str = Field(
        ...,
        alias="minQuantity",
        description="The minimum order quantity in native units expressed as a decimal (precision: 9)",
        examples=["0.05"],
    )
    lot_size: str = Field(
        ...,
        alias="lotSize",
        description="Quantity must be divisible by the lotSize in expressed as a decimal (precision: 9)",
        examples=["0.01"],
    )
    tick_size: str = Field(
        ...,
        alias="tickSize",
        description="Minimum price increment (tickSize) expressed as a decimal (precision: 9)",
        examples=["0.0001"],
    )
    maker_fee: str = Field(
        ...,
        alias="makerFee",
        description="Fee charged to the maker on order trades expressed as a decimal (precision: 9)",
        examples=["0.001"],
    )
    taker_fee: str = Field(
        ...,
        alias="takerFee",
        description="Fee charged to the taker on order trades expressed as a decimal (precision: 9)",
        examples=["0.004"],
    )
    max_quantity: str = Field(
        ...,
        alias="maxQuantity",
        description="Max quantity per order in native units expressed as a decimal (precision: 9)",
        examples=["100000"],
    )
    min_price: str = Field(
        ...,
        alias="minPrice",
        description="Min price in USD expressed as a decimal (precision: 9)",
        examples=["0"],
    )
    max_price: str = Field(
        ...,
        alias="maxPrice",
        description="Max price in USD expressed as a decimal (precision: 9)",
        examples=["100000"],
    )
    volume24h: str = Field(
        ...,
        description="24h volume in base token native units expressed as a decimal (precision: 9)",
        examples=["500000000.42"],
    )
    max_leverage: float = Field(
        ...,
        alias="maxLeverage",
        description="Maximum leverage allowed for the product",
        examples=[20],
    )
    pyth_feed_id: float = Field(
        ..., alias="pythFeedId", description="Pyth price feed id", examples=[2]
    )
    funding_rate1h: str = Field(
        ...,
        alias="fundingRate1h",
        description="Last computed hourly funding rate expressed as a decimal (precision: 9)",
        examples=["0.01"],
    )
    open_interest: str = Field(
        ...,
        alias="openInterest",
        description="Open interest in native units expressed as a decimal (precision: 9)",
        examples=["3300.17"],
    )
    max_open_interest_usd: str = Field(
        ...,
        alias="maxOpenInterestUsd",
        description="Max open interest in USD expressed as a decimal (precision: 9)",
        examples=["200000000.0"],
    )
    max_position_notional_usd: str = Field(
        ...,
        alias="maxPositionNotionalUsd",
        description="Max position notional value, in USD expressed as a decimal (precision: 9)",
        examples=["50000000.0"],
    )


class V1ProductGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum21] = Field(..., description="Array of product objects")


class StatusCode68(Enum):
    number_400 = 400


class Error68(Enum):
    bad_request = "Bad Request"


class V1ProductGetResponse1(BaseModel):
    status_code: StatusCode68 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error68


class StatusCode69(Enum):
    number_401 = 401


class Error69(Enum):
    unauthorized = "Unauthorized"


class V1ProductGetResponse2(BaseModel):
    status_code: StatusCode69 = Field(..., alias="statusCode")
    message: str
    error: Error69


class StatusCode70(Enum):
    number_403 = 403


class Error70(Enum):
    forbidden = "Forbidden"


class V1ProductGetResponse3(BaseModel):
    status_code: StatusCode70 = Field(..., alias="statusCode")
    message: str
    error: Error70


class StatusCode71(Enum):
    number_404 = 404


class Error71(Enum):
    not_found = "Not Found"


class V1ProductGetResponse4(BaseModel):
    status_code: StatusCode71 = Field(..., alias="statusCode")
    message: str
    error: Error71


class StatusCode72(Enum):
    number_422 = 422


class Error72(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1ProductGetResponse5(BaseModel):
    status_code: StatusCode72 = Field(..., alias="statusCode")
    message: str
    error: Error72


class StatusCode73(Enum):
    number_429 = 429


class Error73(Enum):
    too_many_requests = "Too Many Requests"


class V1ProductGetResponse6(BaseModel):
    status_code: StatusCode73 = Field(..., alias="statusCode")
    message: str
    error: Error73


class V1ProductMarketLiquidityGetParametersQuery(BaseModel):
    product_id: str = Field(
        ..., alias="productId", examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"]
    )


class V1ProductMarketLiquidityGetResponse(BaseModel):
    timestamp: float = Field(
        ...,
        description="Most recent book update, created timestamp if never updated (ms since Unix Epoch)",
        examples=[1731664105881],
    )
    previous_timestamp: Optional[float] = Field(
        None,
        alias="previousTimestamp",
        description="Previous book update, undefined if never updated (ms since Unix Epoch)",
        examples=[1731664105881],
    )
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id representing the product",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    asks: List[List[str]] = Field(
        ...,
        description="An array of ask tuple pairs (price, quantity) ordered in asc",
        examples=[[["4200.69", "1337.420"]]],
    )
    bids: List[List[str]] = Field(
        ...,
        description="An array of bid tuple pairs (price, quantity) ordered in desc",
        examples=[[["4199.42", "420.55"]]],
    )


class StatusCode74(Enum):
    number_400 = 400


class Error74(Enum):
    bad_request = "Bad Request"


class V1ProductMarketLiquidityGetResponse1(BaseModel):
    status_code: StatusCode74 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error74


class StatusCode75(Enum):
    number_401 = 401


class Error75(Enum):
    unauthorized = "Unauthorized"


class V1ProductMarketLiquidityGetResponse2(BaseModel):
    status_code: StatusCode75 = Field(..., alias="statusCode")
    message: str
    error: Error75


class StatusCode76(Enum):
    number_403 = 403


class Error76(Enum):
    forbidden = "Forbidden"


class V1ProductMarketLiquidityGetResponse3(BaseModel):
    status_code: StatusCode76 = Field(..., alias="statusCode")
    message: str
    error: Error76


class StatusCode77(Enum):
    number_404 = 404


class Error77(Enum):
    not_found = "Not Found"


class V1ProductMarketLiquidityGetResponse4(BaseModel):
    status_code: StatusCode77 = Field(..., alias="statusCode")
    message: str
    error: Error77


class StatusCode78(Enum):
    number_422 = 422


class Error78(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1ProductMarketLiquidityGetResponse5(BaseModel):
    status_code: StatusCode78 = Field(..., alias="statusCode")
    message: str
    error: Error78


class StatusCode79(Enum):
    number_429 = 429


class Error79(Enum):
    too_many_requests = "Too Many Requests"


class V1ProductMarketLiquidityGetResponse6(BaseModel):
    status_code: StatusCode79 = Field(..., alias="statusCode")
    message: str
    error: Error79


class V1ProductMarketPriceGetParametersQuery(BaseModel):
    product_ids: List[str] = Field(..., alias="productIds", max_length=20, min_length=1)


class Datum22(BaseModel):
    product_id: str = Field(
        ...,
        alias="productId",
        description="Id representing the registered product",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    best_bid_price: Optional[str] = Field(
        None,
        alias="bestBidPrice",
        description="Best bid price in USD expressed as a decimal (precision: 9)",
        examples=["104399.65"],
    )
    best_ask_price: Optional[str] = Field(
        None,
        alias="bestAskPrice",
        description="Best ask price in USD expressed as a decimal (precision: 9)",
        examples=["104400.1"],
    )
    oracle_price: Optional[str] = Field(
        None,
        alias="oraclePrice",
        description="Oracle price in USD expressed as a decimal (precision: 9)",
        examples=["104399.7"],
    )
    price24h_ago: Optional[str] = Field(
        None,
        alias="price24hAgo",
        description="Price of product 24hrs ago in USD expressed as a decimal (precision: 9)",
        examples=["101228.38"],
    )


class V1ProductMarketPriceGetResponse(BaseModel):
    data: List[Datum22] = Field(..., description="Array of market price objects")


class StatusCode80(Enum):
    number_400 = 400


class Error80(Enum):
    bad_request = "Bad Request"


class V1ProductMarketPriceGetResponse1(BaseModel):
    status_code: StatusCode80 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error80


class StatusCode81(Enum):
    number_401 = 401


class Error81(Enum):
    unauthorized = "Unauthorized"


class V1ProductMarketPriceGetResponse2(BaseModel):
    status_code: StatusCode81 = Field(..., alias="statusCode")
    message: str
    error: Error81


class StatusCode82(Enum):
    number_403 = 403


class Error82(Enum):
    forbidden = "Forbidden"


class V1ProductMarketPriceGetResponse3(BaseModel):
    status_code: StatusCode82 = Field(..., alias="statusCode")
    message: str
    error: Error82


class StatusCode83(Enum):
    number_404 = 404


class Error83(Enum):
    not_found = "Not Found"


class V1ProductMarketPriceGetResponse4(BaseModel):
    status_code: StatusCode83 = Field(..., alias="statusCode")
    message: str
    error: Error83


class StatusCode84(Enum):
    number_422 = 422


class Error84(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1ProductMarketPriceGetResponse5(BaseModel):
    status_code: StatusCode84 = Field(..., alias="statusCode")
    message: str
    error: Error84


class StatusCode85(Enum):
    number_429 = 429


class Error85(Enum):
    too_many_requests = "Too Many Requests"


class V1ProductMarketPriceGetResponse6(BaseModel):
    status_code: StatusCode85 = Field(..., alias="statusCode")
    message: str
    error: Error85


class V1ProductIdGetResponse(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the registered product",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    ticker: str = Field(
        ...,
        description="Product ticker based on the base quote token",
        examples=["ETHUSD"],
    )
    display_ticker: str = Field(
        ...,
        alias="displayTicker",
        description="Product display ticker based on the base quote token",
        examples=["ETH-USD"],
    )
    base_token_address: str = Field(
        ...,
        alias="baseTokenAddress",
        description="Address of the base token (zero address if virtual)",
        examples=["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"],
    )
    quote_token_address: str = Field(
        ...,
        alias="quoteTokenAddress",
        description="Address of quote token",
        examples=["0x4c9edd5852cd905f086c759e8383e09bff1e68b3"],
    )
    base_token_name: str = Field(
        ...,
        alias="baseTokenName",
        description="Name of the base token (e.g. BTC in BTCUSD)",
        examples=["ETH"],
    )
    quote_token_name: str = Field(
        ...,
        alias="quoteTokenName",
        description="Name of the quote token (e.g. USD in BTCUSD)",
        examples=["USDe"],
    )
    engine_type: EngineType = Field(
        ...,
        alias="engineType",
        description="The corresponding engine type this product was registered with",
        examples=[0],
    )
    onchain_id: float = Field(
        ...,
        alias="onchainId",
        description="The productId generated onchain after registering for the first time",
        examples=[1],
    )
    block_number: str = Field(
        ...,
        alias="blockNumber",
        description="Block number this product was registered on",
        examples=["123062737"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Product creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    funding_updated_at: Optional[float] = Field(
        None,
        alias="fundingUpdatedAt",
        description="Unix timestamp when funding was last updated",
        examples=[1721724269],
    )
    min_quantity: str = Field(
        ...,
        alias="minQuantity",
        description="The minimum order quantity in native units expressed as a decimal (precision: 9)",
        examples=["0.05"],
    )
    lot_size: str = Field(
        ...,
        alias="lotSize",
        description="Quantity must be divisible by the lotSize in expressed as a decimal (precision: 9)",
        examples=["0.01"],
    )
    tick_size: str = Field(
        ...,
        alias="tickSize",
        description="Minimum price increment (tickSize) expressed as a decimal (precision: 9)",
        examples=["0.0001"],
    )
    maker_fee: str = Field(
        ...,
        alias="makerFee",
        description="Fee charged to the maker on order trades expressed as a decimal (precision: 9)",
        examples=["0.001"],
    )
    taker_fee: str = Field(
        ...,
        alias="takerFee",
        description="Fee charged to the taker on order trades expressed as a decimal (precision: 9)",
        examples=["0.004"],
    )
    max_quantity: str = Field(
        ...,
        alias="maxQuantity",
        description="Max quantity per order in native units expressed as a decimal (precision: 9)",
        examples=["100000"],
    )
    min_price: str = Field(
        ...,
        alias="minPrice",
        description="Min price in USD expressed as a decimal (precision: 9)",
        examples=["0"],
    )
    max_price: str = Field(
        ...,
        alias="maxPrice",
        description="Max price in USD expressed as a decimal (precision: 9)",
        examples=["100000"],
    )
    volume24h: str = Field(
        ...,
        description="24h volume in base token native units expressed as a decimal (precision: 9)",
        examples=["500000000.42"],
    )
    max_leverage: float = Field(
        ...,
        alias="maxLeverage",
        description="Maximum leverage allowed for the product",
        examples=[20],
    )
    pyth_feed_id: float = Field(
        ..., alias="pythFeedId", description="Pyth price feed id", examples=[2]
    )
    funding_rate1h: str = Field(
        ...,
        alias="fundingRate1h",
        description="Last computed hourly funding rate expressed as a decimal (precision: 9)",
        examples=["0.01"],
    )
    open_interest: str = Field(
        ...,
        alias="openInterest",
        description="Open interest in native units expressed as a decimal (precision: 9)",
        examples=["3300.17"],
    )
    max_open_interest_usd: str = Field(
        ...,
        alias="maxOpenInterestUsd",
        description="Max open interest in USD expressed as a decimal (precision: 9)",
        examples=["200000000.0"],
    )
    max_position_notional_usd: str = Field(
        ...,
        alias="maxPositionNotionalUsd",
        description="Max position notional value, in USD expressed as a decimal (precision: 9)",
        examples=["50000000.0"],
    )


class StatusCode86(Enum):
    number_400 = 400


class Error86(Enum):
    bad_request = "Bad Request"


class V1ProductIdGetResponse1(BaseModel):
    status_code: StatusCode86 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error86


class StatusCode87(Enum):
    number_401 = 401


class Error87(Enum):
    unauthorized = "Unauthorized"


class V1ProductIdGetResponse2(BaseModel):
    status_code: StatusCode87 = Field(..., alias="statusCode")
    message: str
    error: Error87


class StatusCode88(Enum):
    number_403 = 403


class Error88(Enum):
    forbidden = "Forbidden"


class V1ProductIdGetResponse3(BaseModel):
    status_code: StatusCode88 = Field(..., alias="statusCode")
    message: str
    error: Error88


class StatusCode89(Enum):
    number_404 = 404


class Error89(Enum):
    not_found = "Not Found"


class V1ProductIdGetResponse4(BaseModel):
    status_code: StatusCode89 = Field(..., alias="statusCode")
    message: str
    error: Error89


class StatusCode90(Enum):
    number_422 = 422


class Error90(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1ProductIdGetResponse5(BaseModel):
    status_code: StatusCode90 = Field(..., alias="statusCode")
    message: str
    error: Error90


class StatusCode91(Enum):
    number_429 = 429


class Error91(Enum):
    too_many_requests = "Too Many Requests"


class V1ProductIdGetResponse6(BaseModel):
    status_code: StatusCode91 = Field(..., alias="statusCode")
    message: str
    error: Error91


class Range(Enum):
    day = "DAY"
    week = "WEEK"
    month = "MONTH"


class OrderBy6(Enum):
    created_at = "createdAt"


class V1FundingGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    product_id: str = Field(..., alias="productId")
    range: Range = Field(..., examples=["DAY"])
    order_by: Optional[OrderBy6] = Field(None, alias="orderBy", examples=["createdAt"])


class Datum23(BaseModel):
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Funding charge timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    funding_rate1h: str = Field(
        ...,
        alias="fundingRate1h",
        description="Hourly funding rate",
        examples=["0.013876480"],
    )


class V1FundingGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum23] = Field(
        ..., description="Array of funding rate history objects"
    )


class StatusCode92(Enum):
    number_400 = 400


class Error92(Enum):
    bad_request = "Bad Request"


class V1FundingGetResponse1(BaseModel):
    status_code: StatusCode92 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error92


class StatusCode93(Enum):
    number_401 = 401


class Error93(Enum):
    unauthorized = "Unauthorized"


class V1FundingGetResponse2(BaseModel):
    status_code: StatusCode93 = Field(..., alias="statusCode")
    message: str
    error: Error93


class StatusCode94(Enum):
    number_403 = 403


class Error94(Enum):
    forbidden = "Forbidden"


class V1FundingGetResponse3(BaseModel):
    status_code: StatusCode94 = Field(..., alias="statusCode")
    message: str
    error: Error94


class StatusCode95(Enum):
    number_404 = 404


class Error95(Enum):
    not_found = "Not Found"


class V1FundingGetResponse4(BaseModel):
    status_code: StatusCode95 = Field(..., alias="statusCode")
    message: str
    error: Error95


class StatusCode96(Enum):
    number_422 = 422


class Error96(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1FundingGetResponse5(BaseModel):
    status_code: StatusCode96 = Field(..., alias="statusCode")
    message: str
    error: Error96


class StatusCode97(Enum):
    number_429 = 429


class Error97(Enum):
    too_many_requests = "Too Many Requests"


class V1FundingGetResponse6(BaseModel):
    status_code: StatusCode97 = Field(..., alias="statusCode")
    message: str
    error: Error97


class V1FundingProjectedGetParametersQuery(BaseModel):
    product_id: str = Field(..., alias="productId")


class V1FundingProjectedGetResponse(BaseModel):
    funding_rate_projected1h: str = Field(
        ...,
        alias="fundingRateProjected1h",
        description="Projected funding rate",
        examples=["0.013876480"],
    )
    funding_rate1h: str = Field(
        ..., alias="fundingRate1h", description="Funding rate", examples=["0.013876480"]
    )


class StatusCode98(Enum):
    number_400 = 400


class Error98(Enum):
    bad_request = "Bad Request"


class V1FundingProjectedGetResponse1(BaseModel):
    status_code: StatusCode98 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error98


class StatusCode99(Enum):
    number_401 = 401


class Error99(Enum):
    unauthorized = "Unauthorized"


class V1FundingProjectedGetResponse2(BaseModel):
    status_code: StatusCode99 = Field(..., alias="statusCode")
    message: str
    error: Error99


class StatusCode100(Enum):
    number_403 = 403


class Error100(Enum):
    forbidden = "Forbidden"


class V1FundingProjectedGetResponse3(BaseModel):
    status_code: StatusCode100 = Field(..., alias="statusCode")
    message: str
    error: Error100


class StatusCode101(Enum):
    number_404 = 404


class Error101(Enum):
    not_found = "Not Found"


class V1FundingProjectedGetResponse4(BaseModel):
    status_code: StatusCode101 = Field(..., alias="statusCode")
    message: str
    error: Error101


class StatusCode102(Enum):
    number_422 = 422


class Error102(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1FundingProjectedGetResponse5(BaseModel):
    status_code: StatusCode102 = Field(..., alias="statusCode")
    message: str
    error: Error102


class StatusCode103(Enum):
    number_429 = 429


class Error103(Enum):
    too_many_requests = "Too Many Requests"


class V1FundingProjectedGetResponse6(BaseModel):
    status_code: StatusCode103 = Field(..., alias="statusCode")
    message: str
    error: Error103


class V1RpcConfigGetResponse(BaseModel):
    domain: Domain = Field(..., description="Domain type")
    signature_types: SignatureTypes = Field(
        ..., alias="signatureTypes", description="Signature types"
    )


class StatusCode104(Enum):
    number_400 = 400


class Error104(Enum):
    bad_request = "Bad Request"


class V1RpcConfigGetResponse1(BaseModel):
    status_code: StatusCode104 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error104


class StatusCode105(Enum):
    number_401 = 401


class Error105(Enum):
    unauthorized = "Unauthorized"


class V1RpcConfigGetResponse2(BaseModel):
    status_code: StatusCode105 = Field(..., alias="statusCode")
    message: str
    error: Error105


class StatusCode106(Enum):
    number_403 = 403


class Error106(Enum):
    forbidden = "Forbidden"


class V1RpcConfigGetResponse3(BaseModel):
    status_code: StatusCode106 = Field(..., alias="statusCode")
    message: str
    error: Error106


class StatusCode107(Enum):
    number_404 = 404


class Error107(Enum):
    not_found = "Not Found"


class V1RpcConfigGetResponse4(BaseModel):
    status_code: StatusCode107 = Field(..., alias="statusCode")
    message: str
    error: Error107


class StatusCode108(Enum):
    number_422 = 422


class Error108(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1RpcConfigGetResponse5(BaseModel):
    status_code: StatusCode108 = Field(..., alias="statusCode")
    message: str
    error: Error108


class StatusCode109(Enum):
    number_429 = 429


class Error109(Enum):
    too_many_requests = "Too Many Requests"


class V1RpcConfigGetResponse6(BaseModel):
    status_code: StatusCode109 = Field(..., alias="statusCode")
    message: str
    error: Error109


class OrderBy7(Enum):
    created_at = "createdAt"
    name = "name"


class V1SubaccountGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    name: Optional[constr(max_length=66)] = None
    sender: str
    order_by: Optional[OrderBy7] = Field(None, alias="orderBy", examples=["createdAt"])


class Datum24(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    name: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    account: str = Field(
        ...,
        description="Address of the account which registered the subaccount",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    created_block_number: str = Field(
        ...,
        alias="createdBlockNumber",
        description="Block number this subaccount was created on",
        examples=["123062737"],
    )
    registered_block_number: Optional[str] = Field(
        None,
        alias="registeredBlockNumber",
        description="Block number this subaccount was registered on",
        examples=["123062737"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Subaccount creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class V1SubaccountGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum24] = Field(..., description="Array of subaccount objects")


class StatusCode110(Enum):
    number_400 = 400


class Error110(Enum):
    bad_request = "Bad Request"


class V1SubaccountGetResponse1(BaseModel):
    status_code: StatusCode110 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error110


class StatusCode111(Enum):
    number_401 = 401


class Error111(Enum):
    unauthorized = "Unauthorized"


class V1SubaccountGetResponse2(BaseModel):
    status_code: StatusCode111 = Field(..., alias="statusCode")
    message: str
    error: Error111


class StatusCode112(Enum):
    number_403 = 403


class Error112(Enum):
    forbidden = "Forbidden"


class V1SubaccountGetResponse3(BaseModel):
    status_code: StatusCode112 = Field(..., alias="statusCode")
    message: str
    error: Error112


class StatusCode113(Enum):
    number_404 = 404


class Error113(Enum):
    not_found = "Not Found"


class V1SubaccountGetResponse4(BaseModel):
    status_code: StatusCode113 = Field(..., alias="statusCode")
    message: str
    error: Error113


class StatusCode114(Enum):
    number_422 = 422


class Error114(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1SubaccountGetResponse5(BaseModel):
    status_code: StatusCode114 = Field(..., alias="statusCode")
    message: str
    error: Error114


class StatusCode115(Enum):
    number_429 = 429


class Error115(Enum):
    too_many_requests = "Too Many Requests"


class V1SubaccountGetResponse6(BaseModel):
    status_code: StatusCode115 = Field(..., alias="statusCode")
    message: str
    error: Error115


class V1SubaccountBalanceGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    subaccount_id: str = Field(..., alias="subaccountId")


class Datum25(BaseModel):
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id representing the subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    token_id: str = Field(
        ...,
        alias="tokenId",
        description="Id representing the token",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    token_address: str = Field(
        ...,
        alias="tokenAddress",
        description="ERC20 deposited token address (zero address if virtual)",
        examples=["0x70997970C51812dc3A010C7d01b50e0d17dc79C8"],
    )
    token_name: str = Field(
        ...,
        alias="tokenName",
        description="The unique exchange defined token name driven by addToken onchain",
        examples=["ETH"],
    )
    amount: Decimal = Field(
        ...,
        description="Token balance in native units expressed as a decimal (precision: 9)",
        examples=["1.5"],
    )
    available: Decimal = Field(
        ...,
        description="Portion of balance transferrable in native units expressed as a decimal (precision: 9)",
        examples=["0.1337"],
    )
    total_used: Decimal = Field(
        ...,
        alias="totalUsed",
        description="Portion of balance non-transferrable in native units expressed as a decimal (precision: 9)",
        examples=["1.3663"],
    )
    updated_at: float = Field(
        ...,
        alias="updatedAt",
        description="Token balance last updated timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class V1SubaccountBalanceGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum25] = Field(..., description="Array of order subaccount balances")


class StatusCode116(Enum):
    number_400 = 400


class Error116(Enum):
    bad_request = "Bad Request"


class V1SubaccountBalanceGetResponse1(BaseModel):
    status_code: StatusCode116 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error116


class StatusCode117(Enum):
    number_401 = 401


class Error117(Enum):
    unauthorized = "Unauthorized"


class V1SubaccountBalanceGetResponse2(BaseModel):
    status_code: StatusCode117 = Field(..., alias="statusCode")
    message: str
    error: Error117


class StatusCode118(Enum):
    number_403 = 403


class Error118(Enum):
    forbidden = "Forbidden"


class V1SubaccountBalanceGetResponse3(BaseModel):
    status_code: StatusCode118 = Field(..., alias="statusCode")
    message: str
    error: Error118


class StatusCode119(Enum):
    number_404 = 404


class Error119(Enum):
    not_found = "Not Found"


class V1SubaccountBalanceGetResponse4(BaseModel):
    status_code: StatusCode119 = Field(..., alias="statusCode")
    message: str
    error: Error119


class StatusCode120(Enum):
    number_422 = 422


class Error120(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1SubaccountBalanceGetResponse5(BaseModel):
    status_code: StatusCode120 = Field(..., alias="statusCode")
    message: str
    error: Error120


class StatusCode121(Enum):
    number_429 = 429


class Error121(Enum):
    too_many_requests = "Too Many Requests"


class V1SubaccountBalanceGetResponse6(BaseModel):
    status_code: StatusCode121 = Field(..., alias="statusCode")
    message: str
    error: Error121


class V1SubaccountIdGetResponse(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    name: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    account: str = Field(
        ...,
        description="Address of the account which registered the subaccount",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    created_block_number: str = Field(
        ...,
        alias="createdBlockNumber",
        description="Block number this subaccount was created on",
        examples=["123062737"],
    )
    registered_block_number: Optional[str] = Field(
        None,
        alias="registeredBlockNumber",
        description="Block number this subaccount was registered on",
        examples=["123062737"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Subaccount creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class StatusCode122(Enum):
    number_400 = 400


class Error122(Enum):
    bad_request = "Bad Request"


class V1SubaccountIdGetResponse1(BaseModel):
    status_code: StatusCode122 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error122


class StatusCode123(Enum):
    number_401 = 401


class Error123(Enum):
    unauthorized = "Unauthorized"


class V1SubaccountIdGetResponse2(BaseModel):
    status_code: StatusCode123 = Field(..., alias="statusCode")
    message: str
    error: Error123


class StatusCode124(Enum):
    number_403 = 403


class Error124(Enum):
    forbidden = "Forbidden"


class V1SubaccountIdGetResponse3(BaseModel):
    status_code: StatusCode124 = Field(..., alias="statusCode")
    message: str
    error: Error124


class StatusCode125(Enum):
    number_404 = 404


class Error125(Enum):
    not_found = "Not Found"


class V1SubaccountIdGetResponse4(BaseModel):
    status_code: StatusCode125 = Field(..., alias="statusCode")
    message: str
    error: Error125


class StatusCode126(Enum):
    number_422 = 422


class Error126(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1SubaccountIdGetResponse5(BaseModel):
    status_code: StatusCode126 = Field(..., alias="statusCode")
    message: str
    error: Error126


class StatusCode127(Enum):
    number_429 = 429


class Error127(Enum):
    too_many_requests = "Too Many Requests"


class V1SubaccountIdGetResponse6(BaseModel):
    status_code: StatusCode127 = Field(..., alias="statusCode")
    message: str
    error: Error127


class Data13(BaseModel):
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    sender: str = Field(
        ...,
        description="Address of account that created the signature in this message",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    signer: str = Field(
        ...,
        description="Address of signer to allowed for delegated signing",
        examples=["0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )


class V1LinkedSignerLinkPostRequest(BaseModel):
    signature: str = Field(
        ..., description="The signature from signTypedData(...) signed by the sender"
    )
    signer_signature: str = Field(
        ...,
        alias="signerSignature",
        description="The signature from signTypedData(...) signed by the signer",
    )
    data: Data13


class V1LinkedSignerLinkPostResponse(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the linked signer",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    signer: str = Field(
        ...,
        description="Address of the signer linked with the subaccount",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    is_active: bool = Field(
        ...,
        alias="isActive",
        description="Whether this signer is the current active signer for the subaccount",
        examples=[True],
    )
    block_number: Optional[str] = Field(
        None,
        alias="blockNumber",
        description="Block number the signer has been linked on. Undefined means it has not be processed",
        examples=["123062737"],
    )
    linked_at: Optional[float] = Field(
        None,
        alias="linkedAt",
        description="Onchain linkage timestamp (ms since Unix Epoch)",
        examples=[1712019615000],
    )
    expires_at: float = Field(
        ...,
        alias="expiresAt",
        description="Signer expiry timestamp (ms since Unix Epoch)",
        examples=[1713229200000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Link signer submission timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class StatusCode128(Enum):
    number_400 = 400


class Error128(Enum):
    bad_request = "Bad Request"


class V1LinkedSignerLinkPostResponse1(BaseModel):
    status_code: StatusCode128 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error128


class StatusCode129(Enum):
    number_401 = 401


class Error129(Enum):
    unauthorized = "Unauthorized"


class V1LinkedSignerLinkPostResponse2(BaseModel):
    status_code: StatusCode129 = Field(..., alias="statusCode")
    message: str
    error: Error129


class StatusCode130(Enum):
    number_403 = 403


class Error130(Enum):
    forbidden = "Forbidden"


class V1LinkedSignerLinkPostResponse3(BaseModel):
    status_code: StatusCode130 = Field(..., alias="statusCode")
    message: str
    error: Error130


class StatusCode131(Enum):
    number_404 = 404


class Error131(Enum):
    not_found = "Not Found"


class V1LinkedSignerLinkPostResponse4(BaseModel):
    status_code: StatusCode131 = Field(..., alias="statusCode")
    message: str
    error: Error131


class StatusCode132(Enum):
    number_422 = 422


class Error132(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1LinkedSignerLinkPostResponse5(BaseModel):
    status_code: StatusCode132 = Field(..., alias="statusCode")
    message: str
    error: Error132


class StatusCode133(Enum):
    number_429 = 429


class Error133(Enum):
    too_many_requests = "Too Many Requests"


class V1LinkedSignerLinkPostResponse6(BaseModel):
    status_code: StatusCode133 = Field(..., alias="statusCode")
    message: str
    error: Error133


class Data14(BaseModel):
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    sender: str = Field(
        ...,
        description="Address of account that created the signature in this message",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    signer: str = Field(
        ...,
        description="Address of signer to revoke",
        examples=["0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )


class V1LinkedSignerRevokeDeleteRequest(BaseModel):
    signature: str = Field(
        ..., description="The signature from signTypedData(...) signed by the sender"
    )
    data: Data14


class V1LinkedSignerRevokeDeleteResponse(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the linked signer",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    signer: str = Field(
        ...,
        description="Address of the signer linked with the subaccount",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    is_active: bool = Field(
        ...,
        alias="isActive",
        description="Whether this signer is the current active signer for the subaccount",
        examples=[True],
    )
    block_number: Optional[str] = Field(
        None,
        alias="blockNumber",
        description="Block number the signer has been linked on. Undefined means it has not be processed",
        examples=["123062737"],
    )
    linked_at: Optional[float] = Field(
        None,
        alias="linkedAt",
        description="Onchain linkage timestamp (ms since Unix Epoch)",
        examples=[1712019615000],
    )
    expires_at: float = Field(
        ...,
        alias="expiresAt",
        description="Signer expiry timestamp (ms since Unix Epoch)",
        examples=[1713229200000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Link signer submission timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class StatusCode134(Enum):
    number_400 = 400


class Error134(Enum):
    bad_request = "Bad Request"


class V1LinkedSignerRevokeDeleteResponse1(BaseModel):
    status_code: StatusCode134 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error134


class StatusCode135(Enum):
    number_401 = 401


class Error135(Enum):
    unauthorized = "Unauthorized"


class V1LinkedSignerRevokeDeleteResponse2(BaseModel):
    status_code: StatusCode135 = Field(..., alias="statusCode")
    message: str
    error: Error135


class StatusCode136(Enum):
    number_403 = 403


class Error136(Enum):
    forbidden = "Forbidden"


class V1LinkedSignerRevokeDeleteResponse3(BaseModel):
    status_code: StatusCode136 = Field(..., alias="statusCode")
    message: str
    error: Error136


class StatusCode137(Enum):
    number_404 = 404


class Error137(Enum):
    not_found = "Not Found"


class V1LinkedSignerRevokeDeleteResponse4(BaseModel):
    status_code: StatusCode137 = Field(..., alias="statusCode")
    message: str
    error: Error137


class StatusCode138(Enum):
    number_422 = 422


class Error138(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1LinkedSignerRevokeDeleteResponse5(BaseModel):
    status_code: StatusCode138 = Field(..., alias="statusCode")
    message: str
    error: Error138


class StatusCode139(Enum):
    number_429 = 429


class Error139(Enum):
    too_many_requests = "Too Many Requests"


class V1LinkedSignerRevokeDeleteResponse6(BaseModel):
    status_code: StatusCode139 = Field(..., alias="statusCode")
    message: str
    error: Error139


class V1LinkedSignerQuotaGetParametersQuery(BaseModel):
    subaccount_id: str = Field(..., alias="subaccountId")


class V1LinkedSignerQuotaGetResponse(BaseModel):
    max_linked_signers_period_days: float = Field(
        ...,
        alias="maxLinkedSignersPeriodDays",
        description="Ratelimit period in days for linking signers per account",
        examples=[7],
    )
    max_linked_signers_in_period: float = Field(
        ...,
        alias="maxLinkedSignersInPeriod",
        description="Max number of signer that can be linked within ratelimit period",
        examples=[10],
    )
    linked_signers_used_in_period: float = Field(
        ...,
        alias="linkedSignersUsedInPeriod",
        description="Number of signers linked within current ratelimit period",
        examples=[2],
    )


class StatusCode140(Enum):
    number_400 = 400


class Error140(Enum):
    bad_request = "Bad Request"


class V1LinkedSignerQuotaGetResponse1(BaseModel):
    status_code: StatusCode140 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error140


class StatusCode141(Enum):
    number_401 = 401


class Error141(Enum):
    unauthorized = "Unauthorized"


class V1LinkedSignerQuotaGetResponse2(BaseModel):
    status_code: StatusCode141 = Field(..., alias="statusCode")
    message: str
    error: Error141


class StatusCode142(Enum):
    number_403 = 403


class Error142(Enum):
    forbidden = "Forbidden"


class V1LinkedSignerQuotaGetResponse3(BaseModel):
    status_code: StatusCode142 = Field(..., alias="statusCode")
    message: str
    error: Error142


class StatusCode143(Enum):
    number_404 = 404


class Error143(Enum):
    not_found = "Not Found"


class V1LinkedSignerQuotaGetResponse4(BaseModel):
    status_code: StatusCode143 = Field(..., alias="statusCode")
    message: str
    error: Error143


class StatusCode144(Enum):
    number_422 = 422


class Error144(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1LinkedSignerQuotaGetResponse5(BaseModel):
    status_code: StatusCode144 = Field(..., alias="statusCode")
    message: str
    error: Error144


class StatusCode145(Enum):
    number_429 = 429


class Error145(Enum):
    too_many_requests = "Too Many Requests"


class V1LinkedSignerQuotaGetResponse6(BaseModel):
    status_code: StatusCode145 = Field(..., alias="statusCode")
    message: str
    error: Error145


class V1LinkedSignerIdGetResponse(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the linked signer",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    signer: str = Field(
        ...,
        description="Address of the signer linked with the subaccount",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    is_active: bool = Field(
        ...,
        alias="isActive",
        description="Whether this signer is the current active signer for the subaccount",
        examples=[True],
    )
    block_number: Optional[str] = Field(
        None,
        alias="blockNumber",
        description="Block number the signer has been linked on. Undefined means it has not be processed",
        examples=["123062737"],
    )
    linked_at: Optional[float] = Field(
        None,
        alias="linkedAt",
        description="Onchain linkage timestamp (ms since Unix Epoch)",
        examples=[1712019615000],
    )
    expires_at: float = Field(
        ...,
        alias="expiresAt",
        description="Signer expiry timestamp (ms since Unix Epoch)",
        examples=[1713229200000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Link signer submission timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class StatusCode146(Enum):
    number_400 = 400


class Error146(Enum):
    bad_request = "Bad Request"


class V1LinkedSignerIdGetResponse1(BaseModel):
    status_code: StatusCode146 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error146


class StatusCode147(Enum):
    number_401 = 401


class Error147(Enum):
    unauthorized = "Unauthorized"


class V1LinkedSignerIdGetResponse2(BaseModel):
    status_code: StatusCode147 = Field(..., alias="statusCode")
    message: str
    error: Error147


class StatusCode148(Enum):
    number_403 = 403


class Error148(Enum):
    forbidden = "Forbidden"


class V1LinkedSignerIdGetResponse3(BaseModel):
    status_code: StatusCode148 = Field(..., alias="statusCode")
    message: str
    error: Error148


class StatusCode149(Enum):
    number_404 = 404


class Error149(Enum):
    not_found = "Not Found"


class V1LinkedSignerIdGetResponse4(BaseModel):
    status_code: StatusCode149 = Field(..., alias="statusCode")
    message: str
    error: Error149


class StatusCode150(Enum):
    number_422 = 422


class Error150(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1LinkedSignerIdGetResponse5(BaseModel):
    status_code: StatusCode150 = Field(..., alias="statusCode")
    message: str
    error: Error150


class StatusCode151(Enum):
    number_429 = 429


class Error151(Enum):
    too_many_requests = "Too Many Requests"


class V1LinkedSignerIdGetResponse6(BaseModel):
    status_code: StatusCode151 = Field(..., alias="statusCode")
    message: str
    error: Error151


class OrderBy8(Enum):
    created_at = "createdAt"
    expires_at = "expiresAt"
    is_active = "isActive"


class V1LinkedSignerGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    subaccount_id: str = Field(..., alias="subaccountId")
    active: Optional[bool] = Field(None, examples=[True])
    order_by: Optional[OrderBy8] = Field(None, alias="orderBy", examples=["createdAt"])


class Datum26(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the linked signer",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    signer: str = Field(
        ...,
        description="Address of the signer linked with the subaccount",
        examples=["0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe"],
    )
    is_active: bool = Field(
        ...,
        alias="isActive",
        description="Whether this signer is the current active signer for the subaccount",
        examples=[True],
    )
    block_number: Optional[str] = Field(
        None,
        alias="blockNumber",
        description="Block number the signer has been linked on. Undefined means it has not be processed",
        examples=["123062737"],
    )
    linked_at: Optional[float] = Field(
        None,
        alias="linkedAt",
        description="Onchain linkage timestamp (ms since Unix Epoch)",
        examples=[1712019615000],
    )
    expires_at: float = Field(
        ...,
        alias="expiresAt",
        description="Signer expiry timestamp (ms since Unix Epoch)",
        examples=[1713229200000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Link signer submission timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class V1LinkedSignerGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum26] = Field(..., description="Array of signer objects")


class StatusCode152(Enum):
    number_400 = 400


class Error152(Enum):
    bad_request = "Bad Request"


class V1LinkedSignerGetResponse1(BaseModel):
    status_code: StatusCode152 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error152


class StatusCode153(Enum):
    number_401 = 401


class Error153(Enum):
    unauthorized = "Unauthorized"


class V1LinkedSignerGetResponse2(BaseModel):
    status_code: StatusCode153 = Field(..., alias="statusCode")
    message: str
    error: Error153


class StatusCode154(Enum):
    number_403 = 403


class Error154(Enum):
    forbidden = "Forbidden"


class V1LinkedSignerGetResponse3(BaseModel):
    status_code: StatusCode154 = Field(..., alias="statusCode")
    message: str
    error: Error154


class StatusCode155(Enum):
    number_404 = 404


class Error155(Enum):
    not_found = "Not Found"


class V1LinkedSignerGetResponse4(BaseModel):
    status_code: StatusCode155 = Field(..., alias="statusCode")
    message: str
    error: Error155


class StatusCode156(Enum):
    number_422 = 422


class Error156(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1LinkedSignerGetResponse5(BaseModel):
    status_code: StatusCode156 = Field(..., alias="statusCode")
    message: str
    error: Error156


class StatusCode157(Enum):
    number_429 = 429


class Error157(Enum):
    too_many_requests = "Too Many Requests"


class V1LinkedSignerGetResponse6(BaseModel):
    status_code: StatusCode157 = Field(..., alias="statusCode")
    message: str
    error: Error157


class OrderBy9(Enum):
    created_at = "createdAt"


class V1TokenWithdrawGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    subaccount_id: str = Field(..., alias="subaccountId")
    active: Optional[bool] = Field(None, examples=[True])
    order_by: Optional[OrderBy9] = Field(None, alias="orderBy", examples=["createdAt"])


class Status10(Enum):
    submitted = "SUBMITTED"
    pending = "PENDING"
    completed = "COMPLETED"
    rejected = "REJECTED"


class Datum27(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the withdraw",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    initiated_block_number: Optional[str] = Field(
        None,
        alias="initiatedBlockNumber",
        description="Block number the withdraw was initiated on",
        examples=["123062000"],
    )
    finalized_block_number: Optional[str] = Field(
        None,
        alias="finalizedBlockNumber",
        description="Block number the withdraw was completed on",
        examples=["123062992"],
    )
    status: Status10 = Field(
        ..., description="Current status of the withdraw", examples=["PENDING"]
    )
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    token: str = Field(
        ...,
        description="Address of asset withdraw",
        examples=["0xF3FC178157fb3c87548bAA86F9d24BA38E649B58"],
    )
    amount: str = Field(
        ...,
        description="Amount of asset transferred expressed as a decimal",
        examples=["1.5"],
    )
    is_ready: bool = Field(
        ...,
        alias="isReady",
        description="Indicates whether a withdraw is ready to be finalized onchain",
        examples=[True],
    )
    ready_at: Optional[float] = Field(
        None,
        alias="readyAt",
        description="Ready to be withdrawn onchain estimated timestamp (ms since Unix Epoch)",
        examples=[1712019615000],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Withdraw creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class V1TokenWithdrawGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum27] = Field(..., description="Array of subaccount withdraw objects")


class StatusCode158(Enum):
    number_400 = 400


class Error158(Enum):
    bad_request = "Bad Request"


class V1TokenWithdrawGetResponse1(BaseModel):
    status_code: StatusCode158 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error158


class StatusCode159(Enum):
    number_401 = 401


class Error159(Enum):
    unauthorized = "Unauthorized"


class V1TokenWithdrawGetResponse2(BaseModel):
    status_code: StatusCode159 = Field(..., alias="statusCode")
    message: str
    error: Error159


class StatusCode160(Enum):
    number_403 = 403


class Error160(Enum):
    forbidden = "Forbidden"


class V1TokenWithdrawGetResponse3(BaseModel):
    status_code: StatusCode160 = Field(..., alias="statusCode")
    message: str
    error: Error160


class StatusCode161(Enum):
    number_404 = 404


class Error161(Enum):
    not_found = "Not Found"


class V1TokenWithdrawGetResponse4(BaseModel):
    status_code: StatusCode161 = Field(..., alias="statusCode")
    message: str
    error: Error161


class StatusCode162(Enum):
    number_422 = 422


class Error162(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1TokenWithdrawGetResponse5(BaseModel):
    status_code: StatusCode162 = Field(..., alias="statusCode")
    message: str
    error: Error162


class StatusCode163(Enum):
    number_429 = 429


class Error163(Enum):
    too_many_requests = "Too Many Requests"


class V1TokenWithdrawGetResponse6(BaseModel):
    status_code: StatusCode163 = Field(..., alias="statusCode")
    message: str
    error: Error163


class Type22(Enum):
    deposit = "DEPOSIT"
    fees_claimed = "FEES_CLAIMED"
    withdraw = "WITHDRAW"


class V1TokenTransferGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    subaccount_id: str = Field(..., alias="subaccountId")
    statuses: Optional[List[Status10]] = Field(None, examples=["COMPLETED"])
    types: Optional[List[Type22]] = Field(None, examples=["WITHDRAW"])
    order_by: Optional[OrderBy9] = Field(None, alias="orderBy", examples=["createdAt"])
    created_after: Optional[float] = Field(None, alias="createdAfter")
    created_before: Optional[float] = Field(None, alias="createdBefore")


class Datum28(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the transfer",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    initiated_block_number: Optional[str] = Field(
        None,
        alias="initiatedBlockNumber",
        description="Block number the transfer was initiated on",
        examples=["123062000"],
    )
    finalized_block_number: Optional[str] = Field(
        None,
        alias="finalizedBlockNumber",
        description="Block number the transfer was completed on",
        examples=["123062992"],
    )
    status: Status10 = Field(
        ..., description="Current status of the transfer", examples=["PENDING"]
    )
    subaccount_id: str = Field(
        ...,
        alias="subaccountId",
        description="Id representing the registered subaccount",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    token_name: str = Field(
        ...,
        alias="tokenName",
        description="The unique exchange defined token name driven by addToken onchain",
        examples=["ETH"],
    )
    token_address: str = Field(
        ...,
        alias="tokenAddress",
        description="Address of token transferred",
        examples=["0xF3FC178157fb3c87548bAA86F9d24BA38E649B58"],
    )
    type: Type22 = Field(
        ..., description="Type of transfer (WITHDRAW or DEPOSIT)", examples=["WITHDRAW"]
    )
    amount: str = Field(
        ...,
        description="Amount of tokens transferred in native units expressed as a decimal (precision: 9)",
        examples=["0.42"],
    )
    fee: str = Field(
        ...,
        description="Fee paid for the transfer in native units expressed as a decimal (precision: 9)",
        examples=["0.42"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Transfer creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )
    initiated_transaction_hash: Optional[str] = Field(
        None,
        alias="initiatedTransactionHash",
        description="Transaction hash for the initiation of the transfer",
        examples=["0xF3FC178157fb3c87548bAA86F9d24BA38E649B58"],
    )
    finalized_transaction_hash: Optional[str] = Field(
        None,
        alias="finalizedTransactionHash",
        description="Transaction hash for the finalization of the transfer",
        examples=["0xF3FC178157fb3c87548bAA86F9d24BA38E649B58"],
    )


class V1TokenTransferGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum28] = Field(..., description="Array of transfer objects")


class StatusCode164(Enum):
    number_400 = 400


class Error164(Enum):
    bad_request = "Bad Request"


class V1TokenTransferGetResponse1(BaseModel):
    status_code: StatusCode164 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error164


class StatusCode165(Enum):
    number_401 = 401


class Error165(Enum):
    unauthorized = "Unauthorized"


class V1TokenTransferGetResponse2(BaseModel):
    status_code: StatusCode165 = Field(..., alias="statusCode")
    message: str
    error: Error165


class StatusCode166(Enum):
    number_403 = 403


class Error166(Enum):
    forbidden = "Forbidden"


class V1TokenTransferGetResponse3(BaseModel):
    status_code: StatusCode166 = Field(..., alias="statusCode")
    message: str
    error: Error166


class StatusCode167(Enum):
    number_404 = 404


class Error167(Enum):
    not_found = "Not Found"


class V1TokenTransferGetResponse4(BaseModel):
    status_code: StatusCode167 = Field(..., alias="statusCode")
    message: str
    error: Error167


class StatusCode168(Enum):
    number_422 = 422


class Error168(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1TokenTransferGetResponse5(BaseModel):
    status_code: StatusCode168 = Field(..., alias="statusCode")
    message: str
    error: Error168


class StatusCode169(Enum):
    number_429 = 429


class Error169(Enum):
    too_many_requests = "Too Many Requests"


class V1TokenTransferGetResponse6(BaseModel):
    status_code: StatusCode169 = Field(..., alias="statusCode")
    message: str
    error: Error169


class Data15(BaseModel):
    account: str = Field(
        ...,
        description="Account address",
        examples=["0x70997970C51812dc3A010C7d01b50e0d17dc79C8"],
    )
    subaccount: str = Field(
        ...,
        description="Bytes32 encoded name of the subaccount (with 0x prefix, zero padded)",
        examples=["0x7072696d61727900000000000000000000000000000000000000000000000000"],
    )
    token: str = Field(
        ...,
        description="Address of token to be withdrawn",
        examples=["0x5FC8d32690cc91D4c39d9d3abcBD16989F875707"],
    )
    amount: Decimal = Field(
        ...,
        description="Amount to withdraw in native units expressed as a decimal (precision: 9)",
        examples=["1337.42"],
    )
    nonce: str = Field(
        ...,
        description="Message nonce timestamp (nanoseconds since Unix Epoch)",
        examples=["2687929537462333"],
    )
    signed_at: float = Field(
        ...,
        alias="signedAt",
        description="Message signedAt current timestamp (seconds since Unix Epoch)",
        examples=[1712019600],
    )


class V1TokenIdWithdrawPostRequest(BaseModel):
    signature: str = Field(
        ..., description="The signature from signTypedData(...) signed by the sender"
    )
    data: Data15


class V1TokenIdWithdrawPostResponse(BaseModel):
    pass


class StatusCode170(Enum):
    number_400 = 400


class Error170(Enum):
    bad_request = "Bad Request"


class V1TokenIdWithdrawPostResponse1(BaseModel):
    status_code: StatusCode170 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error170


class StatusCode171(Enum):
    number_401 = 401


class Error171(Enum):
    unauthorized = "Unauthorized"


class V1TokenIdWithdrawPostResponse2(BaseModel):
    status_code: StatusCode171 = Field(..., alias="statusCode")
    message: str
    error: Error171


class StatusCode172(Enum):
    number_403 = 403


class Error172(Enum):
    forbidden = "Forbidden"


class V1TokenIdWithdrawPostResponse3(BaseModel):
    status_code: StatusCode172 = Field(..., alias="statusCode")
    message: str
    error: Error172


class StatusCode173(Enum):
    number_404 = 404


class Error173(Enum):
    not_found = "Not Found"


class V1TokenIdWithdrawPostResponse4(BaseModel):
    status_code: StatusCode173 = Field(..., alias="statusCode")
    message: str
    error: Error173


class StatusCode174(Enum):
    number_422 = 422


class Message3(Enum):
    insufficient_balance = "InsufficientBalance"
    token_address_mismatch = "TokenAddressMismatch"
    withdraw_disabled = "WithdrawDisabled"
    withdraw_amount_too_small = "WithdrawAmountTooSmall"
    pending_withdraw_exists = "PendingWithdrawExists"
    no_deposits_found = "NoDepositsFound"
    withdraw_amount_zero_or_negative = "WithdrawAmountZeroOrNegative"


class Error174(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1TokenIdWithdrawPostResponse5(BaseModel):
    status_code: StatusCode174 = Field(..., alias="statusCode")
    message: Message3 = Field(
        ...,
        description="Error code indicating the reason for failure",
        examples=["InsufficientBalance"],
    )
    error: Error174


class StatusCode175(Enum):
    number_429 = 429


class Error175(Enum):
    too_many_requests = "Too Many Requests"


class V1TokenIdWithdrawPostResponse6(BaseModel):
    status_code: StatusCode175 = Field(..., alias="statusCode")
    message: str
    error: Error175


class V1TokenIdGetResponse(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the token",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    address: str = Field(
        ...,
        description="Address of the token (zero address virtual)",
        examples=["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"],
    )
    name: str = Field(
        ...,
        description="The unique exchange defined token name driven by addToken onchain",
        examples=["ETH"],
    )
    erc20_name: Optional[str] = Field(
        None,
        alias="erc20Name",
        description="ERC20 token name (available if not virtual)",
        examples=["Wrapped Ether"],
    )
    erc20_symbol: Optional[str] = Field(
        None,
        alias="erc20Symbol",
        description="ERC20 token symbol (available if not virtual)",
        examples=["WETH"],
    )
    erc20_decimals: Optional[float] = Field(
        None,
        alias="erc20Decimals",
        description="ERC20 token decimals (available if not virtual)",
        examples=[18],
    )
    deposit_enabled: bool = Field(
        ...,
        alias="depositEnabled",
        description="Whether the token is enabled for deposit",
        examples=[True],
    )
    withdraw_enabled: bool = Field(
        ...,
        alias="withdrawEnabled",
        description="Whether the token is enabled for withdraw",
        examples=[True],
    )
    deposit_fee: str = Field(
        ...,
        alias="depositFee",
        description="Amount of native units charged on deposit expressed as a decimal (precision: 9)",
        examples=["0"],
    )
    withdraw_fee: str = Field(
        ...,
        alias="withdrawFee",
        description="Amount of native units charged on withdraw expressed as a decimal (precision: 9)",
        examples=["0.0001"],
    )
    min_deposit: str = Field(
        ...,
        alias="minDeposit",
        description="Min deposit amount as native units expressed as a decimal (precision: 9)",
        examples=["0.1"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Token creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class StatusCode176(Enum):
    number_400 = 400


class Error176(Enum):
    bad_request = "Bad Request"


class V1TokenIdGetResponse1(BaseModel):
    status_code: StatusCode176 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error176


class StatusCode177(Enum):
    number_401 = 401


class Error177(Enum):
    unauthorized = "Unauthorized"


class V1TokenIdGetResponse2(BaseModel):
    status_code: StatusCode177 = Field(..., alias="statusCode")
    message: str
    error: Error177


class StatusCode178(Enum):
    number_403 = 403


class Error178(Enum):
    forbidden = "Forbidden"


class V1TokenIdGetResponse3(BaseModel):
    status_code: StatusCode178 = Field(..., alias="statusCode")
    message: str
    error: Error178


class StatusCode179(Enum):
    number_404 = 404


class Error179(Enum):
    not_found = "Not Found"


class V1TokenIdGetResponse4(BaseModel):
    status_code: StatusCode179 = Field(..., alias="statusCode")
    message: str
    error: Error179


class StatusCode180(Enum):
    number_422 = 422


class Error180(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1TokenIdGetResponse5(BaseModel):
    status_code: StatusCode180 = Field(..., alias="statusCode")
    message: str
    error: Error180


class StatusCode181(Enum):
    number_429 = 429


class Error181(Enum):
    too_many_requests = "Too Many Requests"


class V1TokenIdGetResponse6(BaseModel):
    status_code: StatusCode181 = Field(..., alias="statusCode")
    message: str
    error: Error181


class V1TokenGetParametersQuery(BaseModel):
    order: Optional[Order] = None
    limit: Optional[float] = None
    cursor: Optional[str] = None
    deposit_enabled: Optional[bool] = Field(
        None, alias="depositEnabled", examples=[True]
    )
    withdraw_enabled: Optional[bool] = Field(
        None, alias="withdrawEnabled", examples=[True]
    )
    order_by: Optional[OrderBy9] = Field(None, alias="orderBy", examples=["createdAt"])


class Datum29(BaseModel):
    id: str = Field(
        ...,
        description="Id representing the token",
        examples=["9036443a-441a-4a66-87f2-bd5c44cdca7a"],
    )
    address: str = Field(
        ...,
        description="Address of the token (zero address virtual)",
        examples=["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"],
    )
    name: str = Field(
        ...,
        description="The unique exchange defined token name driven by addToken onchain",
        examples=["ETH"],
    )
    erc20_name: Optional[str] = Field(
        None,
        alias="erc20Name",
        description="ERC20 token name (available if not virtual)",
        examples=["Wrapped Ether"],
    )
    erc20_symbol: Optional[str] = Field(
        None,
        alias="erc20Symbol",
        description="ERC20 token symbol (available if not virtual)",
        examples=["WETH"],
    )
    erc20_decimals: Optional[float] = Field(
        None,
        alias="erc20Decimals",
        description="ERC20 token decimals (available if not virtual)",
        examples=[18],
    )
    deposit_enabled: bool = Field(
        ...,
        alias="depositEnabled",
        description="Whether the token is enabled for deposit",
        examples=[True],
    )
    withdraw_enabled: bool = Field(
        ...,
        alias="withdrawEnabled",
        description="Whether the token is enabled for withdraw",
        examples=[True],
    )
    deposit_fee: str = Field(
        ...,
        alias="depositFee",
        description="Amount of native units charged on deposit expressed as a decimal (precision: 9)",
        examples=["0"],
    )
    withdraw_fee: str = Field(
        ...,
        alias="withdrawFee",
        description="Amount of native units charged on withdraw expressed as a decimal (precision: 9)",
        examples=["0.0001"],
    )
    min_deposit: str = Field(
        ...,
        alias="minDeposit",
        description="Min deposit amount as native units expressed as a decimal (precision: 9)",
        examples=["0.1"],
    )
    created_at: float = Field(
        ...,
        alias="createdAt",
        description="Token creation timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class V1TokenGetResponse(BaseModel):
    has_next: bool = Field(
        ...,
        alias="hasNext",
        description="Whether there are more objects to paginate through",
        examples=[True],
    )
    next_cursor: Optional[str] = Field(
        None,
        alias="nextCursor",
        description="Pointer to the next page in pagination dataset",
    )
    data: List[Datum29] = Field(..., description="Array of token objects")


class StatusCode182(Enum):
    number_400 = 400


class Error182(Enum):
    bad_request = "Bad Request"


class V1TokenGetResponse1(BaseModel):
    status_code: StatusCode182 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error182


class StatusCode183(Enum):
    number_401 = 401


class Error183(Enum):
    unauthorized = "Unauthorized"


class V1TokenGetResponse2(BaseModel):
    status_code: StatusCode183 = Field(..., alias="statusCode")
    message: str
    error: Error183


class StatusCode184(Enum):
    number_403 = 403


class Error184(Enum):
    forbidden = "Forbidden"


class V1TokenGetResponse3(BaseModel):
    status_code: StatusCode184 = Field(..., alias="statusCode")
    message: str
    error: Error184


class StatusCode185(Enum):
    number_404 = 404


class Error185(Enum):
    not_found = "Not Found"


class V1TokenGetResponse4(BaseModel):
    status_code: StatusCode185 = Field(..., alias="statusCode")
    message: str
    error: Error185


class StatusCode186(Enum):
    number_422 = 422


class Error186(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1TokenGetResponse5(BaseModel):
    status_code: StatusCode186 = Field(..., alias="statusCode")
    message: str
    error: Error186


class StatusCode187(Enum):
    number_429 = 429


class Error187(Enum):
    too_many_requests = "Too Many Requests"


class V1TokenGetResponse6(BaseModel):
    status_code: StatusCode187 = Field(..., alias="statusCode")
    message: str
    error: Error187


class V1TimeGetResponse(BaseModel):
    time: float = Field(
        ...,
        description="Current system timestamp (ms since Unix Epoch)",
        examples=[1712019600000],
    )


class V1WhitelistGetParametersQuery(BaseModel):
    address: str


class V1WhitelistGetResponse(BaseModel):
    is_whitelisted: bool = Field(
        ..., alias="isWhitelisted", description="Whether the address is whitelisted"
    )


class StatusCode188(Enum):
    number_400 = 400


class Error188(Enum):
    bad_request = "Bad Request"


class V1WhitelistGetResponse1(BaseModel):
    status_code: StatusCode188 = Field(..., alias="statusCode")
    message: Union[str, List[str]] = Field(
        ...,
        description="Validation error message(s). Can be a single string or an array of strings.",
    )
    error: Error188


class StatusCode189(Enum):
    number_401 = 401


class Error189(Enum):
    unauthorized = "Unauthorized"


class V1WhitelistGetResponse2(BaseModel):
    status_code: StatusCode189 = Field(..., alias="statusCode")
    message: str
    error: Error189


class StatusCode190(Enum):
    number_403 = 403


class Error190(Enum):
    forbidden = "Forbidden"


class V1WhitelistGetResponse3(BaseModel):
    status_code: StatusCode190 = Field(..., alias="statusCode")
    message: str
    error: Error190


class StatusCode191(Enum):
    number_404 = 404


class Error191(Enum):
    not_found = "Not Found"


class V1WhitelistGetResponse4(BaseModel):
    status_code: StatusCode191 = Field(..., alias="statusCode")
    message: str
    error: Error191


class StatusCode192(Enum):
    number_422 = 422


class Error192(Enum):
    unprocessable_entity = "Unprocessable Entity"


class V1WhitelistGetResponse5(BaseModel):
    status_code: StatusCode192 = Field(..., alias="statusCode")
    message: str
    error: Error192


class StatusCode193(Enum):
    number_429 = 429


class Error193(Enum):
    too_many_requests = "Too Many Requests"


class V1WhitelistGetResponse6(BaseModel):
    status_code: StatusCode193 = Field(..., alias="statusCode")
    message: str
    error: Error193
