# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class TimeSeriesMeasurement(str, Enum):
    """
    CHOKE - PERCENT (choke opening) WHP - PSIG (wellhead / tubing pressure) WHT - FARENHEIT (wellhead / tubing temperature) CHP - PSIG (casing pressure) DHGP - PSIG (downhole gauge pressure) DHGT - FARENHEIT (downhole gauge temperature) OILRATE - STB_PER_DAY (oil rate) GASRATE - MSCF_PER_DAY (gas rate) GASLIFTINJECTIONRATE - MSCF_PER_DAY (gas lift injection rate) GASLIFTINJECTIONRATESETPOINT - MSCF_PER_DAY ( gas lift injection rate set point) WATERRATE - STB_PER_DAY (water rate) SANDRATE - GRAMS_PER_SECOND (sand rate) PRESSUREUPSTREAM - PSIG (upstream choke pressure) PRESSUREDOWNSTREAM - PSIG (downstream choke pressure) WELLCYCLINGFLAG - unitless (flag indicating the cycling status of the well) FLOWLINETEMPERATURE - degF FLOWLINEPRESSURE - PSIG (flow line pressure) HPSEPARATORPRESSURE - PSIG LPSEPARATORPRESSURE - PSIG
    """

    """
    allowed enum values
    """
    CHOKE = 'CHOKE'
    WHP = 'WHP'
    WHT = 'WHT'
    CHP = 'CHP'
    DHGP = 'DHGP'
    DHGT = 'DHGT'
    OILRATE = 'OILRATE'
    GASRATE = 'GASRATE'
    GASLIFTINJECTIONRATE = 'GASLIFTINJECTIONRATE'
    GASLIFTINJECTIONRATESETPOINT = 'GASLIFTINJECTIONRATESETPOINT'
    WATERRATE = 'WATERRATE'
    SANDRATE = 'SANDRATE'
    CONDRATE = 'CONDRATE'
    SANDIND = 'SANDIND'
    PRESSUREUPSTREAM = 'PRESSUREUPSTREAM'
    PRESSUREDOWNSTREAM = 'PRESSUREDOWNSTREAM'
    WELLCYCLINGFLAG = 'WELLCYCLINGFLAG'
    FLOWLINETEMPERATURE = 'FLOWLINETEMPERATURE'
    FLOWLINEPRESSURE = 'FLOWLINEPRESSURE'
    HPSEPARATORPRESSURE = 'HPSEPARATORPRESSURE'
    LPSEPARATORPRESSURE = 'LPSEPARATORPRESSURE'
    ESP_VSD_HEAT_SINK_TEMP = 'ESP_VSD_HEAT_SINK_TEMP'
    ESP_VSD_BUS_VOLTAGE = 'ESP_VSD_BUS_VOLTAGE'
    ESP_VSD_CURRENT = 'ESP_VSD_CURRENT'
    ESP_VSD_VOLTAGE = 'ESP_VSD_VOLTAGE'
    ESP_MOTOR_CURRENT = 'ESP_MOTOR_CURRENT'
    ESP_MOTOR_FREQUENCY = 'ESP_MOTOR_FREQUENCY'
    ESP_MOTOR_TEMPERATURE = 'ESP_MOTOR_TEMPERATURE'
    ESP_MOTOR_VOLTAGE = 'ESP_MOTOR_VOLTAGE'
    ESP_INTAKE_PRESSURE = 'ESP_INTAKE_PRESSURE'
    ESP_DISCHARGE_PRESSURE = 'ESP_DISCHARGE_PRESSURE'
    ESP_FLUID_TEMPERATURE = 'ESP_FLUID_TEMPERATURE'
    ESP_RUNTIME = 'ESP_RUNTIME'
    ESP_VIBRATION_X = 'ESP_VIBRATION_X'
    ESP_VIBRATION_Y = 'ESP_VIBRATION_Y'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TimeSeriesMeasurement from a JSON string"""
        return cls(json.loads(json_str))


