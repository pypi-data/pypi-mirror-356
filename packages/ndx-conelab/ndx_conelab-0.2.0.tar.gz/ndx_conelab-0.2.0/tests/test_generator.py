import importlib
import json
from pathlib import Path

import pytest

import ndx_conelab
from ndx_conelab.generator import generate_extension


def _reload_package(pkg_name: str):
    """Utility to reload a package and all its sub-modules (best-effort)."""
    import sys
    to_del = [m for m in sys.modules if m == pkg_name or m.startswith(pkg_name + ".")]
    for m in to_del:
        del sys.modules[m]
    return importlib.import_module(pkg_name)


@pytest.mark.parametrize(
    "task_name",
    [
        "UnitTestTaskParameters",
    ],
)
def test_generate_extension_roundtrip(tmp_path: Path, task_name: str):
    """End-to-end: generate extension → reload → get_class works."""

    spec = {
        "task_name": task_name,
        "description": "Task auto-generated by test suite",
        "fields": [
            {"name": "foo_ms", "type": "int", "doc": "Foo window (ms)"},
            {"name": "bar_pct", "type": "float", "doc": "Bar (%)"},
        ],
    }
    spec_json = tmp_path / "spec.json"
    spec_json.write_text(json.dumps(spec))

    # Act – generate extension
    dest_yaml = generate_extension(spec_json)
    assert dest_yaml.exists(), "Extension YAML was not created"

    # Simulate a fresh import environment to ensure registration works without
    # relying on artefacts from previous imports.
    mod = _reload_package("ndx_conelab")

    # Assert – PyNWB can now resolve the new neurodata_type
    from pynwb import get_class

    cls = get_class(task_name, "conelab")
    assert cls is not None, "PyNWB failed to resolve the newly generated type"

    # Additionally, ensure the class is exposed via the package namespace
    assert hasattr(mod, task_name) 