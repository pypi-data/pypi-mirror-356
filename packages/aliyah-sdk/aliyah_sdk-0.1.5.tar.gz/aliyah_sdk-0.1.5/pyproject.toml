[build-system]
# Use setuptools for building
# These are the minimum packages required to build the distribution files
requires = ["setuptools>=61.0", "build", "twine"]
build-backend = "setuptools.build_meta"

[project]
name = "aliyah-sdk"
version = "0.1.5" 

authors = [
    { name="Mensterra", email="support@mensterra.com" },
]
description = "Aaliyah SDK for connecting AI agents to the Mensterra platform for compliance checking and monitoring."
readme = "README.md" # Ensure you have a README.md file
requires-python = ">=3.10" 
license = { file="LICENSE" }
keywords = ["ai", "agent", "monitoring", "compliance", "governance", "opentelemetry"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License", # Updated classifier for Apache 2.0
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
]

dependencies = [
    # Core SDK Dependencies
    "requests",
    "wrapt",
    "psutil",
    "termcolor",

    # Core OpenTelemetry Dependencies
    "opentelemetry-api>=1.33.0,<1.34.0",
    "opentelemetry-sdk>=1.33.0,<1.34.0",
    "opentelemetry-instrumentation>=0.54b0,<0.55b0",
    "opentelemetry-semantic-conventions>=0.54b0,<0.55b0",

    # OpenTelemetry OTLP HTTP Exporter Dependencies
    "opentelemetry-exporter-otlp-proto-http>=1.33.0,<1.34.0",

    # OpenTelemetry Instrumentations for LLM Providers
    "opentelemetry-instrumentation-openai",
    "opentelemetry-instrumentation-anthropic",
    "opentelemetry-instrumentation-google-generativeai",

    # General Purpose Libraries
    "pydantic",
    "typing-extensions",
    "python-dotenv",
    "PyYAML",

    # Dependencies for Specific Instrumentations
    "openai",
    "anthropic",
    "google-generativeai",
    "karo",
    "openpyxl",
    "pandas",

    # Other dependencies
    "jsonpatch",
    "jsonpointer",
    "jsonschema",
    "referencing",
    "rpds-py",
    "websocket-client",
    "websockets",
    "watchfiles",
]

# Optional dependencies for advanced features
[project.optional-dependencies]
# All LLM instrumentations (for users who want everything)
all-llm = [
    "opentelemetry-instrumentation-openai",
    "opentelemetry-instrumentation-anthropic", 
    "opentelemetry-instrumentation-google-generativeai",
    "opentelemetry-instrumentation-bedrock",
    "opentelemetry-instrumentation-cohere",
    "opentelemetry-instrumentation-langchain",
    "opentelemetry-instrumentation-llamaindex",
]

# Individual provider options
openai = ["opentelemetry-instrumentation-openai"]
anthropic = ["opentelemetry-instrumentation-anthropic"]
google = ["opentelemetry-instrumentation-google-generativeai"]
aws = ["opentelemetry-instrumentation-bedrock"]
cohere = ["opentelemetry-instrumentation-cohere"]

# Framework instrumentations
frameworks = [
    "opentelemetry-instrumentation-langchain",
    "opentelemetry-instrumentation-llamaindex",
]

# Development dependencies
dev = [
    "pytest",
    "pytest-cov",
    "black",
    "isort",
    "mypy",
    "pre-commit",
]

[tool.setuptools]
[tool.setuptools.packages.find]
where = ["."]
include = ["aliyah_sdk*"]

# We are using a static version for now, so this dynamic lookup is commented out.
# To use dynamic version later, uncomment this section and ensure aliyah_sdk/__version__.py exists.
[tool.setuptools.dynamic]
version = {attr = "aliyah_sdk.__version__.__version__"}