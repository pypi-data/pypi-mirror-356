Metadata-Version: 2.4
Name: aliyah-sdk
Version: 0.1.5
Summary: Aaliyah SDK for connecting AI agents to the Mensterra platform for compliance checking and monitoring.
Author-email: Mensterra <support@mensterra.com>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              copyright and other proprietary rights are owned or controlled by
              You. For the purposes of this definition, "Derivative Works" shall
              not include works that remain separable from, or merely link (or
              bind by name) to the interfaces of, the Work and Derivative Works
              thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "Submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean any individual or Legal Entity on behalf
              of whom a Contribution has been received by Licensor and subsequently
              accepted by Licensor.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensed by
              such Contributor that are necessarily infringed by their Contribution(s)
              alone or by combination of their Contribution(s) with the Work to which
              such Contribution(s) was Submitted. If You institute patent litigation
              against any entity (including a cross-claim or counterclaim in a lawsuit)
              alleging that the Work or a Contribution incorporated within the Work
              constitutes direct or contributory patent infringement, then any patent
              licenses granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You give any other recipients of the Work or Derivative Works,
                  a copy of this License; and
        
              (b) You cause any modified files to carry prominent notices stating
                  that You changed the files; and
        
              (c) You retain, in the Source form of any Derivative Works that You
                  distribute, all copyright, patent, trademark, and attribution
                  notices from the Source form of the Work, excluding those notices
                  that do not pertain to any part of the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and do
                  not modify the License. You may add Your own attribution notices
                  within Derivative Works that You distribute, alongside, or as
                  an addendum to, the NOTICE text from the Work, provided that
                  such additional attribution notices cannot be construed as
                  modifying the License.
        
              You may add Your own copyright statement to Your Derivative Works and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your Derivative Works, or
              for any such Modifications to the Work, provided Your use, reproduction,
              and distribution of the Work otherwise complies with the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary usage in describing the origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include the
              brackets!) The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [2025] [Mensterra]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
Keywords: ai,agent,monitoring,compliance,governance,opentelemetry
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Monitoring
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests
Requires-Dist: wrapt
Requires-Dist: psutil
Requires-Dist: termcolor
Requires-Dist: opentelemetry-api<1.34.0,>=1.33.0
Requires-Dist: opentelemetry-sdk<1.34.0,>=1.33.0
Requires-Dist: opentelemetry-instrumentation<0.55b0,>=0.54b0
Requires-Dist: opentelemetry-semantic-conventions<0.55b0,>=0.54b0
Requires-Dist: opentelemetry-exporter-otlp-proto-http<1.34.0,>=1.33.0
Requires-Dist: opentelemetry-instrumentation-openai
Requires-Dist: opentelemetry-instrumentation-anthropic
Requires-Dist: opentelemetry-instrumentation-google-generativeai
Requires-Dist: pydantic
Requires-Dist: typing-extensions
Requires-Dist: python-dotenv
Requires-Dist: PyYAML
Requires-Dist: openai
Requires-Dist: anthropic
Requires-Dist: google-generativeai
Requires-Dist: karo
Requires-Dist: openpyxl
Requires-Dist: pandas
Requires-Dist: jsonpatch
Requires-Dist: jsonpointer
Requires-Dist: jsonschema
Requires-Dist: referencing
Requires-Dist: rpds-py
Requires-Dist: websocket-client
Requires-Dist: websockets
Requires-Dist: watchfiles
Provides-Extra: all-llm
Requires-Dist: opentelemetry-instrumentation-openai; extra == "all-llm"
Requires-Dist: opentelemetry-instrumentation-anthropic; extra == "all-llm"
Requires-Dist: opentelemetry-instrumentation-google-generativeai; extra == "all-llm"
Requires-Dist: opentelemetry-instrumentation-bedrock; extra == "all-llm"
Requires-Dist: opentelemetry-instrumentation-cohere; extra == "all-llm"
Requires-Dist: opentelemetry-instrumentation-langchain; extra == "all-llm"
Requires-Dist: opentelemetry-instrumentation-llamaindex; extra == "all-llm"
Provides-Extra: openai
Requires-Dist: opentelemetry-instrumentation-openai; extra == "openai"
Provides-Extra: anthropic
Requires-Dist: opentelemetry-instrumentation-anthropic; extra == "anthropic"
Provides-Extra: google
Requires-Dist: opentelemetry-instrumentation-google-generativeai; extra == "google"
Provides-Extra: aws
Requires-Dist: opentelemetry-instrumentation-bedrock; extra == "aws"
Provides-Extra: cohere
Requires-Dist: opentelemetry-instrumentation-cohere; extra == "cohere"
Provides-Extra: frameworks
Requires-Dist: opentelemetry-instrumentation-langchain; extra == "frameworks"
Requires-Dist: opentelemetry-instrumentation-llamaindex; extra == "frameworks"
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"
Dynamic: license-file

# Aliyah SDK

Aaliyah SDK provides comprehensive AI agent management, compliance monitoring, and observability. Track LLM calls, manage agent sessions, and ensure compliance with automatic instrumentation and manual event tracking.

## Installation

```bash
pip install aliyah-sdk
```

## Quick Start

### 1. Environment Configuration

Create a `.env` file in your project root:

```bash
# Required - Get from Mensterra dashboard
ALIYAH_API_KEY=your_aliyah_api_key

# Agent Configuration
AGENT_ID=1                    # Your agent's unique ID from app.mensterra.com
AGENT_NAME=my_support_agent   # Descriptive name for your agent
```

### 1. Basic Setup

```python
import aliyah_sdk


# Initialize the SDK
aliyah_sdk.init(
    auto_start_session=False,
    instrument_llm_calls=True,  # Enable automatic LLM instrumentation
    agent_id=12345,  # Your agent ID from the Aliyah dashboard
    agent_name="my_ai_agent"
)
```

### 3. Basic Agent with Automatic LLM Tracking

```python
import os
from dotenv import load_dotenv
import aliyah_sdk
from openai import OpenAI

# Load environment variables
load_dotenv()

# Initialize Aaliyah SDK - this enables automatic LLM call tracking
aliyah_sdk.init(
    auto_start_session=True,     # Automatically manage sessions
    instrument_llm_calls=True,   # Track all OpenAI/LLM calls automatically
    agent_id=int(os.getenv("AGENT_ID", 1)),
    agent_name=os.getenv("AGENT_NAME", "my_agent")
)

def simple_agent():
    """Basic agent with automatic tracking"""
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    
    # This LLM call is automatically tracked by Aaliyah
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": "What's the weather like?"}]
    )
    
    return response.choices[0].message.content

if __name__ == "__main__":
    result = simple_agent()
    print(f"Agent response: {result}")
```

### 4. Manual Session Management

Sessions help you group related AI interactions and trace them as a single workflow:

```python
# Start a session
session = aliyah_sdk.start_session(
    tags=["chatbot", "customer_support", "production"]
)

# Your AI application logic here...

# End the session
aliyah_sdk.end_session(
    session, 
    end_state="Completed", 
    end_state_reason="User query resolved successfully"
)
```

## Advanced Usage

### Manual Session Management

For production agents that need precise control over session lifecycle:

```python
import os
from dotenv import load_dotenv
import aliyah_sdk
from openai import OpenAI
import time

load_dotenv()

# Initialize without auto-session for manual control
aaliyah_sdk.init(
    auto_start_session=False,    # We'll manage sessions manually
    instrument_llm_calls=True,   # Still auto-track LLM calls
    agent_id=int(os.getenv("AGENT_ID", 1)),
    agent_name=os.getenv("AGENT_NAME", "advanced_agent")
)

def advanced_agent_with_session():
    """Agent with manual session management and custom events"""
    
    # Start a session with custom tags and metadata
    session = aaliyah_sdk.start_session(
        tags=["customer_support", "production"],
        metadata={
            "customer_id": "12345",
            "priority": "high",
            "channel": "chat"
        }
    )
    
    try:
        client = OpenAI()
        
        # Record custom business event
        aaliyah_sdk.record(aaliyah_sdk.BusinessEvent(
            event_type="customer_inquiry_started",
            details="Customer asking about order status",
            metadata={"order_id": "ORD-789"}
        ))
        
        # LLM call - automatically tracked
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a helpful customer support agent."},
                {"role": "user", "content": "Where is my order #ORD-789?"}
            ]
        )
        
        answer = response.choices[0].message.content
        
        # Record successful resolution
        aaliyah_sdk.record(aaliyah_sdk.BusinessEvent(
            event_type="inquiry_resolved",
            details="Successfully provided order status",
            metadata={"resolution_time_ms": 1500}
        ))
        
        return answer
        
    except Exception as e:
        # Record error for debugging and compliance
        aaliyah_sdk.record(aaliyah_sdk.ErrorEvent(
            error_type=type(e).__name__,
            details=str(e),
            logs="Failed to process customer inquiry"
        ))
        raise
        
    finally:
        # Always end the session with proper state
        aaliyah_sdk.end_session(
            session, 
            end_state="completed",
            end_state_reason="Customer inquiry processed successfully"
        )

if __name__ == "__main__":
    result = advanced_agent_with_session()
    print(f"Agent response: {result}")
```



## Integration Examples

### With OpenAI

```python
import aliyah_sdk
import openai

# Initialize Aliyah
aliyah_sdk.init(
    instrument_llm_calls=True,
    agent_id=12345,
    agent_name="openai_chatbot"
)

# Start session
session = aliyah_sdk.start_session(tags=["chatbot"])

try:
    # This call is automatically traced
    response = openai.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": "Hello!"}]
    )
    print(response.choices[0].message.content)
    
finally:
    aliyah_sdk.end_session(session, end_state="Completed")
```

### With Custom AI Frameworks

The SDK automatically instruments most popular LLM providers. For custom frameworks, manual instrumentation may be needed.

## Event Types Reference

### Automatic Events
- **LLM Calls**: Automatically tracked when `instrument_llm_calls=True`
- **Session Start/End**: Automatically managed when `auto_start_session=True`

### Manual Events


#### Tool Events
```python
aaliyah_sdk.record(aaliyah_sdk.ToolEvent(
    tool_name="database",
    action="query",
    input_data={"table": "customers", "filter": "active=true"},
    output_data={"row_count": 150}
))
```

#### Error Events
```python
aaliyah_sdk.record(aaliyah_sdk.ErrorEvent(
    error_type="ValidationError",
    details="Invalid customer email format",
    severity="medium",
    logs="Email validation failed: invalid@domain"
))
```

## Best Practices

### 1. Session Management
- Use `auto_start_session=True` for simple agents
- Use manual sessions for complex workflows that need precise control
- Always include relevant tags and metadata in sessions

### 2. Error Handling
- Wrap agent logic in try/catch blocks
- Record errors with appropriate severity levels
- Include debugging information in error metadata

### 3. Performance
- Sessions automatically batch and send events efficiently
- Use `end_session()` to ensure all data is flushed
- Consider using manual sessions for long-running agents

## Troubleshooting

### Common Issues

**SDK Not Initializing**
```python
# Check if client is properly initialized
client = aliyah_sdk.get_client()
if client and client.initialized:
    print("✓ SDK initialized successfully")
else:
    print("✗ SDK initialization failed")
```

**Traces Not Appearing**
- Verify your agent ID exists in the dashboard
- Check network connectivity
- Ensure API key is set correctly
- Try force flushing traces

**Session Management Issues**
- Always call `end_session()` in a finally block
- Check session object is valid before ending
- Use appropriate end states and reasons

### Debug Mode

Enable verbose logging for troubleshooting:

```python
import logging
logging.basicConfig(level=logging.DEBUG)

# Your Aliyah SDK code here
```

## Configuration Options

### SDK Initialization
```python
aliyah_sdk.init(
    auto_start_session=True,      # Auto-manage sessions (default: True)
    instrument_llm_calls=True,    # Auto-track LLM calls (default: True)
    agent_id=1,                   # Your agent's unique ID
    agent_name="my_agent",        # Descriptive agent name
    api_key="your_key",          # Aliyah API key (or use env var)
)
```

## Monitoring and Dashboards

After instrumenting your agent:

1. **View in Mensterra Dashboard**: Monitor agent performance, compliance, and errors
2. **Session Traces**: See detailed traces of each agent session
3. **Compliance Reports**: Generate compliance reports for audits
4. **Performance Metrics**: Track LLM usage, response times, and error rates
5. **Alerts**: Set up alerts for compliance violations or errors

## Need Help?

- 📖 **Documentation**: [Full API docs](https://docs.mensterra.com)
- 💬 **Support**: [Contact support](mailto:support@mensterra.com)


## License

Apache 2.0

Happy tracing! 🚀
