# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ..types.inbox_id import InboxId
from ...types.limit import Limit
from ...types.page_token import PageToken
from ...types.labels import Labels
from ...types.ascending import Ascending
from ...core.request_options import RequestOptions
from ...messages.types.list_messages_response import ListMessagesResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.unchecked_base_model import construct_type
from ...errors.not_found_error import NotFoundError
from ...types.error_response import ErrorResponse
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...messages.types.message_id import MessageId
from ...messages.types.message import Message
from ...attachments.types.attachment_id import AttachmentId
from ...messages.types.message_labels import MessageLabels
from ...messages.types.send_message_reply_to import SendMessageReplyTo
from ...messages.types.send_message_to import SendMessageTo
from ...messages.types.send_message_cc import SendMessageCc
from ...messages.types.send_message_bcc import SendMessageBcc
from ...messages.types.message_subject import MessageSubject
from ...messages.types.message_text import MessageText
from ...messages.types.message_html import MessageHtml
from ...messages.types.send_message_attachments import SendMessageAttachments
from ...messages.types.send_message_response import SendMessageResponse
from ...core.serialization import convert_and_respect_annotation_metadata
from ...errors.validation_error import ValidationError
from ...types.validation_error_response import ValidationErrorResponse
from ...messages.errors.message_rejected_error import MessageRejectedError
from ...core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MessagesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        inbox_id: InboxId,
        *,
        limit: typing.Optional[Limit] = None,
        page_token: typing.Optional[PageToken] = None,
        labels: typing.Optional[Labels] = None,
        ascending: typing.Optional[Ascending] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListMessagesResponse:
        """
        Parameters
        ----------
        inbox_id : InboxId

        limit : typing.Optional[Limit]

        page_token : typing.Optional[PageToken]

        labels : typing.Optional[Labels]

        ascending : typing.Optional[Ascending]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListMessagesResponse

        Examples
        --------
        from agentmail import AgentMail

        client = AgentMail(
            api_key="YOUR_API_KEY",
        )
        client.inboxes.messages.list(
            inbox_id="inbox_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/inboxes/{jsonable_encoder(inbox_id)}/messages",
            method="GET",
            params={
                "limit": limit,
                "page_token": page_token,
                "labels": labels,
                "ascending": ascending,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListMessagesResponse,
                    construct_type(
                        type_=ListMessagesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self,
        inbox_id: InboxId,
        message_id: MessageId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Message:
        """
        Parameters
        ----------
        inbox_id : InboxId

        message_id : MessageId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Message

        Examples
        --------
        from agentmail import AgentMail

        client = AgentMail(
            api_key="YOUR_API_KEY",
        )
        client.inboxes.messages.get(
            inbox_id="inbox_id",
            message_id="message_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/inboxes/{jsonable_encoder(inbox_id)}/messages/{jsonable_encoder(message_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Message,
                    construct_type(
                        type_=Message,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_attachment(
        self,
        inbox_id: InboxId,
        message_id: MessageId,
        attachment_id: AttachmentId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[bytes]:
        """
        Parameters
        ----------
        inbox_id : InboxId

        message_id : MessageId

        attachment_id : AttachmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Yields
        ------
        typing.Iterator[bytes]
        """
        with self._client_wrapper.httpx_client.stream(
            f"v0/inboxes/{jsonable_encoder(inbox_id)}/messages/{jsonable_encoder(message_id)}/attachments/{jsonable_encoder(attachment_id)}",
            method="GET",
            request_options=request_options,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _chunk_size = request_options.get("chunk_size", None) if request_options is not None else None
                    for _chunk in _response.iter_bytes(chunk_size=_chunk_size):
                        yield _chunk
                    return
                _response.read()
                if _response.status_code == 404:
                    raise NotFoundError(
                        typing.cast(
                            ErrorResponse,
                            construct_type(
                                type_=ErrorResponse,  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    def send(
        self,
        inbox_id: InboxId,
        *,
        labels: typing.Optional[MessageLabels] = OMIT,
        reply_to: typing.Optional[SendMessageReplyTo] = OMIT,
        to: typing.Optional[SendMessageTo] = OMIT,
        cc: typing.Optional[SendMessageCc] = OMIT,
        bcc: typing.Optional[SendMessageBcc] = OMIT,
        subject: typing.Optional[MessageSubject] = OMIT,
        text: typing.Optional[MessageText] = OMIT,
        html: typing.Optional[MessageHtml] = OMIT,
        attachments: typing.Optional[SendMessageAttachments] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendMessageResponse:
        """
        Parameters
        ----------
        inbox_id : InboxId

        labels : typing.Optional[MessageLabels]

        reply_to : typing.Optional[SendMessageReplyTo]

        to : typing.Optional[SendMessageTo]

        cc : typing.Optional[SendMessageCc]

        bcc : typing.Optional[SendMessageBcc]

        subject : typing.Optional[MessageSubject]

        text : typing.Optional[MessageText]

        html : typing.Optional[MessageHtml]

        attachments : typing.Optional[SendMessageAttachments]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageResponse

        Examples
        --------
        from agentmail import AgentMail

        client = AgentMail(
            api_key="YOUR_API_KEY",
        )
        client.inboxes.messages.send(
            inbox_id="inbox_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/inboxes/{jsonable_encoder(inbox_id)}/messages/send",
            method="POST",
            json={
                "labels": labels,
                "reply_to": convert_and_respect_annotation_metadata(
                    object_=reply_to, annotation=SendMessageReplyTo, direction="write"
                ),
                "to": convert_and_respect_annotation_metadata(object_=to, annotation=SendMessageTo, direction="write"),
                "cc": convert_and_respect_annotation_metadata(object_=cc, annotation=SendMessageCc, direction="write"),
                "bcc": convert_and_respect_annotation_metadata(
                    object_=bcc, annotation=SendMessageBcc, direction="write"
                ),
                "subject": subject,
                "text": text,
                "html": html,
                "attachments": convert_and_respect_annotation_metadata(
                    object_=attachments,
                    annotation=SendMessageAttachments,
                    direction="write",
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SendMessageResponse,
                    construct_type(
                        type_=SendMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise ValidationError(
                    typing.cast(
                        ValidationErrorResponse,
                        construct_type(
                            type_=ValidationErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise MessageRejectedError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def reply(
        self,
        inbox_id: InboxId,
        message_id: MessageId,
        *,
        labels: typing.Optional[MessageLabels] = OMIT,
        reply_to: typing.Optional[SendMessageReplyTo] = OMIT,
        to: typing.Optional[SendMessageTo] = OMIT,
        cc: typing.Optional[SendMessageCc] = OMIT,
        bcc: typing.Optional[SendMessageBcc] = OMIT,
        text: typing.Optional[MessageText] = OMIT,
        html: typing.Optional[MessageHtml] = OMIT,
        attachments: typing.Optional[SendMessageAttachments] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendMessageResponse:
        """
        Parameters
        ----------
        inbox_id : InboxId

        message_id : MessageId

        labels : typing.Optional[MessageLabels]

        reply_to : typing.Optional[SendMessageReplyTo]

        to : typing.Optional[SendMessageTo]

        cc : typing.Optional[SendMessageCc]

        bcc : typing.Optional[SendMessageBcc]

        text : typing.Optional[MessageText]

        html : typing.Optional[MessageHtml]

        attachments : typing.Optional[SendMessageAttachments]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageResponse

        Examples
        --------
        from agentmail import AgentMail

        client = AgentMail(
            api_key="YOUR_API_KEY",
        )
        client.inboxes.messages.reply(
            inbox_id="inbox_id",
            message_id="message_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/inboxes/{jsonable_encoder(inbox_id)}/messages/{jsonable_encoder(message_id)}/reply",
            method="POST",
            json={
                "labels": labels,
                "reply_to": convert_and_respect_annotation_metadata(
                    object_=reply_to, annotation=SendMessageReplyTo, direction="write"
                ),
                "to": convert_and_respect_annotation_metadata(object_=to, annotation=SendMessageTo, direction="write"),
                "cc": convert_and_respect_annotation_metadata(object_=cc, annotation=SendMessageCc, direction="write"),
                "bcc": convert_and_respect_annotation_metadata(
                    object_=bcc, annotation=SendMessageBcc, direction="write"
                ),
                "text": text,
                "html": html,
                "attachments": convert_and_respect_annotation_metadata(
                    object_=attachments,
                    annotation=SendMessageAttachments,
                    direction="write",
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SendMessageResponse,
                    construct_type(
                        type_=SendMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise ValidationError(
                    typing.cast(
                        ValidationErrorResponse,
                        construct_type(
                            type_=ValidationErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise MessageRejectedError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        inbox_id: InboxId,
        message_id: MessageId,
        *,
        add_labels: typing.Optional[typing.Sequence[str]] = OMIT,
        remove_labels: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Message:
        """
        Parameters
        ----------
        inbox_id : InboxId

        message_id : MessageId

        add_labels : typing.Optional[typing.Sequence[str]]
            Labels to add to message.

        remove_labels : typing.Optional[typing.Sequence[str]]
            Labels to remove from message.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Message

        Examples
        --------
        from agentmail import AgentMail

        client = AgentMail(
            api_key="YOUR_API_KEY",
        )
        client.inboxes.messages.update(
            inbox_id="inbox_id",
            message_id="message_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/inboxes/{jsonable_encoder(inbox_id)}/messages/{jsonable_encoder(message_id)}",
            method="PATCH",
            json={
                "add_labels": add_labels,
                "remove_labels": remove_labels,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Message,
                    construct_type(
                        type_=Message,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise ValidationError(
                    typing.cast(
                        ValidationErrorResponse,
                        construct_type(
                            type_=ValidationErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncMessagesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        inbox_id: InboxId,
        *,
        limit: typing.Optional[Limit] = None,
        page_token: typing.Optional[PageToken] = None,
        labels: typing.Optional[Labels] = None,
        ascending: typing.Optional[Ascending] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListMessagesResponse:
        """
        Parameters
        ----------
        inbox_id : InboxId

        limit : typing.Optional[Limit]

        page_token : typing.Optional[PageToken]

        labels : typing.Optional[Labels]

        ascending : typing.Optional[Ascending]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListMessagesResponse

        Examples
        --------
        import asyncio

        from agentmail import AsyncAgentMail

        client = AsyncAgentMail(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.inboxes.messages.list(
                inbox_id="inbox_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/inboxes/{jsonable_encoder(inbox_id)}/messages",
            method="GET",
            params={
                "limit": limit,
                "page_token": page_token,
                "labels": labels,
                "ascending": ascending,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListMessagesResponse,
                    construct_type(
                        type_=ListMessagesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self,
        inbox_id: InboxId,
        message_id: MessageId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Message:
        """
        Parameters
        ----------
        inbox_id : InboxId

        message_id : MessageId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Message

        Examples
        --------
        import asyncio

        from agentmail import AsyncAgentMail

        client = AsyncAgentMail(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.inboxes.messages.get(
                inbox_id="inbox_id",
                message_id="message_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/inboxes/{jsonable_encoder(inbox_id)}/messages/{jsonable_encoder(message_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Message,
                    construct_type(
                        type_=Message,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_attachment(
        self,
        inbox_id: InboxId,
        message_id: MessageId,
        attachment_id: AttachmentId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[bytes]:
        """
        Parameters
        ----------
        inbox_id : InboxId

        message_id : MessageId

        attachment_id : AttachmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Yields
        ------
        typing.AsyncIterator[bytes]
        """
        async with self._client_wrapper.httpx_client.stream(
            f"v0/inboxes/{jsonable_encoder(inbox_id)}/messages/{jsonable_encoder(message_id)}/attachments/{jsonable_encoder(attachment_id)}",
            method="GET",
            request_options=request_options,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _chunk_size = request_options.get("chunk_size", None) if request_options is not None else None
                    async for _chunk in _response.aiter_bytes(chunk_size=_chunk_size):
                        yield _chunk
                    return
                await _response.aread()
                if _response.status_code == 404:
                    raise NotFoundError(
                        typing.cast(
                            ErrorResponse,
                            construct_type(
                                type_=ErrorResponse,  # type: ignore
                                object_=_response.json(),
                            ),
                        )
                    )
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send(
        self,
        inbox_id: InboxId,
        *,
        labels: typing.Optional[MessageLabels] = OMIT,
        reply_to: typing.Optional[SendMessageReplyTo] = OMIT,
        to: typing.Optional[SendMessageTo] = OMIT,
        cc: typing.Optional[SendMessageCc] = OMIT,
        bcc: typing.Optional[SendMessageBcc] = OMIT,
        subject: typing.Optional[MessageSubject] = OMIT,
        text: typing.Optional[MessageText] = OMIT,
        html: typing.Optional[MessageHtml] = OMIT,
        attachments: typing.Optional[SendMessageAttachments] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendMessageResponse:
        """
        Parameters
        ----------
        inbox_id : InboxId

        labels : typing.Optional[MessageLabels]

        reply_to : typing.Optional[SendMessageReplyTo]

        to : typing.Optional[SendMessageTo]

        cc : typing.Optional[SendMessageCc]

        bcc : typing.Optional[SendMessageBcc]

        subject : typing.Optional[MessageSubject]

        text : typing.Optional[MessageText]

        html : typing.Optional[MessageHtml]

        attachments : typing.Optional[SendMessageAttachments]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageResponse

        Examples
        --------
        import asyncio

        from agentmail import AsyncAgentMail

        client = AsyncAgentMail(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.inboxes.messages.send(
                inbox_id="inbox_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/inboxes/{jsonable_encoder(inbox_id)}/messages/send",
            method="POST",
            json={
                "labels": labels,
                "reply_to": convert_and_respect_annotation_metadata(
                    object_=reply_to, annotation=SendMessageReplyTo, direction="write"
                ),
                "to": convert_and_respect_annotation_metadata(object_=to, annotation=SendMessageTo, direction="write"),
                "cc": convert_and_respect_annotation_metadata(object_=cc, annotation=SendMessageCc, direction="write"),
                "bcc": convert_and_respect_annotation_metadata(
                    object_=bcc, annotation=SendMessageBcc, direction="write"
                ),
                "subject": subject,
                "text": text,
                "html": html,
                "attachments": convert_and_respect_annotation_metadata(
                    object_=attachments,
                    annotation=SendMessageAttachments,
                    direction="write",
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SendMessageResponse,
                    construct_type(
                        type_=SendMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise ValidationError(
                    typing.cast(
                        ValidationErrorResponse,
                        construct_type(
                            type_=ValidationErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise MessageRejectedError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def reply(
        self,
        inbox_id: InboxId,
        message_id: MessageId,
        *,
        labels: typing.Optional[MessageLabels] = OMIT,
        reply_to: typing.Optional[SendMessageReplyTo] = OMIT,
        to: typing.Optional[SendMessageTo] = OMIT,
        cc: typing.Optional[SendMessageCc] = OMIT,
        bcc: typing.Optional[SendMessageBcc] = OMIT,
        text: typing.Optional[MessageText] = OMIT,
        html: typing.Optional[MessageHtml] = OMIT,
        attachments: typing.Optional[SendMessageAttachments] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendMessageResponse:
        """
        Parameters
        ----------
        inbox_id : InboxId

        message_id : MessageId

        labels : typing.Optional[MessageLabels]

        reply_to : typing.Optional[SendMessageReplyTo]

        to : typing.Optional[SendMessageTo]

        cc : typing.Optional[SendMessageCc]

        bcc : typing.Optional[SendMessageBcc]

        text : typing.Optional[MessageText]

        html : typing.Optional[MessageHtml]

        attachments : typing.Optional[SendMessageAttachments]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageResponse

        Examples
        --------
        import asyncio

        from agentmail import AsyncAgentMail

        client = AsyncAgentMail(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.inboxes.messages.reply(
                inbox_id="inbox_id",
                message_id="message_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/inboxes/{jsonable_encoder(inbox_id)}/messages/{jsonable_encoder(message_id)}/reply",
            method="POST",
            json={
                "labels": labels,
                "reply_to": convert_and_respect_annotation_metadata(
                    object_=reply_to, annotation=SendMessageReplyTo, direction="write"
                ),
                "to": convert_and_respect_annotation_metadata(object_=to, annotation=SendMessageTo, direction="write"),
                "cc": convert_and_respect_annotation_metadata(object_=cc, annotation=SendMessageCc, direction="write"),
                "bcc": convert_and_respect_annotation_metadata(
                    object_=bcc, annotation=SendMessageBcc, direction="write"
                ),
                "text": text,
                "html": html,
                "attachments": convert_and_respect_annotation_metadata(
                    object_=attachments,
                    annotation=SendMessageAttachments,
                    direction="write",
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SendMessageResponse,
                    construct_type(
                        type_=SendMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise ValidationError(
                    typing.cast(
                        ValidationErrorResponse,
                        construct_type(
                            type_=ValidationErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise MessageRejectedError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        inbox_id: InboxId,
        message_id: MessageId,
        *,
        add_labels: typing.Optional[typing.Sequence[str]] = OMIT,
        remove_labels: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Message:
        """
        Parameters
        ----------
        inbox_id : InboxId

        message_id : MessageId

        add_labels : typing.Optional[typing.Sequence[str]]
            Labels to add to message.

        remove_labels : typing.Optional[typing.Sequence[str]]
            Labels to remove from message.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Message

        Examples
        --------
        import asyncio

        from agentmail import AsyncAgentMail

        client = AsyncAgentMail(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.inboxes.messages.update(
                inbox_id="inbox_id",
                message_id="message_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/inboxes/{jsonable_encoder(inbox_id)}/messages/{jsonable_encoder(message_id)}",
            method="PATCH",
            json={
                "add_labels": add_labels,
                "remove_labels": remove_labels,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Message,
                    construct_type(
                        type_=Message,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise ValidationError(
                    typing.cast(
                        ValidationErrorResponse,
                        construct_type(
                            type_=ValidationErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        ErrorResponse,
                        construct_type(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
