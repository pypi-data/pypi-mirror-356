[project]
name = "pygments-sb-nrql"
version = "0.7.0"
description = "New Relic SDK to interact with Nerdgraph API."
authors = [
  { name = "Dynova Development Team", email = "dev@dynova.io" },
  { name = "zodiacfireworks", email = "martin.vuelta@gmail.com" }
]
maintainers = [
  { name = "zodiacfireworks", email = "martin.vuelta@gmail.com" }
]
readme = { file = "README.md", content-type = "text/markdown" }
license = "MIT License"
license-files = ["LICENSE.txt"]
keywords = [
  "Softbutterfly",
  "New Relic",
  "SDK",
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.9",
  "Topic :: Documentation",
  "Topic :: Software Development :: Documentation",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development",
  "Topic :: System",
  "Topic :: Text Processing :: Markup",
  "Topic :: Utilities",
]
requires-python = ">=3.9.0,<4.0.0"
dependencies = [
    "pygments (>=2.19.1,<3.0.0)"
]

[project.urls]
Homepage = "https://github.com/dynovaio/newrelic-sb-nrql-pygments"
Repository = "https://github.com/dynovaio/newrelic-sb-nrql-pygments"
Documentation = "https://dynovaio.github.io/newrelic-sb-nrql-pygments"
Issues = "https://github.com/dynovaio/newrelic-sb-nrql-pygments/issues"
Download = "https://github.com/dynovaio/newrelic-sb-nrql-pygments/archive/refs/tags/v0.7.0.zip"
Changelog = "https://github.com/dynovaio/newrelic-sb-nrql-pygments/blob/master/CHANGELOG.md"
"Bug Tracker" = "https://github.com/dynovaio/newrelic-sb-nrql-pygments/issues"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
package-mode = true
packages = [
    { include = "pygments_sb_nrql", from = "src" },
]
include = [
  "LICENSE.txt",
  "CHANGELOG.md",
]


[tool.poetry.group.dev.dependencies]
autopep8 = "^2.3.2"
bandit = "^1.8.3"
black = "^25.1.0"
coverage = "^7.8.2"
deepdiff = {extras = ["optimize"], version = "^8.5.0"}
flake8 = "^7.2.0"
flake8-black = "^0.3.6"
importnb = "^2023.11.1"
isort = "^6.0.1"
jupyter-book = "^1.0.4.post1"
jupyterlab = "^4.4.3"
mypy = "^1.16.0"
nbdev = "^2.4.2"
nbmake = "^1.5.5"
nbqa = {extras = ["toolchain"], version = "^1.9.1"}
poethepoet = "^0.34.0"
pre-commit = "^4.2.0"
pycodestyle = "^2.13.0"
pydocstyle = "^6.3.0"
pylint = "^3.3.7"
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
ruff = "^0.11.12"
tbump = "^6.11.0"
tox = "^4.26.0"
types-requests = "^2.32.0.20250515"

[tool.poetry.plugins."pygments.lexers"]
nrql = "pygments_sb_nrql:NrqlLexer"

[tool.black]
target_version = ['py311']
include = '\.pyi?$'
exclude = '''
/(\.git/
  |\.eggs
  |\.hg
  |__pycache__
  |\.cache
  |\.ipynb_checkpoints
  |\.mypy_cache
  |\.pytest_cache
  |\.tox
  |\.venv
  |_build
  |buck-out
  |build
  |dist
  |legacy
)/
'''

[tool.pytest.ini_options]
testpaths = "tests"
python_files = [
  "**/test_*.py",
]
filterwarnings =[
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning"
]
addopts = [
  "--cov=pygments_sb_nrql",
  "--cov-report=xml:cobertura.xml",
  "--cov-report=term",
  "--import-mode=importlib",
  "--junitxml=report.xml",
  "--nbmake",
]

[tool.poe.tasks]
"lint"            = "poetry run pre-commit run --all"
"test"            = "poetry run pytest --cov newrelic_sb_sdk --cov-report xml:cobertura.xml --cov-report term --junitxml report.xml"
"package:update"  = "poetry run nbdev_export"
"package:stage"   = "git add src"
"package:commit"  = "git commit -m 'Update: refresh src module from notebooks'"
"version:update"  = "poetry run tbump --no-push --no-tag"
"freeze"          = "poetry export --without-hashes --format requirements.txt --output requirements.txt"
"freeze:dev"      = "poetry export --without-hashes --format requirements.txt --output requirements.dev.txt --with=dev"

[tool.poe.tasks."package:upgrade"]
sequence = [
  { ref = "package:update"},
  { ref = "lint"},
  { ref = "package:stage" },
  { ref = "package:commit" },
  { cmd = "git --no-pager diff HEAD~1 HEAD -- > .diff.txt" },
]
ignore_fail = true

[tool.poe.tasks."package:release"]
sequence = [
  { cmd = "git flow release start ${version}"},
  { cmd = "poetry run tbump --no-push --no-tag --non-interactive ${version}" },
  { cmd = "env GIT_EDITOR=: git flow release finish -m 'Release'"},
]
args = [{name = "version", positional = true}]
