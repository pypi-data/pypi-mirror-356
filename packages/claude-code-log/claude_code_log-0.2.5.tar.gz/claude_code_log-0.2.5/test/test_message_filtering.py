#!/usr/bin/env python3
"""Test cases for message filtering: system messages, caveats, etc."""

import json
import tempfile
from pathlib import Path
from claude_code_log.parser import load_transcript
from claude_code_log.renderer import generate_html, is_system_message


def test_caveat_message_filtering():
    """Test that caveat messages are properly filtered out."""
    # Create a test JSONL file with a caveat message
    caveat_message = {
        "type": "user",
        "timestamp": "2025-06-08T03:31:46.490Z",
        "parentUuid": None,
        "isSidechain": False,
        "userType": "human",
        "cwd": "/tmp",
        "sessionId": "test_session",
        "version": "1.0.0",
        "uuid": "test_caveat_001",
        "message": {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to.",
                }
            ],
        },
    }

    normal_message = {
        "type": "user",
        "timestamp": "2025-06-08T03:32:46.490Z",
        "parentUuid": None,
        "isSidechain": False,
        "userType": "human",
        "cwd": "/tmp",
        "sessionId": "test_session",
        "version": "1.0.0",
        "uuid": "test_normal_001",
        "message": {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "This is a normal user message that should appear in the output.",
                }
            ],
        },
    }

    # Test the is_system_message function directly
    caveat_text = "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."
    normal_text = "This is a normal user message that should appear in the output."

    assert is_system_message(caveat_text), (
        "Caveat message should be detected as system message"
    )
    assert not is_system_message(normal_text), (
        "Normal message should not be detected as system message"
    )

    # Test end-to-end with JSONL processing
    with tempfile.NamedTemporaryFile(mode="w", suffix=".jsonl", delete=False) as f:
        f.write(json.dumps(caveat_message) + "\n")
        f.write(json.dumps(normal_message) + "\n")
        f.flush()

        test_file_path = Path(f.name)

    try:
        # Load the transcript
        messages = load_transcript(test_file_path)
        assert len(messages) == 2, f"Expected 2 messages, got {len(messages)}"

        # Generate HTML
        html = generate_html(messages, "Test Transcript")

        # The HTML should NOT contain the caveat message
        assert "Caveat: The messages below were generated" not in html, (
            "Caveat message should be filtered out of HTML"
        )

        # The HTML should contain the normal message
        assert "This is a normal user message" in html, (
            "Normal message should appear in HTML"
        )

        print("✓ Test passed: Caveat messages are properly filtered out")

    finally:
        test_file_path.unlink()


def test_system_message_filtering():
    """Test that other system messages are still filtered out."""
    stdout_message = {
        "type": "user",
        "timestamp": "2025-06-11T22:44:17.436Z",
        "parentUuid": None,
        "isSidechain": False,
        "userType": "human",
        "cwd": "/tmp",
        "sessionId": "test_session",
        "version": "1.0.0",
        "uuid": "test_stdout_001",
        "message": {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "<local-command-stdout>Some command output here</local-command-stdout>",
                }
            ],
        },
    }

    caveat_message = {
        "type": "user",
        "timestamp": "2025-06-11T22:45:17.436Z",
        "parentUuid": None,
        "isSidechain": False,
        "userType": "human",
        "cwd": "/tmp",
        "sessionId": "test_session",
        "version": "1.0.0",
        "uuid": "test_caveat_001",
        "message": {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to.",
                }
            ],
        },
    }

    # Test that these are still filtered end-to-end
    # (Testing the filtering logic directly with known strings)
    assert is_system_message(
        "<local-command-stdout>Some command output here</local-command-stdout>"
    ), "stdout messages should be filtered"
    assert is_system_message(
        "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."
    ), "caveat messages should be filtered"

    with tempfile.NamedTemporaryFile(mode="w", suffix=".jsonl", delete=False) as f:
        f.write(json.dumps(stdout_message) + "\n")
        f.write(json.dumps(caveat_message) + "\n")
        f.flush()
        test_file_path = Path(f.name)

    try:
        messages = load_transcript(test_file_path)
        html = generate_html(messages, "Test Transcript")

        # These should NOT appear in HTML
        assert "local-command-stdout" not in html, (
            "stdout messages should be filtered out"
        )
        assert "Caveat: The messages below" not in html, (
            "caveat messages should be filtered out"
        )

        print("✓ Test passed: Other system messages are still filtered out")

    finally:
        test_file_path.unlink()


if __name__ == "__main__":
    test_caveat_message_filtering()
    test_system_message_filtering()
    print("\n✅ All message filtering tests passed!")
