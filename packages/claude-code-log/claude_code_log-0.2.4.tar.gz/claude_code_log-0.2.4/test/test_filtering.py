#!/usr/bin/env python3
"""Permanent test script to verify system message filtering works correctly.

This test ensures that the claude-code-log tool properly filters out:
- Tool result messages (file reads, command outputs, etc.)
- Command messages with <command-name> tags
- System caveat messages
- Request interrupted messages

Run this test after making changes to the filtering logic.
"""

import json
import tempfile
from pathlib import Path
from claude_code_log.converter import convert_jsonl_to_html


def create_test_jsonl():
    """Create a test JSONL file with various message types."""
    messages = [
        # Regular user message - should be included
        {
            "type": "user",
            "message": {"role": "user", "content": "This is a regular user message"},
            "timestamp": "2024-01-01T10:00:00Z",
        },
        # System caveat message - should be filtered out
        {
            "type": "user",
            "message": {
                "role": "user",
                "content": "Caveat: The messages below are were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to.",
            },
            "timestamp": "2024-01-01T10:01:00Z",
        },
        # Command message - should be filtered out
        {
            "type": "user",
            "message": {
                "role": "user",
                "content": "<command-name>cost</command-name>\n<command-message>cost</command-message>",
            },
            "timestamp": "2024-01-01T10:02:00Z",
        },
        # Tool result message - should be filtered out
        {
            "type": "user",
            "message": {
                "role": "user",
                "content": [
                    {
                        "tool_use_id": "test_id",
                        "type": "tool_result",
                        "content": "This is a tool result that should be filtered out",
                    }
                ],
            },
            "timestamp": "2024-01-01T10:03:00Z",
        },
        # Interrupted request message - should be filtered out
        {
            "type": "user",
            "message": {
                "role": "user",
                "content": "[Request interrupted by user for tool use]",
            },
            "timestamp": "2024-01-01T10:04:00Z",
        },
        # Command output message - should be filtered out
        {
            "type": "user",
            "message": {
                "role": "user",
                "content": "<local-command-stdout>Total cost: $0.64\nTotal duration (API): 5m 24.8s</local-command-stdout>",
            },
            "timestamp": "2024-01-01T10:04:30Z",
        },
        # Another regular user message - should be included
        {
            "type": "user",
            "message": {
                "role": "user",
                "content": "This is another regular user message",
            },
            "timestamp": "2024-01-01T10:05:00Z",
        },
    ]

    # Create temporary JSONL file
    temp_file = tempfile.NamedTemporaryFile(mode="w", suffix=".jsonl", delete=False)
    for msg in messages:
        json.dump(msg, temp_file)
        temp_file.write("\n")
    temp_file.close()

    return Path(temp_file.name)


def main():
    # Create test JSONL file
    jsonl_path = create_test_jsonl()

    try:
        # Convert to HTML
        html_path = convert_jsonl_to_html(jsonl_path)

        # Read and display the HTML content
        html_content = html_path.read_text()
        print("Generated HTML:")
        print("=" * 50)
        print(html_content)
        print("=" * 50)

        # Check what should be included
        expected_messages = [
            "This is a regular user message",
            "This is another regular user message",
        ]

        filtered_messages = [
            "Caveat: The messages below",
            "<command-name>cost</command-name>",
            "tool_result",
            "[Request interrupted by user for tool use]",
            "<local-command-stdout>",
        ]

        print("\nTesting filtering:")
        for expected in expected_messages:
            if expected in html_content:
                print(f"✓ Found expected message: {expected}")
            else:
                print(f"✗ Missing expected message: {expected}")

        for filtered in filtered_messages:
            if filtered not in html_content:
                print(f"✓ Correctly filtered out: {filtered}")
            else:
                print(f"✗ Failed to filter out: {filtered}")

    finally:
        # Clean up
        jsonl_path.unlink()
        if "html_path" in locals():
            html_path.unlink()


if __name__ == "__main__":
    main()
