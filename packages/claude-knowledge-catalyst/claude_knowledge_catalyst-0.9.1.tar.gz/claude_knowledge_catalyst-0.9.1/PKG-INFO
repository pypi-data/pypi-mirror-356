Metadata-Version: 2.4
Name: claude-knowledge-catalyst
Version: 0.9.1
Summary: Knowledge management catalyst for Claude Code development
Project-URL: Homepage, https://github.com/drillan/claude-knowledge-catalyst
Project-URL: Documentation, https://claude-knowledge-catalyst.readthedocs.io/
Project-URL: Repository, https://github.com/drillan/claude-knowledge-catalyst.git
Project-URL: Issues, https://github.com/drillan/claude-knowledge-catalyst/issues
Project-URL: Read the Docs, https://claude-knowledge-catalyst.readthedocs.io/
Project-URL: Source Code, https://github.com/drillan/claude-knowledge-catalyst
Author: CKC Contributors
License-Expression: MIT
License-File: LICENSE
Keywords: ai,claude,development,knowledge,management,obsidian
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Documentation
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Text Processing :: Markup :: Markdown
Requires-Python: >=3.11
Requires-Dist: gitpython>=3.1.0
Requires-Dist: jinja2>=3.1.0
Requires-Dist: matplotlib>=3.10.3
Requires-Dist: psutil>=7.0.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: python-frontmatter>=1.0.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: rich>=13.0.0
Requires-Dist: seaborn>=0.13.2
Requires-Dist: typer>=0.9.0
Requires-Dist: watchdog>=3.0.0
Provides-Extra: dev
Requires-Dist: mypy>=1.0.0; extra == 'dev'
Requires-Dist: pre-commit>=3.0.0; extra == 'dev'
Requires-Dist: pytest-cov>=4.0.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Requires-Dist: ruff>=0.1.0; extra == 'dev'
Provides-Extra: docs
Requires-Dist: furo>=2024.8.6; extra == 'docs'
Requires-Dist: linkify-it-py>=2.0.3; extra == 'docs'
Requires-Dist: myst-parser>=4.0.1; extra == 'docs'
Requires-Dist: sphinx-design>=0.6.1; extra == 'docs'
Requires-Dist: sphinx>=8.2.3; extra == 'docs'
Requires-Dist: sphinxcontrib-mermaid>=1.0.0; extra == 'docs'
Description-Content-Type: text/markdown

# Claude Knowledge Catalyst (CKC) v0.9.1

**知識の触媒作用を実現する統合的な知識管理システム**

Claude Code との開発プロセスで生まれる知見を自動的に構造化し、Obsidian との深層統合により長期的な知識資産として蓄積・活用するための包括的なプラットフォームです。

[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)
[![Version](https://img.shields.io/badge/version-0.9.1-blue.svg)](CHANGELOG.md)
[![Documentation](https://img.shields.io/badge/docs-readthedocs-brightgreen.svg)](https://claude-knowledge-catalyst.readthedocs.io/)
[![Read the Docs](https://readthedocs.org/projects/claude-knowledge-catalyst/badge/?version=latest)](https://claude-knowledge-catalyst.readthedocs.io/en/latest/)

> **📋 詳細ドキュメント**: システム設計と実装の詳細については [包括的ドキュメント](https://claude-knowledge-catalyst.readthedocs.io/) を参照してください

## ✨ What's New in v0.9.1

### 🔒 CLAUDE.md Secure Sync
- **セキュアな同期**: CLAUDE.mdファイルをObsidianに安全に同期
- **セクション除外**: 機密情報を含むセクションを自動的にフィルタリング
- **柔軟な設定**: プロジェクトに応じたカスタマイズが可能
- **プライバシー保護**: デフォルトで無効化、明示的な有効化が必要

### 🛡️ Security Features
- **大文字小文字非依存**: `# secrets`, `# SECRETS`, `# Secrets` すべてに対応
- **非破壊的処理**: 元ファイルは変更せず、フィルタリング後の内容を同期
- **豊富な除外パターン**: API キー、認証情報、個人情報を保護
- **詳細メタデータ**: CLAUDE.md専用の情報抽出と分析

## 🏗️ Core Features (v0.9.0+)

### 適応型システム基盤
- **10-step numbering** (00→10→20→30) による知識成熟度の視覚化
- **段階的構造化**: カオス(00) → プロジェクト(10) → 知識ベース(20) → 知恵資産(30)
- **インテリジェント分類**: 成功率・実行履歴・コンテンツ解析による自動配置
- **Obsidian深層統合**: 双方向リンク、グラフビュー、階層タグの活用

### インテリジェント知識管理
- **自動メタデータ抽出**: プロジェクト検出、タグ推論、文脈解析
- **構造化組織**: 成熟度による段階的分類（00→10→20→30）
- **双方向同期**: .claude ディレクトリと Obsidian ボルトの seamless 連携
- **🔒 CLAUDE.md同期**: セキュアなセクションフィルタリングで機密情報を保護
- **プロジェクト横断**: 関連知識の自動発見・相互参照

## コア機能

- **🔄 自動同期システム**: `.claude/` ディレクトリの変更をリアルタイム監視・同期
- **🔒 CLAUDE.md同期**: セキュアなセクションフィルタリングで機密情報を保護
- **🏷️ インテリジェントメタデータ**: プロジェクト検出、タグ推論、文脈解析による自動抽出
- **📝 テンプレートシステム**: プロンプト、コード、概念、ログの知識タイプ別テンプレート
- **🔍 適応型システム基盤組織化**: 10-step numbering による知識成熟度管理
- **⚡ 包括CLI**: 初期化、同期、監視、分析の統合コマンドライン
- **🎯 Obsidian深層統合**: 構造化ボルト、双方向リンク、グラフビュー活用
- **📊 プロジェクト分析**: ファイル統計、カテゴリ分布、ステータス管理
- **🔗 知識関連付け**: プロジェクト横断での関連知識発見・相互参照

## 🎯 Try CKC in 3 Minutes

**Want to see CKC in action before installing?** Run our interactive demo:

```bash
# Clone and run the demo
git clone https://github.com/drillan/claude-knowledge-catalyst.git
cd claude-knowledge-catalyst
uv sync --dev

# Run main demo (recommended)
./demo/run_demo.sh user

# Or run directly
./demo/demo.sh

# Or explore other demos
./demo/run_demo.sh help
```

**What the demo shows:**
- ✅ Real user workflow with actual commands
- ✅ Automatic content classification and organization
- ✅ Obsidian vault generation with hybrid structure
- ✅ Multi-project knowledge sharing capabilities

[📖 Full demo documentation](demo/README.md)

## Quick Start

### Installation

```bash
# Install from source using uv (recommended)
git clone https://github.com/drillan/claude-knowledge-catalyst.git
cd claude-knowledge-catalyst

# Initialize with uv
uv venv
uv sync --dev

# Or install with pip
pip install -e .
```

### Initialize in Your Project

```bash
# Navigate to your project directory
cd your-project

# Initialize CKC with hybrid structure (v0.9.0)
uv run ckc init

# Add Obsidian vault as sync target
uv run ckc add my-vault /path/to/your/obsidian/vault

# Start watching for changes
uv run ckc watch
```

### Enable CLAUDE.md Sync (Optional)

```bash
# Edit configuration file
vim ckc_config.yaml
```

Add to your configuration:
```yaml
watch:
  include_claude_md: true
  claude_md_sections_exclude:
    - "# secrets"
    - "# private"
    - "# confidential"
```

> **🔒 Security Note**: CLAUDE.md sync is disabled by default. Only enable it after configuring appropriate section exclusions for your sensitive information.

### Upgrade from Previous Versions

```bash
# Update to v0.9.1 (latest)
uv add claude-knowledge-catalyst@0.9.1

# Verify everything works
uv run ckc status
```

### Sync Existing Knowledge

```bash
# Sync all files in .claude directory
uv run ckc sync

# Sync to specific target
uv run ckc sync --target my-vault

# Sync with project context
uv run ckc sync --project "My Project Name"
```

> **📚 詳細ガイド**: より詳しいセットアップと使用方法については、[公式ドキュメント](https://claude-knowledge-catalyst.readthedocs.io/)の[Quick Start](https://claude-knowledge-catalyst.readthedocs.io/en/latest/quick-start/)と[Getting Started](https://claude-knowledge-catalyst.readthedocs.io/en/latest/getting-started/)をご覧ください。

## 利用可能なCLIコマンド

### 📁 基本操作

```bash
# ワークスペース初期化
uv run ckc init

# 同期ターゲット追加
uv run ckc add main-vault ~/Documents/ObsidianVault

# ファイル同期実行
uv run ckc sync
uv run ckc sync --target main-vault
uv run ckc sync --project "My Project"

# リアルタイム監視
uv run ckc watch

# 現在状況確認
uv run ckc status
```

### 📊 分析・プロジェクト管理

```bash
# ファイル詳細分析
uv run ckc analyze .claude/prompt-optimization.md

# プロジェクト一覧表示
uv run ckc project list

# プロジェクト内ファイル一覧
uv run ckc project files claude-knowledge-catalyst

# プロジェクト統計
uv run ckc project stats claude-knowledge-catalyst
```

## Configuration

CKC uses a YAML configuration file (`ckc_config.yaml`) that supports:

- **Multiple sync targets**: Connect to various knowledge management tools
- **Custom tagging schemas**: Define your own categorization system  
- **Flexible watch patterns**: Configure which files and directories to monitor
- **Template customization**: Modify or add new content templates

Example configuration:

```yaml
version: "1.0"
project_name: "My AI Project"
auto_sync: true

sync_targets:
  - name: "main-vault"
    type: "obsidian" 
    path: "/Users/me/Documents/ObsidianVault"
    enabled: true

tags:
  category_tags: ["prompt", "code", "concept", "resource"]
  tech_tags: ["python", "javascript", "react"]
  claude_tags: ["opus", "sonnet", "haiku"]
  status_tags: ["draft", "tested", "production"]

watch:
  watch_paths: [".claude"]
  file_patterns: ["*.md", "*.txt"]
  debounce_seconds: 1.0
```

## 知識組織化システム

CKC v0.9.0 は **適応型システム基盤** により、知識の自然進化をサポートします：

```
Obsidian_Vault/
├── 00_Catalyst_Lab/             # 🧪 実験・アイデア孵化の場
│   ├── brainstorming/           # 未加工アイデア
│   ├── experiments/             # 実験的取り組み
│   └── rapid_prototypes/        # 迅速プロトタイピング
│
├── 10_Projects/                 # 🚀 アクティブプロジェクト管理
│   ├── active/                  # 進行中プロジェクト
│   ├── planning/                # 計画段階
│   └── review/                  # レビュー・評価段階
│
├── 20_Knowledge_Base/           # 📚 体系化された知見
│   ├── Prompts/                 # プロンプト関連
│   │   ├── Templates/           # 汎用プロンプトテンプレート
│   │   ├── Best_Practices/      # 成功事例・ベストプラクティス
│   │   └── Improvement_Log/     # プロンプト改善の記録
│   ├── Code_Snippets/           # 再利用可能なコードスニペット
│   │   ├── Python/              # Python関連
│   │   ├── JavaScript/          # JavaScript関連
│   │   ├── Bash/                # Bash/Shell関連
│   │   └── Other_Languages/     # その他言語
│   ├── Concepts/                # AI・LLM関連の概念整理
│   │   ├── API_Design/          # API設計原則
│   │   ├── Software_Architecture/ # ソフトウェア設計
│   │   └── Development_Practices/ # 開発手法
│   └── Resources/               # 学習リソースと外部参考資料
│
├── 30_Wisdom_Archive/           # 💎 高品質な知識資産
│   ├── Best_Practices/          # ベストプラクティス集
│   ├── Lessons_Learned/         # 教訓と反省
│   └── Strategic_Insights/      # 戦略的知見
│
├── _templates/                  # 🏗️ システムテンプレート
├── Analytics/                   # 📊 知見の活用状況分析
└── Archive/                     # 📦 古い・非推奨の知見
```

### 知識進化プロセス

```
Raw Ideas → Structured Insights → Validated Knowledge → Wisdom Assets
   (00)         (10-20)              (20-30)            (30+)

🧪 実験段階 → 🚀 プロジェクト → 📚 知識ベース → 💎 知恵資産
```

## Advanced Features

### Metadata Enhancement

Every knowledge item is automatically enhanced with rich metadata:

```yaml
---
title: "Python Async Code Generation"
created: "2024-06-17T10:30:00"
updated: "2024-06-17T15:45:00"
version: "1.2"
claude_model: "Claude 3 Opus"
category: "prompt"
status: "production"
success_rate: 87
confidence: "high"
purpose: "Generate async Python code with proper error handling"
tags: [prompt, python, async, code-generation]
related_projects: ["web-scraper", "api-service"]
---
```

### Template System

Built-in templates for common knowledge types:

- **Prompt Templates**: Structure for prompt development and iteration
- **Code Snippets**: Reusable code with documentation
- **Concept Notes**: AI/LLM concepts and explanations
- **Project Logs**: Development session recordings
- **Improvement Logs**: Tracking prompt and process improvements

### Success Tracking

Track the effectiveness of your prompts and techniques:

- Success rate monitoring
- Version comparison
- Improvement trends
- Best practice identification

## Development

### Setting up Development Environment

```bash
# Clone the repository
git clone https://github.com/drillan/claude-knowledge-catalyst.git
cd claude-knowledge-catalyst

# Install development dependencies with uv
uv sync --dev

# Install pre-commit hooks
uv run pre-commit install

# Run tests
uv run pytest

# Run linting and formatting
uv run ruff check src/ tests/     # Lint
uv run ruff format src/ tests/    # Format
uv run mypy src/                  # Type checking
```

### プロジェクト構造

```
src/claude_knowledge_catalyst/
├── core/                          # コア機能
│   ├── config.py                  # 設定管理（CKCConfig, SyncTarget）
│   ├── metadata.py                # メタデータ抽出・管理（KnowledgeMetadata）
│   ├── watcher.py                 # ファイルシステム監視
│   ├── hybrid_config.py           # ハイブリッド構造設定
│   └── structure_validator.py     # 構造整合性検証
├── sync/                          # 同期システム
│   ├── obsidian.py                # Obsidian統合（ObsidianVaultManager）
│   ├── hybrid_manager.py          # ハイブリッド同期管理
│   └── compatibility.py           # 後方互換性
├── templates/                     # テンプレートシステム
│   ├── manager.py                 # テンプレート管理（TemplateManager）
│   └── hybrid_templates.py        # ハイブリッド専用テンプレート
├── ai/                           # AI支援機能
│   └── ai_assistant.py           # AI分析・提案システム
├── analytics/                    # アナリティクス
│   ├── knowledge_analytics.py    # 知識分析エンジン
│   └── usage_statistics.py      # 使用統計
├── automation/                   # 自動化
│   ├── metadata_enhancer.py     # メタデータ自動強化
│   └── structure_automation.py  # 構造自動最適化
└── cli/                          # CLI インターフェース
    ├── main.py                   # メインCLI
    ├── migrate_commands.py       # 移行コマンド
    └── structure_commands.py     # 構造管理コマンド
```

## Contributing

We welcome contributions! Please see our [Contributing Guidelines](CONTRIBUTING.md) for details.

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests for new functionality
5. Submit a pull request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Support

- 📖 [Documentation](https://claude-knowledge-catalyst.readthedocs.io/)
- 🐛 [Issue Tracker](https://github.com/drillan/claude-knowledge-catalyst/issues)
- 💬 [Discussions](https://github.com/drillan/claude-knowledge-catalyst/discussions)

## 今後の展開

CKC の将来計画と実装予定機能については、詳細な[開発ロードマップ](.claude/architecture/roadmap.md)をご参照ください。

### 次期リリース予定
- **v1.0.0**: 初回パブリックリリース（機能安定化、ドキュメント完備）
- **v1.1.0**: AI支援機能拡張（コンテンツ改善提案、高度アナリティクス）
- **v1.2.0**: 構造管理機能（自動最適化、詳細検証）
- **v2.0.0**: エンタープライズ機能（Web インターフェース、チーム協働）

---

**Claude Knowledge Catalyst** - AI開発プロセスで得られる知見を組織化・検索可能・再利用可能な知識資産に変換し、継続的な学習とイノベーションを加速する統合プラットフォーム。

> 🎯 **ビジョン**: 開発者の経験と洞察を蓄積し、知識の触媒作用により新しい発見と効率的な問題解決を実現する。
