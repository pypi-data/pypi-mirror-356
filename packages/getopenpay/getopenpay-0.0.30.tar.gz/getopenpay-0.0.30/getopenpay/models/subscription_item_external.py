# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName
from getopenpay.models.price_external import PriceExternal
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionItemExternal(BaseModel):
    """
    SubscriptionItemExternal
    """ # noqa: E501
    add_at_period_end: StrictBool = Field(description="Whether or not this item will be added before next renewal")
    created_at: datetime = Field(description="DateTime at which the object was created, in 'ISO 8601' format.")
    currency: CurrencyEnum = Field(description="Three-letter ISO currency code, in lowercase.")
    custom_fields: Optional[Dict[str, Any]] = None
    deleted_at: Optional[datetime]
    description: Optional[StrictStr] = None
    drop_at_end: StrictBool = Field(description="Whether or not this item will be dropped from subscription before next renewal")
    id: StrictStr = Field(description="Unique Identifier of the subscription_item.")
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    object: Optional[ObjectName] = None
    pending_attachment_to_subscription_id: Optional[StrictStr] = None
    price: PriceExternal = Field(description="Price object associated with subscription_item")
    price_id: StrictStr = Field(description="Unique Identifier of the price.")
    product_id: StrictStr = Field(description="Unique Identifier of the product.")
    quantity: StrictInt = Field(description="Quantity of the product selected for the subscription_item.")
    subscription_id: Optional[StrictStr] = None
    updated_at: datetime = Field(description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties: ClassVar[List[str]] = ["add_at_period_end", "created_at", "currency", "custom_fields", "deleted_at", "description", "drop_at_end", "id", "is_deleted", "object", "pending_attachment_to_subscription_id", "price", "price_id", "product_id", "quantity", "subscription_id", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionItemExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # set to None if custom_fields (nullable) is None
        # and model_fields_set contains the field
        if self.custom_fields is None and "custom_fields" in self.model_fields_set:
            _dict['custom_fields'] = None

        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if pending_attachment_to_subscription_id (nullable) is None
        # and model_fields_set contains the field
        if self.pending_attachment_to_subscription_id is None and "pending_attachment_to_subscription_id" in self.model_fields_set:
            _dict['pending_attachment_to_subscription_id'] = None

        # set to None if subscription_id (nullable) is None
        # and model_fields_set contains the field
        if self.subscription_id is None and "subscription_id" in self.model_fields_set:
            _dict['subscription_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionItemExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "add_at_period_end": obj.get("add_at_period_end"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "custom_fields": obj.get("custom_fields"),
            "deleted_at": obj.get("deleted_at"),
            "description": obj.get("description"),
            "drop_at_end": obj.get("drop_at_end"),
            "id": obj.get("id"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "object": obj.get("object"),
            "pending_attachment_to_subscription_id": obj.get("pending_attachment_to_subscription_id"),
            "price": PriceExternal.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "price_id": obj.get("price_id"),
            "product_id": obj.get("product_id"),
            "quantity": obj.get("quantity"),
            "subscription_id": obj.get("subscription_id"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


