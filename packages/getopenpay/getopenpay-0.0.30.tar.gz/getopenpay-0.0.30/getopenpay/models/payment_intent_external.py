# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName
from getopenpay.models.payment_intent_status import PaymentIntentStatus
from typing import Optional, Set
from typing_extensions import Self

class PaymentIntentExternal(BaseModel):
    """
    PaymentIntentExternal
    """ # noqa: E501
    amount_atom: StrictInt
    amount_atom_capturable: Optional[StrictInt]
    amount_atom_received: Optional[StrictInt]
    charge_ids: List[StrictStr]
    created_at: datetime = Field(description="DateTime at which the object was created, in 'ISO 8601' format.")
    currency: CurrencyEnum
    custom_fields: Optional[Dict[str, Any]] = None
    customer_id: StrictStr
    decline_reason: Optional[StrictStr]
    id: StrictStr
    invoice: Optional[InvoiceExternal]
    invoice_id: Optional[StrictStr]
    invoice_payment_provider_type_fee: Optional[StrictInt]
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    last_refund_date: Optional[datetime]
    object: Optional[ObjectName] = None
    payment_method_id: Optional[StrictStr]
    payment_processor_name: Optional[StrictStr]
    processor_payment_intent_id: Optional[StrictStr]
    refund_ids: List[StrictStr]
    status: PaymentIntentStatus
    updated_at: datetime = Field(description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties: ClassVar[List[str]] = ["amount_atom", "amount_atom_capturable", "amount_atom_received", "charge_ids", "created_at", "currency", "custom_fields", "customer_id", "decline_reason", "id", "invoice", "invoice_id", "invoice_payment_provider_type_fee", "is_deleted", "last_refund_date", "object", "payment_method_id", "payment_processor_name", "processor_payment_intent_id", "refund_ids", "status", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentIntentExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # set to None if amount_atom_capturable (nullable) is None
        # and model_fields_set contains the field
        if self.amount_atom_capturable is None and "amount_atom_capturable" in self.model_fields_set:
            _dict['amount_atom_capturable'] = None

        # set to None if amount_atom_received (nullable) is None
        # and model_fields_set contains the field
        if self.amount_atom_received is None and "amount_atom_received" in self.model_fields_set:
            _dict['amount_atom_received'] = None

        # set to None if custom_fields (nullable) is None
        # and model_fields_set contains the field
        if self.custom_fields is None and "custom_fields" in self.model_fields_set:
            _dict['custom_fields'] = None

        # set to None if decline_reason (nullable) is None
        # and model_fields_set contains the field
        if self.decline_reason is None and "decline_reason" in self.model_fields_set:
            _dict['decline_reason'] = None

        # set to None if invoice (nullable) is None
        # and model_fields_set contains the field
        if self.invoice is None and "invoice" in self.model_fields_set:
            _dict['invoice'] = None

        # set to None if invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_id is None and "invoice_id" in self.model_fields_set:
            _dict['invoice_id'] = None

        # set to None if invoice_payment_provider_type_fee (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_payment_provider_type_fee is None and "invoice_payment_provider_type_fee" in self.model_fields_set:
            _dict['invoice_payment_provider_type_fee'] = None

        # set to None if last_refund_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_refund_date is None and "last_refund_date" in self.model_fields_set:
            _dict['last_refund_date'] = None

        # set to None if payment_method_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method_id is None and "payment_method_id" in self.model_fields_set:
            _dict['payment_method_id'] = None

        # set to None if payment_processor_name (nullable) is None
        # and model_fields_set contains the field
        if self.payment_processor_name is None and "payment_processor_name" in self.model_fields_set:
            _dict['payment_processor_name'] = None

        # set to None if processor_payment_intent_id (nullable) is None
        # and model_fields_set contains the field
        if self.processor_payment_intent_id is None and "processor_payment_intent_id" in self.model_fields_set:
            _dict['processor_payment_intent_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentIntentExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount_atom": obj.get("amount_atom"),
            "amount_atom_capturable": obj.get("amount_atom_capturable"),
            "amount_atom_received": obj.get("amount_atom_received"),
            "charge_ids": obj.get("charge_ids"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "custom_fields": obj.get("custom_fields"),
            "customer_id": obj.get("customer_id"),
            "decline_reason": obj.get("decline_reason"),
            "id": obj.get("id"),
            "invoice": InvoiceExternal.from_dict(obj["invoice"]) if obj.get("invoice") is not None else None,
            "invoice_id": obj.get("invoice_id"),
            "invoice_payment_provider_type_fee": obj.get("invoice_payment_provider_type_fee"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "last_refund_date": obj.get("last_refund_date"),
            "object": obj.get("object"),
            "payment_method_id": obj.get("payment_method_id"),
            "payment_processor_name": obj.get("payment_processor_name"),
            "processor_payment_intent_id": obj.get("processor_payment_intent_id"),
            "refund_ids": obj.get("refund_ids"),
            "status": obj.get("status"),
            "updated_at": obj.get("updated_at")
        })
        return _obj

from getopenpay.models.invoice_external import InvoiceExternal
# TODO: Rewrite to not use raise_errors
PaymentIntentExternal.model_rebuild(raise_errors=False)

