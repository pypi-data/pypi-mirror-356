# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from getopenpay.models.create_credit_note_line import CreateCreditNoteLine
from getopenpay.models.credit_note_reason import CreditNoteReason
from getopenpay.models.currency_enum import CurrencyEnum
from typing import Optional, Set
from typing_extensions import Self

class CreateCreditNoteRequest(BaseModel):
    """
    CreateCreditNoteRequest
    """ # noqa: E501
    credit_amount_atom: Optional[StrictInt] = Field(default=0, description="The integer amount representing the amount to credit the customerâ€™s balance, which will be automatically applied to their next invoice.")
    currency: Optional[CurrencyEnum] = None
    invoice_id: StrictStr = Field(description="ID of the invoice")
    lines: List[CreateCreditNoteLine] = Field(description="Line items that make up the credit note.")
    reason: Optional[CreditNoteReason] = None
    refund_amount_atom: Optional[StrictInt] = Field(default=0, description="The integer amount representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.")
    total_amount_atom: StrictInt = Field(description="The int amount representing the total amount of the credit note.")
    __properties: ClassVar[List[str]] = ["credit_amount_atom", "currency", "invoice_id", "lines", "reason", "refund_amount_atom", "total_amount_atom"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateCreditNoteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item_lines in self.lines:
                if _item_lines:
                    _items.append(_item_lines.to_dict())
            _dict['lines'] = _items
        # set to None if reason (nullable) is None
        # and model_fields_set contains the field
        if self.reason is None and "reason" in self.model_fields_set:
            _dict['reason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateCreditNoteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "credit_amount_atom": obj.get("credit_amount_atom") if obj.get("credit_amount_atom") is not None else 0,
            "currency": obj.get("currency"),
            "invoice_id": obj.get("invoice_id"),
            "lines": [CreateCreditNoteLine.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None,
            "reason": obj.get("reason"),
            "refund_amount_atom": obj.get("refund_amount_atom") if obj.get("refund_amount_atom") is not None else 0,
            "total_amount_atom": obj.get("total_amount_atom")
        })
        return _obj


