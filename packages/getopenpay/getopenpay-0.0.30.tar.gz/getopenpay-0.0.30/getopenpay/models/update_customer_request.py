# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from getopenpay.models.complete_address import CompleteAddress
from getopenpay.models.customer_invoice_settings import CustomerInvoiceSettings
from getopenpay.models.customer_language import CustomerLanguage
from typing import Optional, Set
from typing_extensions import Self

class UpdateCustomerRequest(BaseModel):
    """
    UpdateCustomerRequest
    """ # noqa: E501
    billing_email: Optional[StrictStr] = None
    business_name: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    coupon_id: Optional[StrictStr] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer_billing_address: Optional[CompleteAddress] = None
    email: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = None
    invoice_settings: Optional[CustomerInvoiceSettings] = None
    language: Optional[CustomerLanguage] = None
    last_name: Optional[StrictStr] = None
    line1: Optional[StrictStr] = None
    line2: Optional[StrictStr] = None
    line3: Optional[StrictStr] = None
    notes: Optional[StrictStr] = None
    phone_number: Optional[StrictStr] = None
    promotion_code_id: Optional[StrictStr] = None
    shipping_addresses: Optional[List[CompleteAddress]] = Field(default=None, description="List of the customerâ€™s shipping addresses.")
    state: Optional[StrictStr] = None
    zip_code: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["billing_email", "business_name", "city", "country", "coupon_id", "custom_fields", "customer_billing_address", "email", "first_name", "invoice_settings", "language", "last_name", "line1", "line2", "line3", "notes", "phone_number", "promotion_code_id", "shipping_addresses", "state", "zip_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateCustomerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_billing_address
        if self.customer_billing_address:
            _dict['customer_billing_address'] = self.customer_billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_settings
        if self.invoice_settings:
            _dict['invoice_settings'] = self.invoice_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_addresses (list)
        _items = []
        if self.shipping_addresses:
            for _item_shipping_addresses in self.shipping_addresses:
                if _item_shipping_addresses:
                    _items.append(_item_shipping_addresses.to_dict())
            _dict['shipping_addresses'] = _items
        # set to None if billing_email (nullable) is None
        # and model_fields_set contains the field
        if self.billing_email is None and "billing_email" in self.model_fields_set:
            _dict['billing_email'] = None

        # set to None if business_name (nullable) is None
        # and model_fields_set contains the field
        if self.business_name is None and "business_name" in self.model_fields_set:
            _dict['business_name'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if coupon_id (nullable) is None
        # and model_fields_set contains the field
        if self.coupon_id is None and "coupon_id" in self.model_fields_set:
            _dict['coupon_id'] = None

        # set to None if custom_fields (nullable) is None
        # and model_fields_set contains the field
        if self.custom_fields is None and "custom_fields" in self.model_fields_set:
            _dict['custom_fields'] = None

        # set to None if customer_billing_address (nullable) is None
        # and model_fields_set contains the field
        if self.customer_billing_address is None and "customer_billing_address" in self.model_fields_set:
            _dict['customer_billing_address'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['first_name'] = None

        # set to None if invoice_settings (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_settings is None and "invoice_settings" in self.model_fields_set:
            _dict['invoice_settings'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['last_name'] = None

        # set to None if line1 (nullable) is None
        # and model_fields_set contains the field
        if self.line1 is None and "line1" in self.model_fields_set:
            _dict['line1'] = None

        # set to None if line2 (nullable) is None
        # and model_fields_set contains the field
        if self.line2 is None and "line2" in self.model_fields_set:
            _dict['line2'] = None

        # set to None if line3 (nullable) is None
        # and model_fields_set contains the field
        if self.line3 is None and "line3" in self.model_fields_set:
            _dict['line3'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict['phone_number'] = None

        # set to None if promotion_code_id (nullable) is None
        # and model_fields_set contains the field
        if self.promotion_code_id is None and "promotion_code_id" in self.model_fields_set:
            _dict['promotion_code_id'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if zip_code (nullable) is None
        # and model_fields_set contains the field
        if self.zip_code is None and "zip_code" in self.model_fields_set:
            _dict['zip_code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateCustomerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing_email": obj.get("billing_email"),
            "business_name": obj.get("business_name"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "coupon_id": obj.get("coupon_id"),
            "custom_fields": obj.get("custom_fields"),
            "customer_billing_address": CompleteAddress.from_dict(obj["customer_billing_address"]) if obj.get("customer_billing_address") is not None else None,
            "email": obj.get("email"),
            "first_name": obj.get("first_name"),
            "invoice_settings": CustomerInvoiceSettings.from_dict(obj["invoice_settings"]) if obj.get("invoice_settings") is not None else None,
            "language": obj.get("language"),
            "last_name": obj.get("last_name"),
            "line1": obj.get("line1"),
            "line2": obj.get("line2"),
            "line3": obj.get("line3"),
            "notes": obj.get("notes"),
            "phone_number": obj.get("phone_number"),
            "promotion_code_id": obj.get("promotion_code_id"),
            "shipping_addresses": [CompleteAddress.from_dict(_item) for _item in obj["shipping_addresses"]] if obj.get("shipping_addresses") is not None else None,
            "state": obj.get("state"),
            "zip_code": obj.get("zip_code")
        })
        return _obj


