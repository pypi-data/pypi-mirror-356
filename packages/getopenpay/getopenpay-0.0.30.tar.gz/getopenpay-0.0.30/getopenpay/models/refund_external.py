# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.object_name import ObjectName
from getopenpay.models.refund_reason_enum import RefundReasonEnum
from getopenpay.models.refund_status_enum import RefundStatusEnum
from typing import Optional, Set
from typing_extensions import Self

class RefundExternal(BaseModel):
    """
    RefundExternal
    """ # noqa: E501
    amount_atom: StrictInt = Field(description="amount_atom that you want to refund.")
    attempt_error_message: Optional[StrictStr] = None
    charge_id: StrictStr = Field(description="Unique Identifier of the charge.")
    created_at: datetime = Field(description="DateTime at which the object was created, in 'ISO 8601' format.")
    currency: Optional[CurrencyEnum] = Field(default=None, description="Three-letter ISO currency code, in lowercase.")
    id: StrictStr = Field(description="Unique Identifier of the refund.")
    invoice_id: StrictStr = Field(description="Invoice id to which the refund is attached.")
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    object: Optional[ObjectName] = None
    payment_intent_id: StrictStr = Field(description="Unique Identifier of the payment_intent.")
    reason: RefundReasonEnum = Field(description="Reason of the refund.")
    status: RefundStatusEnum = Field(description="Status of the refund.")
    updated_at: datetime = Field(description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties: ClassVar[List[str]] = ["amount_atom", "attempt_error_message", "charge_id", "created_at", "currency", "id", "invoice_id", "is_deleted", "object", "payment_intent_id", "reason", "status", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RefundExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if attempt_error_message (nullable) is None
        # and model_fields_set contains the field
        if self.attempt_error_message is None and "attempt_error_message" in self.model_fields_set:
            _dict['attempt_error_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RefundExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount_atom": obj.get("amount_atom"),
            "attempt_error_message": obj.get("attempt_error_message"),
            "charge_id": obj.get("charge_id"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "id": obj.get("id"),
            "invoice_id": obj.get("invoice_id"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "object": obj.get("object"),
            "payment_intent_id": obj.get("payment_intent_id"),
            "reason": obj.get("reason"),
            "status": obj.get("status"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


