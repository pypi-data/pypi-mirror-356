# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from getopenpay.models.calendar_interval_enum import CalendarIntervalEnum
from getopenpay.models.collection_method_enum import CollectionMethodEnum
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.discount_external import DiscountExternal
from getopenpay.models.object_name import ObjectName
from getopenpay.models.subscription_cancellation_details import SubscriptionCancellationDetails
from getopenpay.models.subscription_item_external import SubscriptionItemExternal
from getopenpay.models.subscription_status_enum import SubscriptionStatusEnum
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionExternal(BaseModel):
    """
    SubscriptionExternal
    """ # noqa: E501
    account_id: StrictStr = Field(description="Unique Identifier of the account.")
    billing_interval: Optional[CalendarIntervalEnum] = None
    billing_interval_count: Optional[StrictInt] = None
    cancel_at_end: StrictBool = Field(description="Whether this subscription should cancel at the end of contract or billing cycle.")
    cancellation_details: Optional[SubscriptionCancellationDetails] = None
    cancelled_at: Optional[datetime]
    checkout_session_id: Optional[StrictStr] = None
    collection_method: CollectionMethodEnum = Field(description="Invoices that are generated from this subscription have this collection method.")
    contract_auto_renew: Optional[StrictBool] = None
    contract_start: Optional[datetime] = None
    created_at: datetime = Field(description="DateTime at which the object was created, in 'ISO 8601' format.")
    currency: Optional[CurrencyEnum]
    current_period_end: datetime = Field(description="End of the current billing period, in 'ISO 8601' format.")
    current_period_start: datetime = Field(description="Starting of the current billing period, in 'ISO 8601' format.")
    custom_fields: Optional[Dict[str, Any]] = None
    customer_id: StrictStr = Field(description="Unique Identifier of the customer.")
    default_payment_method_id: Optional[StrictStr]
    description: Optional[StrictStr]
    discount: Optional[DiscountExternal] = None
    id: StrictStr = Field(description="Unique Identifier of the subscription.")
    initial_start: datetime = Field(description="Very beginning of the subscription, in 'ISO 8601' format.")
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    metadata: Optional[Dict[str, Any]] = None
    name: StrictStr = Field(description="Name for this subscription.")
    net_d: Optional[StrictInt]
    object: Optional[ObjectName] = None
    pause_at_end: Optional[StrictBool] = None
    pause_for_cycles: Optional[StrictInt] = None
    paused_at: Optional[datetime] = None
    payment_route_id: Optional[StrictStr] = None
    remaining_billing_cycles: Optional[StrictInt] = None
    renews_at: Optional[datetime] = None
    resumes_at: Optional[datetime] = None
    status: SubscriptionStatusEnum = Field(description="Current status of the subscription.")
    subscription_items: List[SubscriptionItemExternal] = Field(description="List of subscription items.")
    total_billing_cycles: Optional[StrictInt] = None
    trial_end: Optional[datetime] = None
    trial_start: Optional[datetime] = None
    updated_at: datetime = Field(description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties: ClassVar[List[str]] = ["account_id", "billing_interval", "billing_interval_count", "cancel_at_end", "cancellation_details", "cancelled_at", "checkout_session_id", "collection_method", "contract_auto_renew", "contract_start", "created_at", "currency", "current_period_end", "current_period_start", "custom_fields", "customer_id", "default_payment_method_id", "description", "discount", "id", "initial_start", "is_deleted", "metadata", "name", "net_d", "object", "pause_at_end", "pause_for_cycles", "paused_at", "payment_route_id", "remaining_billing_cycles", "renews_at", "resumes_at", "status", "subscription_items", "total_billing_cycles", "trial_end", "trial_start", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cancellation_details
        if self.cancellation_details:
            _dict['cancellation_details'] = self.cancellation_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subscription_items (list)
        _items = []
        if self.subscription_items:
            for _item_subscription_items in self.subscription_items:
                if _item_subscription_items:
                    _items.append(_item_subscription_items.to_dict())
            _dict['subscription_items'] = _items
        # set to None if billing_interval (nullable) is None
        # and model_fields_set contains the field
        if self.billing_interval is None and "billing_interval" in self.model_fields_set:
            _dict['billing_interval'] = None

        # set to None if billing_interval_count (nullable) is None
        # and model_fields_set contains the field
        if self.billing_interval_count is None and "billing_interval_count" in self.model_fields_set:
            _dict['billing_interval_count'] = None

        # set to None if cancellation_details (nullable) is None
        # and model_fields_set contains the field
        if self.cancellation_details is None and "cancellation_details" in self.model_fields_set:
            _dict['cancellation_details'] = None

        # set to None if cancelled_at (nullable) is None
        # and model_fields_set contains the field
        if self.cancelled_at is None and "cancelled_at" in self.model_fields_set:
            _dict['cancelled_at'] = None

        # set to None if checkout_session_id (nullable) is None
        # and model_fields_set contains the field
        if self.checkout_session_id is None and "checkout_session_id" in self.model_fields_set:
            _dict['checkout_session_id'] = None

        # set to None if contract_auto_renew (nullable) is None
        # and model_fields_set contains the field
        if self.contract_auto_renew is None and "contract_auto_renew" in self.model_fields_set:
            _dict['contract_auto_renew'] = None

        # set to None if contract_start (nullable) is None
        # and model_fields_set contains the field
        if self.contract_start is None and "contract_start" in self.model_fields_set:
            _dict['contract_start'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if custom_fields (nullable) is None
        # and model_fields_set contains the field
        if self.custom_fields is None and "custom_fields" in self.model_fields_set:
            _dict['custom_fields'] = None

        # set to None if default_payment_method_id (nullable) is None
        # and model_fields_set contains the field
        if self.default_payment_method_id is None and "default_payment_method_id" in self.model_fields_set:
            _dict['default_payment_method_id'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if discount (nullable) is None
        # and model_fields_set contains the field
        if self.discount is None and "discount" in self.model_fields_set:
            _dict['discount'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if net_d (nullable) is None
        # and model_fields_set contains the field
        if self.net_d is None and "net_d" in self.model_fields_set:
            _dict['net_d'] = None

        # set to None if pause_at_end (nullable) is None
        # and model_fields_set contains the field
        if self.pause_at_end is None and "pause_at_end" in self.model_fields_set:
            _dict['pause_at_end'] = None

        # set to None if pause_for_cycles (nullable) is None
        # and model_fields_set contains the field
        if self.pause_for_cycles is None and "pause_for_cycles" in self.model_fields_set:
            _dict['pause_for_cycles'] = None

        # set to None if paused_at (nullable) is None
        # and model_fields_set contains the field
        if self.paused_at is None and "paused_at" in self.model_fields_set:
            _dict['paused_at'] = None

        # set to None if payment_route_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_route_id is None and "payment_route_id" in self.model_fields_set:
            _dict['payment_route_id'] = None

        # set to None if remaining_billing_cycles (nullable) is None
        # and model_fields_set contains the field
        if self.remaining_billing_cycles is None and "remaining_billing_cycles" in self.model_fields_set:
            _dict['remaining_billing_cycles'] = None

        # set to None if renews_at (nullable) is None
        # and model_fields_set contains the field
        if self.renews_at is None and "renews_at" in self.model_fields_set:
            _dict['renews_at'] = None

        # set to None if resumes_at (nullable) is None
        # and model_fields_set contains the field
        if self.resumes_at is None and "resumes_at" in self.model_fields_set:
            _dict['resumes_at'] = None

        # set to None if total_billing_cycles (nullable) is None
        # and model_fields_set contains the field
        if self.total_billing_cycles is None and "total_billing_cycles" in self.model_fields_set:
            _dict['total_billing_cycles'] = None

        # set to None if trial_end (nullable) is None
        # and model_fields_set contains the field
        if self.trial_end is None and "trial_end" in self.model_fields_set:
            _dict['trial_end'] = None

        # set to None if trial_start (nullable) is None
        # and model_fields_set contains the field
        if self.trial_start is None and "trial_start" in self.model_fields_set:
            _dict['trial_start'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "billing_interval": obj.get("billing_interval"),
            "billing_interval_count": obj.get("billing_interval_count"),
            "cancel_at_end": obj.get("cancel_at_end"),
            "cancellation_details": SubscriptionCancellationDetails.from_dict(obj["cancellation_details"]) if obj.get("cancellation_details") is not None else None,
            "cancelled_at": obj.get("cancelled_at"),
            "checkout_session_id": obj.get("checkout_session_id"),
            "collection_method": obj.get("collection_method"),
            "contract_auto_renew": obj.get("contract_auto_renew"),
            "contract_start": obj.get("contract_start"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "current_period_end": obj.get("current_period_end"),
            "current_period_start": obj.get("current_period_start"),
            "custom_fields": obj.get("custom_fields"),
            "customer_id": obj.get("customer_id"),
            "default_payment_method_id": obj.get("default_payment_method_id"),
            "description": obj.get("description"),
            "discount": DiscountExternal.from_dict(obj["discount"]) if obj.get("discount") is not None else None,
            "id": obj.get("id"),
            "initial_start": obj.get("initial_start"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "net_d": obj.get("net_d"),
            "object": obj.get("object"),
            "pause_at_end": obj.get("pause_at_end"),
            "pause_for_cycles": obj.get("pause_for_cycles"),
            "paused_at": obj.get("paused_at"),
            "payment_route_id": obj.get("payment_route_id"),
            "remaining_billing_cycles": obj.get("remaining_billing_cycles"),
            "renews_at": obj.get("renews_at"),
            "resumes_at": obj.get("resumes_at"),
            "status": obj.get("status"),
            "subscription_items": [SubscriptionItemExternal.from_dict(_item) for _item in obj["subscription_items"]] if obj.get("subscription_items") is not None else None,
            "total_billing_cycles": obj.get("total_billing_cycles"),
            "trial_end": obj.get("trial_end"),
            "trial_start": obj.get("trial_start"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


