# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from getopenpay.models.checkout_mode import CheckoutMode
from getopenpay.models.checkout_preferences import CheckoutPreferences
from getopenpay.models.create_checkout_line_item import CreateCheckoutLineItem
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.customer_language import CustomerLanguage
from typing import Optional, Set
from typing_extensions import Self

class CreateCheckoutSessionRequest(BaseModel):
    """
    CreateCheckoutSessionRequest
    """ # noqa: E501
    checkout_preferences: Optional[CheckoutPreferences] = None
    client_reference_id: Optional[StrictStr] = None
    coupon_id: Optional[StrictStr] = None
    currency: Optional[CurrencyEnum] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer_email: Optional[StrictStr] = None
    customer_id: Optional[StrictStr] = None
    language: Optional[CustomerLanguage] = None
    line_items: Optional[List[CreateCheckoutLineItem]] = Field(default=None, description="The line items purchased by the customer. (Deprecated - use bundle_ids instead)")
    mode: CheckoutMode = Field(description="The mode of the Checkout Session. Possible values: payment (one-time payments), setup (collect payment info), subscription (recurring payments).")
    product_bundle_ids: Optional[List[StrictStr]] = Field(default=None, description="List of product bundle IDs to include in this checkout session. The first product bundle will be selected by default.")
    return_url: Optional[StrictStr] = None
    selected_product_bundle_id: Optional[StrictStr] = None
    success_url: Optional[StrictStr] = None
    trial_end: Optional[datetime] = None
    trial_from_price: Optional[StrictBool] = None
    trial_period_days: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["checkout_preferences", "client_reference_id", "coupon_id", "currency", "custom_fields", "customer_email", "customer_id", "language", "line_items", "mode", "product_bundle_ids", "return_url", "selected_product_bundle_id", "success_url", "trial_end", "trial_from_price", "trial_period_days"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateCheckoutSessionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of checkout_preferences
        if self.checkout_preferences:
            _dict['checkout_preferences'] = self.checkout_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['line_items'] = _items
        # set to None if checkout_preferences (nullable) is None
        # and model_fields_set contains the field
        if self.checkout_preferences is None and "checkout_preferences" in self.model_fields_set:
            _dict['checkout_preferences'] = None

        # set to None if client_reference_id (nullable) is None
        # and model_fields_set contains the field
        if self.client_reference_id is None and "client_reference_id" in self.model_fields_set:
            _dict['client_reference_id'] = None

        # set to None if coupon_id (nullable) is None
        # and model_fields_set contains the field
        if self.coupon_id is None and "coupon_id" in self.model_fields_set:
            _dict['coupon_id'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if custom_fields (nullable) is None
        # and model_fields_set contains the field
        if self.custom_fields is None and "custom_fields" in self.model_fields_set:
            _dict['custom_fields'] = None

        # set to None if customer_email (nullable) is None
        # and model_fields_set contains the field
        if self.customer_email is None and "customer_email" in self.model_fields_set:
            _dict['customer_email'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customer_id'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        # set to None if return_url (nullable) is None
        # and model_fields_set contains the field
        if self.return_url is None and "return_url" in self.model_fields_set:
            _dict['return_url'] = None

        # set to None if selected_product_bundle_id (nullable) is None
        # and model_fields_set contains the field
        if self.selected_product_bundle_id is None and "selected_product_bundle_id" in self.model_fields_set:
            _dict['selected_product_bundle_id'] = None

        # set to None if success_url (nullable) is None
        # and model_fields_set contains the field
        if self.success_url is None and "success_url" in self.model_fields_set:
            _dict['success_url'] = None

        # set to None if trial_end (nullable) is None
        # and model_fields_set contains the field
        if self.trial_end is None and "trial_end" in self.model_fields_set:
            _dict['trial_end'] = None

        # set to None if trial_from_price (nullable) is None
        # and model_fields_set contains the field
        if self.trial_from_price is None and "trial_from_price" in self.model_fields_set:
            _dict['trial_from_price'] = None

        # set to None if trial_period_days (nullable) is None
        # and model_fields_set contains the field
        if self.trial_period_days is None and "trial_period_days" in self.model_fields_set:
            _dict['trial_period_days'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateCheckoutSessionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkout_preferences": CheckoutPreferences.from_dict(obj["checkout_preferences"]) if obj.get("checkout_preferences") is not None else None,
            "client_reference_id": obj.get("client_reference_id"),
            "coupon_id": obj.get("coupon_id"),
            "currency": obj.get("currency"),
            "custom_fields": obj.get("custom_fields"),
            "customer_email": obj.get("customer_email"),
            "customer_id": obj.get("customer_id"),
            "language": obj.get("language"),
            "line_items": [CreateCheckoutLineItem.from_dict(_item) for _item in obj["line_items"]] if obj.get("line_items") is not None else None,
            "mode": obj.get("mode"),
            "product_bundle_ids": obj.get("product_bundle_ids"),
            "return_url": obj.get("return_url"),
            "selected_product_bundle_id": obj.get("selected_product_bundle_id"),
            "success_url": obj.get("success_url"),
            "trial_end": obj.get("trial_end"),
            "trial_from_price": obj.get("trial_from_price"),
            "trial_period_days": obj.get("trial_period_days")
        })
        return _obj


