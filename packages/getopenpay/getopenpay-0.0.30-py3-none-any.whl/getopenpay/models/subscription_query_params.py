# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from getopenpay.models.date_time_filter import DateTimeFilter
from getopenpay.models.search_filter import SearchFilter
from getopenpay.models.subscription_status_enum import SubscriptionStatusEnum
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionQueryParams(BaseModel):
    """
    SubscriptionQueryParams
    """ # noqa: E501
    coupon_id: Optional[StrictStr] = None
    created_at: Optional[DateTimeFilter] = None
    current_period_end: Optional[DateTimeFilter] = None
    current_period_start: Optional[DateTimeFilter] = None
    customer_id: Optional[StrictStr] = None
    expand: Optional[List[StrictStr]] = Field(default=None, description="Specifies which fields in the response should be expanded.")
    page_number: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=1, description="Page number")
    page_size: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=100, description="Page size")
    price_id: Optional[StrictStr] = None
    product_id: Optional[StrictStr] = None
    search: Optional[SearchFilter] = None
    sort_descending: Optional[StrictBool] = Field(default=False, description="Sort direction.")
    sort_key: Optional[StrictStr] = Field(default='created_at', description="Key name based on which data is sorted.")
    statuses: Optional[List[SubscriptionStatusEnum]] = Field(default=None, description="Current statuses of the subscription.")
    updated_at: Optional[DateTimeFilter] = None
    __properties: ClassVar[List[str]] = ["coupon_id", "created_at", "current_period_end", "current_period_start", "customer_id", "expand", "page_number", "page_size", "price_id", "product_id", "search", "sort_descending", "sort_key", "statuses", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionQueryParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_period_end
        if self.current_period_end:
            _dict['current_period_end'] = self.current_period_end.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_period_start
        if self.current_period_start:
            _dict['current_period_start'] = self.current_period_start.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search
        if self.search:
            _dict['search'] = self.search.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict['updated_at'] = self.updated_at.to_dict()
        # set to None if coupon_id (nullable) is None
        # and model_fields_set contains the field
        if self.coupon_id is None and "coupon_id" in self.model_fields_set:
            _dict['coupon_id'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if current_period_end (nullable) is None
        # and model_fields_set contains the field
        if self.current_period_end is None and "current_period_end" in self.model_fields_set:
            _dict['current_period_end'] = None

        # set to None if current_period_start (nullable) is None
        # and model_fields_set contains the field
        if self.current_period_start is None and "current_period_start" in self.model_fields_set:
            _dict['current_period_start'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customer_id'] = None

        # set to None if price_id (nullable) is None
        # and model_fields_set contains the field
        if self.price_id is None and "price_id" in self.model_fields_set:
            _dict['price_id'] = None

        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['product_id'] = None

        # set to None if search (nullable) is None
        # and model_fields_set contains the field
        if self.search is None and "search" in self.model_fields_set:
            _dict['search'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionQueryParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coupon_id": obj.get("coupon_id"),
            "created_at": DateTimeFilter.from_dict(obj["created_at"]) if obj.get("created_at") is not None else None,
            "current_period_end": DateTimeFilter.from_dict(obj["current_period_end"]) if obj.get("current_period_end") is not None else None,
            "current_period_start": DateTimeFilter.from_dict(obj["current_period_start"]) if obj.get("current_period_start") is not None else None,
            "customer_id": obj.get("customer_id"),
            "expand": obj.get("expand"),
            "page_number": obj.get("page_number") if obj.get("page_number") is not None else 1,
            "page_size": obj.get("page_size") if obj.get("page_size") is not None else 100,
            "price_id": obj.get("price_id"),
            "product_id": obj.get("product_id"),
            "search": SearchFilter.from_dict(obj["search"]) if obj.get("search") is not None else None,
            "sort_descending": obj.get("sort_descending") if obj.get("sort_descending") is not None else False,
            "sort_key": obj.get("sort_key") if obj.get("sort_key") is not None else 'created_at',
            "statuses": obj.get("statuses"),
            "updated_at": DateTimeFilter.from_dict(obj["updated_at"]) if obj.get("updated_at") is not None else None
        })
        return _obj


