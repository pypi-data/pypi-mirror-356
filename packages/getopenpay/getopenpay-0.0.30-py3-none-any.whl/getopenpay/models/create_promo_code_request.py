# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from getopenpay.models.promo_restrictions import PromoRestrictions
from typing import Optional, Set
from typing_extensions import Self

class CreatePromoCodeRequest(BaseModel):
    """
    CreatePromoCodeRequest
    """ # noqa: E501
    code: StrictStr = Field(description="The customer-facing code. This code must be unique across all active promotion codes for a specific customer. Case insensitive.")
    coupon_id: StrictStr = Field(description="The unique id of coupon for this promotion code.")
    customer_ids: Optional[List[StrictStr]] = Field(default=None, description="List of customer that this promotion code can be used by. If not set, the promotion code can be used by all customers.")
    expires_at: Optional[datetime] = None
    max_redemptions: Optional[StrictInt] = None
    max_redemptions_per_customer: Optional[StrictInt] = None
    restrictions: Optional[PromoRestrictions] = None
    __properties: ClassVar[List[str]] = ["code", "coupon_id", "customer_ids", "expires_at", "max_redemptions", "max_redemptions_per_customer", "restrictions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePromoCodeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of restrictions
        if self.restrictions:
            _dict['restrictions'] = self.restrictions.to_dict()
        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expires_at'] = None

        # set to None if max_redemptions (nullable) is None
        # and model_fields_set contains the field
        if self.max_redemptions is None and "max_redemptions" in self.model_fields_set:
            _dict['max_redemptions'] = None

        # set to None if max_redemptions_per_customer (nullable) is None
        # and model_fields_set contains the field
        if self.max_redemptions_per_customer is None and "max_redemptions_per_customer" in self.model_fields_set:
            _dict['max_redemptions_per_customer'] = None

        # set to None if restrictions (nullable) is None
        # and model_fields_set contains the field
        if self.restrictions is None and "restrictions" in self.model_fields_set:
            _dict['restrictions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePromoCodeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "coupon_id": obj.get("coupon_id"),
            "customer_ids": obj.get("customer_ids"),
            "expires_at": obj.get("expires_at"),
            "max_redemptions": obj.get("max_redemptions"),
            "max_redemptions_per_customer": obj.get("max_redemptions_per_customer"),
            "restrictions": PromoRestrictions.from_dict(obj["restrictions"]) if obj.get("restrictions") is not None else None
        })
        return _obj


