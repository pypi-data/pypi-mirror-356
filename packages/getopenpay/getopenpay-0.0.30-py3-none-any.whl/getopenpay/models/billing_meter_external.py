# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from getopenpay.models.billing_meter_aggregation_formula import BillingMeterAggregationFormula
from getopenpay.models.object_name import ObjectName
from typing import Optional, Set
from typing_extensions import Self

class BillingMeterExternal(BaseModel):
    """
    BillingMeterExternal
    """ # noqa: E501
    account_id: StrictStr = Field(description="Unique identifier for the account.")
    aggregation_formula: Optional[BillingMeterAggregationFormula] = Field(default=None, description="Specifies how events are aggregated. Allowed values are count to count the number of events and sum to sum each event’s value.")
    created_at: datetime = Field(description="DateTime at which the object was created, in 'ISO 8601' format.")
    display_name: StrictStr = Field(description="The meter’s name.")
    event_name: Annotated[str, Field(strict=True)] = Field(description="The name of the meter event to record usage for. Corresponds with the event_name field on meter events.")
    event_payload_customer_mapping_key: Optional[StrictStr] = Field(default='customer_id', description="The key in the usage event payload to use for mapping the event to a customer.")
    event_payload_value_key: Optional[StrictStr] = Field(default='value', description="The key in the usage event payload to use as the value for this meter. For example, if the event payload contains usage on a bytes_used field, then set the event_payload_value_key to “bytes_used”.")
    id: StrictStr = Field(description="Unique Identifier of the Billing Meter.")
    is_active: StrictBool = Field(description="The meter’s status.")
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    object: Optional[ObjectName] = None
    updated_at: datetime = Field(description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties: ClassVar[List[str]] = ["account_id", "aggregation_formula", "created_at", "display_name", "event_name", "event_payload_customer_mapping_key", "event_payload_value_key", "id", "is_active", "is_deleted", "object", "updated_at"]

    @field_validator('event_name')
    def event_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z0-9_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z0-9_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingMeterExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingMeterExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "aggregation_formula": obj.get("aggregation_formula"),
            "created_at": obj.get("created_at"),
            "display_name": obj.get("display_name"),
            "event_name": obj.get("event_name"),
            "event_payload_customer_mapping_key": obj.get("event_payload_customer_mapping_key") if obj.get("event_payload_customer_mapping_key") is not None else 'customer_id',
            "event_payload_value_key": obj.get("event_payload_value_key") if obj.get("event_payload_value_key") is not None else 'value',
            "id": obj.get("id"),
            "is_active": obj.get("is_active"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "object": obj.get("object"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


