# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from getopenpay.models.meter_event_value_grouping_window import MeterEventValueGroupingWindow
from typing import Optional, Set
from typing_extensions import Self

class ListBillingMeterEventSummariesRequest(BaseModel):
    """
    ListBillingMeterEventSummariesRequest
    """ # noqa: E501
    customer_id: StrictStr = Field(description="The customer for which to fetch event summaries.")
    end_time: datetime = Field(description="The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries.")
    meter_id: StrictStr = Field(description="Unique identifier for the meter object.")
    page_number: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=1, description="Page number")
    page_size: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=100, description="Page size")
    start_time: datetime = Field(description="The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries.")
    value_grouping_window: Optional[MeterEventValueGroupingWindow] = None
    __properties: ClassVar[List[str]] = ["customer_id", "end_time", "meter_id", "page_number", "page_size", "start_time", "value_grouping_window"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListBillingMeterEventSummariesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if value_grouping_window (nullable) is None
        # and model_fields_set contains the field
        if self.value_grouping_window is None and "value_grouping_window" in self.model_fields_set:
            _dict['value_grouping_window'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListBillingMeterEventSummariesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_id": obj.get("customer_id"),
            "end_time": obj.get("end_time"),
            "meter_id": obj.get("meter_id"),
            "page_number": obj.get("page_number") if obj.get("page_number") is not None else 1,
            "page_size": obj.get("page_size") if obj.get("page_size") is not None else 100,
            "start_time": obj.get("start_time"),
            "value_grouping_window": obj.get("value_grouping_window")
        })
        return _obj


