# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from getopenpay.models.complete_address import CompleteAddress
from getopenpay.models.currency_enum import CurrencyEnum
from getopenpay.models.invoice_discount_amounts_external import InvoiceDiscountAmountsExternal
from getopenpay.models.invoice_item_public import InvoiceItemPublic
from getopenpay.models.invoice_status_enum import InvoiceStatusEnum
from getopenpay.models.merchant_tax_id_setting import MerchantTaxIdSetting
from getopenpay.models.tax_id_setting import TaxIdSetting
from typing import Optional, Set
from typing_extensions import Self

class InvoicePublic(BaseModel):
    """
    InvoicePublic
    """ # noqa: E501
    applied_balance_amount_atom: StrictInt = Field(description="Amount applied from customer balance either from credit or debit. It is in atomic units (in USD this is cents).")
    billed_to: Optional[StrictStr] = None
    billed_to_business_name: Optional[StrictStr] = None
    billing_address: Optional[StrictStr] = None
    branding: Dict[str, Any] = Field(description="The branding settings associated with the account")
    card_type: Optional[StrictStr] = None
    created_at: datetime = Field(description="DateTime at which the object was created, in 'ISO 8601' format.")
    currency: CurrencyEnum = Field(description="Three-letter ISO currency code, in lowercase.")
    customer_tax_ids: Optional[List[TaxIdSetting]] = Field(default=None, description="The tax ID settings of the customer.")
    due_amount_atom: StrictInt = Field(description="Final amount due at this time for this invoice. It isin atomic units (in USD this is cents).")
    due_date: Optional[datetime] = None
    id: StrictStr = Field(description="Unique identifier of the invoice.")
    invoice_pdf_url: StrictStr = Field(description="The URL for the Invoice PDF")
    is_initial_invoice_for_trial_sub: StrictBool = Field(description="Whether this is the first invoice for a trial subscription.")
    last_four: Optional[StrictStr] = None
    lines: Optional[List[InvoiceItemPublic]] = Field(default=None, description="List of individual line items that make up the invoice.")
    merchant_billing_address: Optional[CompleteAddress]
    merchant_tax_ids: Optional[List[MerchantTaxIdSetting]] = Field(default=None, description="The tax ID settings of the merchant.")
    paid_amount_atom: StrictInt = Field(description="Total amount paid. It is in atomic units (in USD this is cents).")
    paid_at: Optional[datetime] = None
    provider_type_fee_amount_atom: StrictInt = Field(description="Total fee amount charged for the payment provider type in atomic units.")
    receipt_pdf_url: StrictStr = Field(description="The URL for the Receipt PDF")
    remaining_amount_atom: StrictInt = Field(description="Remaining amount of the invoice to be paid. It is in atomic units (in USD this is cents).")
    status: InvoiceStatusEnum = Field(description="Status of the invoice.")
    tax_amount_atom: StrictInt = Field(description="Total tax amount in atomic units.")
    total_amount_atom: StrictInt = Field(description="Total amount of the invoice. Sum of invoice_items' total amount. It is in atomic units (in USD this is cents).")
    total_discount_amount_atoms: Optional[List[InvoiceDiscountAmountsExternal]] = Field(default=None, description="The aggregate amount_atoms calculated per discount across all line items.")
    total_excluding_taxes_amount_atom: StrictInt = Field(description="Total amount excluding taxes. It is in atomic units (in USD this is cents).")
    trial_end_for_sub: Optional[datetime]
    trial_start_for_sub: Optional[datetime]
    __properties: ClassVar[List[str]] = ["applied_balance_amount_atom", "billed_to", "billed_to_business_name", "billing_address", "branding", "card_type", "created_at", "currency", "customer_tax_ids", "due_amount_atom", "due_date", "id", "invoice_pdf_url", "is_initial_invoice_for_trial_sub", "last_four", "lines", "merchant_billing_address", "merchant_tax_ids", "paid_amount_atom", "paid_at", "provider_type_fee_amount_atom", "receipt_pdf_url", "remaining_amount_atom", "status", "tax_amount_atom", "total_amount_atom", "total_discount_amount_atoms", "total_excluding_taxes_amount_atom", "trial_end_for_sub", "trial_start_for_sub"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoicePublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in customer_tax_ids (list)
        _items = []
        if self.customer_tax_ids:
            for _item_customer_tax_ids in self.customer_tax_ids:
                if _item_customer_tax_ids:
                    _items.append(_item_customer_tax_ids.to_dict())
            _dict['customer_tax_ids'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item_lines in self.lines:
                if _item_lines:
                    _items.append(_item_lines.to_dict())
            _dict['lines'] = _items
        # override the default output from pydantic by calling `to_dict()` of merchant_billing_address
        if self.merchant_billing_address:
            _dict['merchant_billing_address'] = self.merchant_billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in merchant_tax_ids (list)
        _items = []
        if self.merchant_tax_ids:
            for _item_merchant_tax_ids in self.merchant_tax_ids:
                if _item_merchant_tax_ids:
                    _items.append(_item_merchant_tax_ids.to_dict())
            _dict['merchant_tax_ids'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in total_discount_amount_atoms (list)
        _items = []
        if self.total_discount_amount_atoms:
            for _item_total_discount_amount_atoms in self.total_discount_amount_atoms:
                if _item_total_discount_amount_atoms:
                    _items.append(_item_total_discount_amount_atoms.to_dict())
            _dict['total_discount_amount_atoms'] = _items
        # set to None if billed_to (nullable) is None
        # and model_fields_set contains the field
        if self.billed_to is None and "billed_to" in self.model_fields_set:
            _dict['billed_to'] = None

        # set to None if billed_to_business_name (nullable) is None
        # and model_fields_set contains the field
        if self.billed_to_business_name is None and "billed_to_business_name" in self.model_fields_set:
            _dict['billed_to_business_name'] = None

        # set to None if billing_address (nullable) is None
        # and model_fields_set contains the field
        if self.billing_address is None and "billing_address" in self.model_fields_set:
            _dict['billing_address'] = None

        # set to None if card_type (nullable) is None
        # and model_fields_set contains the field
        if self.card_type is None and "card_type" in self.model_fields_set:
            _dict['card_type'] = None

        # set to None if due_date (nullable) is None
        # and model_fields_set contains the field
        if self.due_date is None and "due_date" in self.model_fields_set:
            _dict['due_date'] = None

        # set to None if last_four (nullable) is None
        # and model_fields_set contains the field
        if self.last_four is None and "last_four" in self.model_fields_set:
            _dict['last_four'] = None

        # set to None if merchant_billing_address (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_billing_address is None and "merchant_billing_address" in self.model_fields_set:
            _dict['merchant_billing_address'] = None

        # set to None if paid_at (nullable) is None
        # and model_fields_set contains the field
        if self.paid_at is None and "paid_at" in self.model_fields_set:
            _dict['paid_at'] = None

        # set to None if trial_end_for_sub (nullable) is None
        # and model_fields_set contains the field
        if self.trial_end_for_sub is None and "trial_end_for_sub" in self.model_fields_set:
            _dict['trial_end_for_sub'] = None

        # set to None if trial_start_for_sub (nullable) is None
        # and model_fields_set contains the field
        if self.trial_start_for_sub is None and "trial_start_for_sub" in self.model_fields_set:
            _dict['trial_start_for_sub'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoicePublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applied_balance_amount_atom": obj.get("applied_balance_amount_atom"),
            "billed_to": obj.get("billed_to"),
            "billed_to_business_name": obj.get("billed_to_business_name"),
            "billing_address": obj.get("billing_address"),
            "branding": obj.get("branding"),
            "card_type": obj.get("card_type"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "customer_tax_ids": [TaxIdSetting.from_dict(_item) for _item in obj["customer_tax_ids"]] if obj.get("customer_tax_ids") is not None else None,
            "due_amount_atom": obj.get("due_amount_atom"),
            "due_date": obj.get("due_date"),
            "id": obj.get("id"),
            "invoice_pdf_url": obj.get("invoice_pdf_url"),
            "is_initial_invoice_for_trial_sub": obj.get("is_initial_invoice_for_trial_sub"),
            "last_four": obj.get("last_four"),
            "lines": [InvoiceItemPublic.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None,
            "merchant_billing_address": CompleteAddress.from_dict(obj["merchant_billing_address"]) if obj.get("merchant_billing_address") is not None else None,
            "merchant_tax_ids": [MerchantTaxIdSetting.from_dict(_item) for _item in obj["merchant_tax_ids"]] if obj.get("merchant_tax_ids") is not None else None,
            "paid_amount_atom": obj.get("paid_amount_atom"),
            "paid_at": obj.get("paid_at"),
            "provider_type_fee_amount_atom": obj.get("provider_type_fee_amount_atom"),
            "receipt_pdf_url": obj.get("receipt_pdf_url"),
            "remaining_amount_atom": obj.get("remaining_amount_atom"),
            "status": obj.get("status"),
            "tax_amount_atom": obj.get("tax_amount_atom"),
            "total_amount_atom": obj.get("total_amount_atom"),
            "total_discount_amount_atoms": [InvoiceDiscountAmountsExternal.from_dict(_item) for _item in obj["total_discount_amount_atoms"]] if obj.get("total_discount_amount_atoms") is not None else None,
            "total_excluding_taxes_amount_atom": obj.get("total_excluding_taxes_amount_atom"),
            "trial_end_for_sub": obj.get("trial_end_for_sub"),
            "trial_start_for_sub": obj.get("trial_start_for_sub")
        })
        return _obj


