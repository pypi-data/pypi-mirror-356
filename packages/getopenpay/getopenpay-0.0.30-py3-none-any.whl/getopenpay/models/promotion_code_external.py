# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from getopenpay.models.coupon_external import CouponExternal
from getopenpay.models.object_name import ObjectName
from getopenpay.models.promo_restrictions import PromoRestrictions
from typing import Optional, Set
from typing_extensions import Self

class PromotionCodeExternal(BaseModel):
    """
    PromotionCodeExternal
    """ # noqa: E501
    code: StrictStr
    coupon: CouponExternal = Field(description="Coupon object for this promotion code.")
    coupon_id: StrictStr
    created_at: datetime = Field(description="DateTime at which the object was created, in 'ISO 8601' format.")
    customer_ids: Optional[List[StrictStr]] = Field(default=None, description="List of customer ids who can redeem this PromotionCode. If empty all customers can redeem it.")
    expires_at: Optional[datetime] = None
    id: StrictStr
    is_active: StrictBool
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    max_redemptions: Optional[StrictInt] = None
    max_redemptions_per_customer: Optional[StrictInt] = None
    metadata: Optional[Dict[str, Any]] = None
    object: Optional[ObjectName] = None
    restrictions: Optional[PromoRestrictions]
    times_redeemed: Optional[StrictInt] = None
    updated_at: datetime = Field(description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties: ClassVar[List[str]] = ["code", "coupon", "coupon_id", "created_at", "customer_ids", "expires_at", "id", "is_active", "is_deleted", "max_redemptions", "max_redemptions_per_customer", "metadata", "object", "restrictions", "times_redeemed", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PromotionCodeExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of coupon
        if self.coupon:
            _dict['coupon'] = self.coupon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restrictions
        if self.restrictions:
            _dict['restrictions'] = self.restrictions.to_dict()
        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expires_at'] = None

        # set to None if max_redemptions (nullable) is None
        # and model_fields_set contains the field
        if self.max_redemptions is None and "max_redemptions" in self.model_fields_set:
            _dict['max_redemptions'] = None

        # set to None if max_redemptions_per_customer (nullable) is None
        # and model_fields_set contains the field
        if self.max_redemptions_per_customer is None and "max_redemptions_per_customer" in self.model_fields_set:
            _dict['max_redemptions_per_customer'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if restrictions (nullable) is None
        # and model_fields_set contains the field
        if self.restrictions is None and "restrictions" in self.model_fields_set:
            _dict['restrictions'] = None

        # set to None if times_redeemed (nullable) is None
        # and model_fields_set contains the field
        if self.times_redeemed is None and "times_redeemed" in self.model_fields_set:
            _dict['times_redeemed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PromotionCodeExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "coupon": CouponExternal.from_dict(obj["coupon"]) if obj.get("coupon") is not None else None,
            "coupon_id": obj.get("coupon_id"),
            "created_at": obj.get("created_at"),
            "customer_ids": obj.get("customer_ids"),
            "expires_at": obj.get("expires_at"),
            "id": obj.get("id"),
            "is_active": obj.get("is_active"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "max_redemptions": obj.get("max_redemptions"),
            "max_redemptions_per_customer": obj.get("max_redemptions_per_customer"),
            "metadata": obj.get("metadata"),
            "object": obj.get("object"),
            "restrictions": PromoRestrictions.from_dict(obj["restrictions"]) if obj.get("restrictions") is not None else None,
            "times_redeemed": obj.get("times_redeemed"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


