# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from getopenpay.models.complete_address import CompleteAddress
from getopenpay.models.object_name import ObjectName
from getopenpay.models.payment_method_mapping_external import PaymentMethodMappingExternal
from getopenpay.models.payment_provider_type import PaymentProviderType
from typing import Optional, Set
from typing_extensions import Self

class TokenizedCreditCardExternal(BaseModel):
    """
    TokenizedCreditCardExternal
    """ # noqa: E501
    billing_address: Optional[CompleteAddress] = None
    card_brand: Optional[StrictStr] = None
    card_country: Optional[StrictStr] = None
    card_fingerprint: Optional[StrictStr] = None
    card_iin: Optional[StrictStr] = None
    card_issuer: Optional[StrictStr] = None
    card_type: Optional[StrictStr] = None
    cde_external_id: Optional[StrictStr] = None
    created_at: datetime = Field(description="DateTime at which the object was created, in 'ISO 8601' format.")
    customer_id: Optional[StrictStr] = None
    display_name: StrictStr = Field(description="Display name for the payment method to show on the UI.")
    expiry_date: Optional[StrictStr]
    id: StrictStr = Field(description="Unique Identifier of the payment_method.")
    is_deleted: Optional[StrictBool] = Field(default=False, description="If true, indicates that this object has been deleted")
    is_full_details_known: StrictBool = Field(description="Indicates if full details of the card are known")
    last_four: Optional[StrictStr] = None
    mappings: Optional[List[PaymentMethodMappingExternal]] = Field(default=None, description="List of payment method mappings associated with this payment method. Include \"mappings\" in the expand parameter to retrieve this data.")
    metadata: Optional[Dict[str, Any]] = None
    object: Optional[ObjectName] = None
    provider: PaymentProviderType = Field(description="The provider type for this payment method")
    updated_at: datetime = Field(description="DateTime at which the object was updated, in 'ISO 8601' format.")
    __properties: ClassVar[List[str]] = ["billing_address", "card_brand", "card_country", "card_fingerprint", "card_iin", "card_issuer", "card_type", "cde_external_id", "created_at", "customer_id", "display_name", "expiry_date", "id", "is_deleted", "is_full_details_known", "last_four", "mappings", "metadata", "object", "provider", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenizedCreditCardExternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mappings (list)
        _items = []
        if self.mappings:
            for _item_mappings in self.mappings:
                if _item_mappings:
                    _items.append(_item_mappings.to_dict())
            _dict['mappings'] = _items
        # set to None if billing_address (nullable) is None
        # and model_fields_set contains the field
        if self.billing_address is None and "billing_address" in self.model_fields_set:
            _dict['billing_address'] = None

        # set to None if card_brand (nullable) is None
        # and model_fields_set contains the field
        if self.card_brand is None and "card_brand" in self.model_fields_set:
            _dict['card_brand'] = None

        # set to None if card_country (nullable) is None
        # and model_fields_set contains the field
        if self.card_country is None and "card_country" in self.model_fields_set:
            _dict['card_country'] = None

        # set to None if card_fingerprint (nullable) is None
        # and model_fields_set contains the field
        if self.card_fingerprint is None and "card_fingerprint" in self.model_fields_set:
            _dict['card_fingerprint'] = None

        # set to None if card_iin (nullable) is None
        # and model_fields_set contains the field
        if self.card_iin is None and "card_iin" in self.model_fields_set:
            _dict['card_iin'] = None

        # set to None if card_issuer (nullable) is None
        # and model_fields_set contains the field
        if self.card_issuer is None and "card_issuer" in self.model_fields_set:
            _dict['card_issuer'] = None

        # set to None if card_type (nullable) is None
        # and model_fields_set contains the field
        if self.card_type is None and "card_type" in self.model_fields_set:
            _dict['card_type'] = None

        # set to None if cde_external_id (nullable) is None
        # and model_fields_set contains the field
        if self.cde_external_id is None and "cde_external_id" in self.model_fields_set:
            _dict['cde_external_id'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customer_id'] = None

        # set to None if expiry_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_date is None and "expiry_date" in self.model_fields_set:
            _dict['expiry_date'] = None

        # set to None if last_four (nullable) is None
        # and model_fields_set contains the field
        if self.last_four is None and "last_four" in self.model_fields_set:
            _dict['last_four'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenizedCreditCardExternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing_address": CompleteAddress.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "card_brand": obj.get("card_brand"),
            "card_country": obj.get("card_country"),
            "card_fingerprint": obj.get("card_fingerprint"),
            "card_iin": obj.get("card_iin"),
            "card_issuer": obj.get("card_issuer"),
            "card_type": obj.get("card_type"),
            "cde_external_id": obj.get("cde_external_id"),
            "created_at": obj.get("created_at"),
            "customer_id": obj.get("customer_id"),
            "display_name": obj.get("display_name"),
            "expiry_date": obj.get("expiry_date"),
            "id": obj.get("id"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "is_full_details_known": obj.get("is_full_details_known"),
            "last_four": obj.get("last_four"),
            "mappings": [PaymentMethodMappingExternal.from_dict(_item) for _item in obj["mappings"]] if obj.get("mappings") is not None else None,
            "metadata": obj.get("metadata"),
            "object": obj.get("object"),
            "provider": obj.get("provider"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


