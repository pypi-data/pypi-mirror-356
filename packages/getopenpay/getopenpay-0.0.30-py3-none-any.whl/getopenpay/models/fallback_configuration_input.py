# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from getopenpay.models.checkout_processors_preferences import CheckoutProcessorsPreferences
from getopenpay.models.selected_price_quantity import SelectedPriceQuantity
from typing import Optional, Set
from typing_extensions import Self

class FallbackConfigurationInput(BaseModel):
    """
    FallbackConfigurationInput
    """ # noqa: E501
    fallback_processor_preferences: Optional[CheckoutProcessorsPreferences] = None
    price_groups: Optional[List[SelectedPriceQuantity]] = Field(default=None, description="List of price groups that will be used to fall back to if the selected product price quantity fails to be created.")
    __properties: ClassVar[List[str]] = ["fallback_processor_preferences", "price_groups"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FallbackConfigurationInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fallback_processor_preferences
        if self.fallback_processor_preferences:
            _dict['fallback_processor_preferences'] = self.fallback_processor_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in price_groups (list)
        _items = []
        if self.price_groups:
            for _item_price_groups in self.price_groups:
                if _item_price_groups:
                    _items.append(_item_price_groups.to_dict())
            _dict['price_groups'] = _items
        # set to None if fallback_processor_preferences (nullable) is None
        # and model_fields_set contains the field
        if self.fallback_processor_preferences is None and "fallback_processor_preferences" in self.model_fields_set:
            _dict['fallback_processor_preferences'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FallbackConfigurationInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fallback_processor_preferences": CheckoutProcessorsPreferences.from_dict(obj["fallback_processor_preferences"]) if obj.get("fallback_processor_preferences") is not None else None,
            "price_groups": [SelectedPriceQuantity.from_dict(_item) for _item in obj["price_groups"]] if obj.get("price_groups") is not None else None
        })
        return _obj


