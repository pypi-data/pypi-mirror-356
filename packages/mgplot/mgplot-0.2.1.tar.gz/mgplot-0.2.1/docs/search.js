window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "mgplot", "modulename": "mgplot", "kind": "module", "doc": "<h2 id=\"mgplot\">mgplot</h2>\n\n<p>Package to provide a frontend to matplotlib for working\nwith timeseries data that is indexed with a PeriodIndex.</p>\n"}, {"fullname": "mgplot.get_setting", "modulename": "mgplot", "qualname": "get_setting", "kind": "function", "doc": "<p>Get a setting from the global settings.</p>\n\n<p>Arguments:</p>\n\n<ul>\n<li>setting: str - name of the setting to get. The possible settings are:\n<ul>\n<li>file_type: str - the file type to use for saving plots</li>\n<li>figsize: tuple[float, float] - the figure size to use for plots</li>\n<li>file_dpi: int - the DPI to use for saving plots</li>\n<li>line_narrow: float - the line width for narrow lines</li>\n<li>line_normal: float - the line width for normal lines</li>\n<li>line_wide: float - the line width for wide lines</li>\n<li>bar_width: float - the width of bars in bar plots</li>\n<li>legend_font_size: float | str - the font size for legends</li>\n<li>legend: dict[str, Any] - the legend settings</li>\n<li>colors: dict[int, list[str]] - a dictionary of colors for\ndifferent numbers of lines</li>\n<li>chart_dir: str - the directory to save charts in</li>\n</ul></li>\n</ul>\n\n<p>Raises:\n    - KeyError: if the setting is not found</p>\n\n<p>Returns:\n    - value: Any - the value of the setting</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">setting</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.set_setting", "modulename": "mgplot", "qualname": "set_setting", "kind": "function", "doc": "<p>Set a setting in the global settings.\nRaises KeyError if the setting is not found.</p>\n\n<p>Arguments:\n    - setting: str - name of the setting to set (see get_setting())\n    - value: Any - the value to set the setting to</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">setting</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.set_chart_dir", "modulename": "mgplot", "qualname": "set_chart_dir", "kind": "function", "doc": "<p>A function to set a global chart directory for finalise_plot(),\nso that it does not need to be included as an argument in each\ncall to finalise_plot(). Create the directory if it does not exist.</p>\n\n<p>Note: Path.mkdir() may raise an exception if a directory cannot be created.</p>\n\n<p>Note: This is a wrapper for set_setting() to set the chart_dir setting, and\ncreate the directory if it does not exist.</p>\n\n<p>Arguments:\n    - chart_dir: str - the directory to set as the chart directory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chart_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.clear_chart_dir", "modulename": "mgplot", "qualname": "clear_chart_dir", "kind": "function", "doc": "<p>Remove all graph-image files from the global chart_dir.\nThis is a convenience function to remove all files from the\nchart_dir directory. It does not remove the directory itself.\nNote: the function creates the directory if it does not exist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.get_color", "modulename": "mgplot", "qualname": "get_color", "kind": "function", "doc": "<p>Return a matplotlib color for a party label\nor an Australian state/territory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.get_party_palette", "modulename": "mgplot", "qualname": "get_party_palette", "kind": "function", "doc": "<p>Return a matplotlib color-map name based on party_text.\nWorks for Australian major political parties.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">party_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.colorise_list", "modulename": "mgplot", "qualname": "colorise_list", "kind": "function", "doc": "<p>Return a list of party/state colors for a party_list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">party_list</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.contrast", "modulename": "mgplot", "qualname": "contrast", "kind": "function", "doc": "<p>Provide a constrasting color to any party color\ngenerated by get_color() above.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">orig_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.abbreviate_state", "modulename": "mgplot", "qualname": "abbreviate_state", "kind": "function", "doc": "<p>A function to abbreviate long-form state\nnames.</p>\n\n<p>Arguments</p>\n\n<ul>\n<li>state: the long-form state name.</li>\n</ul>\n\n<p>Return the abbreviation for a state name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.state_names", "modulename": "mgplot", "qualname": "state_names", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;New South Wales&#x27;, &#x27;Victoria&#x27;, &#x27;Queensland&#x27;, &#x27;South Australia&#x27;, &#x27;Western Australia&#x27;, &#x27;Tasmania&#x27;, &#x27;Northern Territory&#x27;, &#x27;Australian Capital Territory&#x27;)"}, {"fullname": "mgplot.state_abbrs", "modulename": "mgplot", "qualname": "state_abbrs", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;NSW&#x27;, &#x27;Vic&#x27;, &#x27;Qld&#x27;, &#x27;SA&#x27;, &#x27;WA&#x27;, &#x27;Tas&#x27;, &#x27;NT&#x27;, &#x27;ACT&#x27;)"}, {"fullname": "mgplot.bar_plot", "modulename": "mgplot", "qualname": "bar_plot", "kind": "function", "doc": "<p>Create a bar plot from the given data. Each column in the DataFrame\nwill be stacked on top of each other, with positive values above\nzero and negative values below zero.</p>\n\n<p>Parameters</p>\n\n<ul>\n<li>data: Series - The data to plot. Can be a DataFrame or a Series.</li>\n<li>**kwargs: BarKwargs - Additional keyword arguments for customization.\n(see BarKwargs for details)</li>\n</ul>\n\n<p>Note: This function does not assume all data is timeseries with a PeriodIndex,</p>\n\n<p>Returns</p>\n\n<ul>\n<li>axes: Axes - The axes for the plot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">bar_plot</span><span class=\"o\">.</span><span class=\"n\">BarKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.BarKwargs", "modulename": "mgplot", "qualname": "BarKwargs", "kind": "class", "doc": "<p>Keyword arguments for the bar_plot function.</p>\n", "bases": "mgplot.keyword_checking.BaseKwargs"}, {"fullname": "mgplot.BarKwargs.ax", "modulename": "mgplot", "qualname": "BarKwargs.ax", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[matplotlib.axes._axes.Axes | None]"}, {"fullname": "mgplot.BarKwargs.stacked", "modulename": "mgplot", "qualname": "BarKwargs.stacked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.BarKwargs.max_ticks", "modulename": "mgplot", "qualname": "BarKwargs.max_ticks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int]"}, {"fullname": "mgplot.BarKwargs.plot_from", "modulename": "mgplot", "qualname": "BarKwargs.plot_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | pandas._libs.tslibs.period.Period]"}, {"fullname": "mgplot.BarKwargs.color", "modulename": "mgplot", "qualname": "BarKwargs.color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str]]"}, {"fullname": "mgplot.BarKwargs.label_series", "modulename": "mgplot", "qualname": "BarKwargs.label_series", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool | Sequence[bool]]"}, {"fullname": "mgplot.BarKwargs.width", "modulename": "mgplot", "qualname": "BarKwargs.width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float | int | Sequence[float | int]]"}, {"fullname": "mgplot.BarKwargs.annotate", "modulename": "mgplot", "qualname": "BarKwargs.annotate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.BarKwargs.fontsize", "modulename": "mgplot", "qualname": "BarKwargs.fontsize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | float | str]"}, {"fullname": "mgplot.BarKwargs.fontname", "modulename": "mgplot", "qualname": "BarKwargs.fontname", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.BarKwargs.rounding", "modulename": "mgplot", "qualname": "BarKwargs.rounding", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int]"}, {"fullname": "mgplot.BarKwargs.rotation", "modulename": "mgplot", "qualname": "BarKwargs.rotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | float]"}, {"fullname": "mgplot.BarKwargs.annotate_color", "modulename": "mgplot", "qualname": "BarKwargs.annotate_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.BarKwargs.above", "modulename": "mgplot", "qualname": "BarKwargs.above", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.line_plot", "modulename": "mgplot", "qualname": "line_plot", "kind": "function", "doc": "<p>Build a single plot from the data passed in.\nThis can be a single- or multiple-line plot.\nReturn the axes object for the build.</p>\n\n<p>Arguments:</p>\n\n<ul>\n<li>data: DataFrame | Series - data to plot</li>\n<li>kwargs: Unpack[LineKwargs]</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>axes: Axes - the axes object for the plot</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">line_plot</span><span class=\"o\">.</span><span class=\"n\">LineKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.LineKwargs", "modulename": "mgplot", "qualname": "LineKwargs", "kind": "class", "doc": "<p>Keyword arguments for the line_plot function.</p>\n", "bases": "mgplot.keyword_checking.BaseKwargs"}, {"fullname": "mgplot.LineKwargs.ax", "modulename": "mgplot", "qualname": "LineKwargs.ax", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[matplotlib.axes._axes.Axes | None]"}, {"fullname": "mgplot.LineKwargs.style", "modulename": "mgplot", "qualname": "LineKwargs.style", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str]]"}, {"fullname": "mgplot.LineKwargs.width", "modulename": "mgplot", "qualname": "LineKwargs.width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float | int | Sequence[float | int]]"}, {"fullname": "mgplot.LineKwargs.color", "modulename": "mgplot", "qualname": "LineKwargs.color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str]]"}, {"fullname": "mgplot.LineKwargs.alpha", "modulename": "mgplot", "qualname": "LineKwargs.alpha", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float | Sequence[float]]"}, {"fullname": "mgplot.LineKwargs.drawstyle", "modulename": "mgplot", "qualname": "LineKwargs.drawstyle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str] | None]"}, {"fullname": "mgplot.LineKwargs.marker", "modulename": "mgplot", "qualname": "LineKwargs.marker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str] | None]"}, {"fullname": "mgplot.LineKwargs.markersize", "modulename": "mgplot", "qualname": "LineKwargs.markersize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float | Sequence[float] | int | None]"}, {"fullname": "mgplot.LineKwargs.dropna", "modulename": "mgplot", "qualname": "LineKwargs.dropna", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool | Sequence[bool]]"}, {"fullname": "mgplot.LineKwargs.annotate", "modulename": "mgplot", "qualname": "LineKwargs.annotate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool | Sequence[bool]]"}, {"fullname": "mgplot.LineKwargs.rounding", "modulename": "mgplot", "qualname": "LineKwargs.rounding", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[Sequence[int | bool] | int | bool | None]"}, {"fullname": "mgplot.LineKwargs.fontsize", "modulename": "mgplot", "qualname": "LineKwargs.fontsize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[Sequence[str | int | float] | str | int | float]"}, {"fullname": "mgplot.LineKwargs.fontname", "modulename": "mgplot", "qualname": "LineKwargs.fontname", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str]]"}, {"fullname": "mgplot.LineKwargs.rotation", "modulename": "mgplot", "qualname": "LineKwargs.rotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float | int | Sequence[float | int]]"}, {"fullname": "mgplot.LineKwargs.annotate_color", "modulename": "mgplot", "qualname": "LineKwargs.annotate_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str] | bool | Sequence[bool] | None]"}, {"fullname": "mgplot.LineKwargs.plot_from", "modulename": "mgplot", "qualname": "LineKwargs.plot_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | pandas._libs.tslibs.period.Period | None]"}, {"fullname": "mgplot.LineKwargs.label_series", "modulename": "mgplot", "qualname": "LineKwargs.label_series", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool | Sequence[bool] | None]"}, {"fullname": "mgplot.LineKwargs.max_ticks", "modulename": "mgplot", "qualname": "LineKwargs.max_ticks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int]"}, {"fullname": "mgplot.seastrend_plot", "modulename": "mgplot", "qualname": "seastrend_plot", "kind": "function", "doc": "<p>Publish a DataFrame, where the first column is seasonally\nadjusted data, and the second column is trend data.</p>\n\n<p>Aguments:</p>\n\n<ul>\n<li>data: DataFrame - the data to plot with the first column\nbeing the seasonally adjusted data, and the second column\nbeing the trend data.\nThe remaining arguments are the same as those passed to\nline_plot().</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>a matplotlib Axes object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">line_plot</span><span class=\"o\">.</span><span class=\"n\">LineKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.postcovid_plot", "modulename": "mgplot", "qualname": "postcovid_plot", "kind": "function", "doc": "<p>Plots a series with a PeriodIndex.</p>\n\n<p>Arguments</p>\n\n<ul>\n<li>data - the series to be plotted (note that this function\nis designed to work with a single series, not a DataFrame).</li>\n<li>**kwargs - same as for line_plot() and finalise_plot().</li>\n</ul>\n\n<p>Raises:</p>\n\n<ul>\n<li>TypeError if series is not a pandas Series</li>\n<li>TypeError if series does not have a PeriodIndex</li>\n<li>ValueError if series does not have a D, M or Q frequency</li>\n<li>ValueError if regression start is after regression end</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">postcovid_plot</span><span class=\"o\">.</span><span class=\"n\">PostcovidKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.PostcovidKwargs", "modulename": "mgplot", "qualname": "PostcovidKwargs", "kind": "class", "doc": "<p>Keyword arguments for the post-COVID plot.</p>\n", "bases": "mgplot.line_plot.LineKwargs"}, {"fullname": "mgplot.PostcovidKwargs.start_r", "modulename": "mgplot", "qualname": "PostcovidKwargs.start_r", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[pandas._libs.tslibs.period.Period]"}, {"fullname": "mgplot.PostcovidKwargs.end_r", "modulename": "mgplot", "qualname": "PostcovidKwargs.end_r", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[pandas._libs.tslibs.period.Period]"}, {"fullname": "mgplot.run_plot", "modulename": "mgplot", "qualname": "run_plot", "kind": "function", "doc": "<p>Plot a series of percentage rates, highlighting the increasing runs.</p>\n\n<p>Arguments</p>\n\n<ul>\n<li>data - ordered pandas Series of percentages, with PeriodIndex</li>\n<li>**kwargs: RunKwargs</li>\n</ul>\n\n<p>Return</p>\n\n<ul>\n<li>matplotlib Axes object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">run_plot</span><span class=\"o\">.</span><span class=\"n\">RunKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.RunKwargs", "modulename": "mgplot", "qualname": "RunKwargs", "kind": "class", "doc": "<p>Keyword arguments for the run_plot function.</p>\n", "bases": "mgplot.line_plot.LineKwargs"}, {"fullname": "mgplot.RunKwargs.threshold", "modulename": "mgplot", "qualname": "RunKwargs.threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float]"}, {"fullname": "mgplot.RunKwargs.highlight", "modulename": "mgplot", "qualname": "RunKwargs.highlight", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str]]"}, {"fullname": "mgplot.RunKwargs.direction", "modulename": "mgplot", "qualname": "RunKwargs.direction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.revision_plot", "modulename": "mgplot", "qualname": "revision_plot", "kind": "function", "doc": "<p>Plot the revisions to ABS data.</p>\n\n<p>Arguments\ndata: pd.DataFrame - the data to plot, the DataFrame has a\n    column for each data revision\nkwargs - additional keyword arguments for the line_plot function.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">line_plot</span><span class=\"o\">.</span><span class=\"n\">LineKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.growth_plot", "modulename": "mgplot", "qualname": "growth_plot", "kind": "function", "doc": "<p>Plot annual growth (as a line) and periodic growth (as bars)\non the same axes.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>data: A pandas DataFrame with two columns:</li>\n<li>kwargs: GrowthKwargs</li>\n</ul>\n\n<pre><code>    Returns:\n</code></pre>\n\n<p></p>\n\n<ul>\n<li>axes: The matplotlib Axes object.</li>\n</ul>\n\n<p>Raises:</p>\n\n<ul>\n<li>TypeError if the annual and periodic arguments are not pandas Series.</li>\n<li>TypeError if the annual index is not a PeriodIndex.</li>\n<li>ValueError if the annual and periodic series do not have the same index.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">growth_plot</span><span class=\"o\">.</span><span class=\"n\">GrowthKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.GrowthKwargs", "modulename": "mgplot", "qualname": "GrowthKwargs", "kind": "class", "doc": "<p>Keyword arguments for the growth_plot function.</p>\n", "bases": "mgplot.keyword_checking.BaseKwargs"}, {"fullname": "mgplot.GrowthKwargs.ax", "modulename": "mgplot", "qualname": "GrowthKwargs.ax", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[matplotlib.axes._axes.Axes | None]"}, {"fullname": "mgplot.GrowthKwargs.plot_from", "modulename": "mgplot", "qualname": "GrowthKwargs.plot_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | pandas._libs.tslibs.period.Period]"}, {"fullname": "mgplot.GrowthKwargs.label_series", "modulename": "mgplot", "qualname": "GrowthKwargs.label_series", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.GrowthKwargs.max_ticks", "modulename": "mgplot", "qualname": "GrowthKwargs.max_ticks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int]"}, {"fullname": "mgplot.GrowthKwargs.line_width", "modulename": "mgplot", "qualname": "GrowthKwargs.line_width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | float]"}, {"fullname": "mgplot.GrowthKwargs.line_color", "modulename": "mgplot", "qualname": "GrowthKwargs.line_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.GrowthKwargs.line_style", "modulename": "mgplot", "qualname": "GrowthKwargs.line_style", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.GrowthKwargs.annotate_line", "modulename": "mgplot", "qualname": "GrowthKwargs.annotate_line", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.GrowthKwargs.line_rounding", "modulename": "mgplot", "qualname": "GrowthKwargs.line_rounding", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool | int]"}, {"fullname": "mgplot.GrowthKwargs.line_fontsize", "modulename": "mgplot", "qualname": "GrowthKwargs.line_fontsize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | float | str]"}, {"fullname": "mgplot.GrowthKwargs.line_fontname", "modulename": "mgplot", "qualname": "GrowthKwargs.line_fontname", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.GrowthKwargs.line_anno_color", "modulename": "mgplot", "qualname": "GrowthKwargs.line_anno_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.GrowthKwargs.annotate_bars", "modulename": "mgplot", "qualname": "GrowthKwargs.annotate_bars", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.GrowthKwargs.bar_fontsize", "modulename": "mgplot", "qualname": "GrowthKwargs.bar_fontsize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | float | str]"}, {"fullname": "mgplot.GrowthKwargs.bar_fontname", "modulename": "mgplot", "qualname": "GrowthKwargs.bar_fontname", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.GrowthKwargs.bar_rounding", "modulename": "mgplot", "qualname": "GrowthKwargs.bar_rounding", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int]"}, {"fullname": "mgplot.GrowthKwargs.bar_width", "modulename": "mgplot", "qualname": "GrowthKwargs.bar_width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float]"}, {"fullname": "mgplot.GrowthKwargs.bar_color", "modulename": "mgplot", "qualname": "GrowthKwargs.bar_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.GrowthKwargs.bar_anno_color", "modulename": "mgplot", "qualname": "GrowthKwargs.bar_anno_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.GrowthKwargs.bar_rotation", "modulename": "mgplot", "qualname": "GrowthKwargs.bar_rotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | float]"}, {"fullname": "mgplot.series_growth_plot", "modulename": "mgplot", "qualname": "series_growth_plot", "kind": "function", "doc": "<p>Plot annual and periodic growth in percentage terms from\na pandas Series, and finalise the plot.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>data: A pandas Series with an appropriate PeriodIndex.</li>\n<li>kwargs: SeriesGrowthKwargs\n<ul>\n<li>takes much the same kwargs as for growth_plot()</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">growth_plot</span><span class=\"o\">.</span><span class=\"n\">SeriesGrowthKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.SeriesGrowthKwargs", "modulename": "mgplot", "qualname": "SeriesGrowthKwargs", "kind": "class", "doc": "<p>Keyword arguments for the series_growth_plot function.</p>\n", "bases": "mgplot.growth_plot.GrowthKwargs"}, {"fullname": "mgplot.SeriesGrowthKwargs.ylabel", "modulename": "mgplot", "qualname": "SeriesGrowthKwargs.ylabel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | None]"}, {"fullname": "mgplot.calc_growth", "modulename": "mgplot", "qualname": "calc_growth", "kind": "function", "doc": "<p>Calculate annual and periodic growth for a pandas Series,\nwhere the index is a PeriodIndex.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>series: A pandas Series with an appropriate PeriodIndex.</li>\n</ul>\n\n<p>Returns a two column DataFrame:</p>\n\n<p>Raises</p>\n\n<ul>\n<li>TypeError if the series is not a pandas Series.</li>\n<li>TypeError if the series index is not a PeriodIndex.</li>\n<li>ValueError if the series is empty.</li>\n<li>ValueError if the series index does not have a frequency of Q, M, or D.</li>\n<li>ValueError if the series index has duplicates.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.summary_plot", "modulename": "mgplot", "qualname": "summary_plot", "kind": "function", "doc": "<p>Plot a summary of historical data for a given DataFrame.</p>\n\n<p>Args:x</p>\n\n<ul>\n<li>summary: DataFrame containing the summary data. The column names are\nused as labels for the plot.</li>\n<li>kwargs: additional arguments for the plot, including:</li>\n</ul>\n\n<p>Returns Axes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">summary_plot</span><span class=\"o\">.</span><span class=\"n\">SummaryKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.SummaryKwargs", "modulename": "mgplot", "qualname": "SummaryKwargs", "kind": "class", "doc": "<p>Keyword arguments for the summary_plot function.</p>\n", "bases": "mgplot.keyword_checking.BaseKwargs"}, {"fullname": "mgplot.SummaryKwargs.ax", "modulename": "mgplot", "qualname": "SummaryKwargs.ax", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[matplotlib.axes._axes.Axes | None]"}, {"fullname": "mgplot.SummaryKwargs.verbose", "modulename": "mgplot", "qualname": "SummaryKwargs.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.SummaryKwargs.middle", "modulename": "mgplot", "qualname": "SummaryKwargs.middle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float]"}, {"fullname": "mgplot.SummaryKwargs.plot_type", "modulename": "mgplot", "qualname": "SummaryKwargs.plot_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.SummaryKwargs.plot_from", "modulename": "mgplot", "qualname": "SummaryKwargs.plot_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | pandas._libs.tslibs.period.Period | None]"}, {"fullname": "mgplot.SummaryKwargs.legend", "modulename": "mgplot", "qualname": "SummaryKwargs.legend", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[dict[str, Any]]"}, {"fullname": "mgplot.multi_start", "modulename": "mgplot", "qualname": "multi_start", "kind": "function", "doc": "<p>Create multiple plots with different starting points.\nEach plot will start from the specified starting point.</p>\n\n<p>Parameters</p>\n\n<ul>\n<li>data: Series | DataFrame - The data to be plotted.</li>\n<li>function: Callable | list[Callable] - The plotting function\nto be used.</li>\n<li>starts: Iterable[Period | int | None] - The starting points\nfor each plot (None means use the entire data).</li>\n<li>**kwargs: Additional keyword arguments to be passed to\nthe plotting function.</li>\n</ul>\n\n<p>Returns None.</p>\n\n<p>Raises</p>\n\n<ul>\n<li>ValueError if the starts is not an iterable of None, Period or int.</li>\n</ul>\n\n<p>Note: kwargs['tag'] is used to create a unique tag for each plot.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">starts</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">_libs</span><span class=\"o\">.</span><span class=\"n\">tslibs</span><span class=\"o\">.</span><span class=\"n\">period</span><span class=\"o\">.</span><span class=\"n\">Period</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.multi_column", "modulename": "mgplot", "qualname": "multi_column", "kind": "function", "doc": "<p>Create multiple plots, one for each column in a DataFrame.\nThe plot title will be the column name.</p>\n\n<p>Parameters</p>\n\n<ul>\n<li>data: DataFrame - The data to be plotted</li>\n<li>function: Callable - The plotting function to be used.</li>\n<li>**kwargs: Additional keyword arguments to be passed to\nthe plotting function.</li>\n</ul>\n\n<p>Returns None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.plot_then_finalise", "modulename": "mgplot", "qualname": "plot_then_finalise", "kind": "function", "doc": "<p>Chain a plotting function with the finalise_plot() function.\nThis is designed to be the last function in a chain.</p>\n\n<p>Parameters</p>\n\n<ul>\n<li>data: Series | DataFrame - The data to be plotted.</li>\n<li>function: Callable | list[Callable] - The plotting function\nto be used.</li>\n<li>**kwargs: Additional keyword arguments to be passed to\nthe plotting function, and then the finalise_plot() function.</li>\n</ul>\n\n<p>Returns None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.finalise_plot", "modulename": "mgplot", "qualname": "finalise_plot", "kind": "function", "doc": "<p>A function to finalise and save plots to the file system. The filename\nfor the saved plot is constructed from the global chart_dir, the plot's title,\nany specified tag text, and the file_type for the plot.</p>\n\n<p>Arguments:</p>\n\n<ul>\n<li>axes - matplotlib axes object - required</li>\n<li>kwargs: FinaliseKwargs</li>\n</ul>\n\n<p>Returns:\n    - None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">finalise_plot</span><span class=\"o\">.</span><span class=\"n\">FinaliseKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.FinaliseKwargs", "modulename": "mgplot", "qualname": "FinaliseKwargs", "kind": "class", "doc": "<p>Keyword arguments for the finalise_plot function.</p>\n", "bases": "mgplot.keyword_checking.BaseKwargs"}, {"fullname": "mgplot.FinaliseKwargs.title", "modulename": "mgplot", "qualname": "FinaliseKwargs.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | None]"}, {"fullname": "mgplot.FinaliseKwargs.xlabel", "modulename": "mgplot", "qualname": "FinaliseKwargs.xlabel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | None]"}, {"fullname": "mgplot.FinaliseKwargs.ylabel", "modulename": "mgplot", "qualname": "FinaliseKwargs.ylabel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | None]"}, {"fullname": "mgplot.FinaliseKwargs.xlim", "modulename": "mgplot", "qualname": "FinaliseKwargs.xlim", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[tuple[float, float] | None]"}, {"fullname": "mgplot.FinaliseKwargs.ylim", "modulename": "mgplot", "qualname": "FinaliseKwargs.ylim", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[tuple[float, float] | None]"}, {"fullname": "mgplot.FinaliseKwargs.xticks", "modulename": "mgplot", "qualname": "FinaliseKwargs.xticks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[list[float] | None]"}, {"fullname": "mgplot.FinaliseKwargs.yticks", "modulename": "mgplot", "qualname": "FinaliseKwargs.yticks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[list[float] | None]"}, {"fullname": "mgplot.FinaliseKwargs.x_scale", "modulename": "mgplot", "qualname": "FinaliseKwargs.x_scale", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | None]"}, {"fullname": "mgplot.FinaliseKwargs.y_scale", "modulename": "mgplot", "qualname": "FinaliseKwargs.y_scale", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | None]"}, {"fullname": "mgplot.FinaliseKwargs.legend", "modulename": "mgplot", "qualname": "FinaliseKwargs.legend", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool | dict[str, Any] | None]"}, {"fullname": "mgplot.FinaliseKwargs.axhspan", "modulename": "mgplot", "qualname": "FinaliseKwargs.axhspan", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[dict[str, Any]]"}, {"fullname": "mgplot.FinaliseKwargs.axvspan", "modulename": "mgplot", "qualname": "FinaliseKwargs.axvspan", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[dict[str, Any]]"}, {"fullname": "mgplot.FinaliseKwargs.axhline", "modulename": "mgplot", "qualname": "FinaliseKwargs.axhline", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[dict[str, Any]]"}, {"fullname": "mgplot.FinaliseKwargs.axvline", "modulename": "mgplot", "qualname": "FinaliseKwargs.axvline", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[dict[str, Any]]"}, {"fullname": "mgplot.FinaliseKwargs.lfooter", "modulename": "mgplot", "qualname": "FinaliseKwargs.lfooter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.FinaliseKwargs.rfooter", "modulename": "mgplot", "qualname": "FinaliseKwargs.rfooter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.FinaliseKwargs.lheader", "modulename": "mgplot", "qualname": "FinaliseKwargs.lheader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.FinaliseKwargs.rheader", "modulename": "mgplot", "qualname": "FinaliseKwargs.rheader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.FinaliseKwargs.pre_tag", "modulename": "mgplot", "qualname": "FinaliseKwargs.pre_tag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.FinaliseKwargs.tag", "modulename": "mgplot", "qualname": "FinaliseKwargs.tag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.FinaliseKwargs.chart_dir", "modulename": "mgplot", "qualname": "FinaliseKwargs.chart_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.FinaliseKwargs.file_type", "modulename": "mgplot", "qualname": "FinaliseKwargs.file_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.FinaliseKwargs.dpi", "modulename": "mgplot", "qualname": "FinaliseKwargs.dpi", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int]"}, {"fullname": "mgplot.FinaliseKwargs.figsize", "modulename": "mgplot", "qualname": "FinaliseKwargs.figsize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[tuple[float, float]]"}, {"fullname": "mgplot.FinaliseKwargs.show", "modulename": "mgplot", "qualname": "FinaliseKwargs.show", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.FinaliseKwargs.preserve_lims", "modulename": "mgplot", "qualname": "FinaliseKwargs.preserve_lims", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.FinaliseKwargs.remove_legend", "modulename": "mgplot", "qualname": "FinaliseKwargs.remove_legend", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.FinaliseKwargs.zero_y", "modulename": "mgplot", "qualname": "FinaliseKwargs.zero_y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.FinaliseKwargs.y0", "modulename": "mgplot", "qualname": "FinaliseKwargs.y0", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.FinaliseKwargs.x0", "modulename": "mgplot", "qualname": "FinaliseKwargs.x0", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.FinaliseKwargs.dont_save", "modulename": "mgplot", "qualname": "FinaliseKwargs.dont_save", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.FinaliseKwargs.dont_close", "modulename": "mgplot", "qualname": "FinaliseKwargs.dont_close", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.bar_plot_finalise", "modulename": "mgplot", "qualname": "bar_plot_finalise", "kind": "function", "doc": "<p>A convenience function to call bar_plot() and finalise_plot().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">finalisers</span><span class=\"o\">.</span><span class=\"n\">BPFKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.line_plot_finalise", "modulename": "mgplot", "qualname": "line_plot_finalise", "kind": "function", "doc": "<p>A convenience function to call line_plot() then finalise_plot().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">finalisers</span><span class=\"o\">.</span><span class=\"n\">LPFKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.postcovid_plot_finalise", "modulename": "mgplot", "qualname": "postcovid_plot_finalise", "kind": "function", "doc": "<p>A convenience function to call postcovid_plot() and finalise_plot().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">finalisers</span><span class=\"o\">.</span><span class=\"n\">PCFKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.growth_plot_finalise", "modulename": "mgplot", "qualname": "growth_plot_finalise", "kind": "function", "doc": "<p>A convenience function to call series_growth_plot() and finalise_plot().\nUse this when you are providing the raw growth data. Don't forget to\nset the ylabel in kwargs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">finalisers</span><span class=\"o\">.</span><span class=\"n\">GrowthPFKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.revision_plot_finalise", "modulename": "mgplot", "qualname": "revision_plot_finalise", "kind": "function", "doc": "<p>A convenience function to call revision_plot() and finalise_plot().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">finalisers</span><span class=\"o\">.</span><span class=\"n\">RevPFKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.run_plot_finalise", "modulename": "mgplot", "qualname": "run_plot_finalise", "kind": "function", "doc": "<p>A convenience function to call run_plot() and finalise_plot().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">finalisers</span><span class=\"o\">.</span><span class=\"n\">RunPFKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.seastrend_plot_finalise", "modulename": "mgplot", "qualname": "seastrend_plot_finalise", "kind": "function", "doc": "<p>A convenience function to call seas_trend_plot() and finalise_plot().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">finalisers</span><span class=\"o\">.</span><span class=\"n\">SFKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.series_growth_plot_finalise", "modulename": "mgplot", "qualname": "series_growth_plot_finalise", "kind": "function", "doc": "<p>A convenience function to call series_growth_plot() and finalise_plot().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">finalisers</span><span class=\"o\">.</span><span class=\"n\">SGFPKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.summary_plot_finalise", "modulename": "mgplot", "qualname": "summary_plot_finalise", "kind": "function", "doc": "<p>A convenience function to call summary_plot() and finalise_plot().\nThis is more complex than most of the above convienience methods.</p>\n\n<p>Arguments</p>\n\n<ul>\n<li>data: DataFrame containing the summary data. The index must be a PeriodIndex.</li>\n<li>kwargs: additional arguments for the plot</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">finalisers</span><span class=\"o\">.</span><span class=\"n\">SumPFKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.bar_plot", "modulename": "mgplot.bar_plot", "kind": "module", "doc": "<p>bar_plot.py\nThis module contains functions to create bar plots using Matplotlib.\nNote: bar plots in Matplotlib are not the same as bar charts in other\nlibraries. Bar plots are used to represent categorical data with\nrectangular bars. As a result, bar plots and line plots typically\ncannot be plotted on the same axes.</p>\n"}, {"fullname": "mgplot.bar_plot.ME", "modulename": "mgplot.bar_plot", "qualname": "ME", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[str]", "default_value": "&#x27;bar_plot&#x27;"}, {"fullname": "mgplot.bar_plot.BarKwargs", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs", "kind": "class", "doc": "<p>Keyword arguments for the bar_plot function.</p>\n", "bases": "mgplot.keyword_checking.BaseKwargs"}, {"fullname": "mgplot.bar_plot.BarKwargs.ax", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.ax", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[matplotlib.axes._axes.Axes | None]"}, {"fullname": "mgplot.bar_plot.BarKwargs.stacked", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.stacked", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.bar_plot.BarKwargs.max_ticks", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.max_ticks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int]"}, {"fullname": "mgplot.bar_plot.BarKwargs.plot_from", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.plot_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | pandas._libs.tslibs.period.Period]"}, {"fullname": "mgplot.bar_plot.BarKwargs.color", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str]]"}, {"fullname": "mgplot.bar_plot.BarKwargs.label_series", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.label_series", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool | Sequence[bool]]"}, {"fullname": "mgplot.bar_plot.BarKwargs.width", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float | int | Sequence[float | int]]"}, {"fullname": "mgplot.bar_plot.BarKwargs.annotate", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.annotate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.bar_plot.BarKwargs.fontsize", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.fontsize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | float | str]"}, {"fullname": "mgplot.bar_plot.BarKwargs.fontname", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.fontname", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.bar_plot.BarKwargs.rounding", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.rounding", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int]"}, {"fullname": "mgplot.bar_plot.BarKwargs.rotation", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.rotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | float]"}, {"fullname": "mgplot.bar_plot.BarKwargs.annotate_color", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.annotate_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.bar_plot.BarKwargs.above", "modulename": "mgplot.bar_plot", "qualname": "BarKwargs.above", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.bar_plot.annotate_bars", "modulename": "mgplot.bar_plot", "qualname": "annotate_bars", "kind": "function", "doc": "<p>Bar plot annotations.</p>\n\n<p>Note: \"annotate\", \"fontsize\", \"fontname\", \"color\", and \"rotation\" are expected in anno_kwargs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">base</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">anno_kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.bar_plot.grouped", "modulename": "mgplot.bar_plot", "qualname": "grouped", "kind": "function", "doc": "<p>plot a grouped bar plot</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">axes</span>, </span><span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">anno_args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.bar_plot.stacked", "modulename": "mgplot.bar_plot", "qualname": "stacked", "kind": "function", "doc": "<p>plot a stacked bar plot</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">axes</span>, </span><span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">anno_args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.bar_plot.bar_plot", "modulename": "mgplot.bar_plot", "qualname": "bar_plot", "kind": "function", "doc": "<p>Create a bar plot from the given data. Each column in the DataFrame\nwill be stacked on top of each other, with positive values above\nzero and negative values below zero.</p>\n\n<p>Parameters</p>\n\n<ul>\n<li>data: Series - The data to plot. Can be a DataFrame or a Series.</li>\n<li>**kwargs: BarKwargs - Additional keyword arguments for customization.\n(see BarKwargs for details)</li>\n</ul>\n\n<p>Note: This function does not assume all data is timeseries with a PeriodIndex,</p>\n\n<p>Returns</p>\n\n<ul>\n<li>axes: Axes - The axes for the plot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">bar_plot</span><span class=\"o\">.</span><span class=\"n\">BarKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.finalise_plot", "modulename": "mgplot.finalise_plot", "kind": "module", "doc": "<p>finalise_plot.py:\nThis module provides a function to finalise and save plots to the\nfile system. It is used to publish plots.</p>\n"}, {"fullname": "mgplot.finalise_plot.ME", "modulename": "mgplot.finalise_plot", "qualname": "ME", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[str]", "default_value": "&#x27;finalise_plot&#x27;"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs", "kind": "class", "doc": "<p>Keyword arguments for the finalise_plot function.</p>\n", "bases": "mgplot.keyword_checking.BaseKwargs"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.title", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | None]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.xlabel", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.xlabel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | None]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.ylabel", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.ylabel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | None]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.xlim", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.xlim", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[tuple[float, float] | None]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.ylim", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.ylim", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[tuple[float, float] | None]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.xticks", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.xticks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[list[float] | None]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.yticks", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.yticks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[list[float] | None]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.x_scale", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.x_scale", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | None]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.y_scale", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.y_scale", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | None]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.legend", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.legend", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool | dict[str, Any] | None]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.axhspan", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.axhspan", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[dict[str, Any]]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.axvspan", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.axvspan", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[dict[str, Any]]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.axhline", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.axhline", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[dict[str, Any]]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.axvline", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.axvline", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[dict[str, Any]]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.lfooter", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.lfooter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.rfooter", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.rfooter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.lheader", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.lheader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.rheader", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.rheader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.pre_tag", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.pre_tag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.tag", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.tag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.chart_dir", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.chart_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.file_type", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.file_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.dpi", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.dpi", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.figsize", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.figsize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[tuple[float, float]]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.show", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.show", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.preserve_lims", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.preserve_lims", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.remove_legend", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.remove_legend", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.zero_y", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.zero_y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.y0", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.y0", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.x0", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.x0", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.dont_save", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.dont_save", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.finalise_plot.FinaliseKwargs.dont_close", "modulename": "mgplot.finalise_plot", "qualname": "FinaliseKwargs.dont_close", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.finalise_plot.value_kwargs", "modulename": "mgplot.finalise_plot", "qualname": "value_kwargs", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;title&#x27;, &#x27;xlabel&#x27;, &#x27;ylabel&#x27;, &#x27;xlim&#x27;, &#x27;ylim&#x27;, &#x27;xticks&#x27;, &#x27;yticks&#x27;, &#x27;x_scale&#x27;, &#x27;y_scale&#x27;)"}, {"fullname": "mgplot.finalise_plot.splat_kwargs", "modulename": "mgplot.finalise_plot", "qualname": "splat_kwargs", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;legend&#x27;, &#x27;axhspan&#x27;, &#x27;axvspan&#x27;, &#x27;axhline&#x27;, &#x27;axvline&#x27;)"}, {"fullname": "mgplot.finalise_plot.annotation_kwargs", "modulename": "mgplot.finalise_plot", "qualname": "annotation_kwargs", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;lfooter&#x27;, &#x27;rfooter&#x27;, &#x27;lheader&#x27;, &#x27;rheader&#x27;)"}, {"fullname": "mgplot.finalise_plot.make_legend", "modulename": "mgplot.finalise_plot", "qualname": "make_legend", "kind": "function", "doc": "<p>Create a legend for the plot.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">legend</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.finalise_plot.apply_value_kwargs", "modulename": "mgplot.finalise_plot", "qualname": "apply_value_kwargs", "kind": "function", "doc": "<p>Set matplotlib elements by name using Axes.set().</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.finalise_plot.apply_splat_kwargs", "modulename": "mgplot.finalise_plot", "qualname": "apply_splat_kwargs", "kind": "function", "doc": "<p>Set matplotlib elements dynamically using setting_name and splat.\nThis is used for legend, axhspan, axvspan, axhline, and axvline.\nThese can be ignored if not in kwargs, or set to None in kwargs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>, </span><span class=\"param\"><span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.finalise_plot.apply_annotations", "modulename": "mgplot.finalise_plot", "qualname": "apply_annotations", "kind": "function", "doc": "<p>Set figure size and apply chart annotations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.finalise_plot.apply_late_kwargs", "modulename": "mgplot.finalise_plot", "qualname": "apply_late_kwargs", "kind": "function", "doc": "<p>Apply settings found in kwargs, after plotting the data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.finalise_plot.apply_kwargs", "modulename": "mgplot.finalise_plot", "qualname": "apply_kwargs", "kind": "function", "doc": "<p>Apply settings found in kwargs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.finalise_plot.save_to_file", "modulename": "mgplot.finalise_plot", "qualname": "save_to_file", "kind": "function", "doc": "<p>Save the figure to file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fig</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.finalise_plot.finalise_plot", "modulename": "mgplot.finalise_plot", "qualname": "finalise_plot", "kind": "function", "doc": "<p>A function to finalise and save plots to the file system. The filename\nfor the saved plot is constructed from the global chart_dir, the plot's title,\nany specified tag text, and the file_type for the plot.</p>\n\n<p>Arguments:</p>\n\n<ul>\n<li>axes - matplotlib axes object - required</li>\n<li>kwargs: FinaliseKwargs</li>\n</ul>\n\n<p>Returns:\n    - None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">finalise_plot</span><span class=\"o\">.</span><span class=\"n\">FinaliseKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.growth_plot", "modulename": "mgplot.growth_plot", "kind": "module", "doc": "<p>growth_plot.py:\nplot period and annual/through-the-year growth rates on the same axes.</p>\n\n<ul>\n<li>calc_growth()</li>\n<li>growth_plot()</li>\n<li>series_growth_plot()</li>\n</ul>\n"}, {"fullname": "mgplot.growth_plot.GrowthKwargs", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs", "kind": "class", "doc": "<p>Keyword arguments for the growth_plot function.</p>\n", "bases": "mgplot.keyword_checking.BaseKwargs"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.ax", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.ax", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[matplotlib.axes._axes.Axes | None]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.plot_from", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.plot_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | pandas._libs.tslibs.period.Period]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.label_series", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.label_series", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.max_ticks", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.max_ticks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.line_width", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.line_width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | float]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.line_color", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.line_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.line_style", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.line_style", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.annotate_line", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.annotate_line", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.line_rounding", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.line_rounding", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool | int]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.line_fontsize", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.line_fontsize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | float | str]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.line_fontname", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.line_fontname", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.line_anno_color", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.line_anno_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.annotate_bars", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.annotate_bars", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.bar_fontsize", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.bar_fontsize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | float | str]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.bar_fontname", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.bar_fontname", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.bar_rounding", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.bar_rounding", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.bar_width", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.bar_width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.bar_color", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.bar_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.bar_anno_color", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.bar_anno_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.growth_plot.GrowthKwargs.bar_rotation", "modulename": "mgplot.growth_plot", "qualname": "GrowthKwargs.bar_rotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | float]"}, {"fullname": "mgplot.growth_plot.SeriesGrowthKwargs", "modulename": "mgplot.growth_plot", "qualname": "SeriesGrowthKwargs", "kind": "class", "doc": "<p>Keyword arguments for the series_growth_plot function.</p>\n", "bases": "GrowthKwargs"}, {"fullname": "mgplot.growth_plot.SeriesGrowthKwargs.ylabel", "modulename": "mgplot.growth_plot", "qualname": "SeriesGrowthKwargs.ylabel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | None]"}, {"fullname": "mgplot.growth_plot.common_transitions", "modulename": "mgplot.growth_plot", "qualname": "common_transitions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mgplot.keyword_checking.TransitionKwargs", "default_value": "{&#x27;label_series&#x27;: (&#x27;label_series&#x27;, True), &#x27;ax&#x27;: (&#x27;ax&#x27;, None), &#x27;max_ticks&#x27;: (&#x27;max_ticks&#x27;, None), &#x27;plot_from&#x27;: (&#x27;plot_from&#x27;, None), &#x27;report_kwargs&#x27;: (&#x27;report_kwargs&#x27;, None)}"}, {"fullname": "mgplot.growth_plot.to_line_plot", "modulename": "mgplot.growth_plot", "qualname": "to_line_plot", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mgplot.keyword_checking.TransitionKwargs", "default_value": "{&#x27;label_series&#x27;: (&#x27;label_series&#x27;, True), &#x27;ax&#x27;: (&#x27;ax&#x27;, None), &#x27;max_ticks&#x27;: (&#x27;max_ticks&#x27;, None), &#x27;plot_from&#x27;: (&#x27;plot_from&#x27;, None), &#x27;report_kwargs&#x27;: (&#x27;report_kwargs&#x27;, None), &#x27;line_width&#x27;: (&#x27;width&#x27;, None), &#x27;line_color&#x27;: (&#x27;color&#x27;, &#x27;darkblue&#x27;), &#x27;line_style&#x27;: (&#x27;style&#x27;, None), &#x27;annotate_line&#x27;: (&#x27;annotate&#x27;, True), &#x27;line_rounding&#x27;: (&#x27;rounding&#x27;, None), &#x27;line_fontsize&#x27;: (&#x27;fontsize&#x27;, None), &#x27;line_fontname&#x27;: (&#x27;fontname&#x27;, None), &#x27;line_anno_color&#x27;: (&#x27;annotate_color&#x27;, None)}"}, {"fullname": "mgplot.growth_plot.to_bar_plot", "modulename": "mgplot.growth_plot", "qualname": "to_bar_plot", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mgplot.keyword_checking.TransitionKwargs", "default_value": "{&#x27;label_series&#x27;: (&#x27;label_series&#x27;, True), &#x27;ax&#x27;: (&#x27;ax&#x27;, None), &#x27;max_ticks&#x27;: (&#x27;max_ticks&#x27;, None), &#x27;plot_from&#x27;: (&#x27;plot_from&#x27;, None), &#x27;report_kwargs&#x27;: (&#x27;report_kwargs&#x27;, None), &#x27;bar_width&#x27;: (&#x27;width&#x27;, 0.8), &#x27;bar_color&#x27;: (&#x27;color&#x27;, &#x27;#dd0000&#x27;), &#x27;annotate_bars&#x27;: (&#x27;annotate&#x27;, True), &#x27;bar_rounding&#x27;: (&#x27;rounding&#x27;, None), &#x27;above&#x27;: (&#x27;above&#x27;, False), &#x27;bar_rotation&#x27;: (&#x27;rotation&#x27;, None), &#x27;bar_fontsize&#x27;: (&#x27;fontsize&#x27;, None), &#x27;bar_fontname&#x27;: (&#x27;fontname&#x27;, None), &#x27;bar_anno_color&#x27;: (&#x27;annotate_color&#x27;, None)}"}, {"fullname": "mgplot.growth_plot.calc_growth", "modulename": "mgplot.growth_plot", "qualname": "calc_growth", "kind": "function", "doc": "<p>Calculate annual and periodic growth for a pandas Series,\nwhere the index is a PeriodIndex.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>series: A pandas Series with an appropriate PeriodIndex.</li>\n</ul>\n\n<p>Returns a two column DataFrame:</p>\n\n<p>Raises</p>\n\n<ul>\n<li>TypeError if the series is not a pandas Series.</li>\n<li>TypeError if the series index is not a PeriodIndex.</li>\n<li>ValueError if the series is empty.</li>\n<li>ValueError if the series index does not have a frequency of Q, M, or D.</li>\n<li>ValueError if the series index has duplicates.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.growth_plot.growth_plot", "modulename": "mgplot.growth_plot", "qualname": "growth_plot", "kind": "function", "doc": "<p>Plot annual growth (as a line) and periodic growth (as bars)\non the same axes.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>data: A pandas DataFrame with two columns:</li>\n<li>kwargs: GrowthKwargs</li>\n</ul>\n\n<pre><code>    Returns:\n</code></pre>\n\n<p></p>\n\n<ul>\n<li>axes: The matplotlib Axes object.</li>\n</ul>\n\n<p>Raises:</p>\n\n<ul>\n<li>TypeError if the annual and periodic arguments are not pandas Series.</li>\n<li>TypeError if the annual index is not a PeriodIndex.</li>\n<li>ValueError if the annual and periodic series do not have the same index.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">growth_plot</span><span class=\"o\">.</span><span class=\"n\">GrowthKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.growth_plot.series_growth_plot", "modulename": "mgplot.growth_plot", "qualname": "series_growth_plot", "kind": "function", "doc": "<p>Plot annual and periodic growth in percentage terms from\na pandas Series, and finalise the plot.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>data: A pandas Series with an appropriate PeriodIndex.</li>\n<li>kwargs: SeriesGrowthKwargs\n<ul>\n<li>takes much the same kwargs as for growth_plot()</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">growth_plot</span><span class=\"o\">.</span><span class=\"n\">SeriesGrowthKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.line_plot", "modulename": "mgplot.line_plot", "kind": "module", "doc": "<p>line_plot.py:\nPlot a series or a dataframe with lines.</p>\n"}, {"fullname": "mgplot.line_plot.ME", "modulename": "mgplot.line_plot", "qualname": "ME", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[str]", "default_value": "&#x27;line_plot&#x27;"}, {"fullname": "mgplot.line_plot.LineKwargs", "modulename": "mgplot.line_plot", "qualname": "LineKwargs", "kind": "class", "doc": "<p>Keyword arguments for the line_plot function.</p>\n", "bases": "mgplot.keyword_checking.BaseKwargs"}, {"fullname": "mgplot.line_plot.LineKwargs.ax", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.ax", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[matplotlib.axes._axes.Axes | None]"}, {"fullname": "mgplot.line_plot.LineKwargs.style", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.style", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str]]"}, {"fullname": "mgplot.line_plot.LineKwargs.width", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float | int | Sequence[float | int]]"}, {"fullname": "mgplot.line_plot.LineKwargs.color", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str]]"}, {"fullname": "mgplot.line_plot.LineKwargs.alpha", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.alpha", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float | Sequence[float]]"}, {"fullname": "mgplot.line_plot.LineKwargs.drawstyle", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.drawstyle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str] | None]"}, {"fullname": "mgplot.line_plot.LineKwargs.marker", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.marker", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str] | None]"}, {"fullname": "mgplot.line_plot.LineKwargs.markersize", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.markersize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float | Sequence[float] | int | None]"}, {"fullname": "mgplot.line_plot.LineKwargs.dropna", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.dropna", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool | Sequence[bool]]"}, {"fullname": "mgplot.line_plot.LineKwargs.annotate", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.annotate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool | Sequence[bool]]"}, {"fullname": "mgplot.line_plot.LineKwargs.rounding", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.rounding", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[Sequence[int | bool] | int | bool | None]"}, {"fullname": "mgplot.line_plot.LineKwargs.fontsize", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.fontsize", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[Sequence[str | int | float] | str | int | float]"}, {"fullname": "mgplot.line_plot.LineKwargs.fontname", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.fontname", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str]]"}, {"fullname": "mgplot.line_plot.LineKwargs.rotation", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.rotation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float | int | Sequence[float | int]]"}, {"fullname": "mgplot.line_plot.LineKwargs.annotate_color", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.annotate_color", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str] | bool | Sequence[bool] | None]"}, {"fullname": "mgplot.line_plot.LineKwargs.plot_from", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.plot_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | pandas._libs.tslibs.period.Period | None]"}, {"fullname": "mgplot.line_plot.LineKwargs.label_series", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.label_series", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool | Sequence[bool] | None]"}, {"fullname": "mgplot.line_plot.LineKwargs.max_ticks", "modulename": "mgplot.line_plot", "qualname": "LineKwargs.max_ticks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int]"}, {"fullname": "mgplot.line_plot.annotate_series", "modulename": "mgplot.line_plot", "qualname": "annotate_series", "kind": "function", "doc": "<p>Annotate the right-hand end-point of a line-plotted series.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.line_plot.line_plot", "modulename": "mgplot.line_plot", "qualname": "line_plot", "kind": "function", "doc": "<p>Build a single plot from the data passed in.\nThis can be a single- or multiple-line plot.\nReturn the axes object for the build.</p>\n\n<p>Arguments:</p>\n\n<ul>\n<li>data: DataFrame | Series - data to plot</li>\n<li>kwargs: Unpack[LineKwargs]</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>axes: Axes - the axes object for the plot</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">line_plot</span><span class=\"o\">.</span><span class=\"n\">LineKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.postcovid_plot", "modulename": "mgplot.postcovid_plot", "kind": "module", "doc": "<p>covid_recovery_plot.py\nPlot the pre-COVID trajectory against the current trend.</p>\n"}, {"fullname": "mgplot.postcovid_plot.ME", "modulename": "mgplot.postcovid_plot", "qualname": "ME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;postcovid_plot&#x27;"}, {"fullname": "mgplot.postcovid_plot.PostcovidKwargs", "modulename": "mgplot.postcovid_plot", "qualname": "PostcovidKwargs", "kind": "class", "doc": "<p>Keyword arguments for the post-COVID plot.</p>\n", "bases": "mgplot.line_plot.LineKwargs"}, {"fullname": "mgplot.postcovid_plot.PostcovidKwargs.start_r", "modulename": "mgplot.postcovid_plot", "qualname": "PostcovidKwargs.start_r", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[pandas._libs.tslibs.period.Period]"}, {"fullname": "mgplot.postcovid_plot.PostcovidKwargs.end_r", "modulename": "mgplot.postcovid_plot", "qualname": "PostcovidKwargs.end_r", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[pandas._libs.tslibs.period.Period]"}, {"fullname": "mgplot.postcovid_plot.get_projection", "modulename": "mgplot.postcovid_plot", "qualname": "get_projection", "kind": "function", "doc": "<p>Projection based on data from the start of a series\nto the to_period (inclusive). Returns projection over the whole\nperiod of the original series.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">original</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">to_period</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">_libs</span><span class=\"o\">.</span><span class=\"n\">tslibs</span><span class=\"o\">.</span><span class=\"n\">period</span><span class=\"o\">.</span><span class=\"n\">Period</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.postcovid_plot.postcovid_plot", "modulename": "mgplot.postcovid_plot", "qualname": "postcovid_plot", "kind": "function", "doc": "<p>Plots a series with a PeriodIndex.</p>\n\n<p>Arguments</p>\n\n<ul>\n<li>data - the series to be plotted (note that this function\nis designed to work with a single series, not a DataFrame).</li>\n<li>**kwargs - same as for line_plot() and finalise_plot().</li>\n</ul>\n\n<p>Raises:</p>\n\n<ul>\n<li>TypeError if series is not a pandas Series</li>\n<li>TypeError if series does not have a PeriodIndex</li>\n<li>ValueError if series does not have a D, M or Q frequency</li>\n<li>ValueError if regression start is after regression end</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">postcovid_plot</span><span class=\"o\">.</span><span class=\"n\">PostcovidKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.revision_plot", "modulename": "mgplot.revision_plot", "kind": "module", "doc": "<p>revision_plot.py</p>\n\n<p>Plot ABS revisions to estimates over time.  This is largely\na wrapper around the line_plot function, with some\ndefault settings and minimal checks on the data.</p>\n"}, {"fullname": "mgplot.revision_plot.ME", "modulename": "mgplot.revision_plot", "qualname": "ME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;revision_plot&#x27;"}, {"fullname": "mgplot.revision_plot.revision_plot", "modulename": "mgplot.revision_plot", "qualname": "revision_plot", "kind": "function", "doc": "<p>Plot the revisions to ABS data.</p>\n\n<p>Arguments\ndata: pd.DataFrame - the data to plot, the DataFrame has a\n    column for each data revision\nkwargs - additional keyword arguments for the line_plot function.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">line_plot</span><span class=\"o\">.</span><span class=\"n\">LineKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.run_plot", "modulename": "mgplot.run_plot", "kind": "module", "doc": "<p>run_plot.py\nThis code contains a function to plot and highlighted\nthe 'runs' in a series.</p>\n"}, {"fullname": "mgplot.run_plot.ME", "modulename": "mgplot.run_plot", "qualname": "ME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;run_plot&#x27;"}, {"fullname": "mgplot.run_plot.RunKwargs", "modulename": "mgplot.run_plot", "qualname": "RunKwargs", "kind": "class", "doc": "<p>Keyword arguments for the run_plot function.</p>\n", "bases": "mgplot.line_plot.LineKwargs"}, {"fullname": "mgplot.run_plot.RunKwargs.threshold", "modulename": "mgplot.run_plot", "qualname": "RunKwargs.threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float]"}, {"fullname": "mgplot.run_plot.RunKwargs.highlight", "modulename": "mgplot.run_plot", "qualname": "RunKwargs.highlight", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str | Sequence[str]]"}, {"fullname": "mgplot.run_plot.RunKwargs.direction", "modulename": "mgplot.run_plot", "qualname": "RunKwargs.direction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.run_plot.run_plot", "modulename": "mgplot.run_plot", "qualname": "run_plot", "kind": "function", "doc": "<p>Plot a series of percentage rates, highlighting the increasing runs.</p>\n\n<p>Arguments</p>\n\n<ul>\n<li>data - ordered pandas Series of percentages, with PeriodIndex</li>\n<li>**kwargs: RunKwargs</li>\n</ul>\n\n<p>Return</p>\n\n<ul>\n<li>matplotlib Axes object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">run_plot</span><span class=\"o\">.</span><span class=\"n\">RunKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.seastrend_plot", "modulename": "mgplot.seastrend_plot", "kind": "module", "doc": "<p>seas_trend_plot.py\nThis module contains a function to create seasonal+trend plots.\nIt is just a light-weight wrapper around line_plot().</p>\n"}, {"fullname": "mgplot.seastrend_plot.ME", "modulename": "mgplot.seastrend_plot", "qualname": "ME", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[str]", "default_value": "&#x27;seastrend_plot&#x27;"}, {"fullname": "mgplot.seastrend_plot.seastrend_plot", "modulename": "mgplot.seastrend_plot", "qualname": "seastrend_plot", "kind": "function", "doc": "<p>Publish a DataFrame, where the first column is seasonally\nadjusted data, and the second column is trend data.</p>\n\n<p>Aguments:</p>\n\n<ul>\n<li>data: DataFrame - the data to plot with the first column\nbeing the seasonally adjusted data, and the second column\nbeing the trend data.\nThe remaining arguments are the same as those passed to\nline_plot().</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>a matplotlib Axes object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">line_plot</span><span class=\"o\">.</span><span class=\"n\">LineKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}, {"fullname": "mgplot.summary_plot", "modulename": "mgplot.summary_plot", "kind": "module", "doc": "<p>summary_plot.py:</p>\n\n<p>Produce a summary plot for the data in a given DataFrame.\nThe data is normalised to z-scores and scaled.</p>\n"}, {"fullname": "mgplot.summary_plot.ME", "modulename": "mgplot.summary_plot", "qualname": "ME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;summary_plot&#x27;"}, {"fullname": "mgplot.summary_plot.ZSCORES", "modulename": "mgplot.summary_plot", "qualname": "ZSCORES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;zscores&#x27;"}, {"fullname": "mgplot.summary_plot.ZSCALED", "modulename": "mgplot.summary_plot", "qualname": "ZSCALED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;zscaled&#x27;"}, {"fullname": "mgplot.summary_plot.SummaryKwargs", "modulename": "mgplot.summary_plot", "qualname": "SummaryKwargs", "kind": "class", "doc": "<p>Keyword arguments for the summary_plot function.</p>\n", "bases": "mgplot.keyword_checking.BaseKwargs"}, {"fullname": "mgplot.summary_plot.SummaryKwargs.ax", "modulename": "mgplot.summary_plot", "qualname": "SummaryKwargs.ax", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[matplotlib.axes._axes.Axes | None]"}, {"fullname": "mgplot.summary_plot.SummaryKwargs.verbose", "modulename": "mgplot.summary_plot", "qualname": "SummaryKwargs.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[bool]"}, {"fullname": "mgplot.summary_plot.SummaryKwargs.middle", "modulename": "mgplot.summary_plot", "qualname": "SummaryKwargs.middle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[float]"}, {"fullname": "mgplot.summary_plot.SummaryKwargs.plot_type", "modulename": "mgplot.summary_plot", "qualname": "SummaryKwargs.plot_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[str]"}, {"fullname": "mgplot.summary_plot.SummaryKwargs.plot_from", "modulename": "mgplot.summary_plot", "qualname": "SummaryKwargs.plot_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[int | pandas._libs.tslibs.period.Period | None]"}, {"fullname": "mgplot.summary_plot.SummaryKwargs.legend", "modulename": "mgplot.summary_plot", "qualname": "SummaryKwargs.legend", "kind": "variable", "doc": "<p></p>\n", "annotation": ": NotRequired[dict[str, Any]]"}, {"fullname": "mgplot.summary_plot.summary_plot", "modulename": "mgplot.summary_plot", "qualname": "summary_plot", "kind": "function", "doc": "<p>Plot a summary of historical data for a given DataFrame.</p>\n\n<p>Args:x</p>\n\n<ul>\n<li>summary: DataFrame containing the summary data. The column names are\nused as labels for the plot.</li>\n<li>kwargs: additional arguments for the plot, including:</li>\n</ul>\n\n<p>Returns Axes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">DataT</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Unpack</span><span class=\"p\">[</span><span class=\"n\">mgplot</span><span class=\"o\">.</span><span class=\"n\">summary_plot</span><span class=\"o\">.</span><span class=\"n\">SummaryKwargs</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();