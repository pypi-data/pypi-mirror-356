
# Generated by CodiumAI

import pytest

from marc21 import MarcException, DField, SubField


class TestDField:

    #  Creating a DField object with valid tag, description, indicators, and subfields.
    def test_create_dfield_with_valid_data(self):
        # Given
        tag = '110'
        description = 'Description of DField'
        indicators = '12'
        subfields = [
            SubField(tag='a', repeatable=True, value='Value A'),
            SubField(tag='b', repeatable=False, value='Value B'),
            SubField(tag='c', repeatable=True, value='Value C')
        ]

        # When
        dfield = DField(tag=tag, description=description, indicators=indicators, subfields=subfields)

        # Then
        assert dfield.tag == tag
        assert dfield.description == description
        assert dfield.indicators == indicators
        assert dfield.subfields == subfields

#  Creating a DField object with invalid (undefined) tag should raise a MarcException.
    def test_create_dfield_with_invalid_tag(self):
        # Given
        tag = '101'
        description = 'Unknown DField'
        indicators = '99'
        subfields = []

        # When
        with pytest.raises(MarcException):
            DField(tag=tag, description=description, indicators=indicators, subfields=subfields)

    #  Creating a DField object with valid tag but not for a DField should raise a MarcException.
    def test_create_dfield_with_valid_tag_invalid_type(self):
        # Given
        tag = '001'
        description = 'Unknown DField'
        indicators = '99'
        subfields = []

        # When
        with pytest.raises(MarcException):
            DField(tag=tag, description=description, indicators=indicators, subfields=subfields)

    #  Adding a valid subfield to a DField object.
    def test_add_valid_subfield_to_dfield(self):
        # Given
        tag = '110'
        description = 'Description of DField'
        indicators = '12'
        subfields = [
            SubField(tag='a', repeatable=True, value='Value A'),
            SubField(tag='b', repeatable=False, value='Value B'),
            SubField(tag='c', repeatable=True, value='Value C')
        ]
        dfield = DField(tag=tag, description=description, indicators=indicators, subfields=subfields)

        new_subfield = SubField(tag='d', repeatable=True, value='Value D')

        # When
        dfield.addSubField(tag=new_subfield.tag, value=new_subfield.value)

        # Then
        assert len(dfield.subfields) == 4
        assert dfield.subfields[-1].tag == new_subfield.tag

    #  Adding an invalid subfield to a DField object should raise a MarcException.
    def test_add_invalid_subfield_to_dfield(self):
        # Given
        tag = '100'
        description = 'A valid DField'
        indicators = '  '
        subfields = [
            SubField(tag='a', repeatable=True, value='Value A'),
            SubField(tag='b', repeatable=False, value='Value B'),
            SubField(tag='c', repeatable=True, value='Value C')
        ]
        dfield = DField(tag=tag, description=description, indicators=indicators, subfields=subfields)

        new_subfield = SubField(tag='z', repeatable=True, value='Undefined subfield for tag 100')

        # When
        with pytest.raises(MarcException):
            dfield.addSubField(tag=new_subfield.tag, value=new_subfield.value)

        # Then
        assert len(dfield.subfields) == 3

    #  Adding a valid non-repeatable subfield to a DField object.
    def test_add_valid_non_repeatable_subfield_to_dfield(self):
        # Given
        tag = '110'
        description = 'Description of DField'
        indicators = '12'
        dfield = DField(tag=tag, description=description, indicators=indicators, subfields=[])

        dfield.addSubField(tag='a', value='Value A')

        new_subfield = SubField(tag='a', value='Value D')

        # When
        with pytest.raises(MarcException):
            dfield.addSubField(tag=new_subfield.tag, value=new_subfield.value)

        # Then
        assert len(dfield.subfields) == 1



