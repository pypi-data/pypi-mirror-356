
# Generated by CodiumAI

import pytest

from marc21 import CField, MarcException


class TestCField:

    #  Creating a CField instance with valid tag, description and data should succeed.
    def test_create_cfield_with_valid_attributes(self):
        # Given
        tag = "001"
        description = "Control Number"
        data = "1234567890"

        # When
        cfield = CField(tag, description, data)

        # Then
        assert cfield.tag == tag
        assert cfield.description == description
        assert cfield.data == data

    #  Creating a CField instance with invalid (undefined) tag should raise a MarcException.
    def test_create_cfield_with_invalid_tag(self):
        # Given
        tag = "002"
        description = "Unknown CField"
        data = "1234567890"

        # When
        with pytest.raises(MarcException):
            CField(tag, description, data)

    #  Creating a CField instance with valid tag, but wrong type should raise a MarcException.
    def test_create_cfield_with_valid_tag_invalid_type(self):
        # Given
        tag = "101"
        description = "Unknown CField"
        data = "1234567890"

        # When
        with pytest.raises(MarcException):
            CField(tag, description, data)

    #  Comparing two CField instances with the same attributes should return True.
    def test_compare_cfield_instances_with_same_attributes(self):
        # Given
        tag = "001"
        description = "Control Number"
        data = "1234567890"
        cfield1 = CField(tag, description, data)
        cfield2 = CField(tag, description, data)

        # When
        result = cfield1 == cfield2

        # Then
        assert result is True

    #  Comparing two CField instances with different attributes should return False.
    def test_compare_cfield_instances_with_different_attributes(self):
        # Given
        tag1 = "001"
        description1 = "Control Number"
        data1 = "1234567890"
        tag2 = "003"
        description2 = "Control Number Identifier"
        data2 = "Books"
        cfield1 = CField(tag1, description1, data1)
        cfield2 = CField(tag2, description2, data2)

        # When
        result = cfield1 == cfield2

        # Then
        assert result is False

    #  Calling the __repr__ method of a CField instance should return a string representation of the instance.
    def test_repr_method_of_cfield_instance(self):
        # Given
        tag = "001"
        description = "Control Number"
        data = "1234567890"
        cfield = CField(tag, description, data)

        # When
        result = cfield.__repr__(show_description=True)

        # Then
        assert result == "^^001 [Control Number]^_1234567890"

    #  Accessing the 'tag', 'description' and 'data' attributes of a CField instance should return their respective values.
    def test_access_attributes_of_cfield_instance(self):
        # Given
        tag = "001"
        description = "Control Number"
        data = "1234567890"
        cfield = CField(tag, description, data)

        # When
        tag_result = cfield.tag
        description_result = cfield.description
        data_result = cfield.data

        # Then
        assert tag_result == tag
        assert description_result == description
        assert data_result == data

    #  Creating a CField instance with an empty tag should raise a ValueError.
    def test_create_cfield_with_empty_tag(self):
        # Given
        tag = ""
        description = "Control Number"
        data = "1234567890"

        # When/Then
        with pytest.raises(MarcException):
            CField(tag, description, data)

    #  Creating a CField instance with an empty data should succeed.
    def test_create_cfield_with_empty_data(self):
        # Given
        tag = "001"
        description = "Control Number"
        data = ""

        # When
        # When/Then
        with pytest.raises(MarcException):
            CField(tag, description, data)


    #  Sorting a list of CField instances with different attributes should succeed.
    def test_sort_list_of_cfield_instances_with_different_attributes(self):
        # Given
        cfield1 = CField("001", "Control Number", "1234567890")
        cfield2 = CField("005", "Control Number", "0987654321")
        cfield3 = CField("003", "Title", "Book Title")
        cfield_list = [cfield1, cfield2, cfield3]

        # When
        sorted_list = sorted(cfield_list)

        # Then
        assert sorted_list == [cfield1, cfield3, cfield2]

    #  Accessing a non-existent attribute of a CField instance should raise an AttributeError.
    def test_access_non_existent_attribute_of_cfield_instance(self):
        # Given
        tag = "001"
        description = "Control Number"
        data = "1234567890"
        cfield = CField(tag, description, data)

        # When/Then
        with pytest.raises(AttributeError):
            cfield.invalid_attribute

