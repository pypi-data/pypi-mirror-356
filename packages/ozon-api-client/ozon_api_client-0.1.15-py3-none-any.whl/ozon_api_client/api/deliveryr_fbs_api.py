# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ozon_api_client.api_client import ApiClient


class DeliveryrFBSApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def posting_api_fbs_posting_delivered(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Доставлено»  # noqa: E501

        Перевести отправление в статус «Доставлено», если используется сторонняя служба доставки.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_delivered(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingDeliveredRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_delivered_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_delivered_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_delivered_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Доставлено»  # noqa: E501

        Перевести отправление в статус «Доставлено», если используется сторонняя служба доставки.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_delivered_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingDeliveredRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_delivered" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_delivered`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_delivered`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_delivered`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/fbs/posting/delivered', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingFbsPostingMoveStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_fbs_posting_delivering(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Доставляется»  # noqa: E501

        Перевести отправление в статус «Доставляется», если используется сторонняя служба доставки.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_delivering(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingDeliveringRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_delivering_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_delivering_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_delivering_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Доставляется»  # noqa: E501

        Перевести отправление в статус «Доставляется», если используется сторонняя служба доставки.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_delivering_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingDeliveringRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_delivering" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_delivering`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_delivering`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_delivering`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/fbs/posting/delivering', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingFbsPostingMoveStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_fbs_posting_last_mile(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Последняя миля»  # noqa: E501

        Перевести отправление в статус «Последняя миля», если используется сторонняя служба доставки.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_last_mile(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingLastMileRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_last_mile_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_last_mile_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_last_mile_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Последняя миля»  # noqa: E501

        Перевести отправление в статус «Последняя миля», если используется сторонняя служба доставки.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_last_mile_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingLastMileRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_last_mile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_last_mile`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_last_mile`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_last_mile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/fbs/posting/last-mile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingFbsPostingMoveStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_fbs_posting_sentbyseller(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Отправлено продавцом»  # noqa: E501

        Перевести отправление в статус «Отправлено продавцом». Статус доступен только продавцам с первой милей, продающим из-за рубежа.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_sentbyseller(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingSentbysellerRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingSentbysellerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_sentbyseller_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_sentbyseller_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_sentbyseller_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Отправлено продавцом»  # noqa: E501

        Перевести отправление в статус «Отправлено продавцом». Статус доступен только продавцам с первой милей, продающим из-за рубежа.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_sentbyseller_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingSentbysellerRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingSentbysellerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_sentbyseller" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_sentbyseller`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_sentbyseller`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_sentbyseller`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/fbs/posting/sent-by-seller', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingFbsPostingSentbysellerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_fbs_posting_tracking_number_set(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Добавить трек-номера  # noqa: E501

        Добавить трек-номера к отправлениям. Вы можете передать до 20 трек-номеров за раз.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_tracking_number_set(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingTrackingNumberSetRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_tracking_number_set_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_tracking_number_set_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_tracking_number_set_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Добавить трек-номера  # noqa: E501

        Добавить трек-номера к отправлениям. Вы можете передать до 20 трек-номеров за раз.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_tracking_number_set_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingTrackingNumberSetRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_tracking_number_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_tracking_number_set`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_tracking_number_set`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_tracking_number_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/fbs/posting/tracking-number/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingFbsPostingMoveStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_posting_timeslot_change_restrictions(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Доступные даты для переноса доставки  # noqa: E501

        Метод для получения доступных дат для переноса доставки и количества доступных переносов.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_timeslot_change_restrictions(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PostingFbsTimeslotChangeRestrictionsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1PostingFbsTimeslotChangeRestrictionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_posting_timeslot_change_restrictions_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_posting_timeslot_change_restrictions_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_posting_timeslot_change_restrictions_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Доступные даты для переноса доставки  # noqa: E501

        Метод для получения доступных дат для переноса доставки и количества доступных переносов.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_timeslot_change_restrictions_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PostingFbsTimeslotChangeRestrictionsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1PostingFbsTimeslotChangeRestrictionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_posting_timeslot_change_restrictions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_posting_timeslot_change_restrictions`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_posting_timeslot_change_restrictions`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_posting_timeslot_change_restrictions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting/fbs/timeslot/change-restrictions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PostingFbsTimeslotChangeRestrictionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_set_posting_cutoff(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Уточнить дату отгрузки отправления  # noqa: E501

        Метод для отправлений, которые доставляет продавец или неинтегрированный перевозчик.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_set_posting_cutoff(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1SetPostingCutoffRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1SetPostingCutoffResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_set_posting_cutoff_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_set_posting_cutoff_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_set_posting_cutoff_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Уточнить дату отгрузки отправления  # noqa: E501

        Метод для отправлений, которые доставляет продавец или неинтегрированный перевозчик.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_set_posting_cutoff_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1SetPostingCutoffRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1SetPostingCutoffResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_set_posting_cutoff" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_set_posting_cutoff`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_set_posting_cutoff`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_set_posting_cutoff`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting/cutoff/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SetPostingCutoffResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_set_posting_timeslot(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Перенести дату доставки  # noqa: E501

        Вы можете изменить дату доставки отправления не больше двух раз.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_set_posting_timeslot(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PostingFbsTimeslotSetRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1PostingFbsTimeslotSetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_set_posting_timeslot_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_set_posting_timeslot_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_set_posting_timeslot_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Перенести дату доставки  # noqa: E501

        Вы можете изменить дату доставки отправления не больше двух раз.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_set_posting_timeslot_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PostingFbsTimeslotSetRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1PostingFbsTimeslotSetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_set_posting_timeslot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_set_posting_timeslot`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_set_posting_timeslot`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_set_posting_timeslot`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting/fbs/timeslot/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PostingFbsTimeslotSetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
