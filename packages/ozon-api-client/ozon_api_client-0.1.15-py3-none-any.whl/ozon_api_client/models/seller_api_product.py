# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SellerApiProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'price': 'float',
        'action_price': 'float',
        'max_action_price': 'float',
        'add_mode': 'str',
        'min_stock': 'float',
        'stock': 'float'
    }

    attribute_map = {
        'id': 'id',
        'price': 'price',
        'action_price': 'action_price',
        'max_action_price': 'max_action_price',
        'add_mode': 'add_mode',
        'min_stock': 'min_stock',
        'stock': 'stock'
    }

    def __init__(self, id=None, price=None, action_price=None, max_action_price=None, add_mode=None, min_stock=None, stock=None):  # noqa: E501
        """SellerApiProduct - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._price = None
        self._action_price = None
        self._max_action_price = None
        self._add_mode = None
        self._min_stock = None
        self._stock = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if price is not None:
            self.price = price
        if action_price is not None:
            self.action_price = action_price
        if max_action_price is not None:
            self.max_action_price = max_action_price
        if add_mode is not None:
            self.add_mode = add_mode
        if min_stock is not None:
            self.min_stock = min_stock
        if stock is not None:
            self.stock = stock

    @property
    def id(self):
        """Gets the id of this SellerApiProduct.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The id of this SellerApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SellerApiProduct.

        Идентификатор товара.  # noqa: E501

        :param id: The id of this SellerApiProduct.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def price(self):
        """Gets the price of this SellerApiProduct.  # noqa: E501

        Текущая цена товара без скидки.  # noqa: E501

        :return: The price of this SellerApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SellerApiProduct.

        Текущая цена товара без скидки.  # noqa: E501

        :param price: The price of this SellerApiProduct.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def action_price(self):
        """Gets the action_price of this SellerApiProduct.  # noqa: E501

        Цена товара по акции.  # noqa: E501

        :return: The action_price of this SellerApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._action_price

    @action_price.setter
    def action_price(self, action_price):
        """Sets the action_price of this SellerApiProduct.

        Цена товара по акции.  # noqa: E501

        :param action_price: The action_price of this SellerApiProduct.  # noqa: E501
        :type: float
        """

        self._action_price = action_price

    @property
    def max_action_price(self):
        """Gets the max_action_price of this SellerApiProduct.  # noqa: E501

        Максимально возможная цена товара по акции.  # noqa: E501

        :return: The max_action_price of this SellerApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._max_action_price

    @max_action_price.setter
    def max_action_price(self, max_action_price):
        """Sets the max_action_price of this SellerApiProduct.

        Максимально возможная цена товара по акции.  # noqa: E501

        :param max_action_price: The max_action_price of this SellerApiProduct.  # noqa: E501
        :type: float
        """

        self._max_action_price = max_action_price

    @property
    def add_mode(self):
        """Gets the add_mode of this SellerApiProduct.  # noqa: E501

        Тип добавления товара в акцию: автоматически или вручную продавцом.   # noqa: E501

        :return: The add_mode of this SellerApiProduct.  # noqa: E501
        :rtype: str
        """
        return self._add_mode

    @add_mode.setter
    def add_mode(self, add_mode):
        """Sets the add_mode of this SellerApiProduct.

        Тип добавления товара в акцию: автоматически или вручную продавцом.   # noqa: E501

        :param add_mode: The add_mode of this SellerApiProduct.  # noqa: E501
        :type: str
        """

        self._add_mode = add_mode

    @property
    def min_stock(self):
        """Gets the min_stock of this SellerApiProduct.  # noqa: E501

        Минимальное число единиц товара в акции типа «Скидка на сток».  # noqa: E501

        :return: The min_stock of this SellerApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._min_stock

    @min_stock.setter
    def min_stock(self, min_stock):
        """Sets the min_stock of this SellerApiProduct.

        Минимальное число единиц товара в акции типа «Скидка на сток».  # noqa: E501

        :param min_stock: The min_stock of this SellerApiProduct.  # noqa: E501
        :type: float
        """

        self._min_stock = min_stock

    @property
    def stock(self):
        """Gets the stock of this SellerApiProduct.  # noqa: E501

        Число единиц товара в акции типа «Скидка на сток».  # noqa: E501

        :return: The stock of this SellerApiProduct.  # noqa: E501
        :rtype: float
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this SellerApiProduct.

        Число единиц товара в акции типа «Скидка на сток».  # noqa: E501

        :param stock: The stock of this SellerApiProduct.  # noqa: E501
        :type: float
        """

        self._stock = stock

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SellerApiProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SellerApiProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
