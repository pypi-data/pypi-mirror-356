# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1Certificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate_id': 'int',
        'certificate_number': 'str',
        'certificate_name': 'str',
        'type_code': 'str',
        'status_code': 'str',
        'accordance_type_code': 'str',
        'rejection_reason_code': 'str',
        'verification_comment': 'str',
        'issue_date': 'datetime',
        'expire_date': 'datetime',
        'products_count': 'int'
    }

    attribute_map = {
        'certificate_id': 'certificate_id',
        'certificate_number': 'certificate_number',
        'certificate_name': 'certificate_name',
        'type_code': 'type_code',
        'status_code': 'status_code',
        'accordance_type_code': 'accordance_type_code',
        'rejection_reason_code': 'rejection_reason_code',
        'verification_comment': 'verification_comment',
        'issue_date': 'issue_date',
        'expire_date': 'expire_date',
        'products_count': 'products_count'
    }

    def __init__(self, certificate_id=None, certificate_number=None, certificate_name=None, type_code=None, status_code=None, accordance_type_code=None, rejection_reason_code=None, verification_comment=None, issue_date=None, expire_date=None, products_count=None):  # noqa: E501
        """V1Certificate - a model defined in Swagger"""  # noqa: E501
        self._certificate_id = None
        self._certificate_number = None
        self._certificate_name = None
        self._type_code = None
        self._status_code = None
        self._accordance_type_code = None
        self._rejection_reason_code = None
        self._verification_comment = None
        self._issue_date = None
        self._expire_date = None
        self._products_count = None
        self.discriminator = None
        if certificate_id is not None:
            self.certificate_id = certificate_id
        if certificate_number is not None:
            self.certificate_number = certificate_number
        if certificate_name is not None:
            self.certificate_name = certificate_name
        if type_code is not None:
            self.type_code = type_code
        if status_code is not None:
            self.status_code = status_code
        if accordance_type_code is not None:
            self.accordance_type_code = accordance_type_code
        if rejection_reason_code is not None:
            self.rejection_reason_code = rejection_reason_code
        if verification_comment is not None:
            self.verification_comment = verification_comment
        if issue_date is not None:
            self.issue_date = issue_date
        if expire_date is not None:
            self.expire_date = expire_date
        if products_count is not None:
            self.products_count = products_count

    @property
    def certificate_id(self):
        """Gets the certificate_id of this V1Certificate.  # noqa: E501

        Идентификатор.  # noqa: E501

        :return: The certificate_id of this V1Certificate.  # noqa: E501
        :rtype: int
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this V1Certificate.

        Идентификатор.  # noqa: E501

        :param certificate_id: The certificate_id of this V1Certificate.  # noqa: E501
        :type: int
        """

        self._certificate_id = certificate_id

    @property
    def certificate_number(self):
        """Gets the certificate_number of this V1Certificate.  # noqa: E501

        Номер.  # noqa: E501

        :return: The certificate_number of this V1Certificate.  # noqa: E501
        :rtype: str
        """
        return self._certificate_number

    @certificate_number.setter
    def certificate_number(self, certificate_number):
        """Sets the certificate_number of this V1Certificate.

        Номер.  # noqa: E501

        :param certificate_number: The certificate_number of this V1Certificate.  # noqa: E501
        :type: str
        """

        self._certificate_number = certificate_number

    @property
    def certificate_name(self):
        """Gets the certificate_name of this V1Certificate.  # noqa: E501

        Название.  # noqa: E501

        :return: The certificate_name of this V1Certificate.  # noqa: E501
        :rtype: str
        """
        return self._certificate_name

    @certificate_name.setter
    def certificate_name(self, certificate_name):
        """Sets the certificate_name of this V1Certificate.

        Название.  # noqa: E501

        :param certificate_name: The certificate_name of this V1Certificate.  # noqa: E501
        :type: str
        """

        self._certificate_name = certificate_name

    @property
    def type_code(self):
        """Gets the type_code of this V1Certificate.  # noqa: E501

        Тип.  # noqa: E501

        :return: The type_code of this V1Certificate.  # noqa: E501
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this V1Certificate.

        Тип.  # noqa: E501

        :param type_code: The type_code of this V1Certificate.  # noqa: E501
        :type: str
        """

        self._type_code = type_code

    @property
    def status_code(self):
        """Gets the status_code of this V1Certificate.  # noqa: E501

        Статус.  # noqa: E501

        :return: The status_code of this V1Certificate.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this V1Certificate.

        Статус.  # noqa: E501

        :param status_code: The status_code of this V1Certificate.  # noqa: E501
        :type: str
        """

        self._status_code = status_code

    @property
    def accordance_type_code(self):
        """Gets the accordance_type_code of this V1Certificate.  # noqa: E501

        Тип соответствия требованиям.  # noqa: E501

        :return: The accordance_type_code of this V1Certificate.  # noqa: E501
        :rtype: str
        """
        return self._accordance_type_code

    @accordance_type_code.setter
    def accordance_type_code(self, accordance_type_code):
        """Sets the accordance_type_code of this V1Certificate.

        Тип соответствия требованиям.  # noqa: E501

        :param accordance_type_code: The accordance_type_code of this V1Certificate.  # noqa: E501
        :type: str
        """

        self._accordance_type_code = accordance_type_code

    @property
    def rejection_reason_code(self):
        """Gets the rejection_reason_code of this V1Certificate.  # noqa: E501

        Причина отклонения сертификата.  # noqa: E501

        :return: The rejection_reason_code of this V1Certificate.  # noqa: E501
        :rtype: str
        """
        return self._rejection_reason_code

    @rejection_reason_code.setter
    def rejection_reason_code(self, rejection_reason_code):
        """Sets the rejection_reason_code of this V1Certificate.

        Причина отклонения сертификата.  # noqa: E501

        :param rejection_reason_code: The rejection_reason_code of this V1Certificate.  # noqa: E501
        :type: str
        """

        self._rejection_reason_code = rejection_reason_code

    @property
    def verification_comment(self):
        """Gets the verification_comment of this V1Certificate.  # noqa: E501

        Комментарий модератора.  # noqa: E501

        :return: The verification_comment of this V1Certificate.  # noqa: E501
        :rtype: str
        """
        return self._verification_comment

    @verification_comment.setter
    def verification_comment(self, verification_comment):
        """Sets the verification_comment of this V1Certificate.

        Комментарий модератора.  # noqa: E501

        :param verification_comment: The verification_comment of this V1Certificate.  # noqa: E501
        :type: str
        """

        self._verification_comment = verification_comment

    @property
    def issue_date(self):
        """Gets the issue_date of this V1Certificate.  # noqa: E501

        Дата создания.  # noqa: E501

        :return: The issue_date of this V1Certificate.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this V1Certificate.

        Дата создания.  # noqa: E501

        :param issue_date: The issue_date of this V1Certificate.  # noqa: E501
        :type: datetime
        """

        self._issue_date = issue_date

    @property
    def expire_date(self):
        """Gets the expire_date of this V1Certificate.  # noqa: E501

        Дата окончания действия.  # noqa: E501

        :return: The expire_date of this V1Certificate.  # noqa: E501
        :rtype: datetime
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this V1Certificate.

        Дата окончания действия.  # noqa: E501

        :param expire_date: The expire_date of this V1Certificate.  # noqa: E501
        :type: datetime
        """

        self._expire_date = expire_date

    @property
    def products_count(self):
        """Gets the products_count of this V1Certificate.  # noqa: E501

        Количество товаров, привязанных к сертификату.  # noqa: E501

        :return: The products_count of this V1Certificate.  # noqa: E501
        :rtype: int
        """
        return self._products_count

    @products_count.setter
    def products_count(self, products_count):
        """Sets the products_count of this V1Certificate.

        Количество товаров, привязанных к сертификату.  # noqa: E501

        :param products_count: The products_count of this V1Certificate.  # noqa: E501
        :type: int
        """

        self._products_count = products_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Certificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Certificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
