# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetSupplyOrdersListRequestFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'states': 'list[str]'
    }

    attribute_map = {
        'states': 'states'
    }

    def __init__(self, states=None):  # noqa: E501
        """GetSupplyOrdersListRequestFilter - a model defined in Swagger"""  # noqa: E501
        self._states = None
        self.discriminator = None
        if states is not None:
            self.states = states

    @property
    def states(self):
        """Gets the states of this GetSupplyOrdersListRequestFilter.  # noqa: E501

        Фильтр по статусу поставки: - `ORDER_STATE_DATA_FILLING` — заполнение данных; - `ORDER_STATE_READY_TO_SUPPLY` — готова к отгрузке; - `ORDER_STATE_ACCEPTED_AT_SUPPLY_WAREHOUSE` — принята на точке отгрузки; - `ORDER_STATE_IN_TRANSIT` — в пути; - `ORDER_STATE_ACCEPTANCE_AT_STORAGE_WAREHOUSE` — приёмка на складе; - `ORDER_STATE_REPORTS_CONFIRMATION_AWAITING` — согласование актов; - `ORDER_STATE_REPORT_REJECTED` — спор; - `ORDER_STATE_COMPLETED` — завершена; - `ORDER_STATE_REJECTED_AT_SUPPLY_WAREHOUSE` — отказано в приёмке; - `ORDER_STATE_CANCELLED` — отменена.   # noqa: E501

        :return: The states of this GetSupplyOrdersListRequestFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this GetSupplyOrdersListRequestFilter.

        Фильтр по статусу поставки: - `ORDER_STATE_DATA_FILLING` — заполнение данных; - `ORDER_STATE_READY_TO_SUPPLY` — готова к отгрузке; - `ORDER_STATE_ACCEPTED_AT_SUPPLY_WAREHOUSE` — принята на точке отгрузки; - `ORDER_STATE_IN_TRANSIT` — в пути; - `ORDER_STATE_ACCEPTANCE_AT_STORAGE_WAREHOUSE` — приёмка на складе; - `ORDER_STATE_REPORTS_CONFIRMATION_AWAITING` — согласование актов; - `ORDER_STATE_REPORT_REJECTED` — спор; - `ORDER_STATE_COMPLETED` — завершена; - `ORDER_STATE_REJECTED_AT_SUPPLY_WAREHOUSE` — отказано в приёмке; - `ORDER_STATE_CANCELLED` — отменена.   # noqa: E501

        :param states: The states of this GetSupplyOrdersListRequestFilter.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ORDER_STATE_DATA_FILLING", "ORDER_STATE_READY_TO_SUPPLY", "ORDER_STATE_ACCEPTED_AT_SUPPLY_WAREHOUSE", "ORDER_STATE_IN_TRANSIT", "ORDER_STATE_ACCEPTANCE_AT_STORAGE_WAREHOUSE", "ORDER_STATE_REPORTS_CONFIRMATION_AWAITING", "ORDER_STATE_REPORT_REJECTED", "ORDER_STATE_COMPLETED", "ORDER_STATE_REJECTED_AT_SUPPLY_WAREHOUSE", "ORDER_STATE_CANCELLED"]  # noqa: E501
        if not set(states).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `states` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(states) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._states = states

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSupplyOrdersListRequestFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSupplyOrdersListRequestFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
