# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2OrderVehicle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_not_set_reasons': 'list[str]',
        'can_set': 'bool',
        'is_required': 'bool',
        'value': 'list[V2VehicleInfo]'
    }

    attribute_map = {
        'can_not_set_reasons': 'can_not_set_reasons',
        'can_set': 'can_set',
        'is_required': 'is_required',
        'value': 'value'
    }

    def __init__(self, can_not_set_reasons=None, can_set=None, is_required=None, value=None):  # noqa: E501
        """V2OrderVehicle - a model defined in Swagger"""  # noqa: E501
        self._can_not_set_reasons = None
        self._can_set = None
        self._is_required = None
        self._value = None
        self.discriminator = None
        if can_not_set_reasons is not None:
            self.can_not_set_reasons = can_not_set_reasons
        if can_set is not None:
            self.can_set = can_set
        if is_required is not None:
            self.is_required = is_required
        if value is not None:
            self.value = value

    @property
    def can_not_set_reasons(self):
        """Gets the can_not_set_reasons of this V2OrderVehicle.  # noqa: E501

        Причина, по которой не получается указать или изменить данные водителя и автомобиля.  # noqa: E501

        :return: The can_not_set_reasons of this V2OrderVehicle.  # noqa: E501
        :rtype: list[str]
        """
        return self._can_not_set_reasons

    @can_not_set_reasons.setter
    def can_not_set_reasons(self, can_not_set_reasons):
        """Sets the can_not_set_reasons of this V2OrderVehicle.

        Причина, по которой не получается указать или изменить данные водителя и автомобиля.  # noqa: E501

        :param can_not_set_reasons: The can_not_set_reasons of this V2OrderVehicle.  # noqa: E501
        :type: list[str]
        """

        self._can_not_set_reasons = can_not_set_reasons

    @property
    def can_set(self):
        """Gets the can_set of this V2OrderVehicle.  # noqa: E501

        `true`, если можно указать или изменить данные водителя и автомобиля.   # noqa: E501

        :return: The can_set of this V2OrderVehicle.  # noqa: E501
        :rtype: bool
        """
        return self._can_set

    @can_set.setter
    def can_set(self, can_set):
        """Sets the can_set of this V2OrderVehicle.

        `true`, если можно указать или изменить данные водителя и автомобиля.   # noqa: E501

        :param can_set: The can_set of this V2OrderVehicle.  # noqa: E501
        :type: bool
        """

        self._can_set = can_set

    @property
    def is_required(self):
        """Gets the is_required of this V2OrderVehicle.  # noqa: E501

        `true`, если характеристику указывать обязательно.   # noqa: E501

        :return: The is_required of this V2OrderVehicle.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this V2OrderVehicle.

        `true`, если характеристику указывать обязательно.   # noqa: E501

        :param is_required: The is_required of this V2OrderVehicle.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def value(self):
        """Gets the value of this V2OrderVehicle.  # noqa: E501

        Данные водителя и автомобиля.  # noqa: E501

        :return: The value of this V2OrderVehicle.  # noqa: E501
        :rtype: list[V2VehicleInfo]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this V2OrderVehicle.

        Данные водителя и автомобиля.  # noqa: E501

        :param value: The value of this V2OrderVehicle.  # noqa: E501
        :type: list[V2VehicleInfo]
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2OrderVehicle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2OrderVehicle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
