# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1ConditionalCancellation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cancellation_id': 'int',
        'posting_number': 'str',
        'cancellation_reason': 'ConditionalCancellationCancellationReason',
        'cancelled_at': 'datetime',
        'cancellation_reason_message': 'str',
        'tpl_integration_type': 'str',
        'state': 'ConditionalCancellationState',
        'cancellation_initiator': 'str',
        'order_date': 'datetime',
        'approve_comment': 'str',
        'approve_date': 'datetime',
        'auto_approve_date': 'datetime'
    }

    attribute_map = {
        'cancellation_id': 'cancellation_id',
        'posting_number': 'posting_number',
        'cancellation_reason': 'cancellation_reason',
        'cancelled_at': 'cancelled_at',
        'cancellation_reason_message': 'cancellation_reason_message',
        'tpl_integration_type': 'tpl_integration_type',
        'state': 'state',
        'cancellation_initiator': 'cancellation_initiator',
        'order_date': 'order_date',
        'approve_comment': 'approve_comment',
        'approve_date': 'approve_date',
        'auto_approve_date': 'auto_approve_date'
    }

    def __init__(self, cancellation_id=None, posting_number=None, cancellation_reason=None, cancelled_at=None, cancellation_reason_message=None, tpl_integration_type=None, state=None, cancellation_initiator=None, order_date=None, approve_comment=None, approve_date=None, auto_approve_date=None):  # noqa: E501
        """V1ConditionalCancellation - a model defined in Swagger"""  # noqa: E501
        self._cancellation_id = None
        self._posting_number = None
        self._cancellation_reason = None
        self._cancelled_at = None
        self._cancellation_reason_message = None
        self._tpl_integration_type = None
        self._state = None
        self._cancellation_initiator = None
        self._order_date = None
        self._approve_comment = None
        self._approve_date = None
        self._auto_approve_date = None
        self.discriminator = None
        if cancellation_id is not None:
            self.cancellation_id = cancellation_id
        if posting_number is not None:
            self.posting_number = posting_number
        if cancellation_reason is not None:
            self.cancellation_reason = cancellation_reason
        if cancelled_at is not None:
            self.cancelled_at = cancelled_at
        if cancellation_reason_message is not None:
            self.cancellation_reason_message = cancellation_reason_message
        if tpl_integration_type is not None:
            self.tpl_integration_type = tpl_integration_type
        if state is not None:
            self.state = state
        if cancellation_initiator is not None:
            self.cancellation_initiator = cancellation_initiator
        if order_date is not None:
            self.order_date = order_date
        if approve_comment is not None:
            self.approve_comment = approve_comment
        if approve_date is not None:
            self.approve_date = approve_date
        if auto_approve_date is not None:
            self.auto_approve_date = auto_approve_date

    @property
    def cancellation_id(self):
        """Gets the cancellation_id of this V1ConditionalCancellation.  # noqa: E501

        Идентификатор заявки на отмену.  # noqa: E501

        :return: The cancellation_id of this V1ConditionalCancellation.  # noqa: E501
        :rtype: int
        """
        return self._cancellation_id

    @cancellation_id.setter
    def cancellation_id(self, cancellation_id):
        """Sets the cancellation_id of this V1ConditionalCancellation.

        Идентификатор заявки на отмену.  # noqa: E501

        :param cancellation_id: The cancellation_id of this V1ConditionalCancellation.  # noqa: E501
        :type: int
        """

        self._cancellation_id = cancellation_id

    @property
    def posting_number(self):
        """Gets the posting_number of this V1ConditionalCancellation.  # noqa: E501

        Номер отправления.  # noqa: E501

        :return: The posting_number of this V1ConditionalCancellation.  # noqa: E501
        :rtype: str
        """
        return self._posting_number

    @posting_number.setter
    def posting_number(self, posting_number):
        """Sets the posting_number of this V1ConditionalCancellation.

        Номер отправления.  # noqa: E501

        :param posting_number: The posting_number of this V1ConditionalCancellation.  # noqa: E501
        :type: str
        """

        self._posting_number = posting_number

    @property
    def cancellation_reason(self):
        """Gets the cancellation_reason of this V1ConditionalCancellation.  # noqa: E501


        :return: The cancellation_reason of this V1ConditionalCancellation.  # noqa: E501
        :rtype: ConditionalCancellationCancellationReason
        """
        return self._cancellation_reason

    @cancellation_reason.setter
    def cancellation_reason(self, cancellation_reason):
        """Sets the cancellation_reason of this V1ConditionalCancellation.


        :param cancellation_reason: The cancellation_reason of this V1ConditionalCancellation.  # noqa: E501
        :type: ConditionalCancellationCancellationReason
        """

        self._cancellation_reason = cancellation_reason

    @property
    def cancelled_at(self):
        """Gets the cancelled_at of this V1ConditionalCancellation.  # noqa: E501

        Дата создания заявки на отмену.  # noqa: E501

        :return: The cancelled_at of this V1ConditionalCancellation.  # noqa: E501
        :rtype: datetime
        """
        return self._cancelled_at

    @cancelled_at.setter
    def cancelled_at(self, cancelled_at):
        """Sets the cancelled_at of this V1ConditionalCancellation.

        Дата создания заявки на отмену.  # noqa: E501

        :param cancelled_at: The cancelled_at of this V1ConditionalCancellation.  # noqa: E501
        :type: datetime
        """

        self._cancelled_at = cancelled_at

    @property
    def cancellation_reason_message(self):
        """Gets the cancellation_reason_message of this V1ConditionalCancellation.  # noqa: E501

        Комментарий к заявке на отмену, введённый инициатором отмены вручную.  # noqa: E501

        :return: The cancellation_reason_message of this V1ConditionalCancellation.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_reason_message

    @cancellation_reason_message.setter
    def cancellation_reason_message(self, cancellation_reason_message):
        """Sets the cancellation_reason_message of this V1ConditionalCancellation.

        Комментарий к заявке на отмену, введённый инициатором отмены вручную.  # noqa: E501

        :param cancellation_reason_message: The cancellation_reason_message of this V1ConditionalCancellation.  # noqa: E501
        :type: str
        """

        self._cancellation_reason_message = cancellation_reason_message

    @property
    def tpl_integration_type(self):
        """Gets the tpl_integration_type of this V1ConditionalCancellation.  # noqa: E501

        Тип интеграции со службой доставки.  # noqa: E501

        :return: The tpl_integration_type of this V1ConditionalCancellation.  # noqa: E501
        :rtype: str
        """
        return self._tpl_integration_type

    @tpl_integration_type.setter
    def tpl_integration_type(self, tpl_integration_type):
        """Sets the tpl_integration_type of this V1ConditionalCancellation.

        Тип интеграции со службой доставки.  # noqa: E501

        :param tpl_integration_type: The tpl_integration_type of this V1ConditionalCancellation.  # noqa: E501
        :type: str
        """

        self._tpl_integration_type = tpl_integration_type

    @property
    def state(self):
        """Gets the state of this V1ConditionalCancellation.  # noqa: E501


        :return: The state of this V1ConditionalCancellation.  # noqa: E501
        :rtype: ConditionalCancellationState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V1ConditionalCancellation.


        :param state: The state of this V1ConditionalCancellation.  # noqa: E501
        :type: ConditionalCancellationState
        """

        self._state = state

    @property
    def cancellation_initiator(self):
        """Gets the cancellation_initiator of this V1ConditionalCancellation.  # noqa: E501

        Инициатор отмены: - `OZON` — Ozon,  - `SELLER` — продавец,  - `CLIENT` — покупатель,  - `SYSTEM` — система,  - `DELIVERY` — служба доставки.   # noqa: E501

        :return: The cancellation_initiator of this V1ConditionalCancellation.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_initiator

    @cancellation_initiator.setter
    def cancellation_initiator(self, cancellation_initiator):
        """Sets the cancellation_initiator of this V1ConditionalCancellation.

        Инициатор отмены: - `OZON` — Ozon,  - `SELLER` — продавец,  - `CLIENT` — покупатель,  - `SYSTEM` — система,  - `DELIVERY` — служба доставки.   # noqa: E501

        :param cancellation_initiator: The cancellation_initiator of this V1ConditionalCancellation.  # noqa: E501
        :type: str
        """
        allowed_values = ["OZON", "SELLER", "CLIENT", "SYSTEM", "DELIVERY"]  # noqa: E501
        if cancellation_initiator not in allowed_values:
            raise ValueError(
                "Invalid value for `cancellation_initiator` ({0}), must be one of {1}"  # noqa: E501
                .format(cancellation_initiator, allowed_values)
            )

        self._cancellation_initiator = cancellation_initiator

    @property
    def order_date(self):
        """Gets the order_date of this V1ConditionalCancellation.  # noqa: E501

        Дата создания заказа.  # noqa: E501

        :return: The order_date of this V1ConditionalCancellation.  # noqa: E501
        :rtype: datetime
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this V1ConditionalCancellation.

        Дата создания заказа.  # noqa: E501

        :param order_date: The order_date of this V1ConditionalCancellation.  # noqa: E501
        :type: datetime
        """

        self._order_date = order_date

    @property
    def approve_comment(self):
        """Gets the approve_comment of this V1ConditionalCancellation.  # noqa: E501

        Комментарий, оставленный при подтверждении или отклонении заявки на отмену.  # noqa: E501

        :return: The approve_comment of this V1ConditionalCancellation.  # noqa: E501
        :rtype: str
        """
        return self._approve_comment

    @approve_comment.setter
    def approve_comment(self, approve_comment):
        """Sets the approve_comment of this V1ConditionalCancellation.

        Комментарий, оставленный при подтверждении или отклонении заявки на отмену.  # noqa: E501

        :param approve_comment: The approve_comment of this V1ConditionalCancellation.  # noqa: E501
        :type: str
        """

        self._approve_comment = approve_comment

    @property
    def approve_date(self):
        """Gets the approve_date of this V1ConditionalCancellation.  # noqa: E501

        Дата подтверждения или отклонения заявки на отмену.  # noqa: E501

        :return: The approve_date of this V1ConditionalCancellation.  # noqa: E501
        :rtype: datetime
        """
        return self._approve_date

    @approve_date.setter
    def approve_date(self, approve_date):
        """Sets the approve_date of this V1ConditionalCancellation.

        Дата подтверждения или отклонения заявки на отмену.  # noqa: E501

        :param approve_date: The approve_date of this V1ConditionalCancellation.  # noqa: E501
        :type: datetime
        """

        self._approve_date = approve_date

    @property
    def auto_approve_date(self):
        """Gets the auto_approve_date of this V1ConditionalCancellation.  # noqa: E501

        Дата, после которой заявка будет автоматически подтверждена.  # noqa: E501

        :return: The auto_approve_date of this V1ConditionalCancellation.  # noqa: E501
        :rtype: datetime
        """
        return self._auto_approve_date

    @auto_approve_date.setter
    def auto_approve_date(self, auto_approve_date):
        """Sets the auto_approve_date of this V1ConditionalCancellation.

        Дата, после которой заявка будет автоматически подтверждена.  # noqa: E501

        :param auto_approve_date: The auto_approve_date of this V1ConditionalCancellation.  # noqa: E501
        :type: datetime
        """

        self._auto_approve_date = auto_approve_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ConditionalCancellation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ConditionalCancellation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
