# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductImportProductsBySKURequestItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'offer_id': 'str',
        'old_price': 'str',
        'premium_price': 'str',
        'price': 'str',
        'sku': 'int',
        'vat': 'str',
        'currency_code': 'str'
    }

    attribute_map = {
        'name': 'name',
        'offer_id': 'offer_id',
        'old_price': 'old_price',
        'premium_price': 'premium_price',
        'price': 'price',
        'sku': 'sku',
        'vat': 'vat',
        'currency_code': 'currency_code'
    }

    def __init__(self, name=None, offer_id=None, old_price=None, premium_price=None, price=None, sku=None, vat=None, currency_code=None):  # noqa: E501
        """ProductImportProductsBySKURequestItem - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._offer_id = None
        self._old_price = None
        self._premium_price = None
        self._price = None
        self._sku = None
        self._vat = None
        self._currency_code = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if offer_id is not None:
            self.offer_id = offer_id
        if old_price is not None:
            self.old_price = old_price
        if premium_price is not None:
            self.premium_price = premium_price
        if price is not None:
            self.price = price
        if sku is not None:
            self.sku = sku
        if vat is not None:
            self.vat = vat
        if currency_code is not None:
            self.currency_code = currency_code

    @property
    def name(self):
        """Gets the name of this ProductImportProductsBySKURequestItem.  # noqa: E501

        Название товара. До 500 символов.  # noqa: E501

        :return: The name of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductImportProductsBySKURequestItem.

        Название товара. До 500 символов.  # noqa: E501

        :param name: The name of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def offer_id(self):
        """Gets the offer_id of this ProductImportProductsBySKURequestItem.  # noqa: E501

        Идентификатор товара в системе продавца — артикул.  Максимальная длина строки — 50 символов.   # noqa: E501

        :return: The offer_id of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this ProductImportProductsBySKURequestItem.

        Идентификатор товара в системе продавца — артикул.  Максимальная длина строки — 50 символов.   # noqa: E501

        :param offer_id: The offer_id of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def old_price(self):
        """Gets the old_price of this ProductImportProductsBySKURequestItem.  # noqa: E501

        Цена до скидок (будет зачеркнута на карточке товара). Указывается в рублях. Разделитель дробной части — точка, до двух знаков после точки.  # noqa: E501

        :return: The old_price of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :rtype: str
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this ProductImportProductsBySKURequestItem.

        Цена до скидок (будет зачеркнута на карточке товара). Указывается в рублях. Разделитель дробной части — точка, до двух знаков после точки.  # noqa: E501

        :param old_price: The old_price of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :type: str
        """

        self._old_price = old_price

    @property
    def premium_price(self):
        """Gets the premium_price of this ProductImportProductsBySKURequestItem.  # noqa: E501

        Цена для клиентов с подпиской [Ozon Premium](https://docs.ozon.ru/common/ozon-premium/).  # noqa: E501

        :return: The premium_price of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :rtype: str
        """
        return self._premium_price

    @premium_price.setter
    def premium_price(self, premium_price):
        """Sets the premium_price of this ProductImportProductsBySKURequestItem.

        Цена для клиентов с подпиской [Ozon Premium](https://docs.ozon.ru/common/ozon-premium/).  # noqa: E501

        :param premium_price: The premium_price of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :type: str
        """

        self._premium_price = premium_price

    @property
    def price(self):
        """Gets the price of this ProductImportProductsBySKURequestItem.  # noqa: E501

        Цена товара с учётом скидок, отображается на карточке товара. Если на товар нет скидок, укажите значение `old_price` в этом параметре.  # noqa: E501

        :return: The price of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductImportProductsBySKURequestItem.

        Цена товара с учётом скидок, отображается на карточке товара. Если на товар нет скидок, укажите значение `old_price` в этом параметре.  # noqa: E501

        :param price: The price of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def sku(self):
        """Gets the sku of this ProductImportProductsBySKURequestItem.  # noqa: E501

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :return: The sku of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductImportProductsBySKURequestItem.

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :param sku: The sku of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def vat(self):
        """Gets the vat of this ProductImportProductsBySKURequestItem.  # noqa: E501

        Ставка НДС для товара:   - `0` — не облагается НДС,   - `0.05` — 5%,   - `0.07` — 7%,   - `0.1` — 10%,   - `0.2` — 20%.  Передавайте значение ставки, актуальное на данный момент.   # noqa: E501

        :return: The vat of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this ProductImportProductsBySKURequestItem.

        Ставка НДС для товара:   - `0` — не облагается НДС,   - `0.05` — 5%,   - `0.07` — 7%,   - `0.1` — 10%,   - `0.2` — 20%.  Передавайте значение ставки, актуальное на данный момент.   # noqa: E501

        :param vat: The vat of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :type: str
        """

        self._vat = vat

    @property
    def currency_code(self):
        """Gets the currency_code of this ProductImportProductsBySKURequestItem.  # noqa: E501

        Валюта ваших цен. Переданное значение должно совпадать с валютой, которая установлена в настройках личного кабинета. По умолчанию передаётся `RUB` — российский рубль.  Например, если у вас установлена валюта взаиморасчётов юань, передавайте значение `CNY`, иначе вернётся ошибка.  Возможные значения:    - `RUB` — российский рубль,   - `BYN` — белорусский рубль,   - `KZT` — тенге,   - `EUR` — евро,   - `USD` — доллар США,   - `CNY` — юань.   # noqa: E501

        :return: The currency_code of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ProductImportProductsBySKURequestItem.

        Валюта ваших цен. Переданное значение должно совпадать с валютой, которая установлена в настройках личного кабинета. По умолчанию передаётся `RUB` — российский рубль.  Например, если у вас установлена валюта взаиморасчётов юань, передавайте значение `CNY`, иначе вернётся ошибка.  Возможные значения:    - `RUB` — российский рубль,   - `BYN` — белорусский рубль,   - `KZT` — тенге,   - `EUR` — евро,   - `USD` — доллар США,   - `CNY` — юань.   # noqa: E501

        :param currency_code: The currency_code of this ProductImportProductsBySKURequestItem.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductImportProductsBySKURequestItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductImportProductsBySKURequestItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
