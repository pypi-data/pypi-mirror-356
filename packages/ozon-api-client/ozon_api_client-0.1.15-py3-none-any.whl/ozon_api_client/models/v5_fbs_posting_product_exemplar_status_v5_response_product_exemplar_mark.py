# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'check_status': 'str',
        'error_codes': 'list[str]',
        'mark': 'str',
        'mark_type': 'str'
    }

    attribute_map = {
        'check_status': 'check_status',
        'error_codes': 'error_codes',
        'mark': 'mark',
        'mark_type': 'mark_type'
    }

    def __init__(self, check_status=None, error_codes=None, mark=None, mark_type=None):  # noqa: E501
        """V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark - a model defined in Swagger"""  # noqa: E501
        self._check_status = None
        self._error_codes = None
        self._mark = None
        self._mark_type = None
        self.discriminator = None
        if check_status is not None:
            self.check_status = check_status
        if error_codes is not None:
            self.error_codes = error_codes
        if mark is not None:
            self.mark = mark
        if mark_type is not None:
            self.mark_type = mark_type

    @property
    def check_status(self):
        """Gets the check_status of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.  # noqa: E501

        Статус проверки.  # noqa: E501

        :return: The check_status of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.  # noqa: E501
        :rtype: str
        """
        return self._check_status

    @check_status.setter
    def check_status(self, check_status):
        """Sets the check_status of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.

        Статус проверки.  # noqa: E501

        :param check_status: The check_status of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.  # noqa: E501
        :type: str
        """

        self._check_status = check_status

    @property
    def error_codes(self):
        """Gets the error_codes of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.  # noqa: E501

        Ошибки при проверке контрольных идентификационных знаков (КИЗ).  # noqa: E501

        :return: The error_codes of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.  # noqa: E501
        :rtype: list[str]
        """
        return self._error_codes

    @error_codes.setter
    def error_codes(self, error_codes):
        """Sets the error_codes of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.

        Ошибки при проверке контрольных идентификационных знаков (КИЗ).  # noqa: E501

        :param error_codes: The error_codes of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.  # noqa: E501
        :type: list[str]
        """

        self._error_codes = error_codes

    @property
    def mark(self):
        """Gets the mark of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.  # noqa: E501

        Значение кода маркировки.  # noqa: E501

        :return: The mark of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.  # noqa: E501
        :rtype: str
        """
        return self._mark

    @mark.setter
    def mark(self, mark):
        """Sets the mark of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.

        Значение кода маркировки.  # noqa: E501

        :param mark: The mark of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.  # noqa: E501
        :type: str
        """

        self._mark = mark

    @property
    def mark_type(self):
        """Gets the mark_type of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.  # noqa: E501

        Тип кода маркировки:  - `mandatory_mark` — обязательная маркировка «Честный ЗНАК»;  - `jw_uin` — уникальный идентификационный номер (УИН) ювелирного изделия.   # noqa: E501

        :return: The mark_type of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.  # noqa: E501
        :rtype: str
        """
        return self._mark_type

    @mark_type.setter
    def mark_type(self, mark_type):
        """Sets the mark_type of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.

        Тип кода маркировки:  - `mandatory_mark` — обязательная маркировка «Честный ЗНАК»;  - `jw_uin` — уникальный идентификационный номер (УИН) ювелирного изделия.   # noqa: E501

        :param mark_type: The mark_type of this V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark.  # noqa: E501
        :type: str
        """

        self._mark_type = mark_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V5FbsPostingProductExemplarStatusV5ResponseProductExemplarMark):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
