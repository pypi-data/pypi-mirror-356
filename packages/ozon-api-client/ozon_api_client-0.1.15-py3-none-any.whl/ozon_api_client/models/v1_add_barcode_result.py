# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1AddBarcodeResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'error': 'str',
        'barcode': 'str',
        'sku': 'int'
    }

    attribute_map = {
        'code': 'code',
        'error': 'error',
        'barcode': 'barcode',
        'sku': 'sku'
    }

    def __init__(self, code=None, error=None, barcode=None, sku=None):  # noqa: E501
        """V1AddBarcodeResult - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._error = None
        self._barcode = None
        self._sku = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if error is not None:
            self.error = error
        if barcode is not None:
            self.barcode = barcode
        if sku is not None:
            self.sku = sku

    @property
    def code(self):
        """Gets the code of this V1AddBarcodeResult.  # noqa: E501

        Код ошибки.  # noqa: E501

        :return: The code of this V1AddBarcodeResult.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this V1AddBarcodeResult.

        Код ошибки.  # noqa: E501

        :param code: The code of this V1AddBarcodeResult.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def error(self):
        """Gets the error of this V1AddBarcodeResult.  # noqa: E501

        Описание ошибки.  # noqa: E501

        :return: The error of this V1AddBarcodeResult.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this V1AddBarcodeResult.

        Описание ошибки.  # noqa: E501

        :param error: The error of this V1AddBarcodeResult.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def barcode(self):
        """Gets the barcode of this V1AddBarcodeResult.  # noqa: E501

        Штрихкод, который не удалось привязать.  # noqa: E501

        :return: The barcode of this V1AddBarcodeResult.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this V1AddBarcodeResult.

        Штрихкод, который не удалось привязать.  # noqa: E501

        :param barcode: The barcode of this V1AddBarcodeResult.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def sku(self):
        """Gets the sku of this V1AddBarcodeResult.  # noqa: E501

        Идентификатор товара, к которому не удалось привязать штрихкод.  # noqa: E501

        :return: The sku of this V1AddBarcodeResult.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this V1AddBarcodeResult.

        Идентификатор товара, к которому не удалось привязать штрихкод.  # noqa: E501

        :param sku: The sku of this V1AddBarcodeResult.  # noqa: E501
        :type: int
        """

        self._sku = sku

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AddBarcodeResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AddBarcodeResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
