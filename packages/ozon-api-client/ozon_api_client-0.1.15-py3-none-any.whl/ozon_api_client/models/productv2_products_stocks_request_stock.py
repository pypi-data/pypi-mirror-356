# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Productv2ProductsStocksRequestStock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offer_id': 'str',
        'product_id': 'int',
        'quant_size': 'int',
        'stock': 'int',
        'warehouse_id': 'int'
    }

    attribute_map = {
        'offer_id': 'offer_id',
        'product_id': 'product_id',
        'quant_size': 'quant_size',
        'stock': 'stock',
        'warehouse_id': 'warehouse_id'
    }

    def __init__(self, offer_id=None, product_id=None, quant_size=None, stock=None, warehouse_id=None):  # noqa: E501
        """Productv2ProductsStocksRequestStock - a model defined in Swagger"""  # noqa: E501
        self._offer_id = None
        self._product_id = None
        self._quant_size = None
        self._stock = None
        self._warehouse_id = None
        self.discriminator = None
        if offer_id is not None:
            self.offer_id = offer_id
        if product_id is not None:
            self.product_id = product_id
        if quant_size is not None:
            self.quant_size = quant_size
        if stock is not None:
            self.stock = stock
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id

    @property
    def offer_id(self):
        """Gets the offer_id of this Productv2ProductsStocksRequestStock.  # noqa: E501

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :return: The offer_id of this Productv2ProductsStocksRequestStock.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this Productv2ProductsStocksRequestStock.

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :param offer_id: The offer_id of this Productv2ProductsStocksRequestStock.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def product_id(self):
        """Gets the product_id of this Productv2ProductsStocksRequestStock.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this Productv2ProductsStocksRequestStock.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Productv2ProductsStocksRequestStock.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this Productv2ProductsStocksRequestStock.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def quant_size(self):
        """Gets the quant_size of this Productv2ProductsStocksRequestStock.  # noqa: E501

        Используйте параметр, если у обычного и эконом-товара совпадает артикул — `offer_id = quant_id`. Чтобы обновить количество: - обычного товара — передайте значение `1`; - эконом-товара — передайте размер его кванта.  Если у обычного и эконом-товара разные артикулы, не передавайте параметр.   # noqa: E501

        :return: The quant_size of this Productv2ProductsStocksRequestStock.  # noqa: E501
        :rtype: int
        """
        return self._quant_size

    @quant_size.setter
    def quant_size(self, quant_size):
        """Sets the quant_size of this Productv2ProductsStocksRequestStock.

        Используйте параметр, если у обычного и эконом-товара совпадает артикул — `offer_id = quant_id`. Чтобы обновить количество: - обычного товара — передайте значение `1`; - эконом-товара — передайте размер его кванта.  Если у обычного и эконом-товара разные артикулы, не передавайте параметр.   # noqa: E501

        :param quant_size: The quant_size of this Productv2ProductsStocksRequestStock.  # noqa: E501
        :type: int
        """

        self._quant_size = quant_size

    @property
    def stock(self):
        """Gets the stock of this Productv2ProductsStocksRequestStock.  # noqa: E501

        Количество товара в наличии без учёта зарезервированных товаров.  # noqa: E501

        :return: The stock of this Productv2ProductsStocksRequestStock.  # noqa: E501
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this Productv2ProductsStocksRequestStock.

        Количество товара в наличии без учёта зарезервированных товаров.  # noqa: E501

        :param stock: The stock of this Productv2ProductsStocksRequestStock.  # noqa: E501
        :type: int
        """

        self._stock = stock

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this Productv2ProductsStocksRequestStock.  # noqa: E501

        Идентификатор склада, полученный из метода [/v1/warehouse/list](#operation/WarehouseAPI_WarehouseList).  # noqa: E501

        :return: The warehouse_id of this Productv2ProductsStocksRequestStock.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this Productv2ProductsStocksRequestStock.

        Идентификатор склада, полученный из метода [/v1/warehouse/list](#operation/WarehouseAPI_WarehouseList).  # noqa: E501

        :param warehouse_id: The warehouse_id of this Productv2ProductsStocksRequestStock.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Productv2ProductsStocksRequestStock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Productv2ProductsStocksRequestStock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
