# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Postingv3FbsPostingWithParamsExamplars(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analytics_data': 'bool',
        'barcodes': 'bool',
        'financial_data': 'bool',
        'product_exemplars': 'bool',
        'related_postings': 'bool',
        'translit': 'bool'
    }

    attribute_map = {
        'analytics_data': 'analytics_data',
        'barcodes': 'barcodes',
        'financial_data': 'financial_data',
        'product_exemplars': 'product_exemplars',
        'related_postings': 'related_postings',
        'translit': 'translit'
    }

    def __init__(self, analytics_data=None, barcodes=None, financial_data=None, product_exemplars=None, related_postings=None, translit=None):  # noqa: E501
        """Postingv3FbsPostingWithParamsExamplars - a model defined in Swagger"""  # noqa: E501
        self._analytics_data = None
        self._barcodes = None
        self._financial_data = None
        self._product_exemplars = None
        self._related_postings = None
        self._translit = None
        self.discriminator = None
        if analytics_data is not None:
            self.analytics_data = analytics_data
        if barcodes is not None:
            self.barcodes = barcodes
        if financial_data is not None:
            self.financial_data = financial_data
        if product_exemplars is not None:
            self.product_exemplars = product_exemplars
        if related_postings is not None:
            self.related_postings = related_postings
        if translit is not None:
            self.translit = translit

    @property
    def analytics_data(self):
        """Gets the analytics_data of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501

        Добавить в ответ данные аналитики.  # noqa: E501

        :return: The analytics_data of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501
        :rtype: bool
        """
        return self._analytics_data

    @analytics_data.setter
    def analytics_data(self, analytics_data):
        """Sets the analytics_data of this Postingv3FbsPostingWithParamsExamplars.

        Добавить в ответ данные аналитики.  # noqa: E501

        :param analytics_data: The analytics_data of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501
        :type: bool
        """

        self._analytics_data = analytics_data

    @property
    def barcodes(self):
        """Gets the barcodes of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501

        Добавить в ответ штрихкоды отправления.  # noqa: E501

        :return: The barcodes of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501
        :rtype: bool
        """
        return self._barcodes

    @barcodes.setter
    def barcodes(self, barcodes):
        """Sets the barcodes of this Postingv3FbsPostingWithParamsExamplars.

        Добавить в ответ штрихкоды отправления.  # noqa: E501

        :param barcodes: The barcodes of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501
        :type: bool
        """

        self._barcodes = barcodes

    @property
    def financial_data(self):
        """Gets the financial_data of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501

        Добавить в ответ финансовые данные.  # noqa: E501

        :return: The financial_data of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501
        :rtype: bool
        """
        return self._financial_data

    @financial_data.setter
    def financial_data(self, financial_data):
        """Sets the financial_data of this Postingv3FbsPostingWithParamsExamplars.

        Добавить в ответ финансовые данные.  # noqa: E501

        :param financial_data: The financial_data of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501
        :type: bool
        """

        self._financial_data = financial_data

    @property
    def product_exemplars(self):
        """Gets the product_exemplars of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501

        Добавить в ответ данные о продуктах и их экземплярах.  # noqa: E501

        :return: The product_exemplars of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501
        :rtype: bool
        """
        return self._product_exemplars

    @product_exemplars.setter
    def product_exemplars(self, product_exemplars):
        """Sets the product_exemplars of this Postingv3FbsPostingWithParamsExamplars.

        Добавить в ответ данные о продуктах и их экземплярах.  # noqa: E501

        :param product_exemplars: The product_exemplars of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501
        :type: bool
        """

        self._product_exemplars = product_exemplars

    @property
    def related_postings(self):
        """Gets the related_postings of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501

        Добавить в ответ номера связанных отправлений. Связанные отправления — те, на которое было разделено родительское отправление при сборке.   # noqa: E501

        :return: The related_postings of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501
        :rtype: bool
        """
        return self._related_postings

    @related_postings.setter
    def related_postings(self, related_postings):
        """Sets the related_postings of this Postingv3FbsPostingWithParamsExamplars.

        Добавить в ответ номера связанных отправлений. Связанные отправления — те, на которое было разделено родительское отправление при сборке.   # noqa: E501

        :param related_postings: The related_postings of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501
        :type: bool
        """

        self._related_postings = related_postings

    @property
    def translit(self):
        """Gets the translit of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501

        Выполнить транслитерацию возвращаемых значений.  # noqa: E501

        :return: The translit of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501
        :rtype: bool
        """
        return self._translit

    @translit.setter
    def translit(self, translit):
        """Sets the translit of this Postingv3FbsPostingWithParamsExamplars.

        Выполнить транслитерацию возвращаемых значений.  # noqa: E501

        :param translit: The translit of this Postingv3FbsPostingWithParamsExamplars.  # noqa: E501
        :type: bool
        """

        self._translit = translit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Postingv3FbsPostingWithParamsExamplars, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Postingv3FbsPostingWithParamsExamplars):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
