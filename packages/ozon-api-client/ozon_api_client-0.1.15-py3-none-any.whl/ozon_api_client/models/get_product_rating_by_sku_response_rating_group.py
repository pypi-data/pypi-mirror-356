# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetProductRatingBySkuResponseRatingGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditions': 'list[GetProductRatingBySkuResponseRatingCondition]',
        'improve_at_least': 'int',
        'improve_attributes': 'list[GetProductRatingBySkuResponseRatingImproveAttribute]',
        'key': 'str',
        'name': 'str',
        'rating': 'float',
        'weight': 'float'
    }

    attribute_map = {
        'conditions': 'conditions',
        'improve_at_least': 'improve_at_least',
        'improve_attributes': 'improve_attributes',
        'key': 'key',
        'name': 'name',
        'rating': 'rating',
        'weight': 'weight'
    }

    def __init__(self, conditions=None, improve_at_least=None, improve_attributes=None, key=None, name=None, rating=None, weight=None):  # noqa: E501
        """GetProductRatingBySkuResponseRatingGroup - a model defined in Swagger"""  # noqa: E501
        self._conditions = None
        self._improve_at_least = None
        self._improve_attributes = None
        self._key = None
        self._name = None
        self._rating = None
        self._weight = None
        self.discriminator = None
        if conditions is not None:
            self.conditions = conditions
        if improve_at_least is not None:
            self.improve_at_least = improve_at_least
        if improve_attributes is not None:
            self.improve_attributes = improve_attributes
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if rating is not None:
            self.rating = rating
        if weight is not None:
            self.weight = weight

    @property
    def conditions(self):
        """Gets the conditions of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501

        Список условий, увеличивающих контент-рейтинг товара.  # noqa: E501

        :return: The conditions of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :rtype: list[GetProductRatingBySkuResponseRatingCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this GetProductRatingBySkuResponseRatingGroup.

        Список условий, увеличивающих контент-рейтинг товара.  # noqa: E501

        :param conditions: The conditions of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :type: list[GetProductRatingBySkuResponseRatingCondition]
        """

        self._conditions = conditions

    @property
    def improve_at_least(self):
        """Gets the improve_at_least of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501

        Количество атрибутов, которые нужно заполнить для получения максимального балла в этой группе характеристик.  # noqa: E501

        :return: The improve_at_least of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :rtype: int
        """
        return self._improve_at_least

    @improve_at_least.setter
    def improve_at_least(self, improve_at_least):
        """Sets the improve_at_least of this GetProductRatingBySkuResponseRatingGroup.

        Количество атрибутов, которые нужно заполнить для получения максимального балла в этой группе характеристик.  # noqa: E501

        :param improve_at_least: The improve_at_least of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :type: int
        """

        self._improve_at_least = improve_at_least

    @property
    def improve_attributes(self):
        """Gets the improve_attributes of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501

        Cписок атрибутов, заполнение которых может увеличить контент-рейтинг товара.  # noqa: E501

        :return: The improve_attributes of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :rtype: list[GetProductRatingBySkuResponseRatingImproveAttribute]
        """
        return self._improve_attributes

    @improve_attributes.setter
    def improve_attributes(self, improve_attributes):
        """Sets the improve_attributes of this GetProductRatingBySkuResponseRatingGroup.

        Cписок атрибутов, заполнение которых может увеличить контент-рейтинг товара.  # noqa: E501

        :param improve_attributes: The improve_attributes of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :type: list[GetProductRatingBySkuResponseRatingImproveAttribute]
        """

        self._improve_attributes = improve_attributes

    @property
    def key(self):
        """Gets the key of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501

        Идентификатор группы.  # noqa: E501

        :return: The key of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this GetProductRatingBySkuResponseRatingGroup.

        Идентификатор группы.  # noqa: E501

        :param key: The key of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501

        Название группы.  # noqa: E501

        :return: The name of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetProductRatingBySkuResponseRatingGroup.

        Название группы.  # noqa: E501

        :param name: The name of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rating(self):
        """Gets the rating of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501

        Рейтинг в группе.  # noqa: E501

        :return: The rating of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this GetProductRatingBySkuResponseRatingGroup.

        Рейтинг в группе.  # noqa: E501

        :param rating: The rating of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def weight(self):
        """Gets the weight of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501

        Процент влияния характеристик группы на контент-рейтинг.  # noqa: E501

        :return: The weight of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this GetProductRatingBySkuResponseRatingGroup.

        Процент влияния характеристик группы на контент-рейтинг.  # noqa: E501

        :param weight: The weight of this GetProductRatingBySkuResponseRatingGroup.  # noqa: E501
        :type: float
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProductRatingBySkuResponseRatingGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProductRatingBySkuResponseRatingGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
