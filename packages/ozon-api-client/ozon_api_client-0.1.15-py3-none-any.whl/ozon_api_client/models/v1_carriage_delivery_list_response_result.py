# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1CarriageDeliveryListResponseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assembly_list_availability': 'bool',
        'can_create_another_carriage': 'bool',
        'carriage_postings_count': 'int',
        'carriage_quantum_count': 'int',
        'carriages': 'list[V1CarriageDeliveryListResponseResultCarriages]',
        'cut_in': 'datetime',
        'delivery_method_id': 'int',
        'delivery_method_name': 'str',
        'delivery_method_status': 'str',
        'departure_date': 'datetime',
        'dropoff_address': 'str',
        'dropoff_change_availability': 'str',
        'dropoff_point_id': 'int',
        'dropoff_point_type': 'str',
        'errors': 'list[V1CarriageDeliveryListResponseResultErrors]',
        'first_mile_changing': 'bool',
        'first_mile_type': 'str',
        'has_entrusted_acceptance': 'bool',
        'integration_type': 'str',
        'is_presort': 'bool',
        'is_rfbs': 'bool',
        'recommended_time_local': 'str',
        'recommended_time_utc_offset_in_minutes': 'float',
        'cutoff_at': 'datetime',
        'mandatory_packaged_count': 'int',
        'mandatory_packaged_quantum_count': 'int',
        'mandatory_postings_count': 'int',
        'mandatory_quantum_count': 'int',
        'optional_packaged_count': 'int',
        'postings_for_another_carriage_count': 'int',
        'quantum_for_another_carriage_count': 'int',
        'timeslot_from': 'datetime',
        'timeslot_to': 'datetime',
        'tpl_provider_icon_url': 'str',
        'tpl_provider_name': 'str',
        'warehouse_city': 'str',
        'warehouse_id': 'int',
        'warehouse_name': 'str'
    }

    attribute_map = {
        'assembly_list_availability': 'assembly_list_availability',
        'can_create_another_carriage': 'can_create_another_carriage',
        'carriage_postings_count': 'carriage_postings_count',
        'carriage_quantum_count': 'carriage_quantum_count',
        'carriages': 'carriages',
        'cut_in': 'cut_in',
        'delivery_method_id': 'delivery_method_id',
        'delivery_method_name': 'delivery_method_name',
        'delivery_method_status': 'delivery_method_status',
        'departure_date': 'departure_date',
        'dropoff_address': 'dropoff_address',
        'dropoff_change_availability': 'dropoff_change_availability',
        'dropoff_point_id': 'dropoff_point_id',
        'dropoff_point_type': 'dropoff_point_type',
        'errors': 'errors',
        'first_mile_changing': 'first_mile_changing',
        'first_mile_type': 'first_mile_type',
        'has_entrusted_acceptance': 'has_entrusted_acceptance',
        'integration_type': 'integration_type',
        'is_presort': 'is_presort',
        'is_rfbs': 'is_rfbs',
        'recommended_time_local': 'recommended_time_local',
        'recommended_time_utc_offset_in_minutes': 'recommended_time_utc_offset_in_minutes',
        'cutoff_at': 'cutoff_at',
        'mandatory_packaged_count': 'mandatory_packaged_count',
        'mandatory_packaged_quantum_count': 'mandatory_packaged_quantum_count',
        'mandatory_postings_count': 'mandatory_postings_count',
        'mandatory_quantum_count': 'mandatory_quantum_count',
        'optional_packaged_count': 'optional_packaged_count',
        'postings_for_another_carriage_count': 'postings_for_another_carriage_count',
        'quantum_for_another_carriage_count': 'quantum_for_another_carriage_count',
        'timeslot_from': 'timeslot_from',
        'timeslot_to': 'timeslot_to',
        'tpl_provider_icon_url': 'tpl_provider_icon_url',
        'tpl_provider_name': 'tpl_provider_name',
        'warehouse_city': 'warehouse_city',
        'warehouse_id': 'warehouse_id',
        'warehouse_name': 'warehouse_name'
    }

    def __init__(self, assembly_list_availability=None, can_create_another_carriage=None, carriage_postings_count=None, carriage_quantum_count=None, carriages=None, cut_in=None, delivery_method_id=None, delivery_method_name=None, delivery_method_status=None, departure_date=None, dropoff_address=None, dropoff_change_availability=None, dropoff_point_id=None, dropoff_point_type=None, errors=None, first_mile_changing=None, first_mile_type=None, has_entrusted_acceptance=None, integration_type=None, is_presort=None, is_rfbs=None, recommended_time_local=None, recommended_time_utc_offset_in_minutes=None, cutoff_at=None, mandatory_packaged_count=None, mandatory_packaged_quantum_count=None, mandatory_postings_count=None, mandatory_quantum_count=None, optional_packaged_count=None, postings_for_another_carriage_count=None, quantum_for_another_carriage_count=None, timeslot_from=None, timeslot_to=None, tpl_provider_icon_url=None, tpl_provider_name=None, warehouse_city=None, warehouse_id=None, warehouse_name=None):  # noqa: E501
        """V1CarriageDeliveryListResponseResult - a model defined in Swagger"""  # noqa: E501
        self._assembly_list_availability = None
        self._can_create_another_carriage = None
        self._carriage_postings_count = None
        self._carriage_quantum_count = None
        self._carriages = None
        self._cut_in = None
        self._delivery_method_id = None
        self._delivery_method_name = None
        self._delivery_method_status = None
        self._departure_date = None
        self._dropoff_address = None
        self._dropoff_change_availability = None
        self._dropoff_point_id = None
        self._dropoff_point_type = None
        self._errors = None
        self._first_mile_changing = None
        self._first_mile_type = None
        self._has_entrusted_acceptance = None
        self._integration_type = None
        self._is_presort = None
        self._is_rfbs = None
        self._recommended_time_local = None
        self._recommended_time_utc_offset_in_minutes = None
        self._cutoff_at = None
        self._mandatory_packaged_count = None
        self._mandatory_packaged_quantum_count = None
        self._mandatory_postings_count = None
        self._mandatory_quantum_count = None
        self._optional_packaged_count = None
        self._postings_for_another_carriage_count = None
        self._quantum_for_another_carriage_count = None
        self._timeslot_from = None
        self._timeslot_to = None
        self._tpl_provider_icon_url = None
        self._tpl_provider_name = None
        self._warehouse_city = None
        self._warehouse_id = None
        self._warehouse_name = None
        self.discriminator = None
        if assembly_list_availability is not None:
            self.assembly_list_availability = assembly_list_availability
        if can_create_another_carriage is not None:
            self.can_create_another_carriage = can_create_another_carriage
        if carriage_postings_count is not None:
            self.carriage_postings_count = carriage_postings_count
        if carriage_quantum_count is not None:
            self.carriage_quantum_count = carriage_quantum_count
        if carriages is not None:
            self.carriages = carriages
        if cut_in is not None:
            self.cut_in = cut_in
        if delivery_method_id is not None:
            self.delivery_method_id = delivery_method_id
        if delivery_method_name is not None:
            self.delivery_method_name = delivery_method_name
        if delivery_method_status is not None:
            self.delivery_method_status = delivery_method_status
        if departure_date is not None:
            self.departure_date = departure_date
        if dropoff_address is not None:
            self.dropoff_address = dropoff_address
        if dropoff_change_availability is not None:
            self.dropoff_change_availability = dropoff_change_availability
        if dropoff_point_id is not None:
            self.dropoff_point_id = dropoff_point_id
        if dropoff_point_type is not None:
            self.dropoff_point_type = dropoff_point_type
        if errors is not None:
            self.errors = errors
        if first_mile_changing is not None:
            self.first_mile_changing = first_mile_changing
        if first_mile_type is not None:
            self.first_mile_type = first_mile_type
        if has_entrusted_acceptance is not None:
            self.has_entrusted_acceptance = has_entrusted_acceptance
        if integration_type is not None:
            self.integration_type = integration_type
        if is_presort is not None:
            self.is_presort = is_presort
        if is_rfbs is not None:
            self.is_rfbs = is_rfbs
        if recommended_time_local is not None:
            self.recommended_time_local = recommended_time_local
        if recommended_time_utc_offset_in_minutes is not None:
            self.recommended_time_utc_offset_in_minutes = recommended_time_utc_offset_in_minutes
        if cutoff_at is not None:
            self.cutoff_at = cutoff_at
        if mandatory_packaged_count is not None:
            self.mandatory_packaged_count = mandatory_packaged_count
        if mandatory_packaged_quantum_count is not None:
            self.mandatory_packaged_quantum_count = mandatory_packaged_quantum_count
        if mandatory_postings_count is not None:
            self.mandatory_postings_count = mandatory_postings_count
        if mandatory_quantum_count is not None:
            self.mandatory_quantum_count = mandatory_quantum_count
        if optional_packaged_count is not None:
            self.optional_packaged_count = optional_packaged_count
        if postings_for_another_carriage_count is not None:
            self.postings_for_another_carriage_count = postings_for_another_carriage_count
        if quantum_for_another_carriage_count is not None:
            self.quantum_for_another_carriage_count = quantum_for_another_carriage_count
        if timeslot_from is not None:
            self.timeslot_from = timeslot_from
        if timeslot_to is not None:
            self.timeslot_to = timeslot_to
        if tpl_provider_icon_url is not None:
            self.tpl_provider_icon_url = tpl_provider_icon_url
        if tpl_provider_name is not None:
            self.tpl_provider_name = tpl_provider_name
        if warehouse_city is not None:
            self.warehouse_city = warehouse_city
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if warehouse_name is not None:
            self.warehouse_name = warehouse_name

    @property
    def assembly_list_availability(self):
        """Gets the assembly_list_availability of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        `true`, если доступен лист подбора.   # noqa: E501

        :return: The assembly_list_availability of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: bool
        """
        return self._assembly_list_availability

    @assembly_list_availability.setter
    def assembly_list_availability(self, assembly_list_availability):
        """Sets the assembly_list_availability of this V1CarriageDeliveryListResponseResult.

        `true`, если доступен лист подбора.   # noqa: E501

        :param assembly_list_availability: The assembly_list_availability of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: bool
        """

        self._assembly_list_availability = assembly_list_availability

    @property
    def can_create_another_carriage(self):
        """Gets the can_create_another_carriage of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        `true`, если можно создать ещё одну перевозку.   # noqa: E501

        :return: The can_create_another_carriage of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_another_carriage

    @can_create_another_carriage.setter
    def can_create_another_carriage(self, can_create_another_carriage):
        """Sets the can_create_another_carriage of this V1CarriageDeliveryListResponseResult.

        `true`, если можно создать ещё одну перевозку.   # noqa: E501

        :param can_create_another_carriage: The can_create_another_carriage of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: bool
        """

        self._can_create_another_carriage = can_create_another_carriage

    @property
    def carriage_postings_count(self):
        """Gets the carriage_postings_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Количество отправлений в перевозке.  # noqa: E501

        :return: The carriage_postings_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._carriage_postings_count

    @carriage_postings_count.setter
    def carriage_postings_count(self, carriage_postings_count):
        """Sets the carriage_postings_count of this V1CarriageDeliveryListResponseResult.

        Количество отправлений в перевозке.  # noqa: E501

        :param carriage_postings_count: The carriage_postings_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: int
        """

        self._carriage_postings_count = carriage_postings_count

    @property
    def carriage_quantum_count(self):
        """Gets the carriage_quantum_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Количество квантов в перевозке.  # noqa: E501

        :return: The carriage_quantum_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._carriage_quantum_count

    @carriage_quantum_count.setter
    def carriage_quantum_count(self, carriage_quantum_count):
        """Sets the carriage_quantum_count of this V1CarriageDeliveryListResponseResult.

        Количество квантов в перевозке.  # noqa: E501

        :param carriage_quantum_count: The carriage_quantum_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: int
        """

        self._carriage_quantum_count = carriage_quantum_count

    @property
    def carriages(self):
        """Gets the carriages of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Список перевозок.  # noqa: E501

        :return: The carriages of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: list[V1CarriageDeliveryListResponseResultCarriages]
        """
        return self._carriages

    @carriages.setter
    def carriages(self, carriages):
        """Sets the carriages of this V1CarriageDeliveryListResponseResult.

        Список перевозок.  # noqa: E501

        :param carriages: The carriages of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: list[V1CarriageDeliveryListResponseResultCarriages]
        """

        self._carriages = carriages

    @property
    def cut_in(self):
        """Gets the cut_in of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Время начала сборки и часовой пояс времени склада.  # noqa: E501

        :return: The cut_in of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: datetime
        """
        return self._cut_in

    @cut_in.setter
    def cut_in(self, cut_in):
        """Sets the cut_in of this V1CarriageDeliveryListResponseResult.

        Время начала сборки и часовой пояс времени склада.  # noqa: E501

        :param cut_in: The cut_in of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: datetime
        """

        self._cut_in = cut_in

    @property
    def delivery_method_id(self):
        """Gets the delivery_method_id of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Идентификатор метода доставки.  # noqa: E501

        :return: The delivery_method_id of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._delivery_method_id

    @delivery_method_id.setter
    def delivery_method_id(self, delivery_method_id):
        """Sets the delivery_method_id of this V1CarriageDeliveryListResponseResult.

        Идентификатор метода доставки.  # noqa: E501

        :param delivery_method_id: The delivery_method_id of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: int
        """

        self._delivery_method_id = delivery_method_id

    @property
    def delivery_method_name(self):
        """Gets the delivery_method_name of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Название метода доставки.  # noqa: E501

        :return: The delivery_method_name of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._delivery_method_name

    @delivery_method_name.setter
    def delivery_method_name(self, delivery_method_name):
        """Sets the delivery_method_name of this V1CarriageDeliveryListResponseResult.

        Название метода доставки.  # noqa: E501

        :param delivery_method_name: The delivery_method_name of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: str
        """

        self._delivery_method_name = delivery_method_name

    @property
    def delivery_method_status(self):
        """Gets the delivery_method_status of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Статус метода доставки.  # noqa: E501

        :return: The delivery_method_status of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._delivery_method_status

    @delivery_method_status.setter
    def delivery_method_status(self, delivery_method_status):
        """Sets the delivery_method_status of this V1CarriageDeliveryListResponseResult.

        Статус метода доставки.  # noqa: E501

        :param delivery_method_status: The delivery_method_status of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: str
        """

        self._delivery_method_status = delivery_method_status

    @property
    def departure_date(self):
        """Gets the departure_date of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Дата отгрузки.  # noqa: E501

        :return: The departure_date of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: datetime
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this V1CarriageDeliveryListResponseResult.

        Дата отгрузки.  # noqa: E501

        :param departure_date: The departure_date of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: datetime
        """

        self._departure_date = departure_date

    @property
    def dropoff_address(self):
        """Gets the dropoff_address of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Адрес точки отгрузки.  # noqa: E501

        :return: The dropoff_address of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._dropoff_address

    @dropoff_address.setter
    def dropoff_address(self, dropoff_address):
        """Sets the dropoff_address of this V1CarriageDeliveryListResponseResult.

        Адрес точки отгрузки.  # noqa: E501

        :param dropoff_address: The dropoff_address of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: str
        """

        self._dropoff_address = dropoff_address

    @property
    def dropoff_change_availability(self):
        """Gets the dropoff_change_availability of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Статус возможности смены точки отгрузки.  # noqa: E501

        :return: The dropoff_change_availability of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._dropoff_change_availability

    @dropoff_change_availability.setter
    def dropoff_change_availability(self, dropoff_change_availability):
        """Sets the dropoff_change_availability of this V1CarriageDeliveryListResponseResult.

        Статус возможности смены точки отгрузки.  # noqa: E501

        :param dropoff_change_availability: The dropoff_change_availability of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: str
        """

        self._dropoff_change_availability = dropoff_change_availability

    @property
    def dropoff_point_id(self):
        """Gets the dropoff_point_id of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Идентификатор точки отгрузки.  # noqa: E501

        :return: The dropoff_point_id of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._dropoff_point_id

    @dropoff_point_id.setter
    def dropoff_point_id(self, dropoff_point_id):
        """Sets the dropoff_point_id of this V1CarriageDeliveryListResponseResult.

        Идентификатор точки отгрузки.  # noqa: E501

        :param dropoff_point_id: The dropoff_point_id of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: int
        """

        self._dropoff_point_id = dropoff_point_id

    @property
    def dropoff_point_type(self):
        """Gets the dropoff_point_type of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Способ отгрузки.  # noqa: E501

        :return: The dropoff_point_type of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._dropoff_point_type

    @dropoff_point_type.setter
    def dropoff_point_type(self, dropoff_point_type):
        """Sets the dropoff_point_type of this V1CarriageDeliveryListResponseResult.

        Способ отгрузки.  # noqa: E501

        :param dropoff_point_type: The dropoff_point_type of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: str
        """

        self._dropoff_point_type = dropoff_point_type

    @property
    def errors(self):
        """Gets the errors of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Массив ошибок, которые возникли при обработке запроса.  # noqa: E501

        :return: The errors of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: list[V1CarriageDeliveryListResponseResultErrors]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this V1CarriageDeliveryListResponseResult.

        Массив ошибок, которые возникли при обработке запроса.  # noqa: E501

        :param errors: The errors of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: list[V1CarriageDeliveryListResponseResultErrors]
        """

        self._errors = errors

    @property
    def first_mile_changing(self):
        """Gets the first_mile_changing of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        `true`, если точка отгрузки изменилась.   # noqa: E501

        :return: The first_mile_changing of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: bool
        """
        return self._first_mile_changing

    @first_mile_changing.setter
    def first_mile_changing(self, first_mile_changing):
        """Sets the first_mile_changing of this V1CarriageDeliveryListResponseResult.

        `true`, если точка отгрузки изменилась.   # noqa: E501

        :param first_mile_changing: The first_mile_changing of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: bool
        """

        self._first_mile_changing = first_mile_changing

    @property
    def first_mile_type(self):
        """Gets the first_mile_type of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Тип первой мили.  # noqa: E501

        :return: The first_mile_type of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._first_mile_type

    @first_mile_type.setter
    def first_mile_type(self, first_mile_type):
        """Sets the first_mile_type of this V1CarriageDeliveryListResponseResult.

        Тип первой мили.  # noqa: E501

        :param first_mile_type: The first_mile_type of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: str
        """

        self._first_mile_type = first_mile_type

    @property
    def has_entrusted_acceptance(self):
        """Gets the has_entrusted_acceptance of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Признак доверительной приёмки. `true`, если доверительная приёмка включена на складе.  # noqa: E501

        :return: The has_entrusted_acceptance of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: bool
        """
        return self._has_entrusted_acceptance

    @has_entrusted_acceptance.setter
    def has_entrusted_acceptance(self, has_entrusted_acceptance):
        """Sets the has_entrusted_acceptance of this V1CarriageDeliveryListResponseResult.

        Признак доверительной приёмки. `true`, если доверительная приёмка включена на складе.  # noqa: E501

        :param has_entrusted_acceptance: The has_entrusted_acceptance of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: bool
        """

        self._has_entrusted_acceptance = has_entrusted_acceptance

    @property
    def integration_type(self):
        """Gets the integration_type of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Тип интеграции со службой доставки.  # noqa: E501

        :return: The integration_type of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._integration_type

    @integration_type.setter
    def integration_type(self, integration_type):
        """Sets the integration_type of this V1CarriageDeliveryListResponseResult.

        Тип интеграции со службой доставки.  # noqa: E501

        :param integration_type: The integration_type of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: str
        """

        self._integration_type = integration_type

    @property
    def is_presort(self):
        """Gets the is_presort of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        `true`, если отгрузка с предсортировкой.   # noqa: E501

        :return: The is_presort of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_presort

    @is_presort.setter
    def is_presort(self, is_presort):
        """Sets the is_presort of this V1CarriageDeliveryListResponseResult.

        `true`, если отгрузка с предсортировкой.   # noqa: E501

        :param is_presort: The is_presort of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: bool
        """

        self._is_presort = is_presort

    @property
    def is_rfbs(self):
        """Gets the is_rfbs of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        `true`, если склад работает по схеме rFBS.   # noqa: E501

        :return: The is_rfbs of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_rfbs

    @is_rfbs.setter
    def is_rfbs(self, is_rfbs):
        """Sets the is_rfbs of this V1CarriageDeliveryListResponseResult.

        `true`, если склад работает по схеме rFBS.   # noqa: E501

        :param is_rfbs: The is_rfbs of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: bool
        """

        self._is_rfbs = is_rfbs

    @property
    def recommended_time_local(self):
        """Gets the recommended_time_local of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Рекомендуемое местное время отгрузки в пункт приёма заказов.  # noqa: E501

        :return: The recommended_time_local of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._recommended_time_local

    @recommended_time_local.setter
    def recommended_time_local(self, recommended_time_local):
        """Sets the recommended_time_local of this V1CarriageDeliveryListResponseResult.

        Рекомендуемое местное время отгрузки в пункт приёма заказов.  # noqa: E501

        :param recommended_time_local: The recommended_time_local of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: str
        """

        self._recommended_time_local = recommended_time_local

    @property
    def recommended_time_utc_offset_in_minutes(self):
        """Gets the recommended_time_utc_offset_in_minutes of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Смещение часового пояса рекомендуемого времени отгрузки от UTC-0 в минутах.  # noqa: E501

        :return: The recommended_time_utc_offset_in_minutes of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: float
        """
        return self._recommended_time_utc_offset_in_minutes

    @recommended_time_utc_offset_in_minutes.setter
    def recommended_time_utc_offset_in_minutes(self, recommended_time_utc_offset_in_minutes):
        """Sets the recommended_time_utc_offset_in_minutes of this V1CarriageDeliveryListResponseResult.

        Смещение часового пояса рекомендуемого времени отгрузки от UTC-0 в минутах.  # noqa: E501

        :param recommended_time_utc_offset_in_minutes: The recommended_time_utc_offset_in_minutes of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: float
        """

        self._recommended_time_utc_offset_in_minutes = recommended_time_utc_offset_in_minutes

    @property
    def cutoff_at(self):
        """Gets the cutoff_at of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Дата и время, до которых нужно собрать отправление.  # noqa: E501

        :return: The cutoff_at of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: datetime
        """
        return self._cutoff_at

    @cutoff_at.setter
    def cutoff_at(self, cutoff_at):
        """Sets the cutoff_at of this V1CarriageDeliveryListResponseResult.

        Дата и время, до которых нужно собрать отправление.  # noqa: E501

        :param cutoff_at: The cutoff_at of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: datetime
        """

        self._cutoff_at = cutoff_at

    @property
    def mandatory_packaged_count(self):
        """Gets the mandatory_packaged_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Количество «обязательных» собранных отправлений.  # noqa: E501

        :return: The mandatory_packaged_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._mandatory_packaged_count

    @mandatory_packaged_count.setter
    def mandatory_packaged_count(self, mandatory_packaged_count):
        """Sets the mandatory_packaged_count of this V1CarriageDeliveryListResponseResult.

        Количество «обязательных» собранных отправлений.  # noqa: E501

        :param mandatory_packaged_count: The mandatory_packaged_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: int
        """

        self._mandatory_packaged_count = mandatory_packaged_count

    @property
    def mandatory_packaged_quantum_count(self):
        """Gets the mandatory_packaged_quantum_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Количество «обязательных» собранных квантов.  # noqa: E501

        :return: The mandatory_packaged_quantum_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._mandatory_packaged_quantum_count

    @mandatory_packaged_quantum_count.setter
    def mandatory_packaged_quantum_count(self, mandatory_packaged_quantum_count):
        """Sets the mandatory_packaged_quantum_count of this V1CarriageDeliveryListResponseResult.

        Количество «обязательных» собранных квантов.  # noqa: E501

        :param mandatory_packaged_quantum_count: The mandatory_packaged_quantum_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: int
        """

        self._mandatory_packaged_quantum_count = mandatory_packaged_quantum_count

    @property
    def mandatory_postings_count(self):
        """Gets the mandatory_postings_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Количество отправлений, которые нужно собрать.  # noqa: E501

        :return: The mandatory_postings_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._mandatory_postings_count

    @mandatory_postings_count.setter
    def mandatory_postings_count(self, mandatory_postings_count):
        """Sets the mandatory_postings_count of this V1CarriageDeliveryListResponseResult.

        Количество отправлений, которые нужно собрать.  # noqa: E501

        :param mandatory_postings_count: The mandatory_postings_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: int
        """

        self._mandatory_postings_count = mandatory_postings_count

    @property
    def mandatory_quantum_count(self):
        """Gets the mandatory_quantum_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Количество квантов, которые нужно собрать.  # noqa: E501

        :return: The mandatory_quantum_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._mandatory_quantum_count

    @mandatory_quantum_count.setter
    def mandatory_quantum_count(self, mandatory_quantum_count):
        """Sets the mandatory_quantum_count of this V1CarriageDeliveryListResponseResult.

        Количество квантов, которые нужно собрать.  # noqa: E501

        :param mandatory_quantum_count: The mandatory_quantum_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: int
        """

        self._mandatory_quantum_count = mandatory_quantum_count

    @property
    def optional_packaged_count(self):
        """Gets the optional_packaged_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Количество собранных «необязательных» отправлений.  # noqa: E501

        :return: The optional_packaged_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._optional_packaged_count

    @optional_packaged_count.setter
    def optional_packaged_count(self, optional_packaged_count):
        """Sets the optional_packaged_count of this V1CarriageDeliveryListResponseResult.

        Количество собранных «необязательных» отправлений.  # noqa: E501

        :param optional_packaged_count: The optional_packaged_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: int
        """

        self._optional_packaged_count = optional_packaged_count

    @property
    def postings_for_another_carriage_count(self):
        """Gets the postings_for_another_carriage_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Количество отправлений, которые могут попасть в следующую перевозку.  # noqa: E501

        :return: The postings_for_another_carriage_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._postings_for_another_carriage_count

    @postings_for_another_carriage_count.setter
    def postings_for_another_carriage_count(self, postings_for_another_carriage_count):
        """Sets the postings_for_another_carriage_count of this V1CarriageDeliveryListResponseResult.

        Количество отправлений, которые могут попасть в следующую перевозку.  # noqa: E501

        :param postings_for_another_carriage_count: The postings_for_another_carriage_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: int
        """

        self._postings_for_another_carriage_count = postings_for_another_carriage_count

    @property
    def quantum_for_another_carriage_count(self):
        """Gets the quantum_for_another_carriage_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Количество квантов, которые могут попасть в следующую перевозку.  # noqa: E501

        :return: The quantum_for_another_carriage_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._quantum_for_another_carriage_count

    @quantum_for_another_carriage_count.setter
    def quantum_for_another_carriage_count(self, quantum_for_another_carriage_count):
        """Sets the quantum_for_another_carriage_count of this V1CarriageDeliveryListResponseResult.

        Количество квантов, которые могут попасть в следующую перевозку.  # noqa: E501

        :param quantum_for_another_carriage_count: The quantum_for_another_carriage_count of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: int
        """

        self._quantum_for_another_carriage_count = quantum_for_another_carriage_count

    @property
    def timeslot_from(self):
        """Gets the timeslot_from of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Начало таймслота в точке отгрузки.  # noqa: E501

        :return: The timeslot_from of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: datetime
        """
        return self._timeslot_from

    @timeslot_from.setter
    def timeslot_from(self, timeslot_from):
        """Sets the timeslot_from of this V1CarriageDeliveryListResponseResult.

        Начало таймслота в точке отгрузки.  # noqa: E501

        :param timeslot_from: The timeslot_from of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: datetime
        """

        self._timeslot_from = timeslot_from

    @property
    def timeslot_to(self):
        """Gets the timeslot_to of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Окончание таймслота в точке отгрузки.  # noqa: E501

        :return: The timeslot_to of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: datetime
        """
        return self._timeslot_to

    @timeslot_to.setter
    def timeslot_to(self, timeslot_to):
        """Sets the timeslot_to of this V1CarriageDeliveryListResponseResult.

        Окончание таймслота в точке отгрузки.  # noqa: E501

        :param timeslot_to: The timeslot_to of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: datetime
        """

        self._timeslot_to = timeslot_to

    @property
    def tpl_provider_icon_url(self):
        """Gets the tpl_provider_icon_url of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Ссылка на иконку службы доставки.  # noqa: E501

        :return: The tpl_provider_icon_url of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._tpl_provider_icon_url

    @tpl_provider_icon_url.setter
    def tpl_provider_icon_url(self, tpl_provider_icon_url):
        """Sets the tpl_provider_icon_url of this V1CarriageDeliveryListResponseResult.

        Ссылка на иконку службы доставки.  # noqa: E501

        :param tpl_provider_icon_url: The tpl_provider_icon_url of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: str
        """

        self._tpl_provider_icon_url = tpl_provider_icon_url

    @property
    def tpl_provider_name(self):
        """Gets the tpl_provider_name of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Название службы доставки.  # noqa: E501

        :return: The tpl_provider_name of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._tpl_provider_name

    @tpl_provider_name.setter
    def tpl_provider_name(self, tpl_provider_name):
        """Sets the tpl_provider_name of this V1CarriageDeliveryListResponseResult.

        Название службы доставки.  # noqa: E501

        :param tpl_provider_name: The tpl_provider_name of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: str
        """

        self._tpl_provider_name = tpl_provider_name

    @property
    def warehouse_city(self):
        """Gets the warehouse_city of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Город склада.  # noqa: E501

        :return: The warehouse_city of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_city

    @warehouse_city.setter
    def warehouse_city(self, warehouse_city):
        """Sets the warehouse_city of this V1CarriageDeliveryListResponseResult.

        Город склада.  # noqa: E501

        :param warehouse_city: The warehouse_city of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: str
        """

        self._warehouse_city = warehouse_city

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The warehouse_id of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this V1CarriageDeliveryListResponseResult.

        Идентификатор склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this V1CarriageDeliveryListResponseResult.  # noqa: E501

        Название склада.  # noqa: E501

        :return: The warehouse_name of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this V1CarriageDeliveryListResponseResult.

        Название склада.  # noqa: E501

        :param warehouse_name: The warehouse_name of this V1CarriageDeliveryListResponseResult.  # noqa: E501
        :type: str
        """

        self._warehouse_name = warehouse_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CarriageDeliveryListResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CarriageDeliveryListResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
