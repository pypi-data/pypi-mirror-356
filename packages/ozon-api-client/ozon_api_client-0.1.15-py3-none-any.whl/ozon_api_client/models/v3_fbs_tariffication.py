# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3FbsTariffication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_tariff_rate': 'float',
        'current_tariff_type': 'str',
        'current_tariff_charge': 'str',
        'current_tariff_charge_currency_code': 'str',
        'next_tariff_rate': 'float',
        'next_tariff_type': 'str',
        'next_tariff_charge': 'str',
        'next_tariff_starts_at': 'datetime',
        'next_tariff_charge_currency_code': 'str'
    }

    attribute_map = {
        'current_tariff_rate': 'current_tariff_rate',
        'current_tariff_type': 'current_tariff_type',
        'current_tariff_charge': 'current_tariff_charge',
        'current_tariff_charge_currency_code': 'current_tariff_charge_currency_code',
        'next_tariff_rate': 'next_tariff_rate',
        'next_tariff_type': 'next_tariff_type',
        'next_tariff_charge': 'next_tariff_charge',
        'next_tariff_starts_at': 'next_tariff_starts_at',
        'next_tariff_charge_currency_code': 'next_tariff_charge_currency_code'
    }

    def __init__(self, current_tariff_rate=None, current_tariff_type=None, current_tariff_charge=None, current_tariff_charge_currency_code=None, next_tariff_rate=None, next_tariff_type=None, next_tariff_charge=None, next_tariff_starts_at=None, next_tariff_charge_currency_code=None):  # noqa: E501
        """V3FbsTariffication - a model defined in Swagger"""  # noqa: E501
        self._current_tariff_rate = None
        self._current_tariff_type = None
        self._current_tariff_charge = None
        self._current_tariff_charge_currency_code = None
        self._next_tariff_rate = None
        self._next_tariff_type = None
        self._next_tariff_charge = None
        self._next_tariff_starts_at = None
        self._next_tariff_charge_currency_code = None
        self.discriminator = None
        if current_tariff_rate is not None:
            self.current_tariff_rate = current_tariff_rate
        if current_tariff_type is not None:
            self.current_tariff_type = current_tariff_type
        if current_tariff_charge is not None:
            self.current_tariff_charge = current_tariff_charge
        if current_tariff_charge_currency_code is not None:
            self.current_tariff_charge_currency_code = current_tariff_charge_currency_code
        if next_tariff_rate is not None:
            self.next_tariff_rate = next_tariff_rate
        if next_tariff_type is not None:
            self.next_tariff_type = next_tariff_type
        if next_tariff_charge is not None:
            self.next_tariff_charge = next_tariff_charge
        if next_tariff_starts_at is not None:
            self.next_tariff_starts_at = next_tariff_starts_at
        if next_tariff_charge_currency_code is not None:
            self.next_tariff_charge_currency_code = next_tariff_charge_currency_code

    @property
    def current_tariff_rate(self):
        """Gets the current_tariff_rate of this V3FbsTariffication.  # noqa: E501

        Текущий процент тарификации.  # noqa: E501

        :return: The current_tariff_rate of this V3FbsTariffication.  # noqa: E501
        :rtype: float
        """
        return self._current_tariff_rate

    @current_tariff_rate.setter
    def current_tariff_rate(self, current_tariff_rate):
        """Sets the current_tariff_rate of this V3FbsTariffication.

        Текущий процент тарификации.  # noqa: E501

        :param current_tariff_rate: The current_tariff_rate of this V3FbsTariffication.  # noqa: E501
        :type: float
        """

        self._current_tariff_rate = current_tariff_rate

    @property
    def current_tariff_type(self):
        """Gets the current_tariff_type of this V3FbsTariffication.  # noqa: E501

        Текущий тип тарификации — скидка или надбавка.  # noqa: E501

        :return: The current_tariff_type of this V3FbsTariffication.  # noqa: E501
        :rtype: str
        """
        return self._current_tariff_type

    @current_tariff_type.setter
    def current_tariff_type(self, current_tariff_type):
        """Sets the current_tariff_type of this V3FbsTariffication.

        Текущий тип тарификации — скидка или надбавка.  # noqa: E501

        :param current_tariff_type: The current_tariff_type of this V3FbsTariffication.  # noqa: E501
        :type: str
        """

        self._current_tariff_type = current_tariff_type

    @property
    def current_tariff_charge(self):
        """Gets the current_tariff_charge of this V3FbsTariffication.  # noqa: E501

        Текущая сумма скидки или надбавки.  # noqa: E501

        :return: The current_tariff_charge of this V3FbsTariffication.  # noqa: E501
        :rtype: str
        """
        return self._current_tariff_charge

    @current_tariff_charge.setter
    def current_tariff_charge(self, current_tariff_charge):
        """Sets the current_tariff_charge of this V3FbsTariffication.

        Текущая сумма скидки или надбавки.  # noqa: E501

        :param current_tariff_charge: The current_tariff_charge of this V3FbsTariffication.  # noqa: E501
        :type: str
        """

        self._current_tariff_charge = current_tariff_charge

    @property
    def current_tariff_charge_currency_code(self):
        """Gets the current_tariff_charge_currency_code of this V3FbsTariffication.  # noqa: E501

        Валюта суммы.  # noqa: E501

        :return: The current_tariff_charge_currency_code of this V3FbsTariffication.  # noqa: E501
        :rtype: str
        """
        return self._current_tariff_charge_currency_code

    @current_tariff_charge_currency_code.setter
    def current_tariff_charge_currency_code(self, current_tariff_charge_currency_code):
        """Sets the current_tariff_charge_currency_code of this V3FbsTariffication.

        Валюта суммы.  # noqa: E501

        :param current_tariff_charge_currency_code: The current_tariff_charge_currency_code of this V3FbsTariffication.  # noqa: E501
        :type: str
        """

        self._current_tariff_charge_currency_code = current_tariff_charge_currency_code

    @property
    def next_tariff_rate(self):
        """Gets the next_tariff_rate of this V3FbsTariffication.  # noqa: E501

        Процент, по которому будет тарифицироваться отправление через указанное в параметре `next_tariff_starts_at` время.  # noqa: E501

        :return: The next_tariff_rate of this V3FbsTariffication.  # noqa: E501
        :rtype: float
        """
        return self._next_tariff_rate

    @next_tariff_rate.setter
    def next_tariff_rate(self, next_tariff_rate):
        """Sets the next_tariff_rate of this V3FbsTariffication.

        Процент, по которому будет тарифицироваться отправление через указанное в параметре `next_tariff_starts_at` время.  # noqa: E501

        :param next_tariff_rate: The next_tariff_rate of this V3FbsTariffication.  # noqa: E501
        :type: float
        """

        self._next_tariff_rate = next_tariff_rate

    @property
    def next_tariff_type(self):
        """Gets the next_tariff_type of this V3FbsTariffication.  # noqa: E501

        Тип тарифа, по которому будет тарифицироваться отправление через указанное в параметре `next_tariff_starts_at` время — скидка или надбавка.  # noqa: E501

        :return: The next_tariff_type of this V3FbsTariffication.  # noqa: E501
        :rtype: str
        """
        return self._next_tariff_type

    @next_tariff_type.setter
    def next_tariff_type(self, next_tariff_type):
        """Sets the next_tariff_type of this V3FbsTariffication.

        Тип тарифа, по которому будет тарифицироваться отправление через указанное в параметре `next_tariff_starts_at` время — скидка или надбавка.  # noqa: E501

        :param next_tariff_type: The next_tariff_type of this V3FbsTariffication.  # noqa: E501
        :type: str
        """

        self._next_tariff_type = next_tariff_type

    @property
    def next_tariff_charge(self):
        """Gets the next_tariff_charge of this V3FbsTariffication.  # noqa: E501

        Сумма скидки или надбавки на следующем шаге тарификации.  # noqa: E501

        :return: The next_tariff_charge of this V3FbsTariffication.  # noqa: E501
        :rtype: str
        """
        return self._next_tariff_charge

    @next_tariff_charge.setter
    def next_tariff_charge(self, next_tariff_charge):
        """Sets the next_tariff_charge of this V3FbsTariffication.

        Сумма скидки или надбавки на следующем шаге тарификации.  # noqa: E501

        :param next_tariff_charge: The next_tariff_charge of this V3FbsTariffication.  # noqa: E501
        :type: str
        """

        self._next_tariff_charge = next_tariff_charge

    @property
    def next_tariff_starts_at(self):
        """Gets the next_tariff_starts_at of this V3FbsTariffication.  # noqa: E501

        Дата и время, когда начнёт применяться новый тариф.  Формат: `YYYY-MM-DDThh:mm:ss.mcsZ`.   Пример: `2023-11-13T08:05:57.657Z`.   # noqa: E501

        :return: The next_tariff_starts_at of this V3FbsTariffication.  # noqa: E501
        :rtype: datetime
        """
        return self._next_tariff_starts_at

    @next_tariff_starts_at.setter
    def next_tariff_starts_at(self, next_tariff_starts_at):
        """Sets the next_tariff_starts_at of this V3FbsTariffication.

        Дата и время, когда начнёт применяться новый тариф.  Формат: `YYYY-MM-DDThh:mm:ss.mcsZ`.   Пример: `2023-11-13T08:05:57.657Z`.   # noqa: E501

        :param next_tariff_starts_at: The next_tariff_starts_at of this V3FbsTariffication.  # noqa: E501
        :type: datetime
        """

        self._next_tariff_starts_at = next_tariff_starts_at

    @property
    def next_tariff_charge_currency_code(self):
        """Gets the next_tariff_charge_currency_code of this V3FbsTariffication.  # noqa: E501

        Валюта нового тарифа.  # noqa: E501

        :return: The next_tariff_charge_currency_code of this V3FbsTariffication.  # noqa: E501
        :rtype: str
        """
        return self._next_tariff_charge_currency_code

    @next_tariff_charge_currency_code.setter
    def next_tariff_charge_currency_code(self, next_tariff_charge_currency_code):
        """Sets the next_tariff_charge_currency_code of this V3FbsTariffication.

        Валюта нового тарифа.  # noqa: E501

        :param next_tariff_charge_currency_code: The next_tariff_charge_currency_code of this V3FbsTariffication.  # noqa: E501
        :type: str
        """

        self._next_tariff_charge_currency_code = next_tariff_charge_currency_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3FbsTariffication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3FbsTariffication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
