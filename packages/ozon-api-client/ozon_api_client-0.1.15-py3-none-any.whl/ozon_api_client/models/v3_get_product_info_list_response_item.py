# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3GetProductInfoListResponseItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barcodes': 'list[str]',
        'color_image': 'list[str]',
        'commissions': 'list[GetProductInfoListResponseCommission]',
        'created_at': 'datetime',
        'currency_code': 'str',
        'description_category_id': 'int',
        'discounted_fbo_stocks': 'int',
        'errors': 'list[GetProductInfoListResponseError]',
        'has_discounted_fbo_item': 'bool',
        'id': 'int',
        'images': 'list[str]',
        'images360': 'list[str]',
        'is_archived': 'bool',
        'is_autoarchived': 'bool',
        'is_discounted': 'bool',
        'is_kgt': 'bool',
        'is_prepayment_allowed': 'bool',
        'is_super': 'bool',
        'marketing_price': 'str',
        'min_price': 'str',
        'model_info': 'GetProductInfoListResponseModelInfo',
        'name': 'str',
        'offer_id': 'str',
        'old_price': 'str',
        'price': 'str',
        'price_indexes': 'GetProductInfoListResponsePriceIndexes',
        'primary_image': 'list[str]',
        'sources': 'list[GetProductInfoListResponseSource]',
        'statuses': 'GetProductInfoListResponseStatuses',
        'stocks': 'GetProductInfoListResponseStocks',
        'type_id': 'int',
        'updated_at': 'datetime',
        'vat': 'str',
        'visibility_details': 'GetProductInfoListResponseVisibilityDetails',
        'volume_weight': 'float'
    }

    attribute_map = {
        'barcodes': 'barcodes',
        'color_image': 'color_image',
        'commissions': 'commissions',
        'created_at': 'created_at',
        'currency_code': 'currency_code',
        'description_category_id': 'description_category_id',
        'discounted_fbo_stocks': 'discounted_fbo_stocks',
        'errors': 'errors',
        'has_discounted_fbo_item': 'has_discounted_fbo_item',
        'id': 'id',
        'images': 'images',
        'images360': 'images360',
        'is_archived': 'is_archived',
        'is_autoarchived': 'is_autoarchived',
        'is_discounted': 'is_discounted',
        'is_kgt': 'is_kgt',
        'is_prepayment_allowed': 'is_prepayment_allowed',
        'is_super': 'is_super',
        'marketing_price': 'marketing_price',
        'min_price': 'min_price',
        'model_info': 'model_info',
        'name': 'name',
        'offer_id': 'offer_id',
        'old_price': 'old_price',
        'price': 'price',
        'price_indexes': 'price_indexes',
        'primary_image': 'primary_image',
        'sources': 'sources',
        'statuses': 'statuses',
        'stocks': 'stocks',
        'type_id': 'type_id',
        'updated_at': 'updated_at',
        'vat': 'vat',
        'visibility_details': 'visibility_details',
        'volume_weight': 'volume_weight'
    }

    def __init__(self, barcodes=None, color_image=None, commissions=None, created_at=None, currency_code=None, description_category_id=None, discounted_fbo_stocks=None, errors=None, has_discounted_fbo_item=None, id=None, images=None, images360=None, is_archived=None, is_autoarchived=None, is_discounted=None, is_kgt=None, is_prepayment_allowed=None, is_super=None, marketing_price=None, min_price=None, model_info=None, name=None, offer_id=None, old_price=None, price=None, price_indexes=None, primary_image=None, sources=None, statuses=None, stocks=None, type_id=None, updated_at=None, vat=None, visibility_details=None, volume_weight=None):  # noqa: E501
        """V3GetProductInfoListResponseItem - a model defined in Swagger"""  # noqa: E501
        self._barcodes = None
        self._color_image = None
        self._commissions = None
        self._created_at = None
        self._currency_code = None
        self._description_category_id = None
        self._discounted_fbo_stocks = None
        self._errors = None
        self._has_discounted_fbo_item = None
        self._id = None
        self._images = None
        self._images360 = None
        self._is_archived = None
        self._is_autoarchived = None
        self._is_discounted = None
        self._is_kgt = None
        self._is_prepayment_allowed = None
        self._is_super = None
        self._marketing_price = None
        self._min_price = None
        self._model_info = None
        self._name = None
        self._offer_id = None
        self._old_price = None
        self._price = None
        self._price_indexes = None
        self._primary_image = None
        self._sources = None
        self._statuses = None
        self._stocks = None
        self._type_id = None
        self._updated_at = None
        self._vat = None
        self._visibility_details = None
        self._volume_weight = None
        self.discriminator = None
        if barcodes is not None:
            self.barcodes = barcodes
        if color_image is not None:
            self.color_image = color_image
        if commissions is not None:
            self.commissions = commissions
        if created_at is not None:
            self.created_at = created_at
        if currency_code is not None:
            self.currency_code = currency_code
        if description_category_id is not None:
            self.description_category_id = description_category_id
        if discounted_fbo_stocks is not None:
            self.discounted_fbo_stocks = discounted_fbo_stocks
        if errors is not None:
            self.errors = errors
        if has_discounted_fbo_item is not None:
            self.has_discounted_fbo_item = has_discounted_fbo_item
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if images360 is not None:
            self.images360 = images360
        if is_archived is not None:
            self.is_archived = is_archived
        if is_autoarchived is not None:
            self.is_autoarchived = is_autoarchived
        if is_discounted is not None:
            self.is_discounted = is_discounted
        if is_kgt is not None:
            self.is_kgt = is_kgt
        if is_prepayment_allowed is not None:
            self.is_prepayment_allowed = is_prepayment_allowed
        if is_super is not None:
            self.is_super = is_super
        if marketing_price is not None:
            self.marketing_price = marketing_price
        if min_price is not None:
            self.min_price = min_price
        if model_info is not None:
            self.model_info = model_info
        if name is not None:
            self.name = name
        if offer_id is not None:
            self.offer_id = offer_id
        if old_price is not None:
            self.old_price = old_price
        if price is not None:
            self.price = price
        if price_indexes is not None:
            self.price_indexes = price_indexes
        if primary_image is not None:
            self.primary_image = primary_image
        if sources is not None:
            self.sources = sources
        if statuses is not None:
            self.statuses = statuses
        if stocks is not None:
            self.stocks = stocks
        if type_id is not None:
            self.type_id = type_id
        if updated_at is not None:
            self.updated_at = updated_at
        if vat is not None:
            self.vat = vat
        if visibility_details is not None:
            self.visibility_details = visibility_details
        if volume_weight is not None:
            self.volume_weight = volume_weight

    @property
    def barcodes(self):
        """Gets the barcodes of this V3GetProductInfoListResponseItem.  # noqa: E501

        Все штрихкоды товара.  # noqa: E501

        :return: The barcodes of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._barcodes

    @barcodes.setter
    def barcodes(self, barcodes):
        """Sets the barcodes of this V3GetProductInfoListResponseItem.

        Все штрихкоды товара.  # noqa: E501

        :param barcodes: The barcodes of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: list[str]
        """

        self._barcodes = barcodes

    @property
    def color_image(self):
        """Gets the color_image of this V3GetProductInfoListResponseItem.  # noqa: E501

        Изображение цвета товара.  # noqa: E501

        :return: The color_image of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._color_image

    @color_image.setter
    def color_image(self, color_image):
        """Sets the color_image of this V3GetProductInfoListResponseItem.

        Изображение цвета товара.  # noqa: E501

        :param color_image: The color_image of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: list[str]
        """

        self._color_image = color_image

    @property
    def commissions(self):
        """Gets the commissions of this V3GetProductInfoListResponseItem.  # noqa: E501

        Информация о комиссиях.  # noqa: E501

        :return: The commissions of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: list[GetProductInfoListResponseCommission]
        """
        return self._commissions

    @commissions.setter
    def commissions(self, commissions):
        """Sets the commissions of this V3GetProductInfoListResponseItem.

        Информация о комиссиях.  # noqa: E501

        :param commissions: The commissions of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: list[GetProductInfoListResponseCommission]
        """

        self._commissions = commissions

    @property
    def created_at(self):
        """Gets the created_at of this V3GetProductInfoListResponseItem.  # noqa: E501

        Дата и время создания товара.  # noqa: E501

        :return: The created_at of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V3GetProductInfoListResponseItem.

        Дата и время создания товара.  # noqa: E501

        :param created_at: The created_at of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def currency_code(self):
        """Gets the currency_code of this V3GetProductInfoListResponseItem.  # noqa: E501

        Валюта.  # noqa: E501

        :return: The currency_code of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this V3GetProductInfoListResponseItem.

        Валюта.  # noqa: E501

        :param currency_code: The currency_code of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def description_category_id(self):
        """Gets the description_category_id of this V3GetProductInfoListResponseItem.  # noqa: E501

        Идентификатор категории. Используйте его с методами [/v1/description-category/attribute](#operation/DescriptionCategoryAPI_GetAttributes) и [/v1/description-category/attribute/values](#operation/DescriptionCategoryAPI_GetAttributeValues).   # noqa: E501

        :return: The description_category_id of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._description_category_id

    @description_category_id.setter
    def description_category_id(self, description_category_id):
        """Sets the description_category_id of this V3GetProductInfoListResponseItem.

        Идентификатор категории. Используйте его с методами [/v1/description-category/attribute](#operation/DescriptionCategoryAPI_GetAttributes) и [/v1/description-category/attribute/values](#operation/DescriptionCategoryAPI_GetAttributeValues).   # noqa: E501

        :param description_category_id: The description_category_id of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: int
        """

        self._description_category_id = description_category_id

    @property
    def discounted_fbo_stocks(self):
        """Gets the discounted_fbo_stocks of this V3GetProductInfoListResponseItem.  # noqa: E501

        Остатки уценённого товара на складе Ozon.  # noqa: E501

        :return: The discounted_fbo_stocks of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._discounted_fbo_stocks

    @discounted_fbo_stocks.setter
    def discounted_fbo_stocks(self, discounted_fbo_stocks):
        """Sets the discounted_fbo_stocks of this V3GetProductInfoListResponseItem.

        Остатки уценённого товара на складе Ozon.  # noqa: E501

        :param discounted_fbo_stocks: The discounted_fbo_stocks of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: int
        """

        self._discounted_fbo_stocks = discounted_fbo_stocks

    @property
    def errors(self):
        """Gets the errors of this V3GetProductInfoListResponseItem.  # noqa: E501

        Информация об ошибках при создании или валидации товара.  # noqa: E501

        :return: The errors of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: list[GetProductInfoListResponseError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this V3GetProductInfoListResponseItem.

        Информация об ошибках при создании или валидации товара.  # noqa: E501

        :param errors: The errors of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: list[GetProductInfoListResponseError]
        """

        self._errors = errors

    @property
    def has_discounted_fbo_item(self):
        """Gets the has_discounted_fbo_item of this V3GetProductInfoListResponseItem.  # noqa: E501

        Признак, что у товара есть уценённые аналоги на складе Ozon.  # noqa: E501

        :return: The has_discounted_fbo_item of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: bool
        """
        return self._has_discounted_fbo_item

    @has_discounted_fbo_item.setter
    def has_discounted_fbo_item(self, has_discounted_fbo_item):
        """Sets the has_discounted_fbo_item of this V3GetProductInfoListResponseItem.

        Признак, что у товара есть уценённые аналоги на складе Ozon.  # noqa: E501

        :param has_discounted_fbo_item: The has_discounted_fbo_item of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: bool
        """

        self._has_discounted_fbo_item = has_discounted_fbo_item

    @property
    def id(self):
        """Gets the id of this V3GetProductInfoListResponseItem.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The id of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V3GetProductInfoListResponseItem.

        Идентификатор товара.  # noqa: E501

        :param id: The id of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this V3GetProductInfoListResponseItem.  # noqa: E501

        Массив ссылок на изображения. Изображения в массиве расположены в порядке их расположения на сайте. Если параметр `primary_image` не указан, первое изображение в массиве главное для товара.   # noqa: E501

        :return: The images of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this V3GetProductInfoListResponseItem.

        Массив ссылок на изображения. Изображения в массиве расположены в порядке их расположения на сайте. Если параметр `primary_image` не указан, первое изображение в массиве главное для товара.   # noqa: E501

        :param images: The images of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: list[str]
        """

        self._images = images

    @property
    def images360(self):
        """Gets the images360 of this V3GetProductInfoListResponseItem.  # noqa: E501

        Массив изображений 360.  # noqa: E501

        :return: The images360 of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._images360

    @images360.setter
    def images360(self, images360):
        """Sets the images360 of this V3GetProductInfoListResponseItem.

        Массив изображений 360.  # noqa: E501

        :param images360: The images360 of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: list[str]
        """

        self._images360 = images360

    @property
    def is_archived(self):
        """Gets the is_archived of this V3GetProductInfoListResponseItem.  # noqa: E501

        `true`, если товар архивирован вручную.   # noqa: E501

        :return: The is_archived of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this V3GetProductInfoListResponseItem.

        `true`, если товар архивирован вручную.   # noqa: E501

        :param is_archived: The is_archived of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def is_autoarchived(self):
        """Gets the is_autoarchived of this V3GetProductInfoListResponseItem.  # noqa: E501

        `true`, если товар архивирован автоматически.   # noqa: E501

        :return: The is_autoarchived of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_autoarchived

    @is_autoarchived.setter
    def is_autoarchived(self, is_autoarchived):
        """Sets the is_autoarchived of this V3GetProductInfoListResponseItem.

        `true`, если товар архивирован автоматически.   # noqa: E501

        :param is_autoarchived: The is_autoarchived of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: bool
        """

        self._is_autoarchived = is_autoarchived

    @property
    def is_discounted(self):
        """Gets the is_discounted of this V3GetProductInfoListResponseItem.  # noqa: E501

        Признак, является ли товар уценённым:   - Если товар создавался продавцом как уценённый — `true`.    - Если товар не уценённый или был уценён Ozon — `false`.   # noqa: E501

        :return: The is_discounted of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_discounted

    @is_discounted.setter
    def is_discounted(self, is_discounted):
        """Sets the is_discounted of this V3GetProductInfoListResponseItem.

        Признак, является ли товар уценённым:   - Если товар создавался продавцом как уценённый — `true`.    - Если товар не уценённый или был уценён Ozon — `false`.   # noqa: E501

        :param is_discounted: The is_discounted of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: bool
        """

        self._is_discounted = is_discounted

    @property
    def is_kgt(self):
        """Gets the is_kgt of this V3GetProductInfoListResponseItem.  # noqa: E501

        Признак крупногабаритного товара.  # noqa: E501

        :return: The is_kgt of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_kgt

    @is_kgt.setter
    def is_kgt(self, is_kgt):
        """Sets the is_kgt of this V3GetProductInfoListResponseItem.

        Признак крупногабаритного товара.  # noqa: E501

        :param is_kgt: The is_kgt of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: bool
        """

        self._is_kgt = is_kgt

    @property
    def is_prepayment_allowed(self):
        """Gets the is_prepayment_allowed of this V3GetProductInfoListResponseItem.  # noqa: E501

        `true`, если возможна предоплата.   # noqa: E501

        :return: The is_prepayment_allowed of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_prepayment_allowed

    @is_prepayment_allowed.setter
    def is_prepayment_allowed(self, is_prepayment_allowed):
        """Sets the is_prepayment_allowed of this V3GetProductInfoListResponseItem.

        `true`, если возможна предоплата.   # noqa: E501

        :param is_prepayment_allowed: The is_prepayment_allowed of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: bool
        """

        self._is_prepayment_allowed = is_prepayment_allowed

    @property
    def is_super(self):
        """Gets the is_super of this V3GetProductInfoListResponseItem.  # noqa: E501

        Признак супер-товара.  [Подробнее о супер-товарах в Базе знаний продавца](https://seller-edu.ozon.ru/fbo/rabota-so-stokom/super-tovary)   # noqa: E501

        :return: The is_super of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_super

    @is_super.setter
    def is_super(self, is_super):
        """Sets the is_super of this V3GetProductInfoListResponseItem.

        Признак супер-товара.  [Подробнее о супер-товарах в Базе знаний продавца](https://seller-edu.ozon.ru/fbo/rabota-so-stokom/super-tovary)   # noqa: E501

        :param is_super: The is_super of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: bool
        """

        self._is_super = is_super

    @property
    def marketing_price(self):
        """Gets the marketing_price of this V3GetProductInfoListResponseItem.  # noqa: E501

        Цена на товар с учётом всех акций. Это значение будет указано на витрине Ozon.  # noqa: E501

        :return: The marketing_price of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._marketing_price

    @marketing_price.setter
    def marketing_price(self, marketing_price):
        """Sets the marketing_price of this V3GetProductInfoListResponseItem.

        Цена на товар с учётом всех акций. Это значение будет указано на витрине Ozon.  # noqa: E501

        :param marketing_price: The marketing_price of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: str
        """

        self._marketing_price = marketing_price

    @property
    def min_price(self):
        """Gets the min_price of this V3GetProductInfoListResponseItem.  # noqa: E501

        Минимальная цена товара после применения акций.  # noqa: E501

        :return: The min_price of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price):
        """Sets the min_price of this V3GetProductInfoListResponseItem.

        Минимальная цена товара после применения акций.  # noqa: E501

        :param min_price: The min_price of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: str
        """

        self._min_price = min_price

    @property
    def model_info(self):
        """Gets the model_info of this V3GetProductInfoListResponseItem.  # noqa: E501


        :return: The model_info of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: GetProductInfoListResponseModelInfo
        """
        return self._model_info

    @model_info.setter
    def model_info(self, model_info):
        """Sets the model_info of this V3GetProductInfoListResponseItem.


        :param model_info: The model_info of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: GetProductInfoListResponseModelInfo
        """

        self._model_info = model_info

    @property
    def name(self):
        """Gets the name of this V3GetProductInfoListResponseItem.  # noqa: E501

        Название.  # noqa: E501

        :return: The name of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V3GetProductInfoListResponseItem.

        Название.  # noqa: E501

        :param name: The name of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def offer_id(self):
        """Gets the offer_id of this V3GetProductInfoListResponseItem.  # noqa: E501

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :return: The offer_id of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this V3GetProductInfoListResponseItem.

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :param offer_id: The offer_id of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def old_price(self):
        """Gets the old_price of this V3GetProductInfoListResponseItem.  # noqa: E501

        Цена до учёта скидок. На карточке товара отображается зачёркнутой.  # noqa: E501

        :return: The old_price of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this V3GetProductInfoListResponseItem.

        Цена до учёта скидок. На карточке товара отображается зачёркнутой.  # noqa: E501

        :param old_price: The old_price of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: str
        """

        self._old_price = old_price

    @property
    def price(self):
        """Gets the price of this V3GetProductInfoListResponseItem.  # noqa: E501

        Цена товара с учётом скидок — это значение показывается на карточке товара.  # noqa: E501

        :return: The price of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this V3GetProductInfoListResponseItem.

        Цена товара с учётом скидок — это значение показывается на карточке товара.  # noqa: E501

        :param price: The price of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def price_indexes(self):
        """Gets the price_indexes of this V3GetProductInfoListResponseItem.  # noqa: E501


        :return: The price_indexes of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: GetProductInfoListResponsePriceIndexes
        """
        return self._price_indexes

    @price_indexes.setter
    def price_indexes(self, price_indexes):
        """Sets the price_indexes of this V3GetProductInfoListResponseItem.


        :param price_indexes: The price_indexes of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: GetProductInfoListResponsePriceIndexes
        """

        self._price_indexes = price_indexes

    @property
    def primary_image(self):
        """Gets the primary_image of this V3GetProductInfoListResponseItem.  # noqa: E501

        Главное изображение товара.  # noqa: E501

        :return: The primary_image of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._primary_image

    @primary_image.setter
    def primary_image(self, primary_image):
        """Sets the primary_image of this V3GetProductInfoListResponseItem.

        Главное изображение товара.  # noqa: E501

        :param primary_image: The primary_image of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: list[str]
        """

        self._primary_image = primary_image

    @property
    def sources(self):
        """Gets the sources of this V3GetProductInfoListResponseItem.  # noqa: E501

        Информация об источниках создания товара.  # noqa: E501

        :return: The sources of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: list[GetProductInfoListResponseSource]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this V3GetProductInfoListResponseItem.

        Информация об источниках создания товара.  # noqa: E501

        :param sources: The sources of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: list[GetProductInfoListResponseSource]
        """

        self._sources = sources

    @property
    def statuses(self):
        """Gets the statuses of this V3GetProductInfoListResponseItem.  # noqa: E501


        :return: The statuses of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: GetProductInfoListResponseStatuses
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this V3GetProductInfoListResponseItem.


        :param statuses: The statuses of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: GetProductInfoListResponseStatuses
        """

        self._statuses = statuses

    @property
    def stocks(self):
        """Gets the stocks of this V3GetProductInfoListResponseItem.  # noqa: E501


        :return: The stocks of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: GetProductInfoListResponseStocks
        """
        return self._stocks

    @stocks.setter
    def stocks(self, stocks):
        """Sets the stocks of this V3GetProductInfoListResponseItem.


        :param stocks: The stocks of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: GetProductInfoListResponseStocks
        """

        self._stocks = stocks

    @property
    def type_id(self):
        """Gets the type_id of this V3GetProductInfoListResponseItem.  # noqa: E501

        Идентификатор типа товара.  # noqa: E501

        :return: The type_id of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this V3GetProductInfoListResponseItem.

        Идентификатор типа товара.  # noqa: E501

        :param type_id: The type_id of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def updated_at(self):
        """Gets the updated_at of this V3GetProductInfoListResponseItem.  # noqa: E501

        Дата последнего обновления товара.  # noqa: E501

        :return: The updated_at of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V3GetProductInfoListResponseItem.

        Дата последнего обновления товара.  # noqa: E501

        :param updated_at: The updated_at of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def vat(self):
        """Gets the vat of this V3GetProductInfoListResponseItem.  # noqa: E501

        Ставка НДС для товара.  # noqa: E501

        :return: The vat of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this V3GetProductInfoListResponseItem.

        Ставка НДС для товара.  # noqa: E501

        :param vat: The vat of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: str
        """

        self._vat = vat

    @property
    def visibility_details(self):
        """Gets the visibility_details of this V3GetProductInfoListResponseItem.  # noqa: E501


        :return: The visibility_details of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: GetProductInfoListResponseVisibilityDetails
        """
        return self._visibility_details

    @visibility_details.setter
    def visibility_details(self, visibility_details):
        """Sets the visibility_details of this V3GetProductInfoListResponseItem.


        :param visibility_details: The visibility_details of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: GetProductInfoListResponseVisibilityDetails
        """

        self._visibility_details = visibility_details

    @property
    def volume_weight(self):
        """Gets the volume_weight of this V3GetProductInfoListResponseItem.  # noqa: E501

        Объёмный вес товара.  # noqa: E501

        :return: The volume_weight of this V3GetProductInfoListResponseItem.  # noqa: E501
        :rtype: float
        """
        return self._volume_weight

    @volume_weight.setter
    def volume_weight(self, volume_weight):
        """Sets the volume_weight of this V3GetProductInfoListResponseItem.

        Объёмный вес товара.  # noqa: E501

        :param volume_weight: The volume_weight of this V3GetProductInfoListResponseItem.  # noqa: E501
        :type: float
        """

        self._volume_weight = volume_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3GetProductInfoListResponseItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3GetProductInfoListResponseItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
