# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1AnalyticsManageStocksRequestFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'skus': 'list[str]',
        'stock_types': 'str',
        'warehouse_ids': 'list[str]'
    }

    attribute_map = {
        'skus': 'skus',
        'stock_types': 'stock_types',
        'warehouse_ids': 'warehouse_ids'
    }

    def __init__(self, skus=None, stock_types=None, warehouse_ids=None):  # noqa: E501
        """V1AnalyticsManageStocksRequestFilter - a model defined in Swagger"""  # noqa: E501
        self._skus = None
        self._stock_types = None
        self._warehouse_ids = None
        self.discriminator = None
        if skus is not None:
            self.skus = skus
        if stock_types is not None:
            self.stock_types = stock_types
        if warehouse_ids is not None:
            self.warehouse_ids = warehouse_ids

    @property
    def skus(self):
        """Gets the skus of this V1AnalyticsManageStocksRequestFilter.  # noqa: E501

        Идентификаторы товаров в системе Ozon — SKU.  # noqa: E501

        :return: The skus of this V1AnalyticsManageStocksRequestFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._skus

    @skus.setter
    def skus(self, skus):
        """Sets the skus of this V1AnalyticsManageStocksRequestFilter.

        Идентификаторы товаров в системе Ozon — SKU.  # noqa: E501

        :param skus: The skus of this V1AnalyticsManageStocksRequestFilter.  # noqa: E501
        :type: list[str]
        """

        self._skus = skus

    @property
    def stock_types(self):
        """Gets the stock_types of this V1AnalyticsManageStocksRequestFilter.  # noqa: E501

        Тип оставшегося на складе товара: - `STOCK_TYPE_VALID` — Валидный сток. Остаток товара, доступного для продажи.  - `STOCK_TYPE_WAITING_DOCS` — Превалидный сток. Остаток товара, который Ozon не может продавать, пока продавец не прислал в Ozon документы по обязательной маркировке. Товар перейдёт в валидный сток, когда документы будут подписаны. - `STOCK_TYPE_EXPIRING` — Предпросрок. Остаток товара, который снят с полки, но срок годности формально не истёк.  - `STOCK_TYPE_DEFECT` — Брак. Остаток товара, который находится на складах Ozon, но повреждён.   # noqa: E501

        :return: The stock_types of this V1AnalyticsManageStocksRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._stock_types

    @stock_types.setter
    def stock_types(self, stock_types):
        """Sets the stock_types of this V1AnalyticsManageStocksRequestFilter.

        Тип оставшегося на складе товара: - `STOCK_TYPE_VALID` — Валидный сток. Остаток товара, доступного для продажи.  - `STOCK_TYPE_WAITING_DOCS` — Превалидный сток. Остаток товара, который Ozon не может продавать, пока продавец не прислал в Ozon документы по обязательной маркировке. Товар перейдёт в валидный сток, когда документы будут подписаны. - `STOCK_TYPE_EXPIRING` — Предпросрок. Остаток товара, который снят с полки, но срок годности формально не истёк.  - `STOCK_TYPE_DEFECT` — Брак. Остаток товара, который находится на складах Ozon, но повреждён.   # noqa: E501

        :param stock_types: The stock_types of this V1AnalyticsManageStocksRequestFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["STOCK_TYPE_VALID", "STOCK_TYPE_WAITING_DOCS", "STOCK_TYPE_EXPIRING", "STOCK_TYPE_DEFECT"]  # noqa: E501
        if stock_types not in allowed_values:
            raise ValueError(
                "Invalid value for `stock_types` ({0}), must be one of {1}"  # noqa: E501
                .format(stock_types, allowed_values)
            )

        self._stock_types = stock_types

    @property
    def warehouse_ids(self):
        """Gets the warehouse_ids of this V1AnalyticsManageStocksRequestFilter.  # noqa: E501

        Идентификаторы складов.  # noqa: E501

        :return: The warehouse_ids of this V1AnalyticsManageStocksRequestFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._warehouse_ids

    @warehouse_ids.setter
    def warehouse_ids(self, warehouse_ids):
        """Sets the warehouse_ids of this V1AnalyticsManageStocksRequestFilter.

        Идентификаторы складов.  # noqa: E501

        :param warehouse_ids: The warehouse_ids of this V1AnalyticsManageStocksRequestFilter.  # noqa: E501
        :type: list[str]
        """

        self._warehouse_ids = warehouse_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AnalyticsManageStocksRequestFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AnalyticsManageStocksRequestFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
