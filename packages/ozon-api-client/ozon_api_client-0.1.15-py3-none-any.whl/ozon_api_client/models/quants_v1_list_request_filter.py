# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuantsV1ListRequestFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'QuantsV1ListRequestFilterCreatedAt',
        'cutoff': 'QuantsV1ListRequestFilterCutoff',
        'destination_place_id': 'int',
        'inv_quant_ids': 'list[str]',
        'offer_id': 'str',
        'sku_name': 'str',
        'statuses': 'list[V1QuantStatus]',
        'warehouse_id': 'int'
    }

    attribute_map = {
        'created_at': 'created_at',
        'cutoff': 'cutoff',
        'destination_place_id': 'destination_place_id',
        'inv_quant_ids': 'inv_quant_ids',
        'offer_id': 'offer_id',
        'sku_name': 'sku_name',
        'statuses': 'statuses',
        'warehouse_id': 'warehouse_id'
    }

    def __init__(self, created_at=None, cutoff=None, destination_place_id=None, inv_quant_ids=None, offer_id=None, sku_name=None, statuses=None, warehouse_id=None):  # noqa: E501
        """QuantsV1ListRequestFilter - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._cutoff = None
        self._destination_place_id = None
        self._inv_quant_ids = None
        self._offer_id = None
        self._sku_name = None
        self._statuses = None
        self._warehouse_id = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if cutoff is not None:
            self.cutoff = cutoff
        if destination_place_id is not None:
            self.destination_place_id = destination_place_id
        if inv_quant_ids is not None:
            self.inv_quant_ids = inv_quant_ids
        if offer_id is not None:
            self.offer_id = offer_id
        if sku_name is not None:
            self.sku_name = sku_name
        if statuses is not None:
            self.statuses = statuses
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id

    @property
    def created_at(self):
        """Gets the created_at of this QuantsV1ListRequestFilter.  # noqa: E501


        :return: The created_at of this QuantsV1ListRequestFilter.  # noqa: E501
        :rtype: QuantsV1ListRequestFilterCreatedAt
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this QuantsV1ListRequestFilter.


        :param created_at: The created_at of this QuantsV1ListRequestFilter.  # noqa: E501
        :type: QuantsV1ListRequestFilterCreatedAt
        """

        self._created_at = created_at

    @property
    def cutoff(self):
        """Gets the cutoff of this QuantsV1ListRequestFilter.  # noqa: E501


        :return: The cutoff of this QuantsV1ListRequestFilter.  # noqa: E501
        :rtype: QuantsV1ListRequestFilterCutoff
        """
        return self._cutoff

    @cutoff.setter
    def cutoff(self, cutoff):
        """Sets the cutoff of this QuantsV1ListRequestFilter.


        :param cutoff: The cutoff of this QuantsV1ListRequestFilter.  # noqa: E501
        :type: QuantsV1ListRequestFilterCutoff
        """

        self._cutoff = cutoff

    @property
    def destination_place_id(self):
        """Gets the destination_place_id of this QuantsV1ListRequestFilter.  # noqa: E501

        Идентификатор пункта назначения.  # noqa: E501

        :return: The destination_place_id of this QuantsV1ListRequestFilter.  # noqa: E501
        :rtype: int
        """
        return self._destination_place_id

    @destination_place_id.setter
    def destination_place_id(self, destination_place_id):
        """Sets the destination_place_id of this QuantsV1ListRequestFilter.

        Идентификатор пункта назначения.  # noqa: E501

        :param destination_place_id: The destination_place_id of this QuantsV1ListRequestFilter.  # noqa: E501
        :type: int
        """

        self._destination_place_id = destination_place_id

    @property
    def inv_quant_ids(self):
        """Gets the inv_quant_ids of this QuantsV1ListRequestFilter.  # noqa: E501

        Инвентарные идентификаторы кванта.  # noqa: E501

        :return: The inv_quant_ids of this QuantsV1ListRequestFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._inv_quant_ids

    @inv_quant_ids.setter
    def inv_quant_ids(self, inv_quant_ids):
        """Sets the inv_quant_ids of this QuantsV1ListRequestFilter.

        Инвентарные идентификаторы кванта.  # noqa: E501

        :param inv_quant_ids: The inv_quant_ids of this QuantsV1ListRequestFilter.  # noqa: E501
        :type: list[str]
        """

        self._inv_quant_ids = inv_quant_ids

    @property
    def offer_id(self):
        """Gets the offer_id of this QuantsV1ListRequestFilter.  # noqa: E501

        Артикул.  # noqa: E501

        :return: The offer_id of this QuantsV1ListRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this QuantsV1ListRequestFilter.

        Артикул.  # noqa: E501

        :param offer_id: The offer_id of this QuantsV1ListRequestFilter.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def sku_name(self):
        """Gets the sku_name of this QuantsV1ListRequestFilter.  # noqa: E501

        Название товара.  # noqa: E501

        :return: The sku_name of this QuantsV1ListRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._sku_name

    @sku_name.setter
    def sku_name(self, sku_name):
        """Sets the sku_name of this QuantsV1ListRequestFilter.

        Название товара.  # noqa: E501

        :param sku_name: The sku_name of this QuantsV1ListRequestFilter.  # noqa: E501
        :type: str
        """

        self._sku_name = sku_name

    @property
    def statuses(self):
        """Gets the statuses of this QuantsV1ListRequestFilter.  # noqa: E501

        Статусы кванта:   - `unknown` — неизвестен,   - `new` — новый,   - `filling` — заполняется,   - `fulled` — заполнен,   - `reserving` — зарезервирован,   - `awaiting_stock` — ожидает на складе,   - `awaiting_packaging` — ожидает упаковки,   - `shipped` — отправлен,   - `awaiting_delivery` — ожидает доставки,   - `delivering` — доставляется,   - `delivered` — доставлен,   - `not_accepted` — не подтверждён,   - `failed` — не набрался,   - `ship_in_process` — отгружается,   - `ship_failed` — не отгружен,   - `quant_in_carriage` — доставляется,   - `acceptance_in_progress` — ожидает подтверждение получения,   - `cancelled` — отменён.   # noqa: E501

        :return: The statuses of this QuantsV1ListRequestFilter.  # noqa: E501
        :rtype: list[V1QuantStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this QuantsV1ListRequestFilter.

        Статусы кванта:   - `unknown` — неизвестен,   - `new` — новый,   - `filling` — заполняется,   - `fulled` — заполнен,   - `reserving` — зарезервирован,   - `awaiting_stock` — ожидает на складе,   - `awaiting_packaging` — ожидает упаковки,   - `shipped` — отправлен,   - `awaiting_delivery` — ожидает доставки,   - `delivering` — доставляется,   - `delivered` — доставлен,   - `not_accepted` — не подтверждён,   - `failed` — не набрался,   - `ship_in_process` — отгружается,   - `ship_failed` — не отгружен,   - `quant_in_carriage` — доставляется,   - `acceptance_in_progress` — ожидает подтверждение получения,   - `cancelled` — отменён.   # noqa: E501

        :param statuses: The statuses of this QuantsV1ListRequestFilter.  # noqa: E501
        :type: list[V1QuantStatus]
        """

        self._statuses = statuses

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this QuantsV1ListRequestFilter.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The warehouse_id of this QuantsV1ListRequestFilter.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this QuantsV1ListRequestFilter.

        Идентификатор склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this QuantsV1ListRequestFilter.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuantsV1ListRequestFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuantsV1ListRequestFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
