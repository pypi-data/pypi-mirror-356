# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductImportProductsPricesRequestPrice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_action_enabled': 'str',
        'currency_code': 'str',
        'min_price': 'str',
        'min_price_for_auto_actions_enabled': 'bool',
        'offer_id': 'str',
        'old_price': 'str',
        'price': 'str',
        'price_strategy_enabled': 'str',
        'product_id': 'int',
        'quant_size': 'int',
        'vat': 'str'
    }

    attribute_map = {
        'auto_action_enabled': 'auto_action_enabled',
        'currency_code': 'currency_code',
        'min_price': 'min_price',
        'min_price_for_auto_actions_enabled': 'min_price_for_auto_actions_enabled',
        'offer_id': 'offer_id',
        'old_price': 'old_price',
        'price': 'price',
        'price_strategy_enabled': 'price_strategy_enabled',
        'product_id': 'product_id',
        'quant_size': 'quant_size',
        'vat': 'vat'
    }

    def __init__(self, auto_action_enabled='UNKNOWN', currency_code=None, min_price=None, min_price_for_auto_actions_enabled=None, offer_id=None, old_price=None, price=None, price_strategy_enabled='UNKNOWN', product_id=None, quant_size=None, vat=None):  # noqa: E501
        """ProductImportProductsPricesRequestPrice - a model defined in Swagger"""  # noqa: E501
        self._auto_action_enabled = None
        self._currency_code = None
        self._min_price = None
        self._min_price_for_auto_actions_enabled = None
        self._offer_id = None
        self._old_price = None
        self._price = None
        self._price_strategy_enabled = None
        self._product_id = None
        self._quant_size = None
        self._vat = None
        self.discriminator = None
        if auto_action_enabled is not None:
            self.auto_action_enabled = auto_action_enabled
        if currency_code is not None:
            self.currency_code = currency_code
        if min_price is not None:
            self.min_price = min_price
        if min_price_for_auto_actions_enabled is not None:
            self.min_price_for_auto_actions_enabled = min_price_for_auto_actions_enabled
        if offer_id is not None:
            self.offer_id = offer_id
        if old_price is not None:
            self.old_price = old_price
        if price is not None:
            self.price = price
        if price_strategy_enabled is not None:
            self.price_strategy_enabled = price_strategy_enabled
        if product_id is not None:
            self.product_id = product_id
        if quant_size is not None:
            self.quant_size = quant_size
        if vat is not None:
            self.vat = vat

    @property
    def auto_action_enabled(self):
        """Gets the auto_action_enabled of this ProductImportProductsPricesRequestPrice.  # noqa: E501

        Атрибут для включения и выключения автоприменения акций: - `ENABLED` — включить; - `DISABLED` — выключить; - `UNKNOWN` — ничего не менять, передаётся по умолчанию.  Например, если ранее вы включили автоприменение акций и не хотите выключать его, передавайте `UNKNOWN`.  Если вы передаёте `ENABLED` в этом параметре, установите значение минимальной цены в параметре `min_price`.   # noqa: E501

        :return: The auto_action_enabled of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :rtype: str
        """
        return self._auto_action_enabled

    @auto_action_enabled.setter
    def auto_action_enabled(self, auto_action_enabled):
        """Sets the auto_action_enabled of this ProductImportProductsPricesRequestPrice.

        Атрибут для включения и выключения автоприменения акций: - `ENABLED` — включить; - `DISABLED` — выключить; - `UNKNOWN` — ничего не менять, передаётся по умолчанию.  Например, если ранее вы включили автоприменение акций и не хотите выключать его, передавайте `UNKNOWN`.  Если вы передаёте `ENABLED` в этом параметре, установите значение минимальной цены в параметре `min_price`.   # noqa: E501

        :param auto_action_enabled: The auto_action_enabled of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "ENABLED", "DISABLED"]  # noqa: E501
        if auto_action_enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_action_enabled` ({0}), must be one of {1}"  # noqa: E501
                .format(auto_action_enabled, allowed_values)
            )

        self._auto_action_enabled = auto_action_enabled

    @property
    def currency_code(self):
        """Gets the currency_code of this ProductImportProductsPricesRequestPrice.  # noqa: E501

        Валюта ваших цен. Переданное значение должно совпадать с валютой, которая установлена в настройках личного кабинета. По умолчанию передаётся `RUB` — российский рубль.  Например, если у вас установлена валюта взаиморасчётов юань, передавайте значение `CNY`, иначе вернётся ошибка.  Возможные значения:    - `RUB` — российский рубль,   - `BYN` — белорусский рубль,   - `KZT` — тенге,   - `EUR` — евро,   - `USD` — доллар США,   - `CNY` — юань.   # noqa: E501

        :return: The currency_code of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ProductImportProductsPricesRequestPrice.

        Валюта ваших цен. Переданное значение должно совпадать с валютой, которая установлена в настройках личного кабинета. По умолчанию передаётся `RUB` — российский рубль.  Например, если у вас установлена валюта взаиморасчётов юань, передавайте значение `CNY`, иначе вернётся ошибка.  Возможные значения:    - `RUB` — российский рубль,   - `BYN` — белорусский рубль,   - `KZT` — тенге,   - `EUR` — евро,   - `USD` — доллар США,   - `CNY` — юань.   # noqa: E501

        :param currency_code: The currency_code of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def min_price(self):
        """Gets the min_price of this ProductImportProductsPricesRequestPrice.  # noqa: E501

        Минимальная цена товара после применения акций.  # noqa: E501

        :return: The min_price of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :rtype: str
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price):
        """Sets the min_price of this ProductImportProductsPricesRequestPrice.

        Минимальная цена товара после применения акций.  # noqa: E501

        :param min_price: The min_price of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :type: str
        """

        self._min_price = min_price

    @property
    def min_price_for_auto_actions_enabled(self):
        """Gets the min_price_for_auto_actions_enabled of this ProductImportProductsPricesRequestPrice.  # noqa: E501

        `true`, если Ozon учитывает минимальную цену при добавлении в акции. Если ничего не передать, изменений в статусе учёта цены не будет.   # noqa: E501

        :return: The min_price_for_auto_actions_enabled of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :rtype: bool
        """
        return self._min_price_for_auto_actions_enabled

    @min_price_for_auto_actions_enabled.setter
    def min_price_for_auto_actions_enabled(self, min_price_for_auto_actions_enabled):
        """Sets the min_price_for_auto_actions_enabled of this ProductImportProductsPricesRequestPrice.

        `true`, если Ozon учитывает минимальную цену при добавлении в акции. Если ничего не передать, изменений в статусе учёта цены не будет.   # noqa: E501

        :param min_price_for_auto_actions_enabled: The min_price_for_auto_actions_enabled of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :type: bool
        """

        self._min_price_for_auto_actions_enabled = min_price_for_auto_actions_enabled

    @property
    def offer_id(self):
        """Gets the offer_id of this ProductImportProductsPricesRequestPrice.  # noqa: E501

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :return: The offer_id of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this ProductImportProductsPricesRequestPrice.

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :param offer_id: The offer_id of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def old_price(self):
        """Gets the old_price of this ProductImportProductsPricesRequestPrice.  # noqa: E501

        Цена до скидок (зачеркнута на карточке товара). Указывается в рублях. Разделитель дробной части — точка, до двух знаков после точки.  Если на товар нет скидок, укажите значение `0` в этом поле, а текущую цену передайте в поле `price`.   # noqa: E501

        :return: The old_price of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :rtype: str
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this ProductImportProductsPricesRequestPrice.

        Цена до скидок (зачеркнута на карточке товара). Указывается в рублях. Разделитель дробной части — точка, до двух знаков после точки.  Если на товар нет скидок, укажите значение `0` в этом поле, а текущую цену передайте в поле `price`.   # noqa: E501

        :param old_price: The old_price of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :type: str
        """

        self._old_price = old_price

    @property
    def price(self):
        """Gets the price of this ProductImportProductsPricesRequestPrice.  # noqa: E501

        Цена товара с учётом скидок, отображается на карточке товара.  Если значение параметра `old_price` больше 0, между `price` и `old_price` должна быть определённая разница. Она зависит от значения `price`.  | Значение `price` | Минимальная разница | |---|---| | < 400 | 20 рублей | | 400–10 000 | 5% | | > 10 000 | 500 рублей |   # noqa: E501

        :return: The price of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductImportProductsPricesRequestPrice.

        Цена товара с учётом скидок, отображается на карточке товара.  Если значение параметра `old_price` больше 0, между `price` и `old_price` должна быть определённая разница. Она зависит от значения `price`.  | Значение `price` | Минимальная разница | |---|---| | < 400 | 20 рублей | | 400–10 000 | 5% | | > 10 000 | 500 рублей |   # noqa: E501

        :param price: The price of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def price_strategy_enabled(self):
        """Gets the price_strategy_enabled of this ProductImportProductsPricesRequestPrice.  # noqa: E501

        Атрибут для автоприменения стратегий цены: - `ENABLED` — включить; - `DISABLED` — выключить; - `UNKNOWN` — ничего не менять, передаётся по умолчанию.  Если ранее вы включили автоприменение стратегий цены и не хотите выключать его, передавайте `UNKNOWN` в следующих запросах.  Если вы передаёте `ENABLED` в этом параметре, установите значение минимальной цены в параметре `min_price`.  Если вы передаёте `DISABLED` в этом параметре, товар удаляется из стратегии.   # noqa: E501

        :return: The price_strategy_enabled of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :rtype: str
        """
        return self._price_strategy_enabled

    @price_strategy_enabled.setter
    def price_strategy_enabled(self, price_strategy_enabled):
        """Sets the price_strategy_enabled of this ProductImportProductsPricesRequestPrice.

        Атрибут для автоприменения стратегий цены: - `ENABLED` — включить; - `DISABLED` — выключить; - `UNKNOWN` — ничего не менять, передаётся по умолчанию.  Если ранее вы включили автоприменение стратегий цены и не хотите выключать его, передавайте `UNKNOWN` в следующих запросах.  Если вы передаёте `ENABLED` в этом параметре, установите значение минимальной цены в параметре `min_price`.  Если вы передаёте `DISABLED` в этом параметре, товар удаляется из стратегии.   # noqa: E501

        :param price_strategy_enabled: The price_strategy_enabled of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "ENABLED", "DISABLED"]  # noqa: E501
        if price_strategy_enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `price_strategy_enabled` ({0}), must be one of {1}"  # noqa: E501
                .format(price_strategy_enabled, allowed_values)
            )

        self._price_strategy_enabled = price_strategy_enabled

    @property
    def product_id(self):
        """Gets the product_id of this ProductImportProductsPricesRequestPrice.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductImportProductsPricesRequestPrice.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def quant_size(self):
        """Gets the quant_size of this ProductImportProductsPricesRequestPrice.  # noqa: E501

        Используйте параметр, если у обычного и эконом-товара совпадает артикул — `offer_id = quant_id`. Чтобы обновить цену: - обычного товара — передайте значение `1`; - эконом-товара — передайте размер его кванта.  Если у обычного и эконом-товара разные артикулы, не передавайте параметр.   # noqa: E501

        :return: The quant_size of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :rtype: int
        """
        return self._quant_size

    @quant_size.setter
    def quant_size(self, quant_size):
        """Sets the quant_size of this ProductImportProductsPricesRequestPrice.

        Используйте параметр, если у обычного и эконом-товара совпадает артикул — `offer_id = quant_id`. Чтобы обновить цену: - обычного товара — передайте значение `1`; - эконом-товара — передайте размер его кванта.  Если у обычного и эконом-товара разные артикулы, не передавайте параметр.   # noqa: E501

        :param quant_size: The quant_size of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :type: int
        """

        self._quant_size = quant_size

    @property
    def vat(self):
        """Gets the vat of this ProductImportProductsPricesRequestPrice.  # noqa: E501

        Ставка НДС для товара:   - `0` — не облагается НДС,   - `0.05` — 5%,   - `0.07` — 7%,   - `0.1` — 10%,   - `0.2` — 20%.  Передавайте значение ставки, актуальное на данный момент.   # noqa: E501

        :return: The vat of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this ProductImportProductsPricesRequestPrice.

        Ставка НДС для товара:   - `0` — не облагается НДС,   - `0.05` — 5%,   - `0.07` — 7%,   - `0.1` — 10%,   - `0.2` — 20%.  Передавайте значение ставки, актуальное на данный момент.   # noqa: E501

        :param vat: The vat of this ProductImportProductsPricesRequestPrice.  # noqa: E501
        :type: str
        """

        self._vat = vat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductImportProductsPricesRequestPrice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductImportProductsPricesRequestPrice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
