# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Postingv3GetFbsPostingListRequestFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delivery_method_id': 'list[int]',
        'is_quantum': 'bool',
        'order_id': 'int',
        'provider_id': 'list[int]',
        'since': 'datetime',
        'to': 'datetime',
        'status': 'str',
        'warehouse_id': 'list[str]',
        'last_changed_status_date': 'PostinglistV3status'
    }

    attribute_map = {
        'delivery_method_id': 'delivery_method_id',
        'is_quantum': 'is_quantum',
        'order_id': 'order_id',
        'provider_id': 'provider_id',
        'since': 'since',
        'to': 'to',
        'status': 'status',
        'warehouse_id': 'warehouse_id',
        'last_changed_status_date': 'last_changed_status_date'
    }

    def __init__(self, delivery_method_id=None, is_quantum=None, order_id=None, provider_id=None, since=None, to=None, status=None, warehouse_id=None, last_changed_status_date=None):  # noqa: E501
        """Postingv3GetFbsPostingListRequestFilter - a model defined in Swagger"""  # noqa: E501
        self._delivery_method_id = None
        self._is_quantum = None
        self._order_id = None
        self._provider_id = None
        self._since = None
        self._to = None
        self._status = None
        self._warehouse_id = None
        self._last_changed_status_date = None
        self.discriminator = None
        if delivery_method_id is not None:
            self.delivery_method_id = delivery_method_id
        if is_quantum is not None:
            self.is_quantum = is_quantum
        if order_id is not None:
            self.order_id = order_id
        if provider_id is not None:
            self.provider_id = provider_id
        if since is not None:
            self.since = since
        if to is not None:
            self.to = to
        if status is not None:
            self.status = status
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if last_changed_status_date is not None:
            self.last_changed_status_date = last_changed_status_date

    @property
    def delivery_method_id(self):
        """Gets the delivery_method_id of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501

        Идентификатор способа доставки.  # noqa: E501

        :return: The delivery_method_id of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._delivery_method_id

    @delivery_method_id.setter
    def delivery_method_id(self, delivery_method_id):
        """Sets the delivery_method_id of this Postingv3GetFbsPostingListRequestFilter.

        Идентификатор способа доставки.  # noqa: E501

        :param delivery_method_id: The delivery_method_id of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :type: list[int]
        """

        self._delivery_method_id = delivery_method_id

    @property
    def is_quantum(self):
        """Gets the is_quantum of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501

        Укажите `true`, чтобы получить только отправления квантов.  По умолчанию — `false`, в ответе придут все отправления.   # noqa: E501

        :return: The is_quantum of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :rtype: bool
        """
        return self._is_quantum

    @is_quantum.setter
    def is_quantum(self, is_quantum):
        """Sets the is_quantum of this Postingv3GetFbsPostingListRequestFilter.

        Укажите `true`, чтобы получить только отправления квантов.  По умолчанию — `false`, в ответе придут все отправления.   # noqa: E501

        :param is_quantum: The is_quantum of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :type: bool
        """

        self._is_quantum = is_quantum

    @property
    def order_id(self):
        """Gets the order_id of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501

        Идентификатор заказа.  # noqa: E501

        :return: The order_id of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Postingv3GetFbsPostingListRequestFilter.

        Идентификатор заказа.  # noqa: E501

        :param order_id: The order_id of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    @property
    def provider_id(self):
        """Gets the provider_id of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501

        Идентификатор службы доставки.  # noqa: E501

        :return: The provider_id of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this Postingv3GetFbsPostingListRequestFilter.

        Идентификатор службы доставки.  # noqa: E501

        :param provider_id: The provider_id of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :type: list[int]
        """

        self._provider_id = provider_id

    @property
    def since(self):
        """Gets the since of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501

        Дата начала периода, за который нужно получить список отправлений.  Формат UTC: ГГГГ-ММ-ДДTЧЧ:ММ:ССZ.  Пример: 2019-08-24T14:15:22Z.   # noqa: E501

        :return: The since of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._since

    @since.setter
    def since(self, since):
        """Sets the since of this Postingv3GetFbsPostingListRequestFilter.

        Дата начала периода, за который нужно получить список отправлений.  Формат UTC: ГГГГ-ММ-ДДTЧЧ:ММ:ССZ.  Пример: 2019-08-24T14:15:22Z.   # noqa: E501

        :param since: The since of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :type: datetime
        """

        self._since = since

    @property
    def to(self):
        """Gets the to of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501

        Дата конца периода, за который нужно получить список отправлений.  Формат UTC: ГГГГ-ММ-ДДTЧЧ:ММ:ССZ.  Пример: 2019-08-24T14:15:22Z.   # noqa: E501

        :return: The to of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Postingv3GetFbsPostingListRequestFilter.

        Дата конца периода, за который нужно получить список отправлений.  Формат UTC: ГГГГ-ММ-ДДTЧЧ:ММ:ССZ.  Пример: 2019-08-24T14:15:22Z.   # noqa: E501

        :param to: The to of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :type: datetime
        """

        self._to = to

    @property
    def status(self):
        """Gets the status of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501

        Статус отправления: - `awaiting_registration` — ожидает регистрации, - `acceptance_in_progress` — идёт приёмка, - `awaiting_approve` — ожидает подтверждения, - `awaiting_packaging` — ожидает упаковки, - `awaiting_deliver` — ожидает отгрузки, - `arbitration` — арбитраж, - `client_arbitration` — клиентский арбитраж доставки, - `delivering` — доставляется, - `driver_pickup` — у водителя, - `delivered` — доставлено, - `cancelled` — отменено, - `not_accepted` — не принят на сортировочном центре, - `sent_by_seller` – отправлено продавцом.   # noqa: E501

        :return: The status of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Postingv3GetFbsPostingListRequestFilter.

        Статус отправления: - `awaiting_registration` — ожидает регистрации, - `acceptance_in_progress` — идёт приёмка, - `awaiting_approve` — ожидает подтверждения, - `awaiting_packaging` — ожидает упаковки, - `awaiting_deliver` — ожидает отгрузки, - `arbitration` — арбитраж, - `client_arbitration` — клиентский арбитраж доставки, - `delivering` — доставляется, - `driver_pickup` — у водителя, - `delivered` — доставлено, - `cancelled` — отменено, - `not_accepted` — не принят на сортировочном центре, - `sent_by_seller` – отправлено продавцом.   # noqa: E501

        :param status: The status of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The warehouse_id of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this Postingv3GetFbsPostingListRequestFilter.

        Идентификатор склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :type: list[str]
        """

        self._warehouse_id = warehouse_id

    @property
    def last_changed_status_date(self):
        """Gets the last_changed_status_date of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501


        :return: The last_changed_status_date of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :rtype: PostinglistV3status
        """
        return self._last_changed_status_date

    @last_changed_status_date.setter
    def last_changed_status_date(self, last_changed_status_date):
        """Sets the last_changed_status_date of this Postingv3GetFbsPostingListRequestFilter.


        :param last_changed_status_date: The last_changed_status_date of this Postingv3GetFbsPostingListRequestFilter.  # noqa: E501
        :type: PostinglistV3status
        """

        self._last_changed_status_date = last_changed_status_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Postingv3GetFbsPostingListRequestFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Postingv3GetFbsPostingListRequestFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
