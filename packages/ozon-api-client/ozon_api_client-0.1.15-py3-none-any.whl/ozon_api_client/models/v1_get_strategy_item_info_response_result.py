# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1GetStrategyItemInfoResponseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'strategy_id': 'str',
        'is_enabled': 'bool',
        'strategy_product_price': 'int',
        'price_downloaded_at': 'str',
        'strategy_competitor_id': 'int',
        'strategy_competitor_product_url': 'str'
    }

    attribute_map = {
        'strategy_id': 'strategy_id',
        'is_enabled': 'is_enabled',
        'strategy_product_price': 'strategy_product_price',
        'price_downloaded_at': 'price_downloaded_at',
        'strategy_competitor_id': 'strategy_competitor_id',
        'strategy_competitor_product_url': 'strategy_competitor_product_url'
    }

    def __init__(self, strategy_id=None, is_enabled=None, strategy_product_price=None, price_downloaded_at=None, strategy_competitor_id=None, strategy_competitor_product_url=None):  # noqa: E501
        """V1GetStrategyItemInfoResponseResult - a model defined in Swagger"""  # noqa: E501
        self._strategy_id = None
        self._is_enabled = None
        self._strategy_product_price = None
        self._price_downloaded_at = None
        self._strategy_competitor_id = None
        self._strategy_competitor_product_url = None
        self.discriminator = None
        if strategy_id is not None:
            self.strategy_id = strategy_id
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if strategy_product_price is not None:
            self.strategy_product_price = strategy_product_price
        if price_downloaded_at is not None:
            self.price_downloaded_at = price_downloaded_at
        if strategy_competitor_id is not None:
            self.strategy_competitor_id = strategy_competitor_id
        if strategy_competitor_product_url is not None:
            self.strategy_competitor_product_url = strategy_competitor_product_url

    @property
    def strategy_id(self):
        """Gets the strategy_id of this V1GetStrategyItemInfoResponseResult.  # noqa: E501

        Идентификатор стратегии.  # noqa: E501

        :return: The strategy_id of this V1GetStrategyItemInfoResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._strategy_id

    @strategy_id.setter
    def strategy_id(self, strategy_id):
        """Sets the strategy_id of this V1GetStrategyItemInfoResponseResult.

        Идентификатор стратегии.  # noqa: E501

        :param strategy_id: The strategy_id of this V1GetStrategyItemInfoResponseResult.  # noqa: E501
        :type: str
        """

        self._strategy_id = strategy_id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this V1GetStrategyItemInfoResponseResult.  # noqa: E501

        `true`, если товар участвует в стратегии ценообразования.   # noqa: E501

        :return: The is_enabled of this V1GetStrategyItemInfoResponseResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this V1GetStrategyItemInfoResponseResult.

        `true`, если товар участвует в стратегии ценообразования.   # noqa: E501

        :param is_enabled: The is_enabled of this V1GetStrategyItemInfoResponseResult.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def strategy_product_price(self):
        """Gets the strategy_product_price of this V1GetStrategyItemInfoResponseResult.  # noqa: E501

        Цена по стратегии.  # noqa: E501

        :return: The strategy_product_price of this V1GetStrategyItemInfoResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._strategy_product_price

    @strategy_product_price.setter
    def strategy_product_price(self, strategy_product_price):
        """Sets the strategy_product_price of this V1GetStrategyItemInfoResponseResult.

        Цена по стратегии.  # noqa: E501

        :param strategy_product_price: The strategy_product_price of this V1GetStrategyItemInfoResponseResult.  # noqa: E501
        :type: int
        """

        self._strategy_product_price = strategy_product_price

    @property
    def price_downloaded_at(self):
        """Gets the price_downloaded_at of this V1GetStrategyItemInfoResponseResult.  # noqa: E501

        Дата установки цены по стратегии.  # noqa: E501

        :return: The price_downloaded_at of this V1GetStrategyItemInfoResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._price_downloaded_at

    @price_downloaded_at.setter
    def price_downloaded_at(self, price_downloaded_at):
        """Sets the price_downloaded_at of this V1GetStrategyItemInfoResponseResult.

        Дата установки цены по стратегии.  # noqa: E501

        :param price_downloaded_at: The price_downloaded_at of this V1GetStrategyItemInfoResponseResult.  # noqa: E501
        :type: str
        """

        self._price_downloaded_at = price_downloaded_at

    @property
    def strategy_competitor_id(self):
        """Gets the strategy_competitor_id of this V1GetStrategyItemInfoResponseResult.  # noqa: E501

        Идентификатор конкурента.  # noqa: E501

        :return: The strategy_competitor_id of this V1GetStrategyItemInfoResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._strategy_competitor_id

    @strategy_competitor_id.setter
    def strategy_competitor_id(self, strategy_competitor_id):
        """Sets the strategy_competitor_id of this V1GetStrategyItemInfoResponseResult.

        Идентификатор конкурента.  # noqa: E501

        :param strategy_competitor_id: The strategy_competitor_id of this V1GetStrategyItemInfoResponseResult.  # noqa: E501
        :type: int
        """

        self._strategy_competitor_id = strategy_competitor_id

    @property
    def strategy_competitor_product_url(self):
        """Gets the strategy_competitor_product_url of this V1GetStrategyItemInfoResponseResult.  # noqa: E501

        Ссылка на товар конкурента.  # noqa: E501

        :return: The strategy_competitor_product_url of this V1GetStrategyItemInfoResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._strategy_competitor_product_url

    @strategy_competitor_product_url.setter
    def strategy_competitor_product_url(self, strategy_competitor_product_url):
        """Sets the strategy_competitor_product_url of this V1GetStrategyItemInfoResponseResult.

        Ссылка на товар конкурента.  # noqa: E501

        :param strategy_competitor_product_url: The strategy_competitor_product_url of this V1GetStrategyItemInfoResponseResult.  # noqa: E501
        :type: str
        """

        self._strategy_competitor_product_url = strategy_competitor_product_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetStrategyItemInfoResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetStrategyItemInfoResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
