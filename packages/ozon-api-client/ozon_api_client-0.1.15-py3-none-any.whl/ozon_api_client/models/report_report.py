# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'created_at': 'datetime',
        'error': 'str',
        'file': 'str',
        'params': 'dict(str, str)',
        'report_type': 'str',
        'status': 'str'
    }

    attribute_map = {
        'code': 'code',
        'created_at': 'created_at',
        'error': 'error',
        'file': 'file',
        'params': 'params',
        'report_type': 'report_type',
        'status': 'status'
    }

    def __init__(self, code=None, created_at=None, error=None, file=None, params=None, report_type=None, status=None):  # noqa: E501
        """ReportReport - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._created_at = None
        self._error = None
        self._file = None
        self._params = None
        self._report_type = None
        self._status = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if created_at is not None:
            self.created_at = created_at
        if error is not None:
            self.error = error
        if file is not None:
            self.file = file
        if params is not None:
            self.params = params
        if report_type is not None:
            self.report_type = report_type
        if status is not None:
            self.status = status

    @property
    def code(self):
        """Gets the code of this ReportReport.  # noqa: E501

        Уникальный идентификатор отчёта.  # noqa: E501

        :return: The code of this ReportReport.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ReportReport.

        Уникальный идентификатор отчёта.  # noqa: E501

        :param code: The code of this ReportReport.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def created_at(self):
        """Gets the created_at of this ReportReport.  # noqa: E501

        Дата создания отчёта.  # noqa: E501

        :return: The created_at of this ReportReport.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReportReport.

        Дата создания отчёта.  # noqa: E501

        :param created_at: The created_at of this ReportReport.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def error(self):
        """Gets the error of this ReportReport.  # noqa: E501

        Код ошибки при генерации отчёта.  # noqa: E501

        :return: The error of this ReportReport.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ReportReport.

        Код ошибки при генерации отчёта.  # noqa: E501

        :param error: The error of this ReportReport.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def file(self):
        """Gets the file of this ReportReport.  # noqa: E501

        Ссылка на XLSX-файл.  Для отчёта с типом `SELLER_RETURNS` ссылка доступна 5 минут после выполнения запроса.   # noqa: E501

        :return: The file of this ReportReport.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ReportReport.

        Ссылка на XLSX-файл.  Для отчёта с типом `SELLER_RETURNS` ссылка доступна 5 минут после выполнения запроса.   # noqa: E501

        :param file: The file of this ReportReport.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def params(self):
        """Gets the params of this ReportReport.  # noqa: E501

        Массив с фильтрами, указанными при создании отчёта продавцом.  # noqa: E501

        :return: The params of this ReportReport.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ReportReport.

        Массив с фильтрами, указанными при создании отчёта продавцом.  # noqa: E501

        :param params: The params of this ReportReport.  # noqa: E501
        :type: dict(str, str)
        """

        self._params = params

    @property
    def report_type(self):
        """Gets the report_type of this ReportReport.  # noqa: E501

        Тип отчёта:   - `SELLER_PRODUCTS` — отчёт по товарам,   - `SELLER_TRANSACTIONS` — отчёт по транзакциям,   - `SELLER_PRODUCT_PRICES` — отчёт по ценам товаров,   - `SELLER_STOCK` — отчёт об остатках товаров,   - `SELLER_RETURNS` — отчёт о возвратах,   - `SELLER_POSTINGS` — отчёт об отправлениях,   - `SELLER_FINANCE` — отчёт о финансах,   - `SELLER_PRODUCT_DISCOUNTED` — отчёт об уценённых товарах,   - `DOCUMENT_B2B_SALES` — отчёт о продажах юридическим лицам,   - `MUTUAL_SETTLEMENT` — отчёт о взаиморасчётах,   - `SELLER_RETURNS_V2` - отчет о возвратах FBO и FBS.   # noqa: E501

        :return: The report_type of this ReportReport.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportReport.

        Тип отчёта:   - `SELLER_PRODUCTS` — отчёт по товарам,   - `SELLER_TRANSACTIONS` — отчёт по транзакциям,   - `SELLER_PRODUCT_PRICES` — отчёт по ценам товаров,   - `SELLER_STOCK` — отчёт об остатках товаров,   - `SELLER_RETURNS` — отчёт о возвратах,   - `SELLER_POSTINGS` — отчёт об отправлениях,   - `SELLER_FINANCE` — отчёт о финансах,   - `SELLER_PRODUCT_DISCOUNTED` — отчёт об уценённых товарах,   - `DOCUMENT_B2B_SALES` — отчёт о продажах юридическим лицам,   - `MUTUAL_SETTLEMENT` — отчёт о взаиморасчётах,   - `SELLER_RETURNS_V2` - отчет о возвратах FBO и FBS.   # noqa: E501

        :param report_type: The report_type of this ReportReport.  # noqa: E501
        :type: str
        """

        self._report_type = report_type

    @property
    def status(self):
        """Gets the status of this ReportReport.  # noqa: E501

        Статус генерации отчёта:   - `waiting` — в очереди на обработку,   - `processing` — обрабатывается,   - `success` — отчёт успешно создан,   - `failed` — ошибка при создании отчёта.   # noqa: E501

        :return: The status of this ReportReport.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReportReport.

        Статус генерации отчёта:   - `waiting` — в очереди на обработку,   - `processing` — обрабатывается,   - `success` — отчёт успешно создан,   - `failed` — ошибка при создании отчёта.   # noqa: E501

        :param status: The status of this ReportReport.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
