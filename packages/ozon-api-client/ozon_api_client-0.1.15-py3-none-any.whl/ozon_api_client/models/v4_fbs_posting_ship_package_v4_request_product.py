# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V4FbsPostingShipPackageV4RequestProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exemplars_ids': 'list[str]',
        'product_id': 'int',
        'quantity': 'int'
    }

    attribute_map = {
        'exemplars_ids': 'exemplarsIds',
        'product_id': 'product_id',
        'quantity': 'quantity'
    }

    def __init__(self, exemplars_ids=None, product_id=None, quantity=None):  # noqa: E501
        """V4FbsPostingShipPackageV4RequestProduct - a model defined in Swagger"""  # noqa: E501
        self._exemplars_ids = None
        self._product_id = None
        self._quantity = None
        self.discriminator = None
        if exemplars_ids is not None:
            self.exemplars_ids = exemplars_ids
        self.product_id = product_id
        self.quantity = quantity

    @property
    def exemplars_ids(self):
        """Gets the exemplars_ids of this V4FbsPostingShipPackageV4RequestProduct.  # noqa: E501

        Идентификаторы экземпляров товара.  # noqa: E501

        :return: The exemplars_ids of this V4FbsPostingShipPackageV4RequestProduct.  # noqa: E501
        :rtype: list[str]
        """
        return self._exemplars_ids

    @exemplars_ids.setter
    def exemplars_ids(self, exemplars_ids):
        """Sets the exemplars_ids of this V4FbsPostingShipPackageV4RequestProduct.

        Идентификаторы экземпляров товара.  # noqa: E501

        :param exemplars_ids: The exemplars_ids of this V4FbsPostingShipPackageV4RequestProduct.  # noqa: E501
        :type: list[str]
        """

        self._exemplars_ids = exemplars_ids

    @property
    def product_id(self):
        """Gets the product_id of this V4FbsPostingShipPackageV4RequestProduct.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this V4FbsPostingShipPackageV4RequestProduct.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this V4FbsPostingShipPackageV4RequestProduct.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this V4FbsPostingShipPackageV4RequestProduct.  # noqa: E501
        :type: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this V4FbsPostingShipPackageV4RequestProduct.  # noqa: E501

        Количество экземпляров.  # noqa: E501

        :return: The quantity of this V4FbsPostingShipPackageV4RequestProduct.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this V4FbsPostingShipPackageV4RequestProduct.

        Количество экземпляров.  # noqa: E501

        :param quantity: The quantity of this V4FbsPostingShipPackageV4RequestProduct.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V4FbsPostingShipPackageV4RequestProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4FbsPostingShipPackageV4RequestProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
