# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValueItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barcode': 'str',
        'expires_at': 'datetime',
        'quant': 'int',
        'quantity': 'int'
    }

    attribute_map = {
        'barcode': 'barcode',
        'expires_at': 'expires_at',
        'quant': 'quant',
        'quantity': 'quantity'
    }

    def __init__(self, barcode=None, expires_at=None, quant=None, quantity=None):  # noqa: E501
        """ValueItem - a model defined in Swagger"""  # noqa: E501
        self._barcode = None
        self._expires_at = None
        self._quant = None
        self._quantity = None
        self.discriminator = None
        if barcode is not None:
            self.barcode = barcode
        if expires_at is not None:
            self.expires_at = expires_at
        if quant is not None:
            self.quant = quant
        if quantity is not None:
            self.quantity = quantity

    @property
    def barcode(self):
        """Gets the barcode of this ValueItem.  # noqa: E501

        Штрихкод товара.  # noqa: E501

        :return: The barcode of this ValueItem.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ValueItem.

        Штрихкод товара.  # noqa: E501

        :param barcode: The barcode of this ValueItem.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def expires_at(self):
        """Gets the expires_at of this ValueItem.  # noqa: E501

        Годен до.  # noqa: E501

        :return: The expires_at of this ValueItem.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this ValueItem.

        Годен до.  # noqa: E501

        :param expires_at: The expires_at of this ValueItem.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def quant(self):
        """Gets the quant of this ValueItem.  # noqa: E501

        Размер кванта.  # noqa: E501

        :return: The quant of this ValueItem.  # noqa: E501
        :rtype: int
        """
        return self._quant

    @quant.setter
    def quant(self, quant):
        """Sets the quant of this ValueItem.

        Размер кванта.  # noqa: E501

        :param quant: The quant of this ValueItem.  # noqa: E501
        :type: int
        """

        self._quant = quant

    @property
    def quantity(self):
        """Gets the quantity of this ValueItem.  # noqa: E501

        Количество товара.  # noqa: E501

        :return: The quantity of this ValueItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ValueItem.

        Количество товара.  # noqa: E501

        :param quantity: The quantity of this ValueItem.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValueItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValueItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
