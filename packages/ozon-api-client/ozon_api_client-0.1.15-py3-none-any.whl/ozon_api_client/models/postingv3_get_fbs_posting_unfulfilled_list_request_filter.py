# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Postingv3GetFbsPostingUnfulfilledListRequestFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cutoff_from': 'datetime',
        'cutoff_to': 'datetime',
        'delivering_date_from': 'datetime',
        'delivering_date_to': 'datetime',
        'delivery_method_id': 'list[int]',
        'is_quantum': 'bool',
        'provider_id': 'list[int]',
        'status': 'str',
        'warehouse_id': 'list[int]'
    }

    attribute_map = {
        'cutoff_from': 'cutoff_from',
        'cutoff_to': 'cutoff_to',
        'delivering_date_from': 'delivering_date_from',
        'delivering_date_to': 'delivering_date_to',
        'delivery_method_id': 'delivery_method_id',
        'is_quantum': 'is_quantum',
        'provider_id': 'provider_id',
        'status': 'status',
        'warehouse_id': 'warehouse_id'
    }

    def __init__(self, cutoff_from=None, cutoff_to=None, delivering_date_from=None, delivering_date_to=None, delivery_method_id=None, is_quantum=None, provider_id=None, status=None, warehouse_id=None):  # noqa: E501
        """Postingv3GetFbsPostingUnfulfilledListRequestFilter - a model defined in Swagger"""  # noqa: E501
        self._cutoff_from = None
        self._cutoff_to = None
        self._delivering_date_from = None
        self._delivering_date_to = None
        self._delivery_method_id = None
        self._is_quantum = None
        self._provider_id = None
        self._status = None
        self._warehouse_id = None
        self.discriminator = None
        if cutoff_from is not None:
            self.cutoff_from = cutoff_from
        if cutoff_to is not None:
            self.cutoff_to = cutoff_to
        if delivering_date_from is not None:
            self.delivering_date_from = delivering_date_from
        if delivering_date_to is not None:
            self.delivering_date_to = delivering_date_to
        if delivery_method_id is not None:
            self.delivery_method_id = delivery_method_id
        if is_quantum is not None:
            self.is_quantum = is_quantum
        if provider_id is not None:
            self.provider_id = provider_id
        if status is not None:
            self.status = status
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id

    @property
    def cutoff_from(self):
        """Gets the cutoff_from of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501

        Фильтр по времени, до которого продавцу нужно собрать заказ. Начало периода.  Формат: YYYY-MM-DDThh:mm:ss.mcsZ. Пример: 2020-03-18T07:34:50.359Z.   # noqa: E501

        :return: The cutoff_from of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._cutoff_from

    @cutoff_from.setter
    def cutoff_from(self, cutoff_from):
        """Sets the cutoff_from of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.

        Фильтр по времени, до которого продавцу нужно собрать заказ. Начало периода.  Формат: YYYY-MM-DDThh:mm:ss.mcsZ. Пример: 2020-03-18T07:34:50.359Z.   # noqa: E501

        :param cutoff_from: The cutoff_from of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :type: datetime
        """

        self._cutoff_from = cutoff_from

    @property
    def cutoff_to(self):
        """Gets the cutoff_to of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501

        Фильтр по времени, до которого продавцу нужно собрать заказ. Конец периода.  Формат: YYYY-MM-DDThh:mm:ss.mcsZ. Пример: 2020-03-18T07:34:50.359Z.   # noqa: E501

        :return: The cutoff_to of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._cutoff_to

    @cutoff_to.setter
    def cutoff_to(self, cutoff_to):
        """Sets the cutoff_to of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.

        Фильтр по времени, до которого продавцу нужно собрать заказ. Конец периода.  Формат: YYYY-MM-DDThh:mm:ss.mcsZ. Пример: 2020-03-18T07:34:50.359Z.   # noqa: E501

        :param cutoff_to: The cutoff_to of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :type: datetime
        """

        self._cutoff_to = cutoff_to

    @property
    def delivering_date_from(self):
        """Gets the delivering_date_from of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501

        Минимальная дата передачи отправления в доставку.  # noqa: E501

        :return: The delivering_date_from of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._delivering_date_from

    @delivering_date_from.setter
    def delivering_date_from(self, delivering_date_from):
        """Sets the delivering_date_from of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.

        Минимальная дата передачи отправления в доставку.  # noqa: E501

        :param delivering_date_from: The delivering_date_from of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :type: datetime
        """

        self._delivering_date_from = delivering_date_from

    @property
    def delivering_date_to(self):
        """Gets the delivering_date_to of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501

        Максимальная дата передачи отправления в доставку.  # noqa: E501

        :return: The delivering_date_to of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._delivering_date_to

    @delivering_date_to.setter
    def delivering_date_to(self, delivering_date_to):
        """Sets the delivering_date_to of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.

        Максимальная дата передачи отправления в доставку.  # noqa: E501

        :param delivering_date_to: The delivering_date_to of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :type: datetime
        """

        self._delivering_date_to = delivering_date_to

    @property
    def delivery_method_id(self):
        """Gets the delivery_method_id of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501

        Идентификатор способа доставки.  # noqa: E501

        :return: The delivery_method_id of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._delivery_method_id

    @delivery_method_id.setter
    def delivery_method_id(self, delivery_method_id):
        """Sets the delivery_method_id of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.

        Идентификатор способа доставки.  # noqa: E501

        :param delivery_method_id: The delivery_method_id of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :type: list[int]
        """

        self._delivery_method_id = delivery_method_id

    @property
    def is_quantum(self):
        """Gets the is_quantum of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501

        Укажите `true`, чтобы получить только отправления квантов.  По умолчанию — `false`, в ответе придут все отправления.   # noqa: E501

        :return: The is_quantum of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :rtype: bool
        """
        return self._is_quantum

    @is_quantum.setter
    def is_quantum(self, is_quantum):
        """Sets the is_quantum of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.

        Укажите `true`, чтобы получить только отправления квантов.  По умолчанию — `false`, в ответе придут все отправления.   # noqa: E501

        :param is_quantum: The is_quantum of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :type: bool
        """

        self._is_quantum = is_quantum

    @property
    def provider_id(self):
        """Gets the provider_id of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501

        Идентификатор службы доставки.  # noqa: E501

        :return: The provider_id of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.

        Идентификатор службы доставки.  # noqa: E501

        :param provider_id: The provider_id of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :type: list[int]
        """

        self._provider_id = provider_id

    @property
    def status(self):
        """Gets the status of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501

        Статус отправления: - `acceptance_in_progress` — идёт приёмка, - `awaiting_approve` — ожидает подтверждения, - `awaiting_packaging` — ожидает упаковки, - `awaiting_registration` — ожидает регистрации, - `awaiting_deliver` — ожидает отгрузки, - `arbitration` — арбитраж, - `client_arbitration` — клиентский арбитраж доставки, - `delivering` — доставляется, - `driver_pickup` — у водителя, - `not_accepted` — не принят на сортировочном центре.   # noqa: E501

        :return: The status of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.

        Статус отправления: - `acceptance_in_progress` — идёт приёмка, - `awaiting_approve` — ожидает подтверждения, - `awaiting_packaging` — ожидает упаковки, - `awaiting_registration` — ожидает регистрации, - `awaiting_deliver` — ожидает отгрузки, - `arbitration` — арбитраж, - `client_arbitration` — клиентский арбитраж доставки, - `delivering` — доставляется, - `driver_pickup` — у водителя, - `not_accepted` — не принят на сортировочном центре.   # noqa: E501

        :param status: The status of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The warehouse_id of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.

        Идентификатор склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this Postingv3GetFbsPostingUnfulfilledListRequestFilter.  # noqa: E501
        :type: list[int]
        """

        self._warehouse_id = warehouse_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Postingv3GetFbsPostingUnfulfilledListRequestFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Postingv3GetFbsPostingUnfulfilledListRequestFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
