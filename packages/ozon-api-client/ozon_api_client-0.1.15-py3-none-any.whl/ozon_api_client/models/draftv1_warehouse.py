# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Draftv1Warehouse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'bundle_ids': 'list[V1BundleId]',
        'name': 'str',
        'restricted_bundle_id': 'str',
        'status': 'V1WarehouseStatus',
        'supply_warehouse': 'V1SupplyWarehouse',
        'total_rank': 'int',
        'total_score': 'float',
        'travel_time_days': 'int',
        'warehouse_id': 'int'
    }

    attribute_map = {
        'address': 'address',
        'bundle_ids': 'bundle_ids',
        'name': 'name',
        'restricted_bundle_id': 'restricted_bundle_id',
        'status': 'status',
        'supply_warehouse': 'supply_warehouse',
        'total_rank': 'total_rank',
        'total_score': 'total_score',
        'travel_time_days': 'travel_time_days',
        'warehouse_id': 'warehouse_id'
    }

    def __init__(self, address=None, bundle_ids=None, name=None, restricted_bundle_id=None, status=None, supply_warehouse=None, total_rank=None, total_score=None, travel_time_days=None, warehouse_id=None):  # noqa: E501
        """Draftv1Warehouse - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._bundle_ids = None
        self._name = None
        self._restricted_bundle_id = None
        self._status = None
        self._supply_warehouse = None
        self._total_rank = None
        self._total_score = None
        self._travel_time_days = None
        self._warehouse_id = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if bundle_ids is not None:
            self.bundle_ids = bundle_ids
        if name is not None:
            self.name = name
        if restricted_bundle_id is not None:
            self.restricted_bundle_id = restricted_bundle_id
        if status is not None:
            self.status = status
        if supply_warehouse is not None:
            self.supply_warehouse = supply_warehouse
        if total_rank is not None:
            self.total_rank = total_rank
        if total_score is not None:
            self.total_score = total_score
        if travel_time_days is not None:
            self.travel_time_days = travel_time_days
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id

    @property
    def address(self):
        """Gets the address of this Draftv1Warehouse.  # noqa: E501

        Адрес склада.  # noqa: E501

        :return: The address of this Draftv1Warehouse.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Draftv1Warehouse.

        Адрес склада.  # noqa: E501

        :param address: The address of this Draftv1Warehouse.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def bundle_ids(self):
        """Gets the bundle_ids of this Draftv1Warehouse.  # noqa: E501

        Товарный состав в виде комплекта.  # noqa: E501

        :return: The bundle_ids of this Draftv1Warehouse.  # noqa: E501
        :rtype: list[V1BundleId]
        """
        return self._bundle_ids

    @bundle_ids.setter
    def bundle_ids(self, bundle_ids):
        """Sets the bundle_ids of this Draftv1Warehouse.

        Товарный состав в виде комплекта.  # noqa: E501

        :param bundle_ids: The bundle_ids of this Draftv1Warehouse.  # noqa: E501
        :type: list[V1BundleId]
        """

        self._bundle_ids = bundle_ids

    @property
    def name(self):
        """Gets the name of this Draftv1Warehouse.  # noqa: E501

        Название склада.  # noqa: E501

        :return: The name of this Draftv1Warehouse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Draftv1Warehouse.

        Название склада.  # noqa: E501

        :param name: The name of this Draftv1Warehouse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def restricted_bundle_id(self):
        """Gets the restricted_bundle_id of this Draftv1Warehouse.  # noqa: E501

        Комплект товаров, которые не попадают в поставку. Используйте параметр в методе [/v1/supply-order/bundle](#operation/SupplyOrderBundle), чтобы получить подробную информацию.   # noqa: E501

        :return: The restricted_bundle_id of this Draftv1Warehouse.  # noqa: E501
        :rtype: str
        """
        return self._restricted_bundle_id

    @restricted_bundle_id.setter
    def restricted_bundle_id(self, restricted_bundle_id):
        """Sets the restricted_bundle_id of this Draftv1Warehouse.

        Комплект товаров, которые не попадают в поставку. Используйте параметр в методе [/v1/supply-order/bundle](#operation/SupplyOrderBundle), чтобы получить подробную информацию.   # noqa: E501

        :param restricted_bundle_id: The restricted_bundle_id of this Draftv1Warehouse.  # noqa: E501
        :type: str
        """

        self._restricted_bundle_id = restricted_bundle_id

    @property
    def status(self):
        """Gets the status of this Draftv1Warehouse.  # noqa: E501


        :return: The status of this Draftv1Warehouse.  # noqa: E501
        :rtype: V1WarehouseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Draftv1Warehouse.


        :param status: The status of this Draftv1Warehouse.  # noqa: E501
        :type: V1WarehouseStatus
        """

        self._status = status

    @property
    def supply_warehouse(self):
        """Gets the supply_warehouse of this Draftv1Warehouse.  # noqa: E501


        :return: The supply_warehouse of this Draftv1Warehouse.  # noqa: E501
        :rtype: V1SupplyWarehouse
        """
        return self._supply_warehouse

    @supply_warehouse.setter
    def supply_warehouse(self, supply_warehouse):
        """Sets the supply_warehouse of this Draftv1Warehouse.


        :param supply_warehouse: The supply_warehouse of this Draftv1Warehouse.  # noqa: E501
        :type: V1SupplyWarehouse
        """

        self._supply_warehouse = supply_warehouse

    @property
    def total_rank(self):
        """Gets the total_rank of this Draftv1Warehouse.  # noqa: E501

        Ранг склада в кластере.  # noqa: E501

        :return: The total_rank of this Draftv1Warehouse.  # noqa: E501
        :rtype: int
        """
        return self._total_rank

    @total_rank.setter
    def total_rank(self, total_rank):
        """Sets the total_rank of this Draftv1Warehouse.

        Ранг склада в кластере.  # noqa: E501

        :param total_rank: The total_rank of this Draftv1Warehouse.  # noqa: E501
        :type: int
        """

        self._total_rank = total_rank

    @property
    def total_score(self):
        """Gets the total_score of this Draftv1Warehouse.  # noqa: E501

        Рейтинг склада.  # noqa: E501

        :return: The total_score of this Draftv1Warehouse.  # noqa: E501
        :rtype: float
        """
        return self._total_score

    @total_score.setter
    def total_score(self, total_score):
        """Sets the total_score of this Draftv1Warehouse.

        Рейтинг склада.  # noqa: E501

        :param total_score: The total_score of this Draftv1Warehouse.  # noqa: E501
        :type: float
        """

        self._total_score = total_score

    @property
    def travel_time_days(self):
        """Gets the travel_time_days of this Draftv1Warehouse.  # noqa: E501

        Предполагаемый срок доставки.  # noqa: E501

        :return: The travel_time_days of this Draftv1Warehouse.  # noqa: E501
        :rtype: int
        """
        return self._travel_time_days

    @travel_time_days.setter
    def travel_time_days(self, travel_time_days):
        """Sets the travel_time_days of this Draftv1Warehouse.

        Предполагаемый срок доставки.  # noqa: E501

        :param travel_time_days: The travel_time_days of this Draftv1Warehouse.  # noqa: E501
        :type: int
        """

        self._travel_time_days = travel_time_days

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this Draftv1Warehouse.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The warehouse_id of this Draftv1Warehouse.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this Draftv1Warehouse.

        Идентификатор склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this Draftv1Warehouse.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Draftv1Warehouse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Draftv1Warehouse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
