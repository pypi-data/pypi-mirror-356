# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1DropOffWarehouse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_time_in_timezone': 'datetime',
        'days': 'list[V1Day]',
        'drop_off_warehouse_id': 'int',
        'warehouse_timezone': 'str'
    }

    attribute_map = {
        'current_time_in_timezone': 'current_time_in_timezone',
        'days': 'days',
        'drop_off_warehouse_id': 'drop_off_warehouse_id',
        'warehouse_timezone': 'warehouse_timezone'
    }

    def __init__(self, current_time_in_timezone=None, days=None, drop_off_warehouse_id=None, warehouse_timezone=None):  # noqa: E501
        """V1DropOffWarehouse - a model defined in Swagger"""  # noqa: E501
        self._current_time_in_timezone = None
        self._days = None
        self._drop_off_warehouse_id = None
        self._warehouse_timezone = None
        self.discriminator = None
        if current_time_in_timezone is not None:
            self.current_time_in_timezone = current_time_in_timezone
        if days is not None:
            self.days = days
        if drop_off_warehouse_id is not None:
            self.drop_off_warehouse_id = drop_off_warehouse_id
        if warehouse_timezone is not None:
            self.warehouse_timezone = warehouse_timezone

    @property
    def current_time_in_timezone(self):
        """Gets the current_time_in_timezone of this V1DropOffWarehouse.  # noqa: E501

        Текущее время в часовом поясе склада.  # noqa: E501

        :return: The current_time_in_timezone of this V1DropOffWarehouse.  # noqa: E501
        :rtype: datetime
        """
        return self._current_time_in_timezone

    @current_time_in_timezone.setter
    def current_time_in_timezone(self, current_time_in_timezone):
        """Sets the current_time_in_timezone of this V1DropOffWarehouse.

        Текущее время в часовом поясе склада.  # noqa: E501

        :param current_time_in_timezone: The current_time_in_timezone of this V1DropOffWarehouse.  # noqa: E501
        :type: datetime
        """

        self._current_time_in_timezone = current_time_in_timezone

    @property
    def days(self):
        """Gets the days of this V1DropOffWarehouse.  # noqa: E501

        Таймслоты по датам.  # noqa: E501

        :return: The days of this V1DropOffWarehouse.  # noqa: E501
        :rtype: list[V1Day]
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this V1DropOffWarehouse.

        Таймслоты по датам.  # noqa: E501

        :param days: The days of this V1DropOffWarehouse.  # noqa: E501
        :type: list[V1Day]
        """

        self._days = days

    @property
    def drop_off_warehouse_id(self):
        """Gets the drop_off_warehouse_id of this V1DropOffWarehouse.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The drop_off_warehouse_id of this V1DropOffWarehouse.  # noqa: E501
        :rtype: int
        """
        return self._drop_off_warehouse_id

    @drop_off_warehouse_id.setter
    def drop_off_warehouse_id(self, drop_off_warehouse_id):
        """Sets the drop_off_warehouse_id of this V1DropOffWarehouse.

        Идентификатор склада.  # noqa: E501

        :param drop_off_warehouse_id: The drop_off_warehouse_id of this V1DropOffWarehouse.  # noqa: E501
        :type: int
        """

        self._drop_off_warehouse_id = drop_off_warehouse_id

    @property
    def warehouse_timezone(self):
        """Gets the warehouse_timezone of this V1DropOffWarehouse.  # noqa: E501

        Часовой пояс склада.  # noqa: E501

        :return: The warehouse_timezone of this V1DropOffWarehouse.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_timezone

    @warehouse_timezone.setter
    def warehouse_timezone(self, warehouse_timezone):
        """Sets the warehouse_timezone of this V1DropOffWarehouse.

        Часовой пояс склада.  # noqa: E501

        :param warehouse_timezone: The warehouse_timezone of this V1DropOffWarehouse.  # noqa: E501
        :type: str
        """

        self._warehouse_timezone = warehouse_timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DropOffWarehouse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DropOffWarehouse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
