# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1ItemResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'icon_path': 'str',
        'sku': 'int',
        'name': 'str',
        'quantity': 'int',
        'barcode': 'str',
        'product_id': 'int',
        'quant': 'int',
        'is_quant_editable': 'bool',
        'volume_in_litres': 'float',
        'total_volume_in_litres': 'float',
        'contractor_item_code': 'str',
        'sfbo_attribute': 'V1ItemSfboAttribute',
        'shipment_type': 'V1BundleItemShipmentType'
    }

    attribute_map = {
        'icon_path': 'icon_path',
        'sku': 'sku',
        'name': 'name',
        'quantity': 'quantity',
        'barcode': 'barcode',
        'product_id': 'product_id',
        'quant': 'quant',
        'is_quant_editable': 'is_quant_editable',
        'volume_in_litres': 'volume_in_litres',
        'total_volume_in_litres': 'total_volume_in_litres',
        'contractor_item_code': 'contractor_item_code',
        'sfbo_attribute': 'sfbo_attribute',
        'shipment_type': 'shipment_type'
    }

    def __init__(self, icon_path=None, sku=None, name=None, quantity=None, barcode=None, product_id=None, quant=None, is_quant_editable=None, volume_in_litres=None, total_volume_in_litres=None, contractor_item_code=None, sfbo_attribute=None, shipment_type=None):  # noqa: E501
        """V1ItemResponse - a model defined in Swagger"""  # noqa: E501
        self._icon_path = None
        self._sku = None
        self._name = None
        self._quantity = None
        self._barcode = None
        self._product_id = None
        self._quant = None
        self._is_quant_editable = None
        self._volume_in_litres = None
        self._total_volume_in_litres = None
        self._contractor_item_code = None
        self._sfbo_attribute = None
        self._shipment_type = None
        self.discriminator = None
        if icon_path is not None:
            self.icon_path = icon_path
        if sku is not None:
            self.sku = sku
        if name is not None:
            self.name = name
        if quantity is not None:
            self.quantity = quantity
        if barcode is not None:
            self.barcode = barcode
        if product_id is not None:
            self.product_id = product_id
        if quant is not None:
            self.quant = quant
        if is_quant_editable is not None:
            self.is_quant_editable = is_quant_editable
        if volume_in_litres is not None:
            self.volume_in_litres = volume_in_litres
        if total_volume_in_litres is not None:
            self.total_volume_in_litres = total_volume_in_litres
        if contractor_item_code is not None:
            self.contractor_item_code = contractor_item_code
        if sfbo_attribute is not None:
            self.sfbo_attribute = sfbo_attribute
        if shipment_type is not None:
            self.shipment_type = shipment_type

    @property
    def icon_path(self):
        """Gets the icon_path of this V1ItemResponse.  # noqa: E501

        Ссылка на изображение товара.  # noqa: E501

        :return: The icon_path of this V1ItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._icon_path

    @icon_path.setter
    def icon_path(self, icon_path):
        """Sets the icon_path of this V1ItemResponse.

        Ссылка на изображение товара.  # noqa: E501

        :param icon_path: The icon_path of this V1ItemResponse.  # noqa: E501
        :type: str
        """

        self._icon_path = icon_path

    @property
    def sku(self):
        """Gets the sku of this V1ItemResponse.  # noqa: E501

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :return: The sku of this V1ItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this V1ItemResponse.

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :param sku: The sku of this V1ItemResponse.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def name(self):
        """Gets the name of this V1ItemResponse.  # noqa: E501

        Название товара.  # noqa: E501

        :return: The name of this V1ItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1ItemResponse.

        Название товара.  # noqa: E501

        :param name: The name of this V1ItemResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def quantity(self):
        """Gets the quantity of this V1ItemResponse.  # noqa: E501

        Количество товара.  # noqa: E501

        :return: The quantity of this V1ItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this V1ItemResponse.

        Количество товара.  # noqa: E501

        :param quantity: The quantity of this V1ItemResponse.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def barcode(self):
        """Gets the barcode of this V1ItemResponse.  # noqa: E501

        Штрихкод товара.  # noqa: E501

        :return: The barcode of this V1ItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this V1ItemResponse.

        Штрихкод товара.  # noqa: E501

        :param barcode: The barcode of this V1ItemResponse.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def product_id(self):
        """Gets the product_id of this V1ItemResponse.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this V1ItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this V1ItemResponse.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this V1ItemResponse.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def quant(self):
        """Gets the quant of this V1ItemResponse.  # noqa: E501

        Количество товаров в одной упаковке.  # noqa: E501

        :return: The quant of this V1ItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._quant

    @quant.setter
    def quant(self, quant):
        """Sets the quant of this V1ItemResponse.

        Количество товаров в одной упаковке.  # noqa: E501

        :param quant: The quant of this V1ItemResponse.  # noqa: E501
        :type: int
        """

        self._quant = quant

    @property
    def is_quant_editable(self):
        """Gets the is_quant_editable of this V1ItemResponse.  # noqa: E501

        `true`, если количество товаров в одной упаковке можно изменить.   # noqa: E501

        :return: The is_quant_editable of this V1ItemResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_quant_editable

    @is_quant_editable.setter
    def is_quant_editable(self, is_quant_editable):
        """Sets the is_quant_editable of this V1ItemResponse.

        `true`, если количество товаров в одной упаковке можно изменить.   # noqa: E501

        :param is_quant_editable: The is_quant_editable of this V1ItemResponse.  # noqa: E501
        :type: bool
        """

        self._is_quant_editable = is_quant_editable

    @property
    def volume_in_litres(self):
        """Gets the volume_in_litres of this V1ItemResponse.  # noqa: E501

        Объём товара в литрах.  # noqa: E501

        :return: The volume_in_litres of this V1ItemResponse.  # noqa: E501
        :rtype: float
        """
        return self._volume_in_litres

    @volume_in_litres.setter
    def volume_in_litres(self, volume_in_litres):
        """Sets the volume_in_litres of this V1ItemResponse.

        Объём товара в литрах.  # noqa: E501

        :param volume_in_litres: The volume_in_litres of this V1ItemResponse.  # noqa: E501
        :type: float
        """

        self._volume_in_litres = volume_in_litres

    @property
    def total_volume_in_litres(self):
        """Gets the total_volume_in_litres of this V1ItemResponse.  # noqa: E501

        Объём всех товаров в литрах.  # noqa: E501

        :return: The total_volume_in_litres of this V1ItemResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_volume_in_litres

    @total_volume_in_litres.setter
    def total_volume_in_litres(self, total_volume_in_litres):
        """Sets the total_volume_in_litres of this V1ItemResponse.

        Объём всех товаров в литрах.  # noqa: E501

        :param total_volume_in_litres: The total_volume_in_litres of this V1ItemResponse.  # noqa: E501
        :type: float
        """

        self._total_volume_in_litres = total_volume_in_litres

    @property
    def contractor_item_code(self):
        """Gets the contractor_item_code of this V1ItemResponse.  # noqa: E501

        Артикул товара.  # noqa: E501

        :return: The contractor_item_code of this V1ItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._contractor_item_code

    @contractor_item_code.setter
    def contractor_item_code(self, contractor_item_code):
        """Sets the contractor_item_code of this V1ItemResponse.

        Артикул товара.  # noqa: E501

        :param contractor_item_code: The contractor_item_code of this V1ItemResponse.  # noqa: E501
        :type: str
        """

        self._contractor_item_code = contractor_item_code

    @property
    def sfbo_attribute(self):
        """Gets the sfbo_attribute of this V1ItemResponse.  # noqa: E501


        :return: The sfbo_attribute of this V1ItemResponse.  # noqa: E501
        :rtype: V1ItemSfboAttribute
        """
        return self._sfbo_attribute

    @sfbo_attribute.setter
    def sfbo_attribute(self, sfbo_attribute):
        """Sets the sfbo_attribute of this V1ItemResponse.


        :param sfbo_attribute: The sfbo_attribute of this V1ItemResponse.  # noqa: E501
        :type: V1ItemSfboAttribute
        """

        self._sfbo_attribute = sfbo_attribute

    @property
    def shipment_type(self):
        """Gets the shipment_type of this V1ItemResponse.  # noqa: E501


        :return: The shipment_type of this V1ItemResponse.  # noqa: E501
        :rtype: V1BundleItemShipmentType
        """
        return self._shipment_type

    @shipment_type.setter
    def shipment_type(self, shipment_type):
        """Sets the shipment_type of this V1ItemResponse.


        :param shipment_type: The shipment_type of this V1ItemResponse.  # noqa: E501
        :type: V1BundleItemShipmentType
        """

        self._shipment_type = shipment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ItemResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ItemResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
