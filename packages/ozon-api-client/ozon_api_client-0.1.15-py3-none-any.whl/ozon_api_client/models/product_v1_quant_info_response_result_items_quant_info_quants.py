# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductV1QuantInfoResponseResultItemsQuantInfoQuants(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barcodes_extended': 'list[ProductV1QuantInfoResponseResultItemsQuantInfoQuantsBarcodesExtended]',
        'dimensions': 'ProductV1QuantInfoResponseResultItemsQuantInfoQuantsDimensions',
        'marketing_price': 'ProductV1QuantInfoResponseResultItemsQuantInfoQuantsMarketingPrice',
        'min_price': 'str',
        'old_price': 'str',
        'price': 'str',
        'quant_code': 'str',
        'quant_sice': 'int',
        'shipment_type': 'str',
        'sku': 'int',
        'statuses': 'ProductV1QuantInfoResponseResultItemsQuantInfoQuantsTexts'
    }

    attribute_map = {
        'barcodes_extended': 'barcodes_extended',
        'dimensions': 'dimensions',
        'marketing_price': 'marketing_price',
        'min_price': 'min_price',
        'old_price': 'old_price',
        'price': 'price',
        'quant_code': 'quant_code',
        'quant_sice': 'quant_sice',
        'shipment_type': 'shipment_type',
        'sku': 'sku',
        'statuses': 'statuses'
    }

    def __init__(self, barcodes_extended=None, dimensions=None, marketing_price=None, min_price=None, old_price=None, price=None, quant_code=None, quant_sice=None, shipment_type=None, sku=None, statuses=None):  # noqa: E501
        """ProductV1QuantInfoResponseResultItemsQuantInfoQuants - a model defined in Swagger"""  # noqa: E501
        self._barcodes_extended = None
        self._dimensions = None
        self._marketing_price = None
        self._min_price = None
        self._old_price = None
        self._price = None
        self._quant_code = None
        self._quant_sice = None
        self._shipment_type = None
        self._sku = None
        self._statuses = None
        self.discriminator = None
        if barcodes_extended is not None:
            self.barcodes_extended = barcodes_extended
        if dimensions is not None:
            self.dimensions = dimensions
        if marketing_price is not None:
            self.marketing_price = marketing_price
        if min_price is not None:
            self.min_price = min_price
        if old_price is not None:
            self.old_price = old_price
        if price is not None:
            self.price = price
        if quant_code is not None:
            self.quant_code = quant_code
        if quant_sice is not None:
            self.quant_sice = quant_sice
        if shipment_type is not None:
            self.shipment_type = shipment_type
        if sku is not None:
            self.sku = sku
        if statuses is not None:
            self.statuses = statuses

    @property
    def barcodes_extended(self):
        """Gets the barcodes_extended of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501

        Информация о штрихкодах.  # noqa: E501

        :return: The barcodes_extended of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :rtype: list[ProductV1QuantInfoResponseResultItemsQuantInfoQuantsBarcodesExtended]
        """
        return self._barcodes_extended

    @barcodes_extended.setter
    def barcodes_extended(self, barcodes_extended):
        """Sets the barcodes_extended of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.

        Информация о штрихкодах.  # noqa: E501

        :param barcodes_extended: The barcodes_extended of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :type: list[ProductV1QuantInfoResponseResultItemsQuantInfoQuantsBarcodesExtended]
        """

        self._barcodes_extended = barcodes_extended

    @property
    def dimensions(self):
        """Gets the dimensions of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501


        :return: The dimensions of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :rtype: ProductV1QuantInfoResponseResultItemsQuantInfoQuantsDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.


        :param dimensions: The dimensions of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :type: ProductV1QuantInfoResponseResultItemsQuantInfoQuantsDimensions
        """

        self._dimensions = dimensions

    @property
    def marketing_price(self):
        """Gets the marketing_price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501


        :return: The marketing_price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :rtype: ProductV1QuantInfoResponseResultItemsQuantInfoQuantsMarketingPrice
        """
        return self._marketing_price

    @marketing_price.setter
    def marketing_price(self, marketing_price):
        """Sets the marketing_price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.


        :param marketing_price: The marketing_price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :type: ProductV1QuantInfoResponseResultItemsQuantInfoQuantsMarketingPrice
        """

        self._marketing_price = marketing_price

    @property
    def min_price(self):
        """Gets the min_price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501

        Минимальная цена, указанная продавцом.  # noqa: E501

        :return: The min_price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :rtype: str
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price):
        """Sets the min_price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.

        Минимальная цена, указанная продавцом.  # noqa: E501

        :param min_price: The min_price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :type: str
        """

        self._min_price = min_price

    @property
    def old_price(self):
        """Gets the old_price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501

        Зачёркнутая цена, указанная продавцом.  # noqa: E501

        :return: The old_price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :rtype: str
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.

        Зачёркнутая цена, указанная продавцом.  # noqa: E501

        :param old_price: The old_price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :type: str
        """

        self._old_price = old_price

    @property
    def price(self):
        """Gets the price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501

        Цена продажи, указанная продавцом.  # noqa: E501

        :return: The price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.

        Цена продажи, указанная продавцом.  # noqa: E501

        :param price: The price of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def quant_code(self):
        """Gets the quant_code of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501

        Идентификатор эконом-товара.  # noqa: E501

        :return: The quant_code of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :rtype: str
        """
        return self._quant_code

    @quant_code.setter
    def quant_code(self, quant_code):
        """Sets the quant_code of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.

        Идентификатор эконом-товара.  # noqa: E501

        :param quant_code: The quant_code of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :type: str
        """

        self._quant_code = quant_code

    @property
    def quant_sice(self):
        """Gets the quant_sice of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501

        Размер кванта.  # noqa: E501

        :return: The quant_sice of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :rtype: int
        """
        return self._quant_sice

    @quant_sice.setter
    def quant_sice(self, quant_sice):
        """Sets the quant_sice of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.

        Размер кванта.  # noqa: E501

        :param quant_sice: The quant_sice of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :type: int
        """

        self._quant_sice = quant_sice

    @property
    def shipment_type(self):
        """Gets the shipment_type of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501

        Тип доставки товара.  # noqa: E501

        :return: The shipment_type of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :rtype: str
        """
        return self._shipment_type

    @shipment_type.setter
    def shipment_type(self, shipment_type):
        """Sets the shipment_type of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.

        Тип доставки товара.  # noqa: E501

        :param shipment_type: The shipment_type of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :type: str
        """

        self._shipment_type = shipment_type

    @property
    def sku(self):
        """Gets the sku of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501

        SKU товара.  # noqa: E501

        :return: The sku of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.

        SKU товара.  # noqa: E501

        :param sku: The sku of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def statuses(self):
        """Gets the statuses of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501


        :return: The statuses of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :rtype: ProductV1QuantInfoResponseResultItemsQuantInfoQuantsTexts
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.


        :param statuses: The statuses of this ProductV1QuantInfoResponseResultItemsQuantInfoQuants.  # noqa: E501
        :type: ProductV1QuantInfoResponseResultItemsQuantInfoQuantsTexts
        """

        self._statuses = statuses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductV1QuantInfoResponseResultItemsQuantInfoQuants, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductV1QuantInfoResponseResultItemsQuantInfoQuants):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
