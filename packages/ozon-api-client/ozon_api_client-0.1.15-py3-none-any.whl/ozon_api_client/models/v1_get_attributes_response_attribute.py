# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1GetAttributesResponseAttribute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_dependent': 'bool',
        'description': 'str',
        'dictionary_id': 'int',
        'group_id': 'int',
        'group_name': 'str',
        'id': 'int',
        'is_aspect': 'bool',
        'is_collection': 'bool',
        'is_required': 'bool',
        'name': 'str',
        'type': 'str',
        'attribute_complex_id': 'int',
        'max_value_count': 'int'
    }

    attribute_map = {
        'category_dependent': 'category_dependent',
        'description': 'description',
        'dictionary_id': 'dictionary_id',
        'group_id': 'group_id',
        'group_name': 'group_name',
        'id': 'id',
        'is_aspect': 'is_aspect',
        'is_collection': 'is_collection',
        'is_required': 'is_required',
        'name': 'name',
        'type': 'type',
        'attribute_complex_id': 'attribute_complex_id',
        'max_value_count': 'max_value_count'
    }

    def __init__(self, category_dependent=None, description=None, dictionary_id=None, group_id=None, group_name=None, id=None, is_aspect=None, is_collection=None, is_required=None, name=None, type=None, attribute_complex_id=None, max_value_count=None):  # noqa: E501
        """V1GetAttributesResponseAttribute - a model defined in Swagger"""  # noqa: E501
        self._category_dependent = None
        self._description = None
        self._dictionary_id = None
        self._group_id = None
        self._group_name = None
        self._id = None
        self._is_aspect = None
        self._is_collection = None
        self._is_required = None
        self._name = None
        self._type = None
        self._attribute_complex_id = None
        self._max_value_count = None
        self.discriminator = None
        if category_dependent is not None:
            self.category_dependent = category_dependent
        if description is not None:
            self.description = description
        if dictionary_id is not None:
            self.dictionary_id = dictionary_id
        if group_id is not None:
            self.group_id = group_id
        if group_name is not None:
            self.group_name = group_name
        if id is not None:
            self.id = id
        if is_aspect is not None:
            self.is_aspect = is_aspect
        if is_collection is not None:
            self.is_collection = is_collection
        if is_required is not None:
            self.is_required = is_required
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if attribute_complex_id is not None:
            self.attribute_complex_id = attribute_complex_id
        if max_value_count is not None:
            self.max_value_count = max_value_count

    @property
    def category_dependent(self):
        """Gets the category_dependent of this V1GetAttributesResponseAttribute.  # noqa: E501

        Признак, что значения словарного атрибута зависят от категории: - `true` — у атрибута разные значения для каждой категории. - `false` — у атрибута одинаковые значения для всех категорий.   # noqa: E501

        :return: The category_dependent of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._category_dependent

    @category_dependent.setter
    def category_dependent(self, category_dependent):
        """Sets the category_dependent of this V1GetAttributesResponseAttribute.

        Признак, что значения словарного атрибута зависят от категории: - `true` — у атрибута разные значения для каждой категории. - `false` — у атрибута одинаковые значения для всех категорий.   # noqa: E501

        :param category_dependent: The category_dependent of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: bool
        """

        self._category_dependent = category_dependent

    @property
    def description(self):
        """Gets the description of this V1GetAttributesResponseAttribute.  # noqa: E501

        Описание характеристики.  # noqa: E501

        :return: The description of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1GetAttributesResponseAttribute.

        Описание характеристики.  # noqa: E501

        :param description: The description of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dictionary_id(self):
        """Gets the dictionary_id of this V1GetAttributesResponseAttribute.  # noqa: E501

        Идентификатор справочника.  # noqa: E501

        :return: The dictionary_id of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: int
        """
        return self._dictionary_id

    @dictionary_id.setter
    def dictionary_id(self, dictionary_id):
        """Sets the dictionary_id of this V1GetAttributesResponseAttribute.

        Идентификатор справочника.  # noqa: E501

        :param dictionary_id: The dictionary_id of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: int
        """

        self._dictionary_id = dictionary_id

    @property
    def group_id(self):
        """Gets the group_id of this V1GetAttributesResponseAttribute.  # noqa: E501

        Идентификатор группы характеристик.  # noqa: E501

        :return: The group_id of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this V1GetAttributesResponseAttribute.

        Идентификатор группы характеристик.  # noqa: E501

        :param group_id: The group_id of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this V1GetAttributesResponseAttribute.  # noqa: E501

        Название группы характеристик.  # noqa: E501

        :return: The group_name of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this V1GetAttributesResponseAttribute.

        Название группы характеристик.  # noqa: E501

        :param group_name: The group_name of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def id(self):
        """Gets the id of this V1GetAttributesResponseAttribute.  # noqa: E501

        Номер задания на формирование документов.  # noqa: E501

        :return: The id of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1GetAttributesResponseAttribute.

        Номер задания на формирование документов.  # noqa: E501

        :param id: The id of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_aspect(self):
        """Gets the is_aspect of this V1GetAttributesResponseAttribute.  # noqa: E501

        Признак аспектного атрибута. Аспектный атрибут — характеристика, по которой отличаются товары одной модели.   Например, у одежды и обуви одной модели могут быть разные расцветки и размеры. То есть цвет и размер — это аспектные атрибуты.  Значения поля:   - `true` — атрибут аспектный и его нельзя изменить после поставки товара на склад или продажи со своего склада.   - `false` — атрибут не аспектный, можно изменить в любое время.   # noqa: E501

        :return: The is_aspect of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._is_aspect

    @is_aspect.setter
    def is_aspect(self, is_aspect):
        """Sets the is_aspect of this V1GetAttributesResponseAttribute.

        Признак аспектного атрибута. Аспектный атрибут — характеристика, по которой отличаются товары одной модели.   Например, у одежды и обуви одной модели могут быть разные расцветки и размеры. То есть цвет и размер — это аспектные атрибуты.  Значения поля:   - `true` — атрибут аспектный и его нельзя изменить после поставки товара на склад или продажи со своего склада.   - `false` — атрибут не аспектный, можно изменить в любое время.   # noqa: E501

        :param is_aspect: The is_aspect of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: bool
        """

        self._is_aspect = is_aspect

    @property
    def is_collection(self):
        """Gets the is_collection of this V1GetAttributesResponseAttribute.  # noqa: E501

        - `true`, если характеристика — набор значений. - `false`, если характеристика — одно значение.   # noqa: E501

        :return: The is_collection of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._is_collection

    @is_collection.setter
    def is_collection(self, is_collection):
        """Sets the is_collection of this V1GetAttributesResponseAttribute.

        - `true`, если характеристика — набор значений. - `false`, если характеристика — одно значение.   # noqa: E501

        :param is_collection: The is_collection of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: bool
        """

        self._is_collection = is_collection

    @property
    def is_required(self):
        """Gets the is_required of this V1GetAttributesResponseAttribute.  # noqa: E501

        Признак обязательной характеристики:   - `true` — обязательная характеристика,   - `false` — характеристику можно не указывать.   # noqa: E501

        :return: The is_required of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this V1GetAttributesResponseAttribute.

        Признак обязательной характеристики:   - `true` — обязательная характеристика,   - `false` — характеристику можно не указывать.   # noqa: E501

        :param is_required: The is_required of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def name(self):
        """Gets the name of this V1GetAttributesResponseAttribute.  # noqa: E501

        Название.  # noqa: E501

        :return: The name of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1GetAttributesResponseAttribute.

        Название.  # noqa: E501

        :param name: The name of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this V1GetAttributesResponseAttribute.  # noqa: E501

        Тип характеристики.  # noqa: E501

        :return: The type of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1GetAttributesResponseAttribute.

        Тип характеристики.  # noqa: E501

        :param type: The type of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def attribute_complex_id(self):
        """Gets the attribute_complex_id of this V1GetAttributesResponseAttribute.  # noqa: E501

        Идентификатор комплексного атрибута.  # noqa: E501

        :return: The attribute_complex_id of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: int
        """
        return self._attribute_complex_id

    @attribute_complex_id.setter
    def attribute_complex_id(self, attribute_complex_id):
        """Sets the attribute_complex_id of this V1GetAttributesResponseAttribute.

        Идентификатор комплексного атрибута.  # noqa: E501

        :param attribute_complex_id: The attribute_complex_id of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: int
        """

        self._attribute_complex_id = attribute_complex_id

    @property
    def max_value_count(self):
        """Gets the max_value_count of this V1GetAttributesResponseAttribute.  # noqa: E501

        Максимальное количество значений для атрибута.  # noqa: E501

        :return: The max_value_count of this V1GetAttributesResponseAttribute.  # noqa: E501
        :rtype: int
        """
        return self._max_value_count

    @max_value_count.setter
    def max_value_count(self, max_value_count):
        """Sets the max_value_count of this V1GetAttributesResponseAttribute.

        Максимальное количество значений для атрибута.  # noqa: E501

        :param max_value_count: The max_value_count of this V1GetAttributesResponseAttribute.  # noqa: E501
        :type: int
        """

        self._max_value_count = max_value_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetAttributesResponseAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetAttributesResponseAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
