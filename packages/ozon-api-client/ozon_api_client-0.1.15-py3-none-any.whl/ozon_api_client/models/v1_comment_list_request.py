# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1CommentListRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'int',
        'offset': 'int',
        'review_id': 'str',
        'sort_dir': 'V1CommentSort'
    }

    attribute_map = {
        'limit': 'limit',
        'offset': 'offset',
        'review_id': 'review_id',
        'sort_dir': 'sort_dir'
    }

    def __init__(self, limit=None, offset=None, review_id=None, sort_dir=None):  # noqa: E501
        """V1CommentListRequest - a model defined in Swagger"""  # noqa: E501
        self._limit = None
        self._offset = None
        self._review_id = None
        self._sort_dir = None
        self.discriminator = None
        self.limit = limit
        if offset is not None:
            self.offset = offset
        self.review_id = review_id
        if sort_dir is not None:
            self.sort_dir = sort_dir

    @property
    def limit(self):
        """Gets the limit of this V1CommentListRequest.  # noqa: E501

        Ограничение значений в ответе. Минимум — 20. Максимум — 100.   # noqa: E501

        :return: The limit of this V1CommentListRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this V1CommentListRequest.

        Ограничение значений в ответе. Минимум — 20. Максимум — 100.   # noqa: E501

        :param limit: The limit of this V1CommentListRequest.  # noqa: E501
        :type: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this V1CommentListRequest.  # noqa: E501

        Количество элементов, которое будет пропущено с начала списка в ответе. Например, если `offset = 10`, то ответ начнётся с 11-го найденного элемента.  # noqa: E501

        :return: The offset of this V1CommentListRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this V1CommentListRequest.

        Количество элементов, которое будет пропущено с начала списка в ответе. Например, если `offset = 10`, то ответ начнётся с 11-го найденного элемента.  # noqa: E501

        :param offset: The offset of this V1CommentListRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def review_id(self):
        """Gets the review_id of this V1CommentListRequest.  # noqa: E501

        Идентификатор отзыва.  # noqa: E501

        :return: The review_id of this V1CommentListRequest.  # noqa: E501
        :rtype: str
        """
        return self._review_id

    @review_id.setter
    def review_id(self, review_id):
        """Sets the review_id of this V1CommentListRequest.

        Идентификатор отзыва.  # noqa: E501

        :param review_id: The review_id of this V1CommentListRequest.  # noqa: E501
        :type: str
        """
        if review_id is None:
            raise ValueError("Invalid value for `review_id`, must not be `None`")  # noqa: E501

        self._review_id = review_id

    @property
    def sort_dir(self):
        """Gets the sort_dir of this V1CommentListRequest.  # noqa: E501


        :return: The sort_dir of this V1CommentListRequest.  # noqa: E501
        :rtype: V1CommentSort
        """
        return self._sort_dir

    @sort_dir.setter
    def sort_dir(self, sort_dir):
        """Sets the sort_dir of this V1CommentListRequest.


        :param sort_dir: The sort_dir of this V1CommentListRequest.  # noqa: E501
        :type: V1CommentSort
        """

        self._sort_dir = sort_dir

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CommentListRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CommentListRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
