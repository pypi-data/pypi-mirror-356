# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsStockOnWarehouseResultRows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku': 'int',
        'item_code': 'str',
        'item_name': 'str',
        'free_to_sell_amount': 'int',
        'promised_amount': 'int',
        'reserved_amount': 'int',
        'warehouse_name': 'str',
        'idc': 'float'
    }

    attribute_map = {
        'sku': 'sku',
        'item_code': 'item_code',
        'item_name': 'item_name',
        'free_to_sell_amount': 'free_to_sell_amount',
        'promised_amount': 'promised_amount',
        'reserved_amount': 'reserved_amount',
        'warehouse_name': 'warehouse_name',
        'idc': 'idc'
    }

    def __init__(self, sku=None, item_code=None, item_name=None, free_to_sell_amount=None, promised_amount=None, reserved_amount=None, warehouse_name=None, idc=None):  # noqa: E501
        """AnalyticsStockOnWarehouseResultRows - a model defined in Swagger"""  # noqa: E501
        self._sku = None
        self._item_code = None
        self._item_name = None
        self._free_to_sell_amount = None
        self._promised_amount = None
        self._reserved_amount = None
        self._warehouse_name = None
        self._idc = None
        self.discriminator = None
        if sku is not None:
            self.sku = sku
        if item_code is not None:
            self.item_code = item_code
        if item_name is not None:
            self.item_name = item_name
        if free_to_sell_amount is not None:
            self.free_to_sell_amount = free_to_sell_amount
        if promised_amount is not None:
            self.promised_amount = promised_amount
        if reserved_amount is not None:
            self.reserved_amount = reserved_amount
        if warehouse_name is not None:
            self.warehouse_name = warehouse_name
        if idc is not None:
            self.idc = idc

    @property
    def sku(self):
        """Gets the sku of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :return: The sku of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this AnalyticsStockOnWarehouseResultRows.

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :param sku: The sku of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def item_code(self):
        """Gets the item_code of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501

        Идентификатор товара в системе продавца.  # noqa: E501

        :return: The item_code of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """Sets the item_code of this AnalyticsStockOnWarehouseResultRows.

        Идентификатор товара в системе продавца.  # noqa: E501

        :param item_code: The item_code of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :type: str
        """

        self._item_code = item_code

    @property
    def item_name(self):
        """Gets the item_name of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501

        Название товара в системе Ozon.  # noqa: E501

        :return: The item_name of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this AnalyticsStockOnWarehouseResultRows.

        Название товара в системе Ozon.  # noqa: E501

        :param item_name: The item_name of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :type: str
        """

        self._item_name = item_name

    @property
    def free_to_sell_amount(self):
        """Gets the free_to_sell_amount of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501

        Количество товара, доступное к продаже на Ozon.  # noqa: E501

        :return: The free_to_sell_amount of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :rtype: int
        """
        return self._free_to_sell_amount

    @free_to_sell_amount.setter
    def free_to_sell_amount(self, free_to_sell_amount):
        """Sets the free_to_sell_amount of this AnalyticsStockOnWarehouseResultRows.

        Количество товара, доступное к продаже на Ozon.  # noqa: E501

        :param free_to_sell_amount: The free_to_sell_amount of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :type: int
        """

        self._free_to_sell_amount = free_to_sell_amount

    @property
    def promised_amount(self):
        """Gets the promised_amount of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501

        Количество товара, указанное в подтверждённых будущих поставках.  # noqa: E501

        :return: The promised_amount of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :rtype: int
        """
        return self._promised_amount

    @promised_amount.setter
    def promised_amount(self, promised_amount):
        """Sets the promised_amount of this AnalyticsStockOnWarehouseResultRows.

        Количество товара, указанное в подтверждённых будущих поставках.  # noqa: E501

        :param promised_amount: The promised_amount of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :type: int
        """

        self._promised_amount = promised_amount

    @property
    def reserved_amount(self):
        """Gets the reserved_amount of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501

        Количество товара, зарезервированное для покупки, возврата и перевозки между складами.  # noqa: E501

        :return: The reserved_amount of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :rtype: int
        """
        return self._reserved_amount

    @reserved_amount.setter
    def reserved_amount(self, reserved_amount):
        """Sets the reserved_amount of this AnalyticsStockOnWarehouseResultRows.

        Количество товара, зарезервированное для покупки, возврата и перевозки между складами.  # noqa: E501

        :param reserved_amount: The reserved_amount of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :type: int
        """

        self._reserved_amount = reserved_amount

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501

        Название склада, где находится товар.  # noqa: E501

        :return: The warehouse_name of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this AnalyticsStockOnWarehouseResultRows.

        Название склада, где находится товар.  # noqa: E501

        :param warehouse_name: The warehouse_name of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :type: str
        """

        self._warehouse_name = warehouse_name

    @property
    def idc(self):
        """Gets the idc of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501

        На сколько дней хватит остатка товара с учётом среднесуточных продаж.  # noqa: E501

        :return: The idc of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :rtype: float
        """
        return self._idc

    @idc.setter
    def idc(self, idc):
        """Sets the idc of this AnalyticsStockOnWarehouseResultRows.

        На сколько дней хватит остатка товара с учётом среднесуточных продаж.  # noqa: E501

        :param idc: The idc of this AnalyticsStockOnWarehouseResultRows.  # noqa: E501
        :type: float
        """

        self._idc = idc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsStockOnWarehouseResultRows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsStockOnWarehouseResultRows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
