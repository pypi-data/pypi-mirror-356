# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1WarehouseStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invalid_reason': 'V1WarehouseScoringInvalidReason',
        'is_available': 'bool',
        'state': 'V1WarehouseScoringStatus'
    }

    attribute_map = {
        'invalid_reason': 'invalid_reason',
        'is_available': 'is_available',
        'state': 'state'
    }

    def __init__(self, invalid_reason=None, is_available=None, state=None):  # noqa: E501
        """V1WarehouseStatus - a model defined in Swagger"""  # noqa: E501
        self._invalid_reason = None
        self._is_available = None
        self._state = None
        self.discriminator = None
        if invalid_reason is not None:
            self.invalid_reason = invalid_reason
        if is_available is not None:
            self.is_available = is_available
        if state is not None:
            self.state = state

    @property
    def invalid_reason(self):
        """Gets the invalid_reason of this V1WarehouseStatus.  # noqa: E501


        :return: The invalid_reason of this V1WarehouseStatus.  # noqa: E501
        :rtype: V1WarehouseScoringInvalidReason
        """
        return self._invalid_reason

    @invalid_reason.setter
    def invalid_reason(self, invalid_reason):
        """Sets the invalid_reason of this V1WarehouseStatus.


        :param invalid_reason: The invalid_reason of this V1WarehouseStatus.  # noqa: E501
        :type: V1WarehouseScoringInvalidReason
        """

        self._invalid_reason = invalid_reason

    @property
    def is_available(self):
        """Gets the is_available of this V1WarehouseStatus.  # noqa: E501

        Доступность склада: - `true` — доступен, - `false` — недоступен.   # noqa: E501

        :return: The is_available of this V1WarehouseStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this V1WarehouseStatus.

        Доступность склада: - `true` — доступен, - `false` — недоступен.   # noqa: E501

        :param is_available: The is_available of this V1WarehouseStatus.  # noqa: E501
        :type: bool
        """

        self._is_available = is_available

    @property
    def state(self):
        """Gets the state of this V1WarehouseStatus.  # noqa: E501


        :return: The state of this V1WarehouseStatus.  # noqa: E501
        :rtype: V1WarehouseScoringStatus
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V1WarehouseStatus.


        :param state: The state of this V1WarehouseStatus.  # noqa: E501
        :type: V1WarehouseScoringStatus
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1WarehouseStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1WarehouseStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
