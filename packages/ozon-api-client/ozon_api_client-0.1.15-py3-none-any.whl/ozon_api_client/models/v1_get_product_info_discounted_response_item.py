# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1GetProductInfoDiscountedResponseItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment_reason_damaged': 'str',
        'condition': 'str',
        'condition_estimation': 'str',
        'defects': 'str',
        'discounted_sku': 'int',
        'mechanical_damage': 'str',
        'package_damage': 'str',
        'packaging_violation': 'str',
        'reason_damaged': 'str',
        'repair': 'str',
        'shortage': 'str',
        'sku': 'int',
        'warranty_type': 'str'
    }

    attribute_map = {
        'comment_reason_damaged': 'comment_reason_damaged',
        'condition': 'condition',
        'condition_estimation': 'condition_estimation',
        'defects': 'defects',
        'discounted_sku': 'discounted_sku',
        'mechanical_damage': 'mechanical_damage',
        'package_damage': 'package_damage',
        'packaging_violation': 'packaging_violation',
        'reason_damaged': 'reason_damaged',
        'repair': 'repair',
        'shortage': 'shortage',
        'sku': 'sku',
        'warranty_type': 'warranty_type'
    }

    def __init__(self, comment_reason_damaged=None, condition=None, condition_estimation=None, defects=None, discounted_sku=None, mechanical_damage=None, package_damage=None, packaging_violation=None, reason_damaged=None, repair=None, shortage=None, sku=None, warranty_type=None):  # noqa: E501
        """V1GetProductInfoDiscountedResponseItem - a model defined in Swagger"""  # noqa: E501
        self._comment_reason_damaged = None
        self._condition = None
        self._condition_estimation = None
        self._defects = None
        self._discounted_sku = None
        self._mechanical_damage = None
        self._package_damage = None
        self._packaging_violation = None
        self._reason_damaged = None
        self._repair = None
        self._shortage = None
        self._sku = None
        self._warranty_type = None
        self.discriminator = None
        if comment_reason_damaged is not None:
            self.comment_reason_damaged = comment_reason_damaged
        if condition is not None:
            self.condition = condition
        if condition_estimation is not None:
            self.condition_estimation = condition_estimation
        if defects is not None:
            self.defects = defects
        if discounted_sku is not None:
            self.discounted_sku = discounted_sku
        if mechanical_damage is not None:
            self.mechanical_damage = mechanical_damage
        if package_damage is not None:
            self.package_damage = package_damage
        if packaging_violation is not None:
            self.packaging_violation = packaging_violation
        if reason_damaged is not None:
            self.reason_damaged = reason_damaged
        if repair is not None:
            self.repair = repair
        if shortage is not None:
            self.shortage = shortage
        if sku is not None:
            self.sku = sku
        if warranty_type is not None:
            self.warranty_type = warranty_type

    @property
    def comment_reason_damaged(self):
        """Gets the comment_reason_damaged of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        Комментарий к причине повреждения.  # noqa: E501

        :return: The comment_reason_damaged of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._comment_reason_damaged

    @comment_reason_damaged.setter
    def comment_reason_damaged(self, comment_reason_damaged):
        """Sets the comment_reason_damaged of this V1GetProductInfoDiscountedResponseItem.

        Комментарий к причине повреждения.  # noqa: E501

        :param comment_reason_damaged: The comment_reason_damaged of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: str
        """

        self._comment_reason_damaged = comment_reason_damaged

    @property
    def condition(self):
        """Gets the condition of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        Состояние товара — новый или Б/У.  # noqa: E501

        :return: The condition of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this V1GetProductInfoDiscountedResponseItem.

        Состояние товара — новый или Б/У.  # noqa: E501

        :param condition: The condition of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def condition_estimation(self):
        """Gets the condition_estimation of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        Состояние товара по шкале от 1 до 7: - 1 — удовлетворительное, - 2 — хорошее, - 3 — очень хорошее, - 4 — отличное, - 5–7 — как новый.   # noqa: E501

        :return: The condition_estimation of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._condition_estimation

    @condition_estimation.setter
    def condition_estimation(self, condition_estimation):
        """Sets the condition_estimation of this V1GetProductInfoDiscountedResponseItem.

        Состояние товара по шкале от 1 до 7: - 1 — удовлетворительное, - 2 — хорошее, - 3 — очень хорошее, - 4 — отличное, - 5–7 — как новый.   # noqa: E501

        :param condition_estimation: The condition_estimation of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: str
        """

        self._condition_estimation = condition_estimation

    @property
    def defects(self):
        """Gets the defects of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        Дефекты товара.  # noqa: E501

        :return: The defects of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._defects

    @defects.setter
    def defects(self, defects):
        """Sets the defects of this V1GetProductInfoDiscountedResponseItem.

        Дефекты товара.  # noqa: E501

        :param defects: The defects of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: str
        """

        self._defects = defects

    @property
    def discounted_sku(self):
        """Gets the discounted_sku of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        SKU уценённого товара.  # noqa: E501

        :return: The discounted_sku of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._discounted_sku

    @discounted_sku.setter
    def discounted_sku(self, discounted_sku):
        """Sets the discounted_sku of this V1GetProductInfoDiscountedResponseItem.

        SKU уценённого товара.  # noqa: E501

        :param discounted_sku: The discounted_sku of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: int
        """

        self._discounted_sku = discounted_sku

    @property
    def mechanical_damage(self):
        """Gets the mechanical_damage of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        Описание механического повреждения.  # noqa: E501

        :return: The mechanical_damage of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._mechanical_damage

    @mechanical_damage.setter
    def mechanical_damage(self, mechanical_damage):
        """Sets the mechanical_damage of this V1GetProductInfoDiscountedResponseItem.

        Описание механического повреждения.  # noqa: E501

        :param mechanical_damage: The mechanical_damage of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: str
        """

        self._mechanical_damage = mechanical_damage

    @property
    def package_damage(self):
        """Gets the package_damage of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        Описание повреждения упаковки.  # noqa: E501

        :return: The package_damage of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._package_damage

    @package_damage.setter
    def package_damage(self, package_damage):
        """Sets the package_damage of this V1GetProductInfoDiscountedResponseItem.

        Описание повреждения упаковки.  # noqa: E501

        :param package_damage: The package_damage of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: str
        """

        self._package_damage = package_damage

    @property
    def packaging_violation(self):
        """Gets the packaging_violation of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        Признак нарушения целостности упаковки.  # noqa: E501

        :return: The packaging_violation of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._packaging_violation

    @packaging_violation.setter
    def packaging_violation(self, packaging_violation):
        """Sets the packaging_violation of this V1GetProductInfoDiscountedResponseItem.

        Признак нарушения целостности упаковки.  # noqa: E501

        :param packaging_violation: The packaging_violation of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: str
        """

        self._packaging_violation = packaging_violation

    @property
    def reason_damaged(self):
        """Gets the reason_damaged of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        Причина повреждения.  # noqa: E501

        :return: The reason_damaged of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._reason_damaged

    @reason_damaged.setter
    def reason_damaged(self, reason_damaged):
        """Sets the reason_damaged of this V1GetProductInfoDiscountedResponseItem.

        Причина повреждения.  # noqa: E501

        :param reason_damaged: The reason_damaged of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: str
        """

        self._reason_damaged = reason_damaged

    @property
    def repair(self):
        """Gets the repair of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        Признак, что товар отремонтирован.  # noqa: E501

        :return: The repair of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._repair

    @repair.setter
    def repair(self, repair):
        """Sets the repair of this V1GetProductInfoDiscountedResponseItem.

        Признак, что товар отремонтирован.  # noqa: E501

        :param repair: The repair of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: str
        """

        self._repair = repair

    @property
    def shortage(self):
        """Gets the shortage of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        Признак, что товар некомплектный.  # noqa: E501

        :return: The shortage of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._shortage

    @shortage.setter
    def shortage(self, shortage):
        """Sets the shortage of this V1GetProductInfoDiscountedResponseItem.

        Признак, что товар некомплектный.  # noqa: E501

        :param shortage: The shortage of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: str
        """

        self._shortage = shortage

    @property
    def sku(self):
        """Gets the sku of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        SKU основного товара.  # noqa: E501

        :return: The sku of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this V1GetProductInfoDiscountedResponseItem.

        SKU основного товара.  # noqa: E501

        :param sku: The sku of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def warranty_type(self):
        """Gets the warranty_type of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501

        Наличие у товара действующей гарантии.  # noqa: E501

        :return: The warranty_type of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._warranty_type

    @warranty_type.setter
    def warranty_type(self, warranty_type):
        """Sets the warranty_type of this V1GetProductInfoDiscountedResponseItem.

        Наличие у товара действующей гарантии.  # noqa: E501

        :param warranty_type: The warranty_type of this V1GetProductInfoDiscountedResponseItem.  # noqa: E501
        :type: str
        """

        self._warranty_type = warranty_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetProductInfoDiscountedResponseItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetProductInfoDiscountedResponseItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
