# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetReturnsListResponseLogistic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'technical_return_moment': 'datetime',
        'final_moment': 'datetime',
        'cancelled_with_compensation_moment': 'datetime',
        'return_date': 'datetime',
        'barcode': 'str'
    }

    attribute_map = {
        'technical_return_moment': 'technical_return_moment',
        'final_moment': 'final_moment',
        'cancelled_with_compensation_moment': 'cancelled_with_compensation_moment',
        'return_date': 'return_date',
        'barcode': 'barcode'
    }

    def __init__(self, technical_return_moment=None, final_moment=None, cancelled_with_compensation_moment=None, return_date=None, barcode=None):  # noqa: E501
        """GetReturnsListResponseLogistic - a model defined in Swagger"""  # noqa: E501
        self._technical_return_moment = None
        self._final_moment = None
        self._cancelled_with_compensation_moment = None
        self._return_date = None
        self._barcode = None
        self.discriminator = None
        if technical_return_moment is not None:
            self.technical_return_moment = technical_return_moment
        if final_moment is not None:
            self.final_moment = final_moment
        if cancelled_with_compensation_moment is not None:
            self.cancelled_with_compensation_moment = cancelled_with_compensation_moment
        if return_date is not None:
            self.return_date = return_date
        if barcode is not None:
            self.barcode = barcode

    @property
    def technical_return_moment(self):
        """Gets the technical_return_moment of this GetReturnsListResponseLogistic.  # noqa: E501

        Дата, когда заказ поставили на технический возврат.  # noqa: E501

        :return: The technical_return_moment of this GetReturnsListResponseLogistic.  # noqa: E501
        :rtype: datetime
        """
        return self._technical_return_moment

    @technical_return_moment.setter
    def technical_return_moment(self, technical_return_moment):
        """Sets the technical_return_moment of this GetReturnsListResponseLogistic.

        Дата, когда заказ поставили на технический возврат.  # noqa: E501

        :param technical_return_moment: The technical_return_moment of this GetReturnsListResponseLogistic.  # noqa: E501
        :type: datetime
        """

        self._technical_return_moment = technical_return_moment

    @property
    def final_moment(self):
        """Gets the final_moment of this GetReturnsListResponseLogistic.  # noqa: E501

        Дата, когда возврат прибыл на фулфилмент или выдан продавцу.  # noqa: E501

        :return: The final_moment of this GetReturnsListResponseLogistic.  # noqa: E501
        :rtype: datetime
        """
        return self._final_moment

    @final_moment.setter
    def final_moment(self, final_moment):
        """Sets the final_moment of this GetReturnsListResponseLogistic.

        Дата, когда возврат прибыл на фулфилмент или выдан продавцу.  # noqa: E501

        :param final_moment: The final_moment of this GetReturnsListResponseLogistic.  # noqa: E501
        :type: datetime
        """

        self._final_moment = final_moment

    @property
    def cancelled_with_compensation_moment(self):
        """Gets the cancelled_with_compensation_moment of this GetReturnsListResponseLogistic.  # noqa: E501

        Дата, когда продавцу компенсировали возврат.  # noqa: E501

        :return: The cancelled_with_compensation_moment of this GetReturnsListResponseLogistic.  # noqa: E501
        :rtype: datetime
        """
        return self._cancelled_with_compensation_moment

    @cancelled_with_compensation_moment.setter
    def cancelled_with_compensation_moment(self, cancelled_with_compensation_moment):
        """Sets the cancelled_with_compensation_moment of this GetReturnsListResponseLogistic.

        Дата, когда продавцу компенсировали возврат.  # noqa: E501

        :param cancelled_with_compensation_moment: The cancelled_with_compensation_moment of this GetReturnsListResponseLogistic.  # noqa: E501
        :type: datetime
        """

        self._cancelled_with_compensation_moment = cancelled_with_compensation_moment

    @property
    def return_date(self):
        """Gets the return_date of this GetReturnsListResponseLogistic.  # noqa: E501

        Дата, когда покупатель вернул товар.  # noqa: E501

        :return: The return_date of this GetReturnsListResponseLogistic.  # noqa: E501
        :rtype: datetime
        """
        return self._return_date

    @return_date.setter
    def return_date(self, return_date):
        """Sets the return_date of this GetReturnsListResponseLogistic.

        Дата, когда покупатель вернул товар.  # noqa: E501

        :param return_date: The return_date of this GetReturnsListResponseLogistic.  # noqa: E501
        :type: datetime
        """

        self._return_date = return_date

    @property
    def barcode(self):
        """Gets the barcode of this GetReturnsListResponseLogistic.  # noqa: E501

        Штрихкод этикетки возврата.  # noqa: E501

        :return: The barcode of this GetReturnsListResponseLogistic.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this GetReturnsListResponseLogistic.

        Штрихкод этикетки возврата.  # noqa: E501

        :param barcode: The barcode of this GetReturnsListResponseLogistic.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetReturnsListResponseLogistic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetReturnsListResponseLogistic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
