# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FbsPostingFbsPostingAnalyticsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'delivery_type': 'str',
        'is_legal': 'bool',
        'is_premium': 'bool',
        'payment_type_group_name': 'str',
        'region': 'str'
    }

    attribute_map = {
        'city': 'city',
        'delivery_type': 'delivery_type',
        'is_legal': 'is_legal',
        'is_premium': 'is_premium',
        'payment_type_group_name': 'payment_type_group_name',
        'region': 'region'
    }

    def __init__(self, city=None, delivery_type=None, is_legal=None, is_premium=None, payment_type_group_name=None, region=None):  # noqa: E501
        """FbsPostingFbsPostingAnalyticsData - a model defined in Swagger"""  # noqa: E501
        self._city = None
        self._delivery_type = None
        self._is_legal = None
        self._is_premium = None
        self._payment_type_group_name = None
        self._region = None
        self.discriminator = None
        if city is not None:
            self.city = city
        if delivery_type is not None:
            self.delivery_type = delivery_type
        if is_legal is not None:
            self.is_legal = is_legal
        if is_premium is not None:
            self.is_premium = is_premium
        if payment_type_group_name is not None:
            self.payment_type_group_name = payment_type_group_name
        if region is not None:
            self.region = region

    @property
    def city(self):
        """Gets the city of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501

        Город доставки.  # noqa: E501

        :return: The city of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this FbsPostingFbsPostingAnalyticsData.

        Город доставки.  # noqa: E501

        :param city: The city of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def delivery_type(self):
        """Gets the delivery_type of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501

        Способ доставки.  # noqa: E501

        :return: The delivery_type of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501
        :rtype: str
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this FbsPostingFbsPostingAnalyticsData.

        Способ доставки.  # noqa: E501

        :param delivery_type: The delivery_type of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501
        :type: str
        """

        self._delivery_type = delivery_type

    @property
    def is_legal(self):
        """Gets the is_legal of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501

        Признак, что получатель юридическое лицо:   - `true` — юридическое лицо,   - `false` — физическое лицо.   # noqa: E501

        :return: The is_legal of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501
        :rtype: bool
        """
        return self._is_legal

    @is_legal.setter
    def is_legal(self, is_legal):
        """Sets the is_legal of this FbsPostingFbsPostingAnalyticsData.

        Признак, что получатель юридическое лицо:   - `true` — юридическое лицо,   - `false` — физическое лицо.   # noqa: E501

        :param is_legal: The is_legal of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501
        :type: bool
        """

        self._is_legal = is_legal

    @property
    def is_premium(self):
        """Gets the is_premium of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501

        Наличие подписки Premium.  # noqa: E501

        :return: The is_premium of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501
        :rtype: bool
        """
        return self._is_premium

    @is_premium.setter
    def is_premium(self, is_premium):
        """Sets the is_premium of this FbsPostingFbsPostingAnalyticsData.

        Наличие подписки Premium.  # noqa: E501

        :param is_premium: The is_premium of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501
        :type: bool
        """

        self._is_premium = is_premium

    @property
    def payment_type_group_name(self):
        """Gets the payment_type_group_name of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501

        Способ оплаты:  - `картой онлайн`, - `Ozon Карта`, - `автосписание с Ozon Карты при выдаче`, - `сохранённой картой при получении`, - `Система Быстрых Платежей`,  - `Ozon Рассрочка`,  - `оплата на расчётный счёт`, - `SberPay`.   # noqa: E501

        :return: The payment_type_group_name of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501
        :rtype: str
        """
        return self._payment_type_group_name

    @payment_type_group_name.setter
    def payment_type_group_name(self, payment_type_group_name):
        """Sets the payment_type_group_name of this FbsPostingFbsPostingAnalyticsData.

        Способ оплаты:  - `картой онлайн`, - `Ozon Карта`, - `автосписание с Ozon Карты при выдаче`, - `сохранённой картой при получении`, - `Система Быстрых Платежей`,  - `Ozon Рассрочка`,  - `оплата на расчётный счёт`, - `SberPay`.   # noqa: E501

        :param payment_type_group_name: The payment_type_group_name of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501
        :type: str
        """

        self._payment_type_group_name = payment_type_group_name

    @property
    def region(self):
        """Gets the region of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501

        Регион доставки.  # noqa: E501

        :return: The region of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this FbsPostingFbsPostingAnalyticsData.

        Регион доставки.  # noqa: E501

        :param region: The region of this FbsPostingFbsPostingAnalyticsData.  # noqa: E501
        :type: str
        """

        self._region = region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FbsPostingFbsPostingAnalyticsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FbsPostingFbsPostingAnalyticsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
