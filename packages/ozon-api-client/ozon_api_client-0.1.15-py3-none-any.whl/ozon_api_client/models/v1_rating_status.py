# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1RatingStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'danger': 'bool',
        'premium': 'bool',
        'warning': 'bool'
    }

    attribute_map = {
        'danger': 'danger',
        'premium': 'premium',
        'warning': 'warning'
    }

    def __init__(self, danger=None, premium=None, warning=None):  # noqa: E501
        """V1RatingStatus - a model defined in Swagger"""  # noqa: E501
        self._danger = None
        self._premium = None
        self._warning = None
        self.discriminator = None
        if danger is not None:
            self.danger = danger
        if premium is not None:
            self.premium = premium
        if warning is not None:
            self.warning = warning

    @property
    def danger(self):
        """Gets the danger of this V1RatingStatus.  # noqa: E501

        Признак, превышено ли пороговое значение рейтинга для блокировки.  # noqa: E501

        :return: The danger of this V1RatingStatus.  # noqa: E501
        :rtype: bool
        """
        return self._danger

    @danger.setter
    def danger(self, danger):
        """Sets the danger of this V1RatingStatus.

        Признак, превышено ли пороговое значение рейтинга для блокировки.  # noqa: E501

        :param danger: The danger of this V1RatingStatus.  # noqa: E501
        :type: bool
        """

        self._danger = danger

    @property
    def premium(self):
        """Gets the premium of this V1RatingStatus.  # noqa: E501

        Признак, достигнуто ли пороговое значение для участия в Premium-программе.  # noqa: E501

        :return: The premium of this V1RatingStatus.  # noqa: E501
        :rtype: bool
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """Sets the premium of this V1RatingStatus.

        Признак, достигнуто ли пороговое значение для участия в Premium-программе.  # noqa: E501

        :param premium: The premium of this V1RatingStatus.  # noqa: E501
        :type: bool
        """

        self._premium = premium

    @property
    def warning(self):
        """Gets the warning of this V1RatingStatus.  # noqa: E501

        Признак наличия предупреждения о возможном превышении порогового значения для блокировки.  # noqa: E501

        :return: The warning of this V1RatingStatus.  # noqa: E501
        :rtype: bool
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this V1RatingStatus.

        Признак наличия предупреждения о возможном превышении порогового значения для блокировки.  # noqa: E501

        :param warning: The warning of this V1RatingStatus.  # noqa: E501
        :type: bool
        """

        self._warning = warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1RatingStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1RatingStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
