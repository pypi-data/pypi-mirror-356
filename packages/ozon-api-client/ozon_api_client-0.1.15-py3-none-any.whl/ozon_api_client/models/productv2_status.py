# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Productv2Status(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'state_failed': 'str',
        'moderate_status': 'str',
        'decline_reasons': 'list[str]',
        'validation_state': 'str',
        'state_name': 'str',
        'state_description': 'str',
        'is_failed': 'bool',
        'is_created': 'bool',
        'state_tooltip': 'str',
        'item_errors': 'list[V2ItemError]',
        'state_updated_at': 'datetime'
    }

    attribute_map = {
        'state': 'state',
        'state_failed': 'state_failed',
        'moderate_status': 'moderate_status',
        'decline_reasons': 'decline_reasons',
        'validation_state': 'validation_state',
        'state_name': 'state_name',
        'state_description': 'state_description',
        'is_failed': 'is_failed',
        'is_created': 'is_created',
        'state_tooltip': 'state_tooltip',
        'item_errors': 'item_errors',
        'state_updated_at': 'state_updated_at'
    }

    def __init__(self, state=None, state_failed=None, moderate_status=None, decline_reasons=None, validation_state=None, state_name=None, state_description=None, is_failed=None, is_created=None, state_tooltip=None, item_errors=None, state_updated_at=None):  # noqa: E501
        """Productv2Status - a model defined in Swagger"""  # noqa: E501
        self._state = None
        self._state_failed = None
        self._moderate_status = None
        self._decline_reasons = None
        self._validation_state = None
        self._state_name = None
        self._state_description = None
        self._is_failed = None
        self._is_created = None
        self._state_tooltip = None
        self._item_errors = None
        self._state_updated_at = None
        self.discriminator = None
        if state is not None:
            self.state = state
        if state_failed is not None:
            self.state_failed = state_failed
        if moderate_status is not None:
            self.moderate_status = moderate_status
        if decline_reasons is not None:
            self.decline_reasons = decline_reasons
        if validation_state is not None:
            self.validation_state = validation_state
        if state_name is not None:
            self.state_name = state_name
        if state_description is not None:
            self.state_description = state_description
        if is_failed is not None:
            self.is_failed = is_failed
        if is_created is not None:
            self.is_created = is_created
        if state_tooltip is not None:
            self.state_tooltip = state_tooltip
        if item_errors is not None:
            self.item_errors = item_errors
        if state_updated_at is not None:
            self.state_updated_at = state_updated_at

    @property
    def state(self):
        """Gets the state of this Productv2Status.  # noqa: E501

        Состояние товара.  # noqa: E501

        :return: The state of this Productv2Status.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Productv2Status.

        Состояние товара.  # noqa: E501

        :param state: The state of this Productv2Status.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def state_failed(self):
        """Gets the state_failed of this Productv2Status.  # noqa: E501

        Состояние товара, на переходе в которое произошла ошибка.  # noqa: E501

        :return: The state_failed of this Productv2Status.  # noqa: E501
        :rtype: str
        """
        return self._state_failed

    @state_failed.setter
    def state_failed(self, state_failed):
        """Sets the state_failed of this Productv2Status.

        Состояние товара, на переходе в которое произошла ошибка.  # noqa: E501

        :param state_failed: The state_failed of this Productv2Status.  # noqa: E501
        :type: str
        """

        self._state_failed = state_failed

    @property
    def moderate_status(self):
        """Gets the moderate_status of this Productv2Status.  # noqa: E501

        Статус модерации.  # noqa: E501

        :return: The moderate_status of this Productv2Status.  # noqa: E501
        :rtype: str
        """
        return self._moderate_status

    @moderate_status.setter
    def moderate_status(self, moderate_status):
        """Sets the moderate_status of this Productv2Status.

        Статус модерации.  # noqa: E501

        :param moderate_status: The moderate_status of this Productv2Status.  # noqa: E501
        :type: str
        """

        self._moderate_status = moderate_status

    @property
    def decline_reasons(self):
        """Gets the decline_reasons of this Productv2Status.  # noqa: E501

        Причины отклонения товара.  # noqa: E501

        :return: The decline_reasons of this Productv2Status.  # noqa: E501
        :rtype: list[str]
        """
        return self._decline_reasons

    @decline_reasons.setter
    def decline_reasons(self, decline_reasons):
        """Sets the decline_reasons of this Productv2Status.

        Причины отклонения товара.  # noqa: E501

        :param decline_reasons: The decline_reasons of this Productv2Status.  # noqa: E501
        :type: list[str]
        """

        self._decline_reasons = decline_reasons

    @property
    def validation_state(self):
        """Gets the validation_state of this Productv2Status.  # noqa: E501

        Статус валидации.  # noqa: E501

        :return: The validation_state of this Productv2Status.  # noqa: E501
        :rtype: str
        """
        return self._validation_state

    @validation_state.setter
    def validation_state(self, validation_state):
        """Sets the validation_state of this Productv2Status.

        Статус валидации.  # noqa: E501

        :param validation_state: The validation_state of this Productv2Status.  # noqa: E501
        :type: str
        """

        self._validation_state = validation_state

    @property
    def state_name(self):
        """Gets the state_name of this Productv2Status.  # noqa: E501

        Название состояния товара.  # noqa: E501

        :return: The state_name of this Productv2Status.  # noqa: E501
        :rtype: str
        """
        return self._state_name

    @state_name.setter
    def state_name(self, state_name):
        """Sets the state_name of this Productv2Status.

        Название состояния товара.  # noqa: E501

        :param state_name: The state_name of this Productv2Status.  # noqa: E501
        :type: str
        """

        self._state_name = state_name

    @property
    def state_description(self):
        """Gets the state_description of this Productv2Status.  # noqa: E501

        Описание состояния товара.  # noqa: E501

        :return: The state_description of this Productv2Status.  # noqa: E501
        :rtype: str
        """
        return self._state_description

    @state_description.setter
    def state_description(self, state_description):
        """Sets the state_description of this Productv2Status.

        Описание состояния товара.  # noqa: E501

        :param state_description: The state_description of this Productv2Status.  # noqa: E501
        :type: str
        """

        self._state_description = state_description

    @property
    def is_failed(self):
        """Gets the is_failed of this Productv2Status.  # noqa: E501

        Признак, что при создании товара возникли ошибки.  # noqa: E501

        :return: The is_failed of this Productv2Status.  # noqa: E501
        :rtype: bool
        """
        return self._is_failed

    @is_failed.setter
    def is_failed(self, is_failed):
        """Sets the is_failed of this Productv2Status.

        Признак, что при создании товара возникли ошибки.  # noqa: E501

        :param is_failed: The is_failed of this Productv2Status.  # noqa: E501
        :type: bool
        """

        self._is_failed = is_failed

    @property
    def is_created(self):
        """Gets the is_created of this Productv2Status.  # noqa: E501

        Признак, что товар создан.  # noqa: E501

        :return: The is_created of this Productv2Status.  # noqa: E501
        :rtype: bool
        """
        return self._is_created

    @is_created.setter
    def is_created(self, is_created):
        """Sets the is_created of this Productv2Status.

        Признак, что товар создан.  # noqa: E501

        :param is_created: The is_created of this Productv2Status.  # noqa: E501
        :type: bool
        """

        self._is_created = is_created

    @property
    def state_tooltip(self):
        """Gets the state_tooltip of this Productv2Status.  # noqa: E501

        Подсказки для текущего состояния товара.  # noqa: E501

        :return: The state_tooltip of this Productv2Status.  # noqa: E501
        :rtype: str
        """
        return self._state_tooltip

    @state_tooltip.setter
    def state_tooltip(self, state_tooltip):
        """Sets the state_tooltip of this Productv2Status.

        Подсказки для текущего состояния товара.  # noqa: E501

        :param state_tooltip: The state_tooltip of this Productv2Status.  # noqa: E501
        :type: str
        """

        self._state_tooltip = state_tooltip

    @property
    def item_errors(self):
        """Gets the item_errors of this Productv2Status.  # noqa: E501

        Ошибки при загрузке товаров.  # noqa: E501

        :return: The item_errors of this Productv2Status.  # noqa: E501
        :rtype: list[V2ItemError]
        """
        return self._item_errors

    @item_errors.setter
    def item_errors(self, item_errors):
        """Sets the item_errors of this Productv2Status.

        Ошибки при загрузке товаров.  # noqa: E501

        :param item_errors: The item_errors of this Productv2Status.  # noqa: E501
        :type: list[V2ItemError]
        """

        self._item_errors = item_errors

    @property
    def state_updated_at(self):
        """Gets the state_updated_at of this Productv2Status.  # noqa: E501

        Время последнего изменения состояния товара.  # noqa: E501

        :return: The state_updated_at of this Productv2Status.  # noqa: E501
        :rtype: datetime
        """
        return self._state_updated_at

    @state_updated_at.setter
    def state_updated_at(self, state_updated_at):
        """Sets the state_updated_at of this Productv2Status.

        Время последнего изменения состояния товара.  # noqa: E501

        :param state_updated_at: The state_updated_at of this Productv2Status.  # noqa: E501
        :type: datetime
        """

        self._state_updated_at = state_updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Productv2Status, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Productv2Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
