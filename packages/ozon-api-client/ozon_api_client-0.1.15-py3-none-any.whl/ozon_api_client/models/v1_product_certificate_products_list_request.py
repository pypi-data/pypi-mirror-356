# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1ProductCertificateProductsListRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate_id': 'int',
        'product_status_code': 'str',
        'page': 'int',
        'page_size': 'int'
    }

    attribute_map = {
        'certificate_id': 'certificate_id',
        'product_status_code': 'product_status_code',
        'page': 'page',
        'page_size': 'page_size'
    }

    def __init__(self, certificate_id=None, product_status_code=None, page=None, page_size=None):  # noqa: E501
        """V1ProductCertificateProductsListRequest - a model defined in Swagger"""  # noqa: E501
        self._certificate_id = None
        self._product_status_code = None
        self._page = None
        self._page_size = None
        self.discriminator = None
        self.certificate_id = certificate_id
        if product_status_code is not None:
            self.product_status_code = product_status_code
        self.page = page
        self.page_size = page_size

    @property
    def certificate_id(self):
        """Gets the certificate_id of this V1ProductCertificateProductsListRequest.  # noqa: E501

        Идентификатор сертификата.  # noqa: E501

        :return: The certificate_id of this V1ProductCertificateProductsListRequest.  # noqa: E501
        :rtype: int
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this V1ProductCertificateProductsListRequest.

        Идентификатор сертификата.  # noqa: E501

        :param certificate_id: The certificate_id of this V1ProductCertificateProductsListRequest.  # noqa: E501
        :type: int
        """
        if certificate_id is None:
            raise ValueError("Invalid value for `certificate_id`, must not be `None`")  # noqa: E501

        self._certificate_id = certificate_id

    @property
    def product_status_code(self):
        """Gets the product_status_code of this V1ProductCertificateProductsListRequest.  # noqa: E501

        Статус проверки товара при привязке к сертификату.  # noqa: E501

        :return: The product_status_code of this V1ProductCertificateProductsListRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_status_code

    @product_status_code.setter
    def product_status_code(self, product_status_code):
        """Sets the product_status_code of this V1ProductCertificateProductsListRequest.

        Статус проверки товара при привязке к сертификату.  # noqa: E501

        :param product_status_code: The product_status_code of this V1ProductCertificateProductsListRequest.  # noqa: E501
        :type: str
        """

        self._product_status_code = product_status_code

    @property
    def page(self):
        """Gets the page of this V1ProductCertificateProductsListRequest.  # noqa: E501

        Номер страницы, с которой выводить список. Минимальное значение — 1.  # noqa: E501

        :return: The page of this V1ProductCertificateProductsListRequest.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this V1ProductCertificateProductsListRequest.

        Номер страницы, с которой выводить список. Минимальное значение — 1.  # noqa: E501

        :param page: The page of this V1ProductCertificateProductsListRequest.  # noqa: E501
        :type: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")  # noqa: E501

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this V1ProductCertificateProductsListRequest.  # noqa: E501

        Количество объектов на странице. Значение — от 1 до 1000.  # noqa: E501

        :return: The page_size of this V1ProductCertificateProductsListRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this V1ProductCertificateProductsListRequest.

        Количество объектов на странице. Значение — от 1 до 1000.  # noqa: E501

        :param page_size: The page_size of this V1ProductCertificateProductsListRequest.  # noqa: E501
        :type: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ProductCertificateProductsListRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ProductCertificateProductsListRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
