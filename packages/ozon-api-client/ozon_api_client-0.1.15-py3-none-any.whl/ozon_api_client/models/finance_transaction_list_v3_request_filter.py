# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FinanceTransactionListV3RequestFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'FilterPeriod',
        'operation_type': 'list[str]',
        'posting_number': 'str',
        'transaction_type': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'operation_type': 'operation_type',
        'posting_number': 'posting_number',
        'transaction_type': 'transaction_type'
    }

    def __init__(self, _date=None, operation_type=None, posting_number=None, transaction_type=None):  # noqa: E501
        """FinanceTransactionListV3RequestFilter - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._operation_type = None
        self._posting_number = None
        self._transaction_type = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if operation_type is not None:
            self.operation_type = operation_type
        if posting_number is not None:
            self.posting_number = posting_number
        if transaction_type is not None:
            self.transaction_type = transaction_type

    @property
    def _date(self):
        """Gets the _date of this FinanceTransactionListV3RequestFilter.  # noqa: E501


        :return: The _date of this FinanceTransactionListV3RequestFilter.  # noqa: E501
        :rtype: FilterPeriod
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this FinanceTransactionListV3RequestFilter.


        :param _date: The _date of this FinanceTransactionListV3RequestFilter.  # noqa: E501
        :type: FilterPeriod
        """

        self.__date = _date

    @property
    def operation_type(self):
        """Gets the operation_type of this FinanceTransactionListV3RequestFilter.  # noqa: E501

        Тип операции:   - `ClientReturnAgentOperation` — получение возврата, отмены, невыкупа от покупателя;   - `MarketplaceMarketingActionCostOperation` — услуги продвижения товаров;   - `MarketplaceSaleReviewsOperation` — приобретение отзывов на платформе;   - `MarketplaceSellerCompensationOperation` — прочие компенсации;   - `OperationAgentDeliveredToCustomer` — доставка покупателю;   - `OperationAgentDeliveredToCustomerCanceled` — доставка покупателю — исправленное начисление;   - `OperationAgentStornoDeliveredToCustomer` — доставка покупателю — отмена начисления;   - `OperationClaim` — начисление по претензии;   - `OperationCorrectionSeller` — инвентаризация взаиморасчетов;   - `OperationDefectiveWriteOff` — компенсация за повреждённый на складе товар;   - `OperationItemReturn` — доставка и обработка возврата, отмены, невыкупа;   - `OperationLackWriteOff` — компенсация за утерянный на складе товар;   - `OperationMarketplaceCrossDockServiceWriteOff` — доставка товаров на склад Ozon (кросс-докинг);   - `OperationMarketplaceServiceStorage` — услуга размещения товаров на складе;   - `OperationSetOff` — взаимозачёт с другими договорами контрагента;   - `MarketplaceSellerReexposureDeliveryReturnOperation` — перечисление за доставку от покупателя;   - `OperationReturnGoodsFBSofRMS` — доставка и обработка возврата, отмены, невыкупа;   - `ReturnAgentOperationRFBS` — возврат перечисления за доставку покупателю;   - `ItemAgentServiceStarsMembership` — вознаграждение за услугу [«Звёздные товары»](https://s.ozon.ru/e7NlR6b);   - `MarketplaceSellerShippingCompensationReturnOperation` — компенсация перечисления за доставку;   - `OperationMarketplaceServicePremiumCashback` — услуга продвижения Premium;   - `MarketplaceServicePremiumPromotion` — услуга продвижения Premium, фиксированная комиссия;   - `MarketplaceRedistributionOfAcquiringOperation` — оплата эквайринга;   - `MarketplaceReturnStorageServiceAtThePickupPointFbsItem` — краткосрочное размещение возврата FBS;   - `MarketplaceReturnStorageServiceInTheWarehouseFbsItem` — долгосрочное размещение возврата FBS;   - `MarketplaceServiceItemDeliveryKGT` — доставка КГТ;   - `MarketplaceServiceItemDirectFlowLogistic` — логистика;   - `MarketplaceServiceItemReturnFlowLogistic` — обратная логистика;   - `MarketplaceServicePremiumCashbackIndividualPoints` — услуга продвижения «Бонусы продавца»;   - `OperationMarketplaceWithHoldingForUndeliverableGoods` — удержание за недовложение товара;   - `MarketplaceServiceItemDirectFlowLogisticVDC` — логистика вРЦ;   - `MarketplaceServiceItemDropoffPPZ` — услуга drop-off в пункте приёма заказов;   - `MarketplaceServicePremiumCashback` — услуга продвижения Premium;   - `MarketplaceServiceItemRedistributionReturnsPVZ` — перевыставление возвратов на пункте выдачи;   - `OperationElectronicServiceStencil` — услуга «Трафареты»;   - `OperationElectronicServicesPromotionInSearch` — услуга «Продвижение в поиске»;   - `OperationMarketplaceServiceItemElectronicServicesBrandShelf` — услуга «Брендовая полка»;   - `OperationSubscriptionPremium` — подписка Premium.   # noqa: E501

        :return: The operation_type of this FinanceTransactionListV3RequestFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this FinanceTransactionListV3RequestFilter.

        Тип операции:   - `ClientReturnAgentOperation` — получение возврата, отмены, невыкупа от покупателя;   - `MarketplaceMarketingActionCostOperation` — услуги продвижения товаров;   - `MarketplaceSaleReviewsOperation` — приобретение отзывов на платформе;   - `MarketplaceSellerCompensationOperation` — прочие компенсации;   - `OperationAgentDeliveredToCustomer` — доставка покупателю;   - `OperationAgentDeliveredToCustomerCanceled` — доставка покупателю — исправленное начисление;   - `OperationAgentStornoDeliveredToCustomer` — доставка покупателю — отмена начисления;   - `OperationClaim` — начисление по претензии;   - `OperationCorrectionSeller` — инвентаризация взаиморасчетов;   - `OperationDefectiveWriteOff` — компенсация за повреждённый на складе товар;   - `OperationItemReturn` — доставка и обработка возврата, отмены, невыкупа;   - `OperationLackWriteOff` — компенсация за утерянный на складе товар;   - `OperationMarketplaceCrossDockServiceWriteOff` — доставка товаров на склад Ozon (кросс-докинг);   - `OperationMarketplaceServiceStorage` — услуга размещения товаров на складе;   - `OperationSetOff` — взаимозачёт с другими договорами контрагента;   - `MarketplaceSellerReexposureDeliveryReturnOperation` — перечисление за доставку от покупателя;   - `OperationReturnGoodsFBSofRMS` — доставка и обработка возврата, отмены, невыкупа;   - `ReturnAgentOperationRFBS` — возврат перечисления за доставку покупателю;   - `ItemAgentServiceStarsMembership` — вознаграждение за услугу [«Звёздные товары»](https://s.ozon.ru/e7NlR6b);   - `MarketplaceSellerShippingCompensationReturnOperation` — компенсация перечисления за доставку;   - `OperationMarketplaceServicePremiumCashback` — услуга продвижения Premium;   - `MarketplaceServicePremiumPromotion` — услуга продвижения Premium, фиксированная комиссия;   - `MarketplaceRedistributionOfAcquiringOperation` — оплата эквайринга;   - `MarketplaceReturnStorageServiceAtThePickupPointFbsItem` — краткосрочное размещение возврата FBS;   - `MarketplaceReturnStorageServiceInTheWarehouseFbsItem` — долгосрочное размещение возврата FBS;   - `MarketplaceServiceItemDeliveryKGT` — доставка КГТ;   - `MarketplaceServiceItemDirectFlowLogistic` — логистика;   - `MarketplaceServiceItemReturnFlowLogistic` — обратная логистика;   - `MarketplaceServicePremiumCashbackIndividualPoints` — услуга продвижения «Бонусы продавца»;   - `OperationMarketplaceWithHoldingForUndeliverableGoods` — удержание за недовложение товара;   - `MarketplaceServiceItemDirectFlowLogisticVDC` — логистика вРЦ;   - `MarketplaceServiceItemDropoffPPZ` — услуга drop-off в пункте приёма заказов;   - `MarketplaceServicePremiumCashback` — услуга продвижения Premium;   - `MarketplaceServiceItemRedistributionReturnsPVZ` — перевыставление возвратов на пункте выдачи;   - `OperationElectronicServiceStencil` — услуга «Трафареты»;   - `OperationElectronicServicesPromotionInSearch` — услуга «Продвижение в поиске»;   - `OperationMarketplaceServiceItemElectronicServicesBrandShelf` — услуга «Брендовая полка»;   - `OperationSubscriptionPremium` — подписка Premium.   # noqa: E501

        :param operation_type: The operation_type of this FinanceTransactionListV3RequestFilter.  # noqa: E501
        :type: list[str]
        """

        self._operation_type = operation_type

    @property
    def posting_number(self):
        """Gets the posting_number of this FinanceTransactionListV3RequestFilter.  # noqa: E501

        Номер отправления.  # noqa: E501

        :return: The posting_number of this FinanceTransactionListV3RequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._posting_number

    @posting_number.setter
    def posting_number(self, posting_number):
        """Sets the posting_number of this FinanceTransactionListV3RequestFilter.

        Номер отправления.  # noqa: E501

        :param posting_number: The posting_number of this FinanceTransactionListV3RequestFilter.  # noqa: E501
        :type: str
        """

        self._posting_number = posting_number

    @property
    def transaction_type(self):
        """Gets the transaction_type of this FinanceTransactionListV3RequestFilter.  # noqa: E501

        Тип начисления:   - `all` — все,   - `orders` — заказы,   - `returns` — возвраты и отмены,   - `services` — сервисные сборы,   - `compensation` — компенсация,   - `transferDelivery` — стоимость доставки,   - `other` — прочее.  Некоторые операции могут быть разделены во времени. Например, при приёме возврата от покупателя списывается стоимость товара и возвращается комиссия, а когда товар возвращается на склад, взимается стоимость услуга по обработке возврата.   # noqa: E501

        :return: The transaction_type of this FinanceTransactionListV3RequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this FinanceTransactionListV3RequestFilter.

        Тип начисления:   - `all` — все,   - `orders` — заказы,   - `returns` — возвраты и отмены,   - `services` — сервисные сборы,   - `compensation` — компенсация,   - `transferDelivery` — стоимость доставки,   - `other` — прочее.  Некоторые операции могут быть разделены во времени. Например, при приёме возврата от покупателя списывается стоимость товара и возвращается комиссия, а когда товар возвращается на склад, взимается стоимость услуга по обработке возврата.   # noqa: E501

        :param transaction_type: The transaction_type of this FinanceTransactionListV3RequestFilter.  # noqa: E501
        :type: str
        """

        self._transaction_type = transaction_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinanceTransactionListV3RequestFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinanceTransactionListV3RequestFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
