# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2ReturnsRfbsFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offer_id': 'str',
        'posting_number': 'str',
        'group_state': 'list[str]',
        'created_at': 'CreatedAt'
    }

    attribute_map = {
        'offer_id': 'offer_id',
        'posting_number': 'posting_number',
        'group_state': 'group_state',
        'created_at': 'created_at'
    }

    def __init__(self, offer_id=None, posting_number=None, group_state=None, created_at=None):  # noqa: E501
        """V2ReturnsRfbsFilter - a model defined in Swagger"""  # noqa: E501
        self._offer_id = None
        self._posting_number = None
        self._group_state = None
        self._created_at = None
        self.discriminator = None
        if offer_id is not None:
            self.offer_id = offer_id
        if posting_number is not None:
            self.posting_number = posting_number
        if group_state is not None:
            self.group_state = group_state
        if created_at is not None:
            self.created_at = created_at

    @property
    def offer_id(self):
        """Gets the offer_id of this V2ReturnsRfbsFilter.  # noqa: E501

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :return: The offer_id of this V2ReturnsRfbsFilter.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this V2ReturnsRfbsFilter.

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :param offer_id: The offer_id of this V2ReturnsRfbsFilter.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def posting_number(self):
        """Gets the posting_number of this V2ReturnsRfbsFilter.  # noqa: E501

        Номер отправления.  # noqa: E501

        :return: The posting_number of this V2ReturnsRfbsFilter.  # noqa: E501
        :rtype: str
        """
        return self._posting_number

    @posting_number.setter
    def posting_number(self, posting_number):
        """Sets the posting_number of this V2ReturnsRfbsFilter.

        Номер отправления.  # noqa: E501

        :param posting_number: The posting_number of this V2ReturnsRfbsFilter.  # noqa: E501
        :type: str
        """

        self._posting_number = posting_number

    @property
    def group_state(self):
        """Gets the group_state of this V2ReturnsRfbsFilter.  # noqa: E501

        Фильтр по статусам заявок: - `All` — все заявки. - `New` — новые. - `Delivering` — в пути. - `Checkout` — на проверке. - `Arbitration` — спорные. - `Approved` — согласованные. - `Rejected` — отклонённые.   # noqa: E501

        :return: The group_state of this V2ReturnsRfbsFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_state

    @group_state.setter
    def group_state(self, group_state):
        """Sets the group_state of this V2ReturnsRfbsFilter.

        Фильтр по статусам заявок: - `All` — все заявки. - `New` — новые. - `Delivering` — в пути. - `Checkout` — на проверке. - `Arbitration` — спорные. - `Approved` — согласованные. - `Rejected` — отклонённые.   # noqa: E501

        :param group_state: The group_state of this V2ReturnsRfbsFilter.  # noqa: E501
        :type: list[str]
        """

        self._group_state = group_state

    @property
    def created_at(self):
        """Gets the created_at of this V2ReturnsRfbsFilter.  # noqa: E501


        :return: The created_at of this V2ReturnsRfbsFilter.  # noqa: E501
        :rtype: CreatedAt
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2ReturnsRfbsFilter.


        :param created_at: The created_at of this V2ReturnsRfbsFilter.  # noqa: E501
        :type: CreatedAt
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2ReturnsRfbsFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2ReturnsRfbsFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
