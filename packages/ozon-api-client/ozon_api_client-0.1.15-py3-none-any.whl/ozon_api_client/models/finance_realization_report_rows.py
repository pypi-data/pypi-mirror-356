# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FinanceRealizationReportRows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'row_number': 'int',
        'product_id': 'int',
        'product_name': 'str',
        'barcode': 'str',
        'offer_id': 'str',
        'commission_percent': 'float',
        'price': 'float',
        'price_sale': 'float',
        'sale_amount': 'float',
        'sale_commission': 'float',
        'sale_discount': 'float',
        'sale_price_seller': 'float',
        'sale_qty': 'int',
        'return_sale': 'float',
        'return_amount': 'float',
        'return_commission': 'float',
        'return_discount': 'float',
        'return_price_seller': 'float',
        'return_qty': 'int'
    }

    attribute_map = {
        'row_number': 'row_number',
        'product_id': 'product_id',
        'product_name': 'product_name',
        'barcode': 'barcode',
        'offer_id': 'offer_id',
        'commission_percent': 'commission_percent',
        'price': 'price',
        'price_sale': 'price_sale',
        'sale_amount': 'sale_amount',
        'sale_commission': 'sale_commission',
        'sale_discount': 'sale_discount',
        'sale_price_seller': 'sale_price_seller',
        'sale_qty': 'sale_qty',
        'return_sale': 'return_sale',
        'return_amount': 'return_amount',
        'return_commission': 'return_commission',
        'return_discount': 'return_discount',
        'return_price_seller': 'return_price_seller',
        'return_qty': 'return_qty'
    }

    def __init__(self, row_number=None, product_id=None, product_name=None, barcode=None, offer_id=None, commission_percent=None, price=None, price_sale=None, sale_amount=None, sale_commission=None, sale_discount=None, sale_price_seller=None, sale_qty=None, return_sale=None, return_amount=None, return_commission=None, return_discount=None, return_price_seller=None, return_qty=None):  # noqa: E501
        """FinanceRealizationReportRows - a model defined in Swagger"""  # noqa: E501
        self._row_number = None
        self._product_id = None
        self._product_name = None
        self._barcode = None
        self._offer_id = None
        self._commission_percent = None
        self._price = None
        self._price_sale = None
        self._sale_amount = None
        self._sale_commission = None
        self._sale_discount = None
        self._sale_price_seller = None
        self._sale_qty = None
        self._return_sale = None
        self._return_amount = None
        self._return_commission = None
        self._return_discount = None
        self._return_price_seller = None
        self._return_qty = None
        self.discriminator = None
        if row_number is not None:
            self.row_number = row_number
        if product_id is not None:
            self.product_id = product_id
        if product_name is not None:
            self.product_name = product_name
        if barcode is not None:
            self.barcode = barcode
        if offer_id is not None:
            self.offer_id = offer_id
        if commission_percent is not None:
            self.commission_percent = commission_percent
        if price is not None:
            self.price = price
        if price_sale is not None:
            self.price_sale = price_sale
        if sale_amount is not None:
            self.sale_amount = sale_amount
        if sale_commission is not None:
            self.sale_commission = sale_commission
        if sale_discount is not None:
            self.sale_discount = sale_discount
        if sale_price_seller is not None:
            self.sale_price_seller = sale_price_seller
        if sale_qty is not None:
            self.sale_qty = sale_qty
        if return_sale is not None:
            self.return_sale = return_sale
        if return_amount is not None:
            self.return_amount = return_amount
        if return_commission is not None:
            self.return_commission = return_commission
        if return_discount is not None:
            self.return_discount = return_discount
        if return_price_seller is not None:
            self.return_price_seller = return_price_seller
        if return_qty is not None:
            self.return_qty = return_qty

    @property
    def row_number(self):
        """Gets the row_number of this FinanceRealizationReportRows.  # noqa: E501

        Номер строки в отчёте.  # noqa: E501

        :return: The row_number of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: int
        """
        return self._row_number

    @row_number.setter
    def row_number(self, row_number):
        """Sets the row_number of this FinanceRealizationReportRows.

        Номер строки в отчёте.  # noqa: E501

        :param row_number: The row_number of this FinanceRealizationReportRows.  # noqa: E501
        :type: int
        """

        self._row_number = row_number

    @property
    def product_id(self):
        """Gets the product_id of this FinanceRealizationReportRows.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this FinanceRealizationReportRows.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this FinanceRealizationReportRows.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this FinanceRealizationReportRows.  # noqa: E501

        Наименование товара.  # noqa: E501

        :return: The product_name of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this FinanceRealizationReportRows.

        Наименование товара.  # noqa: E501

        :param product_name: The product_name of this FinanceRealizationReportRows.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def barcode(self):
        """Gets the barcode of this FinanceRealizationReportRows.  # noqa: E501

        Штрихкод товара.  # noqa: E501

        :return: The barcode of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this FinanceRealizationReportRows.

        Штрихкод товара.  # noqa: E501

        :param barcode: The barcode of this FinanceRealizationReportRows.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def offer_id(self):
        """Gets the offer_id of this FinanceRealizationReportRows.  # noqa: E501

        Код товара продавца — артикул.  # noqa: E501

        :return: The offer_id of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this FinanceRealizationReportRows.

        Код товара продавца — артикул.  # noqa: E501

        :param offer_id: The offer_id of this FinanceRealizationReportRows.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def commission_percent(self):
        """Gets the commission_percent of this FinanceRealizationReportRows.  # noqa: E501

        Комиссия за продажу по категории.  # noqa: E501

        :return: The commission_percent of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: float
        """
        return self._commission_percent

    @commission_percent.setter
    def commission_percent(self, commission_percent):
        """Sets the commission_percent of this FinanceRealizationReportRows.

        Комиссия за продажу по категории.  # noqa: E501

        :param commission_percent: The commission_percent of this FinanceRealizationReportRows.  # noqa: E501
        :type: float
        """

        self._commission_percent = commission_percent

    @property
    def price(self):
        """Gets the price of this FinanceRealizationReportRows.  # noqa: E501

        Цена продавца с учётом его скидки.  # noqa: E501

        :return: The price of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this FinanceRealizationReportRows.

        Цена продавца с учётом его скидки.  # noqa: E501

        :param price: The price of this FinanceRealizationReportRows.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def price_sale(self):
        """Gets the price_sale of this FinanceRealizationReportRows.  # noqa: E501

        Цена реализации — цена, по которой покупатель приобрёл товар.   Для реализованных товаров.   # noqa: E501

        :return: The price_sale of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: float
        """
        return self._price_sale

    @price_sale.setter
    def price_sale(self, price_sale):
        """Sets the price_sale of this FinanceRealizationReportRows.

        Цена реализации — цена, по которой покупатель приобрёл товар.   Для реализованных товаров.   # noqa: E501

        :param price_sale: The price_sale of this FinanceRealizationReportRows.  # noqa: E501
        :type: float
        """

        self._price_sale = price_sale

    @property
    def sale_amount(self):
        """Gets the sale_amount of this FinanceRealizationReportRows.  # noqa: E501

        Реализовано на сумму.  Стоимость реализованного товара с учётом количества и региональных коэффициентов. Расчёт осуществляется по цене `sale_amount`.   # noqa: E501

        :return: The sale_amount of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: float
        """
        return self._sale_amount

    @sale_amount.setter
    def sale_amount(self, sale_amount):
        """Sets the sale_amount of this FinanceRealizationReportRows.

        Реализовано на сумму.  Стоимость реализованного товара с учётом количества и региональных коэффициентов. Расчёт осуществляется по цене `sale_amount`.   # noqa: E501

        :param sale_amount: The sale_amount of this FinanceRealizationReportRows.  # noqa: E501
        :type: float
        """

        self._sale_amount = sale_amount

    @property
    def sale_commission(self):
        """Gets the sale_commission of this FinanceRealizationReportRows.  # noqa: E501

        Комиссия за реализованный товар с учётом скидок и наценки.  # noqa: E501

        :return: The sale_commission of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: float
        """
        return self._sale_commission

    @sale_commission.setter
    def sale_commission(self, sale_commission):
        """Sets the sale_commission of this FinanceRealizationReportRows.

        Комиссия за реализованный товар с учётом скидок и наценки.  # noqa: E501

        :param sale_commission: The sale_commission of this FinanceRealizationReportRows.  # noqa: E501
        :type: float
        """

        self._sale_commission = sale_commission

    @property
    def sale_discount(self):
        """Gets the sale_discount of this FinanceRealizationReportRows.  # noqa: E501

        Доплата за счёт Ozon.  Сумма, которую Ozon компенсирует продавцу, если скидка Ozon больше или равна комиссии за продажу.   # noqa: E501

        :return: The sale_discount of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: float
        """
        return self._sale_discount

    @sale_discount.setter
    def sale_discount(self, sale_discount):
        """Sets the sale_discount of this FinanceRealizationReportRows.

        Доплата за счёт Ozon.  Сумма, которую Ozon компенсирует продавцу, если скидка Ozon больше или равна комиссии за продажу.   # noqa: E501

        :param sale_discount: The sale_discount of this FinanceRealizationReportRows.  # noqa: E501
        :type: float
        """

        self._sale_discount = sale_discount

    @property
    def sale_price_seller(self):
        """Gets the sale_price_seller of this FinanceRealizationReportRows.  # noqa: E501

        Итого к начислению за реализованный товар.   Сумма после вычета комиссии за продажу, применения скидок и установленных наценок.   # noqa: E501

        :return: The sale_price_seller of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: float
        """
        return self._sale_price_seller

    @sale_price_seller.setter
    def sale_price_seller(self, sale_price_seller):
        """Sets the sale_price_seller of this FinanceRealizationReportRows.

        Итого к начислению за реализованный товар.   Сумма после вычета комиссии за продажу, применения скидок и установленных наценок.   # noqa: E501

        :param sale_price_seller: The sale_price_seller of this FinanceRealizationReportRows.  # noqa: E501
        :type: float
        """

        self._sale_price_seller = sale_price_seller

    @property
    def sale_qty(self):
        """Gets the sale_qty of this FinanceRealizationReportRows.  # noqa: E501

        Количество товара, реализованного по цене `price_sale`.  # noqa: E501

        :return: The sale_qty of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: int
        """
        return self._sale_qty

    @sale_qty.setter
    def sale_qty(self, sale_qty):
        """Sets the sale_qty of this FinanceRealizationReportRows.

        Количество товара, реализованного по цене `price_sale`.  # noqa: E501

        :param sale_qty: The sale_qty of this FinanceRealizationReportRows.  # noqa: E501
        :type: int
        """

        self._sale_qty = sale_qty

    @property
    def return_sale(self):
        """Gets the return_sale of this FinanceRealizationReportRows.  # noqa: E501

        Цена реализации — цена, по которой покупатель приобрёл товар.   Для возвращённых товаров.   # noqa: E501

        :return: The return_sale of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: float
        """
        return self._return_sale

    @return_sale.setter
    def return_sale(self, return_sale):
        """Sets the return_sale of this FinanceRealizationReportRows.

        Цена реализации — цена, по которой покупатель приобрёл товар.   Для возвращённых товаров.   # noqa: E501

        :param return_sale: The return_sale of this FinanceRealizationReportRows.  # noqa: E501
        :type: float
        """

        self._return_sale = return_sale

    @property
    def return_amount(self):
        """Gets the return_amount of this FinanceRealizationReportRows.  # noqa: E501

        Возвращено на сумму.   Стоимость возвращённого товара с учётом количества и региональных коэффициентов. Расчёт осуществляется по цене `return_sale`.   # noqa: E501

        :return: The return_amount of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: float
        """
        return self._return_amount

    @return_amount.setter
    def return_amount(self, return_amount):
        """Sets the return_amount of this FinanceRealizationReportRows.

        Возвращено на сумму.   Стоимость возвращённого товара с учётом количества и региональных коэффициентов. Расчёт осуществляется по цене `return_sale`.   # noqa: E501

        :param return_amount: The return_amount of this FinanceRealizationReportRows.  # noqa: E501
        :type: float
        """

        self._return_amount = return_amount

    @property
    def return_commission(self):
        """Gets the return_commission of this FinanceRealizationReportRows.  # noqa: E501

        Комиссия с учётом количества товара, предоставленных скидок и установленных наценок. Ozon компенсирует её в случае возврата товара.  # noqa: E501

        :return: The return_commission of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: float
        """
        return self._return_commission

    @return_commission.setter
    def return_commission(self, return_commission):
        """Sets the return_commission of this FinanceRealizationReportRows.

        Комиссия с учётом количества товара, предоставленных скидок и установленных наценок. Ozon компенсирует её в случае возврата товара.  # noqa: E501

        :param return_commission: The return_commission of this FinanceRealizationReportRows.  # noqa: E501
        :type: float
        """

        self._return_commission = return_commission

    @property
    def return_discount(self):
        """Gets the return_discount of this FinanceRealizationReportRows.  # noqa: E501

        Доплата за счёт Ozon.  Сумма скидки за счёт Ozon по возвращённому товару, которую Ozon компенсирует продавцу, если скидка Ozon больше или равна комиссии за продажу.   # noqa: E501

        :return: The return_discount of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: float
        """
        return self._return_discount

    @return_discount.setter
    def return_discount(self, return_discount):
        """Sets the return_discount of this FinanceRealizationReportRows.

        Доплата за счёт Ozon.  Сумма скидки за счёт Ozon по возвращённому товару, которую Ozon компенсирует продавцу, если скидка Ozon больше или равна комиссии за продажу.   # noqa: E501

        :param return_discount: The return_discount of this FinanceRealizationReportRows.  # noqa: E501
        :type: float
        """

        self._return_discount = return_discount

    @property
    def return_price_seller(self):
        """Gets the return_price_seller of this FinanceRealizationReportRows.  # noqa: E501

        Итого возвращено.   Сумма, начисляемая продавцу за возвращённый товар после вычета комиссии за продажу, применения скидок и установленных наценок.   # noqa: E501

        :return: The return_price_seller of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: float
        """
        return self._return_price_seller

    @return_price_seller.setter
    def return_price_seller(self, return_price_seller):
        """Sets the return_price_seller of this FinanceRealizationReportRows.

        Итого возвращено.   Сумма, начисляемая продавцу за возвращённый товар после вычета комиссии за продажу, применения скидок и установленных наценок.   # noqa: E501

        :param return_price_seller: The return_price_seller of this FinanceRealizationReportRows.  # noqa: E501
        :type: float
        """

        self._return_price_seller = return_price_seller

    @property
    def return_qty(self):
        """Gets the return_qty of this FinanceRealizationReportRows.  # noqa: E501

        Количество возвращённого товара.  # noqa: E501

        :return: The return_qty of this FinanceRealizationReportRows.  # noqa: E501
        :rtype: int
        """
        return self._return_qty

    @return_qty.setter
    def return_qty(self, return_qty):
        """Sets the return_qty of this FinanceRealizationReportRows.

        Количество возвращённого товара.  # noqa: E501

        :param return_qty: The return_qty of this FinanceRealizationReportRows.  # noqa: E501
        :type: int
        """

        self._return_qty = return_qty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinanceRealizationReportRows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinanceRealizationReportRows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
