# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'files': 'list[file]',
        'name': 'str',
        'number': 'str',
        'type_code': 'str',
        'accordance_type_code': 'str',
        'issue_date': 'datetime',
        'expire_date': 'datetime'
    }

    attribute_map = {
        'files': 'files',
        'name': 'name',
        'number': 'number',
        'type_code': 'type_code',
        'accordance_type_code': 'accordance_type_code',
        'issue_date': 'issue_date',
        'expire_date': 'expire_date'
    }

    def __init__(self, files=None, name=None, number=None, type_code=None, accordance_type_code=None, issue_date=None, expire_date=None):  # noqa: E501
        """CertificateCreateBody - a model defined in Swagger"""  # noqa: E501
        self._files = None
        self._name = None
        self._number = None
        self._type_code = None
        self._accordance_type_code = None
        self._issue_date = None
        self._expire_date = None
        self.discriminator = None
        self.files = files
        self.name = name
        self.number = number
        self.type_code = type_code
        if accordance_type_code is not None:
            self.accordance_type_code = accordance_type_code
        self.issue_date = issue_date
        if expire_date is not None:
            self.expire_date = expire_date

    @property
    def files(self):
        """Gets the files of this CertificateCreateBody.  # noqa: E501

        Массив сертификатов для товара. Допустимые расширения jpg, jpeg, png, pdf.  # noqa: E501

        :return: The files of this CertificateCreateBody.  # noqa: E501
        :rtype: list[file]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this CertificateCreateBody.

        Массив сертификатов для товара. Допустимые расширения jpg, jpeg, png, pdf.  # noqa: E501

        :param files: The files of this CertificateCreateBody.  # noqa: E501
        :type: list[file]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    @property
    def name(self):
        """Gets the name of this CertificateCreateBody.  # noqa: E501

        Название сертификата. Максимум 100 символов.  # noqa: E501

        :return: The name of this CertificateCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateCreateBody.

        Название сертификата. Максимум 100 символов.  # noqa: E501

        :param name: The name of this CertificateCreateBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def number(self):
        """Gets the number of this CertificateCreateBody.  # noqa: E501

        Номер сертификата. Максимум 100 символов.  # noqa: E501

        :return: The number of this CertificateCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CertificateCreateBody.

        Номер сертификата. Максимум 100 символов.  # noqa: E501

        :param number: The number of this CertificateCreateBody.  # noqa: E501
        :type: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def type_code(self):
        """Gets the type_code of this CertificateCreateBody.  # noqa: E501

        Тип сертификата. Чтобы получить доступные типы, используйте метод [GET /v1/product/certificate/types](#operation/ProductAPI_ProductCertificateTypes).  # noqa: E501

        :return: The type_code of this CertificateCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this CertificateCreateBody.

        Тип сертификата. Чтобы получить доступные типы, используйте метод [GET /v1/product/certificate/types](#operation/ProductAPI_ProductCertificateTypes).  # noqa: E501

        :param type_code: The type_code of this CertificateCreateBody.  # noqa: E501
        :type: str
        """
        if type_code is None:
            raise ValueError("Invalid value for `type_code`, must not be `None`")  # noqa: E501
        allowed_values = ["certificate_of_conformity", "declaration", "certificate_of_registration", "registration_certificate", "refused_letter"]  # noqa: E501
        if type_code not in allowed_values:
            raise ValueError(
                "Invalid value for `type_code` ({0}), must be one of {1}"  # noqa: E501
                .format(type_code, allowed_values)
            )

        self._type_code = type_code

    @property
    def accordance_type_code(self):
        """Gets the accordance_type_code of this CertificateCreateBody.  # noqa: E501

        Тип соответствия требованиям. Чтобы получить доступные типы, используйте метод [GET /v1/product/certificate/accordance-types](#operation/ProductAPI_ProductCertificateAccordanceTypes).  # noqa: E501

        :return: The accordance_type_code of this CertificateCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._accordance_type_code

    @accordance_type_code.setter
    def accordance_type_code(self, accordance_type_code):
        """Sets the accordance_type_code of this CertificateCreateBody.

        Тип соответствия требованиям. Чтобы получить доступные типы, используйте метод [GET /v1/product/certificate/accordance-types](#operation/ProductAPI_ProductCertificateAccordanceTypes).  # noqa: E501

        :param accordance_type_code: The accordance_type_code of this CertificateCreateBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["technical_regulations_rf", "technical_regulations_cu", "gost"]  # noqa: E501
        if accordance_type_code not in allowed_values:
            raise ValueError(
                "Invalid value for `accordance_type_code` ({0}), must be one of {1}"  # noqa: E501
                .format(accordance_type_code, allowed_values)
            )

        self._accordance_type_code = accordance_type_code

    @property
    def issue_date(self):
        """Gets the issue_date of this CertificateCreateBody.  # noqa: E501

        Дата начала действия сертификата.  # noqa: E501

        :return: The issue_date of this CertificateCreateBody.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this CertificateCreateBody.

        Дата начала действия сертификата.  # noqa: E501

        :param issue_date: The issue_date of this CertificateCreateBody.  # noqa: E501
        :type: datetime
        """
        if issue_date is None:
            raise ValueError("Invalid value for `issue_date`, must not be `None`")  # noqa: E501

        self._issue_date = issue_date

    @property
    def expire_date(self):
        """Gets the expire_date of this CertificateCreateBody.  # noqa: E501

        Дата окончания действия сертификата. Может быть пустым для бессрочных сертификатов.  Формат: `2021-04-30T11:31:26Z`.   # noqa: E501

        :return: The expire_date of this CertificateCreateBody.  # noqa: E501
        :rtype: datetime
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this CertificateCreateBody.

        Дата окончания действия сертификата. Может быть пустым для бессрочных сертификатов.  Формат: `2021-04-30T11:31:26Z`.   # noqa: E501

        :param expire_date: The expire_date of this CertificateCreateBody.  # noqa: E501
        :type: datetime
        """

        self._expire_date = expire_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
