# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReviewInfoResponseVideo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'height': 'int',
        'preview_url': 'str',
        'short_video_preview_url': 'str',
        'url': 'str',
        'width': 'int'
    }

    attribute_map = {
        'height': 'height',
        'preview_url': 'preview_url',
        'short_video_preview_url': 'short_video_preview_url',
        'url': 'url',
        'width': 'width'
    }

    def __init__(self, height=None, preview_url=None, short_video_preview_url=None, url=None, width=None):  # noqa: E501
        """ReviewInfoResponseVideo - a model defined in Swagger"""  # noqa: E501
        self._height = None
        self._preview_url = None
        self._short_video_preview_url = None
        self._url = None
        self._width = None
        self.discriminator = None
        if height is not None:
            self.height = height
        if preview_url is not None:
            self.preview_url = preview_url
        if short_video_preview_url is not None:
            self.short_video_preview_url = short_video_preview_url
        if url is not None:
            self.url = url
        if width is not None:
            self.width = width

    @property
    def height(self):
        """Gets the height of this ReviewInfoResponseVideo.  # noqa: E501

        Высота.  # noqa: E501

        :return: The height of this ReviewInfoResponseVideo.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ReviewInfoResponseVideo.

        Высота.  # noqa: E501

        :param height: The height of this ReviewInfoResponseVideo.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def preview_url(self):
        """Gets the preview_url of this ReviewInfoResponseVideo.  # noqa: E501

        Ссылка на превью видео.  # noqa: E501

        :return: The preview_url of this ReviewInfoResponseVideo.  # noqa: E501
        :rtype: str
        """
        return self._preview_url

    @preview_url.setter
    def preview_url(self, preview_url):
        """Sets the preview_url of this ReviewInfoResponseVideo.

        Ссылка на превью видео.  # noqa: E501

        :param preview_url: The preview_url of this ReviewInfoResponseVideo.  # noqa: E501
        :type: str
        """

        self._preview_url = preview_url

    @property
    def short_video_preview_url(self):
        """Gets the short_video_preview_url of this ReviewInfoResponseVideo.  # noqa: E501

        Ссылка на короткое видео.  # noqa: E501

        :return: The short_video_preview_url of this ReviewInfoResponseVideo.  # noqa: E501
        :rtype: str
        """
        return self._short_video_preview_url

    @short_video_preview_url.setter
    def short_video_preview_url(self, short_video_preview_url):
        """Sets the short_video_preview_url of this ReviewInfoResponseVideo.

        Ссылка на короткое видео.  # noqa: E501

        :param short_video_preview_url: The short_video_preview_url of this ReviewInfoResponseVideo.  # noqa: E501
        :type: str
        """

        self._short_video_preview_url = short_video_preview_url

    @property
    def url(self):
        """Gets the url of this ReviewInfoResponseVideo.  # noqa: E501

        Ссылка на видео.  # noqa: E501

        :return: The url of this ReviewInfoResponseVideo.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ReviewInfoResponseVideo.

        Ссылка на видео.  # noqa: E501

        :param url: The url of this ReviewInfoResponseVideo.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def width(self):
        """Gets the width of this ReviewInfoResponseVideo.  # noqa: E501

        Ширина.  # noqa: E501

        :return: The width of this ReviewInfoResponseVideo.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ReviewInfoResponseVideo.

        Ширина.  # noqa: E501

        :param width: The width of this ReviewInfoResponseVideo.  # noqa: E501
        :type: int
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReviewInfoResponseVideo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReviewInfoResponseVideo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
