# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChatInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chat_id': 'str',
        'chat_status': 'str',
        'chat_type': 'str',
        'created_at': 'datetime',
        'first_unread_message_id': 'int',
        'last_message_id': 'int',
        'unread_count': 'int'
    }

    attribute_map = {
        'chat_id': 'chat_id',
        'chat_status': 'chat_status',
        'chat_type': 'chat_type',
        'created_at': 'created_at',
        'first_unread_message_id': 'first_unread_message_id',
        'last_message_id': 'last_message_id',
        'unread_count': 'unread_count'
    }

    def __init__(self, chat_id=None, chat_status=None, chat_type=None, created_at=None, first_unread_message_id=None, last_message_id=None, unread_count=None):  # noqa: E501
        """ChatInfo - a model defined in Swagger"""  # noqa: E501
        self._chat_id = None
        self._chat_status = None
        self._chat_type = None
        self._created_at = None
        self._first_unread_message_id = None
        self._last_message_id = None
        self._unread_count = None
        self.discriminator = None
        if chat_id is not None:
            self.chat_id = chat_id
        if chat_status is not None:
            self.chat_status = chat_status
        if chat_type is not None:
            self.chat_type = chat_type
        if created_at is not None:
            self.created_at = created_at
        if first_unread_message_id is not None:
            self.first_unread_message_id = first_unread_message_id
        if last_message_id is not None:
            self.last_message_id = last_message_id
        if unread_count is not None:
            self.unread_count = unread_count

    @property
    def chat_id(self):
        """Gets the chat_id of this ChatInfo.  # noqa: E501

        Идентификатор чата.  # noqa: E501

        :return: The chat_id of this ChatInfo.  # noqa: E501
        :rtype: str
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this ChatInfo.

        Идентификатор чата.  # noqa: E501

        :param chat_id: The chat_id of this ChatInfo.  # noqa: E501
        :type: str
        """

        self._chat_id = chat_id

    @property
    def chat_status(self):
        """Gets the chat_status of this ChatInfo.  # noqa: E501

        Статус чата: - `All` — все чаты. - `Opened` — открытые чаты. - `Closed` — закрытые чаты.   # noqa: E501

        :return: The chat_status of this ChatInfo.  # noqa: E501
        :rtype: str
        """
        return self._chat_status

    @chat_status.setter
    def chat_status(self, chat_status):
        """Sets the chat_status of this ChatInfo.

        Статус чата: - `All` — все чаты. - `Opened` — открытые чаты. - `Closed` — закрытые чаты.   # noqa: E501

        :param chat_status: The chat_status of this ChatInfo.  # noqa: E501
        :type: str
        """

        self._chat_status = chat_status

    @property
    def chat_type(self):
        """Gets the chat_type of this ChatInfo.  # noqa: E501

        Тип чата: - `Seller_Support` — чат с поддержкой. - `Buyer_Seller` — чат с покупателем.   # noqa: E501

        :return: The chat_type of this ChatInfo.  # noqa: E501
        :rtype: str
        """
        return self._chat_type

    @chat_type.setter
    def chat_type(self, chat_type):
        """Sets the chat_type of this ChatInfo.

        Тип чата: - `Seller_Support` — чат с поддержкой. - `Buyer_Seller` — чат с покупателем.   # noqa: E501

        :param chat_type: The chat_type of this ChatInfo.  # noqa: E501
        :type: str
        """

        self._chat_type = chat_type

    @property
    def created_at(self):
        """Gets the created_at of this ChatInfo.  # noqa: E501

        Дата создания чата.  # noqa: E501

        :return: The created_at of this ChatInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ChatInfo.

        Дата создания чата.  # noqa: E501

        :param created_at: The created_at of this ChatInfo.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def first_unread_message_id(self):
        """Gets the first_unread_message_id of this ChatInfo.  # noqa: E501

        Идентификатор первого непрочитанного сообщения в чате.  # noqa: E501

        :return: The first_unread_message_id of this ChatInfo.  # noqa: E501
        :rtype: int
        """
        return self._first_unread_message_id

    @first_unread_message_id.setter
    def first_unread_message_id(self, first_unread_message_id):
        """Sets the first_unread_message_id of this ChatInfo.

        Идентификатор первого непрочитанного сообщения в чате.  # noqa: E501

        :param first_unread_message_id: The first_unread_message_id of this ChatInfo.  # noqa: E501
        :type: int
        """

        self._first_unread_message_id = first_unread_message_id

    @property
    def last_message_id(self):
        """Gets the last_message_id of this ChatInfo.  # noqa: E501

        Идентификатор последнего сообщения в чате.  # noqa: E501

        :return: The last_message_id of this ChatInfo.  # noqa: E501
        :rtype: int
        """
        return self._last_message_id

    @last_message_id.setter
    def last_message_id(self, last_message_id):
        """Sets the last_message_id of this ChatInfo.

        Идентификатор последнего сообщения в чате.  # noqa: E501

        :param last_message_id: The last_message_id of this ChatInfo.  # noqa: E501
        :type: int
        """

        self._last_message_id = last_message_id

    @property
    def unread_count(self):
        """Gets the unread_count of this ChatInfo.  # noqa: E501

        Количество непрочитанных сообщений в чате.  # noqa: E501

        :return: The unread_count of this ChatInfo.  # noqa: E501
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this ChatInfo.

        Количество непрочитанных сообщений в чате.  # noqa: E501

        :param unread_count: The unread_count of this ChatInfo.  # noqa: E501
        :type: int
        """

        self._unread_count = unread_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChatInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChatInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
