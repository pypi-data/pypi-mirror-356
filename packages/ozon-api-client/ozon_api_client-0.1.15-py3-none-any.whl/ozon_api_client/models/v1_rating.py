# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1Rating(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'danger_threshold': 'float',
        'premium_threshold': 'float',
        'rating': 'str',
        'values': 'list[RatingValue]',
        'warning_threshold': 'float'
    }

    attribute_map = {
        'danger_threshold': 'danger_threshold',
        'premium_threshold': 'premium_threshold',
        'rating': 'rating',
        'values': 'values',
        'warning_threshold': 'warning_threshold'
    }

    def __init__(self, danger_threshold=None, premium_threshold=None, rating=None, values=None, warning_threshold=None):  # noqa: E501
        """V1Rating - a model defined in Swagger"""  # noqa: E501
        self._danger_threshold = None
        self._premium_threshold = None
        self._rating = None
        self._values = None
        self._warning_threshold = None
        self.discriminator = None
        if danger_threshold is not None:
            self.danger_threshold = danger_threshold
        if premium_threshold is not None:
            self.premium_threshold = premium_threshold
        if rating is not None:
            self.rating = rating
        if values is not None:
            self.values = values
        if warning_threshold is not None:
            self.warning_threshold = warning_threshold

    @property
    def danger_threshold(self):
        """Gets the danger_threshold of this V1Rating.  # noqa: E501

        Пороговое значение рейтинга, после которого продажи будут заблокированы.  # noqa: E501

        :return: The danger_threshold of this V1Rating.  # noqa: E501
        :rtype: float
        """
        return self._danger_threshold

    @danger_threshold.setter
    def danger_threshold(self, danger_threshold):
        """Sets the danger_threshold of this V1Rating.

        Пороговое значение рейтинга, после которого продажи будут заблокированы.  # noqa: E501

        :param danger_threshold: The danger_threshold of this V1Rating.  # noqa: E501
        :type: float
        """

        self._danger_threshold = danger_threshold

    @property
    def premium_threshold(self):
        """Gets the premium_threshold of this V1Rating.  # noqa: E501

        Пороговое значение рейтинга для участия в Premium-программе.  # noqa: E501

        :return: The premium_threshold of this V1Rating.  # noqa: E501
        :rtype: float
        """
        return self._premium_threshold

    @premium_threshold.setter
    def premium_threshold(self, premium_threshold):
        """Sets the premium_threshold of this V1Rating.

        Пороговое значение рейтинга для участия в Premium-программе.  # noqa: E501

        :param premium_threshold: The premium_threshold of this V1Rating.  # noqa: E501
        :type: float
        """

        self._premium_threshold = premium_threshold

    @property
    def rating(self):
        """Gets the rating of this V1Rating.  # noqa: E501

        Системное название рейтинга.  # noqa: E501

        :return: The rating of this V1Rating.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this V1Rating.

        Системное название рейтинга.  # noqa: E501

        :param rating: The rating of this V1Rating.  # noqa: E501
        :type: str
        """

        self._rating = rating

    @property
    def values(self):
        """Gets the values of this V1Rating.  # noqa: E501

        Список значений рейтинга.  # noqa: E501

        :return: The values of this V1Rating.  # noqa: E501
        :rtype: list[RatingValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this V1Rating.

        Список значений рейтинга.  # noqa: E501

        :param values: The values of this V1Rating.  # noqa: E501
        :type: list[RatingValue]
        """

        self._values = values

    @property
    def warning_threshold(self):
        """Gets the warning_threshold of this V1Rating.  # noqa: E501

        Пороговое значение рейтинга, после которого появится предупреждение о возможной блокировке.  # noqa: E501

        :return: The warning_threshold of this V1Rating.  # noqa: E501
        :rtype: float
        """
        return self._warning_threshold

    @warning_threshold.setter
    def warning_threshold(self, warning_threshold):
        """Sets the warning_threshold of this V1Rating.

        Пороговое значение рейтинга, после которого появится предупреждение о возможной блокировке.  # noqa: E501

        :param warning_threshold: The warning_threshold of this V1Rating.  # noqa: E501
        :type: float
        """

        self._warning_threshold = warning_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Rating, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Rating):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
