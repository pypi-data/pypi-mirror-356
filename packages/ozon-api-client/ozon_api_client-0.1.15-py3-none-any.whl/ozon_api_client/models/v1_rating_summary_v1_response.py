# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1RatingSummaryV1Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'groups': 'list[RatingSummaryV1ResponseGroup]',
        'localization_index': 'list[RatingSummaryV1ResponseLocalIndex]',
        'penalty_score_exceeded': 'bool',
        'premium': 'bool'
    }

    attribute_map = {
        'groups': 'groups',
        'localization_index': 'localization_index',
        'penalty_score_exceeded': 'penalty_score_exceeded',
        'premium': 'premium'
    }

    def __init__(self, groups=None, localization_index=None, penalty_score_exceeded=None, premium=None):  # noqa: E501
        """V1RatingSummaryV1Response - a model defined in Swagger"""  # noqa: E501
        self._groups = None
        self._localization_index = None
        self._penalty_score_exceeded = None
        self._premium = None
        self.discriminator = None
        if groups is not None:
            self.groups = groups
        if localization_index is not None:
            self.localization_index = localization_index
        if penalty_score_exceeded is not None:
            self.penalty_score_exceeded = penalty_score_exceeded
        if premium is not None:
            self.premium = premium

    @property
    def groups(self):
        """Gets the groups of this V1RatingSummaryV1Response.  # noqa: E501

        Список с группами рейтингов.  # noqa: E501

        :return: The groups of this V1RatingSummaryV1Response.  # noqa: E501
        :rtype: list[RatingSummaryV1ResponseGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this V1RatingSummaryV1Response.

        Список с группами рейтингов.  # noqa: E501

        :param groups: The groups of this V1RatingSummaryV1Response.  # noqa: E501
        :type: list[RatingSummaryV1ResponseGroup]
        """

        self._groups = groups

    @property
    def localization_index(self):
        """Gets the localization_index of this V1RatingSummaryV1Response.  # noqa: E501

        Данные по индексу локализации. Если за последние 14 дней у вас не было продаж, поля параметра будут пустыми.  # noqa: E501

        :return: The localization_index of this V1RatingSummaryV1Response.  # noqa: E501
        :rtype: list[RatingSummaryV1ResponseLocalIndex]
        """
        return self._localization_index

    @localization_index.setter
    def localization_index(self, localization_index):
        """Sets the localization_index of this V1RatingSummaryV1Response.

        Данные по индексу локализации. Если за последние 14 дней у вас не было продаж, поля параметра будут пустыми.  # noqa: E501

        :param localization_index: The localization_index of this V1RatingSummaryV1Response.  # noqa: E501
        :type: list[RatingSummaryV1ResponseLocalIndex]
        """

        self._localization_index = localization_index

    @property
    def penalty_score_exceeded(self):
        """Gets the penalty_score_exceeded of this V1RatingSummaryV1Response.  # noqa: E501

        Признак, что баланс штрафных баллов превышен.  # noqa: E501

        :return: The penalty_score_exceeded of this V1RatingSummaryV1Response.  # noqa: E501
        :rtype: bool
        """
        return self._penalty_score_exceeded

    @penalty_score_exceeded.setter
    def penalty_score_exceeded(self, penalty_score_exceeded):
        """Sets the penalty_score_exceeded of this V1RatingSummaryV1Response.

        Признак, что баланс штрафных баллов превышен.  # noqa: E501

        :param penalty_score_exceeded: The penalty_score_exceeded of this V1RatingSummaryV1Response.  # noqa: E501
        :type: bool
        """

        self._penalty_score_exceeded = penalty_score_exceeded

    @property
    def premium(self):
        """Gets the premium of this V1RatingSummaryV1Response.  # noqa: E501

        Признак участия в Premium-программе.  # noqa: E501

        :return: The premium of this V1RatingSummaryV1Response.  # noqa: E501
        :rtype: bool
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """Sets the premium of this V1RatingSummaryV1Response.

        Признак участия в Premium-программе.  # noqa: E501

        :param premium: The premium of this V1RatingSummaryV1Response.  # noqa: E501
        :type: bool
        """

        self._premium = premium

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1RatingSummaryV1Response, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1RatingSummaryV1Response):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
