# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1CarriageCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delivery_method_id': 'int',
        'departure_date': 'datetime'
    }

    attribute_map = {
        'delivery_method_id': 'delivery_method_id',
        'departure_date': 'departure_date'
    }

    def __init__(self, delivery_method_id=None, departure_date=None):  # noqa: E501
        """V1CarriageCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._delivery_method_id = None
        self._departure_date = None
        self.discriminator = None
        if delivery_method_id is not None:
            self.delivery_method_id = delivery_method_id
        if departure_date is not None:
            self.departure_date = departure_date

    @property
    def delivery_method_id(self):
        """Gets the delivery_method_id of this V1CarriageCreateRequest.  # noqa: E501

        Идентификатор метода доставки.  # noqa: E501

        :return: The delivery_method_id of this V1CarriageCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._delivery_method_id

    @delivery_method_id.setter
    def delivery_method_id(self, delivery_method_id):
        """Sets the delivery_method_id of this V1CarriageCreateRequest.

        Идентификатор метода доставки.  # noqa: E501

        :param delivery_method_id: The delivery_method_id of this V1CarriageCreateRequest.  # noqa: E501
        :type: int
        """

        self._delivery_method_id = delivery_method_id

    @property
    def departure_date(self):
        """Gets the departure_date of this V1CarriageCreateRequest.  # noqa: E501

        Дата отгрузки. По умолчанию — текущая дата.  # noqa: E501

        :return: The departure_date of this V1CarriageCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this V1CarriageCreateRequest.

        Дата отгрузки. По умолчанию — текущая дата.  # noqa: E501

        :param departure_date: The departure_date of this V1CarriageCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._departure_date = departure_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CarriageCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CarriageCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
