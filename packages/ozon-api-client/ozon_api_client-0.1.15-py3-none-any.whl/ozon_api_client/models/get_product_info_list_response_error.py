# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetProductInfoListResponseError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_id': 'int',
        'code': 'str',
        'field': 'str',
        'level': 'ErrorErrorLevel',
        'state': 'str',
        'texts': 'ErrorHumanTexts'
    }

    attribute_map = {
        'attribute_id': 'attribute_id',
        'code': 'code',
        'field': 'field',
        'level': 'level',
        'state': 'state',
        'texts': 'texts'
    }

    def __init__(self, attribute_id=None, code=None, field=None, level=None, state=None, texts=None):  # noqa: E501
        """GetProductInfoListResponseError - a model defined in Swagger"""  # noqa: E501
        self._attribute_id = None
        self._code = None
        self._field = None
        self._level = None
        self._state = None
        self._texts = None
        self.discriminator = None
        if attribute_id is not None:
            self.attribute_id = attribute_id
        if code is not None:
            self.code = code
        if field is not None:
            self.field = field
        if level is not None:
            self.level = level
        if state is not None:
            self.state = state
        if texts is not None:
            self.texts = texts

    @property
    def attribute_id(self):
        """Gets the attribute_id of this GetProductInfoListResponseError.  # noqa: E501

        Идентификатор характеристики.  # noqa: E501

        :return: The attribute_id of this GetProductInfoListResponseError.  # noqa: E501
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this GetProductInfoListResponseError.

        Идентификатор характеристики.  # noqa: E501

        :param attribute_id: The attribute_id of this GetProductInfoListResponseError.  # noqa: E501
        :type: int
        """

        self._attribute_id = attribute_id

    @property
    def code(self):
        """Gets the code of this GetProductInfoListResponseError.  # noqa: E501

        Код ошибки.  # noqa: E501

        :return: The code of this GetProductInfoListResponseError.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GetProductInfoListResponseError.

        Код ошибки.  # noqa: E501

        :param code: The code of this GetProductInfoListResponseError.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def field(self):
        """Gets the field of this GetProductInfoListResponseError.  # noqa: E501

        Поле, в котором найдена ошибка.  # noqa: E501

        :return: The field of this GetProductInfoListResponseError.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this GetProductInfoListResponseError.

        Поле, в котором найдена ошибка.  # noqa: E501

        :param field: The field of this GetProductInfoListResponseError.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def level(self):
        """Gets the level of this GetProductInfoListResponseError.  # noqa: E501


        :return: The level of this GetProductInfoListResponseError.  # noqa: E501
        :rtype: ErrorErrorLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this GetProductInfoListResponseError.


        :param level: The level of this GetProductInfoListResponseError.  # noqa: E501
        :type: ErrorErrorLevel
        """

        self._level = level

    @property
    def state(self):
        """Gets the state of this GetProductInfoListResponseError.  # noqa: E501

        Статус товара, в котором произошла ошибка.  # noqa: E501

        :return: The state of this GetProductInfoListResponseError.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetProductInfoListResponseError.

        Статус товара, в котором произошла ошибка.  # noqa: E501

        :param state: The state of this GetProductInfoListResponseError.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def texts(self):
        """Gets the texts of this GetProductInfoListResponseError.  # noqa: E501


        :return: The texts of this GetProductInfoListResponseError.  # noqa: E501
        :rtype: ErrorHumanTexts
        """
        return self._texts

    @texts.setter
    def texts(self, texts):
        """Sets the texts of this GetProductInfoListResponseError.


        :param texts: The texts of this GetProductInfoListResponseError.  # noqa: E501
        :type: ErrorHumanTexts
        """

        self._texts = texts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProductInfoListResponseError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProductInfoListResponseError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
