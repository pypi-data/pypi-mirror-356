# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2PostingFinancialData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'posting_services': 'PostingFinancialDataServices',
        'cluster_from': 'str',
        'cluster_to': 'str',
        'products': 'list[PostingFinancialDataProduct]'
    }

    attribute_map = {
        'posting_services': 'posting_services',
        'cluster_from': 'cluster_from',
        'cluster_to': 'cluster_to',
        'products': 'products'
    }

    def __init__(self, posting_services=None, cluster_from=None, cluster_to=None, products=None):  # noqa: E501
        """V2PostingFinancialData - a model defined in Swagger"""  # noqa: E501
        self._posting_services = None
        self._cluster_from = None
        self._cluster_to = None
        self._products = None
        self.discriminator = None
        if posting_services is not None:
            self.posting_services = posting_services
        if cluster_from is not None:
            self.cluster_from = cluster_from
        if cluster_to is not None:
            self.cluster_to = cluster_to
        if products is not None:
            self.products = products

    @property
    def posting_services(self):
        """Gets the posting_services of this V2PostingFinancialData.  # noqa: E501


        :return: The posting_services of this V2PostingFinancialData.  # noqa: E501
        :rtype: PostingFinancialDataServices
        """
        return self._posting_services

    @posting_services.setter
    def posting_services(self, posting_services):
        """Sets the posting_services of this V2PostingFinancialData.


        :param posting_services: The posting_services of this V2PostingFinancialData.  # noqa: E501
        :type: PostingFinancialDataServices
        """

        self._posting_services = posting_services

    @property
    def cluster_from(self):
        """Gets the cluster_from of this V2PostingFinancialData.  # noqa: E501

        Код региона, откуда отправляется заказ.  # noqa: E501

        :return: The cluster_from of this V2PostingFinancialData.  # noqa: E501
        :rtype: str
        """
        return self._cluster_from

    @cluster_from.setter
    def cluster_from(self, cluster_from):
        """Sets the cluster_from of this V2PostingFinancialData.

        Код региона, откуда отправляется заказ.  # noqa: E501

        :param cluster_from: The cluster_from of this V2PostingFinancialData.  # noqa: E501
        :type: str
        """

        self._cluster_from = cluster_from

    @property
    def cluster_to(self):
        """Gets the cluster_to of this V2PostingFinancialData.  # noqa: E501

        Код региона, куда доставляется заказ.  # noqa: E501

        :return: The cluster_to of this V2PostingFinancialData.  # noqa: E501
        :rtype: str
        """
        return self._cluster_to

    @cluster_to.setter
    def cluster_to(self, cluster_to):
        """Sets the cluster_to of this V2PostingFinancialData.

        Код региона, куда доставляется заказ.  # noqa: E501

        :param cluster_to: The cluster_to of this V2PostingFinancialData.  # noqa: E501
        :type: str
        """

        self._cluster_to = cluster_to

    @property
    def products(self):
        """Gets the products of this V2PostingFinancialData.  # noqa: E501

        Список товаров в заказе.  # noqa: E501

        :return: The products of this V2PostingFinancialData.  # noqa: E501
        :rtype: list[PostingFinancialDataProduct]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this V2PostingFinancialData.

        Список товаров в заказе.  # noqa: E501

        :param products: The products of this V2PostingFinancialData.  # noqa: E501
        :type: list[PostingFinancialDataProduct]
        """

        self._products = products

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2PostingFinancialData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2PostingFinancialData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
