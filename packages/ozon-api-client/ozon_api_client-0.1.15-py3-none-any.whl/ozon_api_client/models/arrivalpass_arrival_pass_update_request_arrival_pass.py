# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArrivalpassArrivalPassUpdateRequestArrivalPass(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arrival_pass_id': 'int',
        'arrival_time': 'datetime',
        'driver_name': 'str',
        'driver_phone': 'str',
        'vehicle_license_plate': 'str',
        'vehicle_model': 'str'
    }

    attribute_map = {
        'arrival_pass_id': 'arrival_pass_id',
        'arrival_time': 'arrival_time',
        'driver_name': 'driver_name',
        'driver_phone': 'driver_phone',
        'vehicle_license_plate': 'vehicle_license_plate',
        'vehicle_model': 'vehicle_model'
    }

    def __init__(self, arrival_pass_id=None, arrival_time=None, driver_name=None, driver_phone=None, vehicle_license_plate=None, vehicle_model=None):  # noqa: E501
        """ArrivalpassArrivalPassUpdateRequestArrivalPass - a model defined in Swagger"""  # noqa: E501
        self._arrival_pass_id = None
        self._arrival_time = None
        self._driver_name = None
        self._driver_phone = None
        self._vehicle_license_plate = None
        self._vehicle_model = None
        self.discriminator = None
        if arrival_pass_id is not None:
            self.arrival_pass_id = arrival_pass_id
        if arrival_time is not None:
            self.arrival_time = arrival_time
        if driver_name is not None:
            self.driver_name = driver_name
        if driver_phone is not None:
            self.driver_phone = driver_phone
        if vehicle_license_plate is not None:
            self.vehicle_license_plate = vehicle_license_plate
        if vehicle_model is not None:
            self.vehicle_model = vehicle_model

    @property
    def arrival_pass_id(self):
        """Gets the arrival_pass_id of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501

        Идентификатор пропуска.  # noqa: E501

        :return: The arrival_pass_id of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501
        :rtype: int
        """
        return self._arrival_pass_id

    @arrival_pass_id.setter
    def arrival_pass_id(self, arrival_pass_id):
        """Sets the arrival_pass_id of this ArrivalpassArrivalPassUpdateRequestArrivalPass.

        Идентификатор пропуска.  # noqa: E501

        :param arrival_pass_id: The arrival_pass_id of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501
        :type: int
        """

        self._arrival_pass_id = arrival_pass_id

    @property
    def arrival_time(self):
        """Gets the arrival_time of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501

        Время прибытия в формате UTC. В это время начнёт действовать пропуск.  Чтобы изменить время прибытия, используйте метод [/v1/carriage/pass/update](#operation/carriagePassUpdate).   # noqa: E501

        :return: The arrival_time of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501
        :rtype: datetime
        """
        return self._arrival_time

    @arrival_time.setter
    def arrival_time(self, arrival_time):
        """Sets the arrival_time of this ArrivalpassArrivalPassUpdateRequestArrivalPass.

        Время прибытия в формате UTC. В это время начнёт действовать пропуск.  Чтобы изменить время прибытия, используйте метод [/v1/carriage/pass/update](#operation/carriagePassUpdate).   # noqa: E501

        :param arrival_time: The arrival_time of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501
        :type: datetime
        """

        self._arrival_time = arrival_time

    @property
    def driver_name(self):
        """Gets the driver_name of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501

        ФИО водителя.  # noqa: E501

        :return: The driver_name of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this ArrivalpassArrivalPassUpdateRequestArrivalPass.

        ФИО водителя.  # noqa: E501

        :param driver_name: The driver_name of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501
        :type: str
        """

        self._driver_name = driver_name

    @property
    def driver_phone(self):
        """Gets the driver_phone of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501

        Номер телефона водителя.  # noqa: E501

        :return: The driver_phone of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501
        :rtype: str
        """
        return self._driver_phone

    @driver_phone.setter
    def driver_phone(self, driver_phone):
        """Sets the driver_phone of this ArrivalpassArrivalPassUpdateRequestArrivalPass.

        Номер телефона водителя.  # noqa: E501

        :param driver_phone: The driver_phone of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501
        :type: str
        """

        self._driver_phone = driver_phone

    @property
    def vehicle_license_plate(self):
        """Gets the vehicle_license_plate of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501

        Номер автомобиля.  # noqa: E501

        :return: The vehicle_license_plate of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_license_plate

    @vehicle_license_plate.setter
    def vehicle_license_plate(self, vehicle_license_plate):
        """Sets the vehicle_license_plate of this ArrivalpassArrivalPassUpdateRequestArrivalPass.

        Номер автомобиля.  # noqa: E501

        :param vehicle_license_plate: The vehicle_license_plate of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501
        :type: str
        """

        self._vehicle_license_plate = vehicle_license_plate

    @property
    def vehicle_model(self):
        """Gets the vehicle_model of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501

        Модель автомобиля.  # noqa: E501

        :return: The vehicle_model of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_model

    @vehicle_model.setter
    def vehicle_model(self, vehicle_model):
        """Sets the vehicle_model of this ArrivalpassArrivalPassUpdateRequestArrivalPass.

        Модель автомобиля.  # noqa: E501

        :param vehicle_model: The vehicle_model of this ArrivalpassArrivalPassUpdateRequestArrivalPass.  # noqa: E501
        :type: str
        """

        self._vehicle_model = vehicle_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArrivalpassArrivalPassUpdateRequestArrivalPass, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrivalpassArrivalPassUpdateRequestArrivalPass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
