# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonPriceIndexes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_index_data': 'PriceIndexesIndexDataExternal',
        'ozon_index_data': 'PriceIndexesIndexDataOzon',
        'price_index': 'str',
        'self_marketplaces_index_data': 'PriceIndexesIndexDataSelf'
    }

    attribute_map = {
        'external_index_data': 'external_index_data',
        'ozon_index_data': 'ozon_index_data',
        'price_index': 'price_index',
        'self_marketplaces_index_data': 'self_marketplaces_index_data'
    }

    def __init__(self, external_index_data=None, ozon_index_data=None, price_index=None, self_marketplaces_index_data=None):  # noqa: E501
        """CommonPriceIndexes - a model defined in Swagger"""  # noqa: E501
        self._external_index_data = None
        self._ozon_index_data = None
        self._price_index = None
        self._self_marketplaces_index_data = None
        self.discriminator = None
        if external_index_data is not None:
            self.external_index_data = external_index_data
        if ozon_index_data is not None:
            self.ozon_index_data = ozon_index_data
        if price_index is not None:
            self.price_index = price_index
        if self_marketplaces_index_data is not None:
            self.self_marketplaces_index_data = self_marketplaces_index_data

    @property
    def external_index_data(self):
        """Gets the external_index_data of this CommonPriceIndexes.  # noqa: E501


        :return: The external_index_data of this CommonPriceIndexes.  # noqa: E501
        :rtype: PriceIndexesIndexDataExternal
        """
        return self._external_index_data

    @external_index_data.setter
    def external_index_data(self, external_index_data):
        """Sets the external_index_data of this CommonPriceIndexes.


        :param external_index_data: The external_index_data of this CommonPriceIndexes.  # noqa: E501
        :type: PriceIndexesIndexDataExternal
        """

        self._external_index_data = external_index_data

    @property
    def ozon_index_data(self):
        """Gets the ozon_index_data of this CommonPriceIndexes.  # noqa: E501


        :return: The ozon_index_data of this CommonPriceIndexes.  # noqa: E501
        :rtype: PriceIndexesIndexDataOzon
        """
        return self._ozon_index_data

    @ozon_index_data.setter
    def ozon_index_data(self, ozon_index_data):
        """Sets the ozon_index_data of this CommonPriceIndexes.


        :param ozon_index_data: The ozon_index_data of this CommonPriceIndexes.  # noqa: E501
        :type: PriceIndexesIndexDataOzon
        """

        self._ozon_index_data = ozon_index_data

    @property
    def price_index(self):
        """Gets the price_index of this CommonPriceIndexes.  # noqa: E501

        Итоговый ценовой индекс товара: - `WITHOUT_INDEX` — без индекса, - `PROFIT` — выгодный,  - `AVG_PROFIT` — умеренный, - `NON_PROFIT` — невыгодный.   # noqa: E501

        :return: The price_index of this CommonPriceIndexes.  # noqa: E501
        :rtype: str
        """
        return self._price_index

    @price_index.setter
    def price_index(self, price_index):
        """Sets the price_index of this CommonPriceIndexes.

        Итоговый ценовой индекс товара: - `WITHOUT_INDEX` — без индекса, - `PROFIT` — выгодный,  - `AVG_PROFIT` — умеренный, - `NON_PROFIT` — невыгодный.   # noqa: E501

        :param price_index: The price_index of this CommonPriceIndexes.  # noqa: E501
        :type: str
        """
        allowed_values = ["WITHOUT_INDEX", "PROFIT", "AVG_PROFIT", "NON_PROFIT"]  # noqa: E501
        if price_index not in allowed_values:
            raise ValueError(
                "Invalid value for `price_index` ({0}), must be one of {1}"  # noqa: E501
                .format(price_index, allowed_values)
            )

        self._price_index = price_index

    @property
    def self_marketplaces_index_data(self):
        """Gets the self_marketplaces_index_data of this CommonPriceIndexes.  # noqa: E501


        :return: The self_marketplaces_index_data of this CommonPriceIndexes.  # noqa: E501
        :rtype: PriceIndexesIndexDataSelf
        """
        return self._self_marketplaces_index_data

    @self_marketplaces_index_data.setter
    def self_marketplaces_index_data(self, self_marketplaces_index_data):
        """Sets the self_marketplaces_index_data of this CommonPriceIndexes.


        :param self_marketplaces_index_data: The self_marketplaces_index_data of this CommonPriceIndexes.  # noqa: E501
        :type: PriceIndexesIndexDataSelf
        """

        self._self_marketplaces_index_data = self_marketplaces_index_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonPriceIndexes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonPriceIndexes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
