# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1Restriction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'posting_number': 'str',
        'max_posting_weight': 'float',
        'min_posting_weight': 'float',
        'width': 'float',
        'length': 'float',
        'height': 'float',
        'max_posting_price': 'float',
        'min_posting_price': 'float'
    }

    attribute_map = {
        'posting_number': 'posting_number',
        'max_posting_weight': 'max_posting_weight',
        'min_posting_weight': 'min_posting_weight',
        'width': 'width',
        'length': 'length',
        'height': 'height',
        'max_posting_price': 'max_posting_price',
        'min_posting_price': 'min_posting_price'
    }

    def __init__(self, posting_number=None, max_posting_weight=None, min_posting_weight=None, width=None, length=None, height=None, max_posting_price=None, min_posting_price=None):  # noqa: E501
        """V1Restriction - a model defined in Swagger"""  # noqa: E501
        self._posting_number = None
        self._max_posting_weight = None
        self._min_posting_weight = None
        self._width = None
        self._length = None
        self._height = None
        self._max_posting_price = None
        self._min_posting_price = None
        self.discriminator = None
        if posting_number is not None:
            self.posting_number = posting_number
        if max_posting_weight is not None:
            self.max_posting_weight = max_posting_weight
        if min_posting_weight is not None:
            self.min_posting_weight = min_posting_weight
        if width is not None:
            self.width = width
        if length is not None:
            self.length = length
        if height is not None:
            self.height = height
        if max_posting_price is not None:
            self.max_posting_price = max_posting_price
        if min_posting_price is not None:
            self.min_posting_price = min_posting_price

    @property
    def posting_number(self):
        """Gets the posting_number of this V1Restriction.  # noqa: E501

        Номер отправления.  # noqa: E501

        :return: The posting_number of this V1Restriction.  # noqa: E501
        :rtype: str
        """
        return self._posting_number

    @posting_number.setter
    def posting_number(self, posting_number):
        """Sets the posting_number of this V1Restriction.

        Номер отправления.  # noqa: E501

        :param posting_number: The posting_number of this V1Restriction.  # noqa: E501
        :type: str
        """

        self._posting_number = posting_number

    @property
    def max_posting_weight(self):
        """Gets the max_posting_weight of this V1Restriction.  # noqa: E501

        Ограничение по максимальному весу в граммах.  # noqa: E501

        :return: The max_posting_weight of this V1Restriction.  # noqa: E501
        :rtype: float
        """
        return self._max_posting_weight

    @max_posting_weight.setter
    def max_posting_weight(self, max_posting_weight):
        """Sets the max_posting_weight of this V1Restriction.

        Ограничение по максимальному весу в граммах.  # noqa: E501

        :param max_posting_weight: The max_posting_weight of this V1Restriction.  # noqa: E501
        :type: float
        """

        self._max_posting_weight = max_posting_weight

    @property
    def min_posting_weight(self):
        """Gets the min_posting_weight of this V1Restriction.  # noqa: E501

        Ограничение по минимальному весу в граммах.  # noqa: E501

        :return: The min_posting_weight of this V1Restriction.  # noqa: E501
        :rtype: float
        """
        return self._min_posting_weight

    @min_posting_weight.setter
    def min_posting_weight(self, min_posting_weight):
        """Sets the min_posting_weight of this V1Restriction.

        Ограничение по минимальному весу в граммах.  # noqa: E501

        :param min_posting_weight: The min_posting_weight of this V1Restriction.  # noqa: E501
        :type: float
        """

        self._min_posting_weight = min_posting_weight

    @property
    def width(self):
        """Gets the width of this V1Restriction.  # noqa: E501

        Ограничение по ширине в сантиметрах.  # noqa: E501

        :return: The width of this V1Restriction.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this V1Restriction.

        Ограничение по ширине в сантиметрах.  # noqa: E501

        :param width: The width of this V1Restriction.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def length(self):
        """Gets the length of this V1Restriction.  # noqa: E501

        Ограничение по длине в сантиметрах.  # noqa: E501

        :return: The length of this V1Restriction.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this V1Restriction.

        Ограничение по длине в сантиметрах.  # noqa: E501

        :param length: The length of this V1Restriction.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def height(self):
        """Gets the height of this V1Restriction.  # noqa: E501

        Ограничение по высоте в сантиметрах.  # noqa: E501

        :return: The height of this V1Restriction.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this V1Restriction.

        Ограничение по высоте в сантиметрах.  # noqa: E501

        :param height: The height of this V1Restriction.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def max_posting_price(self):
        """Gets the max_posting_price of this V1Restriction.  # noqa: E501

        Ограничение по максимальной стоимости отправления в рублях.  # noqa: E501

        :return: The max_posting_price of this V1Restriction.  # noqa: E501
        :rtype: float
        """
        return self._max_posting_price

    @max_posting_price.setter
    def max_posting_price(self, max_posting_price):
        """Sets the max_posting_price of this V1Restriction.

        Ограничение по максимальной стоимости отправления в рублях.  # noqa: E501

        :param max_posting_price: The max_posting_price of this V1Restriction.  # noqa: E501
        :type: float
        """

        self._max_posting_price = max_posting_price

    @property
    def min_posting_price(self):
        """Gets the min_posting_price of this V1Restriction.  # noqa: E501

        Ограничение по минимальной стоимости отправления в рублях.  # noqa: E501

        :return: The min_posting_price of this V1Restriction.  # noqa: E501
        :rtype: float
        """
        return self._min_posting_price

    @min_posting_price.setter
    def min_posting_price(self, min_posting_price):
        """Sets the min_posting_price of this V1Restriction.

        Ограничение по минимальной стоимости отправления в рублях.  # noqa: E501

        :param min_posting_price: The min_posting_price of this V1Restriction.  # noqa: E501
        :type: float
        """

        self._min_posting_price = min_posting_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Restriction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Restriction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
