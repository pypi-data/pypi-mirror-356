# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DetailsRfbsDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'float',
        'transfer_delivery': 'float',
        'transfer_delivery_return': 'float',
        'compensation_delivery_return': 'float',
        'partial_compensation': 'float',
        'partial_compensation_return': 'float'
    }

    attribute_map = {
        'total': 'total',
        'transfer_delivery': 'transfer_delivery',
        'transfer_delivery_return': 'transfer_delivery_return',
        'compensation_delivery_return': 'compensation_delivery_return',
        'partial_compensation': 'partial_compensation',
        'partial_compensation_return': 'partial_compensation_return'
    }

    def __init__(self, total=None, transfer_delivery=None, transfer_delivery_return=None, compensation_delivery_return=None, partial_compensation=None, partial_compensation_return=None):  # noqa: E501
        """DetailsRfbsDetails - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._transfer_delivery = None
        self._transfer_delivery_return = None
        self._compensation_delivery_return = None
        self._partial_compensation = None
        self._partial_compensation_return = None
        self.discriminator = None
        if total is not None:
            self.total = total
        if transfer_delivery is not None:
            self.transfer_delivery = transfer_delivery
        if transfer_delivery_return is not None:
            self.transfer_delivery_return = transfer_delivery_return
        if compensation_delivery_return is not None:
            self.compensation_delivery_return = compensation_delivery_return
        if partial_compensation is not None:
            self.partial_compensation = partial_compensation
        if partial_compensation_return is not None:
            self.partial_compensation_return = partial_compensation_return

    @property
    def total(self):
        """Gets the total of this DetailsRfbsDetails.  # noqa: E501

        Общая сумма.  # noqa: E501

        :return: The total of this DetailsRfbsDetails.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DetailsRfbsDetails.

        Общая сумма.  # noqa: E501

        :param total: The total of this DetailsRfbsDetails.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def transfer_delivery(self):
        """Gets the transfer_delivery of this DetailsRfbsDetails.  # noqa: E501

        Перечисления от покупателей.  # noqa: E501

        :return: The transfer_delivery of this DetailsRfbsDetails.  # noqa: E501
        :rtype: float
        """
        return self._transfer_delivery

    @transfer_delivery.setter
    def transfer_delivery(self, transfer_delivery):
        """Sets the transfer_delivery of this DetailsRfbsDetails.

        Перечисления от покупателей.  # noqa: E501

        :param transfer_delivery: The transfer_delivery of this DetailsRfbsDetails.  # noqa: E501
        :type: float
        """

        self._transfer_delivery = transfer_delivery

    @property
    def transfer_delivery_return(self):
        """Gets the transfer_delivery_return of this DetailsRfbsDetails.  # noqa: E501

        Возврат перечислений покупателям.  # noqa: E501

        :return: The transfer_delivery_return of this DetailsRfbsDetails.  # noqa: E501
        :rtype: float
        """
        return self._transfer_delivery_return

    @transfer_delivery_return.setter
    def transfer_delivery_return(self, transfer_delivery_return):
        """Sets the transfer_delivery_return of this DetailsRfbsDetails.

        Возврат перечислений покупателям.  # noqa: E501

        :param transfer_delivery_return: The transfer_delivery_return of this DetailsRfbsDetails.  # noqa: E501
        :type: float
        """

        self._transfer_delivery_return = transfer_delivery_return

    @property
    def compensation_delivery_return(self):
        """Gets the compensation_delivery_return of this DetailsRfbsDetails.  # noqa: E501

        Компенсация перечислений за доставку.  # noqa: E501

        :return: The compensation_delivery_return of this DetailsRfbsDetails.  # noqa: E501
        :rtype: float
        """
        return self._compensation_delivery_return

    @compensation_delivery_return.setter
    def compensation_delivery_return(self, compensation_delivery_return):
        """Sets the compensation_delivery_return of this DetailsRfbsDetails.

        Компенсация перечислений за доставку.  # noqa: E501

        :param compensation_delivery_return: The compensation_delivery_return of this DetailsRfbsDetails.  # noqa: E501
        :type: float
        """

        self._compensation_delivery_return = compensation_delivery_return

    @property
    def partial_compensation(self):
        """Gets the partial_compensation of this DetailsRfbsDetails.  # noqa: E501

        Перечисления частичных компенсаций покупателям.  # noqa: E501

        :return: The partial_compensation of this DetailsRfbsDetails.  # noqa: E501
        :rtype: float
        """
        return self._partial_compensation

    @partial_compensation.setter
    def partial_compensation(self, partial_compensation):
        """Sets the partial_compensation of this DetailsRfbsDetails.

        Перечисления частичных компенсаций покупателям.  # noqa: E501

        :param partial_compensation: The partial_compensation of this DetailsRfbsDetails.  # noqa: E501
        :type: float
        """

        self._partial_compensation = partial_compensation

    @property
    def partial_compensation_return(self):
        """Gets the partial_compensation_return of this DetailsRfbsDetails.  # noqa: E501

        Возврат частичных компенсаций.  # noqa: E501

        :return: The partial_compensation_return of this DetailsRfbsDetails.  # noqa: E501
        :rtype: float
        """
        return self._partial_compensation_return

    @partial_compensation_return.setter
    def partial_compensation_return(self, partial_compensation_return):
        """Sets the partial_compensation_return of this DetailsRfbsDetails.

        Возврат частичных компенсаций.  # noqa: E501

        :param partial_compensation_return: The partial_compensation_return of this DetailsRfbsDetails.  # noqa: E501
        :type: float
        """

        self._partial_compensation_return = partial_compensation_return

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetailsRfbsDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailsRfbsDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
