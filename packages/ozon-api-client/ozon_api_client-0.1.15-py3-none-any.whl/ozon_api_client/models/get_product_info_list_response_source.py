# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetProductInfoListResponseSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'quant_code': 'str',
        'shipment_type': 'SourceShipmentType',
        'sku': 'int',
        'source': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'quant_code': 'quant_code',
        'shipment_type': 'shipment_type',
        'sku': 'sku',
        'source': 'source'
    }

    def __init__(self, created_at=None, quant_code=None, shipment_type=None, sku=None, source=None):  # noqa: E501
        """GetProductInfoListResponseSource - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._quant_code = None
        self._shipment_type = None
        self._sku = None
        self._source = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if quant_code is not None:
            self.quant_code = quant_code
        if shipment_type is not None:
            self.shipment_type = shipment_type
        if sku is not None:
            self.sku = sku
        if source is not None:
            self.source = source

    @property
    def created_at(self):
        """Gets the created_at of this GetProductInfoListResponseSource.  # noqa: E501

        Дата создания товара.  # noqa: E501

        :return: The created_at of this GetProductInfoListResponseSource.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetProductInfoListResponseSource.

        Дата создания товара.  # noqa: E501

        :param created_at: The created_at of this GetProductInfoListResponseSource.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def quant_code(self):
        """Gets the quant_code of this GetProductInfoListResponseSource.  # noqa: E501

        Список квантов с товарами.  # noqa: E501

        :return: The quant_code of this GetProductInfoListResponseSource.  # noqa: E501
        :rtype: str
        """
        return self._quant_code

    @quant_code.setter
    def quant_code(self, quant_code):
        """Sets the quant_code of this GetProductInfoListResponseSource.

        Список квантов с товарами.  # noqa: E501

        :param quant_code: The quant_code of this GetProductInfoListResponseSource.  # noqa: E501
        :type: str
        """

        self._quant_code = quant_code

    @property
    def shipment_type(self):
        """Gets the shipment_type of this GetProductInfoListResponseSource.  # noqa: E501


        :return: The shipment_type of this GetProductInfoListResponseSource.  # noqa: E501
        :rtype: SourceShipmentType
        """
        return self._shipment_type

    @shipment_type.setter
    def shipment_type(self, shipment_type):
        """Sets the shipment_type of this GetProductInfoListResponseSource.


        :param shipment_type: The shipment_type of this GetProductInfoListResponseSource.  # noqa: E501
        :type: SourceShipmentType
        """

        self._shipment_type = shipment_type

    @property
    def sku(self):
        """Gets the sku of this GetProductInfoListResponseSource.  # noqa: E501

        Идентификатор товара на Ozon — SKU.  # noqa: E501

        :return: The sku of this GetProductInfoListResponseSource.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this GetProductInfoListResponseSource.

        Идентификатор товара на Ozon — SKU.  # noqa: E501

        :param sku: The sku of this GetProductInfoListResponseSource.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def source(self):
        """Gets the source of this GetProductInfoListResponseSource.  # noqa: E501

        Схема продажи.  # noqa: E501

        :return: The source of this GetProductInfoListResponseSource.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this GetProductInfoListResponseSource.

        Схема продажи.  # noqa: E501

        :param source: The source of this GetProductInfoListResponseSource.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProductInfoListResponseSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProductInfoListResponseSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
