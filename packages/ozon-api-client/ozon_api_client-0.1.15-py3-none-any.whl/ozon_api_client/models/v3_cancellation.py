# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3Cancellation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affect_cancellation_rating': 'bool',
        'cancel_reason': 'str',
        'cancel_reason_id': 'int',
        'cancellation_initiator': 'str',
        'cancellation_type': 'str',
        'cancelled_after_ship': 'bool'
    }

    attribute_map = {
        'affect_cancellation_rating': 'affect_cancellation_rating',
        'cancel_reason': 'cancel_reason',
        'cancel_reason_id': 'cancel_reason_id',
        'cancellation_initiator': 'cancellation_initiator',
        'cancellation_type': 'cancellation_type',
        'cancelled_after_ship': 'cancelled_after_ship'
    }

    def __init__(self, affect_cancellation_rating=None, cancel_reason=None, cancel_reason_id=None, cancellation_initiator=None, cancellation_type=None, cancelled_after_ship=None):  # noqa: E501
        """V3Cancellation - a model defined in Swagger"""  # noqa: E501
        self._affect_cancellation_rating = None
        self._cancel_reason = None
        self._cancel_reason_id = None
        self._cancellation_initiator = None
        self._cancellation_type = None
        self._cancelled_after_ship = None
        self.discriminator = None
        if affect_cancellation_rating is not None:
            self.affect_cancellation_rating = affect_cancellation_rating
        if cancel_reason is not None:
            self.cancel_reason = cancel_reason
        if cancel_reason_id is not None:
            self.cancel_reason_id = cancel_reason_id
        if cancellation_initiator is not None:
            self.cancellation_initiator = cancellation_initiator
        if cancellation_type is not None:
            self.cancellation_type = cancellation_type
        if cancelled_after_ship is not None:
            self.cancelled_after_ship = cancelled_after_ship

    @property
    def affect_cancellation_rating(self):
        """Gets the affect_cancellation_rating of this V3Cancellation.  # noqa: E501

        Если отмена влияет на рейтинг продавца — `true`.  # noqa: E501

        :return: The affect_cancellation_rating of this V3Cancellation.  # noqa: E501
        :rtype: bool
        """
        return self._affect_cancellation_rating

    @affect_cancellation_rating.setter
    def affect_cancellation_rating(self, affect_cancellation_rating):
        """Sets the affect_cancellation_rating of this V3Cancellation.

        Если отмена влияет на рейтинг продавца — `true`.  # noqa: E501

        :param affect_cancellation_rating: The affect_cancellation_rating of this V3Cancellation.  # noqa: E501
        :type: bool
        """

        self._affect_cancellation_rating = affect_cancellation_rating

    @property
    def cancel_reason(self):
        """Gets the cancel_reason of this V3Cancellation.  # noqa: E501

        Причина отмены.  # noqa: E501

        :return: The cancel_reason of this V3Cancellation.  # noqa: E501
        :rtype: str
        """
        return self._cancel_reason

    @cancel_reason.setter
    def cancel_reason(self, cancel_reason):
        """Sets the cancel_reason of this V3Cancellation.

        Причина отмены.  # noqa: E501

        :param cancel_reason: The cancel_reason of this V3Cancellation.  # noqa: E501
        :type: str
        """

        self._cancel_reason = cancel_reason

    @property
    def cancel_reason_id(self):
        """Gets the cancel_reason_id of this V3Cancellation.  # noqa: E501

        Идентификатор причины отмены отправления.  # noqa: E501

        :return: The cancel_reason_id of this V3Cancellation.  # noqa: E501
        :rtype: int
        """
        return self._cancel_reason_id

    @cancel_reason_id.setter
    def cancel_reason_id(self, cancel_reason_id):
        """Sets the cancel_reason_id of this V3Cancellation.

        Идентификатор причины отмены отправления.  # noqa: E501

        :param cancel_reason_id: The cancel_reason_id of this V3Cancellation.  # noqa: E501
        :type: int
        """

        self._cancel_reason_id = cancel_reason_id

    @property
    def cancellation_initiator(self):
        """Gets the cancellation_initiator of this V3Cancellation.  # noqa: E501

        Инициатор отмены: - `Продавец`,  - `Клиент` или `покупатель`, - `Ozon`,   - `Система`,  - `Служба доставки`.   # noqa: E501

        :return: The cancellation_initiator of this V3Cancellation.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_initiator

    @cancellation_initiator.setter
    def cancellation_initiator(self, cancellation_initiator):
        """Sets the cancellation_initiator of this V3Cancellation.

        Инициатор отмены: - `Продавец`,  - `Клиент` или `покупатель`, - `Ozon`,   - `Система`,  - `Служба доставки`.   # noqa: E501

        :param cancellation_initiator: The cancellation_initiator of this V3Cancellation.  # noqa: E501
        :type: str
        """

        self._cancellation_initiator = cancellation_initiator

    @property
    def cancellation_type(self):
        """Gets the cancellation_type of this V3Cancellation.  # noqa: E501

        Тип отмены отправления: - `seller` — отменено продавцом; - `client` или `customer` — отменено покупателем; - `ozon` — отменено Ozon; - `system`— отменено системой; - `delivery` — отменено службой доставки.   # noqa: E501

        :return: The cancellation_type of this V3Cancellation.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_type

    @cancellation_type.setter
    def cancellation_type(self, cancellation_type):
        """Sets the cancellation_type of this V3Cancellation.

        Тип отмены отправления: - `seller` — отменено продавцом; - `client` или `customer` — отменено покупателем; - `ozon` — отменено Ozon; - `system`— отменено системой; - `delivery` — отменено службой доставки.   # noqa: E501

        :param cancellation_type: The cancellation_type of this V3Cancellation.  # noqa: E501
        :type: str
        """

        self._cancellation_type = cancellation_type

    @property
    def cancelled_after_ship(self):
        """Gets the cancelled_after_ship of this V3Cancellation.  # noqa: E501

        Если отмена произошла после сборки отправления — `true`.  # noqa: E501

        :return: The cancelled_after_ship of this V3Cancellation.  # noqa: E501
        :rtype: bool
        """
        return self._cancelled_after_ship

    @cancelled_after_ship.setter
    def cancelled_after_ship(self, cancelled_after_ship):
        """Sets the cancelled_after_ship of this V3Cancellation.

        Если отмена произошла после сборки отправления — `true`.  # noqa: E501

        :param cancelled_after_ship: The cancelled_after_ship of this V3Cancellation.  # noqa: E501
        :type: bool
        """

        self._cancelled_after_ship = cancelled_after_ship

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3Cancellation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3Cancellation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
