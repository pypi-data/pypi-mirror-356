# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommentListResponseComment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_official': 'bool',
        'is_owner': 'bool',
        'parent_comment_id': 'str',
        'published_at': 'datetime',
        'text': 'str'
    }

    attribute_map = {
        'id': 'id',
        'is_official': 'is_official',
        'is_owner': 'is_owner',
        'parent_comment_id': 'parent_comment_id',
        'published_at': 'published_at',
        'text': 'text'
    }

    def __init__(self, id=None, is_official=None, is_owner=None, parent_comment_id=None, published_at=None, text=None):  # noqa: E501
        """CommentListResponseComment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_official = None
        self._is_owner = None
        self._parent_comment_id = None
        self._published_at = None
        self._text = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if is_official is not None:
            self.is_official = is_official
        if is_owner is not None:
            self.is_owner = is_owner
        if parent_comment_id is not None:
            self.parent_comment_id = parent_comment_id
        if published_at is not None:
            self.published_at = published_at
        if text is not None:
            self.text = text

    @property
    def id(self):
        """Gets the id of this CommentListResponseComment.  # noqa: E501

        Идентификатор комментария.  # noqa: E501

        :return: The id of this CommentListResponseComment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommentListResponseComment.

        Идентификатор комментария.  # noqa: E501

        :param id: The id of this CommentListResponseComment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_official(self):
        """Gets the is_official of this CommentListResponseComment.  # noqa: E501

        `true`, если комментарий оставило официальное лицо, `false` — покупатель.   # noqa: E501

        :return: The is_official of this CommentListResponseComment.  # noqa: E501
        :rtype: bool
        """
        return self._is_official

    @is_official.setter
    def is_official(self, is_official):
        """Sets the is_official of this CommentListResponseComment.

        `true`, если комментарий оставило официальное лицо, `false` — покупатель.   # noqa: E501

        :param is_official: The is_official of this CommentListResponseComment.  # noqa: E501
        :type: bool
        """

        self._is_official = is_official

    @property
    def is_owner(self):
        """Gets the is_owner of this CommentListResponseComment.  # noqa: E501

        `true`, если комментарий оставил продавец, `false` — покупатель.   # noqa: E501

        :return: The is_owner of this CommentListResponseComment.  # noqa: E501
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this CommentListResponseComment.

        `true`, если комментарий оставил продавец, `false` — покупатель.   # noqa: E501

        :param is_owner: The is_owner of this CommentListResponseComment.  # noqa: E501
        :type: bool
        """

        self._is_owner = is_owner

    @property
    def parent_comment_id(self):
        """Gets the parent_comment_id of this CommentListResponseComment.  # noqa: E501

        Идентификатор родительского комментария, на который нужно ответить.  # noqa: E501

        :return: The parent_comment_id of this CommentListResponseComment.  # noqa: E501
        :rtype: str
        """
        return self._parent_comment_id

    @parent_comment_id.setter
    def parent_comment_id(self, parent_comment_id):
        """Sets the parent_comment_id of this CommentListResponseComment.

        Идентификатор родительского комментария, на который нужно ответить.  # noqa: E501

        :param parent_comment_id: The parent_comment_id of this CommentListResponseComment.  # noqa: E501
        :type: str
        """

        self._parent_comment_id = parent_comment_id

    @property
    def published_at(self):
        """Gets the published_at of this CommentListResponseComment.  # noqa: E501

        Дата публикации комментария.  # noqa: E501

        :return: The published_at of this CommentListResponseComment.  # noqa: E501
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this CommentListResponseComment.

        Дата публикации комментария.  # noqa: E501

        :param published_at: The published_at of this CommentListResponseComment.  # noqa: E501
        :type: datetime
        """

        self._published_at = published_at

    @property
    def text(self):
        """Gets the text of this CommentListResponseComment.  # noqa: E501

        Текст комментария.  # noqa: E501

        :return: The text of this CommentListResponseComment.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CommentListResponseComment.

        Текст комментария.  # noqa: E501

        :param text: The text of this CommentListResponseComment.  # noqa: E501
        :type: str
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommentListResponseComment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommentListResponseComment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
