# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetReturnsListResponseProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku': 'int',
        'offer_id': 'str',
        'name': 'str',
        'price': 'SellerReturnsv1MoneyProduct',
        'price_without_commission': 'SellerReturnsv1MoneyWithoutCommission',
        'commission_percent': 'float',
        'commission': 'SellerReturnsv1MoneyCommission',
        'quantity': 'int'
    }

    attribute_map = {
        'sku': 'sku',
        'offer_id': 'offer_id',
        'name': 'name',
        'price': 'price',
        'price_without_commission': 'price_without_commission',
        'commission_percent': 'commission_percent',
        'commission': 'commission',
        'quantity': 'quantity'
    }

    def __init__(self, sku=None, offer_id=None, name=None, price=None, price_without_commission=None, commission_percent=None, commission=None, quantity=None):  # noqa: E501
        """GetReturnsListResponseProduct - a model defined in Swagger"""  # noqa: E501
        self._sku = None
        self._offer_id = None
        self._name = None
        self._price = None
        self._price_without_commission = None
        self._commission_percent = None
        self._commission = None
        self._quantity = None
        self.discriminator = None
        if sku is not None:
            self.sku = sku
        if offer_id is not None:
            self.offer_id = offer_id
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if price_without_commission is not None:
            self.price_without_commission = price_without_commission
        if commission_percent is not None:
            self.commission_percent = commission_percent
        if commission is not None:
            self.commission = commission
        if quantity is not None:
            self.quantity = quantity

    @property
    def sku(self):
        """Gets the sku of this GetReturnsListResponseProduct.  # noqa: E501

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :return: The sku of this GetReturnsListResponseProduct.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this GetReturnsListResponseProduct.

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :param sku: The sku of this GetReturnsListResponseProduct.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def offer_id(self):
        """Gets the offer_id of this GetReturnsListResponseProduct.  # noqa: E501

        Артикул товара.  # noqa: E501

        :return: The offer_id of this GetReturnsListResponseProduct.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this GetReturnsListResponseProduct.

        Артикул товара.  # noqa: E501

        :param offer_id: The offer_id of this GetReturnsListResponseProduct.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def name(self):
        """Gets the name of this GetReturnsListResponseProduct.  # noqa: E501

        Название товара.  # noqa: E501

        :return: The name of this GetReturnsListResponseProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetReturnsListResponseProduct.

        Название товара.  # noqa: E501

        :param name: The name of this GetReturnsListResponseProduct.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this GetReturnsListResponseProduct.  # noqa: E501


        :return: The price of this GetReturnsListResponseProduct.  # noqa: E501
        :rtype: SellerReturnsv1MoneyProduct
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetReturnsListResponseProduct.


        :param price: The price of this GetReturnsListResponseProduct.  # noqa: E501
        :type: SellerReturnsv1MoneyProduct
        """

        self._price = price

    @property
    def price_without_commission(self):
        """Gets the price_without_commission of this GetReturnsListResponseProduct.  # noqa: E501


        :return: The price_without_commission of this GetReturnsListResponseProduct.  # noqa: E501
        :rtype: SellerReturnsv1MoneyWithoutCommission
        """
        return self._price_without_commission

    @price_without_commission.setter
    def price_without_commission(self, price_without_commission):
        """Sets the price_without_commission of this GetReturnsListResponseProduct.


        :param price_without_commission: The price_without_commission of this GetReturnsListResponseProduct.  # noqa: E501
        :type: SellerReturnsv1MoneyWithoutCommission
        """

        self._price_without_commission = price_without_commission

    @property
    def commission_percent(self):
        """Gets the commission_percent of this GetReturnsListResponseProduct.  # noqa: E501

        Процент комиссии.  # noqa: E501

        :return: The commission_percent of this GetReturnsListResponseProduct.  # noqa: E501
        :rtype: float
        """
        return self._commission_percent

    @commission_percent.setter
    def commission_percent(self, commission_percent):
        """Sets the commission_percent of this GetReturnsListResponseProduct.

        Процент комиссии.  # noqa: E501

        :param commission_percent: The commission_percent of this GetReturnsListResponseProduct.  # noqa: E501
        :type: float
        """

        self._commission_percent = commission_percent

    @property
    def commission(self):
        """Gets the commission of this GetReturnsListResponseProduct.  # noqa: E501


        :return: The commission of this GetReturnsListResponseProduct.  # noqa: E501
        :rtype: SellerReturnsv1MoneyCommission
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this GetReturnsListResponseProduct.


        :param commission: The commission of this GetReturnsListResponseProduct.  # noqa: E501
        :type: SellerReturnsv1MoneyCommission
        """

        self._commission = commission

    @property
    def quantity(self):
        """Gets the quantity of this GetReturnsListResponseProduct.  # noqa: E501

        Количество товара.  # noqa: E501

        :return: The quantity of this GetReturnsListResponseProduct.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetReturnsListResponseProduct.

        Количество товара.  # noqa: E501

        :param quantity: The quantity of this GetReturnsListResponseProduct.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetReturnsListResponseProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetReturnsListResponseProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
