# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductV1QuantInfoResponseResultItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offer_id': 'str',
        'product_id': 'int',
        'quant_info': 'ProductV1QuantInfoResponseResultItemsQuantInfo'
    }

    attribute_map = {
        'offer_id': 'offer_id',
        'product_id': 'product_id',
        'quant_info': 'quant_info'
    }

    def __init__(self, offer_id=None, product_id=None, quant_info=None):  # noqa: E501
        """ProductV1QuantInfoResponseResultItems - a model defined in Swagger"""  # noqa: E501
        self._offer_id = None
        self._product_id = None
        self._quant_info = None
        self.discriminator = None
        if offer_id is not None:
            self.offer_id = offer_id
        if product_id is not None:
            self.product_id = product_id
        if quant_info is not None:
            self.quant_info = quant_info

    @property
    def offer_id(self):
        """Gets the offer_id of this ProductV1QuantInfoResponseResultItems.  # noqa: E501

        Артикул продавца.  # noqa: E501

        :return: The offer_id of this ProductV1QuantInfoResponseResultItems.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this ProductV1QuantInfoResponseResultItems.

        Артикул продавца.  # noqa: E501

        :param offer_id: The offer_id of this ProductV1QuantInfoResponseResultItems.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def product_id(self):
        """Gets the product_id of this ProductV1QuantInfoResponseResultItems.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this ProductV1QuantInfoResponseResultItems.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductV1QuantInfoResponseResultItems.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this ProductV1QuantInfoResponseResultItems.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def quant_info(self):
        """Gets the quant_info of this ProductV1QuantInfoResponseResultItems.  # noqa: E501


        :return: The quant_info of this ProductV1QuantInfoResponseResultItems.  # noqa: E501
        :rtype: ProductV1QuantInfoResponseResultItemsQuantInfo
        """
        return self._quant_info

    @quant_info.setter
    def quant_info(self, quant_info):
        """Sets the quant_info of this ProductV1QuantInfoResponseResultItems.


        :param quant_info: The quant_info of this ProductV1QuantInfoResponseResultItems.  # noqa: E501
        :type: ProductV1QuantInfoResponseResultItemsQuantInfo
        """

        self._quant_info = quant_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductV1QuantInfoResponseResultItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductV1QuantInfoResponseResultItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
