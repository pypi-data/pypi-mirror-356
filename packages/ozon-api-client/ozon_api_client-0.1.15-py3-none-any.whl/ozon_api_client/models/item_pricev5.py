# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ItemPricev5(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_action_enabled': 'bool',
        'currency_code': 'str',
        'marketing_price': 'float',
        'marketing_seller_price': 'float',
        'min_price': 'float',
        'old_price': 'float',
        'price': 'float',
        'retail_price': 'float',
        'vat': 'float'
    }

    attribute_map = {
        'auto_action_enabled': 'auto_action_enabled',
        'currency_code': 'currency_code',
        'marketing_price': 'marketing_price',
        'marketing_seller_price': 'marketing_seller_price',
        'min_price': 'min_price',
        'old_price': 'old_price',
        'price': 'price',
        'retail_price': 'retail_price',
        'vat': 'vat'
    }

    def __init__(self, auto_action_enabled=None, currency_code=None, marketing_price=None, marketing_seller_price=None, min_price=None, old_price=None, price=None, retail_price=None, vat=None):  # noqa: E501
        """ItemPricev5 - a model defined in Swagger"""  # noqa: E501
        self._auto_action_enabled = None
        self._currency_code = None
        self._marketing_price = None
        self._marketing_seller_price = None
        self._min_price = None
        self._old_price = None
        self._price = None
        self._retail_price = None
        self._vat = None
        self.discriminator = None
        if auto_action_enabled is not None:
            self.auto_action_enabled = auto_action_enabled
        if currency_code is not None:
            self.currency_code = currency_code
        if marketing_price is not None:
            self.marketing_price = marketing_price
        if marketing_seller_price is not None:
            self.marketing_seller_price = marketing_seller_price
        if min_price is not None:
            self.min_price = min_price
        if old_price is not None:
            self.old_price = old_price
        if price is not None:
            self.price = price
        if retail_price is not None:
            self.retail_price = retail_price
        if vat is not None:
            self.vat = vat

    @property
    def auto_action_enabled(self):
        """Gets the auto_action_enabled of this ItemPricev5.  # noqa: E501

        `true`, если автоприменение акций у товара включено.   # noqa: E501

        :return: The auto_action_enabled of this ItemPricev5.  # noqa: E501
        :rtype: bool
        """
        return self._auto_action_enabled

    @auto_action_enabled.setter
    def auto_action_enabled(self, auto_action_enabled):
        """Sets the auto_action_enabled of this ItemPricev5.

        `true`, если автоприменение акций у товара включено.   # noqa: E501

        :param auto_action_enabled: The auto_action_enabled of this ItemPricev5.  # noqa: E501
        :type: bool
        """

        self._auto_action_enabled = auto_action_enabled

    @property
    def currency_code(self):
        """Gets the currency_code of this ItemPricev5.  # noqa: E501

        Валюта ваших цен. Совпадает с валютой, которая установлена в настройках личного кабинета.  Возможные значения:    - `RUB` — российский рубль,   - `BYN` — белорусский рубль,   - `KZT` — тенге,   - `EUR` — евро,   - `USD` — доллар США,   - `CNY` — юань.   # noqa: E501

        :return: The currency_code of this ItemPricev5.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ItemPricev5.

        Валюта ваших цен. Совпадает с валютой, которая установлена в настройках личного кабинета.  Возможные значения:    - `RUB` — российский рубль,   - `BYN` — белорусский рубль,   - `KZT` — тенге,   - `EUR` — евро,   - `USD` — доллар США,   - `CNY` — юань.   # noqa: E501

        :param currency_code: The currency_code of this ItemPricev5.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def marketing_price(self):
        """Gets the marketing_price of this ItemPricev5.  # noqa: E501

        Цена на товар с учётом всех акций, которая будет указана на витрине Ozon.  # noqa: E501

        :return: The marketing_price of this ItemPricev5.  # noqa: E501
        :rtype: float
        """
        return self._marketing_price

    @marketing_price.setter
    def marketing_price(self, marketing_price):
        """Sets the marketing_price of this ItemPricev5.

        Цена на товар с учётом всех акций, которая будет указана на витрине Ozon.  # noqa: E501

        :param marketing_price: The marketing_price of this ItemPricev5.  # noqa: E501
        :type: float
        """

        self._marketing_price = marketing_price

    @property
    def marketing_seller_price(self):
        """Gets the marketing_seller_price of this ItemPricev5.  # noqa: E501

        Цена на товар с учётом акций продавца.  # noqa: E501

        :return: The marketing_seller_price of this ItemPricev5.  # noqa: E501
        :rtype: float
        """
        return self._marketing_seller_price

    @marketing_seller_price.setter
    def marketing_seller_price(self, marketing_seller_price):
        """Sets the marketing_seller_price of this ItemPricev5.

        Цена на товар с учётом акций продавца.  # noqa: E501

        :param marketing_seller_price: The marketing_seller_price of this ItemPricev5.  # noqa: E501
        :type: float
        """

        self._marketing_seller_price = marketing_seller_price

    @property
    def min_price(self):
        """Gets the min_price of this ItemPricev5.  # noqa: E501

        Минимальная цена товара после применения всех скидок.  # noqa: E501

        :return: The min_price of this ItemPricev5.  # noqa: E501
        :rtype: float
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price):
        """Sets the min_price of this ItemPricev5.

        Минимальная цена товара после применения всех скидок.  # noqa: E501

        :param min_price: The min_price of this ItemPricev5.  # noqa: E501
        :type: float
        """

        self._min_price = min_price

    @property
    def old_price(self):
        """Gets the old_price of this ItemPricev5.  # noqa: E501

        Цена до учёта скидок. На карточке товара отображается зачёркнутой.  # noqa: E501

        :return: The old_price of this ItemPricev5.  # noqa: E501
        :rtype: float
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this ItemPricev5.

        Цена до учёта скидок. На карточке товара отображается зачёркнутой.  # noqa: E501

        :param old_price: The old_price of this ItemPricev5.  # noqa: E501
        :type: float
        """

        self._old_price = old_price

    @property
    def price(self):
        """Gets the price of this ItemPricev5.  # noqa: E501

        Цена товара с учётом скидок — это значение показывается на карточке товара.  # noqa: E501

        :return: The price of this ItemPricev5.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ItemPricev5.

        Цена товара с учётом скидок — это значение показывается на карточке товара.  # noqa: E501

        :param price: The price of this ItemPricev5.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def retail_price(self):
        """Gets the retail_price of this ItemPricev5.  # noqa: E501

        Цена поставщика.  # noqa: E501

        :return: The retail_price of this ItemPricev5.  # noqa: E501
        :rtype: float
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """Sets the retail_price of this ItemPricev5.

        Цена поставщика.  # noqa: E501

        :param retail_price: The retail_price of this ItemPricev5.  # noqa: E501
        :type: float
        """

        self._retail_price = retail_price

    @property
    def vat(self):
        """Gets the vat of this ItemPricev5.  # noqa: E501

        Ставка НДС для товара.  # noqa: E501

        :return: The vat of this ItemPricev5.  # noqa: E501
        :rtype: float
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this ItemPricev5.

        Ставка НДС для товара.  # noqa: E501

        :param vat: The vat of this ItemPricev5.  # noqa: E501
        :type: float
        """

        self._vat = vat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemPricev5, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemPricev5):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
