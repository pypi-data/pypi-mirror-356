# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarriageCarriageGetResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'act_type': 'str',
        'is_waybill_enabled': 'bool',
        'is_econom': 'bool',
        'arrival_pass_ids': 'list[str]',
        'available_actions': 'list[str]',
        'cancel_availability': 'CarriageCarriageGetResponseCancelAvailability',
        'carriage_id': 'int',
        'company_id': 'int',
        'containers_count': 'int',
        'created_at': 'datetime',
        'delivery_method_id': 'int',
        'departure_date': 'str',
        'first_mile_type': 'str',
        'has_postings_for_next_carriage': 'bool',
        'integration_type': 'str',
        'is_container_label_printed': 'bool',
        'is_partial': 'bool',
        'partial_num': 'int',
        'retry_count': 'int',
        'status': 'str',
        'tpl_provider_id': 'int',
        'updated_at': 'datetime',
        'warehouse_id': 'int'
    }

    attribute_map = {
        'act_type': 'act_type',
        'is_waybill_enabled': 'is_waybill_enabled',
        'is_econom': 'is_econom',
        'arrival_pass_ids': 'arrival_pass_ids',
        'available_actions': 'available_actions',
        'cancel_availability': 'cancel_availability',
        'carriage_id': 'carriage_id',
        'company_id': 'company_id',
        'containers_count': 'containers_count',
        'created_at': 'created_at',
        'delivery_method_id': 'delivery_method_id',
        'departure_date': 'departure_date',
        'first_mile_type': 'first_mile_type',
        'has_postings_for_next_carriage': 'has_postings_for_next_carriage',
        'integration_type': 'integration_type',
        'is_container_label_printed': 'is_container_label_printed',
        'is_partial': 'is_partial',
        'partial_num': 'partial_num',
        'retry_count': 'retry_count',
        'status': 'status',
        'tpl_provider_id': 'tpl_provider_id',
        'updated_at': 'updated_at',
        'warehouse_id': 'warehouse_id'
    }

    def __init__(self, act_type=None, is_waybill_enabled=None, is_econom=None, arrival_pass_ids=None, available_actions=None, cancel_availability=None, carriage_id=None, company_id=None, containers_count=None, created_at=None, delivery_method_id=None, departure_date=None, first_mile_type=None, has_postings_for_next_carriage=None, integration_type=None, is_container_label_printed=None, is_partial=None, partial_num=None, retry_count=None, status=None, tpl_provider_id=None, updated_at=None, warehouse_id=None):  # noqa: E501
        """CarriageCarriageGetResponse - a model defined in Swagger"""  # noqa: E501
        self._act_type = None
        self._is_waybill_enabled = None
        self._is_econom = None
        self._arrival_pass_ids = None
        self._available_actions = None
        self._cancel_availability = None
        self._carriage_id = None
        self._company_id = None
        self._containers_count = None
        self._created_at = None
        self._delivery_method_id = None
        self._departure_date = None
        self._first_mile_type = None
        self._has_postings_for_next_carriage = None
        self._integration_type = None
        self._is_container_label_printed = None
        self._is_partial = None
        self._partial_num = None
        self._retry_count = None
        self._status = None
        self._tpl_provider_id = None
        self._updated_at = None
        self._warehouse_id = None
        self.discriminator = None
        if act_type is not None:
            self.act_type = act_type
        if is_waybill_enabled is not None:
            self.is_waybill_enabled = is_waybill_enabled
        if is_econom is not None:
            self.is_econom = is_econom
        if arrival_pass_ids is not None:
            self.arrival_pass_ids = arrival_pass_ids
        if available_actions is not None:
            self.available_actions = available_actions
        if cancel_availability is not None:
            self.cancel_availability = cancel_availability
        if carriage_id is not None:
            self.carriage_id = carriage_id
        if company_id is not None:
            self.company_id = company_id
        if containers_count is not None:
            self.containers_count = containers_count
        if created_at is not None:
            self.created_at = created_at
        if delivery_method_id is not None:
            self.delivery_method_id = delivery_method_id
        if departure_date is not None:
            self.departure_date = departure_date
        if first_mile_type is not None:
            self.first_mile_type = first_mile_type
        if has_postings_for_next_carriage is not None:
            self.has_postings_for_next_carriage = has_postings_for_next_carriage
        if integration_type is not None:
            self.integration_type = integration_type
        if is_container_label_printed is not None:
            self.is_container_label_printed = is_container_label_printed
        if is_partial is not None:
            self.is_partial = is_partial
        if partial_num is not None:
            self.partial_num = partial_num
        if retry_count is not None:
            self.retry_count = retry_count
        if status is not None:
            self.status = status
        if tpl_provider_id is not None:
            self.tpl_provider_id = tpl_provider_id
        if updated_at is not None:
            self.updated_at = updated_at
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id

    @property
    def act_type(self):
        """Gets the act_type of this CarriageCarriageGetResponse.  # noqa: E501

        Тип акта приёма-передачи. Актуально для продавцов FBS.  # noqa: E501

        :return: The act_type of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: str
        """
        return self._act_type

    @act_type.setter
    def act_type(self, act_type):
        """Sets the act_type of this CarriageCarriageGetResponse.

        Тип акта приёма-передачи. Актуально для продавцов FBS.  # noqa: E501

        :param act_type: The act_type of this CarriageCarriageGetResponse.  # noqa: E501
        :type: str
        """

        self._act_type = act_type

    @property
    def is_waybill_enabled(self):
        """Gets the is_waybill_enabled of this CarriageCarriageGetResponse.  # noqa: E501

        `true`, если доступна печать транспортной накладной.   # noqa: E501

        :return: The is_waybill_enabled of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_waybill_enabled

    @is_waybill_enabled.setter
    def is_waybill_enabled(self, is_waybill_enabled):
        """Sets the is_waybill_enabled of this CarriageCarriageGetResponse.

        `true`, если доступна печать транспортной накладной.   # noqa: E501

        :param is_waybill_enabled: The is_waybill_enabled of this CarriageCarriageGetResponse.  # noqa: E501
        :type: bool
        """

        self._is_waybill_enabled = is_waybill_enabled

    @property
    def is_econom(self):
        """Gets the is_econom of this CarriageCarriageGetResponse.  # noqa: E501

        `true`, если отгрузка относится к товарам «Суперэконом».   # noqa: E501

        :return: The is_econom of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_econom

    @is_econom.setter
    def is_econom(self, is_econom):
        """Sets the is_econom of this CarriageCarriageGetResponse.

        `true`, если отгрузка относится к товарам «Суперэконом».   # noqa: E501

        :param is_econom: The is_econom of this CarriageCarriageGetResponse.  # noqa: E501
        :type: bool
        """

        self._is_econom = is_econom

    @property
    def arrival_pass_ids(self):
        """Gets the arrival_pass_ids of this CarriageCarriageGetResponse.  # noqa: E501

        Список идентификаторов пропусков, оформленных на перевозку.  # noqa: E501

        :return: The arrival_pass_ids of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._arrival_pass_ids

    @arrival_pass_ids.setter
    def arrival_pass_ids(self, arrival_pass_ids):
        """Sets the arrival_pass_ids of this CarriageCarriageGetResponse.

        Список идентификаторов пропусков, оформленных на перевозку.  # noqa: E501

        :param arrival_pass_ids: The arrival_pass_ids of this CarriageCarriageGetResponse.  # noqa: E501
        :type: list[str]
        """

        self._arrival_pass_ids = arrival_pass_ids

    @property
    def available_actions(self):
        """Gets the available_actions of this CarriageCarriageGetResponse.  # noqa: E501

        Доступные действия с перевозкой.  # noqa: E501

        :return: The available_actions of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_actions

    @available_actions.setter
    def available_actions(self, available_actions):
        """Sets the available_actions of this CarriageCarriageGetResponse.

        Доступные действия с перевозкой.  # noqa: E501

        :param available_actions: The available_actions of this CarriageCarriageGetResponse.  # noqa: E501
        :type: list[str]
        """

        self._available_actions = available_actions

    @property
    def cancel_availability(self):
        """Gets the cancel_availability of this CarriageCarriageGetResponse.  # noqa: E501


        :return: The cancel_availability of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: CarriageCarriageGetResponseCancelAvailability
        """
        return self._cancel_availability

    @cancel_availability.setter
    def cancel_availability(self, cancel_availability):
        """Sets the cancel_availability of this CarriageCarriageGetResponse.


        :param cancel_availability: The cancel_availability of this CarriageCarriageGetResponse.  # noqa: E501
        :type: CarriageCarriageGetResponseCancelAvailability
        """

        self._cancel_availability = cancel_availability

    @property
    def carriage_id(self):
        """Gets the carriage_id of this CarriageCarriageGetResponse.  # noqa: E501

        Идентификатор перевозки.  # noqa: E501

        :return: The carriage_id of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._carriage_id

    @carriage_id.setter
    def carriage_id(self, carriage_id):
        """Sets the carriage_id of this CarriageCarriageGetResponse.

        Идентификатор перевозки.  # noqa: E501

        :param carriage_id: The carriage_id of this CarriageCarriageGetResponse.  # noqa: E501
        :type: int
        """

        self._carriage_id = carriage_id

    @property
    def company_id(self):
        """Gets the company_id of this CarriageCarriageGetResponse.  # noqa: E501

        Идентификатор продавца.  # noqa: E501

        :return: The company_id of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CarriageCarriageGetResponse.

        Идентификатор продавца.  # noqa: E501

        :param company_id: The company_id of this CarriageCarriageGetResponse.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def containers_count(self):
        """Gets the containers_count of this CarriageCarriageGetResponse.  # noqa: E501

        Количество грузовых мест.  # noqa: E501

        :return: The containers_count of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._containers_count

    @containers_count.setter
    def containers_count(self, containers_count):
        """Sets the containers_count of this CarriageCarriageGetResponse.

        Количество грузовых мест.  # noqa: E501

        :param containers_count: The containers_count of this CarriageCarriageGetResponse.  # noqa: E501
        :type: int
        """

        self._containers_count = containers_count

    @property
    def created_at(self):
        """Gets the created_at of this CarriageCarriageGetResponse.  # noqa: E501

        Дата создания перевозки.  # noqa: E501

        :return: The created_at of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CarriageCarriageGetResponse.

        Дата создания перевозки.  # noqa: E501

        :param created_at: The created_at of this CarriageCarriageGetResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def delivery_method_id(self):
        """Gets the delivery_method_id of this CarriageCarriageGetResponse.  # noqa: E501

        Идентификатор метода доставки.  # noqa: E501

        :return: The delivery_method_id of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._delivery_method_id

    @delivery_method_id.setter
    def delivery_method_id(self, delivery_method_id):
        """Sets the delivery_method_id of this CarriageCarriageGetResponse.

        Идентификатор метода доставки.  # noqa: E501

        :param delivery_method_id: The delivery_method_id of this CarriageCarriageGetResponse.  # noqa: E501
        :type: int
        """

        self._delivery_method_id = delivery_method_id

    @property
    def departure_date(self):
        """Gets the departure_date of this CarriageCarriageGetResponse.  # noqa: E501

        Дата выполнения перевозки.  # noqa: E501

        :return: The departure_date of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: str
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this CarriageCarriageGetResponse.

        Дата выполнения перевозки.  # noqa: E501

        :param departure_date: The departure_date of this CarriageCarriageGetResponse.  # noqa: E501
        :type: str
        """

        self._departure_date = departure_date

    @property
    def first_mile_type(self):
        """Gets the first_mile_type of this CarriageCarriageGetResponse.  # noqa: E501

        Тип первой мили.  # noqa: E501

        :return: The first_mile_type of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_mile_type

    @first_mile_type.setter
    def first_mile_type(self, first_mile_type):
        """Sets the first_mile_type of this CarriageCarriageGetResponse.

        Тип первой мили.  # noqa: E501

        :param first_mile_type: The first_mile_type of this CarriageCarriageGetResponse.  # noqa: E501
        :type: str
        """

        self._first_mile_type = first_mile_type

    @property
    def has_postings_for_next_carriage(self):
        """Gets the has_postings_for_next_carriage of this CarriageCarriageGetResponse.  # noqa: E501

        `true`, если есть отправления, которые не попали в перевозку, но нужно отгрузить.   # noqa: E501

        :return: The has_postings_for_next_carriage of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_postings_for_next_carriage

    @has_postings_for_next_carriage.setter
    def has_postings_for_next_carriage(self, has_postings_for_next_carriage):
        """Sets the has_postings_for_next_carriage of this CarriageCarriageGetResponse.

        `true`, если есть отправления, которые не попали в перевозку, но нужно отгрузить.   # noqa: E501

        :param has_postings_for_next_carriage: The has_postings_for_next_carriage of this CarriageCarriageGetResponse.  # noqa: E501
        :type: bool
        """

        self._has_postings_for_next_carriage = has_postings_for_next_carriage

    @property
    def integration_type(self):
        """Gets the integration_type of this CarriageCarriageGetResponse.  # noqa: E501

        Тип перевозки.  # noqa: E501

        :return: The integration_type of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: str
        """
        return self._integration_type

    @integration_type.setter
    def integration_type(self, integration_type):
        """Sets the integration_type of this CarriageCarriageGetResponse.

        Тип перевозки.  # noqa: E501

        :param integration_type: The integration_type of this CarriageCarriageGetResponse.  # noqa: E501
        :type: str
        """

        self._integration_type = integration_type

    @property
    def is_container_label_printed(self):
        """Gets the is_container_label_printed of this CarriageCarriageGetResponse.  # noqa: E501

        `true`, если вы уже напечатали этикетки на грузовые места.   # noqa: E501

        :return: The is_container_label_printed of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_container_label_printed

    @is_container_label_printed.setter
    def is_container_label_printed(self, is_container_label_printed):
        """Sets the is_container_label_printed of this CarriageCarriageGetResponse.

        `true`, если вы уже напечатали этикетки на грузовые места.   # noqa: E501

        :param is_container_label_printed: The is_container_label_printed of this CarriageCarriageGetResponse.  # noqa: E501
        :type: bool
        """

        self._is_container_label_printed = is_container_label_printed

    @property
    def is_partial(self):
        """Gets the is_partial of this CarriageCarriageGetResponse.  # noqa: E501

        `true`, если перевозка частичная.   # noqa: E501

        :return: The is_partial of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_partial

    @is_partial.setter
    def is_partial(self, is_partial):
        """Sets the is_partial of this CarriageCarriageGetResponse.

        `true`, если перевозка частичная.   # noqa: E501

        :param is_partial: The is_partial of this CarriageCarriageGetResponse.  # noqa: E501
        :type: bool
        """

        self._is_partial = is_partial

    @property
    def partial_num(self):
        """Gets the partial_num of this CarriageCarriageGetResponse.  # noqa: E501

        Порядковый номер частичной перевозки.  # noqa: E501

        :return: The partial_num of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._partial_num

    @partial_num.setter
    def partial_num(self, partial_num):
        """Sets the partial_num of this CarriageCarriageGetResponse.

        Порядковый номер частичной перевозки.  # noqa: E501

        :param partial_num: The partial_num of this CarriageCarriageGetResponse.  # noqa: E501
        :type: int
        """

        self._partial_num = partial_num

    @property
    def retry_count(self):
        """Gets the retry_count of this CarriageCarriageGetResponse.  # noqa: E501

        Количество повторных попыток создания перевозки.  # noqa: E501

        :return: The retry_count of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this CarriageCarriageGetResponse.

        Количество повторных попыток создания перевозки.  # noqa: E501

        :param retry_count: The retry_count of this CarriageCarriageGetResponse.  # noqa: E501
        :type: int
        """

        self._retry_count = retry_count

    @property
    def status(self):
        """Gets the status of this CarriageCarriageGetResponse.  # noqa: E501

        Статус перевозки: - `received` — идёт приёмка, - `closed` — завершена после приёмки, - `sended` — отправлена, - `cancelled` — отменена.   # noqa: E501

        :return: The status of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CarriageCarriageGetResponse.

        Статус перевозки: - `received` — идёт приёмка, - `closed` — завершена после приёмки, - `sended` — отправлена, - `cancelled` — отменена.   # noqa: E501

        :param status: The status of this CarriageCarriageGetResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tpl_provider_id(self):
        """Gets the tpl_provider_id of this CarriageCarriageGetResponse.  # noqa: E501

        Идентификатор провайдера доставки.  # noqa: E501

        :return: The tpl_provider_id of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._tpl_provider_id

    @tpl_provider_id.setter
    def tpl_provider_id(self, tpl_provider_id):
        """Sets the tpl_provider_id of this CarriageCarriageGetResponse.

        Идентификатор провайдера доставки.  # noqa: E501

        :param tpl_provider_id: The tpl_provider_id of this CarriageCarriageGetResponse.  # noqa: E501
        :type: int
        """

        self._tpl_provider_id = tpl_provider_id

    @property
    def updated_at(self):
        """Gets the updated_at of this CarriageCarriageGetResponse.  # noqa: E501

        Дата последнего обновления информации о перевозке.  # noqa: E501

        :return: The updated_at of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CarriageCarriageGetResponse.

        Дата последнего обновления информации о перевозке.  # noqa: E501

        :param updated_at: The updated_at of this CarriageCarriageGetResponse.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this CarriageCarriageGetResponse.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The warehouse_id of this CarriageCarriageGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this CarriageCarriageGetResponse.

        Идентификатор склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this CarriageCarriageGetResponse.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarriageCarriageGetResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarriageCarriageGetResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
