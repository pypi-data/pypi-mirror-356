# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3FinanceCashFlowStatementListResponseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cash_flows': 'list[FinanceCashFlowStatementListResponseCashFlow]',
        'details': 'FinanceCashFlowStatementListResponseDetails',
        'page_count': 'int'
    }

    attribute_map = {
        'cash_flows': 'cash_flows',
        'details': 'details',
        'page_count': 'page_count'
    }

    def __init__(self, cash_flows=None, details=None, page_count=None):  # noqa: E501
        """V3FinanceCashFlowStatementListResponseResult - a model defined in Swagger"""  # noqa: E501
        self._cash_flows = None
        self._details = None
        self._page_count = None
        self.discriminator = None
        if cash_flows is not None:
            self.cash_flows = cash_flows
        if details is not None:
            self.details = details
        if page_count is not None:
            self.page_count = page_count

    @property
    def cash_flows(self):
        """Gets the cash_flows of this V3FinanceCashFlowStatementListResponseResult.  # noqa: E501

        Список отчётов.  # noqa: E501

        :return: The cash_flows of this V3FinanceCashFlowStatementListResponseResult.  # noqa: E501
        :rtype: list[FinanceCashFlowStatementListResponseCashFlow]
        """
        return self._cash_flows

    @cash_flows.setter
    def cash_flows(self, cash_flows):
        """Sets the cash_flows of this V3FinanceCashFlowStatementListResponseResult.

        Список отчётов.  # noqa: E501

        :param cash_flows: The cash_flows of this V3FinanceCashFlowStatementListResponseResult.  # noqa: E501
        :type: list[FinanceCashFlowStatementListResponseCashFlow]
        """

        self._cash_flows = cash_flows

    @property
    def details(self):
        """Gets the details of this V3FinanceCashFlowStatementListResponseResult.  # noqa: E501


        :return: The details of this V3FinanceCashFlowStatementListResponseResult.  # noqa: E501
        :rtype: FinanceCashFlowStatementListResponseDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this V3FinanceCashFlowStatementListResponseResult.


        :param details: The details of this V3FinanceCashFlowStatementListResponseResult.  # noqa: E501
        :type: FinanceCashFlowStatementListResponseDetails
        """

        self._details = details

    @property
    def page_count(self):
        """Gets the page_count of this V3FinanceCashFlowStatementListResponseResult.  # noqa: E501

        Количество страниц с отчётами.  # noqa: E501

        :return: The page_count of this V3FinanceCashFlowStatementListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this V3FinanceCashFlowStatementListResponseResult.

        Количество страниц с отчётами.  # noqa: E501

        :param page_count: The page_count of this V3FinanceCashFlowStatementListResponseResult.  # noqa: E501
        :type: int
        """

        self._page_count = page_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3FinanceCashFlowStatementListResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3FinanceCashFlowStatementListResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
