# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FinanceTransactionListV3ResponseOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accruals_for_sale': 'float',
        'amount': 'float',
        'delivery_charge': 'float',
        'items': 'list[OperationItem]',
        'operation_date': 'str',
        'operation_id': 'int',
        'operation_type': 'str',
        'operation_type_name': 'str',
        'posting': 'OperationPosting',
        'return_delivery_charge': 'float',
        'sale_commission': 'float',
        'services': 'list[OperationService]',
        'type': 'str'
    }

    attribute_map = {
        'accruals_for_sale': 'accruals_for_sale',
        'amount': 'amount',
        'delivery_charge': 'delivery_charge',
        'items': 'items',
        'operation_date': 'operation_date',
        'operation_id': 'operation_id',
        'operation_type': 'operation_type',
        'operation_type_name': 'operation_type_name',
        'posting': 'posting',
        'return_delivery_charge': 'return_delivery_charge',
        'sale_commission': 'sale_commission',
        'services': 'services',
        'type': 'type'
    }

    def __init__(self, accruals_for_sale=None, amount=None, delivery_charge=None, items=None, operation_date=None, operation_id=None, operation_type=None, operation_type_name=None, posting=None, return_delivery_charge=None, sale_commission=None, services=None, type=None):  # noqa: E501
        """FinanceTransactionListV3ResponseOperation - a model defined in Swagger"""  # noqa: E501
        self._accruals_for_sale = None
        self._amount = None
        self._delivery_charge = None
        self._items = None
        self._operation_date = None
        self._operation_id = None
        self._operation_type = None
        self._operation_type_name = None
        self._posting = None
        self._return_delivery_charge = None
        self._sale_commission = None
        self._services = None
        self._type = None
        self.discriminator = None
        if accruals_for_sale is not None:
            self.accruals_for_sale = accruals_for_sale
        if amount is not None:
            self.amount = amount
        if delivery_charge is not None:
            self.delivery_charge = delivery_charge
        if items is not None:
            self.items = items
        if operation_date is not None:
            self.operation_date = operation_date
        if operation_id is not None:
            self.operation_id = operation_id
        if operation_type is not None:
            self.operation_type = operation_type
        if operation_type_name is not None:
            self.operation_type_name = operation_type_name
        if posting is not None:
            self.posting = posting
        if return_delivery_charge is not None:
            self.return_delivery_charge = return_delivery_charge
        if sale_commission is not None:
            self.sale_commission = sale_commission
        if services is not None:
            self.services = services
        if type is not None:
            self.type = type

    @property
    def accruals_for_sale(self):
        """Gets the accruals_for_sale of this FinanceTransactionListV3ResponseOperation.  # noqa: E501

        Стоимость товаров с учётом скидок продавца.  # noqa: E501

        :return: The accruals_for_sale of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: float
        """
        return self._accruals_for_sale

    @accruals_for_sale.setter
    def accruals_for_sale(self, accruals_for_sale):
        """Sets the accruals_for_sale of this FinanceTransactionListV3ResponseOperation.

        Стоимость товаров с учётом скидок продавца.  # noqa: E501

        :param accruals_for_sale: The accruals_for_sale of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: float
        """

        self._accruals_for_sale = accruals_for_sale

    @property
    def amount(self):
        """Gets the amount of this FinanceTransactionListV3ResponseOperation.  # noqa: E501

        Итоговая сумма операции.  # noqa: E501

        :return: The amount of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this FinanceTransactionListV3ResponseOperation.

        Итоговая сумма операции.  # noqa: E501

        :param amount: The amount of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def delivery_charge(self):
        """Gets the delivery_charge of this FinanceTransactionListV3ResponseOperation.  # noqa: E501

        Стоимость доставки для начислений по тарифам, которые действовали до 1 февраля 2021 года, а также начислений для крупногабаритных товаров.  # noqa: E501

        :return: The delivery_charge of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: float
        """
        return self._delivery_charge

    @delivery_charge.setter
    def delivery_charge(self, delivery_charge):
        """Sets the delivery_charge of this FinanceTransactionListV3ResponseOperation.

        Стоимость доставки для начислений по тарифам, которые действовали до 1 февраля 2021 года, а также начислений для крупногабаритных товаров.  # noqa: E501

        :param delivery_charge: The delivery_charge of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: float
        """

        self._delivery_charge = delivery_charge

    @property
    def items(self):
        """Gets the items of this FinanceTransactionListV3ResponseOperation.  # noqa: E501

        Информация о товаре.  # noqa: E501

        :return: The items of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: list[OperationItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this FinanceTransactionListV3ResponseOperation.

        Информация о товаре.  # noqa: E501

        :param items: The items of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: list[OperationItem]
        """

        self._items = items

    @property
    def operation_date(self):
        """Gets the operation_date of this FinanceTransactionListV3ResponseOperation.  # noqa: E501

        Дата операции.  # noqa: E501

        :return: The operation_date of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: str
        """
        return self._operation_date

    @operation_date.setter
    def operation_date(self, operation_date):
        """Sets the operation_date of this FinanceTransactionListV3ResponseOperation.

        Дата операции.  # noqa: E501

        :param operation_date: The operation_date of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: str
        """

        self._operation_date = operation_date

    @property
    def operation_id(self):
        """Gets the operation_id of this FinanceTransactionListV3ResponseOperation.  # noqa: E501

        Идентификатор операции.  # noqa: E501

        :return: The operation_id of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: int
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this FinanceTransactionListV3ResponseOperation.

        Идентификатор операции.  # noqa: E501

        :param operation_id: The operation_id of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: int
        """

        self._operation_id = operation_id

    @property
    def operation_type(self):
        """Gets the operation_type of this FinanceTransactionListV3ResponseOperation.  # noqa: E501

        Тип операции.  # noqa: E501

        :return: The operation_type of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this FinanceTransactionListV3ResponseOperation.

        Тип операции.  # noqa: E501

        :param operation_type: The operation_type of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: str
        """

        self._operation_type = operation_type

    @property
    def operation_type_name(self):
        """Gets the operation_type_name of this FinanceTransactionListV3ResponseOperation.  # noqa: E501

        Название типа операции.  # noqa: E501

        :return: The operation_type_name of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: str
        """
        return self._operation_type_name

    @operation_type_name.setter
    def operation_type_name(self, operation_type_name):
        """Sets the operation_type_name of this FinanceTransactionListV3ResponseOperation.

        Название типа операции.  # noqa: E501

        :param operation_type_name: The operation_type_name of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: str
        """

        self._operation_type_name = operation_type_name

    @property
    def posting(self):
        """Gets the posting of this FinanceTransactionListV3ResponseOperation.  # noqa: E501


        :return: The posting of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: OperationPosting
        """
        return self._posting

    @posting.setter
    def posting(self, posting):
        """Sets the posting of this FinanceTransactionListV3ResponseOperation.


        :param posting: The posting of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: OperationPosting
        """

        self._posting = posting

    @property
    def return_delivery_charge(self):
        """Gets the return_delivery_charge of this FinanceTransactionListV3ResponseOperation.  # noqa: E501

        Плата за возвраты и отмены для начислений по тарифам, которые действовали до 1 февраля 2021 года, а также начислений для крупногабаритных товаров.  # noqa: E501

        :return: The return_delivery_charge of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: float
        """
        return self._return_delivery_charge

    @return_delivery_charge.setter
    def return_delivery_charge(self, return_delivery_charge):
        """Sets the return_delivery_charge of this FinanceTransactionListV3ResponseOperation.

        Плата за возвраты и отмены для начислений по тарифам, которые действовали до 1 февраля 2021 года, а также начислений для крупногабаритных товаров.  # noqa: E501

        :param return_delivery_charge: The return_delivery_charge of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: float
        """

        self._return_delivery_charge = return_delivery_charge

    @property
    def sale_commission(self):
        """Gets the sale_commission of this FinanceTransactionListV3ResponseOperation.  # noqa: E501

        Комиссия за продажу или возврат комиссии за продажу.  # noqa: E501

        :return: The sale_commission of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: float
        """
        return self._sale_commission

    @sale_commission.setter
    def sale_commission(self, sale_commission):
        """Sets the sale_commission of this FinanceTransactionListV3ResponseOperation.

        Комиссия за продажу или возврат комиссии за продажу.  # noqa: E501

        :param sale_commission: The sale_commission of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: float
        """

        self._sale_commission = sale_commission

    @property
    def services(self):
        """Gets the services of this FinanceTransactionListV3ResponseOperation.  # noqa: E501

        Название услуги.  # noqa: E501

        :return: The services of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: list[OperationService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this FinanceTransactionListV3ResponseOperation.

        Название услуги.  # noqa: E501

        :param services: The services of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: list[OperationService]
        """

        self._services = services

    @property
    def type(self):
        """Gets the type of this FinanceTransactionListV3ResponseOperation.  # noqa: E501

        Тип начисления: - `all` — все, - `orders` — заказы, - `returns` — возвраты и отмены, - `services` — сервисные сборы, - `compensation` — компенсация, - `transferDelivery` — стоимость доставки, - `other` — прочее.   # noqa: E501

        :return: The type of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FinanceTransactionListV3ResponseOperation.

        Тип начисления: - `all` — все, - `orders` — заказы, - `returns` — возвраты и отмены, - `services` — сервисные сборы, - `compensation` — компенсация, - `transferDelivery` — стоимость доставки, - `other` — прочее.   # noqa: E501

        :param type: The type of this FinanceTransactionListV3ResponseOperation.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinanceTransactionListV3ResponseOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinanceTransactionListV3ResponseOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
