# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GiveoutListResponseGiveoutDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approved_articles_count': 'int',
        'created_at': 'datetime',
        'giveout_id': 'int',
        'giveout_status': 'V1GiveoutStatus',
        'total_articles_count': 'int',
        'warehouse_address': 'str',
        'warehouse_id': 'int',
        'warehouse_name': 'str'
    }

    attribute_map = {
        'approved_articles_count': 'approved_articles_count',
        'created_at': 'created_at',
        'giveout_id': 'giveout_id',
        'giveout_status': 'giveout_status',
        'total_articles_count': 'total_articles_count',
        'warehouse_address': 'warehouse_address',
        'warehouse_id': 'warehouse_id',
        'warehouse_name': 'warehouse_name'
    }

    def __init__(self, approved_articles_count=None, created_at=None, giveout_id=None, giveout_status=None, total_articles_count=None, warehouse_address=None, warehouse_id=None, warehouse_name=None):  # noqa: E501
        """GiveoutListResponseGiveoutDetails - a model defined in Swagger"""  # noqa: E501
        self._approved_articles_count = None
        self._created_at = None
        self._giveout_id = None
        self._giveout_status = None
        self._total_articles_count = None
        self._warehouse_address = None
        self._warehouse_id = None
        self._warehouse_name = None
        self.discriminator = None
        if approved_articles_count is not None:
            self.approved_articles_count = approved_articles_count
        if created_at is not None:
            self.created_at = created_at
        if giveout_id is not None:
            self.giveout_id = giveout_id
        if giveout_status is not None:
            self.giveout_status = giveout_status
        if total_articles_count is not None:
            self.total_articles_count = total_articles_count
        if warehouse_address is not None:
            self.warehouse_address = warehouse_address
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if warehouse_name is not None:
            self.warehouse_name = warehouse_name

    @property
    def approved_articles_count(self):
        """Gets the approved_articles_count of this GiveoutListResponseGiveoutDetails.  # noqa: E501

        Количество товаров в отгрузке.  # noqa: E501

        :return: The approved_articles_count of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :rtype: int
        """
        return self._approved_articles_count

    @approved_articles_count.setter
    def approved_articles_count(self, approved_articles_count):
        """Sets the approved_articles_count of this GiveoutListResponseGiveoutDetails.

        Количество товаров в отгрузке.  # noqa: E501

        :param approved_articles_count: The approved_articles_count of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :type: int
        """

        self._approved_articles_count = approved_articles_count

    @property
    def created_at(self):
        """Gets the created_at of this GiveoutListResponseGiveoutDetails.  # noqa: E501

        Дата и время.  # noqa: E501

        :return: The created_at of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GiveoutListResponseGiveoutDetails.

        Дата и время.  # noqa: E501

        :param created_at: The created_at of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def giveout_id(self):
        """Gets the giveout_id of this GiveoutListResponseGiveoutDetails.  # noqa: E501

        Идентификатор отгрузки.  # noqa: E501

        :return: The giveout_id of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :rtype: int
        """
        return self._giveout_id

    @giveout_id.setter
    def giveout_id(self, giveout_id):
        """Sets the giveout_id of this GiveoutListResponseGiveoutDetails.

        Идентификатор отгрузки.  # noqa: E501

        :param giveout_id: The giveout_id of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :type: int
        """

        self._giveout_id = giveout_id

    @property
    def giveout_status(self):
        """Gets the giveout_status of this GiveoutListResponseGiveoutDetails.  # noqa: E501


        :return: The giveout_status of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :rtype: V1GiveoutStatus
        """
        return self._giveout_status

    @giveout_status.setter
    def giveout_status(self, giveout_status):
        """Sets the giveout_status of this GiveoutListResponseGiveoutDetails.


        :param giveout_status: The giveout_status of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :type: V1GiveoutStatus
        """

        self._giveout_status = giveout_status

    @property
    def total_articles_count(self):
        """Gets the total_articles_count of this GiveoutListResponseGiveoutDetails.  # noqa: E501

        Общее количество товаров, которые нужно забрать со склада.  # noqa: E501

        :return: The total_articles_count of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_articles_count

    @total_articles_count.setter
    def total_articles_count(self, total_articles_count):
        """Sets the total_articles_count of this GiveoutListResponseGiveoutDetails.

        Общее количество товаров, которые нужно забрать со склада.  # noqa: E501

        :param total_articles_count: The total_articles_count of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :type: int
        """

        self._total_articles_count = total_articles_count

    @property
    def warehouse_address(self):
        """Gets the warehouse_address of this GiveoutListResponseGiveoutDetails.  # noqa: E501

        Адрес склада.  # noqa: E501

        :return: The warehouse_address of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_address

    @warehouse_address.setter
    def warehouse_address(self, warehouse_address):
        """Sets the warehouse_address of this GiveoutListResponseGiveoutDetails.

        Адрес склада.  # noqa: E501

        :param warehouse_address: The warehouse_address of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :type: str
        """

        self._warehouse_address = warehouse_address

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this GiveoutListResponseGiveoutDetails.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The warehouse_id of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this GiveoutListResponseGiveoutDetails.

        Идентификатор склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this GiveoutListResponseGiveoutDetails.  # noqa: E501

        Название склада.  # noqa: E501

        :return: The warehouse_name of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this GiveoutListResponseGiveoutDetails.

        Название склада.  # noqa: E501

        :param warehouse_name: The warehouse_name of this GiveoutListResponseGiveoutDetails.  # noqa: E501
        :type: str
        """

        self._warehouse_name = warehouse_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GiveoutListResponseGiveoutDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GiveoutListResponseGiveoutDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
