# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ItemMarketing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actions': 'list[MarketingAction]',
        'current_period_from': 'datetime',
        'current_period_to': 'datetime',
        'ozon_actions_exist': 'bool'
    }

    attribute_map = {
        'actions': 'actions',
        'current_period_from': 'current_period_from',
        'current_period_to': 'current_period_to',
        'ozon_actions_exist': 'ozon_actions_exist'
    }

    def __init__(self, actions=None, current_period_from=None, current_period_to=None, ozon_actions_exist=None):  # noqa: E501
        """ItemMarketing - a model defined in Swagger"""  # noqa: E501
        self._actions = None
        self._current_period_from = None
        self._current_period_to = None
        self._ozon_actions_exist = None
        self.discriminator = None
        if actions is not None:
            self.actions = actions
        if current_period_from is not None:
            self.current_period_from = current_period_from
        if current_period_to is not None:
            self.current_period_to = current_period_to
        if ozon_actions_exist is not None:
            self.ozon_actions_exist = ozon_actions_exist

    @property
    def actions(self):
        """Gets the actions of this ItemMarketing.  # noqa: E501

        Маркетинговые акции продавца. Параметры `date_from`, `date_to`, `title` и `value` указываются для каждой акции продавца.  # noqa: E501

        :return: The actions of this ItemMarketing.  # noqa: E501
        :rtype: list[MarketingAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ItemMarketing.

        Маркетинговые акции продавца. Параметры `date_from`, `date_to`, `title` и `value` указываются для каждой акции продавца.  # noqa: E501

        :param actions: The actions of this ItemMarketing.  # noqa: E501
        :type: list[MarketingAction]
        """

        self._actions = actions

    @property
    def current_period_from(self):
        """Gets the current_period_from of this ItemMarketing.  # noqa: E501

        Дата и время начала текущего периода по всем действующим акциям.  # noqa: E501

        :return: The current_period_from of this ItemMarketing.  # noqa: E501
        :rtype: datetime
        """
        return self._current_period_from

    @current_period_from.setter
    def current_period_from(self, current_period_from):
        """Sets the current_period_from of this ItemMarketing.

        Дата и время начала текущего периода по всем действующим акциям.  # noqa: E501

        :param current_period_from: The current_period_from of this ItemMarketing.  # noqa: E501
        :type: datetime
        """

        self._current_period_from = current_period_from

    @property
    def current_period_to(self):
        """Gets the current_period_to of this ItemMarketing.  # noqa: E501

        Дата и время окончания текущего периода по всем действующим акциям.  # noqa: E501

        :return: The current_period_to of this ItemMarketing.  # noqa: E501
        :rtype: datetime
        """
        return self._current_period_to

    @current_period_to.setter
    def current_period_to(self, current_period_to):
        """Sets the current_period_to of this ItemMarketing.

        Дата и время окончания текущего периода по всем действующим акциям.  # noqa: E501

        :param current_period_to: The current_period_to of this ItemMarketing.  # noqa: E501
        :type: datetime
        """

        self._current_period_to = current_period_to

    @property
    def ozon_actions_exist(self):
        """Gets the ozon_actions_exist of this ItemMarketing.  # noqa: E501

        `true`, если к товару можно применить акцию за счёт Ozon.   # noqa: E501

        :return: The ozon_actions_exist of this ItemMarketing.  # noqa: E501
        :rtype: bool
        """
        return self._ozon_actions_exist

    @ozon_actions_exist.setter
    def ozon_actions_exist(self, ozon_actions_exist):
        """Sets the ozon_actions_exist of this ItemMarketing.

        `true`, если к товару можно применить акцию за счёт Ozon.   # noqa: E501

        :param ozon_actions_exist: The ozon_actions_exist of this ItemMarketing.  # noqa: E501
        :type: bool
        """

        self._ozon_actions_exist = ozon_actions_exist

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemMarketing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemMarketing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
