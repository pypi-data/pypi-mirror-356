# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetReturnsListRequestFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logistic_return_date': 'V1TimeRangeReturnDate',
        'storage_tariffication_start_date': 'V1TimeRangeStorageTariffication',
        'visual_status_change_moment': 'V1TimeRangeVisualStatus',
        'order_id': 'int',
        'posting_numbers': 'list[str]',
        'product_name': 'str',
        'offer_id': 'str',
        'visual_status_name': 'str',
        'warehouse_id': 'int',
        'barcode': 'str',
        'return_schema': 'str'
    }

    attribute_map = {
        'logistic_return_date': 'logistic_return_date',
        'storage_tariffication_start_date': 'storage_tariffication_start_date',
        'visual_status_change_moment': 'visual_status_change_moment',
        'order_id': 'order_id',
        'posting_numbers': 'posting_numbers',
        'product_name': 'product_name',
        'offer_id': 'offer_id',
        'visual_status_name': 'visual_status_name',
        'warehouse_id': 'warehouse_id',
        'barcode': 'barcode',
        'return_schema': 'return_schema'
    }

    def __init__(self, logistic_return_date=None, storage_tariffication_start_date=None, visual_status_change_moment=None, order_id=None, posting_numbers=None, product_name=None, offer_id=None, visual_status_name=None, warehouse_id=None, barcode=None, return_schema=None):  # noqa: E501
        """GetReturnsListRequestFilter - a model defined in Swagger"""  # noqa: E501
        self._logistic_return_date = None
        self._storage_tariffication_start_date = None
        self._visual_status_change_moment = None
        self._order_id = None
        self._posting_numbers = None
        self._product_name = None
        self._offer_id = None
        self._visual_status_name = None
        self._warehouse_id = None
        self._barcode = None
        self._return_schema = None
        self.discriminator = None
        if logistic_return_date is not None:
            self.logistic_return_date = logistic_return_date
        if storage_tariffication_start_date is not None:
            self.storage_tariffication_start_date = storage_tariffication_start_date
        if visual_status_change_moment is not None:
            self.visual_status_change_moment = visual_status_change_moment
        if order_id is not None:
            self.order_id = order_id
        if posting_numbers is not None:
            self.posting_numbers = posting_numbers
        if product_name is not None:
            self.product_name = product_name
        if offer_id is not None:
            self.offer_id = offer_id
        if visual_status_name is not None:
            self.visual_status_name = visual_status_name
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if barcode is not None:
            self.barcode = barcode
        if return_schema is not None:
            self.return_schema = return_schema

    @property
    def logistic_return_date(self):
        """Gets the logistic_return_date of this GetReturnsListRequestFilter.  # noqa: E501


        :return: The logistic_return_date of this GetReturnsListRequestFilter.  # noqa: E501
        :rtype: V1TimeRangeReturnDate
        """
        return self._logistic_return_date

    @logistic_return_date.setter
    def logistic_return_date(self, logistic_return_date):
        """Sets the logistic_return_date of this GetReturnsListRequestFilter.


        :param logistic_return_date: The logistic_return_date of this GetReturnsListRequestFilter.  # noqa: E501
        :type: V1TimeRangeReturnDate
        """

        self._logistic_return_date = logistic_return_date

    @property
    def storage_tariffication_start_date(self):
        """Gets the storage_tariffication_start_date of this GetReturnsListRequestFilter.  # noqa: E501


        :return: The storage_tariffication_start_date of this GetReturnsListRequestFilter.  # noqa: E501
        :rtype: V1TimeRangeStorageTariffication
        """
        return self._storage_tariffication_start_date

    @storage_tariffication_start_date.setter
    def storage_tariffication_start_date(self, storage_tariffication_start_date):
        """Sets the storage_tariffication_start_date of this GetReturnsListRequestFilter.


        :param storage_tariffication_start_date: The storage_tariffication_start_date of this GetReturnsListRequestFilter.  # noqa: E501
        :type: V1TimeRangeStorageTariffication
        """

        self._storage_tariffication_start_date = storage_tariffication_start_date

    @property
    def visual_status_change_moment(self):
        """Gets the visual_status_change_moment of this GetReturnsListRequestFilter.  # noqa: E501


        :return: The visual_status_change_moment of this GetReturnsListRequestFilter.  # noqa: E501
        :rtype: V1TimeRangeVisualStatus
        """
        return self._visual_status_change_moment

    @visual_status_change_moment.setter
    def visual_status_change_moment(self, visual_status_change_moment):
        """Sets the visual_status_change_moment of this GetReturnsListRequestFilter.


        :param visual_status_change_moment: The visual_status_change_moment of this GetReturnsListRequestFilter.  # noqa: E501
        :type: V1TimeRangeVisualStatus
        """

        self._visual_status_change_moment = visual_status_change_moment

    @property
    def order_id(self):
        """Gets the order_id of this GetReturnsListRequestFilter.  # noqa: E501

        Фильтр по идентификатору заказа.  # noqa: E501

        :return: The order_id of this GetReturnsListRequestFilter.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this GetReturnsListRequestFilter.

        Фильтр по идентификатору заказа.  # noqa: E501

        :param order_id: The order_id of this GetReturnsListRequestFilter.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    @property
    def posting_numbers(self):
        """Gets the posting_numbers of this GetReturnsListRequestFilter.  # noqa: E501

        Фильтр по номеру отправления. Передавайте не больше 50 постингов.  # noqa: E501

        :return: The posting_numbers of this GetReturnsListRequestFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._posting_numbers

    @posting_numbers.setter
    def posting_numbers(self, posting_numbers):
        """Sets the posting_numbers of this GetReturnsListRequestFilter.

        Фильтр по номеру отправления. Передавайте не больше 50 постингов.  # noqa: E501

        :param posting_numbers: The posting_numbers of this GetReturnsListRequestFilter.  # noqa: E501
        :type: list[str]
        """

        self._posting_numbers = posting_numbers

    @property
    def product_name(self):
        """Gets the product_name of this GetReturnsListRequestFilter.  # noqa: E501

        Фильтр по названию товара.  # noqa: E501

        :return: The product_name of this GetReturnsListRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this GetReturnsListRequestFilter.

        Фильтр по названию товара.  # noqa: E501

        :param product_name: The product_name of this GetReturnsListRequestFilter.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def offer_id(self):
        """Gets the offer_id of this GetReturnsListRequestFilter.  # noqa: E501

        Фильтр по артикулу товара.  # noqa: E501

        :return: The offer_id of this GetReturnsListRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this GetReturnsListRequestFilter.

        Фильтр по артикулу товара.  # noqa: E501

        :param offer_id: The offer_id of this GetReturnsListRequestFilter.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def visual_status_name(self):
        """Gets the visual_status_name of this GetReturnsListRequestFilter.  # noqa: E501

        Фильтр по статусу возврата: - `DisputeOpened` — открыт спор с покупателем; - `OnSellerApproval` — на согласовании у продавца; - `ArrivedAtReturnPlace` — в пункте выдачи; - `OnSellerClarification` — на уточнении у продавца; - `OnSellerClarificationAfterPartialCompensation` — на уточнении у продавца после частичной компенсации; - `OfferedPartialCompensation` — предложена частичная компенсация; - `ReturnMoneyApproved` — одобрен возврат денег; - `PartialCompensationReturned` — вернули часть денег; - `CancelledDisputeNotOpen` — возврат отклонён, спор не открыт; - `Rejected` — заявка отклонена; - `CrmRejected` — заявка отклонена Ozon; - `Cancelled` — заявка отменена; - `Approved` — заявка одобрена продавцом; - `ApprovedByOzon` — заявка одобрена Ozon; - `ReceivedBySeller` — продавец получил возврат; - `MovingToSeller` — возврат на пути к продавцу; - `ReturnCompensated` — продавец получил компенсацию; - `ReturningToSellerByCourier` — курьер везёт возврат продавцу; - `Utilizing` — на утилизации; - `Utilized` — утилизирован; - `MoneyReturned` — покупателю вернули всю сумму; - `PartialCompensationInProcess` — одобрен частичный возврат денег; - `DisputeYouOpened` — продавец открыл спор; - `CompensationRejected` — отказано в компенсации; - `DisputeOpening` — обращение в поддержку отправлено; - `CompensationOffered` — ожидает вашего решения по компенсации; - `WaitingCompensation` — ожидает компенсации; - `SendingError` — ошибка при отправке обращения в поддержку; - `CompensationRejectedBySla` — истёк срок решения; - `CompensationRejectedBySeller` — продавец отказался от компенсации; - `MovingToOzon` — едет на склад Ozon; - `ReturnedToOzon` — на складе Ozon; - `MoneyReturnedBySystem` — быстрый возврат; - `WaitingShipment` — ожидает отправки.   # noqa: E501

        :return: The visual_status_name of this GetReturnsListRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._visual_status_name

    @visual_status_name.setter
    def visual_status_name(self, visual_status_name):
        """Sets the visual_status_name of this GetReturnsListRequestFilter.

        Фильтр по статусу возврата: - `DisputeOpened` — открыт спор с покупателем; - `OnSellerApproval` — на согласовании у продавца; - `ArrivedAtReturnPlace` — в пункте выдачи; - `OnSellerClarification` — на уточнении у продавца; - `OnSellerClarificationAfterPartialCompensation` — на уточнении у продавца после частичной компенсации; - `OfferedPartialCompensation` — предложена частичная компенсация; - `ReturnMoneyApproved` — одобрен возврат денег; - `PartialCompensationReturned` — вернули часть денег; - `CancelledDisputeNotOpen` — возврат отклонён, спор не открыт; - `Rejected` — заявка отклонена; - `CrmRejected` — заявка отклонена Ozon; - `Cancelled` — заявка отменена; - `Approved` — заявка одобрена продавцом; - `ApprovedByOzon` — заявка одобрена Ozon; - `ReceivedBySeller` — продавец получил возврат; - `MovingToSeller` — возврат на пути к продавцу; - `ReturnCompensated` — продавец получил компенсацию; - `ReturningToSellerByCourier` — курьер везёт возврат продавцу; - `Utilizing` — на утилизации; - `Utilized` — утилизирован; - `MoneyReturned` — покупателю вернули всю сумму; - `PartialCompensationInProcess` — одобрен частичный возврат денег; - `DisputeYouOpened` — продавец открыл спор; - `CompensationRejected` — отказано в компенсации; - `DisputeOpening` — обращение в поддержку отправлено; - `CompensationOffered` — ожидает вашего решения по компенсации; - `WaitingCompensation` — ожидает компенсации; - `SendingError` — ошибка при отправке обращения в поддержку; - `CompensationRejectedBySla` — истёк срок решения; - `CompensationRejectedBySeller` — продавец отказался от компенсации; - `MovingToOzon` — едет на склад Ozon; - `ReturnedToOzon` — на складе Ozon; - `MoneyReturnedBySystem` — быстрый возврат; - `WaitingShipment` — ожидает отправки.   # noqa: E501

        :param visual_status_name: The visual_status_name of this GetReturnsListRequestFilter.  # noqa: E501
        :type: str
        """

        self._visual_status_name = visual_status_name

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this GetReturnsListRequestFilter.  # noqa: E501

        Фильтр по идентификатору склада.  # noqa: E501

        :return: The warehouse_id of this GetReturnsListRequestFilter.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this GetReturnsListRequestFilter.

        Фильтр по идентификатору склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this GetReturnsListRequestFilter.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    @property
    def barcode(self):
        """Gets the barcode of this GetReturnsListRequestFilter.  # noqa: E501

        Фильтр по штрихкоду возвратной этикетки.  # noqa: E501

        :return: The barcode of this GetReturnsListRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this GetReturnsListRequestFilter.

        Фильтр по штрихкоду возвратной этикетки.  # noqa: E501

        :param barcode: The barcode of this GetReturnsListRequestFilter.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def return_schema(self):
        """Gets the return_schema of this GetReturnsListRequestFilter.  # noqa: E501

        Фильтр по схеме доставки: `FBS` или `FBO`.   # noqa: E501

        :return: The return_schema of this GetReturnsListRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._return_schema

    @return_schema.setter
    def return_schema(self, return_schema):
        """Sets the return_schema of this GetReturnsListRequestFilter.

        Фильтр по схеме доставки: `FBS` или `FBO`.   # noqa: E501

        :param return_schema: The return_schema of this GetReturnsListRequestFilter.  # noqa: E501
        :type: str
        """

        self._return_schema = return_schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetReturnsListRequestFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetReturnsListRequestFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
