# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChatHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chat_id': 'str',
        'direction': 'str',
        'from_message_id': 'int',
        'limit': 'int'
    }

    attribute_map = {
        'chat_id': 'chat_id',
        'direction': 'direction',
        'from_message_id': 'from_message_id',
        'limit': 'limit'
    }

    def __init__(self, chat_id=None, direction=None, from_message_id=None, limit=None):  # noqa: E501
        """ChatHistory - a model defined in Swagger"""  # noqa: E501
        self._chat_id = None
        self._direction = None
        self._from_message_id = None
        self._limit = None
        self.discriminator = None
        self.chat_id = chat_id
        if direction is not None:
            self.direction = direction
        if from_message_id is not None:
            self.from_message_id = from_message_id
        if limit is not None:
            self.limit = limit

    @property
    def chat_id(self):
        """Gets the chat_id of this ChatHistory.  # noqa: E501

        Идентификатор чата.  # noqa: E501

        :return: The chat_id of this ChatHistory.  # noqa: E501
        :rtype: str
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this ChatHistory.

        Идентификатор чата.  # noqa: E501

        :param chat_id: The chat_id of this ChatHistory.  # noqa: E501
        :type: str
        """
        if chat_id is None:
            raise ValueError("Invalid value for `chat_id`, must not be `None`")  # noqa: E501

        self._chat_id = chat_id

    @property
    def direction(self):
        """Gets the direction of this ChatHistory.  # noqa: E501

        Направление сортировки сообщений: - `Forward` — от старых к новым. - `Backward` — от новых к старым.  Значение по умолчанию — `Backward`. Количество сообщений можно установить в параметре `limit`.   # noqa: E501

        :return: The direction of this ChatHistory.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ChatHistory.

        Направление сортировки сообщений: - `Forward` — от старых к новым. - `Backward` — от новых к старым.  Значение по умолчанию — `Backward`. Количество сообщений можно установить в параметре `limit`.   # noqa: E501

        :param direction: The direction of this ChatHistory.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def from_message_id(self):
        """Gets the from_message_id of this ChatHistory.  # noqa: E501

        Идентификатор сообщения, с которого начать вывод истории чата. По умолчанию — последнее видимое сообщение.  # noqa: E501

        :return: The from_message_id of this ChatHistory.  # noqa: E501
        :rtype: int
        """
        return self._from_message_id

    @from_message_id.setter
    def from_message_id(self, from_message_id):
        """Sets the from_message_id of this ChatHistory.

        Идентификатор сообщения, с которого начать вывод истории чата. По умолчанию — последнее видимое сообщение.  # noqa: E501

        :param from_message_id: The from_message_id of this ChatHistory.  # noqa: E501
        :type: int
        """

        self._from_message_id = from_message_id

    @property
    def limit(self):
        """Gets the limit of this ChatHistory.  # noqa: E501

        Количество сообщений в ответе. По умолчанию — 50. Максимальное значение — 1000.  # noqa: E501

        :return: The limit of this ChatHistory.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ChatHistory.

        Количество сообщений в ответе. По умолчанию — 50. Максимальное значение — 1000.  # noqa: E501

        :param limit: The limit of this ChatHistory.  # noqa: E501
        :type: int
        """

        self._limit = limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChatHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChatHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
