# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1AnalyticsManageStocksResponseItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'defect_stock_count': 'int',
        'expiring_stock_count': 'int',
        'name': 'str',
        'offer_id': 'str',
        'sku': 'int',
        'valid_stock_count': 'int',
        'waitingdocs_stock_count': 'int',
        'warehouse_name': 'str'
    }

    attribute_map = {
        'defect_stock_count': 'defect_stock_count',
        'expiring_stock_count': 'expiring_stock_count',
        'name': 'name',
        'offer_id': 'offer_id',
        'sku': 'sku',
        'valid_stock_count': 'valid_stock_count',
        'waitingdocs_stock_count': 'waitingdocs_stock_count',
        'warehouse_name': 'warehouse_name'
    }

    def __init__(self, defect_stock_count=None, expiring_stock_count=None, name=None, offer_id=None, sku=None, valid_stock_count=None, waitingdocs_stock_count=None, warehouse_name=None):  # noqa: E501
        """V1AnalyticsManageStocksResponseItem - a model defined in Swagger"""  # noqa: E501
        self._defect_stock_count = None
        self._expiring_stock_count = None
        self._name = None
        self._offer_id = None
        self._sku = None
        self._valid_stock_count = None
        self._waitingdocs_stock_count = None
        self._warehouse_name = None
        self.discriminator = None
        if defect_stock_count is not None:
            self.defect_stock_count = defect_stock_count
        if expiring_stock_count is not None:
            self.expiring_stock_count = expiring_stock_count
        if name is not None:
            self.name = name
        if offer_id is not None:
            self.offer_id = offer_id
        if sku is not None:
            self.sku = sku
        if valid_stock_count is not None:
            self.valid_stock_count = valid_stock_count
        if waitingdocs_stock_count is not None:
            self.waitingdocs_stock_count = waitingdocs_stock_count
        if warehouse_name is not None:
            self.warehouse_name = warehouse_name

    @property
    def defect_stock_count(self):
        """Gets the defect_stock_count of this V1AnalyticsManageStocksResponseItem.  # noqa: E501

        Остаток дефектного товара, шт.  # noqa: E501

        :return: The defect_stock_count of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._defect_stock_count

    @defect_stock_count.setter
    def defect_stock_count(self, defect_stock_count):
        """Sets the defect_stock_count of this V1AnalyticsManageStocksResponseItem.

        Остаток дефектного товара, шт.  # noqa: E501

        :param defect_stock_count: The defect_stock_count of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :type: int
        """

        self._defect_stock_count = defect_stock_count

    @property
    def expiring_stock_count(self):
        """Gets the expiring_stock_count of this V1AnalyticsManageStocksResponseItem.  # noqa: E501

        Остаток товара с истекающим сроком годности, шт.  # noqa: E501

        :return: The expiring_stock_count of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._expiring_stock_count

    @expiring_stock_count.setter
    def expiring_stock_count(self, expiring_stock_count):
        """Sets the expiring_stock_count of this V1AnalyticsManageStocksResponseItem.

        Остаток товара с истекающим сроком годности, шт.  # noqa: E501

        :param expiring_stock_count: The expiring_stock_count of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :type: int
        """

        self._expiring_stock_count = expiring_stock_count

    @property
    def name(self):
        """Gets the name of this V1AnalyticsManageStocksResponseItem.  # noqa: E501

        Название товара.  # noqa: E501

        :return: The name of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1AnalyticsManageStocksResponseItem.

        Название товара.  # noqa: E501

        :param name: The name of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def offer_id(self):
        """Gets the offer_id of this V1AnalyticsManageStocksResponseItem.  # noqa: E501

        Артикул товара в системе продавца.  # noqa: E501

        :return: The offer_id of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this V1AnalyticsManageStocksResponseItem.

        Артикул товара в системе продавца.  # noqa: E501

        :param offer_id: The offer_id of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def sku(self):
        """Gets the sku of this V1AnalyticsManageStocksResponseItem.  # noqa: E501

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :return: The sku of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this V1AnalyticsManageStocksResponseItem.

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :param sku: The sku of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def valid_stock_count(self):
        """Gets the valid_stock_count of this V1AnalyticsManageStocksResponseItem.  # noqa: E501

        Остаток товара, доступного для продажи.  # noqa: E501

        :return: The valid_stock_count of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._valid_stock_count

    @valid_stock_count.setter
    def valid_stock_count(self, valid_stock_count):
        """Sets the valid_stock_count of this V1AnalyticsManageStocksResponseItem.

        Остаток товара, доступного для продажи.  # noqa: E501

        :param valid_stock_count: The valid_stock_count of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :type: int
        """

        self._valid_stock_count = valid_stock_count

    @property
    def waitingdocs_stock_count(self):
        """Gets the waitingdocs_stock_count of this V1AnalyticsManageStocksResponseItem.  # noqa: E501

        Остаток товара, ожидающего документы.  # noqa: E501

        :return: The waitingdocs_stock_count of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._waitingdocs_stock_count

    @waitingdocs_stock_count.setter
    def waitingdocs_stock_count(self, waitingdocs_stock_count):
        """Sets the waitingdocs_stock_count of this V1AnalyticsManageStocksResponseItem.

        Остаток товара, ожидающего документы.  # noqa: E501

        :param waitingdocs_stock_count: The waitingdocs_stock_count of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :type: int
        """

        self._waitingdocs_stock_count = waitingdocs_stock_count

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this V1AnalyticsManageStocksResponseItem.  # noqa: E501

        Название склада.  # noqa: E501

        :return: The warehouse_name of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this V1AnalyticsManageStocksResponseItem.

        Название склада.  # noqa: E501

        :param warehouse_name: The warehouse_name of this V1AnalyticsManageStocksResponseItem.  # noqa: E501
        :type: str
        """

        self._warehouse_name = warehouse_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AnalyticsManageStocksResponseItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AnalyticsManageStocksResponseItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
