# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2ReportReturnsCreateRequestFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delivery_schema': 'str',
        'date_from': 'datetime',
        'date_to': 'datetime',
        'status': 'str'
    }

    attribute_map = {
        'delivery_schema': 'delivery_schema',
        'date_from': 'date_from',
        'date_to': 'date_to',
        'status': 'status'
    }

    def __init__(self, delivery_schema=None, date_from=None, date_to=None, status=None):  # noqa: E501
        """V2ReportReturnsCreateRequestFilter - a model defined in Swagger"""  # noqa: E501
        self._delivery_schema = None
        self._date_from = None
        self._date_to = None
        self._status = None
        self.discriminator = None
        if delivery_schema is not None:
            self.delivery_schema = delivery_schema
        if date_from is not None:
            self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to
        if status is not None:
            self.status = status

    @property
    def delivery_schema(self):
        """Gets the delivery_schema of this V2ReportReturnsCreateRequestFilter.  # noqa: E501

        Фильтр по схеме работы:  - `FBS` — возвраты на свой склад.  - `FBO` — возвраты на склад маркетплейса. - `ALL` — все возвраты.   # noqa: E501

        :return: The delivery_schema of this V2ReportReturnsCreateRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._delivery_schema

    @delivery_schema.setter
    def delivery_schema(self, delivery_schema):
        """Sets the delivery_schema of this V2ReportReturnsCreateRequestFilter.

        Фильтр по схеме работы:  - `FBS` — возвраты на свой склад.  - `FBO` — возвраты на склад маркетплейса. - `ALL` — все возвраты.   # noqa: E501

        :param delivery_schema: The delivery_schema of this V2ReportReturnsCreateRequestFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["FBS", "FBO", "ALL"]  # noqa: E501
        if delivery_schema not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_schema` ({0}), must be one of {1}"  # noqa: E501
                .format(delivery_schema, allowed_values)
            )

        self._delivery_schema = delivery_schema

    @property
    def date_from(self):
        """Gets the date_from of this V2ReportReturnsCreateRequestFilter.  # noqa: E501

        Дата, с которой данные отображаются в отчёте.  Доступно только за последние три месяца.   # noqa: E501

        :return: The date_from of this V2ReportReturnsCreateRequestFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this V2ReportReturnsCreateRequestFilter.

        Дата, с которой данные отображаются в отчёте.  Доступно только за последние три месяца.   # noqa: E501

        :param date_from: The date_from of this V2ReportReturnsCreateRequestFilter.  # noqa: E501
        :type: datetime
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this V2ReportReturnsCreateRequestFilter.  # noqa: E501

        Дата, по которую данные отображаются в отчёте.  Доступно только за последние три месяца.   # noqa: E501

        :return: The date_to of this V2ReportReturnsCreateRequestFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this V2ReportReturnsCreateRequestFilter.

        Дата, по которую данные отображаются в отчёте.  Доступно только за последние три месяца.   # noqa: E501

        :param date_to: The date_to of this V2ReportReturnsCreateRequestFilter.  # noqa: E501
        :type: datetime
        """

        self._date_to = date_to

    @property
    def status(self):
        """Gets the status of this V2ReportReturnsCreateRequestFilter.  # noqa: E501

        Фильтр по статусу возврата: - `DisputeOpened` — открыт спор с покупателем; - `OnSellerApproval` — на согласовании у продавца; - `ArrivedAtReturnPlace` — в пункте выдачи; - `OnSellerClarification` — на уточнении у продавца; - `OnSellerClarificationAfterPartialCompensation` — на уточнении у продавца после частичной компенсации; - `OfferedPartialCompensation` — предложена частичная компенсация; - `ReturnMoneyApproved` — одобрен возврат денег; - `PartialCompensationReturned` — вернули часть денег; - `CancelledDisputeNotOpen` — возврат отклонён, спор не открыт; - `Rejected` — заявка отклонена; - `CrmRejected` — заявка отклонена Ozon; - `Cancelled` — заявка отменена; - `Approved` — заявка одобрена продавцом; - `ApprovedByOzon` — заявка одобрена Ozon; - `ReceivedBySeller` — продавец получил возврат; - `MovingToSeller` — возврат на пути к продавцу; - `ReturnCompensated` — продавец получил компенсацию; - `ReturningToSellerByCourier` — курьер везёт возврат продавцу; - `Utilizing` — на утилизации; - `Utilized` — утилизирован; - `MoneyReturned` — покупателю вернули всю сумму; - `PartialCompensationInProcess` — одобрен частичный возврат денег; - `DisputeYouOpened` — продавец открыл спор; - `CompensationRejected` — отказано в компенсации; - `DisputeOpening` — обращение в поддержку отправлено; - `CompensationOffered` — ожидает вашего решения по компенсации; - `WaitingCompensation` — ожидает компенсации; - `SendingError` — ошибка при отправке обращения в поддержку; - `CompensationRejectedBySla` — истёк срок решения; - `CompensationRejectedBySeller` — продавец отказался от компенсации; - `MovingToOzon` — едет на склад Ozon; - `ReturnedToOzon` — на складе Ozon; - `MoneyReturnedBySystem` — быстрый возврат; - `WaitingShipment` — ожидает отправки.   # noqa: E501

        :return: The status of this V2ReportReturnsCreateRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V2ReportReturnsCreateRequestFilter.

        Фильтр по статусу возврата: - `DisputeOpened` — открыт спор с покупателем; - `OnSellerApproval` — на согласовании у продавца; - `ArrivedAtReturnPlace` — в пункте выдачи; - `OnSellerClarification` — на уточнении у продавца; - `OnSellerClarificationAfterPartialCompensation` — на уточнении у продавца после частичной компенсации; - `OfferedPartialCompensation` — предложена частичная компенсация; - `ReturnMoneyApproved` — одобрен возврат денег; - `PartialCompensationReturned` — вернули часть денег; - `CancelledDisputeNotOpen` — возврат отклонён, спор не открыт; - `Rejected` — заявка отклонена; - `CrmRejected` — заявка отклонена Ozon; - `Cancelled` — заявка отменена; - `Approved` — заявка одобрена продавцом; - `ApprovedByOzon` — заявка одобрена Ozon; - `ReceivedBySeller` — продавец получил возврат; - `MovingToSeller` — возврат на пути к продавцу; - `ReturnCompensated` — продавец получил компенсацию; - `ReturningToSellerByCourier` — курьер везёт возврат продавцу; - `Utilizing` — на утилизации; - `Utilized` — утилизирован; - `MoneyReturned` — покупателю вернули всю сумму; - `PartialCompensationInProcess` — одобрен частичный возврат денег; - `DisputeYouOpened` — продавец открыл спор; - `CompensationRejected` — отказано в компенсации; - `DisputeOpening` — обращение в поддержку отправлено; - `CompensationOffered` — ожидает вашего решения по компенсации; - `WaitingCompensation` — ожидает компенсации; - `SendingError` — ошибка при отправке обращения в поддержку; - `CompensationRejectedBySla` — истёк срок решения; - `CompensationRejectedBySeller` — продавец отказался от компенсации; - `MovingToOzon` — едет на склад Ozon; - `ReturnedToOzon` — на складе Ozon; - `MoneyReturnedBySystem` — быстрый возврат; - `WaitingShipment` — ожидает отправки.   # noqa: E501

        :param status: The status of this V2ReportReturnsCreateRequestFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["DisputeOpened", "OnSellerApproval", "ArrivedAtReturnPlace", "OnSellerClarification", "OnSellerClarificationAfterPartialCompensation", "OfferedPartialCompensation", "ReturnMoneyApproved", "PartialCompensationReturned", "CancelledDisputeNotOpen", "Rejected", "CrmRejected", "Cancelled", "Approved", "ApprovedByOzon", "ReceivedBySeller", "MovingToSeller", "ReturnCompensated", "ReturningToSellerByCourier", "Utilizing", "Utilized", "MoneyReturned", "PartialCompensationInProcess", "DisputeYouOpened", "CompensationRejected", "DisputeOpening", "CompensationOffered", "WaitingCompensation", "SendingError", "CompensationRejectedBySla", "CompensationRejectedBySeller", "MovingToOzon", "ReturnedToOzon", "MoneyReturnedBySystem", "WaitingShipment"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2ReportReturnsCreateRequestFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2ReportReturnsCreateRequestFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
