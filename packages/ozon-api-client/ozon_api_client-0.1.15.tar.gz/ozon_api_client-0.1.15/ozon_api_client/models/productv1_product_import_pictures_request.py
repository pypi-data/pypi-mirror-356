# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Productv1ProductImportPicturesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color_image': 'str',
        'images': 'list[str]',
        'images360': 'list[str]',
        'product_id': 'int'
    }

    attribute_map = {
        'color_image': 'color_image',
        'images': 'images',
        'images360': 'images360',
        'product_id': 'product_id'
    }

    def __init__(self, color_image=None, images=None, images360=None, product_id=None):  # noqa: E501
        """Productv1ProductImportPicturesRequest - a model defined in Swagger"""  # noqa: E501
        self._color_image = None
        self._images = None
        self._images360 = None
        self._product_id = None
        self.discriminator = None
        if color_image is not None:
            self.color_image = color_image
        if images is not None:
            self.images = images
        if images360 is not None:
            self.images360 = images360
        if product_id is not None:
            self.product_id = product_id

    @property
    def color_image(self):
        """Gets the color_image of this Productv1ProductImportPicturesRequest.  # noqa: E501

        Маркетинговый цвет.  # noqa: E501

        :return: The color_image of this Productv1ProductImportPicturesRequest.  # noqa: E501
        :rtype: str
        """
        return self._color_image

    @color_image.setter
    def color_image(self, color_image):
        """Sets the color_image of this Productv1ProductImportPicturesRequest.

        Маркетинговый цвет.  # noqa: E501

        :param color_image: The color_image of this Productv1ProductImportPicturesRequest.  # noqa: E501
        :type: str
        """

        self._color_image = color_image

    @property
    def images(self):
        """Gets the images of this Productv1ProductImportPicturesRequest.  # noqa: E501

        Массив ссылок на изображения.  Изображения в массиве расположены в порядке их расположения на сайте.  Первое изображение в массиве будет главным.   # noqa: E501

        :return: The images of this Productv1ProductImportPicturesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Productv1ProductImportPicturesRequest.

        Массив ссылок на изображения.  Изображения в массиве расположены в порядке их расположения на сайте.  Первое изображение в массиве будет главным.   # noqa: E501

        :param images: The images of this Productv1ProductImportPicturesRequest.  # noqa: E501
        :type: list[str]
        """

        self._images = images

    @property
    def images360(self):
        """Gets the images360 of this Productv1ProductImportPicturesRequest.  # noqa: E501

        Массив изображений 360. До 70 штук.  Формат: адрес ссылки на изображение в общедоступном облачном хранилище. Формат изображения по ссылке — JPG.   # noqa: E501

        :return: The images360 of this Productv1ProductImportPicturesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._images360

    @images360.setter
    def images360(self, images360):
        """Sets the images360 of this Productv1ProductImportPicturesRequest.

        Массив изображений 360. До 70 штук.  Формат: адрес ссылки на изображение в общедоступном облачном хранилище. Формат изображения по ссылке — JPG.   # noqa: E501

        :param images360: The images360 of this Productv1ProductImportPicturesRequest.  # noqa: E501
        :type: list[str]
        """

        self._images360 = images360

    @property
    def product_id(self):
        """Gets the product_id of this Productv1ProductImportPicturesRequest.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this Productv1ProductImportPicturesRequest.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Productv1ProductImportPicturesRequest.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this Productv1ProductImportPicturesRequest.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Productv1ProductImportPicturesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Productv1ProductImportPicturesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
