# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArrivalPassListRequestFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arrival_pass_ids': 'list[str]',
        'arrival_reason': 'str',
        'dropoff_point_ids': 'list[str]',
        'only_active_passes': 'bool',
        'warehouse_ids': 'list[str]'
    }

    attribute_map = {
        'arrival_pass_ids': 'arrival_pass_ids',
        'arrival_reason': 'arrival_reason',
        'dropoff_point_ids': 'dropoff_point_ids',
        'only_active_passes': 'only_active_passes',
        'warehouse_ids': 'warehouse_ids'
    }

    def __init__(self, arrival_pass_ids=None, arrival_reason=None, dropoff_point_ids=None, only_active_passes=None, warehouse_ids=None):  # noqa: E501
        """ArrivalPassListRequestFilter - a model defined in Swagger"""  # noqa: E501
        self._arrival_pass_ids = None
        self._arrival_reason = None
        self._dropoff_point_ids = None
        self._only_active_passes = None
        self._warehouse_ids = None
        self.discriminator = None
        if arrival_pass_ids is not None:
            self.arrival_pass_ids = arrival_pass_ids
        if arrival_reason is not None:
            self.arrival_reason = arrival_reason
        if dropoff_point_ids is not None:
            self.dropoff_point_ids = dropoff_point_ids
        if only_active_passes is not None:
            self.only_active_passes = only_active_passes
        if warehouse_ids is not None:
            self.warehouse_ids = warehouse_ids

    @property
    def arrival_pass_ids(self):
        """Gets the arrival_pass_ids of this ArrivalPassListRequestFilter.  # noqa: E501

        Фильтр по идентификатору пропуска.  # noqa: E501

        :return: The arrival_pass_ids of this ArrivalPassListRequestFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._arrival_pass_ids

    @arrival_pass_ids.setter
    def arrival_pass_ids(self, arrival_pass_ids):
        """Sets the arrival_pass_ids of this ArrivalPassListRequestFilter.

        Фильтр по идентификатору пропуска.  # noqa: E501

        :param arrival_pass_ids: The arrival_pass_ids of this ArrivalPassListRequestFilter.  # noqa: E501
        :type: list[str]
        """

        self._arrival_pass_ids = arrival_pass_ids

    @property
    def arrival_reason(self):
        """Gets the arrival_reason of this ArrivalPassListRequestFilter.  # noqa: E501

        Фильтр по цели въезда: - `FBS_DELIVERY` — отгрузка. - `FBS_RETURN` — вывоз возвратов.  Если параметр не указан, учитываются обе цели.  Указанная причина должна быть в списке причин в пропусках.   # noqa: E501

        :return: The arrival_reason of this ArrivalPassListRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._arrival_reason

    @arrival_reason.setter
    def arrival_reason(self, arrival_reason):
        """Sets the arrival_reason of this ArrivalPassListRequestFilter.

        Фильтр по цели въезда: - `FBS_DELIVERY` — отгрузка. - `FBS_RETURN` — вывоз возвратов.  Если параметр не указан, учитываются обе цели.  Указанная причина должна быть в списке причин в пропусках.   # noqa: E501

        :param arrival_reason: The arrival_reason of this ArrivalPassListRequestFilter.  # noqa: E501
        :type: str
        """

        self._arrival_reason = arrival_reason

    @property
    def dropoff_point_ids(self):
        """Gets the dropoff_point_ids of this ArrivalPassListRequestFilter.  # noqa: E501

        Фильтр по точке отгрузки.  # noqa: E501

        :return: The dropoff_point_ids of this ArrivalPassListRequestFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._dropoff_point_ids

    @dropoff_point_ids.setter
    def dropoff_point_ids(self, dropoff_point_ids):
        """Sets the dropoff_point_ids of this ArrivalPassListRequestFilter.

        Фильтр по точке отгрузки.  # noqa: E501

        :param dropoff_point_ids: The dropoff_point_ids of this ArrivalPassListRequestFilter.  # noqa: E501
        :type: list[str]
        """

        self._dropoff_point_ids = dropoff_point_ids

    @property
    def only_active_passes(self):
        """Gets the only_active_passes of this ArrivalPassListRequestFilter.  # noqa: E501

        `true`, чтобы получить только активные заявки на пропуск.   # noqa: E501

        :return: The only_active_passes of this ArrivalPassListRequestFilter.  # noqa: E501
        :rtype: bool
        """
        return self._only_active_passes

    @only_active_passes.setter
    def only_active_passes(self, only_active_passes):
        """Sets the only_active_passes of this ArrivalPassListRequestFilter.

        `true`, чтобы получить только активные заявки на пропуск.   # noqa: E501

        :param only_active_passes: The only_active_passes of this ArrivalPassListRequestFilter.  # noqa: E501
        :type: bool
        """

        self._only_active_passes = only_active_passes

    @property
    def warehouse_ids(self):
        """Gets the warehouse_ids of this ArrivalPassListRequestFilter.  # noqa: E501

        Фильтр по складу продавца.  # noqa: E501

        :return: The warehouse_ids of this ArrivalPassListRequestFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._warehouse_ids

    @warehouse_ids.setter
    def warehouse_ids(self, warehouse_ids):
        """Sets the warehouse_ids of this ArrivalPassListRequestFilter.

        Фильтр по складу продавца.  # noqa: E501

        :param warehouse_ids: The warehouse_ids of this ArrivalPassListRequestFilter.  # noqa: E501
        :type: list[str]
        """

        self._warehouse_ids = warehouse_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArrivalPassListRequestFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrivalPassListRequestFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
