# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChatChatSendFileRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base64_content': 'str',
        'chat_id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'base64_content': 'base64_content',
        'chat_id': 'chat_id',
        'name': 'name'
    }

    def __init__(self, base64_content=None, chat_id=None, name=None):  # noqa: E501
        """ChatChatSendFileRequest - a model defined in Swagger"""  # noqa: E501
        self._base64_content = None
        self._chat_id = None
        self._name = None
        self.discriminator = None
        if base64_content is not None:
            self.base64_content = base64_content
        if chat_id is not None:
            self.chat_id = chat_id
        if name is not None:
            self.name = name

    @property
    def base64_content(self):
        """Gets the base64_content of this ChatChatSendFileRequest.  # noqa: E501

        Файл в виде строки base64.  # noqa: E501

        :return: The base64_content of this ChatChatSendFileRequest.  # noqa: E501
        :rtype: str
        """
        return self._base64_content

    @base64_content.setter
    def base64_content(self, base64_content):
        """Sets the base64_content of this ChatChatSendFileRequest.

        Файл в виде строки base64.  # noqa: E501

        :param base64_content: The base64_content of this ChatChatSendFileRequest.  # noqa: E501
        :type: str
        """

        self._base64_content = base64_content

    @property
    def chat_id(self):
        """Gets the chat_id of this ChatChatSendFileRequest.  # noqa: E501

        Идентификатор чата.  # noqa: E501

        :return: The chat_id of this ChatChatSendFileRequest.  # noqa: E501
        :rtype: str
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this ChatChatSendFileRequest.

        Идентификатор чата.  # noqa: E501

        :param chat_id: The chat_id of this ChatChatSendFileRequest.  # noqa: E501
        :type: str
        """

        self._chat_id = chat_id

    @property
    def name(self):
        """Gets the name of this ChatChatSendFileRequest.  # noqa: E501

        Название файла с расширением.  # noqa: E501

        :return: The name of this ChatChatSendFileRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChatChatSendFileRequest.

        Название файла с расширением.  # noqa: E501

        :param name: The name of this ChatChatSendFileRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChatChatSendFileRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChatChatSendFileRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
