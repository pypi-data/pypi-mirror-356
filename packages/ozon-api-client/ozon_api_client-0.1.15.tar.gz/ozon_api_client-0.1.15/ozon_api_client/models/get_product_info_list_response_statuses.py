# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetProductInfoListResponseStatuses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_created': 'bool',
        'moderate_status': 'str',
        'status': 'str',
        'status_description': 'str',
        'status_failed': 'str',
        'status_name': 'str',
        'status_tooltip': 'str',
        'status_updated_at': 'datetime',
        'validation_status': 'str'
    }

    attribute_map = {
        'is_created': 'is_created',
        'moderate_status': 'moderate_status',
        'status': 'status',
        'status_description': 'status_description',
        'status_failed': 'status_failed',
        'status_name': 'status_name',
        'status_tooltip': 'status_tooltip',
        'status_updated_at': 'status_updated_at',
        'validation_status': 'validation_status'
    }

    def __init__(self, is_created=None, moderate_status=None, status=None, status_description=None, status_failed=None, status_name=None, status_tooltip=None, status_updated_at=None, validation_status=None):  # noqa: E501
        """GetProductInfoListResponseStatuses - a model defined in Swagger"""  # noqa: E501
        self._is_created = None
        self._moderate_status = None
        self._status = None
        self._status_description = None
        self._status_failed = None
        self._status_name = None
        self._status_tooltip = None
        self._status_updated_at = None
        self._validation_status = None
        self.discriminator = None
        if is_created is not None:
            self.is_created = is_created
        if moderate_status is not None:
            self.moderate_status = moderate_status
        if status is not None:
            self.status = status
        if status_description is not None:
            self.status_description = status_description
        if status_failed is not None:
            self.status_failed = status_failed
        if status_name is not None:
            self.status_name = status_name
        if status_tooltip is not None:
            self.status_tooltip = status_tooltip
        if status_updated_at is not None:
            self.status_updated_at = status_updated_at
        if validation_status is not None:
            self.validation_status = validation_status

    @property
    def is_created(self):
        """Gets the is_created of this GetProductInfoListResponseStatuses.  # noqa: E501

        `true`, если товар создан корректно.   # noqa: E501

        :return: The is_created of this GetProductInfoListResponseStatuses.  # noqa: E501
        :rtype: bool
        """
        return self._is_created

    @is_created.setter
    def is_created(self, is_created):
        """Sets the is_created of this GetProductInfoListResponseStatuses.

        `true`, если товар создан корректно.   # noqa: E501

        :param is_created: The is_created of this GetProductInfoListResponseStatuses.  # noqa: E501
        :type: bool
        """

        self._is_created = is_created

    @property
    def moderate_status(self):
        """Gets the moderate_status of this GetProductInfoListResponseStatuses.  # noqa: E501

        Статус модерации.  # noqa: E501

        :return: The moderate_status of this GetProductInfoListResponseStatuses.  # noqa: E501
        :rtype: str
        """
        return self._moderate_status

    @moderate_status.setter
    def moderate_status(self, moderate_status):
        """Sets the moderate_status of this GetProductInfoListResponseStatuses.

        Статус модерации.  # noqa: E501

        :param moderate_status: The moderate_status of this GetProductInfoListResponseStatuses.  # noqa: E501
        :type: str
        """

        self._moderate_status = moderate_status

    @property
    def status(self):
        """Gets the status of this GetProductInfoListResponseStatuses.  # noqa: E501

        Статус товара.  # noqa: E501

        :return: The status of this GetProductInfoListResponseStatuses.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetProductInfoListResponseStatuses.

        Статус товара.  # noqa: E501

        :param status: The status of this GetProductInfoListResponseStatuses.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_description(self):
        """Gets the status_description of this GetProductInfoListResponseStatuses.  # noqa: E501

        Описание статуса товара.  # noqa: E501

        :return: The status_description of this GetProductInfoListResponseStatuses.  # noqa: E501
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this GetProductInfoListResponseStatuses.

        Описание статуса товара.  # noqa: E501

        :param status_description: The status_description of this GetProductInfoListResponseStatuses.  # noqa: E501
        :type: str
        """

        self._status_description = status_description

    @property
    def status_failed(self):
        """Gets the status_failed of this GetProductInfoListResponseStatuses.  # noqa: E501

        Статус товара, в котором возникла ошибка.  # noqa: E501

        :return: The status_failed of this GetProductInfoListResponseStatuses.  # noqa: E501
        :rtype: str
        """
        return self._status_failed

    @status_failed.setter
    def status_failed(self, status_failed):
        """Sets the status_failed of this GetProductInfoListResponseStatuses.

        Статус товара, в котором возникла ошибка.  # noqa: E501

        :param status_failed: The status_failed of this GetProductInfoListResponseStatuses.  # noqa: E501
        :type: str
        """

        self._status_failed = status_failed

    @property
    def status_name(self):
        """Gets the status_name of this GetProductInfoListResponseStatuses.  # noqa: E501

        Название статуса товара.  # noqa: E501

        :return: The status_name of this GetProductInfoListResponseStatuses.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this GetProductInfoListResponseStatuses.

        Название статуса товара.  # noqa: E501

        :param status_name: The status_name of this GetProductInfoListResponseStatuses.  # noqa: E501
        :type: str
        """

        self._status_name = status_name

    @property
    def status_tooltip(self):
        """Gets the status_tooltip of this GetProductInfoListResponseStatuses.  # noqa: E501

        Описание статуса.  # noqa: E501

        :return: The status_tooltip of this GetProductInfoListResponseStatuses.  # noqa: E501
        :rtype: str
        """
        return self._status_tooltip

    @status_tooltip.setter
    def status_tooltip(self, status_tooltip):
        """Sets the status_tooltip of this GetProductInfoListResponseStatuses.

        Описание статуса.  # noqa: E501

        :param status_tooltip: The status_tooltip of this GetProductInfoListResponseStatuses.  # noqa: E501
        :type: str
        """

        self._status_tooltip = status_tooltip

    @property
    def status_updated_at(self):
        """Gets the status_updated_at of this GetProductInfoListResponseStatuses.  # noqa: E501

        Время последнего изменения статуса.  # noqa: E501

        :return: The status_updated_at of this GetProductInfoListResponseStatuses.  # noqa: E501
        :rtype: datetime
        """
        return self._status_updated_at

    @status_updated_at.setter
    def status_updated_at(self, status_updated_at):
        """Sets the status_updated_at of this GetProductInfoListResponseStatuses.

        Время последнего изменения статуса.  # noqa: E501

        :param status_updated_at: The status_updated_at of this GetProductInfoListResponseStatuses.  # noqa: E501
        :type: datetime
        """

        self._status_updated_at = status_updated_at

    @property
    def validation_status(self):
        """Gets the validation_status of this GetProductInfoListResponseStatuses.  # noqa: E501

        Статус валидации.  # noqa: E501

        :return: The validation_status of this GetProductInfoListResponseStatuses.  # noqa: E501
        :rtype: str
        """
        return self._validation_status

    @validation_status.setter
    def validation_status(self, validation_status):
        """Sets the validation_status of this GetProductInfoListResponseStatuses.

        Статус валидации.  # noqa: E501

        :param validation_status: The validation_status of this GetProductInfoListResponseStatuses.  # noqa: E501
        :type: str
        """

        self._validation_status = validation_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProductInfoListResponseStatuses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProductInfoListResponseStatuses):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
