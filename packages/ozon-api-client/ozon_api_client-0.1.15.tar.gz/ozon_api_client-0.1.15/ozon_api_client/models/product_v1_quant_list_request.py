# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductV1QuantListRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cursor': 'str',
        'limit': 'int',
        'visibility': 'str'
    }

    attribute_map = {
        'cursor': 'cursor',
        'limit': 'limit',
        'visibility': 'visibility'
    }

    def __init__(self, cursor=None, limit=None, visibility='ALL'):  # noqa: E501
        """ProductV1QuantListRequest - a model defined in Swagger"""  # noqa: E501
        self._cursor = None
        self._limit = None
        self._visibility = None
        self.discriminator = None
        if cursor is not None:
            self.cursor = cursor
        if limit is not None:
            self.limit = limit
        if visibility is not None:
            self.visibility = visibility

    @property
    def cursor(self):
        """Gets the cursor of this ProductV1QuantListRequest.  # noqa: E501

        Указатель для выборки следующих данных.  # noqa: E501

        :return: The cursor of this ProductV1QuantListRequest.  # noqa: E501
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this ProductV1QuantListRequest.

        Указатель для выборки следующих данных.  # noqa: E501

        :param cursor: The cursor of this ProductV1QuantListRequest.  # noqa: E501
        :type: str
        """

        self._cursor = cursor

    @property
    def limit(self):
        """Gets the limit of this ProductV1QuantListRequest.  # noqa: E501

        Максимальное количество элементов в ответе.  # noqa: E501

        :return: The limit of this ProductV1QuantListRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ProductV1QuantListRequest.

        Максимальное количество элементов в ответе.  # noqa: E501

        :param limit: The limit of this ProductV1QuantListRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def visibility(self):
        """Gets the visibility of this ProductV1QuantListRequest.  # noqa: E501

        Фильтр по видимости товара: - `ALL` — все товары, кроме архивных. - `VISIBLE` — товары, которые видны покупателям. - `INVISIBLE` — товары, которые не видны покупателям. - `EMPTY_STOCK` — товары, которых нет в наличии. - `NOT_MODERATED` — товары, которые не прошли модерацию. - `MODERATED` — товары, которые прошли модерацию. - `DISABLED` — товары, которые видны покупателям, но недоступны к покупке. - `STATE_FAILED` — товары, создание которых завершилось ошибкой. - `READY_TO_SUPPLY` — товары, готовые к поставке. - `VALIDATION_STATE_PENDING` — товары, которые проходят проверку валидатором на премодерации. - `VALIDATION_STATE_FAIL` — товары, которые не прошли проверку валидатором на премодерации. - `VALIDATION_STATE_SUCCESS` — товары, которые прошли проверку валидатором на премодерации. - `TO_SUPPLY` — товары, готовые к продаже. - `IN_SALE` — товары в продаже. - `REMOVED_FROM_SALE` — товары, скрытые от покупателей. - `OVERPRICED` — превышение цены. - `CRITICALLY_OVERPRICED` — критическое превышение цены. - `EMPTY_BARCODE` — пустой штрихкод. - `BARCODE_EXISTS` — штрихкод указан. - `QUARANTINE` — товар в карантине после изменения цены на 50% и больше. - `ARCHIVED` — товары в архиве. - `OVERPRICED_WITH_STOCK` — товары в продаже, цена которых выше, чем у конкурентов. - `PARTIAL_APPROVED` — товары в продаже, у которых пустое или неполное описание.   # noqa: E501

        :return: The visibility of this ProductV1QuantListRequest.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this ProductV1QuantListRequest.

        Фильтр по видимости товара: - `ALL` — все товары, кроме архивных. - `VISIBLE` — товары, которые видны покупателям. - `INVISIBLE` — товары, которые не видны покупателям. - `EMPTY_STOCK` — товары, которых нет в наличии. - `NOT_MODERATED` — товары, которые не прошли модерацию. - `MODERATED` — товары, которые прошли модерацию. - `DISABLED` — товары, которые видны покупателям, но недоступны к покупке. - `STATE_FAILED` — товары, создание которых завершилось ошибкой. - `READY_TO_SUPPLY` — товары, готовые к поставке. - `VALIDATION_STATE_PENDING` — товары, которые проходят проверку валидатором на премодерации. - `VALIDATION_STATE_FAIL` — товары, которые не прошли проверку валидатором на премодерации. - `VALIDATION_STATE_SUCCESS` — товары, которые прошли проверку валидатором на премодерации. - `TO_SUPPLY` — товары, готовые к продаже. - `IN_SALE` — товары в продаже. - `REMOVED_FROM_SALE` — товары, скрытые от покупателей. - `OVERPRICED` — превышение цены. - `CRITICALLY_OVERPRICED` — критическое превышение цены. - `EMPTY_BARCODE` — пустой штрихкод. - `BARCODE_EXISTS` — штрихкод указан. - `QUARANTINE` — товар в карантине после изменения цены на 50% и больше. - `ARCHIVED` — товары в архиве. - `OVERPRICED_WITH_STOCK` — товары в продаже, цена которых выше, чем у конкурентов. - `PARTIAL_APPROVED` — товары в продаже, у которых пустое или неполное описание.   # noqa: E501

        :param visibility: The visibility of this ProductV1QuantListRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "VISIBLE", "INVISIBLE", "EMPTY_STOCK", "NOT_MODERATED", "MODERATED", "DISABLED", "STATE_FAILED", "READY_TO_SUPPLY", "VALIDATION_STATE_PENDING", "VALIDATION_STATE_FAIL", "VALIDATION_STATE_SUCCESS", "TO_SUPPLY", "IN_SALE", "REMOVED_FROM_SALE", "OVERPRICED", "CRITICALLY_OVERPRICED", "EMPTY_BARCODE", "BARCODE_EXISTS", "QUARANTINE", "ARCHIVED", "OVERPRICED_WITH_STOCK", "PARTIAL_APPROVED"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"  # noqa: E501
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductV1QuantListRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductV1QuantListRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
