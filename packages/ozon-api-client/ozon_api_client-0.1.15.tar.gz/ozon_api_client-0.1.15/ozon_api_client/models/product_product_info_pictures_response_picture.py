# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductProductInfoPicturesResponsePicture(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_360': 'bool',
        'is_color': 'bool',
        'is_primary': 'bool',
        'product_id': 'int',
        'state': 'str',
        'url': 'str'
    }

    attribute_map = {
        'is_360': 'is_360',
        'is_color': 'is_color',
        'is_primary': 'is_primary',
        'product_id': 'product_id',
        'state': 'state',
        'url': 'url'
    }

    def __init__(self, is_360=None, is_color=None, is_primary=None, product_id=None, state=None, url=None):  # noqa: E501
        """ProductProductInfoPicturesResponsePicture - a model defined in Swagger"""  # noqa: E501
        self._is_360 = None
        self._is_color = None
        self._is_primary = None
        self._product_id = None
        self._state = None
        self._url = None
        self.discriminator = None
        if is_360 is not None:
            self.is_360 = is_360
        if is_color is not None:
            self.is_color = is_color
        if is_primary is not None:
            self.is_primary = is_primary
        if product_id is not None:
            self.product_id = product_id
        if state is not None:
            self.state = state
        if url is not None:
            self.url = url

    @property
    def is_360(self):
        """Gets the is_360 of this ProductProductInfoPicturesResponsePicture.  # noqa: E501

        Признак, что картинка — изображение 360.  # noqa: E501

        :return: The is_360 of this ProductProductInfoPicturesResponsePicture.  # noqa: E501
        :rtype: bool
        """
        return self._is_360

    @is_360.setter
    def is_360(self, is_360):
        """Sets the is_360 of this ProductProductInfoPicturesResponsePicture.

        Признак, что картинка — изображение 360.  # noqa: E501

        :param is_360: The is_360 of this ProductProductInfoPicturesResponsePicture.  # noqa: E501
        :type: bool
        """

        self._is_360 = is_360

    @property
    def is_color(self):
        """Gets the is_color of this ProductProductInfoPicturesResponsePicture.  # noqa: E501

        Признак, что картинка — образец цвета.  # noqa: E501

        :return: The is_color of this ProductProductInfoPicturesResponsePicture.  # noqa: E501
        :rtype: bool
        """
        return self._is_color

    @is_color.setter
    def is_color(self, is_color):
        """Sets the is_color of this ProductProductInfoPicturesResponsePicture.

        Признак, что картинка — образец цвета.  # noqa: E501

        :param is_color: The is_color of this ProductProductInfoPicturesResponsePicture.  # noqa: E501
        :type: bool
        """

        self._is_color = is_color

    @property
    def is_primary(self):
        """Gets the is_primary of this ProductProductInfoPicturesResponsePicture.  # noqa: E501

        Признак, что картинка — главное изображение.  # noqa: E501

        :return: The is_primary of this ProductProductInfoPicturesResponsePicture.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this ProductProductInfoPicturesResponsePicture.

        Признак, что картинка — главное изображение.  # noqa: E501

        :param is_primary: The is_primary of this ProductProductInfoPicturesResponsePicture.  # noqa: E501
        :type: bool
        """

        self._is_primary = is_primary

    @property
    def product_id(self):
        """Gets the product_id of this ProductProductInfoPicturesResponsePicture.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this ProductProductInfoPicturesResponsePicture.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductProductInfoPicturesResponsePicture.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this ProductProductInfoPicturesResponsePicture.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def state(self):
        """Gets the state of this ProductProductInfoPicturesResponsePicture.  # noqa: E501

        Статус загрузки изображения.   Если вызывали метод [/v1/product/pictures/import](#operation/ProductAPI_ProductImportPictures), то в ответе метода всегда будет `imported` — картинка не обработана. Чтобы посмотреть финальный статус, примерно через 10 секунд вызовите метод [/v1/product/pictures/info](#operation/ProductAPI_ProductInfoPictures).  Если вызывали метод [/v1/product/pictures/info](#operation/ProductAPI_ProductInfoPictures), вы увидите один из статусов: - `uploaded` — изображение загружено; - `pending` — при загрузке изображения возникла ошибка. Повторите попытку позже.   # noqa: E501

        :return: The state of this ProductProductInfoPicturesResponsePicture.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProductProductInfoPicturesResponsePicture.

        Статус загрузки изображения.   Если вызывали метод [/v1/product/pictures/import](#operation/ProductAPI_ProductImportPictures), то в ответе метода всегда будет `imported` — картинка не обработана. Чтобы посмотреть финальный статус, примерно через 10 секунд вызовите метод [/v1/product/pictures/info](#operation/ProductAPI_ProductInfoPictures).  Если вызывали метод [/v1/product/pictures/info](#operation/ProductAPI_ProductInfoPictures), вы увидите один из статусов: - `uploaded` — изображение загружено; - `pending` — при загрузке изображения возникла ошибка. Повторите попытку позже.   # noqa: E501

        :param state: The state of this ProductProductInfoPicturesResponsePicture.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def url(self):
        """Gets the url of this ProductProductInfoPicturesResponsePicture.  # noqa: E501

        Адрес ссылки на изображение в общедоступном облачном хранилище. Формат изображения по ссылке — JPG или PNG.  # noqa: E501

        :return: The url of this ProductProductInfoPicturesResponsePicture.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProductProductInfoPicturesResponsePicture.

        Адрес ссылки на изображение в общедоступном облачном хранилище. Формат изображения по ссылке — JPG или PNG.  # noqa: E501

        :param url: The url of this ProductProductInfoPicturesResponsePicture.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductProductInfoPicturesResponsePicture, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductProductInfoPicturesResponsePicture):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
