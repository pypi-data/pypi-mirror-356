# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1CalculationError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_message': 'str',
        'items_validation': 'list[V1ItemsValidation]',
        'unknown_cluster_ids': 'list[str]'
    }

    attribute_map = {
        'error_message': 'error_message',
        'items_validation': 'items_validation',
        'unknown_cluster_ids': 'unknown_cluster_ids'
    }

    def __init__(self, error_message=None, items_validation=None, unknown_cluster_ids=None):  # noqa: E501
        """V1CalculationError - a model defined in Swagger"""  # noqa: E501
        self._error_message = None
        self._items_validation = None
        self._unknown_cluster_ids = None
        self.discriminator = None
        if error_message is not None:
            self.error_message = error_message
        if items_validation is not None:
            self.items_validation = items_validation
        if unknown_cluster_ids is not None:
            self.unknown_cluster_ids = unknown_cluster_ids

    @property
    def error_message(self):
        """Gets the error_message of this V1CalculationError.  # noqa: E501

        Возможные ошибки: - `vdc_is_not_supported` — не поддерживается тип поставки вРЦ; - `drop_off_point_warehouse_is_required` — не передано значение `drop_off_point_warehouse_id`; - `empty_items_list` — передан пустой список `items`; - `items_count_more_than_max` — превышено количество `sku`; - `invalid_shipment_type` — неверный тип черновика; - `unknown_cluster_ids` — кластер с таким `id` не существует; - `items_validation` — ошибки валидации товарного состава; - `drop_off_point_does_not_exist` — точка отгрузки с таким `id` не существует; - `drop_off_point_has_no_timeslots` — нет доступных таймслотов на точке отгрузки; - `total_volume_in_litres_invalid` — объём поставляемых товаров слишком большой для этой точки; - `xdock_in_delivery_point_disabled_for_seller` — поставка кросс-докингом через пункт выдачи заказов недоступна для продавца.   # noqa: E501

        :return: The error_message of this V1CalculationError.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this V1CalculationError.

        Возможные ошибки: - `vdc_is_not_supported` — не поддерживается тип поставки вРЦ; - `drop_off_point_warehouse_is_required` — не передано значение `drop_off_point_warehouse_id`; - `empty_items_list` — передан пустой список `items`; - `items_count_more_than_max` — превышено количество `sku`; - `invalid_shipment_type` — неверный тип черновика; - `unknown_cluster_ids` — кластер с таким `id` не существует; - `items_validation` — ошибки валидации товарного состава; - `drop_off_point_does_not_exist` — точка отгрузки с таким `id` не существует; - `drop_off_point_has_no_timeslots` — нет доступных таймслотов на точке отгрузки; - `total_volume_in_litres_invalid` — объём поставляемых товаров слишком большой для этой точки; - `xdock_in_delivery_point_disabled_for_seller` — поставка кросс-докингом через пункт выдачи заказов недоступна для продавца.   # noqa: E501

        :param error_message: The error_message of this V1CalculationError.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def items_validation(self):
        """Gets the items_validation of this V1CalculationError.  # noqa: E501

        Ошибки валидации.  # noqa: E501

        :return: The items_validation of this V1CalculationError.  # noqa: E501
        :rtype: list[V1ItemsValidation]
        """
        return self._items_validation

    @items_validation.setter
    def items_validation(self, items_validation):
        """Sets the items_validation of this V1CalculationError.

        Ошибки валидации.  # noqa: E501

        :param items_validation: The items_validation of this V1CalculationError.  # noqa: E501
        :type: list[V1ItemsValidation]
        """

        self._items_validation = items_validation

    @property
    def unknown_cluster_ids(self):
        """Gets the unknown_cluster_ids of this V1CalculationError.  # noqa: E501

        Неизвестные идентификаторы кластеров.  # noqa: E501

        :return: The unknown_cluster_ids of this V1CalculationError.  # noqa: E501
        :rtype: list[str]
        """
        return self._unknown_cluster_ids

    @unknown_cluster_ids.setter
    def unknown_cluster_ids(self, unknown_cluster_ids):
        """Sets the unknown_cluster_ids of this V1CalculationError.

        Неизвестные идентификаторы кластеров.  # noqa: E501

        :param unknown_cluster_ids: The unknown_cluster_ids of this V1CalculationError.  # noqa: E501
        :type: list[str]
        """

        self._unknown_cluster_ids = unknown_cluster_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CalculationError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CalculationError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
