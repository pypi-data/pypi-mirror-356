# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1RatingItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'change': 'RatingItemChange',
        'current_value': 'float',
        'name': 'str',
        'past_value': 'float',
        'rating': 'str',
        'rating_direction': 'str',
        'status': 'str',
        'value_type': 'str'
    }

    attribute_map = {
        'change': 'change',
        'current_value': 'current_value',
        'name': 'name',
        'past_value': 'past_value',
        'rating': 'rating',
        'rating_direction': 'rating_direction',
        'status': 'status',
        'value_type': 'value_type'
    }

    def __init__(self, change=None, current_value=None, name=None, past_value=None, rating=None, rating_direction=None, status=None, value_type=None):  # noqa: E501
        """V1RatingItem - a model defined in Swagger"""  # noqa: E501
        self._change = None
        self._current_value = None
        self._name = None
        self._past_value = None
        self._rating = None
        self._rating_direction = None
        self._status = None
        self._value_type = None
        self.discriminator = None
        if change is not None:
            self.change = change
        if current_value is not None:
            self.current_value = current_value
        if name is not None:
            self.name = name
        if past_value is not None:
            self.past_value = past_value
        if rating is not None:
            self.rating = rating
        if rating_direction is not None:
            self.rating_direction = rating_direction
        if status is not None:
            self.status = status
        if value_type is not None:
            self.value_type = value_type

    @property
    def change(self):
        """Gets the change of this V1RatingItem.  # noqa: E501


        :return: The change of this V1RatingItem.  # noqa: E501
        :rtype: RatingItemChange
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this V1RatingItem.


        :param change: The change of this V1RatingItem.  # noqa: E501
        :type: RatingItemChange
        """

        self._change = change

    @property
    def current_value(self):
        """Gets the current_value of this V1RatingItem.  # noqa: E501

        Текущее значение рейтинга.  # noqa: E501

        :return: The current_value of this V1RatingItem.  # noqa: E501
        :rtype: float
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this V1RatingItem.

        Текущее значение рейтинга.  # noqa: E501

        :param current_value: The current_value of this V1RatingItem.  # noqa: E501
        :type: float
        """

        self._current_value = current_value

    @property
    def name(self):
        """Gets the name of this V1RatingItem.  # noqa: E501

        Название рейтинга.  # noqa: E501

        :return: The name of this V1RatingItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1RatingItem.

        Название рейтинга.  # noqa: E501

        :param name: The name of this V1RatingItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def past_value(self):
        """Gets the past_value of this V1RatingItem.  # noqa: E501

        Предыдущее значение рейтинга.  # noqa: E501

        :return: The past_value of this V1RatingItem.  # noqa: E501
        :rtype: float
        """
        return self._past_value

    @past_value.setter
    def past_value(self, past_value):
        """Sets the past_value of this V1RatingItem.

        Предыдущее значение рейтинга.  # noqa: E501

        :param past_value: The past_value of this V1RatingItem.  # noqa: E501
        :type: float
        """

        self._past_value = past_value

    @property
    def rating(self):
        """Gets the rating of this V1RatingItem.  # noqa: E501

        Название рейтинга в системе.  # noqa: E501

        :return: The rating of this V1RatingItem.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this V1RatingItem.

        Название рейтинга в системе.  # noqa: E501

        :param rating: The rating of this V1RatingItem.  # noqa: E501
        :type: str
        """

        self._rating = rating

    @property
    def rating_direction(self):
        """Gets the rating_direction of this V1RatingItem.  # noqa: E501

        Каким должно быть значение рейтинга, чтобы оно считалось хорошим: - `UNKNOWN_DIRECTION` — не определено. - `NEUTRAL` — неважно. - `HIGHER_IS_BETTER` — чем выше, тем лучше. - `LOWER_IS_BETTER` — чем ниже, тем лучше.   # noqa: E501

        :return: The rating_direction of this V1RatingItem.  # noqa: E501
        :rtype: str
        """
        return self._rating_direction

    @rating_direction.setter
    def rating_direction(self, rating_direction):
        """Sets the rating_direction of this V1RatingItem.

        Каким должно быть значение рейтинга, чтобы оно считалось хорошим: - `UNKNOWN_DIRECTION` — не определено. - `NEUTRAL` — неважно. - `HIGHER_IS_BETTER` — чем выше, тем лучше. - `LOWER_IS_BETTER` — чем ниже, тем лучше.   # noqa: E501

        :param rating_direction: The rating_direction of this V1RatingItem.  # noqa: E501
        :type: str
        """

        self._rating_direction = rating_direction

    @property
    def status(self):
        """Gets the status of this V1RatingItem.  # noqa: E501

        Статус рейтинга: - `UNKNOWN_STATUS` — не определён. - `OK` — все хорошо. - `WARNING` — показатели требуют внимания. - `CRITICAL` — критичный рейтинг.   # noqa: E501

        :return: The status of this V1RatingItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1RatingItem.

        Статус рейтинга: - `UNKNOWN_STATUS` — не определён. - `OK` — все хорошо. - `WARNING` — показатели требуют внимания. - `CRITICAL` — критичный рейтинг.   # noqa: E501

        :param status: The status of this V1RatingItem.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def value_type(self):
        """Gets the value_type of this V1RatingItem.  # noqa: E501

        Тип значения: - `UNKNOWN_VALUE` — не определён. - `INDEX` — индекс. - `PERCENT` — процент. - `TIME` — время. - `RATIO` — коэффициент. - `REVIEW_SCORE` — оценка. - `COUNT` — счёт.   # noqa: E501

        :return: The value_type of this V1RatingItem.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this V1RatingItem.

        Тип значения: - `UNKNOWN_VALUE` — не определён. - `INDEX` — индекс. - `PERCENT` — процент. - `TIME` — время. - `RATIO` — коэффициент. - `REVIEW_SCORE` — оценка. - `COUNT` — счёт.   # noqa: E501

        :param value_type: The value_type of this V1RatingItem.  # noqa: E501
        :type: str
        """

        self._value_type = value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1RatingItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1RatingItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
