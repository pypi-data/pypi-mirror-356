# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1CommentCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mark_review_as_processed': 'bool',
        'parent_comment_id': 'str',
        'review_id': 'str',
        'text': 'str'
    }

    attribute_map = {
        'mark_review_as_processed': 'mark_review_as_processed',
        'parent_comment_id': 'parent_comment_id',
        'review_id': 'review_id',
        'text': 'text'
    }

    def __init__(self, mark_review_as_processed=None, parent_comment_id=None, review_id=None, text=None):  # noqa: E501
        """V1CommentCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._mark_review_as_processed = None
        self._parent_comment_id = None
        self._review_id = None
        self._text = None
        self.discriminator = None
        if mark_review_as_processed is not None:
            self.mark_review_as_processed = mark_review_as_processed
        if parent_comment_id is not None:
            self.parent_comment_id = parent_comment_id
        self.review_id = review_id
        self.text = text

    @property
    def mark_review_as_processed(self):
        """Gets the mark_review_as_processed of this V1CommentCreateRequest.  # noqa: E501

        Обновление статуса у отзыва: - `true` — статус изменится на `Processed`. - `false` — статус не изменится.   # noqa: E501

        :return: The mark_review_as_processed of this V1CommentCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._mark_review_as_processed

    @mark_review_as_processed.setter
    def mark_review_as_processed(self, mark_review_as_processed):
        """Sets the mark_review_as_processed of this V1CommentCreateRequest.

        Обновление статуса у отзыва: - `true` — статус изменится на `Processed`. - `false` — статус не изменится.   # noqa: E501

        :param mark_review_as_processed: The mark_review_as_processed of this V1CommentCreateRequest.  # noqa: E501
        :type: bool
        """

        self._mark_review_as_processed = mark_review_as_processed

    @property
    def parent_comment_id(self):
        """Gets the parent_comment_id of this V1CommentCreateRequest.  # noqa: E501

        Идентификатор родительского комментария, на который вы отвечаете.  # noqa: E501

        :return: The parent_comment_id of this V1CommentCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_comment_id

    @parent_comment_id.setter
    def parent_comment_id(self, parent_comment_id):
        """Sets the parent_comment_id of this V1CommentCreateRequest.

        Идентификатор родительского комментария, на который вы отвечаете.  # noqa: E501

        :param parent_comment_id: The parent_comment_id of this V1CommentCreateRequest.  # noqa: E501
        :type: str
        """

        self._parent_comment_id = parent_comment_id

    @property
    def review_id(self):
        """Gets the review_id of this V1CommentCreateRequest.  # noqa: E501

        Идентификатор отзыва.  # noqa: E501

        :return: The review_id of this V1CommentCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._review_id

    @review_id.setter
    def review_id(self, review_id):
        """Sets the review_id of this V1CommentCreateRequest.

        Идентификатор отзыва.  # noqa: E501

        :param review_id: The review_id of this V1CommentCreateRequest.  # noqa: E501
        :type: str
        """
        if review_id is None:
            raise ValueError("Invalid value for `review_id`, must not be `None`")  # noqa: E501

        self._review_id = review_id

    @property
    def text(self):
        """Gets the text of this V1CommentCreateRequest.  # noqa: E501

        Текст комментария.  # noqa: E501

        :return: The text of this V1CommentCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this V1CommentCreateRequest.

        Текст комментария.  # noqa: E501

        :param text: The text of this V1CommentCreateRequest.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CommentCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CommentCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
