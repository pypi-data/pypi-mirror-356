# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsAnalyticsGetDataRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_from': 'str',
        'date_to': 'str',
        'dimension': 'list[SellerServiceanalyticsDimension]',
        'filters': 'list[AnalyticsFilter]',
        'limit': 'int',
        'metrics': 'list[AnalyticsMetric]',
        'offset': 'int',
        'sort': 'list[AnalyticsSorting]'
    }

    attribute_map = {
        'date_from': 'date_from',
        'date_to': 'date_to',
        'dimension': 'dimension',
        'filters': 'filters',
        'limit': 'limit',
        'metrics': 'metrics',
        'offset': 'offset',
        'sort': 'sort'
    }

    def __init__(self, date_from=None, date_to=None, dimension=None, filters=None, limit=None, metrics=None, offset=None, sort=None):  # noqa: E501
        """AnalyticsAnalyticsGetDataRequest - a model defined in Swagger"""  # noqa: E501
        self._date_from = None
        self._date_to = None
        self._dimension = None
        self._filters = None
        self._limit = None
        self._metrics = None
        self._offset = None
        self._sort = None
        self.discriminator = None
        if date_from is not None:
            self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to
        if dimension is not None:
            self.dimension = dimension
        if filters is not None:
            self.filters = filters
        if limit is not None:
            self.limit = limit
        if metrics is not None:
            self.metrics = metrics
        if offset is not None:
            self.offset = offset
        if sort is not None:
            self.sort = sort

    @property
    def date_from(self):
        """Gets the date_from of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501

        Дата, с которой будут данные в отчёте.  Если у вас нет Premium-подписки, укажите дату в пределах последних трёх месяцев.   # noqa: E501

        :return: The date_from of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this AnalyticsAnalyticsGetDataRequest.

        Дата, с которой будут данные в отчёте.  Если у вас нет Premium-подписки, укажите дату в пределах последних трёх месяцев.   # noqa: E501

        :param date_from: The date_from of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :type: str
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501

        Дата, по которую будут данные в отчёте.  # noqa: E501

        :return: The date_to of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this AnalyticsAnalyticsGetDataRequest.

        Дата, по которую будут данные в отчёте.  # noqa: E501

        :param date_to: The date_to of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :type: str
        """

        self._date_to = date_to

    @property
    def dimension(self):
        """Gets the dimension of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501

        Группировка данных в отчёте.  Способы группировки, доступные всем продавцам:   - `unknownDimension` — неизвестное измерение,   - `sku` — идентификатор товара,   - `spu` — идентификатор товара,   - `day` — день,   - `week` — неделя,   - `month` — месяц.  Способы группировки, доступные только продавцам с Premium-подпиской:   - `year` — год,   - `category1` — категория первого уровня,   - `category2` — категория второго уровня,   - `category3` — категория третьего уровня,   - `category4` — категория четвертого уровня,   - `brand` — бренд,   - `modelID` — модель.   # noqa: E501

        :return: The dimension of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :rtype: list[SellerServiceanalyticsDimension]
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this AnalyticsAnalyticsGetDataRequest.

        Группировка данных в отчёте.  Способы группировки, доступные всем продавцам:   - `unknownDimension` — неизвестное измерение,   - `sku` — идентификатор товара,   - `spu` — идентификатор товара,   - `day` — день,   - `week` — неделя,   - `month` — месяц.  Способы группировки, доступные только продавцам с Premium-подпиской:   - `year` — год,   - `category1` — категория первого уровня,   - `category2` — категория второго уровня,   - `category3` — категория третьего уровня,   - `category4` — категория четвертого уровня,   - `brand` — бренд,   - `modelID` — модель.   # noqa: E501

        :param dimension: The dimension of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :type: list[SellerServiceanalyticsDimension]
        """

        self._dimension = dimension

    @property
    def filters(self):
        """Gets the filters of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501

        Фильтры.  # noqa: E501

        :return: The filters of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :rtype: list[AnalyticsFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this AnalyticsAnalyticsGetDataRequest.

        Фильтры.  # noqa: E501

        :param filters: The filters of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :type: list[AnalyticsFilter]
        """

        self._filters = filters

    @property
    def limit(self):
        """Gets the limit of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501

        Количество значений в ответе:   - максимум — 1000,   - минимум — 1.   # noqa: E501

        :return: The limit of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this AnalyticsAnalyticsGetDataRequest.

        Количество значений в ответе:   - максимум — 1000,   - минимум — 1.   # noqa: E501

        :param limit: The limit of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def metrics(self):
        """Gets the metrics of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501

        Укажите до 14 метрик. Если их будет больше, вы получите ошибку с кодом `InvalidArgument`.  Список метриĸ, по ĸоторым будет сформирован отчёт.  Метрики, доступные всем продавцам:   - `revenue` — заказано на сумму,   - `ordered_units` — заказано товаров.  Метрики, доступные только продавцам с Premium-подпиской:   - `unknown_metric` — неизвестная метрика.   - `hits_view_search` — показы в поиске и в категории.   - `hits_view_pdp` — показы на карточке товара.   - `hits_view` — всего показов.   - `hits_tocart_search` — в корзину из поиска или категории.   - `hits_tocart_pdp` — в корзину из карточки товара.   - `hits_tocart` — всего добавлено в корзину.   - `session_view_search` — сессии с показом в поиске или в каталоге. Считаются уникальные посетители с просмотром в поиске или каталоге.   - `session_view_pdp` — сессии с показом на карточке товара. Считаются уникальные посетители, которые просмотрели карточку товара.   - `session_view` — всего сессий. Считаются уникальные посетители.   - `conv_tocart_search` — конверсия в корзину из поиска или категории.   - `conv_tocart_pdp` — конверсия в корзину из карточки товара.   - `conv_tocart` — общая конверсия в корзину.   - `returns` — возвращено товаров.   - `cancellations` — отменено товаров.   - `delivered_units` — доставлено товаров.   - `position_category` — позиция в поиске и категории.   # noqa: E501

        :return: The metrics of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :rtype: list[AnalyticsMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this AnalyticsAnalyticsGetDataRequest.

        Укажите до 14 метрик. Если их будет больше, вы получите ошибку с кодом `InvalidArgument`.  Список метриĸ, по ĸоторым будет сформирован отчёт.  Метрики, доступные всем продавцам:   - `revenue` — заказано на сумму,   - `ordered_units` — заказано товаров.  Метрики, доступные только продавцам с Premium-подпиской:   - `unknown_metric` — неизвестная метрика.   - `hits_view_search` — показы в поиске и в категории.   - `hits_view_pdp` — показы на карточке товара.   - `hits_view` — всего показов.   - `hits_tocart_search` — в корзину из поиска или категории.   - `hits_tocart_pdp` — в корзину из карточки товара.   - `hits_tocart` — всего добавлено в корзину.   - `session_view_search` — сессии с показом в поиске или в каталоге. Считаются уникальные посетители с просмотром в поиске или каталоге.   - `session_view_pdp` — сессии с показом на карточке товара. Считаются уникальные посетители, которые просмотрели карточку товара.   - `session_view` — всего сессий. Считаются уникальные посетители.   - `conv_tocart_search` — конверсия в корзину из поиска или категории.   - `conv_tocart_pdp` — конверсия в корзину из карточки товара.   - `conv_tocart` — общая конверсия в корзину.   - `returns` — возвращено товаров.   - `cancellations` — отменено товаров.   - `delivered_units` — доставлено товаров.   - `position_category` — позиция в поиске и категории.   # noqa: E501

        :param metrics: The metrics of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :type: list[AnalyticsMetric]
        """

        self._metrics = metrics

    @property
    def offset(self):
        """Gets the offset of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501

        Количество элементов, которое будет пропущено в ответе. Например, если `offset = 10`, то ответ начнётся с 11-го найденного элемента.  # noqa: E501

        :return: The offset of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this AnalyticsAnalyticsGetDataRequest.

        Количество элементов, которое будет пропущено в ответе. Например, если `offset = 10`, то ответ начнётся с 11-го найденного элемента.  # noqa: E501

        :param offset: The offset of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def sort(self):
        """Gets the sort of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501

        Настройки сортировки отчёта.  # noqa: E501

        :return: The sort of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :rtype: list[AnalyticsSorting]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this AnalyticsAnalyticsGetDataRequest.

        Настройки сортировки отчёта.  # noqa: E501

        :param sort: The sort of this AnalyticsAnalyticsGetDataRequest.  # noqa: E501
        :type: list[AnalyticsSorting]
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsAnalyticsGetDataRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsAnalyticsGetDataRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
