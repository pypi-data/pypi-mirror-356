# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2ChatHistoryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_next': 'bool',
        'messages': 'list[V2ChatMessage]'
    }

    attribute_map = {
        'has_next': 'has_next',
        'messages': 'messages'
    }

    def __init__(self, has_next=None, messages=None):  # noqa: E501
        """V2ChatHistoryResponse - a model defined in Swagger"""  # noqa: E501
        self._has_next = None
        self._messages = None
        self.discriminator = None
        if has_next is not None:
            self.has_next = has_next
        if messages is not None:
            self.messages = messages

    @property
    def has_next(self):
        """Gets the has_next of this V2ChatHistoryResponse.  # noqa: E501

        Признак, что в ответе вернули не все сообщения.  # noqa: E501

        :return: The has_next of this V2ChatHistoryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_next

    @has_next.setter
    def has_next(self, has_next):
        """Sets the has_next of this V2ChatHistoryResponse.

        Признак, что в ответе вернули не все сообщения.  # noqa: E501

        :param has_next: The has_next of this V2ChatHistoryResponse.  # noqa: E501
        :type: bool
        """

        self._has_next = has_next

    @property
    def messages(self):
        """Gets the messages of this V2ChatHistoryResponse.  # noqa: E501

        Массив сообщений, отсортированный в соответсвии с параметром `direction` из тела запроса.  # noqa: E501

        :return: The messages of this V2ChatHistoryResponse.  # noqa: E501
        :rtype: list[V2ChatMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this V2ChatHistoryResponse.

        Массив сообщений, отсортированный в соответсвии с параметром `direction` из тела запроса.  # noqa: E501

        :param messages: The messages of this V2ChatHistoryResponse.  # noqa: E501
        :type: list[V2ChatMessage]
        """

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2ChatHistoryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2ChatHistoryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
