# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetReturnsListResponseStorage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sum': 'SellerReturnsv1MoneyStorage',
        'tariffication_first_date': 'datetime',
        'tariffication_start_date': 'datetime',
        'arrived_moment': 'datetime',
        'days': 'int',
        'utilization_sum': 'SellerReturnsv1MoneyUtilization',
        'utilization_forecast_date': 'str'
    }

    attribute_map = {
        'sum': 'sum',
        'tariffication_first_date': 'tariffication_first_date',
        'tariffication_start_date': 'tariffication_start_date',
        'arrived_moment': 'arrived_moment',
        'days': 'days',
        'utilization_sum': 'utilization_sum',
        'utilization_forecast_date': 'utilization_forecast_date'
    }

    def __init__(self, sum=None, tariffication_first_date=None, tariffication_start_date=None, arrived_moment=None, days=None, utilization_sum=None, utilization_forecast_date=None):  # noqa: E501
        """GetReturnsListResponseStorage - a model defined in Swagger"""  # noqa: E501
        self._sum = None
        self._tariffication_first_date = None
        self._tariffication_start_date = None
        self._arrived_moment = None
        self._days = None
        self._utilization_sum = None
        self._utilization_forecast_date = None
        self.discriminator = None
        if sum is not None:
            self.sum = sum
        if tariffication_first_date is not None:
            self.tariffication_first_date = tariffication_first_date
        if tariffication_start_date is not None:
            self.tariffication_start_date = tariffication_start_date
        if arrived_moment is not None:
            self.arrived_moment = arrived_moment
        if days is not None:
            self.days = days
        if utilization_sum is not None:
            self.utilization_sum = utilization_sum
        if utilization_forecast_date is not None:
            self.utilization_forecast_date = utilization_forecast_date

    @property
    def sum(self):
        """Gets the sum of this GetReturnsListResponseStorage.  # noqa: E501


        :return: The sum of this GetReturnsListResponseStorage.  # noqa: E501
        :rtype: SellerReturnsv1MoneyStorage
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this GetReturnsListResponseStorage.


        :param sum: The sum of this GetReturnsListResponseStorage.  # noqa: E501
        :type: SellerReturnsv1MoneyStorage
        """

        self._sum = sum

    @property
    def tariffication_first_date(self):
        """Gets the tariffication_first_date of this GetReturnsListResponseStorage.  # noqa: E501

        Первый день тарификации за хранение.  # noqa: E501

        :return: The tariffication_first_date of this GetReturnsListResponseStorage.  # noqa: E501
        :rtype: datetime
        """
        return self._tariffication_first_date

    @tariffication_first_date.setter
    def tariffication_first_date(self, tariffication_first_date):
        """Sets the tariffication_first_date of this GetReturnsListResponseStorage.

        Первый день тарификации за хранение.  # noqa: E501

        :param tariffication_first_date: The tariffication_first_date of this GetReturnsListResponseStorage.  # noqa: E501
        :type: datetime
        """

        self._tariffication_first_date = tariffication_first_date

    @property
    def tariffication_start_date(self):
        """Gets the tariffication_start_date of this GetReturnsListResponseStorage.  # noqa: E501

        Дата старта тарификации за хранение.  # noqa: E501

        :return: The tariffication_start_date of this GetReturnsListResponseStorage.  # noqa: E501
        :rtype: datetime
        """
        return self._tariffication_start_date

    @tariffication_start_date.setter
    def tariffication_start_date(self, tariffication_start_date):
        """Sets the tariffication_start_date of this GetReturnsListResponseStorage.

        Дата старта тарификации за хранение.  # noqa: E501

        :param tariffication_start_date: The tariffication_start_date of this GetReturnsListResponseStorage.  # noqa: E501
        :type: datetime
        """

        self._tariffication_start_date = tariffication_start_date

    @property
    def arrived_moment(self):
        """Gets the arrived_moment of this GetReturnsListResponseStorage.  # noqa: E501

        Дата, когда возврат был готов к выдаче.  # noqa: E501

        :return: The arrived_moment of this GetReturnsListResponseStorage.  # noqa: E501
        :rtype: datetime
        """
        return self._arrived_moment

    @arrived_moment.setter
    def arrived_moment(self, arrived_moment):
        """Sets the arrived_moment of this GetReturnsListResponseStorage.

        Дата, когда возврат был готов к выдаче.  # noqa: E501

        :param arrived_moment: The arrived_moment of this GetReturnsListResponseStorage.  # noqa: E501
        :type: datetime
        """

        self._arrived_moment = arrived_moment

    @property
    def days(self):
        """Gets the days of this GetReturnsListResponseStorage.  # noqa: E501

        Сколько дней возврат ожидает выдачи продавцу.  # noqa: E501

        :return: The days of this GetReturnsListResponseStorage.  # noqa: E501
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this GetReturnsListResponseStorage.

        Сколько дней возврат ожидает выдачи продавцу.  # noqa: E501

        :param days: The days of this GetReturnsListResponseStorage.  # noqa: E501
        :type: int
        """

        self._days = days

    @property
    def utilization_sum(self):
        """Gets the utilization_sum of this GetReturnsListResponseStorage.  # noqa: E501


        :return: The utilization_sum of this GetReturnsListResponseStorage.  # noqa: E501
        :rtype: SellerReturnsv1MoneyUtilization
        """
        return self._utilization_sum

    @utilization_sum.setter
    def utilization_sum(self, utilization_sum):
        """Sets the utilization_sum of this GetReturnsListResponseStorage.


        :param utilization_sum: The utilization_sum of this GetReturnsListResponseStorage.  # noqa: E501
        :type: SellerReturnsv1MoneyUtilization
        """

        self._utilization_sum = utilization_sum

    @property
    def utilization_forecast_date(self):
        """Gets the utilization_forecast_date of this GetReturnsListResponseStorage.  # noqa: E501

        Планируемая дата утилизации.  # noqa: E501

        :return: The utilization_forecast_date of this GetReturnsListResponseStorage.  # noqa: E501
        :rtype: str
        """
        return self._utilization_forecast_date

    @utilization_forecast_date.setter
    def utilization_forecast_date(self, utilization_forecast_date):
        """Sets the utilization_forecast_date of this GetReturnsListResponseStorage.

        Планируемая дата утилизации.  # noqa: E501

        :param utilization_forecast_date: The utilization_forecast_date of this GetReturnsListResponseStorage.  # noqa: E501
        :type: str
        """

        self._utilization_forecast_date = utilization_forecast_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetReturnsListResponseStorage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetReturnsListResponseStorage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
