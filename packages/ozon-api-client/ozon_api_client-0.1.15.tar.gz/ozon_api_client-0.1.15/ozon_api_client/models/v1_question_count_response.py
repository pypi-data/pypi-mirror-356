# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1QuestionCountResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all': 'Int64',
        'new': 'Int64',
        'processed': 'Int64',
        'unprocessed': 'Int64',
        'viewed': 'Int64'
    }

    attribute_map = {
        'all': 'all',
        'new': 'new',
        'processed': 'processed',
        'unprocessed': 'unprocessed',
        'viewed': 'viewed'
    }

    def __init__(self, all=None, new=None, processed=None, unprocessed=None, viewed=None):  # noqa: E501
        """V1QuestionCountResponse - a model defined in Swagger"""  # noqa: E501
        self._all = None
        self._new = None
        self._processed = None
        self._unprocessed = None
        self._viewed = None
        self.discriminator = None
        if all is not None:
            self.all = all
        if new is not None:
            self.new = new
        if processed is not None:
            self.processed = processed
        if unprocessed is not None:
            self.unprocessed = unprocessed
        if viewed is not None:
            self.viewed = viewed

    @property
    def all(self):
        """Gets the all of this V1QuestionCountResponse.  # noqa: E501

        Всего вопросов.  # noqa: E501

        :return: The all of this V1QuestionCountResponse.  # noqa: E501
        :rtype: Int64
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this V1QuestionCountResponse.

        Всего вопросов.  # noqa: E501

        :param all: The all of this V1QuestionCountResponse.  # noqa: E501
        :type: Int64
        """

        self._all = all

    @property
    def new(self):
        """Gets the new of this V1QuestionCountResponse.  # noqa: E501

        Новые вопросы.  # noqa: E501

        :return: The new of this V1QuestionCountResponse.  # noqa: E501
        :rtype: Int64
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this V1QuestionCountResponse.

        Новые вопросы.  # noqa: E501

        :param new: The new of this V1QuestionCountResponse.  # noqa: E501
        :type: Int64
        """

        self._new = new

    @property
    def processed(self):
        """Gets the processed of this V1QuestionCountResponse.  # noqa: E501

        Обработанные вопросы.  # noqa: E501

        :return: The processed of this V1QuestionCountResponse.  # noqa: E501
        :rtype: Int64
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """Sets the processed of this V1QuestionCountResponse.

        Обработанные вопросы.  # noqa: E501

        :param processed: The processed of this V1QuestionCountResponse.  # noqa: E501
        :type: Int64
        """

        self._processed = processed

    @property
    def unprocessed(self):
        """Gets the unprocessed of this V1QuestionCountResponse.  # noqa: E501

        Необработанные вопросы.  # noqa: E501

        :return: The unprocessed of this V1QuestionCountResponse.  # noqa: E501
        :rtype: Int64
        """
        return self._unprocessed

    @unprocessed.setter
    def unprocessed(self, unprocessed):
        """Sets the unprocessed of this V1QuestionCountResponse.

        Необработанные вопросы.  # noqa: E501

        :param unprocessed: The unprocessed of this V1QuestionCountResponse.  # noqa: E501
        :type: Int64
        """

        self._unprocessed = unprocessed

    @property
    def viewed(self):
        """Gets the viewed of this V1QuestionCountResponse.  # noqa: E501

        Просмотренные вопросы.  # noqa: E501

        :return: The viewed of this V1QuestionCountResponse.  # noqa: E501
        :rtype: Int64
        """
        return self._viewed

    @viewed.setter
    def viewed(self, viewed):
        """Sets the viewed of this V1QuestionCountResponse.

        Просмотренные вопросы.  # noqa: E501

        :param viewed: The viewed of this V1QuestionCountResponse.  # noqa: E501
        :type: Int64
        """

        self._viewed = viewed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1QuestionCountResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1QuestionCountResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
