# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Productsv1GetProductInfoStocksByWarehouseFbsResponseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku': 'int',
        'present': 'int',
        'product_id': 'int',
        'reserved': 'int',
        'warehouse_id': 'int',
        'warehouse_name': 'str'
    }

    attribute_map = {
        'sku': 'sku',
        'present': 'present',
        'product_id': 'product_id',
        'reserved': 'reserved',
        'warehouse_id': 'warehouse_id',
        'warehouse_name': 'warehouse_name'
    }

    def __init__(self, sku=None, present=None, product_id=None, reserved=None, warehouse_id=None, warehouse_name=None):  # noqa: E501
        """Productsv1GetProductInfoStocksByWarehouseFbsResponseResult - a model defined in Swagger"""  # noqa: E501
        self._sku = None
        self._present = None
        self._product_id = None
        self._reserved = None
        self._warehouse_id = None
        self._warehouse_name = None
        self.discriminator = None
        if sku is not None:
            self.sku = sku
        if present is not None:
            self.present = present
        if product_id is not None:
            self.product_id = product_id
        if reserved is not None:
            self.reserved = reserved
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if warehouse_name is not None:
            self.warehouse_name = warehouse_name

    @property
    def sku(self):
        """Gets the sku of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501

        SKU товара.  # noqa: E501

        :return: The sku of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.

        SKU товара.  # noqa: E501

        :param sku: The sku of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def present(self):
        """Gets the present of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501

        Общее количество товара на складе.  # noqa: E501

        :return: The present of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._present

    @present.setter
    def present(self, present):
        """Sets the present of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.

        Общее количество товара на складе.  # noqa: E501

        :param present: The present of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501
        :type: int
        """

        self._present = present

    @property
    def product_id(self):
        """Gets the product_id of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501

        Идентификатор товара в системе продавца.  # noqa: E501

        :return: The product_id of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.

        Идентификатор товара в системе продавца.  # noqa: E501

        :param product_id: The product_id of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def reserved(self):
        """Gets the reserved of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501

        Количество зарезервированных товаров на складе.  # noqa: E501

        :return: The reserved of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.

        Количество зарезервированных товаров на складе.  # noqa: E501

        :param reserved: The reserved of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501
        :type: int
        """

        self._reserved = reserved

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The warehouse_id of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.

        Идентификатор склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501

        Название склада.  # noqa: E501

        :return: The warehouse_name of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.

        Название склада.  # noqa: E501

        :param warehouse_name: The warehouse_name of this Productsv1GetProductInfoStocksByWarehouseFbsResponseResult.  # noqa: E501
        :type: str
        """

        self._warehouse_name = warehouse_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Productsv1GetProductInfoStocksByWarehouseFbsResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Productsv1GetProductInfoStocksByWarehouseFbsResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
