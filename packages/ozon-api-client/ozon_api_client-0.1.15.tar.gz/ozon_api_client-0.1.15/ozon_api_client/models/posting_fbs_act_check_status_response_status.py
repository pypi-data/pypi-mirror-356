# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostingFBSActCheckStatusResponseStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'act_type': 'str',
        'added_to_act': 'list[str]',
        'removed_from_act': 'list[str]',
        'status': 'str',
        'is_partial': 'bool',
        'has_postings_for_next_carriage': 'bool',
        'partial_num': 'int'
    }

    attribute_map = {
        'act_type': 'act_type',
        'added_to_act': 'added_to_act',
        'removed_from_act': 'removed_from_act',
        'status': 'status',
        'is_partial': 'is_partial',
        'has_postings_for_next_carriage': 'has_postings_for_next_carriage',
        'partial_num': 'partial_num'
    }

    def __init__(self, act_type=None, added_to_act=None, removed_from_act=None, status=None, is_partial=None, has_postings_for_next_carriage=None, partial_num=None):  # noqa: E501
        """PostingFBSActCheckStatusResponseStatus - a model defined in Swagger"""  # noqa: E501
        self._act_type = None
        self._added_to_act = None
        self._removed_from_act = None
        self._status = None
        self._is_partial = None
        self._has_postings_for_next_carriage = None
        self._partial_num = None
        self.discriminator = None
        if act_type is not None:
            self.act_type = act_type
        if added_to_act is not None:
            self.added_to_act = added_to_act
        if removed_from_act is not None:
            self.removed_from_act = removed_from_act
        if status is not None:
            self.status = status
        if is_partial is not None:
            self.is_partial = is_partial
        if has_postings_for_next_carriage is not None:
            self.has_postings_for_next_carriage = has_postings_for_next_carriage
        if partial_num is not None:
            self.partial_num = partial_num

    @property
    def act_type(self):
        """Gets the act_type of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501

        Тип документов.  Если значение `ozon_digital`, используйте методы [/v2/posting/fbs/digital/act/check-status](#operation/PostingAPI_PostingFBSDigitalActCheckStatus)      и [/v2/posting/fbs/digital/act/get-pdf](#operation/PostingAPI_PostingFBSGetDigitalAct) для получения электронной транспортной накладной.   # noqa: E501

        :return: The act_type of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :rtype: str
        """
        return self._act_type

    @act_type.setter
    def act_type(self, act_type):
        """Sets the act_type of this PostingFBSActCheckStatusResponseStatus.

        Тип документов.  Если значение `ozon_digital`, используйте методы [/v2/posting/fbs/digital/act/check-status](#operation/PostingAPI_PostingFBSDigitalActCheckStatus)      и [/v2/posting/fbs/digital/act/get-pdf](#operation/PostingAPI_PostingFBSGetDigitalAct) для получения электронной транспортной накладной.   # noqa: E501

        :param act_type: The act_type of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :type: str
        """

        self._act_type = act_type

    @property
    def added_to_act(self):
        """Gets the added_to_act of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501

        Массив c номерами отправлений, которые добавлены в перевозку. Эти отправления нужно передать сегодня.  # noqa: E501

        :return: The added_to_act of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._added_to_act

    @added_to_act.setter
    def added_to_act(self, added_to_act):
        """Sets the added_to_act of this PostingFBSActCheckStatusResponseStatus.

        Массив c номерами отправлений, которые добавлены в перевозку. Эти отправления нужно передать сегодня.  # noqa: E501

        :param added_to_act: The added_to_act of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :type: list[str]
        """

        self._added_to_act = added_to_act

    @property
    def removed_from_act(self):
        """Gets the removed_from_act of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501

        Массив с номерами отправлений, которые не попали в перевозку. Такие отправления нужно передавать со следующей отгрузкой.  # noqa: E501

        :return: The removed_from_act of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._removed_from_act

    @removed_from_act.setter
    def removed_from_act(self, removed_from_act):
        """Sets the removed_from_act of this PostingFBSActCheckStatusResponseStatus.

        Массив с номерами отправлений, которые не попали в перевозку. Такие отправления нужно передавать со следующей отгрузкой.  # noqa: E501

        :param removed_from_act: The removed_from_act of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :type: list[str]
        """

        self._removed_from_act = removed_from_act

    @property
    def status(self):
        """Gets the status of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501

        Статус запроса:  - `in_process` — документы формируются, нужно подождать.  - `ready` — документы сформированы и готовы для скачивания.  - `error` — произошла ошибка при формировании документов, запросите документы повторно.  - `cancelled` — создание документов отменено, запросите их повторно.  - `The next postings aren't ready` — произошла ошибка, отправления не включены в отгрузку. Подождите некоторое время и проверьте результат запроса. Если ошибка повторяется, обратитесь в службу поддержки.   # noqa: E501

        :return: The status of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PostingFBSActCheckStatusResponseStatus.

        Статус запроса:  - `in_process` — документы формируются, нужно подождать.  - `ready` — документы сформированы и готовы для скачивания.  - `error` — произошла ошибка при формировании документов, запросите документы повторно.  - `cancelled` — создание документов отменено, запросите их повторно.  - `The next postings aren't ready` — произошла ошибка, отправления не включены в отгрузку. Подождите некоторое время и проверьте результат запроса. Если ошибка повторяется, обратитесь в службу поддержки.   # noqa: E501

        :param status: The status of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def is_partial(self):
        """Gets the is_partial of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501

        Признак частичной перевозки. `true`, если перевозка частичная.  Частичная перевозка значит, что отгрузка была разделена на несколько частей.   # noqa: E501

        :return: The is_partial of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_partial

    @is_partial.setter
    def is_partial(self, is_partial):
        """Sets the is_partial of this PostingFBSActCheckStatusResponseStatus.

        Признак частичной перевозки. `true`, если перевозка частичная.  Частичная перевозка значит, что отгрузка была разделена на несколько частей.   # noqa: E501

        :param is_partial: The is_partial of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :type: bool
        """

        self._is_partial = is_partial

    @property
    def has_postings_for_next_carriage(self):
        """Gets the has_postings_for_next_carriage of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501

        `true`, если есть отправления, не попавшие в текущую перевозку, но которые нужно отгрузить.  Если в ответе вернулось `true`, подтвердите отгрузку или создайте новый акт через метод [/v2/posting/fbs/act/create](#operation/PostingAPI_PostingFBSActCreate) и проверьте их статус. Повторяйте действия, пока в ответе не вернётся `false`.   # noqa: E501

        :return: The has_postings_for_next_carriage of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :rtype: bool
        """
        return self._has_postings_for_next_carriage

    @has_postings_for_next_carriage.setter
    def has_postings_for_next_carriage(self, has_postings_for_next_carriage):
        """Sets the has_postings_for_next_carriage of this PostingFBSActCheckStatusResponseStatus.

        `true`, если есть отправления, не попавшие в текущую перевозку, но которые нужно отгрузить.  Если в ответе вернулось `true`, подтвердите отгрузку или создайте новый акт через метод [/v2/posting/fbs/act/create](#operation/PostingAPI_PostingFBSActCreate) и проверьте их статус. Повторяйте действия, пока в ответе не вернётся `false`.   # noqa: E501

        :param has_postings_for_next_carriage: The has_postings_for_next_carriage of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :type: bool
        """

        self._has_postings_for_next_carriage = has_postings_for_next_carriage

    @property
    def partial_num(self):
        """Gets the partial_num of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501

        Порядковый номер частичной перевозки.  # noqa: E501

        :return: The partial_num of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :rtype: int
        """
        return self._partial_num

    @partial_num.setter
    def partial_num(self, partial_num):
        """Sets the partial_num of this PostingFBSActCheckStatusResponseStatus.

        Порядковый номер частичной перевозки.  # noqa: E501

        :param partial_num: The partial_num of this PostingFBSActCheckStatusResponseStatus.  # noqa: E501
        :type: int
        """

        self._partial_num = partial_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostingFBSActCheckStatusResponseStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostingFBSActCheckStatusResponseStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
