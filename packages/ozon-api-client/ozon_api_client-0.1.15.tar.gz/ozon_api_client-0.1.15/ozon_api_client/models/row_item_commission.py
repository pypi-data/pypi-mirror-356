# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RowItemCommission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'bonus': 'float',
        'commission': 'float',
        'compensation': 'float',
        'price_per_instance': 'float',
        'quantity': 'int',
        'standard_fee': 'float',
        'bank_coinvestment': 'float',
        'stars': 'float',
        'pick_up_point_coinvestment': 'float',
        'total': 'float'
    }

    attribute_map = {
        'amount': 'amount',
        'bonus': 'bonus',
        'commission': 'commission',
        'compensation': 'compensation',
        'price_per_instance': 'price_per_instance',
        'quantity': 'quantity',
        'standard_fee': 'standard_fee',
        'bank_coinvestment': 'bank_coinvestment',
        'stars': 'stars',
        'pick_up_point_coinvestment': 'pick_up_point_coinvestment',
        'total': 'total'
    }

    def __init__(self, amount=None, bonus=None, commission=None, compensation=None, price_per_instance=None, quantity=None, standard_fee=None, bank_coinvestment=None, stars=None, pick_up_point_coinvestment=None, total=None):  # noqa: E501
        """RowItemCommission - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._bonus = None
        self._commission = None
        self._compensation = None
        self._price_per_instance = None
        self._quantity = None
        self._standard_fee = None
        self._bank_coinvestment = None
        self._stars = None
        self._pick_up_point_coinvestment = None
        self._total = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if bonus is not None:
            self.bonus = bonus
        if commission is not None:
            self.commission = commission
        if compensation is not None:
            self.compensation = compensation
        if price_per_instance is not None:
            self.price_per_instance = price_per_instance
        if quantity is not None:
            self.quantity = quantity
        if standard_fee is not None:
            self.standard_fee = standard_fee
        if bank_coinvestment is not None:
            self.bank_coinvestment = bank_coinvestment
        if stars is not None:
            self.stars = stars
        if pick_up_point_coinvestment is not None:
            self.pick_up_point_coinvestment = pick_up_point_coinvestment
        if total is not None:
            self.total = total

    @property
    def amount(self):
        """Gets the amount of this RowItemCommission.  # noqa: E501

        Сумма.  # noqa: E501

        :return: The amount of this RowItemCommission.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RowItemCommission.

        Сумма.  # noqa: E501

        :param amount: The amount of this RowItemCommission.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def bonus(self):
        """Gets the bonus of this RowItemCommission.  # noqa: E501

        Баллы за скидки.  # noqa: E501

        :return: The bonus of this RowItemCommission.  # noqa: E501
        :rtype: float
        """
        return self._bonus

    @bonus.setter
    def bonus(self, bonus):
        """Sets the bonus of this RowItemCommission.

        Баллы за скидки.  # noqa: E501

        :param bonus: The bonus of this RowItemCommission.  # noqa: E501
        :type: float
        """

        self._bonus = bonus

    @property
    def commission(self):
        """Gets the commission of this RowItemCommission.  # noqa: E501

        Итого комиссия с учётом скидок и наценки.  # noqa: E501

        :return: The commission of this RowItemCommission.  # noqa: E501
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this RowItemCommission.

        Итого комиссия с учётом скидок и наценки.  # noqa: E501

        :param commission: The commission of this RowItemCommission.  # noqa: E501
        :type: float
        """

        self._commission = commission

    @property
    def compensation(self):
        """Gets the compensation of this RowItemCommission.  # noqa: E501

        Доплата за счёт Ozon.  # noqa: E501

        :return: The compensation of this RowItemCommission.  # noqa: E501
        :rtype: float
        """
        return self._compensation

    @compensation.setter
    def compensation(self, compensation):
        """Sets the compensation of this RowItemCommission.

        Доплата за счёт Ozon.  # noqa: E501

        :param compensation: The compensation of this RowItemCommission.  # noqa: E501
        :type: float
        """

        self._compensation = compensation

    @property
    def price_per_instance(self):
        """Gets the price_per_instance of this RowItemCommission.  # noqa: E501

        Цена за экземпляр.  # noqa: E501

        :return: The price_per_instance of this RowItemCommission.  # noqa: E501
        :rtype: float
        """
        return self._price_per_instance

    @price_per_instance.setter
    def price_per_instance(self, price_per_instance):
        """Sets the price_per_instance of this RowItemCommission.

        Цена за экземпляр.  # noqa: E501

        :param price_per_instance: The price_per_instance of this RowItemCommission.  # noqa: E501
        :type: float
        """

        self._price_per_instance = price_per_instance

    @property
    def quantity(self):
        """Gets the quantity of this RowItemCommission.  # noqa: E501

        Количество товара.  # noqa: E501

        :return: The quantity of this RowItemCommission.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this RowItemCommission.

        Количество товара.  # noqa: E501

        :param quantity: The quantity of this RowItemCommission.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def standard_fee(self):
        """Gets the standard_fee of this RowItemCommission.  # noqa: E501

        Базовое вознаграждение Ozon.  # noqa: E501

        :return: The standard_fee of this RowItemCommission.  # noqa: E501
        :rtype: float
        """
        return self._standard_fee

    @standard_fee.setter
    def standard_fee(self, standard_fee):
        """Sets the standard_fee of this RowItemCommission.

        Базовое вознаграждение Ozon.  # noqa: E501

        :param standard_fee: The standard_fee of this RowItemCommission.  # noqa: E501
        :type: float
        """

        self._standard_fee = standard_fee

    @property
    def bank_coinvestment(self):
        """Gets the bank_coinvestment of this RowItemCommission.  # noqa: E501

        Выплаты по механикам лояльности партнёров: зелёные цены.  # noqa: E501

        :return: The bank_coinvestment of this RowItemCommission.  # noqa: E501
        :rtype: float
        """
        return self._bank_coinvestment

    @bank_coinvestment.setter
    def bank_coinvestment(self, bank_coinvestment):
        """Sets the bank_coinvestment of this RowItemCommission.

        Выплаты по механикам лояльности партнёров: зелёные цены.  # noqa: E501

        :param bank_coinvestment: The bank_coinvestment of this RowItemCommission.  # noqa: E501
        :type: float
        """

        self._bank_coinvestment = bank_coinvestment

    @property
    def stars(self):
        """Gets the stars of this RowItemCommission.  # noqa: E501

        Выплаты по механикам лояльности партнёров: звёзды.  # noqa: E501

        :return: The stars of this RowItemCommission.  # noqa: E501
        :rtype: float
        """
        return self._stars

    @stars.setter
    def stars(self, stars):
        """Sets the stars of this RowItemCommission.

        Выплаты по механикам лояльности партнёров: звёзды.  # noqa: E501

        :param stars: The stars of this RowItemCommission.  # noqa: E501
        :type: float
        """

        self._stars = stars

    @property
    def pick_up_point_coinvestment(self):
        """Gets the pick_up_point_coinvestment of this RowItemCommission.  # noqa: E501

        Выплаты по механикам лояльности партнёров: АПВЗ.  # noqa: E501

        :return: The pick_up_point_coinvestment of this RowItemCommission.  # noqa: E501
        :rtype: float
        """
        return self._pick_up_point_coinvestment

    @pick_up_point_coinvestment.setter
    def pick_up_point_coinvestment(self, pick_up_point_coinvestment):
        """Sets the pick_up_point_coinvestment of this RowItemCommission.

        Выплаты по механикам лояльности партнёров: АПВЗ.  # noqa: E501

        :param pick_up_point_coinvestment: The pick_up_point_coinvestment of this RowItemCommission.  # noqa: E501
        :type: float
        """

        self._pick_up_point_coinvestment = pick_up_point_coinvestment

    @property
    def total(self):
        """Gets the total of this RowItemCommission.  # noqa: E501

        Итого к начислению.  # noqa: E501

        :return: The total of this RowItemCommission.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this RowItemCommission.

        Итого к начислению.  # noqa: E501

        :param total: The total of this RowItemCommission.  # noqa: E501
        :type: float
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RowItemCommission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RowItemCommission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
