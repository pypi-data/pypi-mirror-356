# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FbsPostingProductExemplarCreateOrGetV6ResponseProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exemplars': 'list[ProductExemplar]',
        'is_gtd_needed': 'bool',
        'is_jw_uin_needed': 'bool',
        'is_mandatory_mark_needed': 'bool',
        'is_mandatory_mark_possible': 'bool',
        'is_rnpt_needed': 'bool',
        'product_id': 'int',
        'quantity': 'int'
    }

    attribute_map = {
        'exemplars': 'exemplars',
        'is_gtd_needed': 'is_gtd_needed',
        'is_jw_uin_needed': 'is_jw_uin_needed',
        'is_mandatory_mark_needed': 'is_mandatory_mark_needed',
        'is_mandatory_mark_possible': 'is_mandatory_mark_possible',
        'is_rnpt_needed': 'is_rnpt_needed',
        'product_id': 'product_id',
        'quantity': 'quantity'
    }

    def __init__(self, exemplars=None, is_gtd_needed=None, is_jw_uin_needed=None, is_mandatory_mark_needed=None, is_mandatory_mark_possible=None, is_rnpt_needed=None, product_id=None, quantity=None):  # noqa: E501
        """FbsPostingProductExemplarCreateOrGetV6ResponseProduct - a model defined in Swagger"""  # noqa: E501
        self._exemplars = None
        self._is_gtd_needed = None
        self._is_jw_uin_needed = None
        self._is_mandatory_mark_needed = None
        self._is_mandatory_mark_possible = None
        self._is_rnpt_needed = None
        self._product_id = None
        self._quantity = None
        self.discriminator = None
        if exemplars is not None:
            self.exemplars = exemplars
        if is_gtd_needed is not None:
            self.is_gtd_needed = is_gtd_needed
        if is_jw_uin_needed is not None:
            self.is_jw_uin_needed = is_jw_uin_needed
        if is_mandatory_mark_needed is not None:
            self.is_mandatory_mark_needed = is_mandatory_mark_needed
        if is_mandatory_mark_possible is not None:
            self.is_mandatory_mark_possible = is_mandatory_mark_possible
        if is_rnpt_needed is not None:
            self.is_rnpt_needed = is_rnpt_needed
        if product_id is not None:
            self.product_id = product_id
        if quantity is not None:
            self.quantity = quantity

    @property
    def exemplars(self):
        """Gets the exemplars of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501

        Информация об экземплярах.  # noqa: E501

        :return: The exemplars of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :rtype: list[ProductExemplar]
        """
        return self._exemplars

    @exemplars.setter
    def exemplars(self, exemplars):
        """Sets the exemplars of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.

        Информация об экземплярах.  # noqa: E501

        :param exemplars: The exemplars of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :type: list[ProductExemplar]
        """

        self._exemplars = exemplars

    @property
    def is_gtd_needed(self):
        """Gets the is_gtd_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501

        Признак того, что необходимо передать номер грузовой таможенной декларации (ГТД) для продукта и отправления.  # noqa: E501

        :return: The is_gtd_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_gtd_needed

    @is_gtd_needed.setter
    def is_gtd_needed(self, is_gtd_needed):
        """Sets the is_gtd_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.

        Признак того, что необходимо передать номер грузовой таможенной декларации (ГТД) для продукта и отправления.  # noqa: E501

        :param is_gtd_needed: The is_gtd_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :type: bool
        """

        self._is_gtd_needed = is_gtd_needed

    @property
    def is_jw_uin_needed(self):
        """Gets the is_jw_uin_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501

        Признак того, что необходимо передать уникальный идентификационный номер ювелирного изделия (УИН).  # noqa: E501

        :return: The is_jw_uin_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_jw_uin_needed

    @is_jw_uin_needed.setter
    def is_jw_uin_needed(self, is_jw_uin_needed):
        """Sets the is_jw_uin_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.

        Признак того, что необходимо передать уникальный идентификационный номер ювелирного изделия (УИН).  # noqa: E501

        :param is_jw_uin_needed: The is_jw_uin_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :type: bool
        """

        self._is_jw_uin_needed = is_jw_uin_needed

    @property
    def is_mandatory_mark_needed(self):
        """Gets the is_mandatory_mark_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501

        Признак того, что необходимо передать маркировку «Честный ЗНАК».  # noqa: E501

        :return: The is_mandatory_mark_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory_mark_needed

    @is_mandatory_mark_needed.setter
    def is_mandatory_mark_needed(self, is_mandatory_mark_needed):
        """Sets the is_mandatory_mark_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.

        Признак того, что необходимо передать маркировку «Честный ЗНАК».  # noqa: E501

        :param is_mandatory_mark_needed: The is_mandatory_mark_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :type: bool
        """

        self._is_mandatory_mark_needed = is_mandatory_mark_needed

    @property
    def is_mandatory_mark_possible(self):
        """Gets the is_mandatory_mark_possible of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501

        Признак того, что возможно заполнить маркировку «Честный ЗНАК».  # noqa: E501

        :return: The is_mandatory_mark_possible of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory_mark_possible

    @is_mandatory_mark_possible.setter
    def is_mandatory_mark_possible(self, is_mandatory_mark_possible):
        """Sets the is_mandatory_mark_possible of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.

        Признак того, что возможно заполнить маркировку «Честный ЗНАК».  # noqa: E501

        :param is_mandatory_mark_possible: The is_mandatory_mark_possible of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :type: bool
        """

        self._is_mandatory_mark_possible = is_mandatory_mark_possible

    @property
    def is_rnpt_needed(self):
        """Gets the is_rnpt_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501

        Признак того, что необходимо передать номер партии товара (РНПТ).  # noqa: E501

        :return: The is_rnpt_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_rnpt_needed

    @is_rnpt_needed.setter
    def is_rnpt_needed(self, is_rnpt_needed):
        """Sets the is_rnpt_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.

        Признак того, что необходимо передать номер партии товара (РНПТ).  # noqa: E501

        :param is_rnpt_needed: The is_rnpt_needed of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :type: bool
        """

        self._is_rnpt_needed = is_rnpt_needed

    @property
    def product_id(self):
        """Gets the product_id of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501

        Количество экземпляров.  # noqa: E501

        :return: The quantity of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.

        Количество экземпляров.  # noqa: E501

        :param quantity: The quantity of this FbsPostingProductExemplarCreateOrGetV6ResponseProduct.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FbsPostingProductExemplarCreateOrGetV6ResponseProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FbsPostingProductExemplarCreateOrGetV6ResponseProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
