# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_cancel': 'bool',
        'creation_date': 'str',
        'creation_flow': 'str',
        'data_filling_deadline_utc': 'datetime',
        'dropoff_warehouse_id': 'int',
        'is_econom': 'bool',
        'is_super_fbo': 'bool',
        'is_virtual': 'bool',
        'product_super_fbo': 'bool',
        'state': 'V2State',
        'supplies': 'list[V2OrderSupply]',
        'supply_order_id': 'int',
        'supply_order_number': 'str',
        'timeslot': 'list[V2OrderTimeslot]',
        'vehicle': 'list[V2OrderVehicle]'
    }

    attribute_map = {
        'can_cancel': 'can_cancel',
        'creation_date': 'creation_date',
        'creation_flow': 'creation_flow',
        'data_filling_deadline_utc': 'data_filling_deadline_utc',
        'dropoff_warehouse_id': 'dropoff_warehouse_id',
        'is_econom': 'is_econom',
        'is_super_fbo': 'is_super_fbo',
        'is_virtual': 'is_virtual',
        'product_super_fbo': 'product_super_fbo',
        'state': 'state',
        'supplies': 'supplies',
        'supply_order_id': 'supply_order_id',
        'supply_order_number': 'supply_order_number',
        'timeslot': 'timeslot',
        'vehicle': 'vehicle'
    }

    def __init__(self, can_cancel=None, creation_date=None, creation_flow=None, data_filling_deadline_utc=None, dropoff_warehouse_id=None, is_econom=None, is_super_fbo=None, is_virtual=None, product_super_fbo=None, state=None, supplies=None, supply_order_id=None, supply_order_number=None, timeslot=None, vehicle=None):  # noqa: E501
        """V2Order - a model defined in Swagger"""  # noqa: E501
        self._can_cancel = None
        self._creation_date = None
        self._creation_flow = None
        self._data_filling_deadline_utc = None
        self._dropoff_warehouse_id = None
        self._is_econom = None
        self._is_super_fbo = None
        self._is_virtual = None
        self._product_super_fbo = None
        self._state = None
        self._supplies = None
        self._supply_order_id = None
        self._supply_order_number = None
        self._timeslot = None
        self._vehicle = None
        self.discriminator = None
        if can_cancel is not None:
            self.can_cancel = can_cancel
        if creation_date is not None:
            self.creation_date = creation_date
        if creation_flow is not None:
            self.creation_flow = creation_flow
        if data_filling_deadline_utc is not None:
            self.data_filling_deadline_utc = data_filling_deadline_utc
        if dropoff_warehouse_id is not None:
            self.dropoff_warehouse_id = dropoff_warehouse_id
        if is_econom is not None:
            self.is_econom = is_econom
        if is_super_fbo is not None:
            self.is_super_fbo = is_super_fbo
        if is_virtual is not None:
            self.is_virtual = is_virtual
        if product_super_fbo is not None:
            self.product_super_fbo = product_super_fbo
        if state is not None:
            self.state = state
        if supplies is not None:
            self.supplies = supplies
        if supply_order_id is not None:
            self.supply_order_id = supply_order_id
        if supply_order_number is not None:
            self.supply_order_number = supply_order_number
        if timeslot is not None:
            self.timeslot = timeslot
        if vehicle is not None:
            self.vehicle = vehicle

    @property
    def can_cancel(self):
        """Gets the can_cancel of this V2Order.  # noqa: E501

        `true`, если заявку можно отменить.   # noqa: E501

        :return: The can_cancel of this V2Order.  # noqa: E501
        :rtype: bool
        """
        return self._can_cancel

    @can_cancel.setter
    def can_cancel(self, can_cancel):
        """Sets the can_cancel of this V2Order.

        `true`, если заявку можно отменить.   # noqa: E501

        :param can_cancel: The can_cancel of this V2Order.  # noqa: E501
        :type: bool
        """

        self._can_cancel = can_cancel

    @property
    def creation_date(self):
        """Gets the creation_date of this V2Order.  # noqa: E501

        Дата создания заявки на поставку.  # noqa: E501

        :return: The creation_date of this V2Order.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this V2Order.

        Дата создания заявки на поставку.  # noqa: E501

        :param creation_date: The creation_date of this V2Order.  # noqa: E501
        :type: str
        """

        self._creation_date = creation_date

    @property
    def creation_flow(self):
        """Gets the creation_flow of this V2Order.  # noqa: E501

        Источник заявки: - `ORDER_SOURCE_RESPONSE_NONE` — нет источника заявки; - `ORDER_SOURCE_RESPONSE_VIRTUAL_DISTRIBUTION_CENTER` — поставка создана автоматически.   # noqa: E501

        :return: The creation_flow of this V2Order.  # noqa: E501
        :rtype: str
        """
        return self._creation_flow

    @creation_flow.setter
    def creation_flow(self, creation_flow):
        """Sets the creation_flow of this V2Order.

        Источник заявки: - `ORDER_SOURCE_RESPONSE_NONE` — нет источника заявки; - `ORDER_SOURCE_RESPONSE_VIRTUAL_DISTRIBUTION_CENTER` — поставка создана автоматически.   # noqa: E501

        :param creation_flow: The creation_flow of this V2Order.  # noqa: E501
        :type: str
        """

        self._creation_flow = creation_flow

    @property
    def data_filling_deadline_utc(self):
        """Gets the data_filling_deadline_utc of this V2Order.  # noqa: E501

        Время в секундах, оставшееся на заполнение данных по поставке. Только для заявок с вРЦ.  # noqa: E501

        :return: The data_filling_deadline_utc of this V2Order.  # noqa: E501
        :rtype: datetime
        """
        return self._data_filling_deadline_utc

    @data_filling_deadline_utc.setter
    def data_filling_deadline_utc(self, data_filling_deadline_utc):
        """Sets the data_filling_deadline_utc of this V2Order.

        Время в секундах, оставшееся на заполнение данных по поставке. Только для заявок с вРЦ.  # noqa: E501

        :param data_filling_deadline_utc: The data_filling_deadline_utc of this V2Order.  # noqa: E501
        :type: datetime
        """

        self._data_filling_deadline_utc = data_filling_deadline_utc

    @property
    def dropoff_warehouse_id(self):
        """Gets the dropoff_warehouse_id of this V2Order.  # noqa: E501

        Идентификатор склада поставки.  # noqa: E501

        :return: The dropoff_warehouse_id of this V2Order.  # noqa: E501
        :rtype: int
        """
        return self._dropoff_warehouse_id

    @dropoff_warehouse_id.setter
    def dropoff_warehouse_id(self, dropoff_warehouse_id):
        """Sets the dropoff_warehouse_id of this V2Order.

        Идентификатор склада поставки.  # noqa: E501

        :param dropoff_warehouse_id: The dropoff_warehouse_id of this V2Order.  # noqa: E501
        :type: int
        """

        self._dropoff_warehouse_id = dropoff_warehouse_id

    @property
    def is_econom(self):
        """Gets the is_econom of this V2Order.  # noqa: E501

        `true`, если заявка на поставку относится к товарам «Суперэконом».   # noqa: E501

        :return: The is_econom of this V2Order.  # noqa: E501
        :rtype: bool
        """
        return self._is_econom

    @is_econom.setter
    def is_econom(self, is_econom):
        """Sets the is_econom of this V2Order.

        `true`, если заявка на поставку относится к товарам «Суперэконом».   # noqa: E501

        :param is_econom: The is_econom of this V2Order.  # noqa: E501
        :type: bool
        """

        self._is_econom = is_econom

    @property
    def is_super_fbo(self):
        """Gets the is_super_fbo of this V2Order.  # noqa: E501

        `true`, если продавец подключен к Super-поставкам.   # noqa: E501

        :return: The is_super_fbo of this V2Order.  # noqa: E501
        :rtype: bool
        """
        return self._is_super_fbo

    @is_super_fbo.setter
    def is_super_fbo(self, is_super_fbo):
        """Sets the is_super_fbo of this V2Order.

        `true`, если продавец подключен к Super-поставкам.   # noqa: E501

        :param is_super_fbo: The is_super_fbo of this V2Order.  # noqa: E501
        :type: bool
        """

        self._is_super_fbo = is_super_fbo

    @property
    def is_virtual(self):
        """Gets the is_virtual of this V2Order.  # noqa: E501

        `true`, если заявка на поставку виртуальная.   # noqa: E501

        :return: The is_virtual of this V2Order.  # noqa: E501
        :rtype: bool
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """Sets the is_virtual of this V2Order.

        `true`, если заявка на поставку виртуальная.   # noqa: E501

        :param is_virtual: The is_virtual of this V2Order.  # noqa: E501
        :type: bool
        """

        self._is_virtual = is_virtual

    @property
    def product_super_fbo(self):
        """Gets the product_super_fbo of this V2Order.  # noqa: E501

        `true`, если заявка на поставку относится к Super-товарам.   # noqa: E501

        :return: The product_super_fbo of this V2Order.  # noqa: E501
        :rtype: bool
        """
        return self._product_super_fbo

    @product_super_fbo.setter
    def product_super_fbo(self, product_super_fbo):
        """Sets the product_super_fbo of this V2Order.

        `true`, если заявка на поставку относится к Super-товарам.   # noqa: E501

        :param product_super_fbo: The product_super_fbo of this V2Order.  # noqa: E501
        :type: bool
        """

        self._product_super_fbo = product_super_fbo

    @property
    def state(self):
        """Gets the state of this V2Order.  # noqa: E501


        :return: The state of this V2Order.  # noqa: E501
        :rtype: V2State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V2Order.


        :param state: The state of this V2Order.  # noqa: E501
        :type: V2State
        """

        self._state = state

    @property
    def supplies(self):
        """Gets the supplies of this V2Order.  # noqa: E501

        Состав заявки на поставку.  # noqa: E501

        :return: The supplies of this V2Order.  # noqa: E501
        :rtype: list[V2OrderSupply]
        """
        return self._supplies

    @supplies.setter
    def supplies(self, supplies):
        """Sets the supplies of this V2Order.

        Состав заявки на поставку.  # noqa: E501

        :param supplies: The supplies of this V2Order.  # noqa: E501
        :type: list[V2OrderSupply]
        """

        self._supplies = supplies

    @property
    def supply_order_id(self):
        """Gets the supply_order_id of this V2Order.  # noqa: E501

        Идентификатор заявки на поставку.  # noqa: E501

        :return: The supply_order_id of this V2Order.  # noqa: E501
        :rtype: int
        """
        return self._supply_order_id

    @supply_order_id.setter
    def supply_order_id(self, supply_order_id):
        """Sets the supply_order_id of this V2Order.

        Идентификатор заявки на поставку.  # noqa: E501

        :param supply_order_id: The supply_order_id of this V2Order.  # noqa: E501
        :type: int
        """

        self._supply_order_id = supply_order_id

    @property
    def supply_order_number(self):
        """Gets the supply_order_number of this V2Order.  # noqa: E501

        Номер заявки.  # noqa: E501

        :return: The supply_order_number of this V2Order.  # noqa: E501
        :rtype: str
        """
        return self._supply_order_number

    @supply_order_number.setter
    def supply_order_number(self, supply_order_number):
        """Sets the supply_order_number of this V2Order.

        Номер заявки.  # noqa: E501

        :param supply_order_number: The supply_order_number of this V2Order.  # noqa: E501
        :type: str
        """

        self._supply_order_number = supply_order_number

    @property
    def timeslot(self):
        """Gets the timeslot of this V2Order.  # noqa: E501

        Интервал поставки.  # noqa: E501

        :return: The timeslot of this V2Order.  # noqa: E501
        :rtype: list[V2OrderTimeslot]
        """
        return self._timeslot

    @timeslot.setter
    def timeslot(self, timeslot):
        """Sets the timeslot of this V2Order.

        Интервал поставки.  # noqa: E501

        :param timeslot: The timeslot of this V2Order.  # noqa: E501
        :type: list[V2OrderTimeslot]
        """

        self._timeslot = timeslot

    @property
    def vehicle(self):
        """Gets the vehicle of this V2Order.  # noqa: E501

        Информация о водителе и автомобиле.  # noqa: E501

        :return: The vehicle of this V2Order.  # noqa: E501
        :rtype: list[V2OrderVehicle]
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this V2Order.

        Информация о водителе и автомобиле.  # noqa: E501

        :param vehicle: The vehicle of this V2Order.  # noqa: E501
        :type: list[V2OrderVehicle]
        """

        self._vehicle = vehicle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
