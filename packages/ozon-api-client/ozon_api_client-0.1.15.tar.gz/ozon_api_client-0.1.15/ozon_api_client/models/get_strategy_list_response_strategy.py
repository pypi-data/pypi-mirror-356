# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetStrategyListResponseStrategy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'update_type': 'str',
        'updated_at': 'str',
        'products_count': 'int',
        'competitors_count': 'int',
        'enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'update_type': 'update_type',
        'updated_at': 'updated_at',
        'products_count': 'products_count',
        'competitors_count': 'competitors_count',
        'enabled': 'enabled'
    }

    def __init__(self, id=None, name=None, type=None, update_type=None, updated_at=None, products_count=None, competitors_count=None, enabled=None):  # noqa: E501
        """GetStrategyListResponseStrategy - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._type = None
        self._update_type = None
        self._updated_at = None
        self._products_count = None
        self._competitors_count = None
        self._enabled = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if update_type is not None:
            self.update_type = update_type
        if updated_at is not None:
            self.updated_at = updated_at
        if products_count is not None:
            self.products_count = products_count
        if competitors_count is not None:
            self.competitors_count = competitors_count
        if enabled is not None:
            self.enabled = enabled

    @property
    def id(self):
        """Gets the id of this GetStrategyListResponseStrategy.  # noqa: E501

        Идентификатор стратегии.  # noqa: E501

        :return: The id of this GetStrategyListResponseStrategy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetStrategyListResponseStrategy.

        Идентификатор стратегии.  # noqa: E501

        :param id: The id of this GetStrategyListResponseStrategy.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetStrategyListResponseStrategy.  # noqa: E501

        Название стратегии.  # noqa: E501

        :return: The name of this GetStrategyListResponseStrategy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetStrategyListResponseStrategy.

        Название стратегии.  # noqa: E501

        :param name: The name of this GetStrategyListResponseStrategy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this GetStrategyListResponseStrategy.  # noqa: E501

        Тип стратегии: - `MIN_EXT_PRICE` — системная, - `COMP_PRICE` — пользовательская.   # noqa: E501

        :return: The type of this GetStrategyListResponseStrategy.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetStrategyListResponseStrategy.

        Тип стратегии: - `MIN_EXT_PRICE` — системная, - `COMP_PRICE` — пользовательская.   # noqa: E501

        :param type: The type of this GetStrategyListResponseStrategy.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def update_type(self):
        """Gets the update_type of this GetStrategyListResponseStrategy.  # noqa: E501

        Тип последнего изменения стратегии: - `strategyEnabled` — возобновлена, - `strategyDisabled` — остановлена, - `strategyChanged` — обновлена, - `strategyCreated` — создана, - `strategyItemsListChanged` — изменён набор товаров в стратегии.   # noqa: E501

        :return: The update_type of this GetStrategyListResponseStrategy.  # noqa: E501
        :rtype: str
        """
        return self._update_type

    @update_type.setter
    def update_type(self, update_type):
        """Sets the update_type of this GetStrategyListResponseStrategy.

        Тип последнего изменения стратегии: - `strategyEnabled` — возобновлена, - `strategyDisabled` — остановлена, - `strategyChanged` — обновлена, - `strategyCreated` — создана, - `strategyItemsListChanged` — изменён набор товаров в стратегии.   # noqa: E501

        :param update_type: The update_type of this GetStrategyListResponseStrategy.  # noqa: E501
        :type: str
        """

        self._update_type = update_type

    @property
    def updated_at(self):
        """Gets the updated_at of this GetStrategyListResponseStrategy.  # noqa: E501

        Дата последнего изменения.  # noqa: E501

        :return: The updated_at of this GetStrategyListResponseStrategy.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GetStrategyListResponseStrategy.

        Дата последнего изменения.  # noqa: E501

        :param updated_at: The updated_at of this GetStrategyListResponseStrategy.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def products_count(self):
        """Gets the products_count of this GetStrategyListResponseStrategy.  # noqa: E501

        Количество товаров в стратегии.  # noqa: E501

        :return: The products_count of this GetStrategyListResponseStrategy.  # noqa: E501
        :rtype: int
        """
        return self._products_count

    @products_count.setter
    def products_count(self, products_count):
        """Sets the products_count of this GetStrategyListResponseStrategy.

        Количество товаров в стратегии.  # noqa: E501

        :param products_count: The products_count of this GetStrategyListResponseStrategy.  # noqa: E501
        :type: int
        """

        self._products_count = products_count

    @property
    def competitors_count(self):
        """Gets the competitors_count of this GetStrategyListResponseStrategy.  # noqa: E501

        Количество выбранных конкурентов.  # noqa: E501

        :return: The competitors_count of this GetStrategyListResponseStrategy.  # noqa: E501
        :rtype: int
        """
        return self._competitors_count

    @competitors_count.setter
    def competitors_count(self, competitors_count):
        """Sets the competitors_count of this GetStrategyListResponseStrategy.

        Количество выбранных конкурентов.  # noqa: E501

        :param competitors_count: The competitors_count of this GetStrategyListResponseStrategy.  # noqa: E501
        :type: int
        """

        self._competitors_count = competitors_count

    @property
    def enabled(self):
        """Gets the enabled of this GetStrategyListResponseStrategy.  # noqa: E501

        Статус стратегии: - `true` — включена, - `false` — отключена.   # noqa: E501

        :return: The enabled of this GetStrategyListResponseStrategy.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GetStrategyListResponseStrategy.

        Статус стратегии: - `true` — включена, - `false` — отключена.   # noqa: E501

        :param enabled: The enabled of this GetStrategyListResponseStrategy.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetStrategyListResponseStrategy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetStrategyListResponseStrategy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
