# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Productv4GetProductAttributesV4ResponseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributes': 'list[ProductGetProductAttributesV4ResponseAttribute]',
        'barcode': 'str',
        'description_category_id': 'int',
        'color_image': 'str',
        'complex_attributes': 'list[GetProductAttributesV4ResponseAttribute]',
        'depth': 'int',
        'dimension_unit': 'str',
        'height': 'int',
        'id': 'int',
        'images': 'list[GetProductAttributesResponseImage]',
        'model_info': 'V4GetProductAttributesResponseModelInfo',
        'name': 'str',
        'offer_id': 'str',
        'pdf_list': 'list[V4GetProductAttributesResponsePdf]',
        'primary_image': 'str',
        'type_id': 'int',
        'weight': 'int',
        'weight_unit': 'str',
        'width': 'int'
    }

    attribute_map = {
        'attributes': 'attributes',
        'barcode': 'barcode',
        'description_category_id': 'description_category_id',
        'color_image': 'color_image',
        'complex_attributes': 'complex_attributes',
        'depth': 'depth',
        'dimension_unit': 'dimension_unit',
        'height': 'height',
        'id': 'id',
        'images': 'images',
        'model_info': 'model_info',
        'name': 'name',
        'offer_id': 'offer_id',
        'pdf_list': 'pdf_list',
        'primary_image': 'primary_image',
        'type_id': 'type_id',
        'weight': 'weight',
        'weight_unit': 'weight_unit',
        'width': 'width'
    }

    def __init__(self, attributes=None, barcode=None, description_category_id=None, color_image=None, complex_attributes=None, depth=None, dimension_unit=None, height=None, id=None, images=None, model_info=None, name=None, offer_id=None, pdf_list=None, primary_image=None, type_id=None, weight=None, weight_unit=None, width=None):  # noqa: E501
        """Productv4GetProductAttributesV4ResponseResult - a model defined in Swagger"""  # noqa: E501
        self._attributes = None
        self._barcode = None
        self._description_category_id = None
        self._color_image = None
        self._complex_attributes = None
        self._depth = None
        self._dimension_unit = None
        self._height = None
        self._id = None
        self._images = None
        self._model_info = None
        self._name = None
        self._offer_id = None
        self._pdf_list = None
        self._primary_image = None
        self._type_id = None
        self._weight = None
        self._weight_unit = None
        self._width = None
        self.discriminator = None
        if attributes is not None:
            self.attributes = attributes
        if barcode is not None:
            self.barcode = barcode
        if description_category_id is not None:
            self.description_category_id = description_category_id
        if color_image is not None:
            self.color_image = color_image
        if complex_attributes is not None:
            self.complex_attributes = complex_attributes
        if depth is not None:
            self.depth = depth
        if dimension_unit is not None:
            self.dimension_unit = dimension_unit
        if height is not None:
            self.height = height
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if model_info is not None:
            self.model_info = model_info
        if name is not None:
            self.name = name
        if offer_id is not None:
            self.offer_id = offer_id
        if pdf_list is not None:
            self.pdf_list = pdf_list
        if primary_image is not None:
            self.primary_image = primary_image
        if type_id is not None:
            self.type_id = type_id
        if weight is not None:
            self.weight = weight
        if weight_unit is not None:
            self.weight_unit = weight_unit
        if width is not None:
            self.width = width

    @property
    def attributes(self):
        """Gets the attributes of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Массив характеристик товара.  # noqa: E501

        :return: The attributes of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: list[ProductGetProductAttributesV4ResponseAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Productv4GetProductAttributesV4ResponseResult.

        Массив характеристик товара.  # noqa: E501

        :param attributes: The attributes of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: list[ProductGetProductAttributesV4ResponseAttribute]
        """

        self._attributes = attributes

    @property
    def barcode(self):
        """Gets the barcode of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Штрихкод.  # noqa: E501

        :return: The barcode of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this Productv4GetProductAttributesV4ResponseResult.

        Штрихкод.  # noqa: E501

        :param barcode: The barcode of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def description_category_id(self):
        """Gets the description_category_id of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Идентификатор категории. Используйте его с методами [/v1/description-category/attribute](#operation/DescriptionCategoryAPI_GetAttributes) и [/v1/description-category/attribute/values](#operation/DescriptionCategoryAPI_GetAttributeValues).   # noqa: E501

        :return: The description_category_id of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._description_category_id

    @description_category_id.setter
    def description_category_id(self, description_category_id):
        """Sets the description_category_id of this Productv4GetProductAttributesV4ResponseResult.

        Идентификатор категории. Используйте его с методами [/v1/description-category/attribute](#operation/DescriptionCategoryAPI_GetAttributes) и [/v1/description-category/attribute/values](#operation/DescriptionCategoryAPI_GetAttributeValues).   # noqa: E501

        :param description_category_id: The description_category_id of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: int
        """

        self._description_category_id = description_category_id

    @property
    def color_image(self):
        """Gets the color_image of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Маркетинговый цвет.  # noqa: E501

        :return: The color_image of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._color_image

    @color_image.setter
    def color_image(self, color_image):
        """Sets the color_image of this Productv4GetProductAttributesV4ResponseResult.

        Маркетинговый цвет.  # noqa: E501

        :param color_image: The color_image of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: str
        """

        self._color_image = color_image

    @property
    def complex_attributes(self):
        """Gets the complex_attributes of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Массив вложенных характеристик.  # noqa: E501

        :return: The complex_attributes of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: list[GetProductAttributesV4ResponseAttribute]
        """
        return self._complex_attributes

    @complex_attributes.setter
    def complex_attributes(self, complex_attributes):
        """Sets the complex_attributes of this Productv4GetProductAttributesV4ResponseResult.

        Массив вложенных характеристик.  # noqa: E501

        :param complex_attributes: The complex_attributes of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: list[GetProductAttributesV4ResponseAttribute]
        """

        self._complex_attributes = complex_attributes

    @property
    def depth(self):
        """Gets the depth of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Глубина.  # noqa: E501

        :return: The depth of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this Productv4GetProductAttributesV4ResponseResult.

        Глубина.  # noqa: E501

        :param depth: The depth of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: int
        """

        self._depth = depth

    @property
    def dimension_unit(self):
        """Gets the dimension_unit of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Единица измерения габаритов:   - `mm` — миллиметры,   - `cm` — сантиметры,   - `in` — дюймы.   # noqa: E501

        :return: The dimension_unit of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._dimension_unit

    @dimension_unit.setter
    def dimension_unit(self, dimension_unit):
        """Sets the dimension_unit of this Productv4GetProductAttributesV4ResponseResult.

        Единица измерения габаритов:   - `mm` — миллиметры,   - `cm` — сантиметры,   - `in` — дюймы.   # noqa: E501

        :param dimension_unit: The dimension_unit of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: str
        """

        self._dimension_unit = dimension_unit

    @property
    def height(self):
        """Gets the height of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Высота упаковки.  # noqa: E501

        :return: The height of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Productv4GetProductAttributesV4ResponseResult.

        Высота упаковки.  # noqa: E501

        :param height: The height of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The id of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Productv4GetProductAttributesV4ResponseResult.

        Идентификатор товара.  # noqa: E501

        :param id: The id of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Массив ссылок на изображения товара. Порядок изображений аналогичен порядку в карточке товаров.  # noqa: E501

        :return: The images of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: list[GetProductAttributesResponseImage]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Productv4GetProductAttributesV4ResponseResult.

        Массив ссылок на изображения товара. Порядок изображений аналогичен порядку в карточке товаров.  # noqa: E501

        :param images: The images of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: list[GetProductAttributesResponseImage]
        """

        self._images = images

    @property
    def model_info(self):
        """Gets the model_info of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501


        :return: The model_info of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: V4GetProductAttributesResponseModelInfo
        """
        return self._model_info

    @model_info.setter
    def model_info(self, model_info):
        """Sets the model_info of this Productv4GetProductAttributesV4ResponseResult.


        :param model_info: The model_info of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: V4GetProductAttributesResponseModelInfo
        """

        self._model_info = model_info

    @property
    def name(self):
        """Gets the name of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Название товара.  # noqa: E501

        :return: The name of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Productv4GetProductAttributesV4ResponseResult.

        Название товара.  # noqa: E501

        :param name: The name of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def offer_id(self):
        """Gets the offer_id of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :return: The offer_id of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this Productv4GetProductAttributesV4ResponseResult.

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :param offer_id: The offer_id of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def pdf_list(self):
        """Gets the pdf_list of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Массив PDF-файлов.  # noqa: E501

        :return: The pdf_list of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: list[V4GetProductAttributesResponsePdf]
        """
        return self._pdf_list

    @pdf_list.setter
    def pdf_list(self, pdf_list):
        """Sets the pdf_list of this Productv4GetProductAttributesV4ResponseResult.

        Массив PDF-файлов.  # noqa: E501

        :param pdf_list: The pdf_list of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: list[V4GetProductAttributesResponsePdf]
        """

        self._pdf_list = pdf_list

    @property
    def primary_image(self):
        """Gets the primary_image of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Ссылка на главное изображение товара.  # noqa: E501

        :return: The primary_image of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._primary_image

    @primary_image.setter
    def primary_image(self, primary_image):
        """Sets the primary_image of this Productv4GetProductAttributesV4ResponseResult.

        Ссылка на главное изображение товара.  # noqa: E501

        :param primary_image: The primary_image of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: str
        """

        self._primary_image = primary_image

    @property
    def type_id(self):
        """Gets the type_id of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Идентификатор типа товара.  # noqa: E501

        :return: The type_id of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this Productv4GetProductAttributesV4ResponseResult.

        Идентификатор типа товара.  # noqa: E501

        :param type_id: The type_id of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def weight(self):
        """Gets the weight of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Вес товара в упаковке.  # noqa: E501

        :return: The weight of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Productv4GetProductAttributesV4ResponseResult.

        Вес товара в упаковке.  # noqa: E501

        :param weight: The weight of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def weight_unit(self):
        """Gets the weight_unit of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Единица измерения веса.  # noqa: E501

        :return: The weight_unit of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this Productv4GetProductAttributesV4ResponseResult.

        Единица измерения веса.  # noqa: E501

        :param weight_unit: The weight_unit of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: str
        """

        self._weight_unit = weight_unit

    @property
    def width(self):
        """Gets the width of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501

        Ширина упаковки.  # noqa: E501

        :return: The width of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Productv4GetProductAttributesV4ResponseResult.

        Ширина упаковки.  # noqa: E501

        :param width: The width of this Productv4GetProductAttributesV4ResponseResult.  # noqa: E501
        :type: int
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Productv4GetProductAttributesV4ResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Productv4GetProductAttributesV4ResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
