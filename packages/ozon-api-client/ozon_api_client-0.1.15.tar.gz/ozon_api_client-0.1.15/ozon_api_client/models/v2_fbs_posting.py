# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2FbsPosting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analytics_data': 'FbsPostingFbsPostingAnalyticsData',
        'barcodes': 'FbsPostingBarcodes',
        'cancel_reason_id': 'int',
        'created_at': 'datetime',
        'financial_data': 'V2PostingFinancialData',
        'in_process_at': 'datetime',
        'order_id': 'int',
        'order_number': 'str',
        'posting_number': 'str',
        'products': 'list[V2FbsPostingProduct]',
        'shipment_date': 'datetime',
        'status': 'str'
    }

    attribute_map = {
        'analytics_data': 'analytics_data',
        'barcodes': 'barcodes',
        'cancel_reason_id': 'cancel_reason_id',
        'created_at': 'created_at',
        'financial_data': 'financial_data',
        'in_process_at': 'in_process_at',
        'order_id': 'order_id',
        'order_number': 'order_number',
        'posting_number': 'posting_number',
        'products': 'products',
        'shipment_date': 'shipment_date',
        'status': 'status'
    }

    def __init__(self, analytics_data=None, barcodes=None, cancel_reason_id=None, created_at=None, financial_data=None, in_process_at=None, order_id=None, order_number=None, posting_number=None, products=None, shipment_date=None, status=None):  # noqa: E501
        """V2FbsPosting - a model defined in Swagger"""  # noqa: E501
        self._analytics_data = None
        self._barcodes = None
        self._cancel_reason_id = None
        self._created_at = None
        self._financial_data = None
        self._in_process_at = None
        self._order_id = None
        self._order_number = None
        self._posting_number = None
        self._products = None
        self._shipment_date = None
        self._status = None
        self.discriminator = None
        if analytics_data is not None:
            self.analytics_data = analytics_data
        if barcodes is not None:
            self.barcodes = barcodes
        if cancel_reason_id is not None:
            self.cancel_reason_id = cancel_reason_id
        if created_at is not None:
            self.created_at = created_at
        if financial_data is not None:
            self.financial_data = financial_data
        if in_process_at is not None:
            self.in_process_at = in_process_at
        if order_id is not None:
            self.order_id = order_id
        if order_number is not None:
            self.order_number = order_number
        if posting_number is not None:
            self.posting_number = posting_number
        if products is not None:
            self.products = products
        if shipment_date is not None:
            self.shipment_date = shipment_date
        if status is not None:
            self.status = status

    @property
    def analytics_data(self):
        """Gets the analytics_data of this V2FbsPosting.  # noqa: E501


        :return: The analytics_data of this V2FbsPosting.  # noqa: E501
        :rtype: FbsPostingFbsPostingAnalyticsData
        """
        return self._analytics_data

    @analytics_data.setter
    def analytics_data(self, analytics_data):
        """Sets the analytics_data of this V2FbsPosting.


        :param analytics_data: The analytics_data of this V2FbsPosting.  # noqa: E501
        :type: FbsPostingFbsPostingAnalyticsData
        """

        self._analytics_data = analytics_data

    @property
    def barcodes(self):
        """Gets the barcodes of this V2FbsPosting.  # noqa: E501


        :return: The barcodes of this V2FbsPosting.  # noqa: E501
        :rtype: FbsPostingBarcodes
        """
        return self._barcodes

    @barcodes.setter
    def barcodes(self, barcodes):
        """Sets the barcodes of this V2FbsPosting.


        :param barcodes: The barcodes of this V2FbsPosting.  # noqa: E501
        :type: FbsPostingBarcodes
        """

        self._barcodes = barcodes

    @property
    def cancel_reason_id(self):
        """Gets the cancel_reason_id of this V2FbsPosting.  # noqa: E501

        Идентификатор причины отмены отправления.  # noqa: E501

        :return: The cancel_reason_id of this V2FbsPosting.  # noqa: E501
        :rtype: int
        """
        return self._cancel_reason_id

    @cancel_reason_id.setter
    def cancel_reason_id(self, cancel_reason_id):
        """Sets the cancel_reason_id of this V2FbsPosting.

        Идентификатор причины отмены отправления.  # noqa: E501

        :param cancel_reason_id: The cancel_reason_id of this V2FbsPosting.  # noqa: E501
        :type: int
        """

        self._cancel_reason_id = cancel_reason_id

    @property
    def created_at(self):
        """Gets the created_at of this V2FbsPosting.  # noqa: E501

        Дата и время создания отправления.  # noqa: E501

        :return: The created_at of this V2FbsPosting.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2FbsPosting.

        Дата и время создания отправления.  # noqa: E501

        :param created_at: The created_at of this V2FbsPosting.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def financial_data(self):
        """Gets the financial_data of this V2FbsPosting.  # noqa: E501


        :return: The financial_data of this V2FbsPosting.  # noqa: E501
        :rtype: V2PostingFinancialData
        """
        return self._financial_data

    @financial_data.setter
    def financial_data(self, financial_data):
        """Sets the financial_data of this V2FbsPosting.


        :param financial_data: The financial_data of this V2FbsPosting.  # noqa: E501
        :type: V2PostingFinancialData
        """

        self._financial_data = financial_data

    @property
    def in_process_at(self):
        """Gets the in_process_at of this V2FbsPosting.  # noqa: E501

        Дата и время начала обработки отправления.  # noqa: E501

        :return: The in_process_at of this V2FbsPosting.  # noqa: E501
        :rtype: datetime
        """
        return self._in_process_at

    @in_process_at.setter
    def in_process_at(self, in_process_at):
        """Sets the in_process_at of this V2FbsPosting.

        Дата и время начала обработки отправления.  # noqa: E501

        :param in_process_at: The in_process_at of this V2FbsPosting.  # noqa: E501
        :type: datetime
        """

        self._in_process_at = in_process_at

    @property
    def order_id(self):
        """Gets the order_id of this V2FbsPosting.  # noqa: E501

        Идентификатор заказа, к которому относится отправление.  # noqa: E501

        :return: The order_id of this V2FbsPosting.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this V2FbsPosting.

        Идентификатор заказа, к которому относится отправление.  # noqa: E501

        :param order_id: The order_id of this V2FbsPosting.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    @property
    def order_number(self):
        """Gets the order_number of this V2FbsPosting.  # noqa: E501

        Номер заказа, к которому относится отправление.  # noqa: E501

        :return: The order_number of this V2FbsPosting.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this V2FbsPosting.

        Номер заказа, к которому относится отправление.  # noqa: E501

        :param order_number: The order_number of this V2FbsPosting.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def posting_number(self):
        """Gets the posting_number of this V2FbsPosting.  # noqa: E501

        Номер отправления.  # noqa: E501

        :return: The posting_number of this V2FbsPosting.  # noqa: E501
        :rtype: str
        """
        return self._posting_number

    @posting_number.setter
    def posting_number(self, posting_number):
        """Sets the posting_number of this V2FbsPosting.

        Номер отправления.  # noqa: E501

        :param posting_number: The posting_number of this V2FbsPosting.  # noqa: E501
        :type: str
        """

        self._posting_number = posting_number

    @property
    def products(self):
        """Gets the products of this V2FbsPosting.  # noqa: E501

        Список товаров в отправлении.  # noqa: E501

        :return: The products of this V2FbsPosting.  # noqa: E501
        :rtype: list[V2FbsPostingProduct]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this V2FbsPosting.

        Список товаров в отправлении.  # noqa: E501

        :param products: The products of this V2FbsPosting.  # noqa: E501
        :type: list[V2FbsPostingProduct]
        """

        self._products = products

    @property
    def shipment_date(self):
        """Gets the shipment_date of this V2FbsPosting.  # noqa: E501

        Дата и время, до которой необходимо собрать отправление. Если отправление не собрать к этой дате — оно автоматически отменится.  # noqa: E501

        :return: The shipment_date of this V2FbsPosting.  # noqa: E501
        :rtype: datetime
        """
        return self._shipment_date

    @shipment_date.setter
    def shipment_date(self, shipment_date):
        """Sets the shipment_date of this V2FbsPosting.

        Дата и время, до которой необходимо собрать отправление. Если отправление не собрать к этой дате — оно автоматически отменится.  # noqa: E501

        :param shipment_date: The shipment_date of this V2FbsPosting.  # noqa: E501
        :type: datetime
        """

        self._shipment_date = shipment_date

    @property
    def status(self):
        """Gets the status of this V2FbsPosting.  # noqa: E501

        Статус отправления.  # noqa: E501

        :return: The status of this V2FbsPosting.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V2FbsPosting.

        Статус отправления.  # noqa: E501

        :param status: The status of this V2FbsPosting.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2FbsPosting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2FbsPosting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
