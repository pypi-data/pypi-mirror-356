# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PriceIndexesIndexDataOzon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'minimal_price': 'str',
        'minimal_price_currency': 'str',
        'price_index_value': 'float'
    }

    attribute_map = {
        'minimal_price': 'minimal_price',
        'minimal_price_currency': 'minimal_price_currency',
        'price_index_value': 'price_index_value'
    }

    def __init__(self, minimal_price=None, minimal_price_currency=None, price_index_value=None):  # noqa: E501
        """PriceIndexesIndexDataOzon - a model defined in Swagger"""  # noqa: E501
        self._minimal_price = None
        self._minimal_price_currency = None
        self._price_index_value = None
        self.discriminator = None
        if minimal_price is not None:
            self.minimal_price = minimal_price
        if minimal_price_currency is not None:
            self.minimal_price_currency = minimal_price_currency
        if price_index_value is not None:
            self.price_index_value = price_index_value

    @property
    def minimal_price(self):
        """Gets the minimal_price of this PriceIndexesIndexDataOzon.  # noqa: E501

        Минимальная цена товара у конкурентов на Ozon.  # noqa: E501

        :return: The minimal_price of this PriceIndexesIndexDataOzon.  # noqa: E501
        :rtype: str
        """
        return self._minimal_price

    @minimal_price.setter
    def minimal_price(self, minimal_price):
        """Sets the minimal_price of this PriceIndexesIndexDataOzon.

        Минимальная цена товара у конкурентов на Ozon.  # noqa: E501

        :param minimal_price: The minimal_price of this PriceIndexesIndexDataOzon.  # noqa: E501
        :type: str
        """

        self._minimal_price = minimal_price

    @property
    def minimal_price_currency(self):
        """Gets the minimal_price_currency of this PriceIndexesIndexDataOzon.  # noqa: E501

        Валюта цены.  # noqa: E501

        :return: The minimal_price_currency of this PriceIndexesIndexDataOzon.  # noqa: E501
        :rtype: str
        """
        return self._minimal_price_currency

    @minimal_price_currency.setter
    def minimal_price_currency(self, minimal_price_currency):
        """Sets the minimal_price_currency of this PriceIndexesIndexDataOzon.

        Валюта цены.  # noqa: E501

        :param minimal_price_currency: The minimal_price_currency of this PriceIndexesIndexDataOzon.  # noqa: E501
        :type: str
        """

        self._minimal_price_currency = minimal_price_currency

    @property
    def price_index_value(self):
        """Gets the price_index_value of this PriceIndexesIndexDataOzon.  # noqa: E501

        Значение индекса цены.  # noqa: E501

        :return: The price_index_value of this PriceIndexesIndexDataOzon.  # noqa: E501
        :rtype: float
        """
        return self._price_index_value

    @price_index_value.setter
    def price_index_value(self, price_index_value):
        """Sets the price_index_value of this PriceIndexesIndexDataOzon.

        Значение индекса цены.  # noqa: E501

        :param price_index_value: The price_index_value of this PriceIndexesIndexDataOzon.  # noqa: E501
        :type: float
        """

        self._price_index_value = price_index_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PriceIndexesIndexDataOzon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PriceIndexesIndexDataOzon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
