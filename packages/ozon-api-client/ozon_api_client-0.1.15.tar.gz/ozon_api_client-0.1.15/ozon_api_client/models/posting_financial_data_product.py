# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostingFinancialDataProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actions': 'list[str]',
        'currency_code': 'str',
        'client_price': 'str',
        'commission_amount': 'float',
        'commission_percent': 'int',
        'commissions_currency_code': 'str',
        'item_services': 'PostingFinancialDataServices',
        'old_price': 'float',
        'payout': 'float',
        'picking': 'ProductPicking',
        'price': 'float',
        'product_id': 'int',
        'quantity': 'int',
        'total_discount_percent': 'float',
        'total_discount_value': 'float'
    }

    attribute_map = {
        'actions': 'actions',
        'currency_code': 'currency_code',
        'client_price': 'client_price',
        'commission_amount': 'commission_amount',
        'commission_percent': 'commission_percent',
        'commissions_currency_code': 'commissions_currency_code',
        'item_services': 'item_services',
        'old_price': 'old_price',
        'payout': 'payout',
        'picking': 'picking',
        'price': 'price',
        'product_id': 'product_id',
        'quantity': 'quantity',
        'total_discount_percent': 'total_discount_percent',
        'total_discount_value': 'total_discount_value'
    }

    def __init__(self, actions=None, currency_code=None, client_price=None, commission_amount=None, commission_percent=None, commissions_currency_code=None, item_services=None, old_price=None, payout=None, picking=None, price=None, product_id=None, quantity=None, total_discount_percent=None, total_discount_value=None):  # noqa: E501
        """PostingFinancialDataProduct - a model defined in Swagger"""  # noqa: E501
        self._actions = None
        self._currency_code = None
        self._client_price = None
        self._commission_amount = None
        self._commission_percent = None
        self._commissions_currency_code = None
        self._item_services = None
        self._old_price = None
        self._payout = None
        self._picking = None
        self._price = None
        self._product_id = None
        self._quantity = None
        self._total_discount_percent = None
        self._total_discount_value = None
        self.discriminator = None
        if actions is not None:
            self.actions = actions
        if currency_code is not None:
            self.currency_code = currency_code
        if client_price is not None:
            self.client_price = client_price
        if commission_amount is not None:
            self.commission_amount = commission_amount
        if commission_percent is not None:
            self.commission_percent = commission_percent
        if commissions_currency_code is not None:
            self.commissions_currency_code = commissions_currency_code
        if item_services is not None:
            self.item_services = item_services
        if old_price is not None:
            self.old_price = old_price
        if payout is not None:
            self.payout = payout
        if picking is not None:
            self.picking = picking
        if price is not None:
            self.price = price
        if product_id is not None:
            self.product_id = product_id
        if quantity is not None:
            self.quantity = quantity
        if total_discount_percent is not None:
            self.total_discount_percent = total_discount_percent
        if total_discount_value is not None:
            self.total_discount_value = total_discount_value

    @property
    def actions(self):
        """Gets the actions of this PostingFinancialDataProduct.  # noqa: E501

        Действия.  # noqa: E501

        :return: The actions of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this PostingFinancialDataProduct.

        Действия.  # noqa: E501

        :param actions: The actions of this PostingFinancialDataProduct.  # noqa: E501
        :type: list[str]
        """

        self._actions = actions

    @property
    def currency_code(self):
        """Gets the currency_code of this PostingFinancialDataProduct.  # noqa: E501

        Валюта ваших цен. Cовпадает с валютой, которая установлена в настройках личного кабинета.  Возможные значения:    - `RUB` — российский рубль,   - `BYN` — белорусский рубль,   - `KZT` — тенге,   - `EUR` — евро,   - `USD` — доллар США,   - `CNY` — юань.   # noqa: E501

        :return: The currency_code of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PostingFinancialDataProduct.

        Валюта ваших цен. Cовпадает с валютой, которая установлена в настройках личного кабинета.  Возможные значения:    - `RUB` — российский рубль,   - `BYN` — белорусский рубль,   - `KZT` — тенге,   - `EUR` — евро,   - `USD` — доллар США,   - `CNY` — юань.   # noqa: E501

        :param currency_code: The currency_code of this PostingFinancialDataProduct.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def client_price(self):
        """Gets the client_price of this PostingFinancialDataProduct.  # noqa: E501

        Цена для клиента.  # noqa: E501

        :return: The client_price of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: str
        """
        return self._client_price

    @client_price.setter
    def client_price(self, client_price):
        """Sets the client_price of this PostingFinancialDataProduct.

        Цена для клиента.  # noqa: E501

        :param client_price: The client_price of this PostingFinancialDataProduct.  # noqa: E501
        :type: str
        """

        self._client_price = client_price

    @property
    def commission_amount(self):
        """Gets the commission_amount of this PostingFinancialDataProduct.  # noqa: E501

        Размер комиссии за товар.  # noqa: E501

        :return: The commission_amount of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: float
        """
        return self._commission_amount

    @commission_amount.setter
    def commission_amount(self, commission_amount):
        """Sets the commission_amount of this PostingFinancialDataProduct.

        Размер комиссии за товар.  # noqa: E501

        :param commission_amount: The commission_amount of this PostingFinancialDataProduct.  # noqa: E501
        :type: float
        """

        self._commission_amount = commission_amount

    @property
    def commission_percent(self):
        """Gets the commission_percent of this PostingFinancialDataProduct.  # noqa: E501

        Процент комиссии.  # noqa: E501

        :return: The commission_percent of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: int
        """
        return self._commission_percent

    @commission_percent.setter
    def commission_percent(self, commission_percent):
        """Sets the commission_percent of this PostingFinancialDataProduct.

        Процент комиссии.  # noqa: E501

        :param commission_percent: The commission_percent of this PostingFinancialDataProduct.  # noqa: E501
        :type: int
        """

        self._commission_percent = commission_percent

    @property
    def commissions_currency_code(self):
        """Gets the commissions_currency_code of this PostingFinancialDataProduct.  # noqa: E501

        Код валюты, в которой рассчитывались комиссии.  # noqa: E501

        :return: The commissions_currency_code of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: str
        """
        return self._commissions_currency_code

    @commissions_currency_code.setter
    def commissions_currency_code(self, commissions_currency_code):
        """Sets the commissions_currency_code of this PostingFinancialDataProduct.

        Код валюты, в которой рассчитывались комиссии.  # noqa: E501

        :param commissions_currency_code: The commissions_currency_code of this PostingFinancialDataProduct.  # noqa: E501
        :type: str
        """

        self._commissions_currency_code = commissions_currency_code

    @property
    def item_services(self):
        """Gets the item_services of this PostingFinancialDataProduct.  # noqa: E501


        :return: The item_services of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: PostingFinancialDataServices
        """
        return self._item_services

    @item_services.setter
    def item_services(self, item_services):
        """Sets the item_services of this PostingFinancialDataProduct.


        :param item_services: The item_services of this PostingFinancialDataProduct.  # noqa: E501
        :type: PostingFinancialDataServices
        """

        self._item_services = item_services

    @property
    def old_price(self):
        """Gets the old_price of this PostingFinancialDataProduct.  # noqa: E501

        Цена до учёта скидок. На карточке товара отображается зачёркнутой.  # noqa: E501

        :return: The old_price of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: float
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this PostingFinancialDataProduct.

        Цена до учёта скидок. На карточке товара отображается зачёркнутой.  # noqa: E501

        :param old_price: The old_price of this PostingFinancialDataProduct.  # noqa: E501
        :type: float
        """

        self._old_price = old_price

    @property
    def payout(self):
        """Gets the payout of this PostingFinancialDataProduct.  # noqa: E501

        Выплата продавцу.  # noqa: E501

        :return: The payout of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: float
        """
        return self._payout

    @payout.setter
    def payout(self, payout):
        """Sets the payout of this PostingFinancialDataProduct.

        Выплата продавцу.  # noqa: E501

        :param payout: The payout of this PostingFinancialDataProduct.  # noqa: E501
        :type: float
        """

        self._payout = payout

    @property
    def picking(self):
        """Gets the picking of this PostingFinancialDataProduct.  # noqa: E501


        :return: The picking of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: ProductPicking
        """
        return self._picking

    @picking.setter
    def picking(self, picking):
        """Sets the picking of this PostingFinancialDataProduct.


        :param picking: The picking of this PostingFinancialDataProduct.  # noqa: E501
        :type: ProductPicking
        """

        self._picking = picking

    @property
    def price(self):
        """Gets the price of this PostingFinancialDataProduct.  # noqa: E501

        Цена товара с учётом скидок — это значение показывается на карточке товара.  # noqa: E501

        :return: The price of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PostingFinancialDataProduct.

        Цена товара с учётом скидок — это значение показывается на карточке товара.  # noqa: E501

        :param price: The price of this PostingFinancialDataProduct.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def product_id(self):
        """Gets the product_id of this PostingFinancialDataProduct.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this PostingFinancialDataProduct.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this PostingFinancialDataProduct.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this PostingFinancialDataProduct.  # noqa: E501

        Количество товара в отправлении.  # noqa: E501

        :return: The quantity of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PostingFinancialDataProduct.

        Количество товара в отправлении.  # noqa: E501

        :param quantity: The quantity of this PostingFinancialDataProduct.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def total_discount_percent(self):
        """Gets the total_discount_percent of this PostingFinancialDataProduct.  # noqa: E501

        Процент скидки.  # noqa: E501

        :return: The total_discount_percent of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: float
        """
        return self._total_discount_percent

    @total_discount_percent.setter
    def total_discount_percent(self, total_discount_percent):
        """Sets the total_discount_percent of this PostingFinancialDataProduct.

        Процент скидки.  # noqa: E501

        :param total_discount_percent: The total_discount_percent of this PostingFinancialDataProduct.  # noqa: E501
        :type: float
        """

        self._total_discount_percent = total_discount_percent

    @property
    def total_discount_value(self):
        """Gets the total_discount_value of this PostingFinancialDataProduct.  # noqa: E501

        Сумма скидки.  # noqa: E501

        :return: The total_discount_value of this PostingFinancialDataProduct.  # noqa: E501
        :rtype: float
        """
        return self._total_discount_value

    @total_discount_value.setter
    def total_discount_value(self, total_discount_value):
        """Sets the total_discount_value of this PostingFinancialDataProduct.

        Сумма скидки.  # noqa: E501

        :param total_discount_value: The total_discount_value of this PostingFinancialDataProduct.  # noqa: E501
        :type: float
        """

        self._total_discount_value = total_discount_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostingFinancialDataProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostingFinancialDataProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
