# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetCarriageAvailableListResponseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'carriage_id': 'int',
        'carriage_postings_count': 'int',
        'carriage_status': 'str',
        'cutoff_at': 'datetime',
        'delivery_method_id': 'int',
        'delivery_method_name': 'str',
        'errors': 'list[ResultError]',
        'first_mile_type': 'str',
        'has_entrusted_acceptance': 'bool',
        'mandatory_postings_count': 'int',
        'mandatory_packaged_count': 'int',
        'recommended_time_local': 'str',
        'recommended_time_utc_offset_in_minutes': 'float',
        'tpl_provider_icon_url': 'str',
        'tpl_provider_name': 'str',
        'warehouse_city': 'str',
        'warehouse_id': 'int',
        'warehouse_name': 'str',
        'warehouse_timezone': 'str'
    }

    attribute_map = {
        'carriage_id': 'carriage_id',
        'carriage_postings_count': 'carriage_postings_count',
        'carriage_status': 'carriage_status',
        'cutoff_at': 'cutoff_at',
        'delivery_method_id': 'delivery_method_id',
        'delivery_method_name': 'delivery_method_name',
        'errors': 'errors',
        'first_mile_type': 'first_mile_type',
        'has_entrusted_acceptance': 'has_entrusted_acceptance',
        'mandatory_postings_count': 'mandatory_postings_count',
        'mandatory_packaged_count': 'mandatory_packaged_count',
        'recommended_time_local': 'recommended_time_local',
        'recommended_time_utc_offset_in_minutes': 'recommended_time_utc_offset_in_minutes',
        'tpl_provider_icon_url': 'tpl_provider_icon_url',
        'tpl_provider_name': 'tpl_provider_name',
        'warehouse_city': 'warehouse_city',
        'warehouse_id': 'warehouse_id',
        'warehouse_name': 'warehouse_name',
        'warehouse_timezone': 'warehouse_timezone'
    }

    def __init__(self, carriage_id=None, carriage_postings_count=None, carriage_status=None, cutoff_at=None, delivery_method_id=None, delivery_method_name=None, errors=None, first_mile_type=None, has_entrusted_acceptance=None, mandatory_postings_count=None, mandatory_packaged_count=None, recommended_time_local=None, recommended_time_utc_offset_in_minutes=None, tpl_provider_icon_url=None, tpl_provider_name=None, warehouse_city=None, warehouse_id=None, warehouse_name=None, warehouse_timezone=None):  # noqa: E501
        """GetCarriageAvailableListResponseResult - a model defined in Swagger"""  # noqa: E501
        self._carriage_id = None
        self._carriage_postings_count = None
        self._carriage_status = None
        self._cutoff_at = None
        self._delivery_method_id = None
        self._delivery_method_name = None
        self._errors = None
        self._first_mile_type = None
        self._has_entrusted_acceptance = None
        self._mandatory_postings_count = None
        self._mandatory_packaged_count = None
        self._recommended_time_local = None
        self._recommended_time_utc_offset_in_minutes = None
        self._tpl_provider_icon_url = None
        self._tpl_provider_name = None
        self._warehouse_city = None
        self._warehouse_id = None
        self._warehouse_name = None
        self._warehouse_timezone = None
        self.discriminator = None
        if carriage_id is not None:
            self.carriage_id = carriage_id
        if carriage_postings_count is not None:
            self.carriage_postings_count = carriage_postings_count
        if carriage_status is not None:
            self.carriage_status = carriage_status
        if cutoff_at is not None:
            self.cutoff_at = cutoff_at
        if delivery_method_id is not None:
            self.delivery_method_id = delivery_method_id
        if delivery_method_name is not None:
            self.delivery_method_name = delivery_method_name
        if errors is not None:
            self.errors = errors
        if first_mile_type is not None:
            self.first_mile_type = first_mile_type
        if has_entrusted_acceptance is not None:
            self.has_entrusted_acceptance = has_entrusted_acceptance
        if mandatory_postings_count is not None:
            self.mandatory_postings_count = mandatory_postings_count
        if mandatory_packaged_count is not None:
            self.mandatory_packaged_count = mandatory_packaged_count
        if recommended_time_local is not None:
            self.recommended_time_local = recommended_time_local
        if recommended_time_utc_offset_in_minutes is not None:
            self.recommended_time_utc_offset_in_minutes = recommended_time_utc_offset_in_minutes
        if tpl_provider_icon_url is not None:
            self.tpl_provider_icon_url = tpl_provider_icon_url
        if tpl_provider_name is not None:
            self.tpl_provider_name = tpl_provider_name
        if warehouse_city is not None:
            self.warehouse_city = warehouse_city
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if warehouse_name is not None:
            self.warehouse_name = warehouse_name
        if warehouse_timezone is not None:
            self.warehouse_timezone = warehouse_timezone

    @property
    def carriage_id(self):
        """Gets the carriage_id of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Идентификатор перевозки (также номер задания на формирование документов).  # noqa: E501

        :return: The carriage_id of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._carriage_id

    @carriage_id.setter
    def carriage_id(self, carriage_id):
        """Sets the carriage_id of this GetCarriageAvailableListResponseResult.

        Идентификатор перевозки (также номер задания на формирование документов).  # noqa: E501

        :param carriage_id: The carriage_id of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: int
        """

        self._carriage_id = carriage_id

    @property
    def carriage_postings_count(self):
        """Gets the carriage_postings_count of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Количество отправлений в перевозке.  # noqa: E501

        :return: The carriage_postings_count of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._carriage_postings_count

    @carriage_postings_count.setter
    def carriage_postings_count(self, carriage_postings_count):
        """Sets the carriage_postings_count of this GetCarriageAvailableListResponseResult.

        Количество отправлений в перевозке.  # noqa: E501

        :param carriage_postings_count: The carriage_postings_count of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: int
        """

        self._carriage_postings_count = carriage_postings_count

    @property
    def carriage_status(self):
        """Gets the carriage_status of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Статус перевозки для запрашиваемого метода доставки и даты отгрузки.  # noqa: E501

        :return: The carriage_status of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._carriage_status

    @carriage_status.setter
    def carriage_status(self, carriage_status):
        """Sets the carriage_status of this GetCarriageAvailableListResponseResult.

        Статус перевозки для запрашиваемого метода доставки и даты отгрузки.  # noqa: E501

        :param carriage_status: The carriage_status of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: str
        """

        self._carriage_status = carriage_status

    @property
    def cutoff_at(self):
        """Gets the cutoff_at of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Дата и время, до которых нужно собрать отправление.  # noqa: E501

        :return: The cutoff_at of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: datetime
        """
        return self._cutoff_at

    @cutoff_at.setter
    def cutoff_at(self, cutoff_at):
        """Sets the cutoff_at of this GetCarriageAvailableListResponseResult.

        Дата и время, до которых нужно собрать отправление.  # noqa: E501

        :param cutoff_at: The cutoff_at of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: datetime
        """

        self._cutoff_at = cutoff_at

    @property
    def delivery_method_id(self):
        """Gets the delivery_method_id of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Идентификатор метода доставки.  # noqa: E501

        :return: The delivery_method_id of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._delivery_method_id

    @delivery_method_id.setter
    def delivery_method_id(self, delivery_method_id):
        """Sets the delivery_method_id of this GetCarriageAvailableListResponseResult.

        Идентификатор метода доставки.  # noqa: E501

        :param delivery_method_id: The delivery_method_id of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: int
        """

        self._delivery_method_id = delivery_method_id

    @property
    def delivery_method_name(self):
        """Gets the delivery_method_name of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Название метода доставки.  # noqa: E501

        :return: The delivery_method_name of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._delivery_method_name

    @delivery_method_name.setter
    def delivery_method_name(self, delivery_method_name):
        """Sets the delivery_method_name of this GetCarriageAvailableListResponseResult.

        Название метода доставки.  # noqa: E501

        :param delivery_method_name: The delivery_method_name of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: str
        """

        self._delivery_method_name = delivery_method_name

    @property
    def errors(self):
        """Gets the errors of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Список ошибок.  # noqa: E501

        :return: The errors of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: list[ResultError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GetCarriageAvailableListResponseResult.

        Список ошибок.  # noqa: E501

        :param errors: The errors of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: list[ResultError]
        """

        self._errors = errors

    @property
    def first_mile_type(self):
        """Gets the first_mile_type of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Тип первой мили.  # noqa: E501

        :return: The first_mile_type of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._first_mile_type

    @first_mile_type.setter
    def first_mile_type(self, first_mile_type):
        """Sets the first_mile_type of this GetCarriageAvailableListResponseResult.

        Тип первой мили.  # noqa: E501

        :param first_mile_type: The first_mile_type of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: str
        """

        self._first_mile_type = first_mile_type

    @property
    def has_entrusted_acceptance(self):
        """Gets the has_entrusted_acceptance of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Признак доверительной приёмки. `true`, если доверительная приёмка включена на складе.  # noqa: E501

        :return: The has_entrusted_acceptance of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: bool
        """
        return self._has_entrusted_acceptance

    @has_entrusted_acceptance.setter
    def has_entrusted_acceptance(self, has_entrusted_acceptance):
        """Sets the has_entrusted_acceptance of this GetCarriageAvailableListResponseResult.

        Признак доверительной приёмки. `true`, если доверительная приёмка включена на складе.  # noqa: E501

        :param has_entrusted_acceptance: The has_entrusted_acceptance of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: bool
        """

        self._has_entrusted_acceptance = has_entrusted_acceptance

    @property
    def mandatory_postings_count(self):
        """Gets the mandatory_postings_count of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Количество отправлений, которые нужно собрать.  # noqa: E501

        :return: The mandatory_postings_count of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._mandatory_postings_count

    @mandatory_postings_count.setter
    def mandatory_postings_count(self, mandatory_postings_count):
        """Sets the mandatory_postings_count of this GetCarriageAvailableListResponseResult.

        Количество отправлений, которые нужно собрать.  # noqa: E501

        :param mandatory_postings_count: The mandatory_postings_count of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: int
        """

        self._mandatory_postings_count = mandatory_postings_count

    @property
    def mandatory_packaged_count(self):
        """Gets the mandatory_packaged_count of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Количество собранных отправлений.  # noqa: E501

        :return: The mandatory_packaged_count of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._mandatory_packaged_count

    @mandatory_packaged_count.setter
    def mandatory_packaged_count(self, mandatory_packaged_count):
        """Sets the mandatory_packaged_count of this GetCarriageAvailableListResponseResult.

        Количество собранных отправлений.  # noqa: E501

        :param mandatory_packaged_count: The mandatory_packaged_count of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: int
        """

        self._mandatory_packaged_count = mandatory_packaged_count

    @property
    def recommended_time_local(self):
        """Gets the recommended_time_local of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Рекомендуемое местное время отгрузки на пункт приёма заказов.  # noqa: E501

        :return: The recommended_time_local of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._recommended_time_local

    @recommended_time_local.setter
    def recommended_time_local(self, recommended_time_local):
        """Sets the recommended_time_local of this GetCarriageAvailableListResponseResult.

        Рекомендуемое местное время отгрузки на пункт приёма заказов.  # noqa: E501

        :param recommended_time_local: The recommended_time_local of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: str
        """

        self._recommended_time_local = recommended_time_local

    @property
    def recommended_time_utc_offset_in_minutes(self):
        """Gets the recommended_time_utc_offset_in_minutes of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Смещение часового пояса рекомендуемого времени отгрузки от UTC-0 в минутах.  # noqa: E501

        :return: The recommended_time_utc_offset_in_minutes of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: float
        """
        return self._recommended_time_utc_offset_in_minutes

    @recommended_time_utc_offset_in_minutes.setter
    def recommended_time_utc_offset_in_minutes(self, recommended_time_utc_offset_in_minutes):
        """Sets the recommended_time_utc_offset_in_minutes of this GetCarriageAvailableListResponseResult.

        Смещение часового пояса рекомендуемого времени отгрузки от UTC-0 в минутах.  # noqa: E501

        :param recommended_time_utc_offset_in_minutes: The recommended_time_utc_offset_in_minutes of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: float
        """

        self._recommended_time_utc_offset_in_minutes = recommended_time_utc_offset_in_minutes

    @property
    def tpl_provider_icon_url(self):
        """Gets the tpl_provider_icon_url of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Ссылка на иконку службы доставки.  # noqa: E501

        :return: The tpl_provider_icon_url of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._tpl_provider_icon_url

    @tpl_provider_icon_url.setter
    def tpl_provider_icon_url(self, tpl_provider_icon_url):
        """Sets the tpl_provider_icon_url of this GetCarriageAvailableListResponseResult.

        Ссылка на иконку службы доставки.  # noqa: E501

        :param tpl_provider_icon_url: The tpl_provider_icon_url of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: str
        """

        self._tpl_provider_icon_url = tpl_provider_icon_url

    @property
    def tpl_provider_name(self):
        """Gets the tpl_provider_name of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Название службы доставки.  # noqa: E501

        :return: The tpl_provider_name of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._tpl_provider_name

    @tpl_provider_name.setter
    def tpl_provider_name(self, tpl_provider_name):
        """Sets the tpl_provider_name of this GetCarriageAvailableListResponseResult.

        Название службы доставки.  # noqa: E501

        :param tpl_provider_name: The tpl_provider_name of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: str
        """

        self._tpl_provider_name = tpl_provider_name

    @property
    def warehouse_city(self):
        """Gets the warehouse_city of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Город склада.  # noqa: E501

        :return: The warehouse_city of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_city

    @warehouse_city.setter
    def warehouse_city(self, warehouse_city):
        """Sets the warehouse_city of this GetCarriageAvailableListResponseResult.

        Город склада.  # noqa: E501

        :param warehouse_city: The warehouse_city of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: str
        """

        self._warehouse_city = warehouse_city

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The warehouse_id of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this GetCarriageAvailableListResponseResult.

        Идентификатор склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Название склада.  # noqa: E501

        :return: The warehouse_name of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this GetCarriageAvailableListResponseResult.

        Название склада.  # noqa: E501

        :param warehouse_name: The warehouse_name of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: str
        """

        self._warehouse_name = warehouse_name

    @property
    def warehouse_timezone(self):
        """Gets the warehouse_timezone of this GetCarriageAvailableListResponseResult.  # noqa: E501

        Часовой пояс, в котором находится склад.  # noqa: E501

        :return: The warehouse_timezone of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_timezone

    @warehouse_timezone.setter
    def warehouse_timezone(self, warehouse_timezone):
        """Sets the warehouse_timezone of this GetCarriageAvailableListResponseResult.

        Часовой пояс, в котором находится склад.  # noqa: E501

        :param warehouse_timezone: The warehouse_timezone of this GetCarriageAvailableListResponseResult.  # noqa: E501
        :type: str
        """

        self._warehouse_timezone = warehouse_timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCarriageAvailableListResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCarriageAvailableListResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
