# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReturnsRfbsGetResponseReturns(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_actions': 'list[ReturnsRfbsGetV2ResponseAvailableAction]',
        'client_name': 'str',
        'client_photo': 'list[str]',
        'client_return_method_type': 'ReturnsRfbsGetV2ResponseClientReturnMethodType',
        'comment': 'str',
        'created_at': 'datetime',
        'order_number': 'str',
        'posting_number': 'str',
        'product': 'V2Product',
        'rejection_comment': 'str',
        'rejection_reason': 'list[ReturnsRfbsGetV2ResponseRejectionReason]',
        'return_method_description': 'str',
        'return_number': 'str',
        'return_reason': 'ReturnsRfbsGetV2ResponseReturnReason',
        'ru_post_tracking_number': 'str',
        'state': 'V2ReturnsRfbsGetV2ResponseState',
        'warehouse_id': 'int'
    }

    attribute_map = {
        'available_actions': 'available_actions',
        'client_name': 'client_name',
        'client_photo': 'client_photo',
        'client_return_method_type': 'client_return_method_type',
        'comment': 'comment',
        'created_at': 'created_at',
        'order_number': 'order_number',
        'posting_number': 'posting_number',
        'product': 'product',
        'rejection_comment': 'rejection_comment',
        'rejection_reason': 'rejection_reason',
        'return_method_description': 'return_method_description',
        'return_number': 'return_number',
        'return_reason': 'return_reason',
        'ru_post_tracking_number': 'ru_post_tracking_number',
        'state': 'state',
        'warehouse_id': 'warehouse_id'
    }

    def __init__(self, available_actions=None, client_name=None, client_photo=None, client_return_method_type=None, comment=None, created_at=None, order_number=None, posting_number=None, product=None, rejection_comment=None, rejection_reason=None, return_method_description=None, return_number=None, return_reason=None, ru_post_tracking_number=None, state=None, warehouse_id=None):  # noqa: E501
        """ReturnsRfbsGetResponseReturns - a model defined in Swagger"""  # noqa: E501
        self._available_actions = None
        self._client_name = None
        self._client_photo = None
        self._client_return_method_type = None
        self._comment = None
        self._created_at = None
        self._order_number = None
        self._posting_number = None
        self._product = None
        self._rejection_comment = None
        self._rejection_reason = None
        self._return_method_description = None
        self._return_number = None
        self._return_reason = None
        self._ru_post_tracking_number = None
        self._state = None
        self._warehouse_id = None
        self.discriminator = None
        if available_actions is not None:
            self.available_actions = available_actions
        if client_name is not None:
            self.client_name = client_name
        if client_photo is not None:
            self.client_photo = client_photo
        if client_return_method_type is not None:
            self.client_return_method_type = client_return_method_type
        if comment is not None:
            self.comment = comment
        if created_at is not None:
            self.created_at = created_at
        if order_number is not None:
            self.order_number = order_number
        if posting_number is not None:
            self.posting_number = posting_number
        if product is not None:
            self.product = product
        if rejection_comment is not None:
            self.rejection_comment = rejection_comment
        if rejection_reason is not None:
            self.rejection_reason = rejection_reason
        if return_method_description is not None:
            self.return_method_description = return_method_description
        if return_number is not None:
            self.return_number = return_number
        if return_reason is not None:
            self.return_reason = return_reason
        if ru_post_tracking_number is not None:
            self.ru_post_tracking_number = ru_post_tracking_number
        if state is not None:
            self.state = state
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id

    @property
    def available_actions(self):
        """Gets the available_actions of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Данные о доступных действиях с заявкой.  # noqa: E501

        :return: The available_actions of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: list[ReturnsRfbsGetV2ResponseAvailableAction]
        """
        return self._available_actions

    @available_actions.setter
    def available_actions(self, available_actions):
        """Sets the available_actions of this ReturnsRfbsGetResponseReturns.

        Данные о доступных действиях с заявкой.  # noqa: E501

        :param available_actions: The available_actions of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: list[ReturnsRfbsGetV2ResponseAvailableAction]
        """

        self._available_actions = available_actions

    @property
    def client_name(self):
        """Gets the client_name of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Имя покупателя.  # noqa: E501

        :return: The client_name of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this ReturnsRfbsGetResponseReturns.

        Имя покупателя.  # noqa: E501

        :param client_name: The client_name of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def client_photo(self):
        """Gets the client_photo of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Ссылки на фотографии товара.  # noqa: E501

        :return: The client_photo of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_photo

    @client_photo.setter
    def client_photo(self, client_photo):
        """Sets the client_photo of this ReturnsRfbsGetResponseReturns.

        Ссылки на фотографии товара.  # noqa: E501

        :param client_photo: The client_photo of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: list[str]
        """

        self._client_photo = client_photo

    @property
    def client_return_method_type(self):
        """Gets the client_return_method_type of this ReturnsRfbsGetResponseReturns.  # noqa: E501


        :return: The client_return_method_type of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: ReturnsRfbsGetV2ResponseClientReturnMethodType
        """
        return self._client_return_method_type

    @client_return_method_type.setter
    def client_return_method_type(self, client_return_method_type):
        """Sets the client_return_method_type of this ReturnsRfbsGetResponseReturns.


        :param client_return_method_type: The client_return_method_type of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: ReturnsRfbsGetV2ResponseClientReturnMethodType
        """

        self._client_return_method_type = client_return_method_type

    @property
    def comment(self):
        """Gets the comment of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Комментарий покупателя.  # noqa: E501

        :return: The comment of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ReturnsRfbsGetResponseReturns.

        Комментарий покупателя.  # noqa: E501

        :param comment: The comment of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Дата создания заявки.  # noqa: E501

        :return: The created_at of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReturnsRfbsGetResponseReturns.

        Дата создания заявки.  # noqa: E501

        :param created_at: The created_at of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def order_number(self):
        """Gets the order_number of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Номер заказа.  # noqa: E501

        :return: The order_number of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this ReturnsRfbsGetResponseReturns.

        Номер заказа.  # noqa: E501

        :param order_number: The order_number of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def posting_number(self):
        """Gets the posting_number of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Номер отправления.  # noqa: E501

        :return: The posting_number of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: str
        """
        return self._posting_number

    @posting_number.setter
    def posting_number(self, posting_number):
        """Sets the posting_number of this ReturnsRfbsGetResponseReturns.

        Номер отправления.  # noqa: E501

        :param posting_number: The posting_number of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: str
        """

        self._posting_number = posting_number

    @property
    def product(self):
        """Gets the product of this ReturnsRfbsGetResponseReturns.  # noqa: E501


        :return: The product of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: V2Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ReturnsRfbsGetResponseReturns.


        :param product: The product of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: V2Product
        """

        self._product = product

    @property
    def rejection_comment(self):
        """Gets the rejection_comment of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Комментарий об отклонении заявки.  # noqa: E501

        :return: The rejection_comment of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: str
        """
        return self._rejection_comment

    @rejection_comment.setter
    def rejection_comment(self, rejection_comment):
        """Sets the rejection_comment of this ReturnsRfbsGetResponseReturns.

        Комментарий об отклонении заявки.  # noqa: E501

        :param rejection_comment: The rejection_comment of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: str
        """

        self._rejection_comment = rejection_comment

    @property
    def rejection_reason(self):
        """Gets the rejection_reason of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Данные о причине отклонения заявки.  # noqa: E501

        :return: The rejection_reason of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: list[ReturnsRfbsGetV2ResponseRejectionReason]
        """
        return self._rejection_reason

    @rejection_reason.setter
    def rejection_reason(self, rejection_reason):
        """Sets the rejection_reason of this ReturnsRfbsGetResponseReturns.

        Данные о причине отклонения заявки.  # noqa: E501

        :param rejection_reason: The rejection_reason of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: list[ReturnsRfbsGetV2ResponseRejectionReason]
        """

        self._rejection_reason = rejection_reason

    @property
    def return_method_description(self):
        """Gets the return_method_description of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Способ возврата товара.  # noqa: E501

        :return: The return_method_description of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: str
        """
        return self._return_method_description

    @return_method_description.setter
    def return_method_description(self, return_method_description):
        """Sets the return_method_description of this ReturnsRfbsGetResponseReturns.

        Способ возврата товара.  # noqa: E501

        :param return_method_description: The return_method_description of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: str
        """

        self._return_method_description = return_method_description

    @property
    def return_number(self):
        """Gets the return_number of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Номер заявки на возврат.  # noqa: E501

        :return: The return_number of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: str
        """
        return self._return_number

    @return_number.setter
    def return_number(self, return_number):
        """Sets the return_number of this ReturnsRfbsGetResponseReturns.

        Номер заявки на возврат.  # noqa: E501

        :param return_number: The return_number of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: str
        """

        self._return_number = return_number

    @property
    def return_reason(self):
        """Gets the return_reason of this ReturnsRfbsGetResponseReturns.  # noqa: E501


        :return: The return_reason of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: ReturnsRfbsGetV2ResponseReturnReason
        """
        return self._return_reason

    @return_reason.setter
    def return_reason(self, return_reason):
        """Sets the return_reason of this ReturnsRfbsGetResponseReturns.


        :param return_reason: The return_reason of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: ReturnsRfbsGetV2ResponseReturnReason
        """

        self._return_reason = return_reason

    @property
    def ru_post_tracking_number(self):
        """Gets the ru_post_tracking_number of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Трек-номер почтового отправления.  # noqa: E501

        :return: The ru_post_tracking_number of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: str
        """
        return self._ru_post_tracking_number

    @ru_post_tracking_number.setter
    def ru_post_tracking_number(self, ru_post_tracking_number):
        """Sets the ru_post_tracking_number of this ReturnsRfbsGetResponseReturns.

        Трек-номер почтового отправления.  # noqa: E501

        :param ru_post_tracking_number: The ru_post_tracking_number of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: str
        """

        self._ru_post_tracking_number = ru_post_tracking_number

    @property
    def state(self):
        """Gets the state of this ReturnsRfbsGetResponseReturns.  # noqa: E501


        :return: The state of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: V2ReturnsRfbsGetV2ResponseState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReturnsRfbsGetResponseReturns.


        :param state: The state of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: V2ReturnsRfbsGetV2ResponseState
        """

        self._state = state

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ReturnsRfbsGetResponseReturns.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The warehouse_id of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ReturnsRfbsGetResponseReturns.

        Идентификатор склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this ReturnsRfbsGetResponseReturns.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReturnsRfbsGetResponseReturns, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReturnsRfbsGetResponseReturns):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
