# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1ProductGetRelatedSKUResponseItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'availability': 'str',
        'deleted_at': 'datetime',
        'delivery_schema': 'str',
        'product_id': 'int',
        'sku': 'int'
    }

    attribute_map = {
        'availability': 'availability',
        'deleted_at': 'deleted_at',
        'delivery_schema': 'delivery_schema',
        'product_id': 'product_id',
        'sku': 'sku'
    }

    def __init__(self, availability=None, deleted_at=None, delivery_schema=None, product_id=None, sku=None):  # noqa: E501
        """V1ProductGetRelatedSKUResponseItem - a model defined in Swagger"""  # noqa: E501
        self._availability = None
        self._deleted_at = None
        self._delivery_schema = None
        self._product_id = None
        self._sku = None
        self.discriminator = None
        if availability is not None:
            self.availability = availability
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if delivery_schema is not None:
            self.delivery_schema = delivery_schema
        if product_id is not None:
            self.product_id = product_id
        if sku is not None:
            self.sku = sku

    @property
    def availability(self):
        """Gets the availability of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501

        Признак доступности товара по SKU: - `HIDDEN` — скрыт; - `AVAILABLE` — доступен; - `UNAVAILABLE` — недоступен, SKU удалён.   # noqa: E501

        :return: The availability of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this V1ProductGetRelatedSKUResponseItem.

        Признак доступности товара по SKU: - `HIDDEN` — скрыт; - `AVAILABLE` — доступен; - `UNAVAILABLE` — недоступен, SKU удалён.   # noqa: E501

        :param availability: The availability of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501
        :type: str
        """

        self._availability = availability

    @property
    def deleted_at(self):
        """Gets the deleted_at of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501

        Дата и время удаления.  # noqa: E501

        :return: The deleted_at of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this V1ProductGetRelatedSKUResponseItem.

        Дата и время удаления.  # noqa: E501

        :param deleted_at: The deleted_at of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def delivery_schema(self):
        """Gets the delivery_schema of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501

        Схема доставки.  # noqa: E501

        :return: The delivery_schema of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._delivery_schema

    @delivery_schema.setter
    def delivery_schema(self, delivery_schema):
        """Sets the delivery_schema of this V1ProductGetRelatedSKUResponseItem.

        Схема доставки.  # noqa: E501

        :param delivery_schema: The delivery_schema of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501
        :type: str
        """

        self._delivery_schema = delivery_schema

    @property
    def product_id(self):
        """Gets the product_id of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this V1ProductGetRelatedSKUResponseItem.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def sku(self):
        """Gets the sku of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :return: The sku of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this V1ProductGetRelatedSKUResponseItem.

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :param sku: The sku of this V1ProductGetRelatedSKUResponseItem.  # noqa: E501
        :type: int
        """

        self._sku = sku

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ProductGetRelatedSKUResponseItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ProductGetRelatedSKUResponseItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
