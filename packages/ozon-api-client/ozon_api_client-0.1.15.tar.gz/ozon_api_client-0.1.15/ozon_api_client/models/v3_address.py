# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_tail': 'str',
        'city': 'str',
        'comment': 'str',
        'country': 'str',
        'district': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'provider_pvz_code': 'str',
        'pvz_code': 'int',
        'region': 'str',
        'zip_code': 'str'
    }

    attribute_map = {
        'address_tail': 'address_tail',
        'city': 'city',
        'comment': 'comment',
        'country': 'country',
        'district': 'district',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'provider_pvz_code': 'provider_pvz_code',
        'pvz_code': 'pvz_code',
        'region': 'region',
        'zip_code': 'zip_code'
    }

    def __init__(self, address_tail=None, city=None, comment=None, country=None, district=None, latitude=None, longitude=None, provider_pvz_code=None, pvz_code=None, region=None, zip_code=None):  # noqa: E501
        """V3Address - a model defined in Swagger"""  # noqa: E501
        self._address_tail = None
        self._city = None
        self._comment = None
        self._country = None
        self._district = None
        self._latitude = None
        self._longitude = None
        self._provider_pvz_code = None
        self._pvz_code = None
        self._region = None
        self._zip_code = None
        self.discriminator = None
        if address_tail is not None:
            self.address_tail = address_tail
        if city is not None:
            self.city = city
        if comment is not None:
            self.comment = comment
        if country is not None:
            self.country = country
        if district is not None:
            self.district = district
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if provider_pvz_code is not None:
            self.provider_pvz_code = provider_pvz_code
        if pvz_code is not None:
            self.pvz_code = pvz_code
        if region is not None:
            self.region = region
        if zip_code is not None:
            self.zip_code = zip_code

    @property
    def address_tail(self):
        """Gets the address_tail of this V3Address.  # noqa: E501

        Адрес в текстовом формате.  # noqa: E501

        :return: The address_tail of this V3Address.  # noqa: E501
        :rtype: str
        """
        return self._address_tail

    @address_tail.setter
    def address_tail(self, address_tail):
        """Sets the address_tail of this V3Address.

        Адрес в текстовом формате.  # noqa: E501

        :param address_tail: The address_tail of this V3Address.  # noqa: E501
        :type: str
        """

        self._address_tail = address_tail

    @property
    def city(self):
        """Gets the city of this V3Address.  # noqa: E501

        Город доставки.  # noqa: E501

        :return: The city of this V3Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this V3Address.

        Город доставки.  # noqa: E501

        :param city: The city of this V3Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def comment(self):
        """Gets the comment of this V3Address.  # noqa: E501

        Комментарий к заказу.  # noqa: E501

        :return: The comment of this V3Address.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this V3Address.

        Комментарий к заказу.  # noqa: E501

        :param comment: The comment of this V3Address.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def country(self):
        """Gets the country of this V3Address.  # noqa: E501

        Страна доставки.  # noqa: E501

        :return: The country of this V3Address.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this V3Address.

        Страна доставки.  # noqa: E501

        :param country: The country of this V3Address.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def district(self):
        """Gets the district of this V3Address.  # noqa: E501

        Район доставки.  # noqa: E501

        :return: The district of this V3Address.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this V3Address.

        Район доставки.  # noqa: E501

        :param district: The district of this V3Address.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def latitude(self):
        """Gets the latitude of this V3Address.  # noqa: E501

        Широта.  # noqa: E501

        :return: The latitude of this V3Address.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this V3Address.

        Широта.  # noqa: E501

        :param latitude: The latitude of this V3Address.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this V3Address.  # noqa: E501

        Долгота.  # noqa: E501

        :return: The longitude of this V3Address.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this V3Address.

        Долгота.  # noqa: E501

        :param longitude: The longitude of this V3Address.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def provider_pvz_code(self):
        """Gets the provider_pvz_code of this V3Address.  # noqa: E501

        Код пункта выдачи заказов 3PL провайдера.  # noqa: E501

        :return: The provider_pvz_code of this V3Address.  # noqa: E501
        :rtype: str
        """
        return self._provider_pvz_code

    @provider_pvz_code.setter
    def provider_pvz_code(self, provider_pvz_code):
        """Sets the provider_pvz_code of this V3Address.

        Код пункта выдачи заказов 3PL провайдера.  # noqa: E501

        :param provider_pvz_code: The provider_pvz_code of this V3Address.  # noqa: E501
        :type: str
        """

        self._provider_pvz_code = provider_pvz_code

    @property
    def pvz_code(self):
        """Gets the pvz_code of this V3Address.  # noqa: E501

        Код пункта выдачи заказов.  # noqa: E501

        :return: The pvz_code of this V3Address.  # noqa: E501
        :rtype: int
        """
        return self._pvz_code

    @pvz_code.setter
    def pvz_code(self, pvz_code):
        """Sets the pvz_code of this V3Address.

        Код пункта выдачи заказов.  # noqa: E501

        :param pvz_code: The pvz_code of this V3Address.  # noqa: E501
        :type: int
        """

        self._pvz_code = pvz_code

    @property
    def region(self):
        """Gets the region of this V3Address.  # noqa: E501

        Регион доставки.  # noqa: E501

        :return: The region of this V3Address.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this V3Address.

        Регион доставки.  # noqa: E501

        :param region: The region of this V3Address.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def zip_code(self):
        """Gets the zip_code of this V3Address.  # noqa: E501

        Почтовый индекс получателя.  # noqa: E501

        :return: The zip_code of this V3Address.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this V3Address.

        Почтовый индекс получателя.  # noqa: E501

        :param zip_code: The zip_code of this V3Address.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
