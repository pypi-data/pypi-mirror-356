# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReturnsCompanyFbsInfoResponseDropOffPoints(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'box_count': 'int',
        'id': 'int',
        'name': 'str',
        'pass_info': 'ReturnsCompanyFbsInfoResponsePassInfo',
        'place_id': 'int',
        'returns_count': 'int',
        'utc_offset': 'str',
        'warehouses_ids': 'list[str]'
    }

    attribute_map = {
        'address': 'address',
        'box_count': 'box_count',
        'id': 'id',
        'name': 'name',
        'pass_info': 'pass_info',
        'place_id': 'place_id',
        'returns_count': 'returns_count',
        'utc_offset': 'utc_offset',
        'warehouses_ids': 'warehouses_ids'
    }

    def __init__(self, address=None, box_count=None, id=None, name=None, pass_info=None, place_id=None, returns_count=None, utc_offset=None, warehouses_ids=None):  # noqa: E501
        """ReturnsCompanyFbsInfoResponseDropOffPoints - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._box_count = None
        self._id = None
        self._name = None
        self._pass_info = None
        self._place_id = None
        self._returns_count = None
        self._utc_offset = None
        self._warehouses_ids = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if box_count is not None:
            self.box_count = box_count
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if pass_info is not None:
            self.pass_info = pass_info
        if place_id is not None:
            self.place_id = place_id
        if returns_count is not None:
            self.returns_count = returns_count
        if utc_offset is not None:
            self.utc_offset = utc_offset
        if warehouses_ids is not None:
            self.warehouses_ids = warehouses_ids

    @property
    def address(self):
        """Gets the address of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501

        Адрес drop-off пункта.  # noqa: E501

        :return: The address of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ReturnsCompanyFbsInfoResponseDropOffPoints.

        Адрес drop-off пункта.  # noqa: E501

        :param address: The address of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def box_count(self):
        """Gets the box_count of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501

        Количество коробок в drop-off пункте.  # noqa: E501

        :return: The box_count of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :rtype: int
        """
        return self._box_count

    @box_count.setter
    def box_count(self, box_count):
        """Sets the box_count of this ReturnsCompanyFbsInfoResponseDropOffPoints.

        Количество коробок в drop-off пункте.  # noqa: E501

        :param box_count: The box_count of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :type: int
        """

        self._box_count = box_count

    @property
    def id(self):
        """Gets the id of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501

        Идентификатор drop-off пункта.  # noqa: E501

        :return: The id of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReturnsCompanyFbsInfoResponseDropOffPoints.

        Идентификатор drop-off пункта.  # noqa: E501

        :param id: The id of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501

        Название drop-off пункта.  # noqa: E501

        :return: The name of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReturnsCompanyFbsInfoResponseDropOffPoints.

        Название drop-off пункта.  # noqa: E501

        :param name: The name of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pass_info(self):
        """Gets the pass_info of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501


        :return: The pass_info of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :rtype: ReturnsCompanyFbsInfoResponsePassInfo
        """
        return self._pass_info

    @pass_info.setter
    def pass_info(self, pass_info):
        """Sets the pass_info of this ReturnsCompanyFbsInfoResponseDropOffPoints.


        :param pass_info: The pass_info of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :type: ReturnsCompanyFbsInfoResponsePassInfo
        """

        self._pass_info = pass_info

    @property
    def place_id(self):
        """Gets the place_id of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501

        Идентификатор склада, на который приедет отгрузка.  # noqa: E501

        :return: The place_id of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :rtype: int
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this ReturnsCompanyFbsInfoResponseDropOffPoints.

        Идентификатор склада, на который приедет отгрузка.  # noqa: E501

        :param place_id: The place_id of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :type: int
        """

        self._place_id = place_id

    @property
    def returns_count(self):
        """Gets the returns_count of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501

        Количество возвратов в drop-off пункте.  # noqa: E501

        :return: The returns_count of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :rtype: int
        """
        return self._returns_count

    @returns_count.setter
    def returns_count(self, returns_count):
        """Sets the returns_count of this ReturnsCompanyFbsInfoResponseDropOffPoints.

        Количество возвратов в drop-off пункте.  # noqa: E501

        :param returns_count: The returns_count of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :type: int
        """

        self._returns_count = returns_count

    @property
    def utc_offset(self):
        """Gets the utc_offset of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501

        Смещение часового пояса времени отгрузки от UTC-0.  # noqa: E501

        :return: The utc_offset of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :rtype: str
        """
        return self._utc_offset

    @utc_offset.setter
    def utc_offset(self, utc_offset):
        """Sets the utc_offset of this ReturnsCompanyFbsInfoResponseDropOffPoints.

        Смещение часового пояса времени отгрузки от UTC-0.  # noqa: E501

        :param utc_offset: The utc_offset of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :type: str
        """

        self._utc_offset = utc_offset

    @property
    def warehouses_ids(self):
        """Gets the warehouses_ids of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501

        Идентификатор складов продавца.  # noqa: E501

        :return: The warehouses_ids of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :rtype: list[str]
        """
        return self._warehouses_ids

    @warehouses_ids.setter
    def warehouses_ids(self, warehouses_ids):
        """Sets the warehouses_ids of this ReturnsCompanyFbsInfoResponseDropOffPoints.

        Идентификатор складов продавца.  # noqa: E501

        :param warehouses_ids: The warehouses_ids of this ReturnsCompanyFbsInfoResponseDropOffPoints.  # noqa: E501
        :type: list[str]
        """

        self._warehouses_ids = warehouses_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReturnsCompanyFbsInfoResponseDropOffPoints, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReturnsCompanyFbsInfoResponseDropOffPoints):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
