# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1DraftSupplyCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'draft_id': 'int',
        'timeslot': 'V1DayTimeSlot',
        'warehouse_id': 'int'
    }

    attribute_map = {
        'draft_id': 'draft_id',
        'timeslot': 'timeslot',
        'warehouse_id': 'warehouse_id'
    }

    def __init__(self, draft_id=None, timeslot=None, warehouse_id=None):  # noqa: E501
        """V1DraftSupplyCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._draft_id = None
        self._timeslot = None
        self._warehouse_id = None
        self.discriminator = None
        self.draft_id = draft_id
        if timeslot is not None:
            self.timeslot = timeslot
        self.warehouse_id = warehouse_id

    @property
    def draft_id(self):
        """Gets the draft_id of this V1DraftSupplyCreateRequest.  # noqa: E501

        Идентификатор черновика заявки на поставку.  # noqa: E501

        :return: The draft_id of this V1DraftSupplyCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._draft_id

    @draft_id.setter
    def draft_id(self, draft_id):
        """Sets the draft_id of this V1DraftSupplyCreateRequest.

        Идентификатор черновика заявки на поставку.  # noqa: E501

        :param draft_id: The draft_id of this V1DraftSupplyCreateRequest.  # noqa: E501
        :type: int
        """
        if draft_id is None:
            raise ValueError("Invalid value for `draft_id`, must not be `None`")  # noqa: E501

        self._draft_id = draft_id

    @property
    def timeslot(self):
        """Gets the timeslot of this V1DraftSupplyCreateRequest.  # noqa: E501


        :return: The timeslot of this V1DraftSupplyCreateRequest.  # noqa: E501
        :rtype: V1DayTimeSlot
        """
        return self._timeslot

    @timeslot.setter
    def timeslot(self, timeslot):
        """Sets the timeslot of this V1DraftSupplyCreateRequest.


        :param timeslot: The timeslot of this V1DraftSupplyCreateRequest.  # noqa: E501
        :type: V1DayTimeSlot
        """

        self._timeslot = timeslot

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this V1DraftSupplyCreateRequest.  # noqa: E501

        Идентификатор склада отгрузки.  # noqa: E501

        :return: The warehouse_id of this V1DraftSupplyCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this V1DraftSupplyCreateRequest.

        Идентификатор склада отгрузки.  # noqa: E501

        :param warehouse_id: The warehouse_id of this V1DraftSupplyCreateRequest.  # noqa: E501
        :type: int
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")  # noqa: E501

        self._warehouse_id = warehouse_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DraftSupplyCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DraftSupplyCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
