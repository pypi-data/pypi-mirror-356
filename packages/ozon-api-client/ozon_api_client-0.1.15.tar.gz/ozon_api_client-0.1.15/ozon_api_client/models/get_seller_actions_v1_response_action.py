# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetSellerActionsV1ResponseAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'title': 'str',
        'action_type': 'str',
        'description': 'str',
        'date_start': 'str',
        'date_end': 'str',
        'freeze_date': 'str',
        'potential_products_count': 'float',
        'participating_products_count': 'float',
        'is_participating': 'bool',
        'is_voucher_action': 'bool',
        'banned_products_count': 'float',
        'with_targeting': 'bool',
        'order_amount': 'float',
        'discount_type': 'str',
        'discount_value': 'float'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'action_type': 'action_type',
        'description': 'description',
        'date_start': 'date_start',
        'date_end': 'date_end',
        'freeze_date': 'freeze_date',
        'potential_products_count': 'potential_products_count',
        'participating_products_count': 'participating_products_count',
        'is_participating': 'is_participating',
        'is_voucher_action': 'is_voucher_action',
        'banned_products_count': 'banned_products_count',
        'with_targeting': 'with_targeting',
        'order_amount': 'order_amount',
        'discount_type': 'discount_type',
        'discount_value': 'discount_value'
    }

    def __init__(self, id=None, title=None, action_type=None, description=None, date_start=None, date_end=None, freeze_date=None, potential_products_count=None, participating_products_count=None, is_participating=None, is_voucher_action=None, banned_products_count=None, with_targeting=None, order_amount=None, discount_type=None, discount_value=None):  # noqa: E501
        """GetSellerActionsV1ResponseAction - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._action_type = None
        self._description = None
        self._date_start = None
        self._date_end = None
        self._freeze_date = None
        self._potential_products_count = None
        self._participating_products_count = None
        self._is_participating = None
        self._is_voucher_action = None
        self._banned_products_count = None
        self._with_targeting = None
        self._order_amount = None
        self._discount_type = None
        self._discount_value = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if action_type is not None:
            self.action_type = action_type
        if description is not None:
            self.description = description
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        if freeze_date is not None:
            self.freeze_date = freeze_date
        if potential_products_count is not None:
            self.potential_products_count = potential_products_count
        if participating_products_count is not None:
            self.participating_products_count = participating_products_count
        if is_participating is not None:
            self.is_participating = is_participating
        if is_voucher_action is not None:
            self.is_voucher_action = is_voucher_action
        if banned_products_count is not None:
            self.banned_products_count = banned_products_count
        if with_targeting is not None:
            self.with_targeting = with_targeting
        if order_amount is not None:
            self.order_amount = order_amount
        if discount_type is not None:
            self.discount_type = discount_type
        if discount_value is not None:
            self.discount_value = discount_value

    @property
    def id(self):
        """Gets the id of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Идентификатор акции.  # noqa: E501

        :return: The id of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSellerActionsV1ResponseAction.

        Идентификатор акции.  # noqa: E501

        :param id: The id of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Название акции.  # noqa: E501

        :return: The title of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetSellerActionsV1ResponseAction.

        Название акции.  # noqa: E501

        :param title: The title of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def action_type(self):
        """Gets the action_type of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Тип акции.  # noqa: E501

        :return: The action_type of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this GetSellerActionsV1ResponseAction.

        Тип акции.  # noqa: E501

        :param action_type: The action_type of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: str
        """

        self._action_type = action_type

    @property
    def description(self):
        """Gets the description of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Описание акции.  # noqa: E501

        :return: The description of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetSellerActionsV1ResponseAction.

        Описание акции.  # noqa: E501

        :param description: The description of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def date_start(self):
        """Gets the date_start of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Дата начала акции.  # noqa: E501

        :return: The date_start of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: str
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this GetSellerActionsV1ResponseAction.

        Дата начала акции.  # noqa: E501

        :param date_start: The date_start of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: str
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Дата окончания акции.  # noqa: E501

        :return: The date_end of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: str
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this GetSellerActionsV1ResponseAction.

        Дата окончания акции.  # noqa: E501

        :param date_end: The date_end of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: str
        """

        self._date_end = date_end

    @property
    def freeze_date(self):
        """Gets the freeze_date of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Дата приостановки акции.  Если поле заполнено, продавец не может повышать цены, изменять список товаров и уменьшать количество единиц товаров в акции.  Продавец может понижать цены и увеличивать количество единиц товара в акции.   # noqa: E501

        :return: The freeze_date of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: str
        """
        return self._freeze_date

    @freeze_date.setter
    def freeze_date(self, freeze_date):
        """Sets the freeze_date of this GetSellerActionsV1ResponseAction.

        Дата приостановки акции.  Если поле заполнено, продавец не может повышать цены, изменять список товаров и уменьшать количество единиц товаров в акции.  Продавец может понижать цены и увеличивать количество единиц товара в акции.   # noqa: E501

        :param freeze_date: The freeze_date of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: str
        """

        self._freeze_date = freeze_date

    @property
    def potential_products_count(self):
        """Gets the potential_products_count of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Количество товаров, доступных для акции.  # noqa: E501

        :return: The potential_products_count of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: float
        """
        return self._potential_products_count

    @potential_products_count.setter
    def potential_products_count(self, potential_products_count):
        """Sets the potential_products_count of this GetSellerActionsV1ResponseAction.

        Количество товаров, доступных для акции.  # noqa: E501

        :param potential_products_count: The potential_products_count of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: float
        """

        self._potential_products_count = potential_products_count

    @property
    def participating_products_count(self):
        """Gets the participating_products_count of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Количество товаров, которые участвуют в акции.  # noqa: E501

        :return: The participating_products_count of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: float
        """
        return self._participating_products_count

    @participating_products_count.setter
    def participating_products_count(self, participating_products_count):
        """Sets the participating_products_count of this GetSellerActionsV1ResponseAction.

        Количество товаров, которые участвуют в акции.  # noqa: E501

        :param participating_products_count: The participating_products_count of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: float
        """

        self._participating_products_count = participating_products_count

    @property
    def is_participating(self):
        """Gets the is_participating of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Участвуете вы в этой акции или нет.  # noqa: E501

        :return: The is_participating of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: bool
        """
        return self._is_participating

    @is_participating.setter
    def is_participating(self, is_participating):
        """Sets the is_participating of this GetSellerActionsV1ResponseAction.

        Участвуете вы в этой акции или нет.  # noqa: E501

        :param is_participating: The is_participating of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: bool
        """

        self._is_participating = is_participating

    @property
    def is_voucher_action(self):
        """Gets the is_voucher_action of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Признак, что для участия в акции покупателям нужен промокод.  # noqa: E501

        :return: The is_voucher_action of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: bool
        """
        return self._is_voucher_action

    @is_voucher_action.setter
    def is_voucher_action(self, is_voucher_action):
        """Sets the is_voucher_action of this GetSellerActionsV1ResponseAction.

        Признак, что для участия в акции покупателям нужен промокод.  # noqa: E501

        :param is_voucher_action: The is_voucher_action of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: bool
        """

        self._is_voucher_action = is_voucher_action

    @property
    def banned_products_count(self):
        """Gets the banned_products_count of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Количество заблокированных товаров.  # noqa: E501

        :return: The banned_products_count of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: float
        """
        return self._banned_products_count

    @banned_products_count.setter
    def banned_products_count(self, banned_products_count):
        """Sets the banned_products_count of this GetSellerActionsV1ResponseAction.

        Количество заблокированных товаров.  # noqa: E501

        :param banned_products_count: The banned_products_count of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: float
        """

        self._banned_products_count = banned_products_count

    @property
    def with_targeting(self):
        """Gets the with_targeting of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Признак, что акция с целевой аудиторией.  # noqa: E501

        :return: The with_targeting of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: bool
        """
        return self._with_targeting

    @with_targeting.setter
    def with_targeting(self, with_targeting):
        """Sets the with_targeting of this GetSellerActionsV1ResponseAction.

        Признак, что акция с целевой аудиторией.  # noqa: E501

        :param with_targeting: The with_targeting of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: bool
        """

        self._with_targeting = with_targeting

    @property
    def order_amount(self):
        """Gets the order_amount of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Сумма заказа.  # noqa: E501

        :return: The order_amount of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: float
        """
        return self._order_amount

    @order_amount.setter
    def order_amount(self, order_amount):
        """Sets the order_amount of this GetSellerActionsV1ResponseAction.

        Сумма заказа.  # noqa: E501

        :param order_amount: The order_amount of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: float
        """

        self._order_amount = order_amount

    @property
    def discount_type(self):
        """Gets the discount_type of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Тип скидки.  # noqa: E501

        :return: The discount_type of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: str
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type):
        """Sets the discount_type of this GetSellerActionsV1ResponseAction.

        Тип скидки.  # noqa: E501

        :param discount_type: The discount_type of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: str
        """

        self._discount_type = discount_type

    @property
    def discount_value(self):
        """Gets the discount_value of this GetSellerActionsV1ResponseAction.  # noqa: E501

        Размер скидки.  # noqa: E501

        :return: The discount_value of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :rtype: float
        """
        return self._discount_value

    @discount_value.setter
    def discount_value(self, discount_value):
        """Sets the discount_value of this GetSellerActionsV1ResponseAction.

        Размер скидки.  # noqa: E501

        :param discount_value: The discount_value of this GetSellerActionsV1ResponseAction.  # noqa: E501
        :type: float
        """

        self._discount_value = discount_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSellerActionsV1ResponseAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSellerActionsV1ResponseAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
