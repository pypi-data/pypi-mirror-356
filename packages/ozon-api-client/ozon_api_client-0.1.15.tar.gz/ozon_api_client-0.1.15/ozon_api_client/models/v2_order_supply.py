# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2OrderSupply(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bundle_id': 'str',
        'storage_warehouse_id': 'int',
        'supply_id': 'int',
        'supply_state': 'V2SupplyState',
        'supply_tags': 'list[V2OrderSupplySupplyTags]'
    }

    attribute_map = {
        'bundle_id': 'bundle_id',
        'storage_warehouse_id': 'storage_warehouse_id',
        'supply_id': 'supply_id',
        'supply_state': 'supply_state',
        'supply_tags': 'supply_tags'
    }

    def __init__(self, bundle_id=None, storage_warehouse_id=None, supply_id=None, supply_state=None, supply_tags=None):  # noqa: E501
        """V2OrderSupply - a model defined in Swagger"""  # noqa: E501
        self._bundle_id = None
        self._storage_warehouse_id = None
        self._supply_id = None
        self._supply_state = None
        self._supply_tags = None
        self.discriminator = None
        if bundle_id is not None:
            self.bundle_id = bundle_id
        if storage_warehouse_id is not None:
            self.storage_warehouse_id = storage_warehouse_id
        if supply_id is not None:
            self.supply_id = supply_id
        if supply_state is not None:
            self.supply_state = supply_state
        if supply_tags is not None:
            self.supply_tags = supply_tags

    @property
    def bundle_id(self):
        """Gets the bundle_id of this V2OrderSupply.  # noqa: E501

        Идентификатор состава поставки. Используется в методе [/v1/supply-order/bundle](#operation/SupplyOrderBundle).  # noqa: E501

        :return: The bundle_id of this V2OrderSupply.  # noqa: E501
        :rtype: str
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this V2OrderSupply.

        Идентификатор состава поставки. Используется в методе [/v1/supply-order/bundle](#operation/SupplyOrderBundle).  # noqa: E501

        :param bundle_id: The bundle_id of this V2OrderSupply.  # noqa: E501
        :type: str
        """

        self._bundle_id = bundle_id

    @property
    def storage_warehouse_id(self):
        """Gets the storage_warehouse_id of this V2OrderSupply.  # noqa: E501

        Идентификатор склада хранения.  # noqa: E501

        :return: The storage_warehouse_id of this V2OrderSupply.  # noqa: E501
        :rtype: int
        """
        return self._storage_warehouse_id

    @storage_warehouse_id.setter
    def storage_warehouse_id(self, storage_warehouse_id):
        """Sets the storage_warehouse_id of this V2OrderSupply.

        Идентификатор склада хранения.  # noqa: E501

        :param storage_warehouse_id: The storage_warehouse_id of this V2OrderSupply.  # noqa: E501
        :type: int
        """

        self._storage_warehouse_id = storage_warehouse_id

    @property
    def supply_id(self):
        """Gets the supply_id of this V2OrderSupply.  # noqa: E501

        Идентификатор поставки.  # noqa: E501

        :return: The supply_id of this V2OrderSupply.  # noqa: E501
        :rtype: int
        """
        return self._supply_id

    @supply_id.setter
    def supply_id(self, supply_id):
        """Sets the supply_id of this V2OrderSupply.

        Идентификатор поставки.  # noqa: E501

        :param supply_id: The supply_id of this V2OrderSupply.  # noqa: E501
        :type: int
        """

        self._supply_id = supply_id

    @property
    def supply_state(self):
        """Gets the supply_state of this V2OrderSupply.  # noqa: E501


        :return: The supply_state of this V2OrderSupply.  # noqa: E501
        :rtype: V2SupplyState
        """
        return self._supply_state

    @supply_state.setter
    def supply_state(self, supply_state):
        """Sets the supply_state of this V2OrderSupply.


        :param supply_state: The supply_state of this V2OrderSupply.  # noqa: E501
        :type: V2SupplyState
        """

        self._supply_state = supply_state

    @property
    def supply_tags(self):
        """Gets the supply_tags of this V2OrderSupply.  # noqa: E501

        Метки товаров в заявке на поставку.  # noqa: E501

        :return: The supply_tags of this V2OrderSupply.  # noqa: E501
        :rtype: list[V2OrderSupplySupplyTags]
        """
        return self._supply_tags

    @supply_tags.setter
    def supply_tags(self, supply_tags):
        """Sets the supply_tags of this V2OrderSupply.

        Метки товаров в заявке на поставку.  # noqa: E501

        :param supply_tags: The supply_tags of this V2OrderSupply.  # noqa: E501
        :type: list[V2OrderSupplySupplyTags]
        """

        self._supply_tags = supply_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2OrderSupply, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2OrderSupply):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
