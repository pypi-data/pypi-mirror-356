# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Productv3GetProductListResponseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'items': 'list[Productv3GetProductListResponseItem]',
        'last_id': 'str',
        'total': 'int'
    }

    attribute_map = {
        'items': 'items',
        'last_id': 'last_id',
        'total': 'total'
    }

    def __init__(self, items=None, last_id=None, total=None):  # noqa: E501
        """Productv3GetProductListResponseResult - a model defined in Swagger"""  # noqa: E501
        self._items = None
        self._last_id = None
        self._total = None
        self.discriminator = None
        if items is not None:
            self.items = items
        if last_id is not None:
            self.last_id = last_id
        if total is not None:
            self.total = total

    @property
    def items(self):
        """Gets the items of this Productv3GetProductListResponseResult.  # noqa: E501

        Список товаров.  # noqa: E501

        :return: The items of this Productv3GetProductListResponseResult.  # noqa: E501
        :rtype: list[Productv3GetProductListResponseItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Productv3GetProductListResponseResult.

        Список товаров.  # noqa: E501

        :param items: The items of this Productv3GetProductListResponseResult.  # noqa: E501
        :type: list[Productv3GetProductListResponseItem]
        """

        self._items = items

    @property
    def last_id(self):
        """Gets the last_id of this Productv3GetProductListResponseResult.  # noqa: E501

        Идентификатор последнего значения на странице.  Чтобы получить следующие значения, передайте полученное значение в следующем запросе в параметре `last_id`.   # noqa: E501

        :return: The last_id of this Productv3GetProductListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._last_id

    @last_id.setter
    def last_id(self, last_id):
        """Sets the last_id of this Productv3GetProductListResponseResult.

        Идентификатор последнего значения на странице.  Чтобы получить следующие значения, передайте полученное значение в следующем запросе в параметре `last_id`.   # noqa: E501

        :param last_id: The last_id of this Productv3GetProductListResponseResult.  # noqa: E501
        :type: str
        """

        self._last_id = last_id

    @property
    def total(self):
        """Gets the total of this Productv3GetProductListResponseResult.  # noqa: E501

        Всего товаров.  # noqa: E501

        :return: The total of this Productv3GetProductListResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Productv3GetProductListResponseResult.

        Всего товаров.  # noqa: E501

        :param total: The total of this Productv3GetProductListResponseResult.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Productv3GetProductListResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Productv3GetProductListResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
