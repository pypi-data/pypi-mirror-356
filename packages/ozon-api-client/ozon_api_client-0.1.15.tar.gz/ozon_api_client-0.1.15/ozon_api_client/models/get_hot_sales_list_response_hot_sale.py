# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetHotSalesListResponseHotSale(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_end': 'str',
        'date_start': 'str',
        'description': 'str',
        'freeze_date': 'str',
        'hotsale_id': 'float',
        'is_participating': 'bool',
        'title': 'str'
    }

    attribute_map = {
        'date_end': 'date_end',
        'date_start': 'date_start',
        'description': 'description',
        'freeze_date': 'freeze_date',
        'hotsale_id': 'hotsale_id',
        'is_participating': 'is_participating',
        'title': 'title'
    }

    def __init__(self, date_end=None, date_start=None, description=None, freeze_date=None, hotsale_id=None, is_participating=None, title=None):  # noqa: E501
        """GetHotSalesListResponseHotSale - a model defined in Swagger"""  # noqa: E501
        self._date_end = None
        self._date_start = None
        self._description = None
        self._freeze_date = None
        self._hotsale_id = None
        self._is_participating = None
        self._title = None
        self.discriminator = None
        if date_end is not None:
            self.date_end = date_end
        if date_start is not None:
            self.date_start = date_start
        if description is not None:
            self.description = description
        if freeze_date is not None:
            self.freeze_date = freeze_date
        if hotsale_id is not None:
            self.hotsale_id = hotsale_id
        if is_participating is not None:
            self.is_participating = is_participating
        if title is not None:
            self.title = title

    @property
    def date_end(self):
        """Gets the date_end of this GetHotSalesListResponseHotSale.  # noqa: E501

        Дата окончания акции.  # noqa: E501

        :return: The date_end of this GetHotSalesListResponseHotSale.  # noqa: E501
        :rtype: str
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this GetHotSalesListResponseHotSale.

        Дата окончания акции.  # noqa: E501

        :param date_end: The date_end of this GetHotSalesListResponseHotSale.  # noqa: E501
        :type: str
        """

        self._date_end = date_end

    @property
    def date_start(self):
        """Gets the date_start of this GetHotSalesListResponseHotSale.  # noqa: E501

        Дата начала акции.  # noqa: E501

        :return: The date_start of this GetHotSalesListResponseHotSale.  # noqa: E501
        :rtype: str
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this GetHotSalesListResponseHotSale.

        Дата начала акции.  # noqa: E501

        :param date_start: The date_start of this GetHotSalesListResponseHotSale.  # noqa: E501
        :type: str
        """

        self._date_start = date_start

    @property
    def description(self):
        """Gets the description of this GetHotSalesListResponseHotSale.  # noqa: E501

        Описание акции.  # noqa: E501

        :return: The description of this GetHotSalesListResponseHotSale.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetHotSalesListResponseHotSale.

        Описание акции.  # noqa: E501

        :param description: The description of this GetHotSalesListResponseHotSale.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def freeze_date(self):
        """Gets the freeze_date of this GetHotSalesListResponseHotSale.  # noqa: E501

        Дата приостановки акции.  Если поле заполнено, продавец не может повышать цены, изменять список товаров и уменьшать количество единиц товаров в акции.  Продавец может понижать цены и увеличивать количество единиц товара в акции.   # noqa: E501

        :return: The freeze_date of this GetHotSalesListResponseHotSale.  # noqa: E501
        :rtype: str
        """
        return self._freeze_date

    @freeze_date.setter
    def freeze_date(self, freeze_date):
        """Sets the freeze_date of this GetHotSalesListResponseHotSale.

        Дата приостановки акции.  Если поле заполнено, продавец не может повышать цены, изменять список товаров и уменьшать количество единиц товаров в акции.  Продавец может понижать цены и увеличивать количество единиц товара в акции.   # noqa: E501

        :param freeze_date: The freeze_date of this GetHotSalesListResponseHotSale.  # noqa: E501
        :type: str
        """

        self._freeze_date = freeze_date

    @property
    def hotsale_id(self):
        """Gets the hotsale_id of this GetHotSalesListResponseHotSale.  # noqa: E501

        Идентификатор акции Hot Sale.  # noqa: E501

        :return: The hotsale_id of this GetHotSalesListResponseHotSale.  # noqa: E501
        :rtype: float
        """
        return self._hotsale_id

    @hotsale_id.setter
    def hotsale_id(self, hotsale_id):
        """Sets the hotsale_id of this GetHotSalesListResponseHotSale.

        Идентификатор акции Hot Sale.  # noqa: E501

        :param hotsale_id: The hotsale_id of this GetHotSalesListResponseHotSale.  # noqa: E501
        :type: float
        """

        self._hotsale_id = hotsale_id

    @property
    def is_participating(self):
        """Gets the is_participating of this GetHotSalesListResponseHotSale.  # noqa: E501

        Признак, что вы участвуете в этой акции.  # noqa: E501

        :return: The is_participating of this GetHotSalesListResponseHotSale.  # noqa: E501
        :rtype: bool
        """
        return self._is_participating

    @is_participating.setter
    def is_participating(self, is_participating):
        """Sets the is_participating of this GetHotSalesListResponseHotSale.

        Признак, что вы участвуете в этой акции.  # noqa: E501

        :param is_participating: The is_participating of this GetHotSalesListResponseHotSale.  # noqa: E501
        :type: bool
        """

        self._is_participating = is_participating

    @property
    def title(self):
        """Gets the title of this GetHotSalesListResponseHotSale.  # noqa: E501

        Название акции.  # noqa: E501

        :return: The title of this GetHotSalesListResponseHotSale.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetHotSalesListResponseHotSale.

        Название акции.  # noqa: E501

        :param title: The title of this GetHotSalesListResponseHotSale.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetHotSalesListResponseHotSale, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetHotSalesListResponseHotSale):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
