# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1ReviewInfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comments_amount': 'int',
        'dislikes_amount': 'int',
        'id': 'str',
        'is_rating_participant': 'bool',
        'likes_amount': 'int',
        'order_status': 'str',
        'photos': 'list[ReviewInfoResponsePhoto]',
        'photos_amount': 'int',
        'published_at': 'datetime',
        'rating': 'int',
        'sku': 'int',
        'status': 'str',
        'text': 'str',
        'videos': 'list[ReviewInfoResponseVideo]',
        'videos_amount': 'int'
    }

    attribute_map = {
        'comments_amount': 'comments_amount',
        'dislikes_amount': 'dislikes_amount',
        'id': 'id',
        'is_rating_participant': 'is_rating_participant',
        'likes_amount': 'likes_amount',
        'order_status': 'order_status',
        'photos': 'photos',
        'photos_amount': 'photos_amount',
        'published_at': 'published_at',
        'rating': 'rating',
        'sku': 'sku',
        'status': 'status',
        'text': 'text',
        'videos': 'videos',
        'videos_amount': 'videos_amount'
    }

    def __init__(self, comments_amount=None, dislikes_amount=None, id=None, is_rating_participant=None, likes_amount=None, order_status=None, photos=None, photos_amount=None, published_at=None, rating=None, sku=None, status=None, text=None, videos=None, videos_amount=None):  # noqa: E501
        """V1ReviewInfoResponse - a model defined in Swagger"""  # noqa: E501
        self._comments_amount = None
        self._dislikes_amount = None
        self._id = None
        self._is_rating_participant = None
        self._likes_amount = None
        self._order_status = None
        self._photos = None
        self._photos_amount = None
        self._published_at = None
        self._rating = None
        self._sku = None
        self._status = None
        self._text = None
        self._videos = None
        self._videos_amount = None
        self.discriminator = None
        if comments_amount is not None:
            self.comments_amount = comments_amount
        if dislikes_amount is not None:
            self.dislikes_amount = dislikes_amount
        if id is not None:
            self.id = id
        if is_rating_participant is not None:
            self.is_rating_participant = is_rating_participant
        if likes_amount is not None:
            self.likes_amount = likes_amount
        if order_status is not None:
            self.order_status = order_status
        if photos is not None:
            self.photos = photos
        if photos_amount is not None:
            self.photos_amount = photos_amount
        if published_at is not None:
            self.published_at = published_at
        if rating is not None:
            self.rating = rating
        if sku is not None:
            self.sku = sku
        if status is not None:
            self.status = status
        if text is not None:
            self.text = text
        if videos is not None:
            self.videos = videos
        if videos_amount is not None:
            self.videos_amount = videos_amount

    @property
    def comments_amount(self):
        """Gets the comments_amount of this V1ReviewInfoResponse.  # noqa: E501

        Количество комментариев к отзыву.  # noqa: E501

        :return: The comments_amount of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._comments_amount

    @comments_amount.setter
    def comments_amount(self, comments_amount):
        """Sets the comments_amount of this V1ReviewInfoResponse.

        Количество комментариев к отзыву.  # noqa: E501

        :param comments_amount: The comments_amount of this V1ReviewInfoResponse.  # noqa: E501
        :type: int
        """

        self._comments_amount = comments_amount

    @property
    def dislikes_amount(self):
        """Gets the dislikes_amount of this V1ReviewInfoResponse.  # noqa: E501

        Количество дизлайков на отзыве.  # noqa: E501

        :return: The dislikes_amount of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._dislikes_amount

    @dislikes_amount.setter
    def dislikes_amount(self, dislikes_amount):
        """Sets the dislikes_amount of this V1ReviewInfoResponse.

        Количество дизлайков на отзыве.  # noqa: E501

        :param dislikes_amount: The dislikes_amount of this V1ReviewInfoResponse.  # noqa: E501
        :type: int
        """

        self._dislikes_amount = dislikes_amount

    @property
    def id(self):
        """Gets the id of this V1ReviewInfoResponse.  # noqa: E501

        Идентификатор отзыва.  # noqa: E501

        :return: The id of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1ReviewInfoResponse.

        Идентификатор отзыва.  # noqa: E501

        :param id: The id of this V1ReviewInfoResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_rating_participant(self):
        """Gets the is_rating_participant of this V1ReviewInfoResponse.  # noqa: E501

        `true`, если отзыв участвует в подсчёте рейтинга.   # noqa: E501

        :return: The is_rating_participant of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_rating_participant

    @is_rating_participant.setter
    def is_rating_participant(self, is_rating_participant):
        """Sets the is_rating_participant of this V1ReviewInfoResponse.

        `true`, если отзыв участвует в подсчёте рейтинга.   # noqa: E501

        :param is_rating_participant: The is_rating_participant of this V1ReviewInfoResponse.  # noqa: E501
        :type: bool
        """

        self._is_rating_participant = is_rating_participant

    @property
    def likes_amount(self):
        """Gets the likes_amount of this V1ReviewInfoResponse.  # noqa: E501

        Количество лайков на отзыве.  # noqa: E501

        :return: The likes_amount of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._likes_amount

    @likes_amount.setter
    def likes_amount(self, likes_amount):
        """Sets the likes_amount of this V1ReviewInfoResponse.

        Количество лайков на отзыве.  # noqa: E501

        :param likes_amount: The likes_amount of this V1ReviewInfoResponse.  # noqa: E501
        :type: int
        """

        self._likes_amount = likes_amount

    @property
    def order_status(self):
        """Gets the order_status of this V1ReviewInfoResponse.  # noqa: E501

        Статус заказа, на который покупатель оставил отзыв: - `DELIVERED` — доставлен, - `CANCELLED` — отменён.   # noqa: E501

        :return: The order_status of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this V1ReviewInfoResponse.

        Статус заказа, на который покупатель оставил отзыв: - `DELIVERED` — доставлен, - `CANCELLED` — отменён.   # noqa: E501

        :param order_status: The order_status of this V1ReviewInfoResponse.  # noqa: E501
        :type: str
        """

        self._order_status = order_status

    @property
    def photos(self):
        """Gets the photos of this V1ReviewInfoResponse.  # noqa: E501

        Информация об изображении.  # noqa: E501

        :return: The photos of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: list[ReviewInfoResponsePhoto]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this V1ReviewInfoResponse.

        Информация об изображении.  # noqa: E501

        :param photos: The photos of this V1ReviewInfoResponse.  # noqa: E501
        :type: list[ReviewInfoResponsePhoto]
        """

        self._photos = photos

    @property
    def photos_amount(self):
        """Gets the photos_amount of this V1ReviewInfoResponse.  # noqa: E501

        Количество изображений у отзыва.  # noqa: E501

        :return: The photos_amount of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._photos_amount

    @photos_amount.setter
    def photos_amount(self, photos_amount):
        """Sets the photos_amount of this V1ReviewInfoResponse.

        Количество изображений у отзыва.  # noqa: E501

        :param photos_amount: The photos_amount of this V1ReviewInfoResponse.  # noqa: E501
        :type: int
        """

        self._photos_amount = photos_amount

    @property
    def published_at(self):
        """Gets the published_at of this V1ReviewInfoResponse.  # noqa: E501

        Дата публикации отзыва.  # noqa: E501

        :return: The published_at of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this V1ReviewInfoResponse.

        Дата публикации отзыва.  # noqa: E501

        :param published_at: The published_at of this V1ReviewInfoResponse.  # noqa: E501
        :type: datetime
        """

        self._published_at = published_at

    @property
    def rating(self):
        """Gets the rating of this V1ReviewInfoResponse.  # noqa: E501

        Оценка отзыва.  # noqa: E501

        :return: The rating of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this V1ReviewInfoResponse.

        Оценка отзыва.  # noqa: E501

        :param rating: The rating of this V1ReviewInfoResponse.  # noqa: E501
        :type: int
        """

        self._rating = rating

    @property
    def sku(self):
        """Gets the sku of this V1ReviewInfoResponse.  # noqa: E501

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :return: The sku of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this V1ReviewInfoResponse.

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :param sku: The sku of this V1ReviewInfoResponse.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def status(self):
        """Gets the status of this V1ReviewInfoResponse.  # noqa: E501

        Статус отзыва: - `UNPROCESSED` — не обработан, - `PROCESSED` — обработан.   # noqa: E501

        :return: The status of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1ReviewInfoResponse.

        Статус отзыва: - `UNPROCESSED` — не обработан, - `PROCESSED` — обработан.   # noqa: E501

        :param status: The status of this V1ReviewInfoResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def text(self):
        """Gets the text of this V1ReviewInfoResponse.  # noqa: E501

        Текст отзыва.  # noqa: E501

        :return: The text of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this V1ReviewInfoResponse.

        Текст отзыва.  # noqa: E501

        :param text: The text of this V1ReviewInfoResponse.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def videos(self):
        """Gets the videos of this V1ReviewInfoResponse.  # noqa: E501

        Информация о видео.  # noqa: E501

        :return: The videos of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: list[ReviewInfoResponseVideo]
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this V1ReviewInfoResponse.

        Информация о видео.  # noqa: E501

        :param videos: The videos of this V1ReviewInfoResponse.  # noqa: E501
        :type: list[ReviewInfoResponseVideo]
        """

        self._videos = videos

    @property
    def videos_amount(self):
        """Gets the videos_amount of this V1ReviewInfoResponse.  # noqa: E501

        Количество видео у отзыва.  # noqa: E501

        :return: The videos_amount of this V1ReviewInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._videos_amount

    @videos_amount.setter
    def videos_amount(self, videos_amount):
        """Sets the videos_amount of this V1ReviewInfoResponse.

        Количество видео у отзыва.  # noqa: E501

        :param videos_amount: The videos_amount of this V1ReviewInfoResponse.  # noqa: E501
        :type: int
        """

        self._videos_amount = videos_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ReviewInfoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ReviewInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
