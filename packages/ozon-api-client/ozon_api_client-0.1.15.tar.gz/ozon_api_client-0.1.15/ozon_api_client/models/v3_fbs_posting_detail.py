# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3FbsPostingDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_data': 'list[V3AdditionalDataItem]',
        'addressee': 'V3Addressee',
        'analytics_data': 'V3FbsPostingAnalyticsData',
        'available_actions': 'list[str]',
        'barcodes': 'V3Barcodes',
        'cancellation': 'V3Cancellation',
        'courier': 'FbsPostingDetailCourier',
        'customer': 'V3Customer',
        'delivering_date': 'datetime',
        'delivery_method': 'V3DeliveryMethod',
        'delivery_price': 'str',
        'financial_data': 'V3PostingFinancialData',
        'in_process_at': 'datetime',
        'is_express': 'bool',
        'is_multibox': 'bool',
        'multi_box_qty': 'int',
        'order_id': 'int',
        'order_number': 'str',
        'parent_posting_number': 'str',
        'pickup_code_verified_at': 'datetime',
        'posting_number': 'str',
        'product_exemplars': 'V3FbsPostingProductExemplarsV3',
        'products': 'list[V3PostingProductDetail]',
        'provider_status': 'str',
        'prr_option': 'FbsPostingDetailPrrOption',
        'related_postings': 'V3FbsPostingDetailRelatedPostings',
        'requirements': 'V3FbsPostingRequirementsV3',
        'shipment_date': 'datetime',
        'status': 'str',
        'substatus': 'str',
        'tpl_integration_type': 'str',
        'tracking_number': 'str',
        'tariffication': 'list[V3FbsTariffication]'
    }

    attribute_map = {
        'additional_data': 'additional_data',
        'addressee': 'addressee',
        'analytics_data': 'analytics_data',
        'available_actions': 'available_actions',
        'barcodes': 'barcodes',
        'cancellation': 'cancellation',
        'courier': 'courier',
        'customer': 'customer',
        'delivering_date': 'delivering_date',
        'delivery_method': 'delivery_method',
        'delivery_price': 'delivery_price',
        'financial_data': 'financial_data',
        'in_process_at': 'in_process_at',
        'is_express': 'is_express',
        'is_multibox': 'is_multibox',
        'multi_box_qty': 'multi_box_qty',
        'order_id': 'order_id',
        'order_number': 'order_number',
        'parent_posting_number': 'parent_posting_number',
        'pickup_code_verified_at': 'pickup_code_verified_at',
        'posting_number': 'posting_number',
        'product_exemplars': 'product_exemplars',
        'products': 'products',
        'provider_status': 'provider_status',
        'prr_option': 'prr_option',
        'related_postings': 'related_postings',
        'requirements': 'requirements',
        'shipment_date': 'shipment_date',
        'status': 'status',
        'substatus': 'substatus',
        'tpl_integration_type': 'tpl_integration_type',
        'tracking_number': 'tracking_number',
        'tariffication': 'tariffication'
    }

    def __init__(self, additional_data=None, addressee=None, analytics_data=None, available_actions=None, barcodes=None, cancellation=None, courier=None, customer=None, delivering_date=None, delivery_method=None, delivery_price=None, financial_data=None, in_process_at=None, is_express=None, is_multibox=None, multi_box_qty=None, order_id=None, order_number=None, parent_posting_number=None, pickup_code_verified_at=None, posting_number=None, product_exemplars=None, products=None, provider_status=None, prr_option=None, related_postings=None, requirements=None, shipment_date=None, status=None, substatus=None, tpl_integration_type=None, tracking_number=None, tariffication=None):  # noqa: E501
        """V3FbsPostingDetail - a model defined in Swagger"""  # noqa: E501
        self._additional_data = None
        self._addressee = None
        self._analytics_data = None
        self._available_actions = None
        self._barcodes = None
        self._cancellation = None
        self._courier = None
        self._customer = None
        self._delivering_date = None
        self._delivery_method = None
        self._delivery_price = None
        self._financial_data = None
        self._in_process_at = None
        self._is_express = None
        self._is_multibox = None
        self._multi_box_qty = None
        self._order_id = None
        self._order_number = None
        self._parent_posting_number = None
        self._pickup_code_verified_at = None
        self._posting_number = None
        self._product_exemplars = None
        self._products = None
        self._provider_status = None
        self._prr_option = None
        self._related_postings = None
        self._requirements = None
        self._shipment_date = None
        self._status = None
        self._substatus = None
        self._tpl_integration_type = None
        self._tracking_number = None
        self._tariffication = None
        self.discriminator = None
        if additional_data is not None:
            self.additional_data = additional_data
        if addressee is not None:
            self.addressee = addressee
        if analytics_data is not None:
            self.analytics_data = analytics_data
        if available_actions is not None:
            self.available_actions = available_actions
        if barcodes is not None:
            self.barcodes = barcodes
        if cancellation is not None:
            self.cancellation = cancellation
        if courier is not None:
            self.courier = courier
        if customer is not None:
            self.customer = customer
        if delivering_date is not None:
            self.delivering_date = delivering_date
        if delivery_method is not None:
            self.delivery_method = delivery_method
        if delivery_price is not None:
            self.delivery_price = delivery_price
        if financial_data is not None:
            self.financial_data = financial_data
        if in_process_at is not None:
            self.in_process_at = in_process_at
        if is_express is not None:
            self.is_express = is_express
        if is_multibox is not None:
            self.is_multibox = is_multibox
        if multi_box_qty is not None:
            self.multi_box_qty = multi_box_qty
        if order_id is not None:
            self.order_id = order_id
        if order_number is not None:
            self.order_number = order_number
        if parent_posting_number is not None:
            self.parent_posting_number = parent_posting_number
        if pickup_code_verified_at is not None:
            self.pickup_code_verified_at = pickup_code_verified_at
        if posting_number is not None:
            self.posting_number = posting_number
        if product_exemplars is not None:
            self.product_exemplars = product_exemplars
        if products is not None:
            self.products = products
        if provider_status is not None:
            self.provider_status = provider_status
        if prr_option is not None:
            self.prr_option = prr_option
        if related_postings is not None:
            self.related_postings = related_postings
        if requirements is not None:
            self.requirements = requirements
        if shipment_date is not None:
            self.shipment_date = shipment_date
        if status is not None:
            self.status = status
        if substatus is not None:
            self.substatus = substatus
        if tpl_integration_type is not None:
            self.tpl_integration_type = tpl_integration_type
        if tracking_number is not None:
            self.tracking_number = tracking_number
        if tariffication is not None:
            self.tariffication = tariffication

    @property
    def additional_data(self):
        """Gets the additional_data of this V3FbsPostingDetail.  # noqa: E501


        :return: The additional_data of this V3FbsPostingDetail.  # noqa: E501
        :rtype: list[V3AdditionalDataItem]
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this V3FbsPostingDetail.


        :param additional_data: The additional_data of this V3FbsPostingDetail.  # noqa: E501
        :type: list[V3AdditionalDataItem]
        """

        self._additional_data = additional_data

    @property
    def addressee(self):
        """Gets the addressee of this V3FbsPostingDetail.  # noqa: E501


        :return: The addressee of this V3FbsPostingDetail.  # noqa: E501
        :rtype: V3Addressee
        """
        return self._addressee

    @addressee.setter
    def addressee(self, addressee):
        """Sets the addressee of this V3FbsPostingDetail.


        :param addressee: The addressee of this V3FbsPostingDetail.  # noqa: E501
        :type: V3Addressee
        """

        self._addressee = addressee

    @property
    def analytics_data(self):
        """Gets the analytics_data of this V3FbsPostingDetail.  # noqa: E501


        :return: The analytics_data of this V3FbsPostingDetail.  # noqa: E501
        :rtype: V3FbsPostingAnalyticsData
        """
        return self._analytics_data

    @analytics_data.setter
    def analytics_data(self, analytics_data):
        """Sets the analytics_data of this V3FbsPostingDetail.


        :param analytics_data: The analytics_data of this V3FbsPostingDetail.  # noqa: E501
        :type: V3FbsPostingAnalyticsData
        """

        self._analytics_data = analytics_data

    @property
    def available_actions(self):
        """Gets the available_actions of this V3FbsPostingDetail.  # noqa: E501

        Доступные действия и информация об отправлении: - `arbitration` — открыть спор; - `awaiting_delivery` — перевести в статус «Ожидает отгрузки»; - `can_create_chat` — начать чат с покупателем; - `cancel` — отменить отправление; - `click_track_number` — просмотреть по трек-номеру историю изменения статусов в личном кабинете; - `customer_phone_available` — телефон покупателя; - `has_weight_products` — весовые товары в отправлении; - `hide_region_and_city` — скрыть регион и город покупателя в отчёте; - `invoice_get` —  получить информацию из счёта-фактуры; - `invoice_send` — создать счёт-фактуру; - `invoice_update` — отредактировать счёт-фактуру; - `label_download_big` — скачать большую этикетку; - `label_download_small` — скачать маленькую этикетку; - `label_download` — скачать этикетку; - `non_int_delivered` — перевести в статус «Условно доставлен»; - `non_int_delivering` — перевести в статус «Доставляется»; - `non_int_last_mile` — перевести в статус «Курьер в пути»; - `product_cancel` — отменить часть товаров в отправлении; - `set_cutoff` — необходимо указать дату отгрузки, воспользуйтесь методом [/v1/posting/cutoff/set](#operation/PostingAPI_SetPostingCutoff); - `set_timeslot` — изменить время доставки покупателю; - `set_track_number` — указать или изменить трек-номер; - `ship_async_in_process` — отправление собирается; - `ship_async_retry` — собрать отправление повторно после ошибки сборки; - `ship_async` — собрать отправление; - `ship_with_additional_info` — необходимо заполнить дополнительную информацию; - `ship` — собрать отправление; - `update_cis` — изменить дополнительную информацию.   # noqa: E501

        :return: The available_actions of this V3FbsPostingDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_actions

    @available_actions.setter
    def available_actions(self, available_actions):
        """Sets the available_actions of this V3FbsPostingDetail.

        Доступные действия и информация об отправлении: - `arbitration` — открыть спор; - `awaiting_delivery` — перевести в статус «Ожидает отгрузки»; - `can_create_chat` — начать чат с покупателем; - `cancel` — отменить отправление; - `click_track_number` — просмотреть по трек-номеру историю изменения статусов в личном кабинете; - `customer_phone_available` — телефон покупателя; - `has_weight_products` — весовые товары в отправлении; - `hide_region_and_city` — скрыть регион и город покупателя в отчёте; - `invoice_get` —  получить информацию из счёта-фактуры; - `invoice_send` — создать счёт-фактуру; - `invoice_update` — отредактировать счёт-фактуру; - `label_download_big` — скачать большую этикетку; - `label_download_small` — скачать маленькую этикетку; - `label_download` — скачать этикетку; - `non_int_delivered` — перевести в статус «Условно доставлен»; - `non_int_delivering` — перевести в статус «Доставляется»; - `non_int_last_mile` — перевести в статус «Курьер в пути»; - `product_cancel` — отменить часть товаров в отправлении; - `set_cutoff` — необходимо указать дату отгрузки, воспользуйтесь методом [/v1/posting/cutoff/set](#operation/PostingAPI_SetPostingCutoff); - `set_timeslot` — изменить время доставки покупателю; - `set_track_number` — указать или изменить трек-номер; - `ship_async_in_process` — отправление собирается; - `ship_async_retry` — собрать отправление повторно после ошибки сборки; - `ship_async` — собрать отправление; - `ship_with_additional_info` — необходимо заполнить дополнительную информацию; - `ship` — собрать отправление; - `update_cis` — изменить дополнительную информацию.   # noqa: E501

        :param available_actions: The available_actions of this V3FbsPostingDetail.  # noqa: E501
        :type: list[str]
        """

        self._available_actions = available_actions

    @property
    def barcodes(self):
        """Gets the barcodes of this V3FbsPostingDetail.  # noqa: E501


        :return: The barcodes of this V3FbsPostingDetail.  # noqa: E501
        :rtype: V3Barcodes
        """
        return self._barcodes

    @barcodes.setter
    def barcodes(self, barcodes):
        """Sets the barcodes of this V3FbsPostingDetail.


        :param barcodes: The barcodes of this V3FbsPostingDetail.  # noqa: E501
        :type: V3Barcodes
        """

        self._barcodes = barcodes

    @property
    def cancellation(self):
        """Gets the cancellation of this V3FbsPostingDetail.  # noqa: E501


        :return: The cancellation of this V3FbsPostingDetail.  # noqa: E501
        :rtype: V3Cancellation
        """
        return self._cancellation

    @cancellation.setter
    def cancellation(self, cancellation):
        """Sets the cancellation of this V3FbsPostingDetail.


        :param cancellation: The cancellation of this V3FbsPostingDetail.  # noqa: E501
        :type: V3Cancellation
        """

        self._cancellation = cancellation

    @property
    def courier(self):
        """Gets the courier of this V3FbsPostingDetail.  # noqa: E501


        :return: The courier of this V3FbsPostingDetail.  # noqa: E501
        :rtype: FbsPostingDetailCourier
        """
        return self._courier

    @courier.setter
    def courier(self, courier):
        """Sets the courier of this V3FbsPostingDetail.


        :param courier: The courier of this V3FbsPostingDetail.  # noqa: E501
        :type: FbsPostingDetailCourier
        """

        self._courier = courier

    @property
    def customer(self):
        """Gets the customer of this V3FbsPostingDetail.  # noqa: E501


        :return: The customer of this V3FbsPostingDetail.  # noqa: E501
        :rtype: V3Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this V3FbsPostingDetail.


        :param customer: The customer of this V3FbsPostingDetail.  # noqa: E501
        :type: V3Customer
        """

        self._customer = customer

    @property
    def delivering_date(self):
        """Gets the delivering_date of this V3FbsPostingDetail.  # noqa: E501

        Дата передачи отправления в доставку.  # noqa: E501

        :return: The delivering_date of this V3FbsPostingDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._delivering_date

    @delivering_date.setter
    def delivering_date(self, delivering_date):
        """Sets the delivering_date of this V3FbsPostingDetail.

        Дата передачи отправления в доставку.  # noqa: E501

        :param delivering_date: The delivering_date of this V3FbsPostingDetail.  # noqa: E501
        :type: datetime
        """

        self._delivering_date = delivering_date

    @property
    def delivery_method(self):
        """Gets the delivery_method of this V3FbsPostingDetail.  # noqa: E501


        :return: The delivery_method of this V3FbsPostingDetail.  # noqa: E501
        :rtype: V3DeliveryMethod
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this V3FbsPostingDetail.


        :param delivery_method: The delivery_method of this V3FbsPostingDetail.  # noqa: E501
        :type: V3DeliveryMethod
        """

        self._delivery_method = delivery_method

    @property
    def delivery_price(self):
        """Gets the delivery_price of this V3FbsPostingDetail.  # noqa: E501

        Стоимость доставки.  # noqa: E501

        :return: The delivery_price of this V3FbsPostingDetail.  # noqa: E501
        :rtype: str
        """
        return self._delivery_price

    @delivery_price.setter
    def delivery_price(self, delivery_price):
        """Sets the delivery_price of this V3FbsPostingDetail.

        Стоимость доставки.  # noqa: E501

        :param delivery_price: The delivery_price of this V3FbsPostingDetail.  # noqa: E501
        :type: str
        """

        self._delivery_price = delivery_price

    @property
    def financial_data(self):
        """Gets the financial_data of this V3FbsPostingDetail.  # noqa: E501


        :return: The financial_data of this V3FbsPostingDetail.  # noqa: E501
        :rtype: V3PostingFinancialData
        """
        return self._financial_data

    @financial_data.setter
    def financial_data(self, financial_data):
        """Sets the financial_data of this V3FbsPostingDetail.


        :param financial_data: The financial_data of this V3FbsPostingDetail.  # noqa: E501
        :type: V3PostingFinancialData
        """

        self._financial_data = financial_data

    @property
    def in_process_at(self):
        """Gets the in_process_at of this V3FbsPostingDetail.  # noqa: E501

        Дата и время начала обработки отправления.  # noqa: E501

        :return: The in_process_at of this V3FbsPostingDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._in_process_at

    @in_process_at.setter
    def in_process_at(self, in_process_at):
        """Sets the in_process_at of this V3FbsPostingDetail.

        Дата и время начала обработки отправления.  # noqa: E501

        :param in_process_at: The in_process_at of this V3FbsPostingDetail.  # noqa: E501
        :type: datetime
        """

        self._in_process_at = in_process_at

    @property
    def is_express(self):
        """Gets the is_express of this V3FbsPostingDetail.  # noqa: E501

        Если использовалась быстрая доставка Ozon Express — `true`.  # noqa: E501

        :return: The is_express of this V3FbsPostingDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_express

    @is_express.setter
    def is_express(self, is_express):
        """Sets the is_express of this V3FbsPostingDetail.

        Если использовалась быстрая доставка Ozon Express — `true`.  # noqa: E501

        :param is_express: The is_express of this V3FbsPostingDetail.  # noqa: E501
        :type: bool
        """

        self._is_express = is_express

    @property
    def is_multibox(self):
        """Gets the is_multibox of this V3FbsPostingDetail.  # noqa: E501

        Признак, что в отправлении есть многокоробочный товар и нужно передать количество коробок для него:  - `true` — до сборки передайте количество коробок через метод [/v3/posting/multiboxqty/set](#operation/PostingAPI_PostingMultiBoxQtySetV3). - `false` — отправление собрано с указанием количества коробок в параметре `multi_box_qty` или в отправлении нет многокоробочного товара.   # noqa: E501

        :return: The is_multibox of this V3FbsPostingDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_multibox

    @is_multibox.setter
    def is_multibox(self, is_multibox):
        """Sets the is_multibox of this V3FbsPostingDetail.

        Признак, что в отправлении есть многокоробочный товар и нужно передать количество коробок для него:  - `true` — до сборки передайте количество коробок через метод [/v3/posting/multiboxqty/set](#operation/PostingAPI_PostingMultiBoxQtySetV3). - `false` — отправление собрано с указанием количества коробок в параметре `multi_box_qty` или в отправлении нет многокоробочного товара.   # noqa: E501

        :param is_multibox: The is_multibox of this V3FbsPostingDetail.  # noqa: E501
        :type: bool
        """

        self._is_multibox = is_multibox

    @property
    def multi_box_qty(self):
        """Gets the multi_box_qty of this V3FbsPostingDetail.  # noqa: E501

        Количество коробок, в которые упакован товар.  # noqa: E501

        :return: The multi_box_qty of this V3FbsPostingDetail.  # noqa: E501
        :rtype: int
        """
        return self._multi_box_qty

    @multi_box_qty.setter
    def multi_box_qty(self, multi_box_qty):
        """Sets the multi_box_qty of this V3FbsPostingDetail.

        Количество коробок, в которые упакован товар.  # noqa: E501

        :param multi_box_qty: The multi_box_qty of this V3FbsPostingDetail.  # noqa: E501
        :type: int
        """

        self._multi_box_qty = multi_box_qty

    @property
    def order_id(self):
        """Gets the order_id of this V3FbsPostingDetail.  # noqa: E501

        Идентификатор заказа, к которому относится отправление.  # noqa: E501

        :return: The order_id of this V3FbsPostingDetail.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this V3FbsPostingDetail.

        Идентификатор заказа, к которому относится отправление.  # noqa: E501

        :param order_id: The order_id of this V3FbsPostingDetail.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    @property
    def order_number(self):
        """Gets the order_number of this V3FbsPostingDetail.  # noqa: E501

        Номер заказа, к которому относится отправление.  # noqa: E501

        :return: The order_number of this V3FbsPostingDetail.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this V3FbsPostingDetail.

        Номер заказа, к которому относится отправление.  # noqa: E501

        :param order_number: The order_number of this V3FbsPostingDetail.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def parent_posting_number(self):
        """Gets the parent_posting_number of this V3FbsPostingDetail.  # noqa: E501

        Номер родительского отправления, в результате разделения которого появилось текущее.  # noqa: E501

        :return: The parent_posting_number of this V3FbsPostingDetail.  # noqa: E501
        :rtype: str
        """
        return self._parent_posting_number

    @parent_posting_number.setter
    def parent_posting_number(self, parent_posting_number):
        """Sets the parent_posting_number of this V3FbsPostingDetail.

        Номер родительского отправления, в результате разделения которого появилось текущее.  # noqa: E501

        :param parent_posting_number: The parent_posting_number of this V3FbsPostingDetail.  # noqa: E501
        :type: str
        """

        self._parent_posting_number = parent_posting_number

    @property
    def pickup_code_verified_at(self):
        """Gets the pickup_code_verified_at of this V3FbsPostingDetail.  # noqa: E501

        Дата и время успешной валидации кода курьера. Чтобы проверить код курьера, воспользуйтесь методом [/v1/posting/fbs/pick-up-code/verify](#operation/PostingAPI_PostingFBSPickupCodeVerify).  # noqa: E501

        :return: The pickup_code_verified_at of this V3FbsPostingDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._pickup_code_verified_at

    @pickup_code_verified_at.setter
    def pickup_code_verified_at(self, pickup_code_verified_at):
        """Sets the pickup_code_verified_at of this V3FbsPostingDetail.

        Дата и время успешной валидации кода курьера. Чтобы проверить код курьера, воспользуйтесь методом [/v1/posting/fbs/pick-up-code/verify](#operation/PostingAPI_PostingFBSPickupCodeVerify).  # noqa: E501

        :param pickup_code_verified_at: The pickup_code_verified_at of this V3FbsPostingDetail.  # noqa: E501
        :type: datetime
        """

        self._pickup_code_verified_at = pickup_code_verified_at

    @property
    def posting_number(self):
        """Gets the posting_number of this V3FbsPostingDetail.  # noqa: E501

        Номер отправления.  # noqa: E501

        :return: The posting_number of this V3FbsPostingDetail.  # noqa: E501
        :rtype: str
        """
        return self._posting_number

    @posting_number.setter
    def posting_number(self, posting_number):
        """Sets the posting_number of this V3FbsPostingDetail.

        Номер отправления.  # noqa: E501

        :param posting_number: The posting_number of this V3FbsPostingDetail.  # noqa: E501
        :type: str
        """

        self._posting_number = posting_number

    @property
    def product_exemplars(self):
        """Gets the product_exemplars of this V3FbsPostingDetail.  # noqa: E501


        :return: The product_exemplars of this V3FbsPostingDetail.  # noqa: E501
        :rtype: V3FbsPostingProductExemplarsV3
        """
        return self._product_exemplars

    @product_exemplars.setter
    def product_exemplars(self, product_exemplars):
        """Sets the product_exemplars of this V3FbsPostingDetail.


        :param product_exemplars: The product_exemplars of this V3FbsPostingDetail.  # noqa: E501
        :type: V3FbsPostingProductExemplarsV3
        """

        self._product_exemplars = product_exemplars

    @property
    def products(self):
        """Gets the products of this V3FbsPostingDetail.  # noqa: E501

        Массив товаров в отправлении.  # noqa: E501

        :return: The products of this V3FbsPostingDetail.  # noqa: E501
        :rtype: list[V3PostingProductDetail]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this V3FbsPostingDetail.

        Массив товаров в отправлении.  # noqa: E501

        :param products: The products of this V3FbsPostingDetail.  # noqa: E501
        :type: list[V3PostingProductDetail]
        """

        self._products = products

    @property
    def provider_status(self):
        """Gets the provider_status of this V3FbsPostingDetail.  # noqa: E501

        Статус службы доставки.  # noqa: E501

        :return: The provider_status of this V3FbsPostingDetail.  # noqa: E501
        :rtype: str
        """
        return self._provider_status

    @provider_status.setter
    def provider_status(self, provider_status):
        """Sets the provider_status of this V3FbsPostingDetail.

        Статус службы доставки.  # noqa: E501

        :param provider_status: The provider_status of this V3FbsPostingDetail.  # noqa: E501
        :type: str
        """

        self._provider_status = provider_status

    @property
    def prr_option(self):
        """Gets the prr_option of this V3FbsPostingDetail.  # noqa: E501


        :return: The prr_option of this V3FbsPostingDetail.  # noqa: E501
        :rtype: FbsPostingDetailPrrOption
        """
        return self._prr_option

    @prr_option.setter
    def prr_option(self, prr_option):
        """Sets the prr_option of this V3FbsPostingDetail.


        :param prr_option: The prr_option of this V3FbsPostingDetail.  # noqa: E501
        :type: FbsPostingDetailPrrOption
        """

        self._prr_option = prr_option

    @property
    def related_postings(self):
        """Gets the related_postings of this V3FbsPostingDetail.  # noqa: E501


        :return: The related_postings of this V3FbsPostingDetail.  # noqa: E501
        :rtype: V3FbsPostingDetailRelatedPostings
        """
        return self._related_postings

    @related_postings.setter
    def related_postings(self, related_postings):
        """Sets the related_postings of this V3FbsPostingDetail.


        :param related_postings: The related_postings of this V3FbsPostingDetail.  # noqa: E501
        :type: V3FbsPostingDetailRelatedPostings
        """

        self._related_postings = related_postings

    @property
    def requirements(self):
        """Gets the requirements of this V3FbsPostingDetail.  # noqa: E501


        :return: The requirements of this V3FbsPostingDetail.  # noqa: E501
        :rtype: V3FbsPostingRequirementsV3
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this V3FbsPostingDetail.


        :param requirements: The requirements of this V3FbsPostingDetail.  # noqa: E501
        :type: V3FbsPostingRequirementsV3
        """

        self._requirements = requirements

    @property
    def shipment_date(self):
        """Gets the shipment_date of this V3FbsPostingDetail.  # noqa: E501

        Дата и время, до которой необходимо собрать отправление. Если отправление не собрать к этой дате — оно автоматически отменится.  # noqa: E501

        :return: The shipment_date of this V3FbsPostingDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._shipment_date

    @shipment_date.setter
    def shipment_date(self, shipment_date):
        """Sets the shipment_date of this V3FbsPostingDetail.

        Дата и время, до которой необходимо собрать отправление. Если отправление не собрать к этой дате — оно автоматически отменится.  # noqa: E501

        :param shipment_date: The shipment_date of this V3FbsPostingDetail.  # noqa: E501
        :type: datetime
        """

        self._shipment_date = shipment_date

    @property
    def status(self):
        """Gets the status of this V3FbsPostingDetail.  # noqa: E501

        Статус отправления: - `acceptance_in_progress` — идёт приёмка, - `arbitration` — арбитраж, - `awaiting_approve` — ожидает подтверждения, - `awaiting_deliver` — ожидает отгрузки, - `awaiting_packaging` — ожидает упаковки, - `awaiting_registration` — ожидает регистрации, - `awaiting_verification` — создано, - `cancelled` — отменено, - `cancelled_from_split_pending` — отменён из-за разделения отправления, - `client_arbitration` — клиентский арбитраж доставки, - `delivered` — доставлено, - `delivering` — доставляется, - `driver_pickup` — у водителя, - `not_accepted` — не принят на сортировочном центре, - `sent_by_seller` – отправлено продавцом.   # noqa: E501

        :return: The status of this V3FbsPostingDetail.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V3FbsPostingDetail.

        Статус отправления: - `acceptance_in_progress` — идёт приёмка, - `arbitration` — арбитраж, - `awaiting_approve` — ожидает подтверждения, - `awaiting_deliver` — ожидает отгрузки, - `awaiting_packaging` — ожидает упаковки, - `awaiting_registration` — ожидает регистрации, - `awaiting_verification` — создано, - `cancelled` — отменено, - `cancelled_from_split_pending` — отменён из-за разделения отправления, - `client_arbitration` — клиентский арбитраж доставки, - `delivered` — доставлено, - `delivering` — доставляется, - `driver_pickup` — у водителя, - `not_accepted` — не принят на сортировочном центре, - `sent_by_seller` – отправлено продавцом.   # noqa: E501

        :param status: The status of this V3FbsPostingDetail.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def substatus(self):
        """Gets the substatus of this V3FbsPostingDetail.  # noqa: E501

        Подстатус отправления: - `posting_acceptance_in_progress` — идёт приёмка, - `posting_in_arbitration` — арбитраж, - `posting_created` — создано, - `posting_in_carriage` — в перевозке, - `posting_not_in_carriage` — не добавлено в перевозку, - `posting_registered` — зарегистрировано, - `posting_transferring_to_delivery` (`status=awaiting_deliver`) — передаётся в доставку, - `posting_awaiting_passport_data` — ожидает паспортных данных,  - `posting_created` — создано, - `posting_awaiting_registration` — ожидает регистрации, - `posting_registration_error` — ошибка регистрации, - `posting_transferring_to_delivery` (`status=awaiting_registration`) — передаётся курьеру, - `posting_split_pending` — создано, - `posting_canceled` — отменено, - `posting_in_client_arbitration` — клиентский арбитраж доставки, - `posting_delivered` — доставлено, - `posting_received` — получено, - `posting_conditionally_delivered` — условно доставлено, - `posting_in_courier_service` — курьер в пути, - `posting_in_pickup_point` — в пункте выдачи, - `posting_on_way_to_city` — в пути в ваш город, - `posting_on_way_to_pickup_point` — в пути в пункт выдачи, - `posting_returned_to_warehouse` — возвращено на склад, - `posting_transferred_to_courier_service` — передаётся в службу доставки, - `posting_driver_pick_up` — у водителя, - `posting_not_in_sort_center` — не принято на сортировочном центре, - `sent_by_seller` — отправлено продавцом.   # noqa: E501

        :return: The substatus of this V3FbsPostingDetail.  # noqa: E501
        :rtype: str
        """
        return self._substatus

    @substatus.setter
    def substatus(self, substatus):
        """Sets the substatus of this V3FbsPostingDetail.

        Подстатус отправления: - `posting_acceptance_in_progress` — идёт приёмка, - `posting_in_arbitration` — арбитраж, - `posting_created` — создано, - `posting_in_carriage` — в перевозке, - `posting_not_in_carriage` — не добавлено в перевозку, - `posting_registered` — зарегистрировано, - `posting_transferring_to_delivery` (`status=awaiting_deliver`) — передаётся в доставку, - `posting_awaiting_passport_data` — ожидает паспортных данных,  - `posting_created` — создано, - `posting_awaiting_registration` — ожидает регистрации, - `posting_registration_error` — ошибка регистрации, - `posting_transferring_to_delivery` (`status=awaiting_registration`) — передаётся курьеру, - `posting_split_pending` — создано, - `posting_canceled` — отменено, - `posting_in_client_arbitration` — клиентский арбитраж доставки, - `posting_delivered` — доставлено, - `posting_received` — получено, - `posting_conditionally_delivered` — условно доставлено, - `posting_in_courier_service` — курьер в пути, - `posting_in_pickup_point` — в пункте выдачи, - `posting_on_way_to_city` — в пути в ваш город, - `posting_on_way_to_pickup_point` — в пути в пункт выдачи, - `posting_returned_to_warehouse` — возвращено на склад, - `posting_transferred_to_courier_service` — передаётся в службу доставки, - `posting_driver_pick_up` — у водителя, - `posting_not_in_sort_center` — не принято на сортировочном центре, - `sent_by_seller` — отправлено продавцом.   # noqa: E501

        :param substatus: The substatus of this V3FbsPostingDetail.  # noqa: E501
        :type: str
        """

        self._substatus = substatus

    @property
    def tpl_integration_type(self):
        """Gets the tpl_integration_type of this V3FbsPostingDetail.  # noqa: E501

        Тип интеграции со службой доставки:   - `ozon` — доставка через Ozon логистику.   - `aggregator` — доставка внешней службой, Ozon регистрирует заказ.   - `3pl_tracking` — доставка внешней службой, продавец регистрирует заказ.   - `non_integrated` — доставка силами продавца.   # noqa: E501

        :return: The tpl_integration_type of this V3FbsPostingDetail.  # noqa: E501
        :rtype: str
        """
        return self._tpl_integration_type

    @tpl_integration_type.setter
    def tpl_integration_type(self, tpl_integration_type):
        """Sets the tpl_integration_type of this V3FbsPostingDetail.

        Тип интеграции со службой доставки:   - `ozon` — доставка через Ozon логистику.   - `aggregator` — доставка внешней службой, Ozon регистрирует заказ.   - `3pl_tracking` — доставка внешней службой, продавец регистрирует заказ.   - `non_integrated` — доставка силами продавца.   # noqa: E501

        :param tpl_integration_type: The tpl_integration_type of this V3FbsPostingDetail.  # noqa: E501
        :type: str
        """

        self._tpl_integration_type = tpl_integration_type

    @property
    def tracking_number(self):
        """Gets the tracking_number of this V3FbsPostingDetail.  # noqa: E501

        Трек-номер отправления.  # noqa: E501

        :return: The tracking_number of this V3FbsPostingDetail.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this V3FbsPostingDetail.

        Трек-номер отправления.  # noqa: E501

        :param tracking_number: The tracking_number of this V3FbsPostingDetail.  # noqa: E501
        :type: str
        """

        self._tracking_number = tracking_number

    @property
    def tariffication(self):
        """Gets the tariffication of this V3FbsPostingDetail.  # noqa: E501

        Информация по тарификации отгрузки.  # noqa: E501

        :return: The tariffication of this V3FbsPostingDetail.  # noqa: E501
        :rtype: list[V3FbsTariffication]
        """
        return self._tariffication

    @tariffication.setter
    def tariffication(self, tariffication):
        """Sets the tariffication of this V3FbsPostingDetail.

        Информация по тарификации отгрузки.  # noqa: E501

        :param tariffication: The tariffication of this V3FbsPostingDetail.  # noqa: E501
        :type: list[V3FbsTariffication]
        """

        self._tariffication = tariffication

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3FbsPostingDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3FbsPostingDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
