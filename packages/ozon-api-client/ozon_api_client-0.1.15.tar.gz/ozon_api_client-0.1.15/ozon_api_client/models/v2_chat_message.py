# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2ChatMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'data': 'list[str]',
        'is_read': 'bool',
        'message_id': 'int',
        'user': 'V2User'
    }

    attribute_map = {
        'created_at': 'created_at',
        'data': 'data',
        'is_read': 'is_read',
        'message_id': 'messageId',
        'user': 'user'
    }

    def __init__(self, created_at=None, data=None, is_read=None, message_id=None, user=None):  # noqa: E501
        """V2ChatMessage - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._data = None
        self._is_read = None
        self._message_id = None
        self._user = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if data is not None:
            self.data = data
        if is_read is not None:
            self.is_read = is_read
        if message_id is not None:
            self.message_id = message_id
        if user is not None:
            self.user = user

    @property
    def created_at(self):
        """Gets the created_at of this V2ChatMessage.  # noqa: E501

        Дата создания сообщения.  # noqa: E501

        :return: The created_at of this V2ChatMessage.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2ChatMessage.

        Дата создания сообщения.  # noqa: E501

        :param created_at: The created_at of this V2ChatMessage.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def data(self):
        """Gets the data of this V2ChatMessage.  # noqa: E501

        Массив с содержимым сообщения в формате Markdown.  # noqa: E501

        :return: The data of this V2ChatMessage.  # noqa: E501
        :rtype: list[str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this V2ChatMessage.

        Массив с содержимым сообщения в формате Markdown.  # noqa: E501

        :param data: The data of this V2ChatMessage.  # noqa: E501
        :type: list[str]
        """

        self._data = data

    @property
    def is_read(self):
        """Gets the is_read of this V2ChatMessage.  # noqa: E501

        Признак, что сообщение прочитано.  # noqa: E501

        :return: The is_read of this V2ChatMessage.  # noqa: E501
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this V2ChatMessage.

        Признак, что сообщение прочитано.  # noqa: E501

        :param is_read: The is_read of this V2ChatMessage.  # noqa: E501
        :type: bool
        """

        self._is_read = is_read

    @property
    def message_id(self):
        """Gets the message_id of this V2ChatMessage.  # noqa: E501

        Идентификатор сообщения.  # noqa: E501

        :return: The message_id of this V2ChatMessage.  # noqa: E501
        :rtype: int
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this V2ChatMessage.

        Идентификатор сообщения.  # noqa: E501

        :param message_id: The message_id of this V2ChatMessage.  # noqa: E501
        :type: int
        """

        self._message_id = message_id

    @property
    def user(self):
        """Gets the user of this V2ChatMessage.  # noqa: E501


        :return: The user of this V2ChatMessage.  # noqa: E501
        :rtype: V2User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V2ChatMessage.


        :param user: The user of this V2ChatMessage.  # noqa: E501
        :type: V2User
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2ChatMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2ChatMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
