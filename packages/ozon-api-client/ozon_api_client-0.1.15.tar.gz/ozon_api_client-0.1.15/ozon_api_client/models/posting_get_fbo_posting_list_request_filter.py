# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostingGetFboPostingListRequestFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'since': 'datetime',
        'status': 'str',
        'to': 'datetime'
    }

    attribute_map = {
        'since': 'since',
        'status': 'status',
        'to': 'to'
    }

    def __init__(self, since=None, status=None, to=None):  # noqa: E501
        """PostingGetFboPostingListRequestFilter - a model defined in Swagger"""  # noqa: E501
        self._since = None
        self._status = None
        self._to = None
        self.discriminator = None
        if since is not None:
            self.since = since
        if status is not None:
            self.status = status
        if to is not None:
            self.to = to

    @property
    def since(self):
        """Gets the since of this PostingGetFboPostingListRequestFilter.  # noqa: E501

        Начало периода в формате YYYY-MM-DD.  # noqa: E501

        :return: The since of this PostingGetFboPostingListRequestFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._since

    @since.setter
    def since(self, since):
        """Sets the since of this PostingGetFboPostingListRequestFilter.

        Начало периода в формате YYYY-MM-DD.  # noqa: E501

        :param since: The since of this PostingGetFboPostingListRequestFilter.  # noqa: E501
        :type: datetime
        """

        self._since = since

    @property
    def status(self):
        """Gets the status of this PostingGetFboPostingListRequestFilter.  # noqa: E501

        Статус отправления. - `awaiting_packaging` — ожидает упаковки, - `awaiting_deliver` — ожидает отгрузки, - `delivering` — доставляется, - `delivered` — доставлено, - `cancelled` — отменено.   # noqa: E501

        :return: The status of this PostingGetFboPostingListRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PostingGetFboPostingListRequestFilter.

        Статус отправления. - `awaiting_packaging` — ожидает упаковки, - `awaiting_deliver` — ожидает отгрузки, - `delivering` — доставляется, - `delivered` — доставлено, - `cancelled` — отменено.   # noqa: E501

        :param status: The status of this PostingGetFboPostingListRequestFilter.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def to(self):
        """Gets the to of this PostingGetFboPostingListRequestFilter.  # noqa: E501

        Конец периода в формате YYYY-MM-DD.  # noqa: E501

        :return: The to of this PostingGetFboPostingListRequestFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this PostingGetFboPostingListRequestFilter.

        Конец периода в формате YYYY-MM-DD.  # noqa: E501

        :param to: The to of this PostingGetFboPostingListRequestFilter.  # noqa: E501
        :type: datetime
        """

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostingGetFboPostingListRequestFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostingGetFboPostingListRequestFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
