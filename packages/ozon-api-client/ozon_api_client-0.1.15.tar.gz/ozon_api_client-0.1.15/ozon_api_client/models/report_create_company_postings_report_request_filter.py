# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportCreateCompanyPostingsReportRequestFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cancel_reason_id': 'list[int]',
        'delivery_schema': 'list[str]',
        'offer_id': 'str',
        'processed_at_from': 'datetime',
        'processed_at_to': 'datetime',
        'sku': 'list[int]',
        'status_alias': 'list[str]',
        'statuses': 'list[int]',
        'title': 'str'
    }

    attribute_map = {
        'cancel_reason_id': 'cancel_reason_id',
        'delivery_schema': 'delivery_schema',
        'offer_id': 'offer_id',
        'processed_at_from': 'processed_at_from',
        'processed_at_to': 'processed_at_to',
        'sku': 'sku',
        'status_alias': 'status_alias',
        'statuses': 'statuses',
        'title': 'title'
    }

    def __init__(self, cancel_reason_id=None, delivery_schema=None, offer_id=None, processed_at_from=None, processed_at_to=None, sku=None, status_alias=None, statuses=None, title=None):  # noqa: E501
        """ReportCreateCompanyPostingsReportRequestFilter - a model defined in Swagger"""  # noqa: E501
        self._cancel_reason_id = None
        self._delivery_schema = None
        self._offer_id = None
        self._processed_at_from = None
        self._processed_at_to = None
        self._sku = None
        self._status_alias = None
        self._statuses = None
        self._title = None
        self.discriminator = None
        if cancel_reason_id is not None:
            self.cancel_reason_id = cancel_reason_id
        if delivery_schema is not None:
            self.delivery_schema = delivery_schema
        if offer_id is not None:
            self.offer_id = offer_id
        if processed_at_from is not None:
            self.processed_at_from = processed_at_from
        if processed_at_to is not None:
            self.processed_at_to = processed_at_to
        if sku is not None:
            self.sku = sku
        if status_alias is not None:
            self.status_alias = status_alias
        if statuses is not None:
            self.statuses = statuses
        if title is not None:
            self.title = title

    @property
    def cancel_reason_id(self):
        """Gets the cancel_reason_id of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501

        Идентификатор причины отмены.  # noqa: E501

        :return: The cancel_reason_id of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._cancel_reason_id

    @cancel_reason_id.setter
    def cancel_reason_id(self, cancel_reason_id):
        """Sets the cancel_reason_id of this ReportCreateCompanyPostingsReportRequestFilter.

        Идентификатор причины отмены.  # noqa: E501

        :param cancel_reason_id: The cancel_reason_id of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :type: list[int]
        """

        self._cancel_reason_id = cancel_reason_id

    @property
    def delivery_schema(self):
        """Gets the delivery_schema of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501

        Схема работы — FBO или FBS.  За один запрос вы можете передать только одно значение: * `fbo` — чтобы получить отчёт по схеме FBO, * `fbs` — чтобы получить отчёт по схеме FBS.   # noqa: E501

        :return: The delivery_schema of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._delivery_schema

    @delivery_schema.setter
    def delivery_schema(self, delivery_schema):
        """Sets the delivery_schema of this ReportCreateCompanyPostingsReportRequestFilter.

        Схема работы — FBO или FBS.  За один запрос вы можете передать только одно значение: * `fbo` — чтобы получить отчёт по схеме FBO, * `fbs` — чтобы получить отчёт по схеме FBS.   # noqa: E501

        :param delivery_schema: The delivery_schema of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :type: list[str]
        """

        self._delivery_schema = delivery_schema

    @property
    def offer_id(self):
        """Gets the offer_id of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501

        Артикул товара.  # noqa: E501

        :return: The offer_id of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this ReportCreateCompanyPostingsReportRequestFilter.

        Артикул товара.  # noqa: E501

        :param offer_id: The offer_id of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def processed_at_from(self):
        """Gets the processed_at_from of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501

        Время, когда заказ попал в обработку.  # noqa: E501

        :return: The processed_at_from of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._processed_at_from

    @processed_at_from.setter
    def processed_at_from(self, processed_at_from):
        """Sets the processed_at_from of this ReportCreateCompanyPostingsReportRequestFilter.

        Время, когда заказ попал в обработку.  # noqa: E501

        :param processed_at_from: The processed_at_from of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :type: datetime
        """

        self._processed_at_from = processed_at_from

    @property
    def processed_at_to(self):
        """Gets the processed_at_to of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501

        Время, когда заказ появился в личном кабинете.  # noqa: E501

        :return: The processed_at_to of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._processed_at_to

    @processed_at_to.setter
    def processed_at_to(self, processed_at_to):
        """Sets the processed_at_to of this ReportCreateCompanyPostingsReportRequestFilter.

        Время, когда заказ появился в личном кабинете.  # noqa: E501

        :param processed_at_to: The processed_at_to of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :type: datetime
        """

        self._processed_at_to = processed_at_to

    @property
    def sku(self):
        """Gets the sku of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501

        Идентификатор товара в системе Ozon.  # noqa: E501

        :return: The sku of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ReportCreateCompanyPostingsReportRequestFilter.

        Идентификатор товара в системе Ozon.  # noqa: E501

        :param sku: The sku of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :type: list[int]
        """

        self._sku = sku

    @property
    def status_alias(self):
        """Gets the status_alias of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501

        Текст статуса.  # noqa: E501

        :return: The status_alias of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._status_alias

    @status_alias.setter
    def status_alias(self, status_alias):
        """Sets the status_alias of this ReportCreateCompanyPostingsReportRequestFilter.

        Текст статуса.  # noqa: E501

        :param status_alias: The status_alias of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :type: list[str]
        """

        self._status_alias = status_alias

    @property
    def statuses(self):
        """Gets the statuses of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501

        Числовой статус.  # noqa: E501

        :return: The statuses of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this ReportCreateCompanyPostingsReportRequestFilter.

        Числовой статус.  # noqa: E501

        :param statuses: The statuses of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :type: list[int]
        """

        self._statuses = statuses

    @property
    def title(self):
        """Gets the title of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501

        Название товара.  # noqa: E501

        :return: The title of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ReportCreateCompanyPostingsReportRequestFilter.

        Название товара.  # noqa: E501

        :param title: The title of this ReportCreateCompanyPostingsReportRequestFilter.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportCreateCompanyPostingsReportRequestFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportCreateCompanyPostingsReportRequestFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
