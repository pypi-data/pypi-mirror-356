# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1GetDiscountTaskListResponseTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'datetime',
        'end_at': 'datetime',
        'edited_till': 'datetime',
        'status': 'str',
        'customer_name': 'str',
        'sku': 'int',
        'user_comment': 'str',
        'seller_comment': 'str',
        'requested_price': 'float',
        'approved_price': 'float',
        'original_price': 'float',
        'discount': 'float',
        'discount_percent': 'float',
        'base_price': 'float',
        'min_auto_price': 'float',
        'prev_task_id': 'int',
        'is_damaged': 'bool',
        'moderated_at': 'datetime',
        'approved_discount': 'float',
        'approved_discount_percent': 'float',
        'is_purchased': 'bool',
        'is_auto_moderated': 'bool',
        'offer_id': 'str',
        'email': 'str',
        'last_name': 'str',
        'first_name': 'str',
        'patronymic': 'str',
        'approved_quantity_min': 'int',
        'approved_quantity_max': 'int',
        'requested_quantity_min': 'int',
        'requested_quantity_max': 'int',
        'requested_price_with_fee': 'float',
        'approved_price_with_fee': 'float',
        'approved_price_fee_percent': 'float'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'end_at': 'end_at',
        'edited_till': 'edited_till',
        'status': 'status',
        'customer_name': 'customer_name',
        'sku': 'sku',
        'user_comment': 'user_comment',
        'seller_comment': 'seller_comment',
        'requested_price': 'requested_price',
        'approved_price': 'approved_price',
        'original_price': 'original_price',
        'discount': 'discount',
        'discount_percent': 'discount_percent',
        'base_price': 'base_price',
        'min_auto_price': 'min_auto_price',
        'prev_task_id': 'prev_task_id',
        'is_damaged': 'is_damaged',
        'moderated_at': 'moderated_at',
        'approved_discount': 'approved_discount',
        'approved_discount_percent': 'approved_discount_percent',
        'is_purchased': 'is_purchased',
        'is_auto_moderated': 'is_auto_moderated',
        'offer_id': 'offer_id',
        'email': 'email',
        'last_name': 'last_name',
        'first_name': 'first_name',
        'patronymic': 'patronymic',
        'approved_quantity_min': 'approved_quantity_min',
        'approved_quantity_max': 'approved_quantity_max',
        'requested_quantity_min': 'requested_quantity_min',
        'requested_quantity_max': 'requested_quantity_max',
        'requested_price_with_fee': 'requested_price_with_fee',
        'approved_price_with_fee': 'approved_price_with_fee',
        'approved_price_fee_percent': 'approved_price_fee_percent'
    }

    def __init__(self, id=None, created_at=None, end_at=None, edited_till=None, status=None, customer_name=None, sku=None, user_comment=None, seller_comment=None, requested_price=None, approved_price=None, original_price=None, discount=None, discount_percent=None, base_price=None, min_auto_price=None, prev_task_id=None, is_damaged=None, moderated_at=None, approved_discount=None, approved_discount_percent=None, is_purchased=None, is_auto_moderated=None, offer_id=None, email=None, last_name=None, first_name=None, patronymic=None, approved_quantity_min=None, approved_quantity_max=None, requested_quantity_min=None, requested_quantity_max=None, requested_price_with_fee=None, approved_price_with_fee=None, approved_price_fee_percent=None):  # noqa: E501
        """V1GetDiscountTaskListResponseTask - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._end_at = None
        self._edited_till = None
        self._status = None
        self._customer_name = None
        self._sku = None
        self._user_comment = None
        self._seller_comment = None
        self._requested_price = None
        self._approved_price = None
        self._original_price = None
        self._discount = None
        self._discount_percent = None
        self._base_price = None
        self._min_auto_price = None
        self._prev_task_id = None
        self._is_damaged = None
        self._moderated_at = None
        self._approved_discount = None
        self._approved_discount_percent = None
        self._is_purchased = None
        self._is_auto_moderated = None
        self._offer_id = None
        self._email = None
        self._last_name = None
        self._first_name = None
        self._patronymic = None
        self._approved_quantity_min = None
        self._approved_quantity_max = None
        self._requested_quantity_min = None
        self._requested_quantity_max = None
        self._requested_price_with_fee = None
        self._approved_price_with_fee = None
        self._approved_price_fee_percent = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if end_at is not None:
            self.end_at = end_at
        if edited_till is not None:
            self.edited_till = edited_till
        if status is not None:
            self.status = status
        if customer_name is not None:
            self.customer_name = customer_name
        if sku is not None:
            self.sku = sku
        if user_comment is not None:
            self.user_comment = user_comment
        if seller_comment is not None:
            self.seller_comment = seller_comment
        if requested_price is not None:
            self.requested_price = requested_price
        if approved_price is not None:
            self.approved_price = approved_price
        if original_price is not None:
            self.original_price = original_price
        if discount is not None:
            self.discount = discount
        if discount_percent is not None:
            self.discount_percent = discount_percent
        if base_price is not None:
            self.base_price = base_price
        if min_auto_price is not None:
            self.min_auto_price = min_auto_price
        if prev_task_id is not None:
            self.prev_task_id = prev_task_id
        if is_damaged is not None:
            self.is_damaged = is_damaged
        if moderated_at is not None:
            self.moderated_at = moderated_at
        if approved_discount is not None:
            self.approved_discount = approved_discount
        if approved_discount_percent is not None:
            self.approved_discount_percent = approved_discount_percent
        if is_purchased is not None:
            self.is_purchased = is_purchased
        if is_auto_moderated is not None:
            self.is_auto_moderated = is_auto_moderated
        if offer_id is not None:
            self.offer_id = offer_id
        if email is not None:
            self.email = email
        if last_name is not None:
            self.last_name = last_name
        if first_name is not None:
            self.first_name = first_name
        if patronymic is not None:
            self.patronymic = patronymic
        if approved_quantity_min is not None:
            self.approved_quantity_min = approved_quantity_min
        if approved_quantity_max is not None:
            self.approved_quantity_max = approved_quantity_max
        if requested_quantity_min is not None:
            self.requested_quantity_min = requested_quantity_min
        if requested_quantity_max is not None:
            self.requested_quantity_max = requested_quantity_max
        if requested_price_with_fee is not None:
            self.requested_price_with_fee = requested_price_with_fee
        if approved_price_with_fee is not None:
            self.approved_price_with_fee = approved_price_with_fee
        if approved_price_fee_percent is not None:
            self.approved_price_fee_percent = approved_price_fee_percent

    @property
    def id(self):
        """Gets the id of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Идентификатор заявки.  # noqa: E501

        :return: The id of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1GetDiscountTaskListResponseTask.

        Идентификатор заявки.  # noqa: E501

        :param id: The id of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Дата создания заявки.  # noqa: E501

        :return: The created_at of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V1GetDiscountTaskListResponseTask.

        Дата создания заявки.  # noqa: E501

        :param created_at: The created_at of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def end_at(self):
        """Gets the end_at of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Время окончания действия заявки.  # noqa: E501

        :return: The end_at of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this V1GetDiscountTaskListResponseTask.

        Время окончания действия заявки.  # noqa: E501

        :param end_at: The end_at of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: datetime
        """

        self._end_at = end_at

    @property
    def edited_till(self):
        """Gets the edited_till of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Время для изменения решения.  # noqa: E501

        :return: The edited_till of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: datetime
        """
        return self._edited_till

    @edited_till.setter
    def edited_till(self, edited_till):
        """Sets the edited_till of this V1GetDiscountTaskListResponseTask.

        Время для изменения решения.  # noqa: E501

        :param edited_till: The edited_till of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: datetime
        """

        self._edited_till = edited_till

    @property
    def status(self):
        """Gets the status of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Статус заявки.  # noqa: E501

        :return: The status of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1GetDiscountTaskListResponseTask.

        Статус заявки.  # noqa: E501

        :param status: The status of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def customer_name(self):
        """Gets the customer_name of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Имя покупателя.  # noqa: E501

        :return: The customer_name of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this V1GetDiscountTaskListResponseTask.

        Имя покупателя.  # noqa: E501

        :param customer_name: The customer_name of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def sku(self):
        """Gets the sku of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :return: The sku of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this V1GetDiscountTaskListResponseTask.

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :param sku: The sku of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def user_comment(self):
        """Gets the user_comment of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Комментарий покупателя к заявке.  # noqa: E501

        :return: The user_comment of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: str
        """
        return self._user_comment

    @user_comment.setter
    def user_comment(self, user_comment):
        """Sets the user_comment of this V1GetDiscountTaskListResponseTask.

        Комментарий покупателя к заявке.  # noqa: E501

        :param user_comment: The user_comment of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: str
        """

        self._user_comment = user_comment

    @property
    def seller_comment(self):
        """Gets the seller_comment of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Комментарий продавца к заявке.  # noqa: E501

        :return: The seller_comment of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: str
        """
        return self._seller_comment

    @seller_comment.setter
    def seller_comment(self, seller_comment):
        """Sets the seller_comment of this V1GetDiscountTaskListResponseTask.

        Комментарий продавца к заявке.  # noqa: E501

        :param seller_comment: The seller_comment of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: str
        """

        self._seller_comment = seller_comment

    @property
    def requested_price(self):
        """Gets the requested_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Цена по заявке.  # noqa: E501

        :return: The requested_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: float
        """
        return self._requested_price

    @requested_price.setter
    def requested_price(self, requested_price):
        """Sets the requested_price of this V1GetDiscountTaskListResponseTask.

        Цена по заявке.  # noqa: E501

        :param requested_price: The requested_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: float
        """

        self._requested_price = requested_price

    @property
    def approved_price(self):
        """Gets the approved_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Одобренная цена.  # noqa: E501

        :return: The approved_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: float
        """
        return self._approved_price

    @approved_price.setter
    def approved_price(self, approved_price):
        """Sets the approved_price of this V1GetDiscountTaskListResponseTask.

        Одобренная цена.  # noqa: E501

        :param approved_price: The approved_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: float
        """

        self._approved_price = approved_price

    @property
    def original_price(self):
        """Gets the original_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Цена товара до всех скидок.  # noqa: E501

        :return: The original_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: float
        """
        return self._original_price

    @original_price.setter
    def original_price(self, original_price):
        """Sets the original_price of this V1GetDiscountTaskListResponseTask.

        Цена товара до всех скидок.  # noqa: E501

        :param original_price: The original_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: float
        """

        self._original_price = original_price

    @property
    def discount(self):
        """Gets the discount of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Скидка в рублях.  # noqa: E501

        :return: The discount of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this V1GetDiscountTaskListResponseTask.

        Скидка в рублях.  # noqa: E501

        :param discount: The discount of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def discount_percent(self):
        """Gets the discount_percent of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Скидка в процентах.  # noqa: E501

        :return: The discount_percent of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: float
        """
        return self._discount_percent

    @discount_percent.setter
    def discount_percent(self, discount_percent):
        """Sets the discount_percent of this V1GetDiscountTaskListResponseTask.

        Скидка в процентах.  # noqa: E501

        :param discount_percent: The discount_percent of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: float
        """

        self._discount_percent = discount_percent

    @property
    def base_price(self):
        """Gets the base_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Базовая цена, по которой товар продаётся на Ozon, если не участвует в акции.  # noqa: E501

        :return: The base_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: float
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price):
        """Sets the base_price of this V1GetDiscountTaskListResponseTask.

        Базовая цена, по которой товар продаётся на Ozon, если не участвует в акции.  # noqa: E501

        :param base_price: The base_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: float
        """

        self._base_price = base_price

    @property
    def min_auto_price(self):
        """Gets the min_auto_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Минимальное значение цены после автоприменения скидок и акций.  # noqa: E501

        :return: The min_auto_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: float
        """
        return self._min_auto_price

    @min_auto_price.setter
    def min_auto_price(self, min_auto_price):
        """Sets the min_auto_price of this V1GetDiscountTaskListResponseTask.

        Минимальное значение цены после автоприменения скидок и акций.  # noqa: E501

        :param min_auto_price: The min_auto_price of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: float
        """

        self._min_auto_price = min_auto_price

    @property
    def prev_task_id(self):
        """Gets the prev_task_id of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Идентификатор предыдущей заявки от покупателя по этому товару.  # noqa: E501

        :return: The prev_task_id of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: int
        """
        return self._prev_task_id

    @prev_task_id.setter
    def prev_task_id(self, prev_task_id):
        """Sets the prev_task_id of this V1GetDiscountTaskListResponseTask.

        Идентификатор предыдущей заявки от покупателя по этому товару.  # noqa: E501

        :param prev_task_id: The prev_task_id of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: int
        """

        self._prev_task_id = prev_task_id

    @property
    def is_damaged(self):
        """Gets the is_damaged of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Является ли товар уценённым. `true`, если уценённый.  # noqa: E501

        :return: The is_damaged of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: bool
        """
        return self._is_damaged

    @is_damaged.setter
    def is_damaged(self, is_damaged):
        """Sets the is_damaged of this V1GetDiscountTaskListResponseTask.

        Является ли товар уценённым. `true`, если уценённый.  # noqa: E501

        :param is_damaged: The is_damaged of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: bool
        """

        self._is_damaged = is_damaged

    @property
    def moderated_at(self):
        """Gets the moderated_at of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Дата модерации: просмотра, одобрения или отклонения заявки.   # noqa: E501

        :return: The moderated_at of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: datetime
        """
        return self._moderated_at

    @moderated_at.setter
    def moderated_at(self, moderated_at):
        """Sets the moderated_at of this V1GetDiscountTaskListResponseTask.

        Дата модерации: просмотра, одобрения или отклонения заявки.   # noqa: E501

        :param moderated_at: The moderated_at of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: datetime
        """

        self._moderated_at = moderated_at

    @property
    def approved_discount(self):
        """Gets the approved_discount of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Скидка в рублях, которую одобрил продавец. Передайте значение `0`, если продавец не одобрял заявку.  # noqa: E501

        :return: The approved_discount of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: float
        """
        return self._approved_discount

    @approved_discount.setter
    def approved_discount(self, approved_discount):
        """Sets the approved_discount of this V1GetDiscountTaskListResponseTask.

        Скидка в рублях, которую одобрил продавец. Передайте значение `0`, если продавец не одобрял заявку.  # noqa: E501

        :param approved_discount: The approved_discount of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: float
        """

        self._approved_discount = approved_discount

    @property
    def approved_discount_percent(self):
        """Gets the approved_discount_percent of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Скидка в процентах, которую одобрил продавец. Передайте значение `0`, если продавец не одобрял заявку.  # noqa: E501

        :return: The approved_discount_percent of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: float
        """
        return self._approved_discount_percent

    @approved_discount_percent.setter
    def approved_discount_percent(self, approved_discount_percent):
        """Sets the approved_discount_percent of this V1GetDiscountTaskListResponseTask.

        Скидка в процентах, которую одобрил продавец. Передайте значение `0`, если продавец не одобрял заявку.  # noqa: E501

        :param approved_discount_percent: The approved_discount_percent of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: float
        """

        self._approved_discount_percent = approved_discount_percent

    @property
    def is_purchased(self):
        """Gets the is_purchased of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Покупал ли пользователь товар. `true`, если покупал.  # noqa: E501

        :return: The is_purchased of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: bool
        """
        return self._is_purchased

    @is_purchased.setter
    def is_purchased(self, is_purchased):
        """Sets the is_purchased of this V1GetDiscountTaskListResponseTask.

        Покупал ли пользователь товар. `true`, если покупал.  # noqa: E501

        :param is_purchased: The is_purchased of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: bool
        """

        self._is_purchased = is_purchased

    @property
    def is_auto_moderated(self):
        """Gets the is_auto_moderated of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Была ли заявка промодерирована автоматически. `true`, если модерация была автоматической.  # noqa: E501

        :return: The is_auto_moderated of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_moderated

    @is_auto_moderated.setter
    def is_auto_moderated(self, is_auto_moderated):
        """Sets the is_auto_moderated of this V1GetDiscountTaskListResponseTask.

        Была ли заявка промодерирована автоматически. `true`, если модерация была автоматической.  # noqa: E501

        :param is_auto_moderated: The is_auto_moderated of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: bool
        """

        self._is_auto_moderated = is_auto_moderated

    @property
    def offer_id(self):
        """Gets the offer_id of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Артикул товара.  # noqa: E501

        :return: The offer_id of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this V1GetDiscountTaskListResponseTask.

        Артикул товара.  # noqa: E501

        :param offer_id: The offer_id of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def email(self):
        """Gets the email of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Электронный адрес сотрудника продавца, который обработал заявку.  # noqa: E501

        :return: The email of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this V1GetDiscountTaskListResponseTask.

        Электронный адрес сотрудника продавца, который обработал заявку.  # noqa: E501

        :param email: The email of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def last_name(self):
        """Gets the last_name of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Фамилия сотрудника продавца, который обработал заявку.  # noqa: E501

        :return: The last_name of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this V1GetDiscountTaskListResponseTask.

        Фамилия сотрудника продавца, который обработал заявку.  # noqa: E501

        :param last_name: The last_name of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def first_name(self):
        """Gets the first_name of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Имя сотрудника продавца, который обработал заявку.  # noqa: E501

        :return: The first_name of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this V1GetDiscountTaskListResponseTask.

        Имя сотрудника продавца, который обработал заявку.  # noqa: E501

        :param first_name: The first_name of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def patronymic(self):
        """Gets the patronymic of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Отчество сотрудника продавца, который обработал заявку.  # noqa: E501

        :return: The patronymic of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: str
        """
        return self._patronymic

    @patronymic.setter
    def patronymic(self, patronymic):
        """Sets the patronymic of this V1GetDiscountTaskListResponseTask.

        Отчество сотрудника продавца, который обработал заявку.  # noqa: E501

        :param patronymic: The patronymic of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: str
        """

        self._patronymic = patronymic

    @property
    def approved_quantity_min(self):
        """Gets the approved_quantity_min of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Минимальное одобренное количество товаров.  # noqa: E501

        :return: The approved_quantity_min of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: int
        """
        return self._approved_quantity_min

    @approved_quantity_min.setter
    def approved_quantity_min(self, approved_quantity_min):
        """Sets the approved_quantity_min of this V1GetDiscountTaskListResponseTask.

        Минимальное одобренное количество товаров.  # noqa: E501

        :param approved_quantity_min: The approved_quantity_min of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: int
        """

        self._approved_quantity_min = approved_quantity_min

    @property
    def approved_quantity_max(self):
        """Gets the approved_quantity_max of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Максимальное одобренное количество товаров.  # noqa: E501

        :return: The approved_quantity_max of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: int
        """
        return self._approved_quantity_max

    @approved_quantity_max.setter
    def approved_quantity_max(self, approved_quantity_max):
        """Sets the approved_quantity_max of this V1GetDiscountTaskListResponseTask.

        Максимальное одобренное количество товаров.  # noqa: E501

        :param approved_quantity_max: The approved_quantity_max of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: int
        """

        self._approved_quantity_max = approved_quantity_max

    @property
    def requested_quantity_min(self):
        """Gets the requested_quantity_min of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Запрошенное минимальное количество товаров.  # noqa: E501

        :return: The requested_quantity_min of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: int
        """
        return self._requested_quantity_min

    @requested_quantity_min.setter
    def requested_quantity_min(self, requested_quantity_min):
        """Sets the requested_quantity_min of this V1GetDiscountTaskListResponseTask.

        Запрошенное минимальное количество товаров.  # noqa: E501

        :param requested_quantity_min: The requested_quantity_min of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: int
        """

        self._requested_quantity_min = requested_quantity_min

    @property
    def requested_quantity_max(self):
        """Gets the requested_quantity_max of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Запрошенное максимальное количество товаров.  # noqa: E501

        :return: The requested_quantity_max of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: int
        """
        return self._requested_quantity_max

    @requested_quantity_max.setter
    def requested_quantity_max(self, requested_quantity_max):
        """Sets the requested_quantity_max of this V1GetDiscountTaskListResponseTask.

        Запрошенное максимальное количество товаров.  # noqa: E501

        :param requested_quantity_max: The requested_quantity_max of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: int
        """

        self._requested_quantity_max = requested_quantity_max

    @property
    def requested_price_with_fee(self):
        """Gets the requested_price_with_fee of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Цена по заявке c региональной наценкой.  # noqa: E501

        :return: The requested_price_with_fee of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: float
        """
        return self._requested_price_with_fee

    @requested_price_with_fee.setter
    def requested_price_with_fee(self, requested_price_with_fee):
        """Sets the requested_price_with_fee of this V1GetDiscountTaskListResponseTask.

        Цена по заявке c региональной наценкой.  # noqa: E501

        :param requested_price_with_fee: The requested_price_with_fee of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: float
        """

        self._requested_price_with_fee = requested_price_with_fee

    @property
    def approved_price_with_fee(self):
        """Gets the approved_price_with_fee of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Одобренная цена с региональной наценкой.  # noqa: E501

        :return: The approved_price_with_fee of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: float
        """
        return self._approved_price_with_fee

    @approved_price_with_fee.setter
    def approved_price_with_fee(self, approved_price_with_fee):
        """Sets the approved_price_with_fee of this V1GetDiscountTaskListResponseTask.

        Одобренная цена с региональной наценкой.  # noqa: E501

        :param approved_price_with_fee: The approved_price_with_fee of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: float
        """

        self._approved_price_with_fee = approved_price_with_fee

    @property
    def approved_price_fee_percent(self):
        """Gets the approved_price_fee_percent of this V1GetDiscountTaskListResponseTask.  # noqa: E501

        Региональная наценка в процентах.  # noqa: E501

        :return: The approved_price_fee_percent of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :rtype: float
        """
        return self._approved_price_fee_percent

    @approved_price_fee_percent.setter
    def approved_price_fee_percent(self, approved_price_fee_percent):
        """Sets the approved_price_fee_percent of this V1GetDiscountTaskListResponseTask.

        Региональная наценка в процентах.  # noqa: E501

        :param approved_price_fee_percent: The approved_price_fee_percent of this V1GetDiscountTaskListResponseTask.  # noqa: E501
        :type: float
        """

        self._approved_price_fee_percent = approved_price_fee_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetDiscountTaskListResponseTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetDiscountTaskListResponseTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
