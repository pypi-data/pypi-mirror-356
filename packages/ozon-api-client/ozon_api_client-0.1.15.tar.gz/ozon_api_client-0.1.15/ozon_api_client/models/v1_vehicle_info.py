# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1VehicleInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'driver_name': 'str',
        'driver_phone': 'str',
        'vehicle_model': 'str',
        'vehicle_number': 'str'
    }

    attribute_map = {
        'driver_name': 'driver_name',
        'driver_phone': 'driver_phone',
        'vehicle_model': 'vehicle_model',
        'vehicle_number': 'vehicle_number'
    }

    def __init__(self, driver_name=None, driver_phone=None, vehicle_model=None, vehicle_number=None):  # noqa: E501
        """V1VehicleInfo - a model defined in Swagger"""  # noqa: E501
        self._driver_name = None
        self._driver_phone = None
        self._vehicle_model = None
        self._vehicle_number = None
        self.discriminator = None
        if driver_name is not None:
            self.driver_name = driver_name
        if driver_phone is not None:
            self.driver_phone = driver_phone
        if vehicle_model is not None:
            self.vehicle_model = vehicle_model
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number

    @property
    def driver_name(self):
        """Gets the driver_name of this V1VehicleInfo.  # noqa: E501

        Имя водителя.  # noqa: E501

        :return: The driver_name of this V1VehicleInfo.  # noqa: E501
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this V1VehicleInfo.

        Имя водителя.  # noqa: E501

        :param driver_name: The driver_name of this V1VehicleInfo.  # noqa: E501
        :type: str
        """

        self._driver_name = driver_name

    @property
    def driver_phone(self):
        """Gets the driver_phone of this V1VehicleInfo.  # noqa: E501

        Телефон водителя.  # noqa: E501

        :return: The driver_phone of this V1VehicleInfo.  # noqa: E501
        :rtype: str
        """
        return self._driver_phone

    @driver_phone.setter
    def driver_phone(self, driver_phone):
        """Sets the driver_phone of this V1VehicleInfo.

        Телефон водителя.  # noqa: E501

        :param driver_phone: The driver_phone of this V1VehicleInfo.  # noqa: E501
        :type: str
        """

        self._driver_phone = driver_phone

    @property
    def vehicle_model(self):
        """Gets the vehicle_model of this V1VehicleInfo.  # noqa: E501

        Модель автомобиля.  # noqa: E501

        :return: The vehicle_model of this V1VehicleInfo.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_model

    @vehicle_model.setter
    def vehicle_model(self, vehicle_model):
        """Sets the vehicle_model of this V1VehicleInfo.

        Модель автомобиля.  # noqa: E501

        :param vehicle_model: The vehicle_model of this V1VehicleInfo.  # noqa: E501
        :type: str
        """

        self._vehicle_model = vehicle_model

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this V1VehicleInfo.  # noqa: E501

        Номер автомобиля.  # noqa: E501

        :return: The vehicle_number of this V1VehicleInfo.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this V1VehicleInfo.

        Номер автомобиля.  # noqa: E501

        :param vehicle_number: The vehicle_number of this V1VehicleInfo.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1VehicleInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1VehicleInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
