# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1CarriageApproveRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'carriage_id': 'int',
        'containers_count': 'int'
    }

    attribute_map = {
        'carriage_id': 'carriage_id',
        'containers_count': 'containers_count'
    }

    def __init__(self, carriage_id=None, containers_count=None):  # noqa: E501
        """V1CarriageApproveRequest - a model defined in Swagger"""  # noqa: E501
        self._carriage_id = None
        self._containers_count = None
        self.discriminator = None
        self.carriage_id = carriage_id
        if containers_count is not None:
            self.containers_count = containers_count

    @property
    def carriage_id(self):
        """Gets the carriage_id of this V1CarriageApproveRequest.  # noqa: E501

        Идентификатор отгрузки.  # noqa: E501

        :return: The carriage_id of this V1CarriageApproveRequest.  # noqa: E501
        :rtype: int
        """
        return self._carriage_id

    @carriage_id.setter
    def carriage_id(self, carriage_id):
        """Sets the carriage_id of this V1CarriageApproveRequest.

        Идентификатор отгрузки.  # noqa: E501

        :param carriage_id: The carriage_id of this V1CarriageApproveRequest.  # noqa: E501
        :type: int
        """
        if carriage_id is None:
            raise ValueError("Invalid value for `carriage_id`, must not be `None`")  # noqa: E501

        self._carriage_id = carriage_id

    @property
    def containers_count(self):
        """Gets the containers_count of this V1CarriageApproveRequest.  # noqa: E501

        Количество грузовых мест.   Используйте параметр, если вы подключены к доверительной приёмке и отгружаете заказы грузовыми местами. Если вы не подключены к доверительной приёмке, пропустите его.   # noqa: E501

        :return: The containers_count of this V1CarriageApproveRequest.  # noqa: E501
        :rtype: int
        """
        return self._containers_count

    @containers_count.setter
    def containers_count(self, containers_count):
        """Sets the containers_count of this V1CarriageApproveRequest.

        Количество грузовых мест.   Используйте параметр, если вы подключены к доверительной приёмке и отгружаете заказы грузовыми местами. Если вы не подключены к доверительной приёмке, пропустите его.   # noqa: E501

        :param containers_count: The containers_count of this V1CarriageApproveRequest.  # noqa: E501
        :type: int
        """

        self._containers_count = containers_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CarriageApproveRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CarriageApproveRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
