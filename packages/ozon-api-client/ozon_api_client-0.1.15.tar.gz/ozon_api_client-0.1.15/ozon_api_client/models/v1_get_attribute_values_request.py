# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1GetAttributeValuesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_id': 'int',
        'description_category_id': 'int',
        'language': 'LanguageLanguage',
        'last_value_id': 'int',
        'limit': 'int',
        'type_id': 'int'
    }

    attribute_map = {
        'attribute_id': 'attribute_id',
        'description_category_id': 'description_category_id',
        'language': 'language',
        'last_value_id': 'last_value_id',
        'limit': 'limit',
        'type_id': 'type_id'
    }

    def __init__(self, attribute_id=None, description_category_id=None, language=None, last_value_id=None, limit=None, type_id=None):  # noqa: E501
        """V1GetAttributeValuesRequest - a model defined in Swagger"""  # noqa: E501
        self._attribute_id = None
        self._description_category_id = None
        self._language = None
        self._last_value_id = None
        self._limit = None
        self._type_id = None
        self.discriminator = None
        if attribute_id is not None:
            self.attribute_id = attribute_id
        if description_category_id is not None:
            self.description_category_id = description_category_id
        if language is not None:
            self.language = language
        if last_value_id is not None:
            self.last_value_id = last_value_id
        if limit is not None:
            self.limit = limit
        if type_id is not None:
            self.type_id = type_id

    @property
    def attribute_id(self):
        """Gets the attribute_id of this V1GetAttributeValuesRequest.  # noqa: E501

        Идентификатор характеристики.  # noqa: E501

        :return: The attribute_id of this V1GetAttributeValuesRequest.  # noqa: E501
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this V1GetAttributeValuesRequest.

        Идентификатор характеристики.  # noqa: E501

        :param attribute_id: The attribute_id of this V1GetAttributeValuesRequest.  # noqa: E501
        :type: int
        """

        self._attribute_id = attribute_id

    @property
    def description_category_id(self):
        """Gets the description_category_id of this V1GetAttributeValuesRequest.  # noqa: E501

        Идентификатор категории.  # noqa: E501

        :return: The description_category_id of this V1GetAttributeValuesRequest.  # noqa: E501
        :rtype: int
        """
        return self._description_category_id

    @description_category_id.setter
    def description_category_id(self, description_category_id):
        """Sets the description_category_id of this V1GetAttributeValuesRequest.

        Идентификатор категории.  # noqa: E501

        :param description_category_id: The description_category_id of this V1GetAttributeValuesRequest.  # noqa: E501
        :type: int
        """

        self._description_category_id = description_category_id

    @property
    def language(self):
        """Gets the language of this V1GetAttributeValuesRequest.  # noqa: E501


        :return: The language of this V1GetAttributeValuesRequest.  # noqa: E501
        :rtype: LanguageLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this V1GetAttributeValuesRequest.


        :param language: The language of this V1GetAttributeValuesRequest.  # noqa: E501
        :type: LanguageLanguage
        """

        self._language = language

    @property
    def last_value_id(self):
        """Gets the last_value_id of this V1GetAttributeValuesRequest.  # noqa: E501

        Идентификатор справочника, с которого нужно начать ответ. Если `last_value_id` — 10, то в ответе будут справочники, начиная с одиннадцатого.  # noqa: E501

        :return: The last_value_id of this V1GetAttributeValuesRequest.  # noqa: E501
        :rtype: int
        """
        return self._last_value_id

    @last_value_id.setter
    def last_value_id(self, last_value_id):
        """Sets the last_value_id of this V1GetAttributeValuesRequest.

        Идентификатор справочника, с которого нужно начать ответ. Если `last_value_id` — 10, то в ответе будут справочники, начиная с одиннадцатого.  # noqa: E501

        :param last_value_id: The last_value_id of this V1GetAttributeValuesRequest.  # noqa: E501
        :type: int
        """

        self._last_value_id = last_value_id

    @property
    def limit(self):
        """Gets the limit of this V1GetAttributeValuesRequest.  # noqa: E501

        Количество значений в ответе: - максимум — 5000, - минимум — 1.   # noqa: E501

        :return: The limit of this V1GetAttributeValuesRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this V1GetAttributeValuesRequest.

        Количество значений в ответе: - максимум — 5000, - минимум — 1.   # noqa: E501

        :param limit: The limit of this V1GetAttributeValuesRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def type_id(self):
        """Gets the type_id of this V1GetAttributeValuesRequest.  # noqa: E501

        Идентификатор типа товара.  # noqa: E501

        :return: The type_id of this V1GetAttributeValuesRequest.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this V1GetAttributeValuesRequest.

        Идентификатор типа товара.  # noqa: E501

        :param type_id: The type_id of this V1GetAttributeValuesRequest.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetAttributeValuesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetAttributeValuesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
