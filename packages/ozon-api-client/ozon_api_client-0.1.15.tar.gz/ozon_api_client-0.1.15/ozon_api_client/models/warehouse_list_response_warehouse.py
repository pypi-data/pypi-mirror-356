# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WarehouseListResponseWarehouse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_entrusted_acceptance': 'bool',
        'is_rfbs': 'bool',
        'name': 'str',
        'warehouse_id': 'int',
        'can_print_act_in_advance': 'bool',
        'first_mile_type': 'WarehouseFirstMileType',
        'has_postings_limit': 'bool',
        'is_karantin': 'bool',
        'is_kgt': 'bool',
        'is_economy': 'bool',
        'is_timetable_editable': 'bool',
        'min_postings_limit': 'int',
        'postings_limit': 'int',
        'min_working_days': 'int',
        'status': 'str',
        'working_days': 'list[str]'
    }

    attribute_map = {
        'has_entrusted_acceptance': 'has_entrusted_acceptance',
        'is_rfbs': 'is_rfbs',
        'name': 'name',
        'warehouse_id': 'warehouse_id',
        'can_print_act_in_advance': 'can_print_act_in_advance',
        'first_mile_type': 'first_mile_type',
        'has_postings_limit': 'has_postings_limit',
        'is_karantin': 'is_karantin',
        'is_kgt': 'is_kgt',
        'is_economy': 'is_economy',
        'is_timetable_editable': 'is_timetable_editable',
        'min_postings_limit': 'min_postings_limit',
        'postings_limit': 'postings_limit',
        'min_working_days': 'min_working_days',
        'status': 'status',
        'working_days': 'working_days'
    }

    def __init__(self, has_entrusted_acceptance=None, is_rfbs=None, name=None, warehouse_id=None, can_print_act_in_advance=None, first_mile_type=None, has_postings_limit=None, is_karantin=None, is_kgt=None, is_economy=None, is_timetable_editable=None, min_postings_limit=None, postings_limit=None, min_working_days=None, status=None, working_days=None):  # noqa: E501
        """WarehouseListResponseWarehouse - a model defined in Swagger"""  # noqa: E501
        self._has_entrusted_acceptance = None
        self._is_rfbs = None
        self._name = None
        self._warehouse_id = None
        self._can_print_act_in_advance = None
        self._first_mile_type = None
        self._has_postings_limit = None
        self._is_karantin = None
        self._is_kgt = None
        self._is_economy = None
        self._is_timetable_editable = None
        self._min_postings_limit = None
        self._postings_limit = None
        self._min_working_days = None
        self._status = None
        self._working_days = None
        self.discriminator = None
        if has_entrusted_acceptance is not None:
            self.has_entrusted_acceptance = has_entrusted_acceptance
        if is_rfbs is not None:
            self.is_rfbs = is_rfbs
        if name is not None:
            self.name = name
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if can_print_act_in_advance is not None:
            self.can_print_act_in_advance = can_print_act_in_advance
        if first_mile_type is not None:
            self.first_mile_type = first_mile_type
        if has_postings_limit is not None:
            self.has_postings_limit = has_postings_limit
        if is_karantin is not None:
            self.is_karantin = is_karantin
        if is_kgt is not None:
            self.is_kgt = is_kgt
        if is_economy is not None:
            self.is_economy = is_economy
        if is_timetable_editable is not None:
            self.is_timetable_editable = is_timetable_editable
        if min_postings_limit is not None:
            self.min_postings_limit = min_postings_limit
        if postings_limit is not None:
            self.postings_limit = postings_limit
        if min_working_days is not None:
            self.min_working_days = min_working_days
        if status is not None:
            self.status = status
        if working_days is not None:
            self.working_days = working_days

    @property
    def has_entrusted_acceptance(self):
        """Gets the has_entrusted_acceptance of this WarehouseListResponseWarehouse.  # noqa: E501

        Признак доверительной приёмки. `true`, если доверительная приёмка включена на складе.  # noqa: E501

        :return: The has_entrusted_acceptance of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: bool
        """
        return self._has_entrusted_acceptance

    @has_entrusted_acceptance.setter
    def has_entrusted_acceptance(self, has_entrusted_acceptance):
        """Sets the has_entrusted_acceptance of this WarehouseListResponseWarehouse.

        Признак доверительной приёмки. `true`, если доверительная приёмка включена на складе.  # noqa: E501

        :param has_entrusted_acceptance: The has_entrusted_acceptance of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: bool
        """

        self._has_entrusted_acceptance = has_entrusted_acceptance

    @property
    def is_rfbs(self):
        """Gets the is_rfbs of this WarehouseListResponseWarehouse.  # noqa: E501

        Признак работы склада по схеме rFBS: - `true` — склад работает по схеме rFBS; - `false` — не работает по схеме rFBS.   # noqa: E501

        :return: The is_rfbs of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: bool
        """
        return self._is_rfbs

    @is_rfbs.setter
    def is_rfbs(self, is_rfbs):
        """Sets the is_rfbs of this WarehouseListResponseWarehouse.

        Признак работы склада по схеме rFBS: - `true` — склад работает по схеме rFBS; - `false` — не работает по схеме rFBS.   # noqa: E501

        :param is_rfbs: The is_rfbs of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: bool
        """

        self._is_rfbs = is_rfbs

    @property
    def name(self):
        """Gets the name of this WarehouseListResponseWarehouse.  # noqa: E501

        Название склада.  # noqa: E501

        :return: The name of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WarehouseListResponseWarehouse.

        Название склада.  # noqa: E501

        :param name: The name of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this WarehouseListResponseWarehouse.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The warehouse_id of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this WarehouseListResponseWarehouse.

        Идентификатор склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    @property
    def can_print_act_in_advance(self):
        """Gets the can_print_act_in_advance of this WarehouseListResponseWarehouse.  # noqa: E501

        Возможность печати акта приёма-передачи заранее. `true`, если печатать заранее возможно.  # noqa: E501

        :return: The can_print_act_in_advance of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: bool
        """
        return self._can_print_act_in_advance

    @can_print_act_in_advance.setter
    def can_print_act_in_advance(self, can_print_act_in_advance):
        """Sets the can_print_act_in_advance of this WarehouseListResponseWarehouse.

        Возможность печати акта приёма-передачи заранее. `true`, если печатать заранее возможно.  # noqa: E501

        :param can_print_act_in_advance: The can_print_act_in_advance of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: bool
        """

        self._can_print_act_in_advance = can_print_act_in_advance

    @property
    def first_mile_type(self):
        """Gets the first_mile_type of this WarehouseListResponseWarehouse.  # noqa: E501


        :return: The first_mile_type of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: WarehouseFirstMileType
        """
        return self._first_mile_type

    @first_mile_type.setter
    def first_mile_type(self, first_mile_type):
        """Sets the first_mile_type of this WarehouseListResponseWarehouse.


        :param first_mile_type: The first_mile_type of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: WarehouseFirstMileType
        """

        self._first_mile_type = first_mile_type

    @property
    def has_postings_limit(self):
        """Gets the has_postings_limit of this WarehouseListResponseWarehouse.  # noqa: E501

        Признак наличия лимита минимального количества заказов. `true`, если лимит есть.  # noqa: E501

        :return: The has_postings_limit of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: bool
        """
        return self._has_postings_limit

    @has_postings_limit.setter
    def has_postings_limit(self, has_postings_limit):
        """Sets the has_postings_limit of this WarehouseListResponseWarehouse.

        Признак наличия лимита минимального количества заказов. `true`, если лимит есть.  # noqa: E501

        :param has_postings_limit: The has_postings_limit of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: bool
        """

        self._has_postings_limit = has_postings_limit

    @property
    def is_karantin(self):
        """Gets the is_karantin of this WarehouseListResponseWarehouse.  # noqa: E501

        Признак, что склад не работает из-за карантина.  # noqa: E501

        :return: The is_karantin of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: bool
        """
        return self._is_karantin

    @is_karantin.setter
    def is_karantin(self, is_karantin):
        """Sets the is_karantin of this WarehouseListResponseWarehouse.

        Признак, что склад не работает из-за карантина.  # noqa: E501

        :param is_karantin: The is_karantin of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: bool
        """

        self._is_karantin = is_karantin

    @property
    def is_kgt(self):
        """Gets the is_kgt of this WarehouseListResponseWarehouse.  # noqa: E501

        Признак, что склад принимает крупногабаритные товары.  # noqa: E501

        :return: The is_kgt of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: bool
        """
        return self._is_kgt

    @is_kgt.setter
    def is_kgt(self, is_kgt):
        """Sets the is_kgt of this WarehouseListResponseWarehouse.

        Признак, что склад принимает крупногабаритные товары.  # noqa: E501

        :param is_kgt: The is_kgt of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: bool
        """

        self._is_kgt = is_kgt

    @property
    def is_economy(self):
        """Gets the is_economy of this WarehouseListResponseWarehouse.  # noqa: E501

        `true`, если склад работает с эконом-товарами.   # noqa: E501

        :return: The is_economy of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: bool
        """
        return self._is_economy

    @is_economy.setter
    def is_economy(self, is_economy):
        """Sets the is_economy of this WarehouseListResponseWarehouse.

        `true`, если склад работает с эконом-товарами.   # noqa: E501

        :param is_economy: The is_economy of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: bool
        """

        self._is_economy = is_economy

    @property
    def is_timetable_editable(self):
        """Gets the is_timetable_editable of this WarehouseListResponseWarehouse.  # noqa: E501

        Признак, что можно менять расписание работы складов.  # noqa: E501

        :return: The is_timetable_editable of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: bool
        """
        return self._is_timetable_editable

    @is_timetable_editable.setter
    def is_timetable_editable(self, is_timetable_editable):
        """Sets the is_timetable_editable of this WarehouseListResponseWarehouse.

        Признак, что можно менять расписание работы складов.  # noqa: E501

        :param is_timetable_editable: The is_timetable_editable of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: bool
        """

        self._is_timetable_editable = is_timetable_editable

    @property
    def min_postings_limit(self):
        """Gets the min_postings_limit of this WarehouseListResponseWarehouse.  # noqa: E501

        Минимальное значение лимита — количество заказов, которые можно привезти в одной поставке.  # noqa: E501

        :return: The min_postings_limit of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: int
        """
        return self._min_postings_limit

    @min_postings_limit.setter
    def min_postings_limit(self, min_postings_limit):
        """Sets the min_postings_limit of this WarehouseListResponseWarehouse.

        Минимальное значение лимита — количество заказов, которые можно привезти в одной поставке.  # noqa: E501

        :param min_postings_limit: The min_postings_limit of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: int
        """

        self._min_postings_limit = min_postings_limit

    @property
    def postings_limit(self):
        """Gets the postings_limit of this WarehouseListResponseWarehouse.  # noqa: E501

        Значение лимита. `-1`, если лимита нет.  # noqa: E501

        :return: The postings_limit of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: int
        """
        return self._postings_limit

    @postings_limit.setter
    def postings_limit(self, postings_limit):
        """Sets the postings_limit of this WarehouseListResponseWarehouse.

        Значение лимита. `-1`, если лимита нет.  # noqa: E501

        :param postings_limit: The postings_limit of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: int
        """

        self._postings_limit = postings_limit

    @property
    def min_working_days(self):
        """Gets the min_working_days of this WarehouseListResponseWarehouse.  # noqa: E501

        Количество рабочих дней склада.  # noqa: E501

        :return: The min_working_days of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: int
        """
        return self._min_working_days

    @min_working_days.setter
    def min_working_days(self, min_working_days):
        """Sets the min_working_days of this WarehouseListResponseWarehouse.

        Количество рабочих дней склада.  # noqa: E501

        :param min_working_days: The min_working_days of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: int
        """

        self._min_working_days = min_working_days

    @property
    def status(self):
        """Gets the status of this WarehouseListResponseWarehouse.  # noqa: E501

        Статус склада.  Соответствие статусов склада со статусами с личном кабинете:  | Статус Seller&nbsp;API | Статус в личном кабинете | |---|---| | `new` | Активируется | | `created` | Активный | | `disabled` | В архиве | | `blocked` | Заблокирован | | `disabled_due_to_limit` | На паузе | | `error` | Ошибка |   # noqa: E501

        :return: The status of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WarehouseListResponseWarehouse.

        Статус склада.  Соответствие статусов склада со статусами с личном кабинете:  | Статус Seller&nbsp;API | Статус в личном кабинете | |---|---| | `new` | Активируется | | `created` | Активный | | `disabled` | В архиве | | `blocked` | Заблокирован | | `disabled_due_to_limit` | На паузе | | `error` | Ошибка |   # noqa: E501

        :param status: The status of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def working_days(self):
        """Gets the working_days of this WarehouseListResponseWarehouse.  # noqa: E501

        Рабочие дни склада.  # noqa: E501

        :return: The working_days of this WarehouseListResponseWarehouse.  # noqa: E501
        :rtype: list[str]
        """
        return self._working_days

    @working_days.setter
    def working_days(self, working_days):
        """Sets the working_days of this WarehouseListResponseWarehouse.

        Рабочие дни склада.  # noqa: E501

        :param working_days: The working_days of this WarehouseListResponseWarehouse.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["1", "2", "3", "4", "5", "6", "7"]  # noqa: E501
        if not set(working_days).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `working_days` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(working_days) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._working_days = working_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WarehouseListResponseWarehouse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WarehouseListResponseWarehouse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
