# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2ProductInfoPicturesResponseItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'int',
        'primary_photo': 'list[str]',
        'photo': 'list[str]',
        'color_photo': 'list[str]',
        'photo_360': 'list[str]'
    }

    attribute_map = {
        'product_id': 'product_id',
        'primary_photo': 'primary_photo',
        'photo': 'photo',
        'color_photo': 'color_photo',
        'photo_360': 'photo_360'
    }

    def __init__(self, product_id=None, primary_photo=None, photo=None, color_photo=None, photo_360=None):  # noqa: E501
        """V2ProductInfoPicturesResponseItem - a model defined in Swagger"""  # noqa: E501
        self._product_id = None
        self._primary_photo = None
        self._photo = None
        self._color_photo = None
        self._photo_360 = None
        self.discriminator = None
        if product_id is not None:
            self.product_id = product_id
        if primary_photo is not None:
            self.primary_photo = primary_photo
        if photo is not None:
            self.photo = photo
        if color_photo is not None:
            self.color_photo = color_photo
        if photo_360 is not None:
            self.photo_360 = photo_360

    @property
    def product_id(self):
        """Gets the product_id of this V2ProductInfoPicturesResponseItem.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this V2ProductInfoPicturesResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this V2ProductInfoPicturesResponseItem.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this V2ProductInfoPicturesResponseItem.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def primary_photo(self):
        """Gets the primary_photo of this V2ProductInfoPicturesResponseItem.  # noqa: E501

        Ссылка на главное изображение.  # noqa: E501

        :return: The primary_photo of this V2ProductInfoPicturesResponseItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._primary_photo

    @primary_photo.setter
    def primary_photo(self, primary_photo):
        """Sets the primary_photo of this V2ProductInfoPicturesResponseItem.

        Ссылка на главное изображение.  # noqa: E501

        :param primary_photo: The primary_photo of this V2ProductInfoPicturesResponseItem.  # noqa: E501
        :type: list[str]
        """

        self._primary_photo = primary_photo

    @property
    def photo(self):
        """Gets the photo of this V2ProductInfoPicturesResponseItem.  # noqa: E501

        Ссылки на фотографии товара.  # noqa: E501

        :return: The photo of this V2ProductInfoPicturesResponseItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this V2ProductInfoPicturesResponseItem.

        Ссылки на фотографии товара.  # noqa: E501

        :param photo: The photo of this V2ProductInfoPicturesResponseItem.  # noqa: E501
        :type: list[str]
        """

        self._photo = photo

    @property
    def color_photo(self):
        """Gets the color_photo of this V2ProductInfoPicturesResponseItem.  # noqa: E501

        Ссылки на загруженные образцы цвета.  # noqa: E501

        :return: The color_photo of this V2ProductInfoPicturesResponseItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._color_photo

    @color_photo.setter
    def color_photo(self, color_photo):
        """Sets the color_photo of this V2ProductInfoPicturesResponseItem.

        Ссылки на загруженные образцы цвета.  # noqa: E501

        :param color_photo: The color_photo of this V2ProductInfoPicturesResponseItem.  # noqa: E501
        :type: list[str]
        """

        self._color_photo = color_photo

    @property
    def photo_360(self):
        """Gets the photo_360 of this V2ProductInfoPicturesResponseItem.  # noqa: E501

        Ссылки на изображения 360.  # noqa: E501

        :return: The photo_360 of this V2ProductInfoPicturesResponseItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._photo_360

    @photo_360.setter
    def photo_360(self, photo_360):
        """Sets the photo_360 of this V2ProductInfoPicturesResponseItem.

        Ссылки на изображения 360.  # noqa: E501

        :param photo_360: The photo_360 of this V2ProductInfoPicturesResponseItem.  # noqa: E501
        :type: list[str]
        """

        self._photo_360 = photo_360

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2ProductInfoPicturesResponseItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2ProductInfoPicturesResponseItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
