# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Financev3FinanceTransactionTotalsV3ResponseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accruals_for_sale': 'float',
        'compensation_amount': 'float',
        'money_transfer': 'float',
        'others_amount': 'float',
        'processing_and_delivery': 'float',
        'refunds_and_cancellations': 'float',
        'sale_commission': 'float',
        'services_amount': 'float'
    }

    attribute_map = {
        'accruals_for_sale': 'accruals_for_sale',
        'compensation_amount': 'compensation_amount',
        'money_transfer': 'money_transfer',
        'others_amount': 'others_amount',
        'processing_and_delivery': 'processing_and_delivery',
        'refunds_and_cancellations': 'refunds_and_cancellations',
        'sale_commission': 'sale_commission',
        'services_amount': 'services_amount'
    }

    def __init__(self, accruals_for_sale=None, compensation_amount=None, money_transfer=None, others_amount=None, processing_and_delivery=None, refunds_and_cancellations=None, sale_commission=None, services_amount=None):  # noqa: E501
        """Financev3FinanceTransactionTotalsV3ResponseResult - a model defined in Swagger"""  # noqa: E501
        self._accruals_for_sale = None
        self._compensation_amount = None
        self._money_transfer = None
        self._others_amount = None
        self._processing_and_delivery = None
        self._refunds_and_cancellations = None
        self._sale_commission = None
        self._services_amount = None
        self.discriminator = None
        if accruals_for_sale is not None:
            self.accruals_for_sale = accruals_for_sale
        if compensation_amount is not None:
            self.compensation_amount = compensation_amount
        if money_transfer is not None:
            self.money_transfer = money_transfer
        if others_amount is not None:
            self.others_amount = others_amount
        if processing_and_delivery is not None:
            self.processing_and_delivery = processing_and_delivery
        if refunds_and_cancellations is not None:
            self.refunds_and_cancellations = refunds_and_cancellations
        if sale_commission is not None:
            self.sale_commission = sale_commission
        if services_amount is not None:
            self.services_amount = services_amount

    @property
    def accruals_for_sale(self):
        """Gets the accruals_for_sale of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501

        Общая стоимость товаров и возвратов в заданный период.  # noqa: E501

        :return: The accruals_for_sale of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :rtype: float
        """
        return self._accruals_for_sale

    @accruals_for_sale.setter
    def accruals_for_sale(self, accruals_for_sale):
        """Sets the accruals_for_sale of this Financev3FinanceTransactionTotalsV3ResponseResult.

        Общая стоимость товаров и возвратов в заданный период.  # noqa: E501

        :param accruals_for_sale: The accruals_for_sale of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :type: float
        """

        self._accruals_for_sale = accruals_for_sale

    @property
    def compensation_amount(self):
        """Gets the compensation_amount of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501

        Компенсации.  # noqa: E501

        :return: The compensation_amount of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :rtype: float
        """
        return self._compensation_amount

    @compensation_amount.setter
    def compensation_amount(self, compensation_amount):
        """Sets the compensation_amount of this Financev3FinanceTransactionTotalsV3ResponseResult.

        Компенсации.  # noqa: E501

        :param compensation_amount: The compensation_amount of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :type: float
        """

        self._compensation_amount = compensation_amount

    @property
    def money_transfer(self):
        """Gets the money_transfer of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501

        Начисления за доставку и возвраты при работе по схеме «Доставка по выбору продавца».  # noqa: E501

        :return: The money_transfer of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :rtype: float
        """
        return self._money_transfer

    @money_transfer.setter
    def money_transfer(self, money_transfer):
        """Sets the money_transfer of this Financev3FinanceTransactionTotalsV3ResponseResult.

        Начисления за доставку и возвраты при работе по схеме «Доставка по выбору продавца».  # noqa: E501

        :param money_transfer: The money_transfer of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :type: float
        """

        self._money_transfer = money_transfer

    @property
    def others_amount(self):
        """Gets the others_amount of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501

        Прочие начисления.  # noqa: E501

        :return: The others_amount of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :rtype: float
        """
        return self._others_amount

    @others_amount.setter
    def others_amount(self, others_amount):
        """Sets the others_amount of this Financev3FinanceTransactionTotalsV3ResponseResult.

        Прочие начисления.  # noqa: E501

        :param others_amount: The others_amount of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :type: float
        """

        self._others_amount = others_amount

    @property
    def processing_and_delivery(self):
        """Gets the processing_and_delivery of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501

        Стоимость услуг обработки отправлений, сборки заказов, магистрали и последней мили, а также доставки до введения новых комиссий и тарифов с 1 февраля 2021 года.  Магистраль — доставка товаров между кластерами.  Последняя миля — доставка товаров покупателю в пункт выдачи заказов, постамат или курьером.   # noqa: E501

        :return: The processing_and_delivery of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :rtype: float
        """
        return self._processing_and_delivery

    @processing_and_delivery.setter
    def processing_and_delivery(self, processing_and_delivery):
        """Sets the processing_and_delivery of this Financev3FinanceTransactionTotalsV3ResponseResult.

        Стоимость услуг обработки отправлений, сборки заказов, магистрали и последней мили, а также доставки до введения новых комиссий и тарифов с 1 февраля 2021 года.  Магистраль — доставка товаров между кластерами.  Последняя миля — доставка товаров покупателю в пункт выдачи заказов, постамат или курьером.   # noqa: E501

        :param processing_and_delivery: The processing_and_delivery of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :type: float
        """

        self._processing_and_delivery = processing_and_delivery

    @property
    def refunds_and_cancellations(self):
        """Gets the refunds_and_cancellations of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501

        Стоимость обратной магистрали, обработки возвратов, отмен и невыкупа товара, а также возвратов до введения новых комиссий и тарифов с 1 февраля 2021 года.  Магистраль — доставка товаров между кластерами.  Последняя миля — доставка товаров покупателю в пункт выдачи заказов, постамат или курьером.   # noqa: E501

        :return: The refunds_and_cancellations of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :rtype: float
        """
        return self._refunds_and_cancellations

    @refunds_and_cancellations.setter
    def refunds_and_cancellations(self, refunds_and_cancellations):
        """Sets the refunds_and_cancellations of this Financev3FinanceTransactionTotalsV3ResponseResult.

        Стоимость обратной магистрали, обработки возвратов, отмен и невыкупа товара, а также возвратов до введения новых комиссий и тарифов с 1 февраля 2021 года.  Магистраль — доставка товаров между кластерами.  Последняя миля — доставка товаров покупателю в пункт выдачи заказов, постамат или курьером.   # noqa: E501

        :param refunds_and_cancellations: The refunds_and_cancellations of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :type: float
        """

        self._refunds_and_cancellations = refunds_and_cancellations

    @property
    def sale_commission(self):
        """Gets the sale_commission of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501

        Сумма комиссии, которая была удержана при продаже товара и возвращена при его возврате.  # noqa: E501

        :return: The sale_commission of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :rtype: float
        """
        return self._sale_commission

    @sale_commission.setter
    def sale_commission(self, sale_commission):
        """Sets the sale_commission of this Financev3FinanceTransactionTotalsV3ResponseResult.

        Сумма комиссии, которая была удержана при продаже товара и возвращена при его возврате.  # noqa: E501

        :param sale_commission: The sale_commission of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :type: float
        """

        self._sale_commission = sale_commission

    @property
    def services_amount(self):
        """Gets the services_amount of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501

        Стоимость дополнительных услуг, не связанных напрямую с доставками и возвратами товаров. Например, продвижения или размещения товаров.  # noqa: E501

        :return: The services_amount of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :rtype: float
        """
        return self._services_amount

    @services_amount.setter
    def services_amount(self, services_amount):
        """Sets the services_amount of this Financev3FinanceTransactionTotalsV3ResponseResult.

        Стоимость дополнительных услуг, не связанных напрямую с доставками и возвратами товаров. Например, продвижения или размещения товаров.  # noqa: E501

        :param services_amount: The services_amount of this Financev3FinanceTransactionTotalsV3ResponseResult.  # noqa: E501
        :type: float
        """

        self._services_amount = services_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Financev3FinanceTransactionTotalsV3ResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Financev3FinanceTransactionTotalsV3ResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
