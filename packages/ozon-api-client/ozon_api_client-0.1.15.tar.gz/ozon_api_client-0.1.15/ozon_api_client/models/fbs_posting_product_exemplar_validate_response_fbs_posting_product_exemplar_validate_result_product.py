# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'str',
        'exemplars': 'list[FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProductExemplar]',
        'product_id': 'int',
        'valid': 'bool'
    }

    attribute_map = {
        'error': 'error',
        'exemplars': 'exemplars',
        'product_id': 'product_id',
        'valid': 'valid'
    }

    def __init__(self, error=None, exemplars=None, product_id=None, valid=None):  # noqa: E501
        """FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct - a model defined in Swagger"""  # noqa: E501
        self._error = None
        self._exemplars = None
        self._product_id = None
        self._valid = None
        self.discriminator = None
        if error is not None:
            self.error = error
        if exemplars is not None:
            self.exemplars = exemplars
        if product_id is not None:
            self.product_id = product_id
        if valid is not None:
            self.valid = valid

    @property
    def error(self):
        """Gets the error of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.  # noqa: E501

        Код ошибки.  # noqa: E501

        :return: The error of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.

        Код ошибки.  # noqa: E501

        :param error: The error of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def exemplars(self):
        """Gets the exemplars of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.  # noqa: E501

        Информация об экземплярах.  # noqa: E501

        :return: The exemplars of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.  # noqa: E501
        :rtype: list[FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProductExemplar]
        """
        return self._exemplars

    @exemplars.setter
    def exemplars(self, exemplars):
        """Sets the exemplars of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.

        Информация об экземплярах.  # noqa: E501

        :param exemplars: The exemplars of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.  # noqa: E501
        :type: list[FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProductExemplar]
        """

        self._exemplars = exemplars

    @property
    def product_id(self):
        """Gets the product_id of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def valid(self):
        """Gets the valid of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.  # noqa: E501

        Результат прохождения проверки. `true`, если коды всех экземпляров соответствуют требованиям.  # noqa: E501

        :return: The valid of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.

        Результат прохождения проверки. `true`, если коды всех экземпляров соответствуют требованиям.  # noqa: E501

        :param valid: The valid of this FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FbsPostingProductExemplarValidateResponseFbsPostingProductExemplarValidateResultProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
