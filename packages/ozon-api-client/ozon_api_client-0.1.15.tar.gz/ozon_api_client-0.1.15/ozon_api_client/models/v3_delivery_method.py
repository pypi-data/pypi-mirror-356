# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3DeliveryMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'tpl_provider': 'str',
        'tpl_provider_id': 'int',
        'warehouse': 'str',
        'warehouse_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'tpl_provider': 'tpl_provider',
        'tpl_provider_id': 'tpl_provider_id',
        'warehouse': 'warehouse',
        'warehouse_id': 'warehouse_id'
    }

    def __init__(self, id=None, name=None, tpl_provider=None, tpl_provider_id=None, warehouse=None, warehouse_id=None):  # noqa: E501
        """V3DeliveryMethod - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._tpl_provider = None
        self._tpl_provider_id = None
        self._warehouse = None
        self._warehouse_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if tpl_provider is not None:
            self.tpl_provider = tpl_provider
        if tpl_provider_id is not None:
            self.tpl_provider_id = tpl_provider_id
        if warehouse is not None:
            self.warehouse = warehouse
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id

    @property
    def id(self):
        """Gets the id of this V3DeliveryMethod.  # noqa: E501

        Идентификатор способа доставки.  # noqa: E501

        :return: The id of this V3DeliveryMethod.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V3DeliveryMethod.

        Идентификатор способа доставки.  # noqa: E501

        :param id: The id of this V3DeliveryMethod.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this V3DeliveryMethod.  # noqa: E501

        Название способа доставки.  # noqa: E501

        :return: The name of this V3DeliveryMethod.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V3DeliveryMethod.

        Название способа доставки.  # noqa: E501

        :param name: The name of this V3DeliveryMethod.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tpl_provider(self):
        """Gets the tpl_provider of this V3DeliveryMethod.  # noqa: E501

        Служба доставки.  # noqa: E501

        :return: The tpl_provider of this V3DeliveryMethod.  # noqa: E501
        :rtype: str
        """
        return self._tpl_provider

    @tpl_provider.setter
    def tpl_provider(self, tpl_provider):
        """Sets the tpl_provider of this V3DeliveryMethod.

        Служба доставки.  # noqa: E501

        :param tpl_provider: The tpl_provider of this V3DeliveryMethod.  # noqa: E501
        :type: str
        """

        self._tpl_provider = tpl_provider

    @property
    def tpl_provider_id(self):
        """Gets the tpl_provider_id of this V3DeliveryMethod.  # noqa: E501

        Идентификатор службы доставки.  # noqa: E501

        :return: The tpl_provider_id of this V3DeliveryMethod.  # noqa: E501
        :rtype: int
        """
        return self._tpl_provider_id

    @tpl_provider_id.setter
    def tpl_provider_id(self, tpl_provider_id):
        """Sets the tpl_provider_id of this V3DeliveryMethod.

        Идентификатор службы доставки.  # noqa: E501

        :param tpl_provider_id: The tpl_provider_id of this V3DeliveryMethod.  # noqa: E501
        :type: int
        """

        self._tpl_provider_id = tpl_provider_id

    @property
    def warehouse(self):
        """Gets the warehouse of this V3DeliveryMethod.  # noqa: E501

        Название склада.  # noqa: E501

        :return: The warehouse of this V3DeliveryMethod.  # noqa: E501
        :rtype: str
        """
        return self._warehouse

    @warehouse.setter
    def warehouse(self, warehouse):
        """Sets the warehouse of this V3DeliveryMethod.

        Название склада.  # noqa: E501

        :param warehouse: The warehouse of this V3DeliveryMethod.  # noqa: E501
        :type: str
        """

        self._warehouse = warehouse

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this V3DeliveryMethod.  # noqa: E501

        Идентификатор склада.  # noqa: E501

        :return: The warehouse_id of this V3DeliveryMethod.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this V3DeliveryMethod.

        Идентификатор склада.  # noqa: E501

        :param warehouse_id: The warehouse_id of this V3DeliveryMethod.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3DeliveryMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3DeliveryMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
