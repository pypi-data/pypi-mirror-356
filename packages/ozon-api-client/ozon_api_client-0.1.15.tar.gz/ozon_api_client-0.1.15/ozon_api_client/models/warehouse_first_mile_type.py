# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WarehouseFirstMileType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dropoff_point_id': 'str',
        'dropoff_timeslot_id': 'int',
        'first_mile_is_changing': 'bool',
        'first_mile_type': 'str'
    }

    attribute_map = {
        'dropoff_point_id': 'dropoff_point_id',
        'dropoff_timeslot_id': 'dropoff_timeslot_id',
        'first_mile_is_changing': 'first_mile_is_changing',
        'first_mile_type': 'first_mile_type'
    }

    def __init__(self, dropoff_point_id=None, dropoff_timeslot_id=None, first_mile_is_changing=None, first_mile_type=None):  # noqa: E501
        """WarehouseFirstMileType - a model defined in Swagger"""  # noqa: E501
        self._dropoff_point_id = None
        self._dropoff_timeslot_id = None
        self._first_mile_is_changing = None
        self._first_mile_type = None
        self.discriminator = None
        if dropoff_point_id is not None:
            self.dropoff_point_id = dropoff_point_id
        if dropoff_timeslot_id is not None:
            self.dropoff_timeslot_id = dropoff_timeslot_id
        if first_mile_is_changing is not None:
            self.first_mile_is_changing = first_mile_is_changing
        if first_mile_type is not None:
            self.first_mile_type = first_mile_type

    @property
    def dropoff_point_id(self):
        """Gets the dropoff_point_id of this WarehouseFirstMileType.  # noqa: E501

        Идентификатор DropOff-точки.  # noqa: E501

        :return: The dropoff_point_id of this WarehouseFirstMileType.  # noqa: E501
        :rtype: str
        """
        return self._dropoff_point_id

    @dropoff_point_id.setter
    def dropoff_point_id(self, dropoff_point_id):
        """Sets the dropoff_point_id of this WarehouseFirstMileType.

        Идентификатор DropOff-точки.  # noqa: E501

        :param dropoff_point_id: The dropoff_point_id of this WarehouseFirstMileType.  # noqa: E501
        :type: str
        """

        self._dropoff_point_id = dropoff_point_id

    @property
    def dropoff_timeslot_id(self):
        """Gets the dropoff_timeslot_id of this WarehouseFirstMileType.  # noqa: E501

        Идентификатор временного слота для DropOff.  # noqa: E501

        :return: The dropoff_timeslot_id of this WarehouseFirstMileType.  # noqa: E501
        :rtype: int
        """
        return self._dropoff_timeslot_id

    @dropoff_timeslot_id.setter
    def dropoff_timeslot_id(self, dropoff_timeslot_id):
        """Sets the dropoff_timeslot_id of this WarehouseFirstMileType.

        Идентификатор временного слота для DropOff.  # noqa: E501

        :param dropoff_timeslot_id: The dropoff_timeslot_id of this WarehouseFirstMileType.  # noqa: E501
        :type: int
        """

        self._dropoff_timeslot_id = dropoff_timeslot_id

    @property
    def first_mile_is_changing(self):
        """Gets the first_mile_is_changing of this WarehouseFirstMileType.  # noqa: E501

        Признак, что настройки склада обновляются.  # noqa: E501

        :return: The first_mile_is_changing of this WarehouseFirstMileType.  # noqa: E501
        :rtype: bool
        """
        return self._first_mile_is_changing

    @first_mile_is_changing.setter
    def first_mile_is_changing(self, first_mile_is_changing):
        """Sets the first_mile_is_changing of this WarehouseFirstMileType.

        Признак, что настройки склада обновляются.  # noqa: E501

        :param first_mile_is_changing: The first_mile_is_changing of this WarehouseFirstMileType.  # noqa: E501
        :type: bool
        """

        self._first_mile_is_changing = first_mile_is_changing

    @property
    def first_mile_type(self):
        """Gets the first_mile_type of this WarehouseFirstMileType.  # noqa: E501

        Тип первой мили — `DropOff` или `Pickup`.  # noqa: E501

        :return: The first_mile_type of this WarehouseFirstMileType.  # noqa: E501
        :rtype: str
        """
        return self._first_mile_type

    @first_mile_type.setter
    def first_mile_type(self, first_mile_type):
        """Sets the first_mile_type of this WarehouseFirstMileType.

        Тип первой мили — `DropOff` или `Pickup`.  # noqa: E501

        :param first_mile_type: The first_mile_type of this WarehouseFirstMileType.  # noqa: E501
        :type: str
        """
        allowed_values = ["DropOff", "Pickup", "", "PickUp", "Dropoff", "dropoff", "pickup"]  # noqa: E501
        if first_mile_type not in allowed_values:
            raise ValueError(
                "Invalid value for `first_mile_type` ({0}), must be one of {1}"  # noqa: E501
                .format(first_mile_type, allowed_values)
            )

        self._first_mile_type = first_mile_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WarehouseFirstMileType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WarehouseFirstMileType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
