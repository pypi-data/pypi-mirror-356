# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostingCancelReason(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'is_available_for_cancellation': 'bool',
        'title': 'str',
        'type_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'is_available_for_cancellation': 'is_available_for_cancellation',
        'title': 'title',
        'type_id': 'type_id'
    }

    def __init__(self, id=None, is_available_for_cancellation=None, title=None, type_id=None):  # noqa: E501
        """PostingCancelReason - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_available_for_cancellation = None
        self._title = None
        self._type_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if is_available_for_cancellation is not None:
            self.is_available_for_cancellation = is_available_for_cancellation
        if title is not None:
            self.title = title
        if type_id is not None:
            self.type_id = type_id

    @property
    def id(self):
        """Gets the id of this PostingCancelReason.  # noqa: E501

        Идентификатор причины отмены.   # noqa: E501

        :return: The id of this PostingCancelReason.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostingCancelReason.

        Идентификатор причины отмены.   # noqa: E501

        :param id: The id of this PostingCancelReason.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_available_for_cancellation(self):
        """Gets the is_available_for_cancellation of this PostingCancelReason.  # noqa: E501

        Результат отмены отправления. `true`, если запрос доступен для отмены.  # noqa: E501

        :return: The is_available_for_cancellation of this PostingCancelReason.  # noqa: E501
        :rtype: bool
        """
        return self._is_available_for_cancellation

    @is_available_for_cancellation.setter
    def is_available_for_cancellation(self, is_available_for_cancellation):
        """Sets the is_available_for_cancellation of this PostingCancelReason.

        Результат отмены отправления. `true`, если запрос доступен для отмены.  # noqa: E501

        :param is_available_for_cancellation: The is_available_for_cancellation of this PostingCancelReason.  # noqa: E501
        :type: bool
        """

        self._is_available_for_cancellation = is_available_for_cancellation

    @property
    def title(self):
        """Gets the title of this PostingCancelReason.  # noqa: E501

        Название категории.  # noqa: E501

        :return: The title of this PostingCancelReason.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PostingCancelReason.

        Название категории.  # noqa: E501

        :param title: The title of this PostingCancelReason.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type_id(self):
        """Gets the type_id of this PostingCancelReason.  # noqa: E501

        Инициатор отмены отправления: - `buyer` — покупатель, - `seller` — продавец.   # noqa: E501

        :return: The type_id of this PostingCancelReason.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this PostingCancelReason.

        Инициатор отмены отправления: - `buyer` — покупатель, - `seller` — продавец.   # noqa: E501

        :param type_id: The type_id of this PostingCancelReason.  # noqa: E501
        :type: str
        """

        self._type_id = type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostingCancelReason, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostingCancelReason):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
