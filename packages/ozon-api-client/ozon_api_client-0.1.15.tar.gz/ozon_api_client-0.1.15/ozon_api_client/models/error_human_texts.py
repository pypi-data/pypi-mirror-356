# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ErrorHumanTexts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_name': 'str',
        'description': 'str',
        'hint_code': 'str',
        'message': 'str',
        'params': 'list[HumanTextsParam]',
        'short_description': 'str'
    }

    attribute_map = {
        'attribute_name': 'attribute_name',
        'description': 'description',
        'hint_code': 'hint_code',
        'message': 'message',
        'params': 'params',
        'short_description': 'short_description'
    }

    def __init__(self, attribute_name=None, description=None, hint_code=None, message=None, params=None, short_description=None):  # noqa: E501
        """ErrorHumanTexts - a model defined in Swagger"""  # noqa: E501
        self._attribute_name = None
        self._description = None
        self._hint_code = None
        self._message = None
        self._params = None
        self._short_description = None
        self.discriminator = None
        if attribute_name is not None:
            self.attribute_name = attribute_name
        if description is not None:
            self.description = description
        if hint_code is not None:
            self.hint_code = hint_code
        if message is not None:
            self.message = message
        if params is not None:
            self.params = params
        if short_description is not None:
            self.short_description = short_description

    @property
    def attribute_name(self):
        """Gets the attribute_name of this ErrorHumanTexts.  # noqa: E501

        Название атрибута, в котором произошла ошибка.  # noqa: E501

        :return: The attribute_name of this ErrorHumanTexts.  # noqa: E501
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this ErrorHumanTexts.

        Название атрибута, в котором произошла ошибка.  # noqa: E501

        :param attribute_name: The attribute_name of this ErrorHumanTexts.  # noqa: E501
        :type: str
        """

        self._attribute_name = attribute_name

    @property
    def description(self):
        """Gets the description of this ErrorHumanTexts.  # noqa: E501

        Описание ошибки.  # noqa: E501

        :return: The description of this ErrorHumanTexts.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ErrorHumanTexts.

        Описание ошибки.  # noqa: E501

        :param description: The description of this ErrorHumanTexts.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def hint_code(self):
        """Gets the hint_code of this ErrorHumanTexts.  # noqa: E501

        Код ошибки в системе Ozon.  # noqa: E501

        :return: The hint_code of this ErrorHumanTexts.  # noqa: E501
        :rtype: str
        """
        return self._hint_code

    @hint_code.setter
    def hint_code(self, hint_code):
        """Sets the hint_code of this ErrorHumanTexts.

        Код ошибки в системе Ozon.  # noqa: E501

        :param hint_code: The hint_code of this ErrorHumanTexts.  # noqa: E501
        :type: str
        """

        self._hint_code = hint_code

    @property
    def message(self):
        """Gets the message of this ErrorHumanTexts.  # noqa: E501

        Текст ошибки.  # noqa: E501

        :return: The message of this ErrorHumanTexts.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorHumanTexts.

        Текст ошибки.  # noqa: E501

        :param message: The message of this ErrorHumanTexts.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def params(self):
        """Gets the params of this ErrorHumanTexts.  # noqa: E501

        В каких параметрах допущена ошибка.  # noqa: E501

        :return: The params of this ErrorHumanTexts.  # noqa: E501
        :rtype: list[HumanTextsParam]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ErrorHumanTexts.

        В каких параметрах допущена ошибка.  # noqa: E501

        :param params: The params of this ErrorHumanTexts.  # noqa: E501
        :type: list[HumanTextsParam]
        """

        self._params = params

    @property
    def short_description(self):
        """Gets the short_description of this ErrorHumanTexts.  # noqa: E501

        Краткое описание ошибки.  # noqa: E501

        :return: The short_description of this ErrorHumanTexts.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ErrorHumanTexts.

        Краткое описание ошибки.  # noqa: E501

        :param short_description: The short_description of this ErrorHumanTexts.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorHumanTexts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorHumanTexts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
