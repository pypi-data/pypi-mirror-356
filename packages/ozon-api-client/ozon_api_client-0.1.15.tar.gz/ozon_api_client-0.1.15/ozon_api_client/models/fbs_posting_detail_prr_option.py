# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FbsPostingDetailPrrOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'price': 'str',
        'currency_code': 'str',
        'floor': 'str'
    }

    attribute_map = {
        'code': 'code',
        'price': 'price',
        'currency_code': 'currency_code',
        'floor': 'floor'
    }

    def __init__(self, code=None, price=None, currency_code=None, floor=None):  # noqa: E501
        """FbsPostingDetailPrrOption - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._price = None
        self._currency_code = None
        self._floor = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if price is not None:
            self.price = price
        if currency_code is not None:
            self.currency_code = currency_code
        if floor is not None:
            self.floor = floor

    @property
    def code(self):
        """Gets the code of this FbsPostingDetailPrrOption.  # noqa: E501

        Код услуги погрузочно-разгрузочных работ: - `lift` — подъём на лифте. - `stairs` — подъём по лестнице. - `none` — покупатель отказался от услуги, поднимать товары не нужно. - `delivery_default` — доставка включена в стоимость, по условиям оферты нужно доставить товар на этаж.   # noqa: E501

        :return: The code of this FbsPostingDetailPrrOption.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this FbsPostingDetailPrrOption.

        Код услуги погрузочно-разгрузочных работ: - `lift` — подъём на лифте. - `stairs` — подъём по лестнице. - `none` — покупатель отказался от услуги, поднимать товары не нужно. - `delivery_default` — доставка включена в стоимость, по условиям оферты нужно доставить товар на этаж.   # noqa: E501

        :param code: The code of this FbsPostingDetailPrrOption.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def price(self):
        """Gets the price of this FbsPostingDetailPrrOption.  # noqa: E501

        Стоимость услуги, которую Ozon компенсирует продавцу.  # noqa: E501

        :return: The price of this FbsPostingDetailPrrOption.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this FbsPostingDetailPrrOption.

        Стоимость услуги, которую Ozon компенсирует продавцу.  # noqa: E501

        :param price: The price of this FbsPostingDetailPrrOption.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def currency_code(self):
        """Gets the currency_code of this FbsPostingDetailPrrOption.  # noqa: E501

        Валюта.  # noqa: E501

        :return: The currency_code of this FbsPostingDetailPrrOption.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this FbsPostingDetailPrrOption.

        Валюта.  # noqa: E501

        :param currency_code: The currency_code of this FbsPostingDetailPrrOption.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def floor(self):
        """Gets the floor of this FbsPostingDetailPrrOption.  # noqa: E501

        Этаж, на который нужно поднять товар.  # noqa: E501

        :return: The floor of this FbsPostingDetailPrrOption.  # noqa: E501
        :rtype: str
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this FbsPostingDetailPrrOption.

        Этаж, на который нужно поднять товар.  # noqa: E501

        :param floor: The floor of this FbsPostingDetailPrrOption.  # noqa: E501
        :type: str
        """

        self._floor = floor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FbsPostingDetailPrrOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FbsPostingDetailPrrOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
