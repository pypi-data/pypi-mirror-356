# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuantsV1ListResponseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cursor': 'str',
        'has_next': 'bool',
        'quants': 'list[QuantsV1ListResponseResultQuants]'
    }

    attribute_map = {
        'cursor': 'cursor',
        'has_next': 'has_next',
        'quants': 'quants'
    }

    def __init__(self, cursor=None, has_next=None, quants=None):  # noqa: E501
        """QuantsV1ListResponseResult - a model defined in Swagger"""  # noqa: E501
        self._cursor = None
        self._has_next = None
        self._quants = None
        self.discriminator = None
        if cursor is not None:
            self.cursor = cursor
        if has_next is not None:
            self.has_next = has_next
        if quants is not None:
            self.quants = quants

    @property
    def cursor(self):
        """Gets the cursor of this QuantsV1ListResponseResult.  # noqa: E501

        Указатель для выборки следующих данных.  # noqa: E501

        :return: The cursor of this QuantsV1ListResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this QuantsV1ListResponseResult.

        Указатель для выборки следующих данных.  # noqa: E501

        :param cursor: The cursor of this QuantsV1ListResponseResult.  # noqa: E501
        :type: str
        """

        self._cursor = cursor

    @property
    def has_next(self):
        """Gets the has_next of this QuantsV1ListResponseResult.  # noqa: E501

        Признак, что в ответе вернулась только часть значений: - `true` — сделайте повторный запрос с новым параметром `cursor` для получения остальных значений; - `false` — ответ содержит все значения характеристики.   # noqa: E501

        :return: The has_next of this QuantsV1ListResponseResult.  # noqa: E501
        :rtype: bool
        """
        return self._has_next

    @has_next.setter
    def has_next(self, has_next):
        """Sets the has_next of this QuantsV1ListResponseResult.

        Признак, что в ответе вернулась только часть значений: - `true` — сделайте повторный запрос с новым параметром `cursor` для получения остальных значений; - `false` — ответ содержит все значения характеристики.   # noqa: E501

        :param has_next: The has_next of this QuantsV1ListResponseResult.  # noqa: E501
        :type: bool
        """

        self._has_next = has_next

    @property
    def quants(self):
        """Gets the quants of this QuantsV1ListResponseResult.  # noqa: E501

        Список квантов.  # noqa: E501

        :return: The quants of this QuantsV1ListResponseResult.  # noqa: E501
        :rtype: list[QuantsV1ListResponseResultQuants]
        """
        return self._quants

    @quants.setter
    def quants(self, quants):
        """Sets the quants of this QuantsV1ListResponseResult.

        Список квантов.  # noqa: E501

        :param quants: The quants of this QuantsV1ListResponseResult.  # noqa: E501
        :type: list[QuantsV1ListResponseResultQuants]
        """

        self._quants = quants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuantsV1ListResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuantsV1ListResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
