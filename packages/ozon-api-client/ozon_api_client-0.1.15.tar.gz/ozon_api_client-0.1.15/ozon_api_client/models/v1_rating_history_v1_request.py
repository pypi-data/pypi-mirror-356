# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1RatingHistoryV1Request(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_from': 'datetime',
        'date_to': 'datetime',
        'ratings': 'list[str]',
        'with_premium_scores': 'bool'
    }

    attribute_map = {
        'date_from': 'date_from',
        'date_to': 'date_to',
        'ratings': 'ratings',
        'with_premium_scores': 'with_premium_scores'
    }

    def __init__(self, date_from=None, date_to=None, ratings=None, with_premium_scores=None):  # noqa: E501
        """V1RatingHistoryV1Request - a model defined in Swagger"""  # noqa: E501
        self._date_from = None
        self._date_to = None
        self._ratings = None
        self._with_premium_scores = None
        self.discriminator = None
        if date_from is not None:
            self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to
        self.ratings = ratings
        if with_premium_scores is not None:
            self.with_premium_scores = with_premium_scores

    @property
    def date_from(self):
        """Gets the date_from of this V1RatingHistoryV1Request.  # noqa: E501

        Начало периода.  # noqa: E501

        :return: The date_from of this V1RatingHistoryV1Request.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this V1RatingHistoryV1Request.

        Начало периода.  # noqa: E501

        :param date_from: The date_from of this V1RatingHistoryV1Request.  # noqa: E501
        :type: datetime
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this V1RatingHistoryV1Request.  # noqa: E501

        Конец периода.  # noqa: E501

        :return: The date_to of this V1RatingHistoryV1Request.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this V1RatingHistoryV1Request.

        Конец периода.  # noqa: E501

        :param date_to: The date_to of this V1RatingHistoryV1Request.  # noqa: E501
        :type: datetime
        """

        self._date_to = date_to

    @property
    def ratings(self):
        """Gets the ratings of this V1RatingHistoryV1Request.  # noqa: E501

        Фильтр по рейтингу.  Рейтинги, по которым нужно получить значение за период:  - `rating_on_time` — процент заказов, выполненных вовремя за последние 30 дней. - `rating_review_avg_score_total` — средняя оценка всех товаров. - `rating_price` — индекс цен: отношение стоимости ваших товаров к самой низкой цене на такой же товар на других площадках. - `rating_order_cancellation` — процент отмен FBS-отправлений по вашей вине за последние 7 дней. Текущий и предыдущий день не учитываются. - `rating_shipment_delay` — процент FBS-отправлений, которые за последние 7 дней не были переданы в доставку по вашей вине. Текущий и предыдущий день не учитываются. - `rating_ssl` — оценка работы по FBO. Учитывает `rating_on_time_supply_delivery`, `rating_on_time_supply_cancellation` и `rating_order_accuracy`. - `rating_on_time_supply_delivery` — процент поставок, которые вы привезли на склад в выбранный временной интервал за последние 60 дней. - `rating_order_accuracy` — процент поставок без излишков, недостач, пересорта и брака за последние 60 дней. - `rating_on_time_supply_cancellation` — процент заявок на поставку, которые завершились или были отменены без опоздания за последние 60 дней. - `rating_reaction_time` — время, в течение которого покупатели в среднем ждали ответа на своё первое сообщение в чате за последние 30 дней. - `rating_average_response_time` — время, в течение которого покупатели в среднем ждали вашего ответа за последние 30 дней. - `rating_replied_dialogs_ratio` — доля диалогов хотя бы с одним вашим ответом в течение 24 часов за последние 30 дней.  Если вы хотите получить информацию по начисленным штрафным баллам для рейтингов `rating_on_time` и `rating_review_avg_score_total`, передайте значения нужных рейтингов в этом параметре и `with_premium_scores=true`.   # noqa: E501

        :return: The ratings of this V1RatingHistoryV1Request.  # noqa: E501
        :rtype: list[str]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this V1RatingHistoryV1Request.

        Фильтр по рейтингу.  Рейтинги, по которым нужно получить значение за период:  - `rating_on_time` — процент заказов, выполненных вовремя за последние 30 дней. - `rating_review_avg_score_total` — средняя оценка всех товаров. - `rating_price` — индекс цен: отношение стоимости ваших товаров к самой низкой цене на такой же товар на других площадках. - `rating_order_cancellation` — процент отмен FBS-отправлений по вашей вине за последние 7 дней. Текущий и предыдущий день не учитываются. - `rating_shipment_delay` — процент FBS-отправлений, которые за последние 7 дней не были переданы в доставку по вашей вине. Текущий и предыдущий день не учитываются. - `rating_ssl` — оценка работы по FBO. Учитывает `rating_on_time_supply_delivery`, `rating_on_time_supply_cancellation` и `rating_order_accuracy`. - `rating_on_time_supply_delivery` — процент поставок, которые вы привезли на склад в выбранный временной интервал за последние 60 дней. - `rating_order_accuracy` — процент поставок без излишков, недостач, пересорта и брака за последние 60 дней. - `rating_on_time_supply_cancellation` — процент заявок на поставку, которые завершились или были отменены без опоздания за последние 60 дней. - `rating_reaction_time` — время, в течение которого покупатели в среднем ждали ответа на своё первое сообщение в чате за последние 30 дней. - `rating_average_response_time` — время, в течение которого покупатели в среднем ждали вашего ответа за последние 30 дней. - `rating_replied_dialogs_ratio` — доля диалогов хотя бы с одним вашим ответом в течение 24 часов за последние 30 дней.  Если вы хотите получить информацию по начисленным штрафным баллам для рейтингов `rating_on_time` и `rating_review_avg_score_total`, передайте значения нужных рейтингов в этом параметре и `with_premium_scores=true`.   # noqa: E501

        :param ratings: The ratings of this V1RatingHistoryV1Request.  # noqa: E501
        :type: list[str]
        """
        if ratings is None:
            raise ValueError("Invalid value for `ratings`, must not be `None`")  # noqa: E501

        self._ratings = ratings

    @property
    def with_premium_scores(self):
        """Gets the with_premium_scores of this V1RatingHistoryV1Request.  # noqa: E501

        Признак, что в ответе нужно вернуть информацию о штрафных баллах в Premium-программе.  # noqa: E501

        :return: The with_premium_scores of this V1RatingHistoryV1Request.  # noqa: E501
        :rtype: bool
        """
        return self._with_premium_scores

    @with_premium_scores.setter
    def with_premium_scores(self, with_premium_scores):
        """Sets the with_premium_scores of this V1RatingHistoryV1Request.

        Признак, что в ответе нужно вернуть информацию о штрафных баллах в Premium-программе.  # noqa: E501

        :param with_premium_scores: The with_premium_scores of this V1RatingHistoryV1Request.  # noqa: E501
        :type: bool
        """

        self._with_premium_scores = with_premium_scores

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1RatingHistoryV1Request, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1RatingHistoryV1Request):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
