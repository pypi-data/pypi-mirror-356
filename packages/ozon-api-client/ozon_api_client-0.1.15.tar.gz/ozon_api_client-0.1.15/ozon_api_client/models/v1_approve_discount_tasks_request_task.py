# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1ApproveDiscountTasksRequestTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'approved_price': 'float',
        'seller_comment': 'str',
        'approved_quantity_min': 'int',
        'approved_quantity_max': 'int'
    }

    attribute_map = {
        'id': 'id',
        'approved_price': 'approved_price',
        'seller_comment': 'seller_comment',
        'approved_quantity_min': 'approved_quantity_min',
        'approved_quantity_max': 'approved_quantity_max'
    }

    def __init__(self, id=None, approved_price=None, seller_comment=None, approved_quantity_min=None, approved_quantity_max=None):  # noqa: E501
        """V1ApproveDiscountTasksRequestTask - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._approved_price = None
        self._seller_comment = None
        self._approved_quantity_min = None
        self._approved_quantity_max = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if approved_price is not None:
            self.approved_price = approved_price
        if seller_comment is not None:
            self.seller_comment = seller_comment
        if approved_quantity_min is not None:
            self.approved_quantity_min = approved_quantity_min
        if approved_quantity_max is not None:
            self.approved_quantity_max = approved_quantity_max

    @property
    def id(self):
        """Gets the id of this V1ApproveDiscountTasksRequestTask.  # noqa: E501

        Идентификатор заявки.  # noqa: E501

        :return: The id of this V1ApproveDiscountTasksRequestTask.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1ApproveDiscountTasksRequestTask.

        Идентификатор заявки.  # noqa: E501

        :param id: The id of this V1ApproveDiscountTasksRequestTask.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def approved_price(self):
        """Gets the approved_price of this V1ApproveDiscountTasksRequestTask.  # noqa: E501

        Согласованная цена.  # noqa: E501

        :return: The approved_price of this V1ApproveDiscountTasksRequestTask.  # noqa: E501
        :rtype: float
        """
        return self._approved_price

    @approved_price.setter
    def approved_price(self, approved_price):
        """Sets the approved_price of this V1ApproveDiscountTasksRequestTask.

        Согласованная цена.  # noqa: E501

        :param approved_price: The approved_price of this V1ApproveDiscountTasksRequestTask.  # noqa: E501
        :type: float
        """

        self._approved_price = approved_price

    @property
    def seller_comment(self):
        """Gets the seller_comment of this V1ApproveDiscountTasksRequestTask.  # noqa: E501

        Комментарий продавца к заявке.  # noqa: E501

        :return: The seller_comment of this V1ApproveDiscountTasksRequestTask.  # noqa: E501
        :rtype: str
        """
        return self._seller_comment

    @seller_comment.setter
    def seller_comment(self, seller_comment):
        """Sets the seller_comment of this V1ApproveDiscountTasksRequestTask.

        Комментарий продавца к заявке.  # noqa: E501

        :param seller_comment: The seller_comment of this V1ApproveDiscountTasksRequestTask.  # noqa: E501
        :type: str
        """

        self._seller_comment = seller_comment

    @property
    def approved_quantity_min(self):
        """Gets the approved_quantity_min of this V1ApproveDiscountTasksRequestTask.  # noqa: E501

        Одобренное минимальное количество товаров.  # noqa: E501

        :return: The approved_quantity_min of this V1ApproveDiscountTasksRequestTask.  # noqa: E501
        :rtype: int
        """
        return self._approved_quantity_min

    @approved_quantity_min.setter
    def approved_quantity_min(self, approved_quantity_min):
        """Sets the approved_quantity_min of this V1ApproveDiscountTasksRequestTask.

        Одобренное минимальное количество товаров.  # noqa: E501

        :param approved_quantity_min: The approved_quantity_min of this V1ApproveDiscountTasksRequestTask.  # noqa: E501
        :type: int
        """

        self._approved_quantity_min = approved_quantity_min

    @property
    def approved_quantity_max(self):
        """Gets the approved_quantity_max of this V1ApproveDiscountTasksRequestTask.  # noqa: E501

        Одобренное максимальное количество товаров.  # noqa: E501

        :return: The approved_quantity_max of this V1ApproveDiscountTasksRequestTask.  # noqa: E501
        :rtype: int
        """
        return self._approved_quantity_max

    @approved_quantity_max.setter
    def approved_quantity_max(self, approved_quantity_max):
        """Sets the approved_quantity_max of this V1ApproveDiscountTasksRequestTask.

        Одобренное максимальное количество товаров.  # noqa: E501

        :param approved_quantity_max: The approved_quantity_max of this V1ApproveDiscountTasksRequestTask.  # noqa: E501
        :type: int
        """

        self._approved_quantity_max = approved_quantity_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ApproveDiscountTasksRequestTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ApproveDiscountTasksRequestTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
