# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1AnalyticsTurnoverStocksResponseItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ads': 'float',
        'current_stock': 'int',
        'idc': 'float',
        'idc_grade': 'str',
        'name': 'str',
        'offer_id': 'str',
        'sku': 'int',
        'turnover': 'float',
        'turnover_grade': 'str'
    }

    attribute_map = {
        'ads': 'ads',
        'current_stock': 'current_stock',
        'idc': 'idc',
        'idc_grade': 'idc_grade',
        'name': 'name',
        'offer_id': 'offer_id',
        'sku': 'sku',
        'turnover': 'turnover',
        'turnover_grade': 'turnover_grade'
    }

    def __init__(self, ads=None, current_stock=None, idc=None, idc_grade='GRADES_NONE', name=None, offer_id=None, sku=None, turnover=None, turnover_grade='GRADES_NONE'):  # noqa: E501
        """V1AnalyticsTurnoverStocksResponseItem - a model defined in Swagger"""  # noqa: E501
        self._ads = None
        self._current_stock = None
        self._idc = None
        self._idc_grade = None
        self._name = None
        self._offer_id = None
        self._sku = None
        self._turnover = None
        self._turnover_grade = None
        self.discriminator = None
        if ads is not None:
            self.ads = ads
        if current_stock is not None:
            self.current_stock = current_stock
        if idc is not None:
            self.idc = idc
        if idc_grade is not None:
            self.idc_grade = idc_grade
        if name is not None:
            self.name = name
        if offer_id is not None:
            self.offer_id = offer_id
        if sku is not None:
            self.sku = sku
        if turnover is not None:
            self.turnover = turnover
        if turnover_grade is not None:
            self.turnover_grade = turnover_grade

    @property
    def ads(self):
        """Gets the ads of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501

        Среднесуточное количество проданных единиц товара за последние 60 дней.  # noqa: E501

        :return: The ads of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :rtype: float
        """
        return self._ads

    @ads.setter
    def ads(self, ads):
        """Sets the ads of this V1AnalyticsTurnoverStocksResponseItem.

        Среднесуточное количество проданных единиц товара за последние 60 дней.  # noqa: E501

        :param ads: The ads of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :type: float
        """

        self._ads = ads

    @property
    def current_stock(self):
        """Gets the current_stock of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501

        Остаток товара, шт.  # noqa: E501

        :return: The current_stock of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._current_stock

    @current_stock.setter
    def current_stock(self, current_stock):
        """Sets the current_stock of this V1AnalyticsTurnoverStocksResponseItem.

        Остаток товара, шт.  # noqa: E501

        :param current_stock: The current_stock of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :type: int
        """

        self._current_stock = current_stock

    @property
    def idc(self):
        """Gets the idc of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501

        На сколько дней хватит остатка товара с учётом среднесуточных продаж.  # noqa: E501

        :return: The idc of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :rtype: float
        """
        return self._idc

    @idc.setter
    def idc(self, idc):
        """Sets the idc of this V1AnalyticsTurnoverStocksResponseItem.

        На сколько дней хватит остатка товара с учётом среднесуточных продаж.  # noqa: E501

        :param idc: The idc of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :type: float
        """

        self._idc = idc

    @property
    def idc_grade(self):
        """Gets the idc_grade of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501

        Уровень остатка товара: - `GRADES_NONE` — ожидаются поставки; - `GRADES_NOSALES` — нет продаж; - `GRADES_GREEN` — зелёный, «хороший»; - `GRADES_YELLOW` — жёлтый, «средний»; - `GRADES_RED` — красный, «плохой»; - `GRADES_CRITICAL` — критический.   # noqa: E501

        :return: The idc_grade of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._idc_grade

    @idc_grade.setter
    def idc_grade(self, idc_grade):
        """Sets the idc_grade of this V1AnalyticsTurnoverStocksResponseItem.

        Уровень остатка товара: - `GRADES_NONE` — ожидаются поставки; - `GRADES_NOSALES` — нет продаж; - `GRADES_GREEN` — зелёный, «хороший»; - `GRADES_YELLOW` — жёлтый, «средний»; - `GRADES_RED` — красный, «плохой»; - `GRADES_CRITICAL` — критический.   # noqa: E501

        :param idc_grade: The idc_grade of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["GRADES_NONE", "GRADES_NOSALES", "GRADES_GREEN", "GRADES_YELLOW", "GRADES_RED", "GRADES_CRITICAL"]  # noqa: E501
        if idc_grade not in allowed_values:
            raise ValueError(
                "Invalid value for `idc_grade` ({0}), must be one of {1}"  # noqa: E501
                .format(idc_grade, allowed_values)
            )

        self._idc_grade = idc_grade

    @property
    def name(self):
        """Gets the name of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501

        Название товара.  # noqa: E501

        :return: The name of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1AnalyticsTurnoverStocksResponseItem.

        Название товара.  # noqa: E501

        :param name: The name of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def offer_id(self):
        """Gets the offer_id of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :return: The offer_id of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this V1AnalyticsTurnoverStocksResponseItem.

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :param offer_id: The offer_id of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def sku(self):
        """Gets the sku of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :return: The sku of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this V1AnalyticsTurnoverStocksResponseItem.

        Идентификатор товара в системе Ozon — SKU.  # noqa: E501

        :param sku: The sku of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :type: int
        """

        self._sku = sku

    @property
    def turnover(self):
        """Gets the turnover of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501

        Фактическая оборачиваемость в днях.  # noqa: E501

        :return: The turnover of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :rtype: float
        """
        return self._turnover

    @turnover.setter
    def turnover(self, turnover):
        """Sets the turnover of this V1AnalyticsTurnoverStocksResponseItem.

        Фактическая оборачиваемость в днях.  # noqa: E501

        :param turnover: The turnover of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :type: float
        """

        self._turnover = turnover

    @property
    def turnover_grade(self):
        """Gets the turnover_grade of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501

        Уровень оборачиваемости: - `GRADES_NONE` — ожидаются поставки; - `GRADES_NOSALES` — нет продаж; - `GRADES_GREEN` — зелёный, «хороший»; - `GRADES_YELLOW` — жёлтый, «средний»; - `GRADES_RED` — красный, «плохой»; - `GRADES_CRITICAL` — критический.   # noqa: E501

        :return: The turnover_grade of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._turnover_grade

    @turnover_grade.setter
    def turnover_grade(self, turnover_grade):
        """Sets the turnover_grade of this V1AnalyticsTurnoverStocksResponseItem.

        Уровень оборачиваемости: - `GRADES_NONE` — ожидаются поставки; - `GRADES_NOSALES` — нет продаж; - `GRADES_GREEN` — зелёный, «хороший»; - `GRADES_YELLOW` — жёлтый, «средний»; - `GRADES_RED` — красный, «плохой»; - `GRADES_CRITICAL` — критический.   # noqa: E501

        :param turnover_grade: The turnover_grade of this V1AnalyticsTurnoverStocksResponseItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["GRADES_NONE", "GRADES_NOSALES", "GRADES_GREEN", "GRADES_YELLOW", "GRADES_RED", "GRADES_CRITICAL"]  # noqa: E501
        if turnover_grade not in allowed_values:
            raise ValueError(
                "Invalid value for `turnover_grade` ({0}), must be one of {1}"  # noqa: E501
                .format(turnover_grade, allowed_values)
            )

        self._turnover_grade = turnover_grade

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AnalyticsTurnoverStocksResponseItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AnalyticsTurnoverStocksResponseItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
