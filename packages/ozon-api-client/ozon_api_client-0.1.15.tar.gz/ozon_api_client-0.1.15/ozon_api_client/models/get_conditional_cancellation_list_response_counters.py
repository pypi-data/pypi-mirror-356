# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetConditionalCancellationListResponseCounters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'on_approval': 'int',
        'approved': 'int',
        'rejected': 'int'
    }

    attribute_map = {
        'on_approval': 'on_approval',
        'approved': 'approved',
        'rejected': 'rejected'
    }

    def __init__(self, on_approval=None, approved=None, rejected=None):  # noqa: E501
        """GetConditionalCancellationListResponseCounters - a model defined in Swagger"""  # noqa: E501
        self._on_approval = None
        self._approved = None
        self._rejected = None
        self.discriminator = None
        if on_approval is not None:
            self.on_approval = on_approval
        if approved is not None:
            self.approved = approved
        if rejected is not None:
            self.rejected = rejected

    @property
    def on_approval(self):
        """Gets the on_approval of this GetConditionalCancellationListResponseCounters.  # noqa: E501

        Количество заявок на рассмотрении.  # noqa: E501

        :return: The on_approval of this GetConditionalCancellationListResponseCounters.  # noqa: E501
        :rtype: int
        """
        return self._on_approval

    @on_approval.setter
    def on_approval(self, on_approval):
        """Sets the on_approval of this GetConditionalCancellationListResponseCounters.

        Количество заявок на рассмотрении.  # noqa: E501

        :param on_approval: The on_approval of this GetConditionalCancellationListResponseCounters.  # noqa: E501
        :type: int
        """

        self._on_approval = on_approval

    @property
    def approved(self):
        """Gets the approved of this GetConditionalCancellationListResponseCounters.  # noqa: E501

        Количество подтверждённых заявок.  # noqa: E501

        :return: The approved of this GetConditionalCancellationListResponseCounters.  # noqa: E501
        :rtype: int
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this GetConditionalCancellationListResponseCounters.

        Количество подтверждённых заявок.  # noqa: E501

        :param approved: The approved of this GetConditionalCancellationListResponseCounters.  # noqa: E501
        :type: int
        """

        self._approved = approved

    @property
    def rejected(self):
        """Gets the rejected of this GetConditionalCancellationListResponseCounters.  # noqa: E501

        Количество отклонённых заявок.  # noqa: E501

        :return: The rejected of this GetConditionalCancellationListResponseCounters.  # noqa: E501
        :rtype: int
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """Sets the rejected of this GetConditionalCancellationListResponseCounters.

        Количество отклонённых заявок.  # noqa: E501

        :param rejected: The rejected of this GetConditionalCancellationListResponseCounters.  # noqa: E501
        :type: int
        """

        self._rejected = rejected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetConditionalCancellationListResponseCounters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetConditionalCancellationListResponseCounters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
