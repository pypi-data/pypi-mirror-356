# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Productv2GetProductInfoResponseCommissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delivery_amount': 'float',
        'percent': 'float',
        'return_amount': 'float',
        'sale_schema': 'str',
        'value': 'float'
    }

    attribute_map = {
        'delivery_amount': 'deliveryAmount',
        'percent': 'percent',
        'return_amount': 'returnAmount',
        'sale_schema': 'saleSchema',
        'value': 'value'
    }

    def __init__(self, delivery_amount=None, percent=None, return_amount=None, sale_schema=None, value=None):  # noqa: E501
        """Productv2GetProductInfoResponseCommissions - a model defined in Swagger"""  # noqa: E501
        self._delivery_amount = None
        self._percent = None
        self._return_amount = None
        self._sale_schema = None
        self._value = None
        self.discriminator = None
        if delivery_amount is not None:
            self.delivery_amount = delivery_amount
        if percent is not None:
            self.percent = percent
        if return_amount is not None:
            self.return_amount = return_amount
        if sale_schema is not None:
            self.sale_schema = sale_schema
        if value is not None:
            self.value = value

    @property
    def delivery_amount(self):
        """Gets the delivery_amount of this Productv2GetProductInfoResponseCommissions.  # noqa: E501

        Стоимость доставки.  # noqa: E501

        :return: The delivery_amount of this Productv2GetProductInfoResponseCommissions.  # noqa: E501
        :rtype: float
        """
        return self._delivery_amount

    @delivery_amount.setter
    def delivery_amount(self, delivery_amount):
        """Sets the delivery_amount of this Productv2GetProductInfoResponseCommissions.

        Стоимость доставки.  # noqa: E501

        :param delivery_amount: The delivery_amount of this Productv2GetProductInfoResponseCommissions.  # noqa: E501
        :type: float
        """

        self._delivery_amount = delivery_amount

    @property
    def percent(self):
        """Gets the percent of this Productv2GetProductInfoResponseCommissions.  # noqa: E501

        Процент комиссии.  # noqa: E501

        :return: The percent of this Productv2GetProductInfoResponseCommissions.  # noqa: E501
        :rtype: float
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this Productv2GetProductInfoResponseCommissions.

        Процент комиссии.  # noqa: E501

        :param percent: The percent of this Productv2GetProductInfoResponseCommissions.  # noqa: E501
        :type: float
        """

        self._percent = percent

    @property
    def return_amount(self):
        """Gets the return_amount of this Productv2GetProductInfoResponseCommissions.  # noqa: E501

        Стоимость возврата.  # noqa: E501

        :return: The return_amount of this Productv2GetProductInfoResponseCommissions.  # noqa: E501
        :rtype: float
        """
        return self._return_amount

    @return_amount.setter
    def return_amount(self, return_amount):
        """Sets the return_amount of this Productv2GetProductInfoResponseCommissions.

        Стоимость возврата.  # noqa: E501

        :param return_amount: The return_amount of this Productv2GetProductInfoResponseCommissions.  # noqa: E501
        :type: float
        """

        self._return_amount = return_amount

    @property
    def sale_schema(self):
        """Gets the sale_schema of this Productv2GetProductInfoResponseCommissions.  # noqa: E501

        Схема продажи.  # noqa: E501

        :return: The sale_schema of this Productv2GetProductInfoResponseCommissions.  # noqa: E501
        :rtype: str
        """
        return self._sale_schema

    @sale_schema.setter
    def sale_schema(self, sale_schema):
        """Sets the sale_schema of this Productv2GetProductInfoResponseCommissions.

        Схема продажи.  # noqa: E501

        :param sale_schema: The sale_schema of this Productv2GetProductInfoResponseCommissions.  # noqa: E501
        :type: str
        """

        self._sale_schema = sale_schema

    @property
    def value(self):
        """Gets the value of this Productv2GetProductInfoResponseCommissions.  # noqa: E501

        Сумма комиссии.  # noqa: E501

        :return: The value of this Productv2GetProductInfoResponseCommissions.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Productv2GetProductInfoResponseCommissions.

        Сумма комиссии.  # noqa: E501

        :param value: The value of this Productv2GetProductInfoResponseCommissions.  # noqa: E501
        :type: float
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Productv2GetProductInfoResponseCommissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Productv2GetProductInfoResponseCommissions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
