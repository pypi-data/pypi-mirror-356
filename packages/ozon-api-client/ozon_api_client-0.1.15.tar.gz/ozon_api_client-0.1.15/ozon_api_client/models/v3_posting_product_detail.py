# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3PostingProductDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dimensions': 'V3Dimensions',
        'mandatory_mark': 'list[str]',
        'name': 'str',
        'offer_id': 'str',
        'price': 'str',
        'jw_uin': 'ArrayOfStrings',
        'currency_code': 'str',
        'quantity': 'int',
        'sku': 'int'
    }

    attribute_map = {
        'dimensions': 'dimensions',
        'mandatory_mark': 'mandatory_mark',
        'name': 'name',
        'offer_id': 'offer_id',
        'price': 'price',
        'jw_uin': 'jw_uin',
        'currency_code': 'currency_code',
        'quantity': 'quantity',
        'sku': 'sku'
    }

    def __init__(self, dimensions=None, mandatory_mark=None, name=None, offer_id=None, price=None, jw_uin=None, currency_code=None, quantity=None, sku=None):  # noqa: E501
        """V3PostingProductDetail - a model defined in Swagger"""  # noqa: E501
        self._dimensions = None
        self._mandatory_mark = None
        self._name = None
        self._offer_id = None
        self._price = None
        self._jw_uin = None
        self._currency_code = None
        self._quantity = None
        self._sku = None
        self.discriminator = None
        if dimensions is not None:
            self.dimensions = dimensions
        if mandatory_mark is not None:
            self.mandatory_mark = mandatory_mark
        if name is not None:
            self.name = name
        if offer_id is not None:
            self.offer_id = offer_id
        if price is not None:
            self.price = price
        if jw_uin is not None:
            self.jw_uin = jw_uin
        if currency_code is not None:
            self.currency_code = currency_code
        if quantity is not None:
            self.quantity = quantity
        if sku is not None:
            self.sku = sku

    @property
    def dimensions(self):
        """Gets the dimensions of this V3PostingProductDetail.  # noqa: E501


        :return: The dimensions of this V3PostingProductDetail.  # noqa: E501
        :rtype: V3Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this V3PostingProductDetail.


        :param dimensions: The dimensions of this V3PostingProductDetail.  # noqa: E501
        :type: V3Dimensions
        """

        self._dimensions = dimensions

    @property
    def mandatory_mark(self):
        """Gets the mandatory_mark of this V3PostingProductDetail.  # noqa: E501

        Обязательная маркировка товара.  # noqa: E501

        :return: The mandatory_mark of this V3PostingProductDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._mandatory_mark

    @mandatory_mark.setter
    def mandatory_mark(self, mandatory_mark):
        """Sets the mandatory_mark of this V3PostingProductDetail.

        Обязательная маркировка товара.  # noqa: E501

        :param mandatory_mark: The mandatory_mark of this V3PostingProductDetail.  # noqa: E501
        :type: list[str]
        """

        self._mandatory_mark = mandatory_mark

    @property
    def name(self):
        """Gets the name of this V3PostingProductDetail.  # noqa: E501

        Название.  # noqa: E501

        :return: The name of this V3PostingProductDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V3PostingProductDetail.

        Название.  # noqa: E501

        :param name: The name of this V3PostingProductDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def offer_id(self):
        """Gets the offer_id of this V3PostingProductDetail.  # noqa: E501

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :return: The offer_id of this V3PostingProductDetail.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this V3PostingProductDetail.

        Идентификатор товара в системе продавца — артикул.  # noqa: E501

        :param offer_id: The offer_id of this V3PostingProductDetail.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def price(self):
        """Gets the price of this V3PostingProductDetail.  # noqa: E501

        Цена товара с учётом скидок — это значение показывается на карточке товара.  # noqa: E501

        :return: The price of this V3PostingProductDetail.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this V3PostingProductDetail.

        Цена товара с учётом скидок — это значение показывается на карточке товара.  # noqa: E501

        :param price: The price of this V3PostingProductDetail.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def jw_uin(self):
        """Gets the jw_uin of this V3PostingProductDetail.  # noqa: E501

        Уникальный идентификационный номер (УИН) ювелирного изделия.  # noqa: E501

        :return: The jw_uin of this V3PostingProductDetail.  # noqa: E501
        :rtype: ArrayOfStrings
        """
        return self._jw_uin

    @jw_uin.setter
    def jw_uin(self, jw_uin):
        """Sets the jw_uin of this V3PostingProductDetail.

        Уникальный идентификационный номер (УИН) ювелирного изделия.  # noqa: E501

        :param jw_uin: The jw_uin of this V3PostingProductDetail.  # noqa: E501
        :type: ArrayOfStrings
        """

        self._jw_uin = jw_uin

    @property
    def currency_code(self):
        """Gets the currency_code of this V3PostingProductDetail.  # noqa: E501

        Валюта ваших цен. Совпадает с валютой, которая установлена в настройках личного кабинета.  Возможные значения:    - `RUB` — российский рубль,   - `BYN` — белорусский рубль,   - `KZT` — тенге,   - `EUR` — евро,   - `USD` — доллар США,   - `CNY` — юань.   # noqa: E501

        :return: The currency_code of this V3PostingProductDetail.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this V3PostingProductDetail.

        Валюта ваших цен. Совпадает с валютой, которая установлена в настройках личного кабинета.  Возможные значения:    - `RUB` — российский рубль,   - `BYN` — белорусский рубль,   - `KZT` — тенге,   - `EUR` — евро,   - `USD` — доллар США,   - `CNY` — юань.   # noqa: E501

        :param currency_code: The currency_code of this V3PostingProductDetail.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def quantity(self):
        """Gets the quantity of this V3PostingProductDetail.  # noqa: E501

        Количество товара.  # noqa: E501

        :return: The quantity of this V3PostingProductDetail.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this V3PostingProductDetail.

        Количество товара.  # noqa: E501

        :param quantity: The quantity of this V3PostingProductDetail.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def sku(self):
        """Gets the sku of this V3PostingProductDetail.  # noqa: E501

        Идентификатор товара на Ozon.  # noqa: E501

        :return: The sku of this V3PostingProductDetail.  # noqa: E501
        :rtype: int
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this V3PostingProductDetail.

        Идентификатор товара на Ozon.  # noqa: E501

        :param sku: The sku of this V3PostingProductDetail.  # noqa: E501
        :type: int
        """

        self._sku = sku

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3PostingProductDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3PostingProductDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
