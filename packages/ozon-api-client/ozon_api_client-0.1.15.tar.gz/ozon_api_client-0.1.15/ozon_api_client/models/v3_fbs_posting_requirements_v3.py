# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V3FbsPostingRequirementsV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'products_requiring_gtd': 'list[str]',
        'products_requiring_country': 'list[str]',
        'products_requiring_mandatory_mark': 'list[str]',
        'products_requiring_jw_uin': 'list[str]',
        'products_requiring_rnpt': 'list[str]'
    }

    attribute_map = {
        'products_requiring_gtd': 'products_requiring_gtd',
        'products_requiring_country': 'products_requiring_country',
        'products_requiring_mandatory_mark': 'products_requiring_mandatory_mark',
        'products_requiring_jw_uin': 'products_requiring_jw_uin',
        'products_requiring_rnpt': 'products_requiring_rnpt'
    }

    def __init__(self, products_requiring_gtd=None, products_requiring_country=None, products_requiring_mandatory_mark=None, products_requiring_jw_uin=None, products_requiring_rnpt=None):  # noqa: E501
        """V3FbsPostingRequirementsV3 - a model defined in Swagger"""  # noqa: E501
        self._products_requiring_gtd = None
        self._products_requiring_country = None
        self._products_requiring_mandatory_mark = None
        self._products_requiring_jw_uin = None
        self._products_requiring_rnpt = None
        self.discriminator = None
        if products_requiring_gtd is not None:
            self.products_requiring_gtd = products_requiring_gtd
        if products_requiring_country is not None:
            self.products_requiring_country = products_requiring_country
        if products_requiring_mandatory_mark is not None:
            self.products_requiring_mandatory_mark = products_requiring_mandatory_mark
        if products_requiring_jw_uin is not None:
            self.products_requiring_jw_uin = products_requiring_jw_uin
        if products_requiring_rnpt is not None:
            self.products_requiring_rnpt = products_requiring_rnpt

    @property
    def products_requiring_gtd(self):
        """Gets the products_requiring_gtd of this V3FbsPostingRequirementsV3.  # noqa: E501

        Список идентификаторов товаров (SKU), для которых нужно передать номера таможенной декларации (ГТД).  Для сборки отправления передайте для всех перечисленных товаров номер таможенной декларации или информацию о том, что номера нет, с помощью метода [/v3/posting/fbs/ship/package](#operation/PostingAPI_PackageShipFbsPostingV3) или [/v3/posting/fbs/ship](#operation/PostingAPI_ShipFbsPostingV3).   # noqa: E501

        :return: The products_requiring_gtd of this V3FbsPostingRequirementsV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._products_requiring_gtd

    @products_requiring_gtd.setter
    def products_requiring_gtd(self, products_requiring_gtd):
        """Sets the products_requiring_gtd of this V3FbsPostingRequirementsV3.

        Список идентификаторов товаров (SKU), для которых нужно передать номера таможенной декларации (ГТД).  Для сборки отправления передайте для всех перечисленных товаров номер таможенной декларации или информацию о том, что номера нет, с помощью метода [/v3/posting/fbs/ship/package](#operation/PostingAPI_PackageShipFbsPostingV3) или [/v3/posting/fbs/ship](#operation/PostingAPI_ShipFbsPostingV3).   # noqa: E501

        :param products_requiring_gtd: The products_requiring_gtd of this V3FbsPostingRequirementsV3.  # noqa: E501
        :type: list[str]
        """

        self._products_requiring_gtd = products_requiring_gtd

    @property
    def products_requiring_country(self):
        """Gets the products_requiring_country of this V3FbsPostingRequirementsV3.  # noqa: E501

        Список идентификаторов товаров (SKU), для которых нужно передать информацию о стране-изготовителе.  Для сборки отправления передайте информацию о стране-изготовителе для всех перечисленных товаров с помощью метода [/v2/posting/fbs/product/country/set](#operation/PostingAPI_SetCountryProductFbsPostingV2).   # noqa: E501

        :return: The products_requiring_country of this V3FbsPostingRequirementsV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._products_requiring_country

    @products_requiring_country.setter
    def products_requiring_country(self, products_requiring_country):
        """Sets the products_requiring_country of this V3FbsPostingRequirementsV3.

        Список идентификаторов товаров (SKU), для которых нужно передать информацию о стране-изготовителе.  Для сборки отправления передайте информацию о стране-изготовителе для всех перечисленных товаров с помощью метода [/v2/posting/fbs/product/country/set](#operation/PostingAPI_SetCountryProductFbsPostingV2).   # noqa: E501

        :param products_requiring_country: The products_requiring_country of this V3FbsPostingRequirementsV3.  # noqa: E501
        :type: list[str]
        """

        self._products_requiring_country = products_requiring_country

    @property
    def products_requiring_mandatory_mark(self):
        """Gets the products_requiring_mandatory_mark of this V3FbsPostingRequirementsV3.  # noqa: E501

        Список идентификаторов товаров (SKU), для которых нужно передать маркировку «Честный ЗНАК».   # noqa: E501

        :return: The products_requiring_mandatory_mark of this V3FbsPostingRequirementsV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._products_requiring_mandatory_mark

    @products_requiring_mandatory_mark.setter
    def products_requiring_mandatory_mark(self, products_requiring_mandatory_mark):
        """Sets the products_requiring_mandatory_mark of this V3FbsPostingRequirementsV3.

        Список идентификаторов товаров (SKU), для которых нужно передать маркировку «Честный ЗНАК».   # noqa: E501

        :param products_requiring_mandatory_mark: The products_requiring_mandatory_mark of this V3FbsPostingRequirementsV3.  # noqa: E501
        :type: list[str]
        """

        self._products_requiring_mandatory_mark = products_requiring_mandatory_mark

    @property
    def products_requiring_jw_uin(self):
        """Gets the products_requiring_jw_uin of this V3FbsPostingRequirementsV3.  # noqa: E501

        Список товаров, для которых нужно передать уникальный идентификационный номер (УИН) ювелирного изделия.  # noqa: E501

        :return: The products_requiring_jw_uin of this V3FbsPostingRequirementsV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._products_requiring_jw_uin

    @products_requiring_jw_uin.setter
    def products_requiring_jw_uin(self, products_requiring_jw_uin):
        """Sets the products_requiring_jw_uin of this V3FbsPostingRequirementsV3.

        Список товаров, для которых нужно передать уникальный идентификационный номер (УИН) ювелирного изделия.  # noqa: E501

        :param products_requiring_jw_uin: The products_requiring_jw_uin of this V3FbsPostingRequirementsV3.  # noqa: E501
        :type: list[str]
        """

        self._products_requiring_jw_uin = products_requiring_jw_uin

    @property
    def products_requiring_rnpt(self):
        """Gets the products_requiring_rnpt of this V3FbsPostingRequirementsV3.  # noqa: E501

        Список идентификаторов товаров (SKU), для которых нужно передать регистрационный номер партии товара (РНПТ).   # noqa: E501

        :return: The products_requiring_rnpt of this V3FbsPostingRequirementsV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._products_requiring_rnpt

    @products_requiring_rnpt.setter
    def products_requiring_rnpt(self, products_requiring_rnpt):
        """Sets the products_requiring_rnpt of this V3FbsPostingRequirementsV3.

        Список идентификаторов товаров (SKU), для которых нужно передать регистрационный номер партии товара (РНПТ).   # noqa: E501

        :param products_requiring_rnpt: The products_requiring_rnpt of this V3FbsPostingRequirementsV3.  # noqa: E501
        :type: list[str]
        """

        self._products_requiring_rnpt = products_requiring_rnpt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V3FbsPostingRequirementsV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3FbsPostingRequirementsV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
