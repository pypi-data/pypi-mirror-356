# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DetailsDeliveryDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'float',
        'amount': 'float',
        'delivery_services': 'DetailsServices'
    }

    attribute_map = {
        'total': 'total',
        'amount': 'amount',
        'delivery_services': 'delivery_services'
    }

    def __init__(self, total=None, amount=None, delivery_services=None):  # noqa: E501
        """DetailsDeliveryDetails - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._amount = None
        self._delivery_services = None
        self.discriminator = None
        if total is not None:
            self.total = total
        if amount is not None:
            self.amount = amount
        if delivery_services is not None:
            self.delivery_services = delivery_services

    @property
    def total(self):
        """Gets the total of this DetailsDeliveryDetails.  # noqa: E501

        Общая сумма.  # noqa: E501

        :return: The total of this DetailsDeliveryDetails.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DetailsDeliveryDetails.

        Общая сумма.  # noqa: E501

        :param total: The total of this DetailsDeliveryDetails.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def amount(self):
        """Gets the amount of this DetailsDeliveryDetails.  # noqa: E501

        Сумма, на которую выкуплено товаров с учётом комиссий.  # noqa: E501

        :return: The amount of this DetailsDeliveryDetails.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DetailsDeliveryDetails.

        Сумма, на которую выкуплено товаров с учётом комиссий.  # noqa: E501

        :param amount: The amount of this DetailsDeliveryDetails.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def delivery_services(self):
        """Gets the delivery_services of this DetailsDeliveryDetails.  # noqa: E501


        :return: The delivery_services of this DetailsDeliveryDetails.  # noqa: E501
        :rtype: DetailsServices
        """
        return self._delivery_services

    @delivery_services.setter
    def delivery_services(self, delivery_services):
        """Sets the delivery_services of this DetailsDeliveryDetails.


        :param delivery_services: The delivery_services of this DetailsDeliveryDetails.  # noqa: E501
        :type: DetailsServices
        """

        self._delivery_services = delivery_services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetailsDeliveryDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailsDeliveryDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
