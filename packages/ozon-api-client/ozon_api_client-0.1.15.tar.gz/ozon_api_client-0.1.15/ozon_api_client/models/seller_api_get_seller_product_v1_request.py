# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SellerApiGetSellerProductV1Request(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_id': 'float',
        'limit': 'float',
        'offset': 'float'
    }

    attribute_map = {
        'action_id': 'action_id',
        'limit': 'limit',
        'offset': 'offset'
    }

    def __init__(self, action_id=None, limit=None, offset=None):  # noqa: E501
        """SellerApiGetSellerProductV1Request - a model defined in Swagger"""  # noqa: E501
        self._action_id = None
        self._limit = None
        self._offset = None
        self.discriminator = None
        if action_id is not None:
            self.action_id = action_id
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset

    @property
    def action_id(self):
        """Gets the action_id of this SellerApiGetSellerProductV1Request.  # noqa: E501

        Идентификатор акции.  # noqa: E501

        :return: The action_id of this SellerApiGetSellerProductV1Request.  # noqa: E501
        :rtype: float
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this SellerApiGetSellerProductV1Request.

        Идентификатор акции.  # noqa: E501

        :param action_id: The action_id of this SellerApiGetSellerProductV1Request.  # noqa: E501
        :type: float
        """

        self._action_id = action_id

    @property
    def limit(self):
        """Gets the limit of this SellerApiGetSellerProductV1Request.  # noqa: E501

        Количество ответов на странице. По умолчанию — 100.  # noqa: E501

        :return: The limit of this SellerApiGetSellerProductV1Request.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SellerApiGetSellerProductV1Request.

        Количество ответов на странице. По умолчанию — 100.  # noqa: E501

        :param limit: The limit of this SellerApiGetSellerProductV1Request.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this SellerApiGetSellerProductV1Request.  # noqa: E501

        Количество элементов, которое будет пропущено в ответе. Например, если `offset=10`, ответ начнётся с 11-го найденного элемента.  # noqa: E501

        :return: The offset of this SellerApiGetSellerProductV1Request.  # noqa: E501
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SellerApiGetSellerProductV1Request.

        Количество элементов, которое будет пропущено в ответе. Например, если `offset=10`, ответ начнётся с 11-го найденного элемента.  # noqa: E501

        :param offset: The offset of this SellerApiGetSellerProductV1Request.  # noqa: E501
        :type: float
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SellerApiGetSellerProductV1Request, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SellerApiGetSellerProductV1Request):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
