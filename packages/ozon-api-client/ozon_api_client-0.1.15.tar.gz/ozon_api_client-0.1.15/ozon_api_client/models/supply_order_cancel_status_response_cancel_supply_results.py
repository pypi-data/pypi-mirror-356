# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupplyOrderCancelStatusResponseCancelSupplyResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_reasons': 'list[CancelSupplyResultsCancelSupplyError]',
        'is_supply_cancelled': 'bool',
        'supply_id': 'int'
    }

    attribute_map = {
        'error_reasons': 'error_reasons',
        'is_supply_cancelled': 'is_supply_cancelled',
        'supply_id': 'supply_id'
    }

    def __init__(self, error_reasons=None, is_supply_cancelled=None, supply_id=None):  # noqa: E501
        """SupplyOrderCancelStatusResponseCancelSupplyResults - a model defined in Swagger"""  # noqa: E501
        self._error_reasons = None
        self._is_supply_cancelled = None
        self._supply_id = None
        self.discriminator = None
        if error_reasons is not None:
            self.error_reasons = error_reasons
        if is_supply_cancelled is not None:
            self.is_supply_cancelled = is_supply_cancelled
        if supply_id is not None:
            self.supply_id = supply_id

    @property
    def error_reasons(self):
        """Gets the error_reasons of this SupplyOrderCancelStatusResponseCancelSupplyResults.  # noqa: E501

        Причина, по которой не удалось отменить поставки:   - `INVALID_SUPPLY_STATE` — неверный статус поставки.   - `SUPPLY_DOES_NOT_BELONG_TO_CONTRACTOR` — поставка не принадлежит юридическому лицу.   - `SUPPLY_DOES_NOT_BELONG_TO_COMPANY` — поставка не принадлежит продавцу.   - `SUPPLY_DOES_NOT_BELONG_TO_ORDER` — поставка не принадлежит заявке на поставку.   - `SUPPLY_BELONGS_TO_VIRTUAL_ORDER` — поставка принадлежит виртуальной заявке на поставку.   - `OTHER_ASYNCHRONOUS_OPERATION_IN_PROGRESS` — поставка в процессе отмены.   # noqa: E501

        :return: The error_reasons of this SupplyOrderCancelStatusResponseCancelSupplyResults.  # noqa: E501
        :rtype: list[CancelSupplyResultsCancelSupplyError]
        """
        return self._error_reasons

    @error_reasons.setter
    def error_reasons(self, error_reasons):
        """Sets the error_reasons of this SupplyOrderCancelStatusResponseCancelSupplyResults.

        Причина, по которой не удалось отменить поставки:   - `INVALID_SUPPLY_STATE` — неверный статус поставки.   - `SUPPLY_DOES_NOT_BELONG_TO_CONTRACTOR` — поставка не принадлежит юридическому лицу.   - `SUPPLY_DOES_NOT_BELONG_TO_COMPANY` — поставка не принадлежит продавцу.   - `SUPPLY_DOES_NOT_BELONG_TO_ORDER` — поставка не принадлежит заявке на поставку.   - `SUPPLY_BELONGS_TO_VIRTUAL_ORDER` — поставка принадлежит виртуальной заявке на поставку.   - `OTHER_ASYNCHRONOUS_OPERATION_IN_PROGRESS` — поставка в процессе отмены.   # noqa: E501

        :param error_reasons: The error_reasons of this SupplyOrderCancelStatusResponseCancelSupplyResults.  # noqa: E501
        :type: list[CancelSupplyResultsCancelSupplyError]
        """

        self._error_reasons = error_reasons

    @property
    def is_supply_cancelled(self):
        """Gets the is_supply_cancelled of this SupplyOrderCancelStatusResponseCancelSupplyResults.  # noqa: E501

        `true`, если поставка отменена.   # noqa: E501

        :return: The is_supply_cancelled of this SupplyOrderCancelStatusResponseCancelSupplyResults.  # noqa: E501
        :rtype: bool
        """
        return self._is_supply_cancelled

    @is_supply_cancelled.setter
    def is_supply_cancelled(self, is_supply_cancelled):
        """Sets the is_supply_cancelled of this SupplyOrderCancelStatusResponseCancelSupplyResults.

        `true`, если поставка отменена.   # noqa: E501

        :param is_supply_cancelled: The is_supply_cancelled of this SupplyOrderCancelStatusResponseCancelSupplyResults.  # noqa: E501
        :type: bool
        """

        self._is_supply_cancelled = is_supply_cancelled

    @property
    def supply_id(self):
        """Gets the supply_id of this SupplyOrderCancelStatusResponseCancelSupplyResults.  # noqa: E501

        Идентификатор поставки.  # noqa: E501

        :return: The supply_id of this SupplyOrderCancelStatusResponseCancelSupplyResults.  # noqa: E501
        :rtype: int
        """
        return self._supply_id

    @supply_id.setter
    def supply_id(self, supply_id):
        """Sets the supply_id of this SupplyOrderCancelStatusResponseCancelSupplyResults.

        Идентификатор поставки.  # noqa: E501

        :param supply_id: The supply_id of this SupplyOrderCancelStatusResponseCancelSupplyResults.  # noqa: E501
        :type: int
        """

        self._supply_id = supply_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplyOrderCancelStatusResponseCancelSupplyResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplyOrderCancelStatusResponseCancelSupplyResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
