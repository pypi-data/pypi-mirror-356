# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Fbsv4SetProductExemplarRequestProductExemplar(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gtd': 'str',
        'is_gtd_absent': 'bool',
        'mandatory_mark': 'str',
        'jw_uin': 'list[str]',
        'rnpt': 'str',
        'is_rnpt_absent': 'bool'
    }

    attribute_map = {
        'gtd': 'gtd',
        'is_gtd_absent': 'is_gtd_absent',
        'mandatory_mark': 'mandatory_mark',
        'jw_uin': 'jw_uin',
        'rnpt': 'rnpt',
        'is_rnpt_absent': 'is_rnpt_absent'
    }

    def __init__(self, gtd=None, is_gtd_absent=None, mandatory_mark=None, jw_uin=None, rnpt=None, is_rnpt_absent=None):  # noqa: E501
        """Fbsv4SetProductExemplarRequestProductExemplar - a model defined in Swagger"""  # noqa: E501
        self._gtd = None
        self._is_gtd_absent = None
        self._mandatory_mark = None
        self._jw_uin = None
        self._rnpt = None
        self._is_rnpt_absent = None
        self.discriminator = None
        if gtd is not None:
            self.gtd = gtd
        if is_gtd_absent is not None:
            self.is_gtd_absent = is_gtd_absent
        if mandatory_mark is not None:
            self.mandatory_mark = mandatory_mark
        if jw_uin is not None:
            self.jw_uin = jw_uin
        if rnpt is not None:
            self.rnpt = rnpt
        if is_rnpt_absent is not None:
            self.is_rnpt_absent = is_rnpt_absent

    @property
    def gtd(self):
        """Gets the gtd of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501

        Номер грузовой таможенной декларации (ГТД).  # noqa: E501

        :return: The gtd of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501
        :rtype: str
        """
        return self._gtd

    @gtd.setter
    def gtd(self, gtd):
        """Sets the gtd of this Fbsv4SetProductExemplarRequestProductExemplar.

        Номер грузовой таможенной декларации (ГТД).  # noqa: E501

        :param gtd: The gtd of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501
        :type: str
        """

        self._gtd = gtd

    @property
    def is_gtd_absent(self):
        """Gets the is_gtd_absent of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501

        Признак того, что не указан номер таможенной декларации.  # noqa: E501

        :return: The is_gtd_absent of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501
        :rtype: bool
        """
        return self._is_gtd_absent

    @is_gtd_absent.setter
    def is_gtd_absent(self, is_gtd_absent):
        """Sets the is_gtd_absent of this Fbsv4SetProductExemplarRequestProductExemplar.

        Признак того, что не указан номер таможенной декларации.  # noqa: E501

        :param is_gtd_absent: The is_gtd_absent of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501
        :type: bool
        """

        self._is_gtd_absent = is_gtd_absent

    @property
    def mandatory_mark(self):
        """Gets the mandatory_mark of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501

        Обязательная маркировка «Честный ЗНАК».  # noqa: E501

        :return: The mandatory_mark of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501
        :rtype: str
        """
        return self._mandatory_mark

    @mandatory_mark.setter
    def mandatory_mark(self, mandatory_mark):
        """Sets the mandatory_mark of this Fbsv4SetProductExemplarRequestProductExemplar.

        Обязательная маркировка «Честный ЗНАК».  # noqa: E501

        :param mandatory_mark: The mandatory_mark of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501
        :type: str
        """

        self._mandatory_mark = mandatory_mark

    @property
    def jw_uin(self):
        """Gets the jw_uin of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501

        Уникальный идентификационный номер (УИН) ювелирного изделия.  # noqa: E501

        :return: The jw_uin of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501
        :rtype: list[str]
        """
        return self._jw_uin

    @jw_uin.setter
    def jw_uin(self, jw_uin):
        """Sets the jw_uin of this Fbsv4SetProductExemplarRequestProductExemplar.

        Уникальный идентификационный номер (УИН) ювелирного изделия.  # noqa: E501

        :param jw_uin: The jw_uin of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501
        :type: list[str]
        """

        self._jw_uin = jw_uin

    @property
    def rnpt(self):
        """Gets the rnpt of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501

        Регистрационный номер партии товара (РНПТ).  # noqa: E501

        :return: The rnpt of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501
        :rtype: str
        """
        return self._rnpt

    @rnpt.setter
    def rnpt(self, rnpt):
        """Sets the rnpt of this Fbsv4SetProductExemplarRequestProductExemplar.

        Регистрационный номер партии товара (РНПТ).  # noqa: E501

        :param rnpt: The rnpt of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501
        :type: str
        """

        self._rnpt = rnpt

    @property
    def is_rnpt_absent(self):
        """Gets the is_rnpt_absent of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501

        Признак того, что не указан регистрационный номер партии товара (РНПТ).  # noqa: E501

        :return: The is_rnpt_absent of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501
        :rtype: bool
        """
        return self._is_rnpt_absent

    @is_rnpt_absent.setter
    def is_rnpt_absent(self, is_rnpt_absent):
        """Sets the is_rnpt_absent of this Fbsv4SetProductExemplarRequestProductExemplar.

        Признак того, что не указан регистрационный номер партии товара (РНПТ).  # noqa: E501

        :param is_rnpt_absent: The is_rnpt_absent of this Fbsv4SetProductExemplarRequestProductExemplar.  # noqa: E501
        :type: bool
        """

        self._is_rnpt_absent = is_rnpt_absent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Fbsv4SetProductExemplarRequestProductExemplar, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fbsv4SetProductExemplarRequestProductExemplar):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
