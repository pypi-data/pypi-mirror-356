# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ozon_api_client.api_client import ApiClient


class PromosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def actions_api_activate_hot_sales_products(self, body, **kwargs):  # noqa: E501
        """Добавить товары в акцию Hot Sale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_api_activate_hot_sales_products(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ActivateHotSalesProductsRequest body: (required)
        :return: V1SetActivateHotSaleProductsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actions_api_activate_hot_sales_products_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_api_activate_hot_sales_products_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def actions_api_activate_hot_sales_products_with_http_info(self, body, **kwargs):  # noqa: E501
        """Добавить товары в акцию Hot Sale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_api_activate_hot_sales_products_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ActivateHotSalesProductsRequest body: (required)
        :return: V1SetActivateHotSaleProductsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_api_activate_hot_sales_products" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `actions_api_activate_hot_sales_products`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/actions/hotsales/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SetActivateHotSaleProductsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_api_deactivate_hot_sales_products(self, body, **kwargs):  # noqa: E501
        """Удалить товары из акции Hot Sale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_api_deactivate_hot_sales_products(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1DeactivateHotSalesProductsRequest body: (required)
        :return: V1SetDeactivateHotSaleProductsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actions_api_deactivate_hot_sales_products_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_api_deactivate_hot_sales_products_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def actions_api_deactivate_hot_sales_products_with_http_info(self, body, **kwargs):  # noqa: E501
        """Удалить товары из акции Hot Sale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_api_deactivate_hot_sales_products_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1DeactivateHotSalesProductsRequest body: (required)
        :return: V1SetDeactivateHotSaleProductsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_api_deactivate_hot_sales_products" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `actions_api_deactivate_hot_sales_products`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/actions/hotsales/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1SetDeactivateHotSaleProductsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_api_get_hot_sales_list(self, body, **kwargs):  # noqa: E501
        """Список доступных акций Hot Sale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_api_get_hot_sales_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetHotSalesListRequest body: (required)
        :return: V1GetHotSalesListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actions_api_get_hot_sales_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.actions_api_get_hot_sales_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def actions_api_get_hot_sales_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """Список доступных акций Hot Sale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_api_get_hot_sales_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetHotSalesListRequest body: (required)
        :return: V1GetHotSalesListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_api_get_hot_sales_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `actions_api_get_hot_sales_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/actions/hotsales/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetHotSalesListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actions_api_get_hot_sales_products(self, **kwargs):  # noqa: E501
        """Список товаров, которые участвуют в акции Hot Sale  # noqa: E501

        Метод для получения списка товаров, которые могут участвовать или уже участвуют в акции Hot Sale.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_api_get_hot_sales_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetHotSalesProductsRequest body:
        :return: V1GetHotSalesProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actions_api_get_hot_sales_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.actions_api_get_hot_sales_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def actions_api_get_hot_sales_products_with_http_info(self, **kwargs):  # noqa: E501
        """Список товаров, которые участвуют в акции Hot Sale  # noqa: E501

        Метод для получения списка товаров, которые могут участвовать или уже участвуют в акции Hot Sale.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actions_api_get_hot_sales_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetHotSalesProductsRequest body:
        :return: V1GetHotSalesProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actions_api_get_hot_sales_products" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/actions/hotsales/products', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetHotSalesProductsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def promos(self, **kwargs):  # noqa: E501
        """Список акций  # noqa: E501

        Метод для получения списка акций, в которых можно участвовать.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SellerApiGetSellerActionsV1Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.promos_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.promos_with_http_info(**kwargs)  # noqa: E501
            return data

    def promos_with_http_info(self, **kwargs):  # noqa: E501
        """Список акций  # noqa: E501

        Метод для получения списка акций, в которых можно участвовать.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SellerApiGetSellerActionsV1Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method promos" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SellerApiGetSellerActionsV1Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def promos_candidates(self, **kwargs):  # noqa: E501
        """Список доступных для акции товаров  # noqa: E501

        Метод для получения списка товаров, которые могут участвовать в акции, по её идентификатору.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_candidates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SellerApiGetSellerProductV1Request body:
        :return: SellerApiGetSellerProductV1Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.promos_candidates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.promos_candidates_with_http_info(**kwargs)  # noqa: E501
            return data

    def promos_candidates_with_http_info(self, **kwargs):  # noqa: E501
        """Список доступных для акции товаров  # noqa: E501

        Метод для получения списка товаров, которые могут участвовать в акции, по её идентификатору.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_candidates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SellerApiGetSellerProductV1Request body:
        :return: SellerApiGetSellerProductV1Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method promos_candidates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/actions/candidates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SellerApiGetSellerProductV1Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def promos_products(self, **kwargs):  # noqa: E501
        """Список участвующих в акции товаров  # noqa: E501

        Метод для получения списка товаров, участвующих в акции, по её идентификатору.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SellerApiGetSellerProductV1Request body:
        :return: SellerApiGetSellerProductV1Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.promos_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.promos_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def promos_products_with_http_info(self, **kwargs):  # noqa: E501
        """Список участвующих в акции товаров  # noqa: E501

        Метод для получения списка товаров, участвующих в акции, по её идентификатору.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SellerApiGetSellerProductV1Request body:
        :return: SellerApiGetSellerProductV1Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method promos_products" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/actions/products', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SellerApiGetSellerProductV1Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def promos_products_activate(self, body, **kwargs):  # noqa: E501
        """Добавить товар в акцию  # noqa: E501

        Метод для добавления товаров в доступную акцию.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_products_activate(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SellerApiActivateProductV1Request body: (required)
        :return: SellerApiProductV1Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.promos_products_activate_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.promos_products_activate_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def promos_products_activate_with_http_info(self, body, **kwargs):  # noqa: E501
        """Добавить товар в акцию  # noqa: E501

        Метод для добавления товаров в доступную акцию.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_products_activate_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SellerApiActivateProductV1Request body: (required)
        :return: SellerApiProductV1Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method promos_products_activate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `promos_products_activate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/actions/products/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SellerApiProductV1Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def promos_products_deactivate(self, body, **kwargs):  # noqa: E501
        """Удалить товары из акции  # noqa: E501

        Метод для удаления товаров из акции.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_products_deactivate(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SellerApiProductIDsV1Request body: (required)
        :return: SellerApiProductV1ResponseDeactivate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.promos_products_deactivate_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.promos_products_deactivate_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def promos_products_deactivate_with_http_info(self, body, **kwargs):  # noqa: E501
        """Удалить товары из акции  # noqa: E501

        Метод для удаления товаров из акции.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_products_deactivate_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SellerApiProductIDsV1Request body: (required)
        :return: SellerApiProductV1ResponseDeactivate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method promos_products_deactivate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `promos_products_deactivate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/actions/products/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SellerApiProductV1ResponseDeactivate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def promos_task_approve(self, body, **kwargs):  # noqa: E501
        """Согласовать заявку на скидку  # noqa: E501

        Вы можете согласовывать заявки в статусах: `NEW` — новые, `SEEN` — просмотренные.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_task_approve(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ApproveDiscountTasksRequest body: (required)
        :return: V1ApproveDeclineDiscountTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.promos_task_approve_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.promos_task_approve_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def promos_task_approve_with_http_info(self, body, **kwargs):  # noqa: E501
        """Согласовать заявку на скидку  # noqa: E501

        Вы можете согласовывать заявки в статусах: `NEW` — новые, `SEEN` — просмотренные.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_task_approve_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ApproveDiscountTasksRequest body: (required)
        :return: V1ApproveDeclineDiscountTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method promos_task_approve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `promos_task_approve`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/actions/discounts-task/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ApproveDeclineDiscountTasksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def promos_task_decline(self, body, **kwargs):  # noqa: E501
        """Отклонить заявку на скидку  # noqa: E501

        Вы можете отклонить заявки в статусах: `NEW` — новые, `SEEN` — просмотренные.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_task_decline(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1DeclineDiscountTasksRequest body: (required)
        :return: V1ApproveDeclineDiscountTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.promos_task_decline_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.promos_task_decline_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def promos_task_decline_with_http_info(self, body, **kwargs):  # noqa: E501
        """Отклонить заявку на скидку  # noqa: E501

        Вы можете отклонить заявки в статусах: `NEW` — новые, `SEEN` — просмотренные.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_task_decline_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1DeclineDiscountTasksRequest body: (required)
        :return: V1ApproveDeclineDiscountTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method promos_task_decline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `promos_task_decline`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/actions/discounts-task/decline', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ApproveDeclineDiscountTasksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def promos_task_list(self, body, **kwargs):  # noqa: E501
        """Список заявок на скидку  # noqa: E501

        Метод для получения списка товаров, которые покупатели хотят купить со скидкой.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_task_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetDiscountTaskListRequest body: (required)
        :return: V1GetDiscountTaskListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.promos_task_list_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.promos_task_list_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def promos_task_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """Список заявок на скидку  # noqa: E501

        Метод для получения списка товаров, которые покупатели хотят купить со скидкой.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.promos_task_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetDiscountTaskListRequest body: (required)
        :return: V1GetDiscountTaskListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method promos_task_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `promos_task_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/actions/discounts-task/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetDiscountTaskListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
