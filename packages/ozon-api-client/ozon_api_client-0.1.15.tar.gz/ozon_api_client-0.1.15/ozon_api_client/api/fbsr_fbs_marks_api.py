# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ozon_api_client.api_client import ApiClient


class FBSrFBSMarksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def posting_api_fbs_posting_product_exemplar_create_or_get(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить данные созданных экземпляров  # noqa: E501

        Метод для получения информации по экземплярам товаров из отправления, переданных в методе [/v5/fbs/posting/product/exemplar/set](#operation/PostingAPI_FbsPostingProductExemplarSet).  Используйте метод для получения `exemplar_id`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_product_exemplar_create_or_get(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V5FbsPostingProductExemplarCreateOrGetV5Request body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V5FbsPostingProductExemplarCreateOrGetV5Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_product_exemplar_create_or_get_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_product_exemplar_create_or_get_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_product_exemplar_create_or_get_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить данные созданных экземпляров  # noqa: E501

        Метод для получения информации по экземплярам товаров из отправления, переданных в методе [/v5/fbs/posting/product/exemplar/set](#operation/PostingAPI_FbsPostingProductExemplarSet).  Используйте метод для получения `exemplar_id`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_product_exemplar_create_or_get_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V5FbsPostingProductExemplarCreateOrGetV5Request body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V5FbsPostingProductExemplarCreateOrGetV5Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_product_exemplar_create_or_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_product_exemplar_create_or_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_product_exemplar_create_or_get`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_product_exemplar_create_or_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v5/fbs/posting/product/exemplar/create-or-get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V5FbsPostingProductExemplarCreateOrGetV5Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_fbs_posting_product_exemplar_set(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Проверить и сохранить данные экземпляров (версия 5)  # noqa: E501

        Асинхронный метод: - для проверки наличия экземпляров в обороте в системе «Честный ЗНАК»; - для сохранения данных экземпляров.   Чтобы получить результаты проверок, используйте метод [/v4/fbs/posting/product/exemplar/status](#operation/PostingAPI_GetProductExemplarStatus).  Для получения данных о созданных экземплярах, используйте метод [/v5/fbs/posting/product/exemplar/create-or-get](#operation/PostingAPI_FbsPostingProductExemplarCreateOrGet).  При необходимости укажите номер грузовой таможенной декларации в параметре `gtd`.  Если его нет, передайте значение `is_gtd_absent = true`.  Если у вас несколько одинаковых товаров в отправлении, укажите один `product_id` и массив `exemplars` для каждого товара из отправления.  Всегда передавайте полный набор данных по экземплярам и продуктам.   Например, в вашей системе 10 экземпляров.  Вы передали их для проверки и сохранения.  Потом добавили в своей системе ещё 60 экземпляров. При повторной передаче экземпляров для проверки и сохранения укажите все экземпляры: и старые, и только что добавленные.  Отличие от [/v4/fbs/posting/product/exemplar/set](#operation/PostingAPI_SetProductExemplar) — вы можете передать в запросе больше информации по экземплярам.  Код ответа 200 не гарантирует, что данные об экземплярах приняты.  Он указывает, что создана задача для добавления информации.  Чтобы проверить статус задачи, используйте метод [/v4/fbs/posting/product/exemplar/status](#operation/PostingAPI_GetProductExemplarStatus).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_product_exemplar_set(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V5FbsPostingProductExemplarSetV5Request body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V5FbsPostingProductExemplarSetV5Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_product_exemplar_set_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_product_exemplar_set_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_product_exemplar_set_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Проверить и сохранить данные экземпляров (версия 5)  # noqa: E501

        Асинхронный метод: - для проверки наличия экземпляров в обороте в системе «Честный ЗНАК»; - для сохранения данных экземпляров.   Чтобы получить результаты проверок, используйте метод [/v4/fbs/posting/product/exemplar/status](#operation/PostingAPI_GetProductExemplarStatus).  Для получения данных о созданных экземплярах, используйте метод [/v5/fbs/posting/product/exemplar/create-or-get](#operation/PostingAPI_FbsPostingProductExemplarCreateOrGet).  При необходимости укажите номер грузовой таможенной декларации в параметре `gtd`.  Если его нет, передайте значение `is_gtd_absent = true`.  Если у вас несколько одинаковых товаров в отправлении, укажите один `product_id` и массив `exemplars` для каждого товара из отправления.  Всегда передавайте полный набор данных по экземплярам и продуктам.   Например, в вашей системе 10 экземпляров.  Вы передали их для проверки и сохранения.  Потом добавили в своей системе ещё 60 экземпляров. При повторной передаче экземпляров для проверки и сохранения укажите все экземпляры: и старые, и только что добавленные.  Отличие от [/v4/fbs/posting/product/exemplar/set](#operation/PostingAPI_SetProductExemplar) — вы можете передать в запросе больше информации по экземплярам.  Код ответа 200 не гарантирует, что данные об экземплярах приняты.  Он указывает, что создана задача для добавления информации.  Чтобы проверить статус задачи, используйте метод [/v4/fbs/posting/product/exemplar/status](#operation/PostingAPI_GetProductExemplarStatus).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_product_exemplar_set_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V5FbsPostingProductExemplarSetV5Request body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V5FbsPostingProductExemplarSetV5Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_product_exemplar_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_product_exemplar_set`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_product_exemplar_set`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_product_exemplar_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v5/fbs/posting/product/exemplar/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V5FbsPostingProductExemplarSetV5Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_fbs_posting_product_exemplar_validate(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Валидация кодов маркировки  # noqa: E501

        Метод для проверки кодов на соответствие требованиям системы «Честный ЗНАК» по количеству и составу символов.  Если у вас нет номера грузовой таможенной декларации (ГТД), вы можете его не указывать.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_product_exemplar_validate(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Postingv4FbsPostingProductExemplarValidateRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Postingv4FbsPostingProductExemplarValidateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_product_exemplar_validate_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_product_exemplar_validate_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_product_exemplar_validate_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Валидация кодов маркировки  # noqa: E501

        Метод для проверки кодов на соответствие требованиям системы «Честный ЗНАК» по количеству и составу символов.  Если у вас нет номера грузовой таможенной декларации (ГТД), вы можете его не указывать.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_product_exemplar_validate_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Postingv4FbsPostingProductExemplarValidateRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Postingv4FbsPostingProductExemplarValidateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_product_exemplar_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_product_exemplar_validate`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_product_exemplar_validate`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_product_exemplar_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v4/fbs/posting/product/exemplar/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Postingv4FbsPostingProductExemplarValidateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_get_product_exemplar_status(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить статус добавления экземпляров  # noqa: E501

        Метод для получения статусов добавления экземпляров, переданных в методе [/v5/fbs/posting/product/exemplar/set](#operation/PostingAPI_FbsPostingProductExemplarSet).  Также возвращает данные по этим экземплярам.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_product_exemplar_status(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Fbsv4GetProductExemplarStatusRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Fbsv4GetProductExemplarStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_get_product_exemplar_status_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_get_product_exemplar_status_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_get_product_exemplar_status_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить статус добавления экземпляров  # noqa: E501

        Метод для получения статусов добавления экземпляров, переданных в методе [/v5/fbs/posting/product/exemplar/set](#operation/PostingAPI_FbsPostingProductExemplarSet).  Также возвращает данные по этим экземплярам.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_product_exemplar_status_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Fbsv4GetProductExemplarStatusRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Fbsv4GetProductExemplarStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_get_product_exemplar_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_get_product_exemplar_status`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_get_product_exemplar_status`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_get_product_exemplar_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v4/fbs/posting/product/exemplar/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Fbsv4GetProductExemplarStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_set_product_exemplar(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Проверить и сохранить данные экземпляров  # noqa: E501

         <aside class=\"warning\">   В будущем метод будет отключён. Мы предупредим вас об этом за месяц в <a href=\"https://dev.ozon.ru/\">сообществе Ozon for Dev</a> и <a href=\"https://t.me/OZON_int\">чате для разработчиков</a>.    Переключитесь на <a href=\"#operation/PostingAPI_FbsPostingProductExemplarSet\">/v5/fbs/posting/product/exemplar/set</a>. </aside>  Асинхронный метод: - для проверки наличия экземпляров в обороте в системе «Честный ЗНАК»; - для сохранения данных экземпляров.   Чтобы получить результаты проверок, используйте метод [/v4/fbs/posting/product/exemplar/status](#operation/PostingAPI_GetProductExemplarStatus).  При необходимости укажите номер грузовой таможенной декларации в параметре `gtd`. Если его нет, передайте значение `is_gtd_absent = true`.  Если у вас несколько одинаковых товаров в отправлении, укажите один `product_id` и массив `exemplars` для каждого товара из отправления.  Всегда передавайте полный набор данных по экземплярам и продуктам.   Например, в вашей системе 10 экземпляров. Вы передали их для проверки и сохранения. Потом добавили в своей системе ещё 60 экземпляров. При повторной передаче экземпляров для проверки и сохранения укажите все экземпляры: и старые, и только что добавленные.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_set_product_exemplar(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Fbsv4SetProductExemplarRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Fbsv4SetProductExemplarResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_set_product_exemplar_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_set_product_exemplar_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_set_product_exemplar_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Проверить и сохранить данные экземпляров  # noqa: E501

         <aside class=\"warning\">   В будущем метод будет отключён. Мы предупредим вас об этом за месяц в <a href=\"https://dev.ozon.ru/\">сообществе Ozon for Dev</a> и <a href=\"https://t.me/OZON_int\">чате для разработчиков</a>.    Переключитесь на <a href=\"#operation/PostingAPI_FbsPostingProductExemplarSet\">/v5/fbs/posting/product/exemplar/set</a>. </aside>  Асинхронный метод: - для проверки наличия экземпляров в обороте в системе «Честный ЗНАК»; - для сохранения данных экземпляров.   Чтобы получить результаты проверок, используйте метод [/v4/fbs/posting/product/exemplar/status](#operation/PostingAPI_GetProductExemplarStatus).  При необходимости укажите номер грузовой таможенной декларации в параметре `gtd`. Если его нет, передайте значение `is_gtd_absent = true`.  Если у вас несколько одинаковых товаров в отправлении, укажите один `product_id` и массив `exemplars` для каждого товара из отправления.  Всегда передавайте полный набор данных по экземплярам и продуктам.   Например, в вашей системе 10 экземпляров. Вы передали их для проверки и сохранения. Потом добавили в своей системе ещё 60 экземпляров. При повторной передаче экземпляров для проверки и сохранения укажите все экземпляры: и старые, и только что добавленные.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_set_product_exemplar_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Fbsv4SetProductExemplarRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Fbsv4SetProductExemplarResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_set_product_exemplar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_set_product_exemplar`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_set_product_exemplar`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_set_product_exemplar`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v4/fbs/posting/product/exemplar/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Fbsv4SetProductExemplarResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_ship_fbs_posting_package(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Частичная сборка отправления (версия 4)  # noqa: E501

        Если в запросе передать часть товаров из отправления, метод разделит первичное отправление на две части.  В первичном несобранном отправлении останется часть товаров, которую не передали в запросе.  По умолчанию статус созданных отправлений `awaiting_packaging` — ожидает сборки.  Статус изначального отправления изменится только после изменения статуса отправлений, на которые он разделился.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_ship_fbs_posting_package(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V4FbsPostingShipPackageV4Request body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V4FbsPostingShipPackageV4Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_ship_fbs_posting_package_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_ship_fbs_posting_package_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_ship_fbs_posting_package_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Частичная сборка отправления (версия 4)  # noqa: E501

        Если в запросе передать часть товаров из отправления, метод разделит первичное отправление на две части.  В первичном несобранном отправлении останется часть товаров, которую не передали в запросе.  По умолчанию статус созданных отправлений `awaiting_packaging` — ожидает сборки.  Статус изначального отправления изменится только после изменения статуса отправлений, на которые он разделился.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_ship_fbs_posting_package_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V4FbsPostingShipPackageV4Request body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V4FbsPostingShipPackageV4Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_ship_fbs_posting_package" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_ship_fbs_posting_package`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_ship_fbs_posting_package`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_ship_fbs_posting_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v4/posting/fbs/ship/package', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V4FbsPostingShipPackageV4Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_ship_fbs_posting_v4(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Собрать заказ (версия 4)  # noqa: E501

        Делит заказ на отправления и переводит его в статус `awaiting_deliver`.  Каждый элемент в `packages` может содержать несколько элементов `products` или отправлений.  Каждый элемент в `products` — это товар, включённый в данное отправление.  Разделить заказ нужно, если:   - товары не помещаются в одну упаковку,   - товары нельзя сложить в одну упаковку.    Чтобы разделить заказ, передайте в массиве `packages` несколько объектов.  Пример запроса, когда заказ разделять не нужно: 2 товара будут в одном отправлении. ``` {   \"packages\": [     {       \"products\": [         {           \"product_id\": 185479045,           \"quantity\": 2         }       ]     }   ],   \"posting_number\": \"89491381-0072-1\" } ```  Пример запроса, когда заказ нужно разделить: каждый товар будет в отдельном отправлении.  ``` {   \"packages\": [     {       \"products\": [         {           \"product_id\": 185479045,           \"quantity\": 1         }       ]     },     {       \"products\": [         {           \"product_id\": 185479045,           \"quantity\": 1         }       ]     }   ],   \"posting_number\": \"89491381-0072-1\" }     ```    Чтобы внести информацию по экземплярам, используйте метод [/v5/fbs/posting/product/exemplar/set](#operation/PostingAPI_FbsPostingProductExemplarSet).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_ship_fbs_posting_v4(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Fbsv4FbsPostingShipV4Request body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Fbsv4FbsPostingShipV4Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_ship_fbs_posting_v4_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_ship_fbs_posting_v4_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_ship_fbs_posting_v4_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Собрать заказ (версия 4)  # noqa: E501

        Делит заказ на отправления и переводит его в статус `awaiting_deliver`.  Каждый элемент в `packages` может содержать несколько элементов `products` или отправлений.  Каждый элемент в `products` — это товар, включённый в данное отправление.  Разделить заказ нужно, если:   - товары не помещаются в одну упаковку,   - товары нельзя сложить в одну упаковку.    Чтобы разделить заказ, передайте в массиве `packages` несколько объектов.  Пример запроса, когда заказ разделять не нужно: 2 товара будут в одном отправлении. ``` {   \"packages\": [     {       \"products\": [         {           \"product_id\": 185479045,           \"quantity\": 2         }       ]     }   ],   \"posting_number\": \"89491381-0072-1\" } ```  Пример запроса, когда заказ нужно разделить: каждый товар будет в отдельном отправлении.  ``` {   \"packages\": [     {       \"products\": [         {           \"product_id\": 185479045,           \"quantity\": 1         }       ]     },     {       \"products\": [         {           \"product_id\": 185479045,           \"quantity\": 1         }       ]     }   ],   \"posting_number\": \"89491381-0072-1\" }     ```    Чтобы внести информацию по экземплярам, используйте метод [/v5/fbs/posting/product/exemplar/set](#operation/PostingAPI_FbsPostingProductExemplarSet).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_ship_fbs_posting_v4_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Fbsv4FbsPostingShipV4Request body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Fbsv4FbsPostingShipV4Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_ship_fbs_posting_v4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_ship_fbs_posting_v4`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_ship_fbs_posting_v4`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_ship_fbs_posting_v4`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v4/posting/fbs/ship', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Fbsv4FbsPostingShipV4Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
