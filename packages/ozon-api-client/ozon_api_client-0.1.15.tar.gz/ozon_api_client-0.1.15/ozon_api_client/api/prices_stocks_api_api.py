# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ozon_api_client.api_client import ApiClient


class PricesStocksAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def product_api_get_product_info_discounted(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Узнать информацию об уценке и основном товаре по SKU уценённого товара  # noqa: E501

        Метод для получения информации о состоянии и дефектах уценённого товара по его SKU. Также метод возвращает SKU основного товара.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_get_product_info_discounted(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetProductInfoDiscountedRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1GetProductInfoDiscountedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_api_get_product_info_discounted_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.product_api_get_product_info_discounted_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def product_api_get_product_info_discounted_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Узнать информацию об уценке и основном товаре по SKU уценённого товара  # noqa: E501

        Метод для получения информации о состоянии и дефектах уценённого товара по его SKU. Также метод возвращает SKU основного товара.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_get_product_info_discounted_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetProductInfoDiscountedRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1GetProductInfoDiscountedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_api_get_product_info_discounted" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_api_get_product_info_discounted`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `product_api_get_product_info_discounted`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `product_api_get_product_info_discounted`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/product/info/discounted', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetProductInfoDiscountedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_api_get_product_info_prices(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить информацию о цене товара  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_get_product_info_prices(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Productv5GetProductInfoPricesV5Request body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Productv5GetProductInfoPricesV5Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_api_get_product_info_prices_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.product_api_get_product_info_prices_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def product_api_get_product_info_prices_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить информацию о цене товара  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_get_product_info_prices_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Productv5GetProductInfoPricesV5Request body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Productv5GetProductInfoPricesV5Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_api_get_product_info_prices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_api_get_product_info_prices`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `product_api_get_product_info_prices`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `product_api_get_product_info_prices`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v5/product/info/prices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Productv5GetProductInfoPricesV5Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_api_get_product_info_stocks(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Информация о количестве товаров  # noqa: E501

        Возвращает информацию о ĸоличестве товаров по схемам FBS и rFBS:   - сĸольĸо единиц есть в наличии,   - сĸольĸо зарезервировано поĸупателями.  Чтобы получить информацию об остатках по схеме FBO, используйте метод [v1/analytics/manage/stocks](#operation/AnalyticsAPI_ManageStocks).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_get_product_info_stocks(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V4GetProductInfoStocksRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V4GetProductInfoStocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_api_get_product_info_stocks_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.product_api_get_product_info_stocks_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def product_api_get_product_info_stocks_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Информация о количестве товаров  # noqa: E501

        Возвращает информацию о ĸоличестве товаров по схемам FBS и rFBS:   - сĸольĸо единиц есть в наличии,   - сĸольĸо зарезервировано поĸупателями.  Чтобы получить информацию об остатках по схеме FBO, используйте метод [v1/analytics/manage/stocks](#operation/AnalyticsAPI_ManageStocks).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_get_product_info_stocks_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V4GetProductInfoStocksRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V4GetProductInfoStocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_api_get_product_info_stocks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_api_get_product_info_stocks`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `product_api_get_product_info_stocks`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `product_api_get_product_info_stocks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v4/product/info/stocks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V4GetProductInfoStocksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_api_import_products_prices(self, client_id, api_key, **kwargs):  # noqa: E501
        """Обновить цену  # noqa: E501

        Позволяет изменить цену одного или нескольких товаров. Цену каждого товара можно обновлять не больше 10 раз в час. Чтобы сбросить `old_price`, поставьте `0` у этого параметра.   Если у товара установлена минимальная цена и включено автоприменение в акции, отключите его и обновите  минимальную цену, иначе вернётся ошибка `action_price_enabled_min_price_missing`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_import_products_prices(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param ProductImportProductsPricesRequest body:
        :return: ProductImportProductsPricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_api_import_products_prices_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.product_api_import_products_prices_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
            return data

    def product_api_import_products_prices_with_http_info(self, client_id, api_key, **kwargs):  # noqa: E501
        """Обновить цену  # noqa: E501

        Позволяет изменить цену одного или нескольких товаров. Цену каждого товара можно обновлять не больше 10 раз в час. Чтобы сбросить `old_price`, поставьте `0` у этого параметра.   Если у товара установлена минимальная цена и включено автоприменение в акции, отключите его и обновите  минимальную цену, иначе вернётся ошибка `action_price_enabled_min_price_missing`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_import_products_prices_with_http_info(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param ProductImportProductsPricesRequest body:
        :return: ProductImportProductsPricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_api_import_products_prices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `product_api_import_products_prices`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `product_api_import_products_prices`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/product/import/prices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductImportProductsPricesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_api_import_products_stocks(self, client_id, api_key, **kwargs):  # noqa: E501
        """Обновить остатки  # noqa: E501

         <aside class=\"warning\"> В будущем метод будет отключён. Переключитесь на <a href=\"#operation/ProductAPI_ProductsStocksV2\">/v2/products/stocks</a>. </aside>  Позволяет изменить информацию о количестве товара в наличии:  - когда у вас один склад; - когда у вас много складов, но FBS склад, на котором будет обновлён остаток, только один.  <aside class=\"warning\"> Переданный остаток учитывает зарезервированные товары. Перед обновлением остатков проверьте количество зарезервированных товаров с помощью метода <a href=\"#operation/ProductAPI_ProductStocksByWarehouseFbs\">/v1/product/info/stocks-by-warehouse/fbs</a>. </aside>  За один запрос можно изменить наличие для 100 товаров. С одного аккаунта продавца можно отправить до 80 запросов в минуту.  <aside class=\"warning\">Обновлять остатки товара на одном складе можно только 1 раз в 2 минуты, иначе в ответе будет ошибка <code>TOO_MANY_REQUESTS</code>.</aside>  Вы можете задать наличие товара только после того, как его статус сменится на `price_sent`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_import_products_stocks(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param ProductImportProductsStocksRequest body:
        :return: ProductImportProductsStocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_api_import_products_stocks_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.product_api_import_products_stocks_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
            return data

    def product_api_import_products_stocks_with_http_info(self, client_id, api_key, **kwargs):  # noqa: E501
        """Обновить остатки  # noqa: E501

         <aside class=\"warning\"> В будущем метод будет отключён. Переключитесь на <a href=\"#operation/ProductAPI_ProductsStocksV2\">/v2/products/stocks</a>. </aside>  Позволяет изменить информацию о количестве товара в наличии:  - когда у вас один склад; - когда у вас много складов, но FBS склад, на котором будет обновлён остаток, только один.  <aside class=\"warning\"> Переданный остаток учитывает зарезервированные товары. Перед обновлением остатков проверьте количество зарезервированных товаров с помощью метода <a href=\"#operation/ProductAPI_ProductStocksByWarehouseFbs\">/v1/product/info/stocks-by-warehouse/fbs</a>. </aside>  За один запрос можно изменить наличие для 100 товаров. С одного аккаунта продавца можно отправить до 80 запросов в минуту.  <aside class=\"warning\">Обновлять остатки товара на одном складе можно только 1 раз в 2 минуты, иначе в ответе будет ошибка <code>TOO_MANY_REQUESTS</code>.</aside>  Вы можете задать наличие товара только после того, как его статус сменится на `price_sent`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_import_products_stocks_with_http_info(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param ProductImportProductsStocksRequest body:
        :return: ProductImportProductsStocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_api_import_products_stocks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `product_api_import_products_stocks`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `product_api_import_products_stocks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/product/import/stocks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductImportProductsStocksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_api_product_stocks_by_warehouse_fbs(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Информация об остатках на складах продавца (FBS и rFBS)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_product_stocks_by_warehouse_fbs(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Productsv1GetProductInfoStocksByWarehouseFbsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Productsv1GetProductInfoStocksByWarehouseFbsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_api_product_stocks_by_warehouse_fbs_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.product_api_product_stocks_by_warehouse_fbs_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def product_api_product_stocks_by_warehouse_fbs_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Информация об остатках на складах продавца (FBS и rFBS)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_product_stocks_by_warehouse_fbs_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Productsv1GetProductInfoStocksByWarehouseFbsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Productsv1GetProductInfoStocksByWarehouseFbsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_api_product_stocks_by_warehouse_fbs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_api_product_stocks_by_warehouse_fbs`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `product_api_product_stocks_by_warehouse_fbs`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `product_api_product_stocks_by_warehouse_fbs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/product/info/stocks-by-warehouse/fbs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Productsv1GetProductInfoStocksByWarehouseFbsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_api_product_update_discount(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Установить скидку на уценённый товар  # noqa: E501

        Метод для установки размера скидки на уценённые товары, продающиеся по схеме FBS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_product_update_discount(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ProductUpdateDiscountRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1ProductUpdateDiscountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_api_product_update_discount_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.product_api_product_update_discount_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def product_api_product_update_discount_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Установить скидку на уценённый товар  # noqa: E501

        Метод для установки размера скидки на уценённые товары, продающиеся по схеме FBS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_product_update_discount_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1ProductUpdateDiscountRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1ProductUpdateDiscountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_api_product_update_discount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_api_product_update_discount`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `product_api_product_update_discount`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `product_api_product_update_discount`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/product/update/discount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1ProductUpdateDiscountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_api_products_stocks_v2(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Обновить количество товаров на складах  # noqa: E501

        Позволяет изменить информацию о количестве товара в наличии.  <aside class=\"warning\"> Переданный остаток учитывает зарезервированные товары. Перед обновлением остатков проверьте количество зарезервированных товаров с помощью метода <a href=\"#operation/ProductAPI_ProductStocksByWarehouseFbs\">/v1/product/info/stocks-by-warehouse/fbs</a>. </aside>  За один запрос можно изменить наличие для 100 товаров. С одного аккаунта продавца можно отправить до 80 запросов в минуту.  <aside class=\"warning\">Обновлять остатки товара на одном складе можно только 1 раз в 30 секунд, иначе в ответе будет ошибка <code>TOO_MANY_REQUESTS</code>.</aside>  Вы можете задать наличие товара только после того, как его статус сменится на `price_sent`.  Остатки крупногабаритных товаров можно обновлять только на предназначенных для них складах.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_products_stocks_v2(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Productv2ProductsStocksRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Productv2ProductsStocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_api_products_stocks_v2_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.product_api_products_stocks_v2_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def product_api_products_stocks_v2_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Обновить количество товаров на складах  # noqa: E501

        Позволяет изменить информацию о количестве товара в наличии.  <aside class=\"warning\"> Переданный остаток учитывает зарезервированные товары. Перед обновлением остатков проверьте количество зарезервированных товаров с помощью метода <a href=\"#operation/ProductAPI_ProductStocksByWarehouseFbs\">/v1/product/info/stocks-by-warehouse/fbs</a>. </aside>  За один запрос можно изменить наличие для 100 товаров. С одного аккаунта продавца можно отправить до 80 запросов в минуту.  <aside class=\"warning\">Обновлять остатки товара на одном складе можно только 1 раз в 30 секунд, иначе в ответе будет ошибка <code>TOO_MANY_REQUESTS</code>.</aside>  Вы можете задать наличие товара только после того, как его статус сменится на `price_sent`.  Остатки крупногабаритных товаров можно обновлять только на предназначенных для них складах.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_api_products_stocks_v2_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Productv2ProductsStocksRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Productv2ProductsStocksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_api_products_stocks_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_api_products_stocks_v2`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `product_api_products_stocks_v2`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `product_api_products_stocks_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/products/stocks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Productv2ProductsStocksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
