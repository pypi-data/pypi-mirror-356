{#- Simplified template for Python classes -#}

{% block logs scoped %}
  {{ log.debug("Rendering " + class.path) }}
{% endblock logs %}

<div class="doc doc-object doc-enum">
  {% with obj = class, html_id = class.path, all_members = class.all_members %}

    {#- Determine path display setting -#}
    {% if root %}
      {% set show_full_path = config.show_root_full_path %}
      {% set root_members = true %}
    {% elif root_members %}
      {% set show_full_path = config.show_root_members_full_path or config.show_object_full_path %}
      {% set root_members = false %}
    {% else %}
      {% set show_full_path = config.show_object_full_path %}
    {% endif %}

    {% set class_name = class.path if show_full_path else class.name %}
    {% set toc_symbol = '<code class="doc-symbol doc-symbol-toc doc-symbol-enum"></code>&nbsp;'|safe if config.show_symbol_type_toc else '' %}
    {% set toc_label = toc_symbol + (config.toc_label if config.toc_label and root else class.name) %}

    {#- Render heading or hidden TOC entry -#}
    {% if not root or config.show_root_heading %}
      {% filter heading(heading_level, role="class", id=html_id, class="doc doc-heading", toc_label=toc_label) %}
        {% block heading scoped %}
          {% if config.show_symbol_type_heading %}<code class="doc-symbol doc-symbol-heading doc-symbol-enum"></code>{% endif %}

          {% if config.heading and root %}
            {{ config.heading }}
          {% elif config.separate_signature %}
            <span class="doc doc-object-name doc-class-name">{{ class_name }}</span>
          {% elif config.merge_init_into_class and "__init__" in all_members %}
            {% with function = all_members["__init__"] %}
              {%+ filter highlight(language="python", inline=True) -%}
                {{ class_name }}{% include "signature"|get_template with context %}
              {%- endfilter %}
            {% endwith %}
          {% else %}
            <code>{{ class_name }}</code>
          {% endif %}
        {% endblock heading %}

        {% block labels scoped %}
          {% with labels = class.labels %}
            {% include "labels"|get_template with context %}
          {% endwith %}
        {% endblock labels %}
      {% endfilter %}

      {% block signature scoped %}
        {% if config.merge_init_into_class and "__init__" in all_members %}
          {% with function = all_members["__init__"] %}
            {% if function.overloads and config.show_overloads %}
              <div class="doc-overloads">
                {% for overload in function.overloads %}
                  {% filter format_signature(overload, config.line_length, annotations=True, crossrefs=config.signature_crossrefs) %}
                    {{ class.name }}
                  {% endfilter %}
                {% endfor %}
              </div>
            {% endif %}
            {% if config.separate_signature %}
              {% filter format_signature(function, config.line_length, crossrefs=config.signature_crossrefs) %}
                {{ class.name }}
              {% endfilter %}
            {% endif %}
          {% endwith %}
        {% endif %}
      {% endblock signature %}
    {% else %}
      {% if config.show_root_toc_entry %}
        {% filter heading(heading_level, role="class", id=html_id, toc_label=toc_label, hidden=True) %}
        {% endfilter %}
      {% endif %}
      {% set heading_level = heading_level - 1 %}
    {% endif %}

    <div class="doc doc-contents {% if root %}first{% endif %}">
      {% block contents scoped %}

        {% block bases scoped %}
          {% if config.show_bases and class.bases %}
            <p class="doc doc-class-bases">
              Bases: {% for expression in class.bases -%}
                <code>
                  {%- with backlink_type = "subclassed-by" -%}
                    {%- include "expression"|get_template with context -%}
                  {%- endwith -%}
                </code>{% if not loop.last %}, {% endif %}
              {% endfor -%}
            </p>
          {% endif %}
        {% endblock bases %}

        {% block docstring scoped %}
          {% with docstring_sections = class.docstring.parsed %}
            {% include "docstring"|get_template with context %}
          {% endwith %}

          {#- Merge __init__ docstring if enabled -#}
          {% if config.merge_init_into_class %}
            {% set check_members = all_members if (config.inherited_members is true or (config.inherited_members is iterable and "__init__" in config.inherited_members)) else class.members %}
            {% if "__init__" in check_members and check_members["__init__"].has_docstring %}
              {% with function = check_members["__init__"], obj = function, docstring_sections = function.docstring.parsed %}
                {% include "docstring"|get_template with context %}
              {% endwith %}
            {% endif %}
          {% endif %}
        {% endblock docstring %}

        {% if config.backlinks %}
          <backlinks identifier="{{ html_id }}" handler="python" />
        {% endif %}

        {% block summary scoped %}
          {% include "summary"|get_template with context %}
        {% endblock summary %}

        {% block source scoped %}
          {% if config.show_source %}
            {% if config.merge_init_into_class and "__init__" in all_members and all_members["__init__"].source %}
              {% with init = all_members["__init__"] %}
                <details class="quote">
                  <summary>Source code in <code>
                    {{ init.relative_package_filepath if init.relative_filepath.is_absolute() else init.relative_filepath }}
                  </code></summary>
                  {{ init.source|highlight(language="python", linestart=init.lineno or 0, linenums=True) }}
                </details>
              {% endwith %}
            {% elif class.source %}
              <details class="quote">
                <summary>Source code in <code>
                  {{ class.relative_package_filepath if class.relative_filepath.is_absolute() else class.relative_filepath }}
                </code></summary>
                {{ class.source|highlight(language="python", linestart=class.lineno or 0, linenums=True) }}
              </details>
            {% endif %}
          {% endif %}
        {% endblock source %}

        {% block children scoped %}
          {% set root = false %}
          {% set heading_level = heading_level + 1 %}

          {#- Render attributes -#}
          {% with attributes = obj.attributes|filter_objects(
                filters=config.filters,
                members_list=members_list,
                inherited_members=config.inherited_members,
                keep_no_docstrings=config.show_if_no_docstring,
              ) %}
            {% if attributes %}
              <ul>
                {% for attribute in attributes|order_members(config.members_order, members_list) %}
                  {% if config.filters == "public" or members_list is not none or (not attribute.is_imported or attribute.is_public) %}
                    <li class="doc-section-item field-body">
                      <a id="{{ attribute.path }}" class="doc-anchor"></a>
                      <b><code><a class="autorefs autorefs-internal doc-enum-item-name" href="#{{ attribute.path }}">
                        {{ attribute.path if show_full_path else attribute.name }}
                      </a></code></b> â€“
                      <div class="doc-md-description">
                        {% with docstring_sections = attribute.docstring.parsed %}
                          {% if docstring_sections %}
                            {% with autoref_hook = AutorefsHook(obj, config) %}
                              {% for section in docstring_sections %}
                                {{ section.value }}
                              {% endfor %}
                            {% endwith %}
                          {% endif %}
                        {% endwith %}
                      </div>
                    </li>
                  {% endif %}
                {% endfor %}
              </ul>
            {% endif %}
          {% endwith %}
        {% endblock children %}

      {% endblock contents %}
    </div>

  {% endwith %}
</div>