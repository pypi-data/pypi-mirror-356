name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9','3.10', '3.11','3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=py_myt --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Code formatting check
      run: black --check py_myt/ tests/
    
    - name: Import sorting check
      run: isort --check-only py_myt/ tests/
    
    - name: Linting
      run: flake8 py_myt/ tests/
    
    - name: Type checking
      run: mypy py_myt/

  build:
    needs: [test, quality-check]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testpypi'
    environment:
      name: testpypi
      url: https://test.pypi.org/project/myt-sdk/
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'release' && github.event.action == 'published') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pypi')
    environment:
      name: pypi
      url: https://pypi.org/project/myt-sdk/
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  create-github-release:
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pypi'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        VERSION=$(python setup.py --version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        body: |
          ## ðŸš€ Release v${{ steps.get_version.outputs.version }}
          
          ### ðŸ“¦ Installation
          ```bash
          pip install myt-sdk==${{ steps.get_version.outputs.version }}
          ```
          
          ### ðŸ“‹ Changes
          See [CHANGELOG.md](https://github.com/kuqitt/myt_sdk/blob/main/CHANGELOG.md) for detailed changes.
          
          ### ðŸ”— Links
          - [PyPI Package](https://pypi.org/project/myt-sdk/${{ steps.get_version.outputs.version }}/)
          - [Documentation](https://github.com/kuqitt/myt_sdk/blob/main/README.md)
          - [API Reference](https://github.com/kuqitt/myt_sdk/blob/main/docs/)
        draft: false
        prerelease: false