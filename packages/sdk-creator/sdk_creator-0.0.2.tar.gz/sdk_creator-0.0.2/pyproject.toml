[project]
name = "sdk-creator"
description = "A dead simple asynchronous wrapper for RESTful APIs"
readme = "README.md"
authors = [{ name = "Mohanad Ghali", email = "mghalix@gmail.com" }]
dynamic = ["version"]
license = { text = "MIT" }
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Framework :: Pydantic :: 2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.11"
dependencies = ["httpx>=0.28.1", "loguru>=0.7.3", "pydantic>=2.11.7"]

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.hatch.build.targets.sdist]
only-include = ["src/sdk_creator"]

[tool.uv-dynamic-versioning]
fallback-version = "0.0.0"

[project.urls]
Homepage = "https://github.com/mghalix/sdk-creator"
Documentation = "https://github.com/mghalix/sdk-creator#readme"
Issues = "https://github.com/mghalix/sdk-creator/issues"
Respository = "https://github.com/mghalix/sdk-creator.git"
Changelog = "https://github.com/mghalix/sdk-creator/blob/main/release-notes.md"

[tool.mypy]
strict = true

[tool.coverage.html]
show_contexts = true

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "D",   # pydocstyle
    "B",   # flake8-bugbear
    "W",   # pycodestyle warnings
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "ANN", # type annotations
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "RUF", # ruff specific rules
    "ISC", # implicit string concat
    "INP", # implicit namespace package
    "RSE", # raise exception parantheses check
    "RET", # flake8-return check
    "SIM", # flake8-simplify check
    "TD",  # todos
    "FIX", # fixme
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "W191",   # indentation contains tabs
    "ANN401", # allow dynamically typed expressions (typing.Any)
    "D100",   # allow missing docstring in public module
    "D104",   # allow missing docstring in public package
    "TD003",  # allow missing link to todo issue
    "FIX002", # allow todo
]

[tool.ruff.lint.isort]
known-third-party = ["pydantic", "httpx", "loguru"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[dependency-groups]
dev = [
    "coverage>=7.9.1",
    "mypy>=1.16.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "ruff>=0.11.13",
]

[tool.pytest.ini_options]
pythonpath = ["src/sdk_creator"]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
show_missing = true
fail_under = 100
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D", "INP", "TD", "ERA001", "RUF"]
