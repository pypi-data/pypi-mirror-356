// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/stream_executor/blas.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fstream_5fexecutor_2fblas_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fstream_5fexecutor_2fblas_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fstream_5fexecutor_2fblas_2eproto PROTOBUF_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2fstream_5fexecutor_2fblas_2eproto {
  static const uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fstream_5fexecutor_2fblas_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace xla {

enum BlasTransposeProto : int {
  BLAS_NO_TRANSPOSE = 0,
  BLAS_TRANSPOSE = 1,
  BLAS_CONJUGATE_TRANSPOSE = 2,
  BlasTransposeProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BlasTransposeProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
PROTOBUF_EXPORT bool BlasTransposeProto_IsValid(int value);
constexpr BlasTransposeProto BlasTransposeProto_MIN = BLAS_NO_TRANSPOSE;
constexpr BlasTransposeProto BlasTransposeProto_MAX = BLAS_CONJUGATE_TRANSPOSE;
constexpr int BlasTransposeProto_ARRAYSIZE = BlasTransposeProto_MAX + 1;

PROTOBUF_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlasTransposeProto_descriptor();
template<typename T>
inline const std::string& BlasTransposeProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlasTransposeProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlasTransposeProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlasTransposeProto_descriptor(), enum_t_value);
}
inline bool BlasTransposeProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlasTransposeProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlasTransposeProto>(
    BlasTransposeProto_descriptor(), name, value);
}
enum BlasComputationTypeProto : int {
  BLAS_COMPUTATION_TYPE_UNSET = 0,
  BLAS_COMPUTATION_TYPE_F16 = 1,
  BLAS_COMPUTATION_TYPE_F32 = 2,
  BLAS_COMPUTATION_TYPE_F64 = 3,
  BLAS_COMPUTATION_TYPE_I32 = 4,
  BLAS_COMPUTATION_TYPE_F16_AS_F32 = 5,
  BLAS_COMPUTATION_TYPE_BF16_AS_F32 = 6,
  BLAS_COMPUTATION_TYPE_TF32_AS_F32 = 7,
  BlasComputationTypeProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BlasComputationTypeProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
PROTOBUF_EXPORT bool BlasComputationTypeProto_IsValid(int value);
constexpr BlasComputationTypeProto BlasComputationTypeProto_MIN = BLAS_COMPUTATION_TYPE_UNSET;
constexpr BlasComputationTypeProto BlasComputationTypeProto_MAX = BLAS_COMPUTATION_TYPE_TF32_AS_F32;
constexpr int BlasComputationTypeProto_ARRAYSIZE = BlasComputationTypeProto_MAX + 1;

PROTOBUF_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlasComputationTypeProto_descriptor();
template<typename T>
inline const std::string& BlasComputationTypeProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlasComputationTypeProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlasComputationTypeProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlasComputationTypeProto_descriptor(), enum_t_value);
}
inline bool BlasComputationTypeProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlasComputationTypeProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlasComputationTypeProto>(
    BlasComputationTypeProto_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xla

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xla::BlasTransposeProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::BlasTransposeProto>() {
  return ::xla::BlasTransposeProto_descriptor();
}
template <> struct is_proto_enum< ::xla::BlasComputationTypeProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::BlasComputationTypeProto>() {
  return ::xla::BlasComputationTypeProto_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fstream_5fexecutor_2fblas_2eproto
