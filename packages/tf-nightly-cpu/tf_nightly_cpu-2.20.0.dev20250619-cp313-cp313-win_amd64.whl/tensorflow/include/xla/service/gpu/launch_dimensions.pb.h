// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/service/gpu/launch_dimensions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2flaunch_5fdimensions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2flaunch_5fdimensions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "xla/stream_executor/launch_dim.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fservice_2fgpu_2flaunch_5fdimensions_2eproto PROTOBUF_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOBUF_EXPORT TableStruct_xla_2fservice_2fgpu_2flaunch_5fdimensions_2eproto {
  static const uint32_t offsets[];
};
PROTOBUF_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fservice_2fgpu_2flaunch_5fdimensions_2eproto;
namespace xla {
namespace gpu {
class LaunchDimensionsProto;
struct LaunchDimensionsProtoDefaultTypeInternal;
PROTOBUF_EXPORT extern LaunchDimensionsProtoDefaultTypeInternal _LaunchDimensionsProto_default_instance_;
}  // namespace gpu
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_EXPORT ::xla::gpu::LaunchDimensionsProto* Arena::CreateMaybeMessage<::xla::gpu::LaunchDimensionsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {
namespace gpu {

// ===================================================================

class PROTOBUF_EXPORT LaunchDimensionsProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.gpu.LaunchDimensionsProto) */ {
 public:
  inline LaunchDimensionsProto() : LaunchDimensionsProto(nullptr) {}
  ~LaunchDimensionsProto() override;
  explicit PROTOBUF_CONSTEXPR LaunchDimensionsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaunchDimensionsProto(const LaunchDimensionsProto& from);
  LaunchDimensionsProto(LaunchDimensionsProto&& from) noexcept
    : LaunchDimensionsProto() {
    *this = ::std::move(from);
  }

  inline LaunchDimensionsProto& operator=(const LaunchDimensionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchDimensionsProto& operator=(LaunchDimensionsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaunchDimensionsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaunchDimensionsProto* internal_default_instance() {
    return reinterpret_cast<const LaunchDimensionsProto*>(
               &_LaunchDimensionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaunchDimensionsProto& a, LaunchDimensionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchDimensionsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchDimensionsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaunchDimensionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaunchDimensionsProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaunchDimensionsProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LaunchDimensionsProto& from) {
    LaunchDimensionsProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchDimensionsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.gpu.LaunchDimensionsProto";
  }
  protected:
  explicit LaunchDimensionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockCountsFieldNumber = 1,
    kThreadCountsPerBlockFieldNumber = 2,
  };
  // .stream_executor.BlockDimProto block_counts = 1;
  bool has_block_counts() const;
  private:
  bool _internal_has_block_counts() const;
  public:
  void clear_block_counts();
  const ::stream_executor::BlockDimProto& block_counts() const;
  PROTOBUF_NODISCARD ::stream_executor::BlockDimProto* release_block_counts();
  ::stream_executor::BlockDimProto* mutable_block_counts();
  void set_allocated_block_counts(::stream_executor::BlockDimProto* block_counts);
  private:
  const ::stream_executor::BlockDimProto& _internal_block_counts() const;
  ::stream_executor::BlockDimProto* _internal_mutable_block_counts();
  public:
  void unsafe_arena_set_allocated_block_counts(
      ::stream_executor::BlockDimProto* block_counts);
  ::stream_executor::BlockDimProto* unsafe_arena_release_block_counts();

  // .stream_executor.ThreadDimProto thread_counts_per_block = 2;
  bool has_thread_counts_per_block() const;
  private:
  bool _internal_has_thread_counts_per_block() const;
  public:
  void clear_thread_counts_per_block();
  const ::stream_executor::ThreadDimProto& thread_counts_per_block() const;
  PROTOBUF_NODISCARD ::stream_executor::ThreadDimProto* release_thread_counts_per_block();
  ::stream_executor::ThreadDimProto* mutable_thread_counts_per_block();
  void set_allocated_thread_counts_per_block(::stream_executor::ThreadDimProto* thread_counts_per_block);
  private:
  const ::stream_executor::ThreadDimProto& _internal_thread_counts_per_block() const;
  ::stream_executor::ThreadDimProto* _internal_mutable_thread_counts_per_block();
  public:
  void unsafe_arena_set_allocated_thread_counts_per_block(
      ::stream_executor::ThreadDimProto* thread_counts_per_block);
  ::stream_executor::ThreadDimProto* unsafe_arena_release_thread_counts_per_block();

  // @@protoc_insertion_point(class_scope:xla.gpu.LaunchDimensionsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::stream_executor::BlockDimProto* block_counts_;
    ::stream_executor::ThreadDimProto* thread_counts_per_block_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fgpu_2flaunch_5fdimensions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaunchDimensionsProto

// .stream_executor.BlockDimProto block_counts = 1;
inline bool LaunchDimensionsProto::_internal_has_block_counts() const {
  return this != internal_default_instance() && _impl_.block_counts_ != nullptr;
}
inline bool LaunchDimensionsProto::has_block_counts() const {
  return _internal_has_block_counts();
}
inline const ::stream_executor::BlockDimProto& LaunchDimensionsProto::_internal_block_counts() const {
  const ::stream_executor::BlockDimProto* p = _impl_.block_counts_;
  return p != nullptr ? *p : reinterpret_cast<const ::stream_executor::BlockDimProto&>(
      ::stream_executor::_BlockDimProto_default_instance_);
}
inline const ::stream_executor::BlockDimProto& LaunchDimensionsProto::block_counts() const {
  // @@protoc_insertion_point(field_get:xla.gpu.LaunchDimensionsProto.block_counts)
  return _internal_block_counts();
}
inline void LaunchDimensionsProto::unsafe_arena_set_allocated_block_counts(
    ::stream_executor::BlockDimProto* block_counts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_counts_);
  }
  _impl_.block_counts_ = block_counts;
  if (block_counts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.gpu.LaunchDimensionsProto.block_counts)
}
inline ::stream_executor::BlockDimProto* LaunchDimensionsProto::release_block_counts() {
  
  ::stream_executor::BlockDimProto* temp = _impl_.block_counts_;
  _impl_.block_counts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::stream_executor::BlockDimProto* LaunchDimensionsProto::unsafe_arena_release_block_counts() {
  // @@protoc_insertion_point(field_release:xla.gpu.LaunchDimensionsProto.block_counts)
  
  ::stream_executor::BlockDimProto* temp = _impl_.block_counts_;
  _impl_.block_counts_ = nullptr;
  return temp;
}
inline ::stream_executor::BlockDimProto* LaunchDimensionsProto::_internal_mutable_block_counts() {
  
  if (_impl_.block_counts_ == nullptr) {
    auto* p = CreateMaybeMessage<::stream_executor::BlockDimProto>(GetArenaForAllocation());
    _impl_.block_counts_ = p;
  }
  return _impl_.block_counts_;
}
inline ::stream_executor::BlockDimProto* LaunchDimensionsProto::mutable_block_counts() {
  ::stream_executor::BlockDimProto* _msg = _internal_mutable_block_counts();
  // @@protoc_insertion_point(field_mutable:xla.gpu.LaunchDimensionsProto.block_counts)
  return _msg;
}
inline void LaunchDimensionsProto::set_allocated_block_counts(::stream_executor::BlockDimProto* block_counts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_counts_);
  }
  if (block_counts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_counts));
    if (message_arena != submessage_arena) {
      block_counts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_counts, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.block_counts_ = block_counts;
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.LaunchDimensionsProto.block_counts)
}

// .stream_executor.ThreadDimProto thread_counts_per_block = 2;
inline bool LaunchDimensionsProto::_internal_has_thread_counts_per_block() const {
  return this != internal_default_instance() && _impl_.thread_counts_per_block_ != nullptr;
}
inline bool LaunchDimensionsProto::has_thread_counts_per_block() const {
  return _internal_has_thread_counts_per_block();
}
inline const ::stream_executor::ThreadDimProto& LaunchDimensionsProto::_internal_thread_counts_per_block() const {
  const ::stream_executor::ThreadDimProto* p = _impl_.thread_counts_per_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::stream_executor::ThreadDimProto&>(
      ::stream_executor::_ThreadDimProto_default_instance_);
}
inline const ::stream_executor::ThreadDimProto& LaunchDimensionsProto::thread_counts_per_block() const {
  // @@protoc_insertion_point(field_get:xla.gpu.LaunchDimensionsProto.thread_counts_per_block)
  return _internal_thread_counts_per_block();
}
inline void LaunchDimensionsProto::unsafe_arena_set_allocated_thread_counts_per_block(
    ::stream_executor::ThreadDimProto* thread_counts_per_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thread_counts_per_block_);
  }
  _impl_.thread_counts_per_block_ = thread_counts_per_block;
  if (thread_counts_per_block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.gpu.LaunchDimensionsProto.thread_counts_per_block)
}
inline ::stream_executor::ThreadDimProto* LaunchDimensionsProto::release_thread_counts_per_block() {
  
  ::stream_executor::ThreadDimProto* temp = _impl_.thread_counts_per_block_;
  _impl_.thread_counts_per_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::stream_executor::ThreadDimProto* LaunchDimensionsProto::unsafe_arena_release_thread_counts_per_block() {
  // @@protoc_insertion_point(field_release:xla.gpu.LaunchDimensionsProto.thread_counts_per_block)
  
  ::stream_executor::ThreadDimProto* temp = _impl_.thread_counts_per_block_;
  _impl_.thread_counts_per_block_ = nullptr;
  return temp;
}
inline ::stream_executor::ThreadDimProto* LaunchDimensionsProto::_internal_mutable_thread_counts_per_block() {
  
  if (_impl_.thread_counts_per_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::stream_executor::ThreadDimProto>(GetArenaForAllocation());
    _impl_.thread_counts_per_block_ = p;
  }
  return _impl_.thread_counts_per_block_;
}
inline ::stream_executor::ThreadDimProto* LaunchDimensionsProto::mutable_thread_counts_per_block() {
  ::stream_executor::ThreadDimProto* _msg = _internal_mutable_thread_counts_per_block();
  // @@protoc_insertion_point(field_mutable:xla.gpu.LaunchDimensionsProto.thread_counts_per_block)
  return _msg;
}
inline void LaunchDimensionsProto::set_allocated_thread_counts_per_block(::stream_executor::ThreadDimProto* thread_counts_per_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thread_counts_per_block_);
  }
  if (thread_counts_per_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thread_counts_per_block));
    if (message_arena != submessage_arena) {
      thread_counts_per_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thread_counts_per_block, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.thread_counts_per_block_ = thread_counts_per_block;
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.LaunchDimensionsProto.thread_counts_per_block)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gpu
}  // namespace xla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2flaunch_5fdimensions_2eproto
