[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "hitl-mcp-server"
version = "0.1.2"
description = "Human-In-the-Loop MCP Server - Enable AI assistants to interact with humans through GUI dialogs"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "GongRzhe", email = "gongrzhe@gmail.com"},
]
keywords = [
    "mcp", 
    "model-context-protocol", 
    "fastmcp", 
    "human-in-the-loop", 
    "gui", 
    "dialog", 
    "tkinter", 
    "ai-assistant",
    "user-interaction",
    "cross-platform"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "fastmcp>=2.8.1",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]

[project.scripts]
hitl-mcp-server = "human_loop_server:main"
hitl_mcp_server = "human_loop_server:main"

[project.urls]
Homepage = "https://github.com/GongRzhe/Human-In-the-Loop-MCP-Server"
Repository = "https://github.com/GongRzhe/Human-In-the-Loop-MCP-Server"
Issues = "https://github.com/GongRzhe/Human-In-the-Loop-MCP-Server/issues"
Documentation = "https://github.com/GongRzhe/Human-In-the-Loop-MCP-Server#readme"
Changelog = "https://github.com/GongRzhe/Human-In-the-Loop-MCP-Server/releases"

[tool.hatch.build.targets.wheel]
packages = ["."]
include = [
    "human_loop_server.py",
]

[tool.hatch.build.targets.sdist]
include = [
    "human_loop_server.py",
    "README.md",
    "LICENSE",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    ".venv/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]