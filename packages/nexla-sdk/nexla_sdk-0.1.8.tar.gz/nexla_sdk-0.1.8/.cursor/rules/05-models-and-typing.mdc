---
description: 
globs: 
alwaysApply: true
---
# Nexla SDK Models and Type System

The Nexla SDK uses Pydantic models to provide type safety and validation for API responses.

## Model Structure

- Models are organized in the [nexla_sdk/models/](mdc:nexla_sdk/models) directory
- Each resource type has its own model file (e.g., [flows.py](mdc:nexla_sdk/models/flows.py), [sources.py](mdc:nexla_sdk/models/sources.py))
- Common model components are in [common.py](mdc:nexla_sdk/models/common.py)

## Model Usage Pattern

API methods return typed model objects instead of raw dictionaries:

```python
# Returns a Flow object with typed properties
flow = client.flows.get("flow_id")

# Access strongly-typed properties
print(flow.name)
print(flow.config.is_active)

# List methods typically return collection objects
sources = client.sources.list()
print(f"Total sources: {sources.total}")

# Access typed items in the collection
for source in sources.items:
    print(f"Source: {source.name}, type: {source.config.connector_type}")
```

## Type Conversion

The conversion from API responses to typed models happens in the client's `_convert_to_model` method in [client.py](mdc:nexla_sdk/client.py).

## Collection Types

API endpoints that return lists typically use collection models that include:
- `items`: List of typed objects
- `total`: Total count of available items
- `page`: Current page number
- `per_page`: Items per page

Examples:
- `FlowList` - Collection of Flow objects
- `SourceList` - Collection of Source objects

## Benefits

Using typed models provides:
1. Code completion in IDEs
2. Type checking with mypy
3. Validation of response data
4. Documentation of the API structure
