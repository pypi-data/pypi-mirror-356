"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .digestcontrolsmetadataresponsedto import (
    DigestControlsMetadataResponseDto,
    DigestControlsMetadataResponseDtoTypedDict,
)
from .lookbackwindowdto import LookBackWindowDto, LookBackWindowDtoTypedDict
from .stepissuesdto import StepIssuesDto, StepIssuesDtoTypedDict
from .steptypeenum import StepTypeEnum
from .workfloworiginenum import WorkflowOriginEnum
from enum import Enum
from novu_py.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DigestStepResponseDtoType(str, Enum):
    r"""The type of digest strategy. Determines which fields are applicable."""

    REGULAR = "regular"
    TIMED = "timed"


class DigestStepResponseDtoUnit(str, Enum):
    r"""The unit of time for the digest interval (for REGULAR type)."""

    SECONDS = "seconds"
    MINUTES = "minutes"
    HOURS = "hours"
    DAYS = "days"
    WEEKS = "weeks"
    MONTHS = "months"


class DigestStepResponseDtoControlValuesTypedDict(TypedDict):
    r"""Control values for the digest step"""

    skip: NotRequired[Dict[str, Any]]
    r"""JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference."""
    type: NotRequired[DigestStepResponseDtoType]
    r"""The type of digest strategy. Determines which fields are applicable."""
    amount: NotRequired[float]
    r"""The amount of time for the digest interval (for REGULAR type). Min 1."""
    unit: NotRequired[DigestStepResponseDtoUnit]
    r"""The unit of time for the digest interval (for REGULAR type)."""
    look_back_window: NotRequired[LookBackWindowDtoTypedDict]
    r"""Configuration for look-back window (for REGULAR type)."""
    cron: NotRequired[str]
    r"""Cron expression for TIMED digest. Min length 1."""
    digest_key: NotRequired[str]
    r"""Specify a custom key for digesting events instead of the default event key."""


class DigestStepResponseDtoControlValues(BaseModel):
    r"""Control values for the digest step"""

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    skip: Optional[Dict[str, Any]] = None
    r"""JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference."""

    type: Optional[DigestStepResponseDtoType] = None
    r"""The type of digest strategy. Determines which fields are applicable."""

    amount: Optional[float] = None
    r"""The amount of time for the digest interval (for REGULAR type). Min 1."""

    unit: Optional[DigestStepResponseDtoUnit] = None
    r"""The unit of time for the digest interval (for REGULAR type)."""

    look_back_window: Annotated[
        Optional[LookBackWindowDto], pydantic.Field(alias="lookBackWindow")
    ] = None
    r"""Configuration for look-back window (for REGULAR type)."""

    cron: Optional[str] = None
    r"""Cron expression for TIMED digest. Min length 1."""

    digest_key: Annotated[Optional[str], pydantic.Field(alias="digestKey")] = None
    r"""Specify a custom key for digesting events instead of the default event key."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]


class DigestStepResponseDtoSlugTypedDict(TypedDict):
    r"""Slug of the step"""


class DigestStepResponseDtoSlug(BaseModel):
    r"""Slug of the step"""


class DigestStepResponseDtoTypedDict(TypedDict):
    controls: DigestControlsMetadataResponseDtoTypedDict
    r"""Controls metadata for the digest step"""
    variables: Dict[str, Any]
    r"""JSON Schema for variables, follows the JSON Schema standard"""
    step_id: str
    r"""Unique identifier of the step"""
    id: str
    r"""Database identifier of the step"""
    name: str
    r"""Name of the step"""
    slug: DigestStepResponseDtoSlugTypedDict
    r"""Slug of the step"""
    type: StepTypeEnum
    r"""Type of the step"""
    origin: WorkflowOriginEnum
    r"""Origin of the workflow"""
    workflow_id: str
    r"""Workflow identifier"""
    workflow_database_id: str
    r"""Workflow database identifier"""
    control_values: NotRequired[DigestStepResponseDtoControlValuesTypedDict]
    r"""Control values for the digest step"""
    issues: NotRequired[StepIssuesDtoTypedDict]
    r"""Issues associated with the step"""


class DigestStepResponseDto(BaseModel):
    controls: DigestControlsMetadataResponseDto
    r"""Controls metadata for the digest step"""

    variables: Dict[str, Any]
    r"""JSON Schema for variables, follows the JSON Schema standard"""

    step_id: Annotated[str, pydantic.Field(alias="stepId")]
    r"""Unique identifier of the step"""

    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""Database identifier of the step"""

    name: str
    r"""Name of the step"""

    slug: DigestStepResponseDtoSlug
    r"""Slug of the step"""

    type: StepTypeEnum
    r"""Type of the step"""

    origin: WorkflowOriginEnum
    r"""Origin of the workflow"""

    workflow_id: Annotated[str, pydantic.Field(alias="workflowId")]
    r"""Workflow identifier"""

    workflow_database_id: Annotated[str, pydantic.Field(alias="workflowDatabaseId")]
    r"""Workflow database identifier"""

    control_values: Annotated[
        Optional[DigestStepResponseDtoControlValues],
        pydantic.Field(alias="controlValues"),
    ] = None
    r"""Control values for the digest step"""

    issues: Optional[StepIssuesDto] = None
    r"""Issues associated with the step"""
