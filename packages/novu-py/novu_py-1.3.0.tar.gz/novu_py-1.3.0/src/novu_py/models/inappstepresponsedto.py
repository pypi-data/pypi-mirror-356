"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .actiondto import ActionDto, ActionDtoTypedDict
from .inappcontrolsmetadataresponsedto import (
    InAppControlsMetadataResponseDto,
    InAppControlsMetadataResponseDtoTypedDict,
)
from .redirectdto import RedirectDto, RedirectDtoTypedDict
from .stepissuesdto import StepIssuesDto, StepIssuesDtoTypedDict
from .steptypeenum import StepTypeEnum
from .workfloworiginenum import WorkflowOriginEnum
from novu_py.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class InAppStepResponseDtoControlValuesTypedDict(TypedDict):
    r"""Control values for the in-app step"""

    skip: NotRequired[Dict[str, Any]]
    r"""JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference."""
    body: NotRequired[str]
    r"""Content/body of the in-app message. Required if subject is empty."""
    subject: NotRequired[str]
    r"""Subject/title of the in-app message. Required if body is empty."""
    avatar: NotRequired[str]
    r"""URL for an avatar image. Must be a valid URL or start with / or {{ variable }}."""
    primary_action: NotRequired[ActionDtoTypedDict]
    r"""Primary action button details."""
    secondary_action: NotRequired[ActionDtoTypedDict]
    r"""Secondary action button details."""
    redirect: NotRequired[RedirectDtoTypedDict]
    r"""Redirection URL configuration for the main content click (if no actions defined/clicked).."""
    disable_output_sanitization: NotRequired[bool]
    r"""Disable sanitization of the output."""
    data: NotRequired[Dict[str, Any]]
    r"""Additional data payload for the step."""


class InAppStepResponseDtoControlValues(BaseModel):
    r"""Control values for the in-app step"""

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    skip: Optional[Dict[str, Any]] = None
    r"""JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference."""

    body: Optional[str] = None
    r"""Content/body of the in-app message. Required if subject is empty."""

    subject: Optional[str] = None
    r"""Subject/title of the in-app message. Required if body is empty."""

    avatar: Optional[str] = None
    r"""URL for an avatar image. Must be a valid URL or start with / or {{ variable }}."""

    primary_action: Annotated[
        Optional[ActionDto], pydantic.Field(alias="primaryAction")
    ] = None
    r"""Primary action button details."""

    secondary_action: Annotated[
        Optional[ActionDto], pydantic.Field(alias="secondaryAction")
    ] = None
    r"""Secondary action button details."""

    redirect: Optional[RedirectDto] = None
    r"""Redirection URL configuration for the main content click (if no actions defined/clicked).."""

    disable_output_sanitization: Annotated[
        Optional[bool], pydantic.Field(alias="disableOutputSanitization")
    ] = False
    r"""Disable sanitization of the output."""

    data: Optional[Dict[str, Any]] = None
    r"""Additional data payload for the step."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]


class InAppStepResponseDtoSlugTypedDict(TypedDict):
    r"""Slug of the step"""


class InAppStepResponseDtoSlug(BaseModel):
    r"""Slug of the step"""


class InAppStepResponseDtoTypedDict(TypedDict):
    controls: InAppControlsMetadataResponseDtoTypedDict
    r"""Controls metadata for the in-app step"""
    variables: Dict[str, Any]
    r"""JSON Schema for variables, follows the JSON Schema standard"""
    step_id: str
    r"""Unique identifier of the step"""
    id: str
    r"""Database identifier of the step"""
    name: str
    r"""Name of the step"""
    slug: InAppStepResponseDtoSlugTypedDict
    r"""Slug of the step"""
    type: StepTypeEnum
    r"""Type of the step"""
    origin: WorkflowOriginEnum
    r"""Origin of the workflow"""
    workflow_id: str
    r"""Workflow identifier"""
    workflow_database_id: str
    r"""Workflow database identifier"""
    control_values: NotRequired[InAppStepResponseDtoControlValuesTypedDict]
    r"""Control values for the in-app step"""
    issues: NotRequired[StepIssuesDtoTypedDict]
    r"""Issues associated with the step"""


class InAppStepResponseDto(BaseModel):
    controls: InAppControlsMetadataResponseDto
    r"""Controls metadata for the in-app step"""

    variables: Dict[str, Any]
    r"""JSON Schema for variables, follows the JSON Schema standard"""

    step_id: Annotated[str, pydantic.Field(alias="stepId")]
    r"""Unique identifier of the step"""

    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""Database identifier of the step"""

    name: str
    r"""Name of the step"""

    slug: InAppStepResponseDtoSlug
    r"""Slug of the step"""

    type: StepTypeEnum
    r"""Type of the step"""

    origin: WorkflowOriginEnum
    r"""Origin of the workflow"""

    workflow_id: Annotated[str, pydantic.Field(alias="workflowId")]
    r"""Workflow identifier"""

    workflow_database_id: Annotated[str, pydantic.Field(alias="workflowDatabaseId")]
    r"""Workflow database identifier"""

    control_values: Annotated[
        Optional[InAppStepResponseDtoControlValues],
        pydantic.Field(alias="controlValues"),
    ] = None
    r"""Control values for the in-app step"""

    issues: Optional[StepIssuesDto] = None
    r"""Issues associated with the step"""
