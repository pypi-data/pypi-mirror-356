"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .channelpreferencedto import ChannelPreferenceDto, ChannelPreferenceDtoTypedDict
from .workflowpreferencedto import WorkflowPreferenceDto, WorkflowPreferenceDtoTypedDict
from novu_py.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Dict
from typing_extensions import NotRequired, TypedDict


UserAllTypedDict = WorkflowPreferenceDtoTypedDict
r"""A preference for the workflow. The values specified here will be used if no preference is specified for a channel."""


UserAll = WorkflowPreferenceDto
r"""A preference for the workflow. The values specified here will be used if no preference is specified for a channel."""


class UserWorkflowPreferencesDtoTypedDict(TypedDict):
    all: UserAllTypedDict
    r"""A preference for the workflow. The values specified here will be used if no preference is specified for a channel."""
    channels: Dict[str, ChannelPreferenceDtoTypedDict]
    r"""Preferences for different communication channels"""


class UserWorkflowPreferencesDto(BaseModel):
    all: UserAll
    r"""A preference for the workflow. The values specified here will be used if no preference is specified for a channel."""

    channels: Dict[str, ChannelPreferenceDto]
    r"""Preferences for different communication channels"""


UserTypedDict = UserWorkflowPreferencesDtoTypedDict
r"""User workflow preferences"""


User = UserWorkflowPreferencesDto
r"""User workflow preferences"""


PreferencesRequestDtoAllTypedDict = WorkflowPreferenceDtoTypedDict
r"""A preference for the workflow. The values specified here will be used if no preference is specified for a channel."""


PreferencesRequestDtoAll = WorkflowPreferenceDto
r"""A preference for the workflow. The values specified here will be used if no preference is specified for a channel."""


class WorkflowTypedDict(TypedDict):
    r"""Workflow-specific preferences"""

    all: PreferencesRequestDtoAllTypedDict
    r"""A preference for the workflow. The values specified here will be used if no preference is specified for a channel."""
    channels: Dict[str, ChannelPreferenceDtoTypedDict]
    r"""Preferences for different communication channels"""


class Workflow(BaseModel):
    r"""Workflow-specific preferences"""

    all: PreferencesRequestDtoAll
    r"""A preference for the workflow. The values specified here will be used if no preference is specified for a channel."""

    channels: Dict[str, ChannelPreferenceDto]
    r"""Preferences for different communication channels"""


class PreferencesRequestDtoTypedDict(TypedDict):
    user: NotRequired[Nullable[UserTypedDict]]
    r"""User workflow preferences"""
    workflow: NotRequired[Nullable[WorkflowTypedDict]]
    r"""Workflow-specific preferences"""


class PreferencesRequestDto(BaseModel):
    user: OptionalNullable[User] = UNSET
    r"""User workflow preferences"""

    workflow: OptionalNullable[Workflow] = UNSET
    r"""Workflow-specific preferences"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["user", "workflow"]
        nullable_fields = ["user", "workflow"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
