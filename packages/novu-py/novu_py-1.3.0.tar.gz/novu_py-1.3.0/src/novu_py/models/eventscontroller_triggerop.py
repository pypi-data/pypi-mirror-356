"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .triggereventrequestdto import (
    TriggerEventRequestDto,
    TriggerEventRequestDtoTypedDict,
)
from .triggereventresponsedto import (
    TriggerEventResponseDto,
    TriggerEventResponseDtoTypedDict,
)
from novu_py.types import BaseModel
from novu_py.utils import FieldMetadata, HeaderMetadata, RequestMetadata
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EventsControllerTriggerRequestTypedDict(TypedDict):
    trigger_event_request_dto: TriggerEventRequestDtoTypedDict
    idempotency_key: NotRequired[str]
    r"""A header for idempotency purposes"""


class EventsControllerTriggerRequest(BaseModel):
    trigger_event_request_dto: Annotated[
        TriggerEventRequestDto,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    idempotency_key: Annotated[
        Optional[str],
        pydantic.Field(alias="idempotency-key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A header for idempotency purposes"""


class EventsControllerTriggerResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: TriggerEventResponseDtoTypedDict


class EventsControllerTriggerResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: TriggerEventResponseDto
