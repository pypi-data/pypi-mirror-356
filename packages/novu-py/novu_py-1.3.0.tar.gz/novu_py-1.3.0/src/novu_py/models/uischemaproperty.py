"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .uicomponentenum import UIComponentEnum
from novu_py.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Any, Dict, List, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


Placeholder5TypedDict = TypeAliasType(
    "Placeholder5TypedDict", Union[str, float, bool, Dict[str, Any]]
)


Placeholder5 = TypeAliasType("Placeholder5", Union[str, float, bool, Dict[str, Any]])


PlaceholderTypedDict = TypeAliasType(
    "PlaceholderTypedDict",
    Union[str, float, bool, Dict[str, Any], List[Placeholder5TypedDict]],
)
r"""Placeholder for the UI Schema Property"""


Placeholder = TypeAliasType(
    "Placeholder", Union[str, float, bool, Dict[str, Any], List[Placeholder5]]
)
r"""Placeholder for the UI Schema Property"""


class UISchemaPropertyTypedDict(TypedDict):
    component: UIComponentEnum
    r"""Component type for the UI Schema Property"""
    placeholder: NotRequired[Nullable[PlaceholderTypedDict]]
    r"""Placeholder for the UI Schema Property"""


class UISchemaProperty(BaseModel):
    component: UIComponentEnum
    r"""Component type for the UI Schema Property"""

    placeholder: OptionalNullable[Placeholder] = UNSET
    r"""Placeholder for the UI Schema Property"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["placeholder"]
        nullable_fields = ["placeholder"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
