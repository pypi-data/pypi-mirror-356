"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .payloadvalidationerrordto import PayloadValidationErrorDto
from novu_py import utils
from novu_py.types import BaseModel, Nullable, OptionalNullable, UNSET
import pydantic
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


MessagePayloadValidationExceptionDto5TypedDict = TypeAliasType(
    "MessagePayloadValidationExceptionDto5TypedDict",
    Union[str, float, bool, Dict[str, Any]],
)


MessagePayloadValidationExceptionDto5 = TypeAliasType(
    "MessagePayloadValidationExceptionDto5", Union[str, float, bool, Dict[str, Any]]
)


class MessagePayloadValidationExceptionDto4TypedDict(TypedDict):
    pass


class MessagePayloadValidationExceptionDto4(BaseModel):
    pass


PayloadValidationExceptionDtoMessageTypedDict = TypeAliasType(
    "PayloadValidationExceptionDtoMessageTypedDict",
    Union[
        MessagePayloadValidationExceptionDto4TypedDict,
        str,
        float,
        bool,
        List[Nullable[MessagePayloadValidationExceptionDto5TypedDict]],
    ],
)
r"""Value that failed validation"""


PayloadValidationExceptionDtoMessage = TypeAliasType(
    "PayloadValidationExceptionDtoMessage",
    Union[
        MessagePayloadValidationExceptionDto4,
        str,
        float,
        bool,
        List[Nullable[MessagePayloadValidationExceptionDto5]],
    ],
)
r"""Value that failed validation"""


class SchemaTypedDict(TypedDict):
    r"""The JSON schema that was used for validation"""


class Schema(BaseModel):
    r"""The JSON schema that was used for validation"""


class PayloadValidationExceptionDtoData(BaseModel):
    status_code: Annotated[float, pydantic.Field(alias="statusCode")]
    r"""HTTP status code of the error response."""

    timestamp: str
    r"""Timestamp of when the error occurred."""

    path: str
    r"""The path where the error occurred."""

    type: str
    r"""Type identifier for payload validation errors"""

    errors: List[PayloadValidationErrorDto]
    r"""Array of detailed validation errors"""

    message: OptionalNullable[PayloadValidationExceptionDtoMessage] = UNSET
    r"""Value that failed validation"""

    ctx: Optional[Dict[str, Any]] = None
    r"""Optional context object for additional error details."""

    error_id: Annotated[Optional[str], pydantic.Field(alias="errorId")] = None
    r"""Optional unique identifier for the error, useful for tracking using Sentry and
    New Relic, only available for 500.
    """

    schema_: Annotated[Optional[Schema], pydantic.Field(alias="schema")] = None
    r"""The JSON schema that was used for validation"""


class PayloadValidationExceptionDto(Exception):
    data: PayloadValidationExceptionDtoData

    def __init__(self, data: PayloadValidationExceptionDtoData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, PayloadValidationExceptionDtoData)
