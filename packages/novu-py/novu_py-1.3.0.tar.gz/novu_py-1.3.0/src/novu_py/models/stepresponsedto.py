"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .controlsmetadatadto import ControlsMetadataDto, ControlsMetadataDtoTypedDict
from .stepissuesdto import StepIssuesDto, StepIssuesDtoTypedDict
from .steptypeenum import StepTypeEnum
from .workfloworiginenum import WorkflowOriginEnum
from novu_py.types import BaseModel
import pydantic
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class StepResponseDtoSlugTypedDict(TypedDict):
    r"""Slug of the step"""


class StepResponseDtoSlug(BaseModel):
    r"""Slug of the step"""


class StepResponseDtoTypedDict(TypedDict):
    controls: ControlsMetadataDtoTypedDict
    r"""Controls metadata for the step"""
    variables: Dict[str, Any]
    r"""JSON Schema for variables, follows the JSON Schema standard"""
    step_id: str
    r"""Unique identifier of the step"""
    id: str
    r"""Database identifier of the step"""
    name: str
    r"""Name of the step"""
    slug: StepResponseDtoSlugTypedDict
    r"""Slug of the step"""
    type: StepTypeEnum
    r"""Type of the step"""
    origin: WorkflowOriginEnum
    r"""Origin of the workflow"""
    workflow_id: str
    r"""Workflow identifier"""
    workflow_database_id: str
    r"""Workflow database identifier"""
    control_values: NotRequired[Dict[str, Any]]
    r"""Control values for the step (alias for controls.values)"""
    issues: NotRequired[StepIssuesDtoTypedDict]
    r"""Issues associated with the step"""


class StepResponseDto(BaseModel):
    controls: ControlsMetadataDto
    r"""Controls metadata for the step"""

    variables: Dict[str, Any]
    r"""JSON Schema for variables, follows the JSON Schema standard"""

    step_id: Annotated[str, pydantic.Field(alias="stepId")]
    r"""Unique identifier of the step"""

    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""Database identifier of the step"""

    name: str
    r"""Name of the step"""

    slug: StepResponseDtoSlug
    r"""Slug of the step"""

    type: StepTypeEnum
    r"""Type of the step"""

    origin: WorkflowOriginEnum
    r"""Origin of the workflow"""

    workflow_id: Annotated[str, pydantic.Field(alias="workflowId")]
    r"""Workflow identifier"""

    workflow_database_id: Annotated[str, pydantic.Field(alias="workflowDatabaseId")]
    r"""Workflow database identifier"""

    control_values: Annotated[
        Optional[Dict[str, Any]], pydantic.Field(alias="controlValues")
    ] = None
    r"""Control values for the step (alias for controls.values)"""

    issues: Optional[StepIssuesDto] = None
    r"""Issues associated with the step"""
