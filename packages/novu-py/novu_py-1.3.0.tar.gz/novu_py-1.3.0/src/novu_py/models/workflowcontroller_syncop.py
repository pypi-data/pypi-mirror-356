"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .syncworkflowdto import SyncWorkflowDto, SyncWorkflowDtoTypedDict
from .workflowresponsedto import WorkflowResponseDto, WorkflowResponseDtoTypedDict
from novu_py.types import BaseModel
from novu_py.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    RequestMetadata,
)
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class WorkflowControllerSyncRequestTypedDict(TypedDict):
    workflow_id: str
    sync_workflow_dto: SyncWorkflowDtoTypedDict
    r"""Sync workflow details"""
    idempotency_key: NotRequired[str]
    r"""A header for idempotency purposes"""


class WorkflowControllerSyncRequest(BaseModel):
    workflow_id: Annotated[
        str,
        pydantic.Field(alias="workflowId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    sync_workflow_dto: Annotated[
        SyncWorkflowDto,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]
    r"""Sync workflow details"""

    idempotency_key: Annotated[
        Optional[str],
        pydantic.Field(alias="idempotency-key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A header for idempotency purposes"""


class WorkflowControllerSyncResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: WorkflowResponseDtoTypedDict


class WorkflowControllerSyncResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: WorkflowResponseDto
