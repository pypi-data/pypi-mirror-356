"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .apikeydto import APIKeyDto, APIKeyDtoTypedDict
from novu_py.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EnvironmentResponseDtoTypedDict(TypedDict):
    id: str
    r"""Unique identifier of the environment"""
    name: str
    r"""Name of the environment"""
    organization_id: str
    r"""Organization ID associated with the environment"""
    identifier: str
    r"""Unique identifier for the environment"""
    api_keys: NotRequired[List[APIKeyDtoTypedDict]]
    r"""List of API keys associated with the environment"""
    parent_id: NotRequired[str]
    r"""Parent environment ID"""
    slug: NotRequired[str]
    r"""URL-friendly slug for the environment"""


class EnvironmentResponseDto(BaseModel):
    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""Unique identifier of the environment"""

    name: str
    r"""Name of the environment"""

    organization_id: Annotated[str, pydantic.Field(alias="_organizationId")]
    r"""Organization ID associated with the environment"""

    identifier: str
    r"""Unique identifier for the environment"""

    api_keys: Annotated[Optional[List[APIKeyDto]], pydantic.Field(alias="apiKeys")] = (
        None
    )
    r"""List of API keys associated with the environment"""

    parent_id: Annotated[Optional[str], pydantic.Field(alias="_parentId")] = None
    r"""Parent environment ID"""

    slug: Optional[str] = None
    r"""URL-friendly slug for the environment"""
