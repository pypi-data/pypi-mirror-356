"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .topicsubscriberdto import TopicSubscriberDto, TopicSubscriberDtoTypedDict
from novu_py.types import BaseModel
from novu_py.utils import FieldMetadata, HeaderMetadata, PathParamMetadata
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TopicsV1ControllerGetTopicSubscriberRequestTypedDict(TypedDict):
    external_subscriber_id: str
    r"""The external subscriber id"""
    topic_key: str
    r"""The topic key"""
    idempotency_key: NotRequired[str]
    r"""A header for idempotency purposes"""


class TopicsV1ControllerGetTopicSubscriberRequest(BaseModel):
    external_subscriber_id: Annotated[
        str,
        pydantic.Field(alias="externalSubscriberId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The external subscriber id"""

    topic_key: Annotated[
        str,
        pydantic.Field(alias="topicKey"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The topic key"""

    idempotency_key: Annotated[
        Optional[str],
        pydantic.Field(alias="idempotency-key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A header for idempotency purposes"""


class TopicsV1ControllerGetTopicSubscriberResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: TopicSubscriberDtoTypedDict


class TopicsV1ControllerGetTopicSubscriberResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: TopicSubscriberDto
