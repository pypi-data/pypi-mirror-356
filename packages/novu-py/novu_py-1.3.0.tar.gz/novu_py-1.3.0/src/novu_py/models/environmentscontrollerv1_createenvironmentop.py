"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .createenvironmentrequestdto import (
    CreateEnvironmentRequestDto,
    CreateEnvironmentRequestDtoTypedDict,
)
from .environmentresponsedto import (
    EnvironmentResponseDto,
    EnvironmentResponseDtoTypedDict,
)
from novu_py.types import BaseModel
from novu_py.utils import FieldMetadata, HeaderMetadata, RequestMetadata
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EnvironmentsControllerV1CreateEnvironmentRequestTypedDict(TypedDict):
    create_environment_request_dto: CreateEnvironmentRequestDtoTypedDict
    idempotency_key: NotRequired[str]
    r"""A header for idempotency purposes"""


class EnvironmentsControllerV1CreateEnvironmentRequest(BaseModel):
    create_environment_request_dto: Annotated[
        CreateEnvironmentRequestDto,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    idempotency_key: Annotated[
        Optional[str],
        pydantic.Field(alias="idempotency-key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A header for idempotency purposes"""


class EnvironmentsControllerV1CreateEnvironmentResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: EnvironmentResponseDtoTypedDict


class EnvironmentsControllerV1CreateEnvironmentResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: EnvironmentResponseDto
