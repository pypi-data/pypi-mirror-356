"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .pushcontrolsmetadataresponsedto import (
    PushControlsMetadataResponseDto,
    PushControlsMetadataResponseDtoTypedDict,
)
from .stepissuesdto import StepIssuesDto, StepIssuesDtoTypedDict
from .steptypeenum import StepTypeEnum
from .workfloworiginenum import WorkflowOriginEnum
from novu_py.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PushStepResponseDtoControlValuesTypedDict(TypedDict):
    r"""Control values for the push step"""

    skip: NotRequired[Dict[str, Any]]
    r"""JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference."""
    subject: NotRequired[str]
    r"""Subject/title of the push notification."""
    body: NotRequired[str]
    r"""Body content of the push notification."""


class PushStepResponseDtoControlValues(BaseModel):
    r"""Control values for the push step"""

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    skip: Optional[Dict[str, Any]] = None
    r"""JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference."""

    subject: Optional[str] = None
    r"""Subject/title of the push notification."""

    body: Optional[str] = None
    r"""Body content of the push notification."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]


class PushStepResponseDtoSlugTypedDict(TypedDict):
    r"""Slug of the step"""


class PushStepResponseDtoSlug(BaseModel):
    r"""Slug of the step"""


class PushStepResponseDtoTypedDict(TypedDict):
    controls: PushControlsMetadataResponseDtoTypedDict
    r"""Controls metadata for the push step"""
    variables: Dict[str, Any]
    r"""JSON Schema for variables, follows the JSON Schema standard"""
    step_id: str
    r"""Unique identifier of the step"""
    id: str
    r"""Database identifier of the step"""
    name: str
    r"""Name of the step"""
    slug: PushStepResponseDtoSlugTypedDict
    r"""Slug of the step"""
    type: StepTypeEnum
    r"""Type of the step"""
    origin: WorkflowOriginEnum
    r"""Origin of the workflow"""
    workflow_id: str
    r"""Workflow identifier"""
    workflow_database_id: str
    r"""Workflow database identifier"""
    control_values: NotRequired[PushStepResponseDtoControlValuesTypedDict]
    r"""Control values for the push step"""
    issues: NotRequired[StepIssuesDtoTypedDict]
    r"""Issues associated with the step"""


class PushStepResponseDto(BaseModel):
    controls: PushControlsMetadataResponseDto
    r"""Controls metadata for the push step"""

    variables: Dict[str, Any]
    r"""JSON Schema for variables, follows the JSON Schema standard"""

    step_id: Annotated[str, pydantic.Field(alias="stepId")]
    r"""Unique identifier of the step"""

    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""Database identifier of the step"""

    name: str
    r"""Name of the step"""

    slug: PushStepResponseDtoSlug
    r"""Slug of the step"""

    type: StepTypeEnum
    r"""Type of the step"""

    origin: WorkflowOriginEnum
    r"""Origin of the workflow"""

    workflow_id: Annotated[str, pydantic.Field(alias="workflowId")]
    r"""Workflow identifier"""

    workflow_database_id: Annotated[str, pydantic.Field(alias="workflowDatabaseId")]
    r"""Workflow database identifier"""

    control_values: Annotated[
        Optional[PushStepResponseDtoControlValues],
        pydantic.Field(alias="controlValues"),
    ] = None
    r"""Control values for the push step"""

    issues: Optional[StepIssuesDto] = None
    r"""Issues associated with the step"""
