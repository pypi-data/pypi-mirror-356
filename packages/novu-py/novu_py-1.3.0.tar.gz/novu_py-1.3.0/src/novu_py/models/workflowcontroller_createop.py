"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .createworkflowdto import CreateWorkflowDto, CreateWorkflowDtoTypedDict
from .workflowresponsedto import WorkflowResponseDto, WorkflowResponseDtoTypedDict
from novu_py.types import BaseModel
from novu_py.utils import FieldMetadata, HeaderMetadata, RequestMetadata
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class WorkflowControllerCreateRequestTypedDict(TypedDict):
    create_workflow_dto: CreateWorkflowDtoTypedDict
    r"""Workflow creation details"""
    idempotency_key: NotRequired[str]
    r"""A header for idempotency purposes"""


class WorkflowControllerCreateRequest(BaseModel):
    create_workflow_dto: Annotated[
        CreateWorkflowDto,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]
    r"""Workflow creation details"""

    idempotency_key: Annotated[
        Optional[str],
        pydantic.Field(alias="idempotency-key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A header for idempotency purposes"""


class WorkflowControllerCreateResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: WorkflowResponseDtoTypedDict


class WorkflowControllerCreateResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: WorkflowResponseDto
