"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from novu_py.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class SubscriberDtoTypedDict(TypedDict):
    id: str
    r"""The identifier of the subscriber"""
    subscriber_id: str
    r"""The external identifier of the subscriber"""
    avatar: NotRequired[Nullable[str]]
    r"""The avatar URL of the subscriber"""
    first_name: NotRequired[Nullable[str]]
    r"""The first name of the subscriber"""
    last_name: NotRequired[Nullable[str]]
    r"""The last name of the subscriber"""
    email: NotRequired[Nullable[str]]
    r"""The email of the subscriber"""


class SubscriberDto(BaseModel):
    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""The identifier of the subscriber"""

    subscriber_id: Annotated[str, pydantic.Field(alias="subscriberId")]
    r"""The external identifier of the subscriber"""

    avatar: OptionalNullable[str] = UNSET
    r"""The avatar URL of the subscriber"""

    first_name: Annotated[OptionalNullable[str], pydantic.Field(alias="firstName")] = (
        UNSET
    )
    r"""The first name of the subscriber"""

    last_name: Annotated[OptionalNullable[str], pydantic.Field(alias="lastName")] = (
        UNSET
    )
    r"""The last name of the subscriber"""

    email: OptionalNullable[str] = UNSET
    r"""The email of the subscriber"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["avatar", "firstName", "lastName", "email"]
        nullable_fields = ["avatar", "firstName", "lastName", "email"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
