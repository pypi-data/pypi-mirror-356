"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .actiondto import ActionDto, ActionDtoTypedDict
from .redirectdto import RedirectDto, RedirectDtoTypedDict
from .steptypeenum import StepTypeEnum
from novu_py.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ControlValuesTypedDict(TypedDict):
    r"""Control values for the In-App step"""

    skip: NotRequired[Dict[str, Any]]
    r"""JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference."""
    body: NotRequired[str]
    r"""Content/body of the in-app message. Required if subject is empty."""
    subject: NotRequired[str]
    r"""Subject/title of the in-app message. Required if body is empty."""
    avatar: NotRequired[str]
    r"""URL for an avatar image. Must be a valid URL or start with / or {{ variable }}."""
    primary_action: NotRequired[ActionDtoTypedDict]
    r"""Primary action button details."""
    secondary_action: NotRequired[ActionDtoTypedDict]
    r"""Secondary action button details."""
    redirect: NotRequired[RedirectDtoTypedDict]
    r"""Redirection URL configuration for the main content click (if no actions defined/clicked).."""
    disable_output_sanitization: NotRequired[bool]
    r"""Disable sanitization of the output."""
    data: NotRequired[Dict[str, Any]]
    r"""Additional data payload for the step."""


class ControlValues(BaseModel):
    r"""Control values for the In-App step"""

    skip: Optional[Dict[str, Any]] = None
    r"""JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference."""

    body: Optional[str] = None
    r"""Content/body of the in-app message. Required if subject is empty."""

    subject: Optional[str] = None
    r"""Subject/title of the in-app message. Required if body is empty."""

    avatar: Optional[str] = None
    r"""URL for an avatar image. Must be a valid URL or start with / or {{ variable }}."""

    primary_action: Annotated[
        Optional[ActionDto], pydantic.Field(alias="primaryAction")
    ] = None
    r"""Primary action button details."""

    secondary_action: Annotated[
        Optional[ActionDto], pydantic.Field(alias="secondaryAction")
    ] = None
    r"""Secondary action button details."""

    redirect: Optional[RedirectDto] = None
    r"""Redirection URL configuration for the main content click (if no actions defined/clicked).."""

    disable_output_sanitization: Annotated[
        Optional[bool], pydantic.Field(alias="disableOutputSanitization")
    ] = False
    r"""Disable sanitization of the output."""

    data: Optional[Dict[str, Any]] = None
    r"""Additional data payload for the step."""


class InAppStepUpsertDtoTypedDict(TypedDict):
    name: str
    r"""Name of the step"""
    type: StepTypeEnum
    r"""Type of the step"""
    id: NotRequired[str]
    r"""Unique identifier of the step"""
    control_values: NotRequired[Nullable[ControlValuesTypedDict]]
    r"""Control values for the In-App step"""


class InAppStepUpsertDto(BaseModel):
    name: str
    r"""Name of the step"""

    type: StepTypeEnum
    r"""Type of the step"""

    id: Annotated[Optional[str], pydantic.Field(alias="_id")] = None
    r"""Unique identifier of the step"""

    control_values: Annotated[
        OptionalNullable[ControlValues], pydantic.Field(alias="controlValues")
    ] = UNSET
    r"""Control values for the In-App step"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["_id", "controlValues"]
        nullable_fields = ["controlValues"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
