"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from novu_py.types import BaseModel
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PatchWorkflowDtoTypedDict(TypedDict):
    active: NotRequired[bool]
    r"""Activate or deactivate the workflow"""
    name: NotRequired[str]
    r"""New name for the workflow"""
    description: NotRequired[str]
    r"""Updated description of the workflow"""
    tags: NotRequired[List[str]]
    r"""Tags associated with the workflow"""
    payload_schema: NotRequired[Dict[str, Any]]
    r"""The payload JSON Schema for the workflow"""
    validate_payload: NotRequired[bool]
    r"""Enable or disable payload schema validation"""


class PatchWorkflowDto(BaseModel):
    active: Optional[bool] = None
    r"""Activate or deactivate the workflow"""

    name: Optional[str] = None
    r"""New name for the workflow"""

    description: Optional[str] = None
    r"""Updated description of the workflow"""

    tags: Optional[List[str]] = None
    r"""Tags associated with the workflow"""

    payload_schema: Annotated[
        Optional[Dict[str, Any]], pydantic.Field(alias="payloadSchema")
    ] = None
    r"""The payload JSON Schema for the workflow"""

    validate_payload: Annotated[
        Optional[bool], pydantic.Field(alias="validatePayload")
    ] = None
    r"""Enable or disable payload schema validation"""
