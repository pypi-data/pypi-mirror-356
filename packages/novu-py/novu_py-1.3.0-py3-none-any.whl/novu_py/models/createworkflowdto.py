"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chatstepupsertdto import ChatStepUpsertDto, ChatStepUpsertDtoTypedDict
from .customstepupsertdto import CustomStepUpsertDto, CustomStepUpsertDtoTypedDict
from .delaystepupsertdto import DelayStepUpsertDto, DelayStepUpsertDtoTypedDict
from .digeststepupsertdto import DigestStepUpsertDto, DigestStepUpsertDtoTypedDict
from .emailstepupsertdto import EmailStepUpsertDto, EmailStepUpsertDtoTypedDict
from .inappstepupsertdto import InAppStepUpsertDto, InAppStepUpsertDtoTypedDict
from .preferencesrequestdto import PreferencesRequestDto, PreferencesRequestDtoTypedDict
from .pushstepupsertdto import PushStepUpsertDto, PushStepUpsertDtoTypedDict
from .smsstepupsertdto import SmsStepUpsertDto, SmsStepUpsertDtoTypedDict
from .workflowcreationsourceenum import WorkflowCreationSourceEnum
from novu_py.types import BaseModel
from novu_py.utils import get_discriminator
import pydantic
from pydantic import Discriminator, Tag
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


StepsModelTypedDict = TypeAliasType(
    "StepsModelTypedDict",
    Union[
        InAppStepUpsertDtoTypedDict,
        EmailStepUpsertDtoTypedDict,
        SmsStepUpsertDtoTypedDict,
        PushStepUpsertDtoTypedDict,
        ChatStepUpsertDtoTypedDict,
        DelayStepUpsertDtoTypedDict,
        DigestStepUpsertDtoTypedDict,
        CustomStepUpsertDtoTypedDict,
    ],
)


StepsModel = Annotated[
    Union[
        Annotated[InAppStepUpsertDto, Tag("in_app")],
        Annotated[EmailStepUpsertDto, Tag("email")],
        Annotated[SmsStepUpsertDto, Tag("sms")],
        Annotated[PushStepUpsertDto, Tag("push")],
        Annotated[ChatStepUpsertDto, Tag("chat")],
        Annotated[DelayStepUpsertDto, Tag("delay")],
        Annotated[DigestStepUpsertDto, Tag("digest")],
        Annotated[CustomStepUpsertDto, Tag("custom")],
    ],
    Discriminator(lambda m: get_discriminator(m, "type", "type")),
]


class CreateWorkflowDtoTypedDict(TypedDict):
    name: str
    r"""Name of the workflow"""
    workflow_id: str
    r"""Unique identifier for the workflow"""
    steps: List[StepsModelTypedDict]
    r"""Steps of the workflow"""
    description: NotRequired[str]
    r"""Description of the workflow"""
    tags: NotRequired[List[str]]
    r"""Tags associated with the workflow"""
    active: NotRequired[bool]
    r"""Whether the workflow is active"""
    source: NotRequired[WorkflowCreationSourceEnum]
    r"""Source of workflow creation"""
    preferences: NotRequired[PreferencesRequestDtoTypedDict]
    r"""Workflow preferences"""
    payload_schema: NotRequired[Dict[str, Any]]
    r"""The payload JSON Schema for the workflow"""
    validate_payload: NotRequired[bool]
    r"""Enable or disable payload schema validation"""


class CreateWorkflowDto(BaseModel):
    name: str
    r"""Name of the workflow"""

    workflow_id: Annotated[str, pydantic.Field(alias="workflowId")]
    r"""Unique identifier for the workflow"""

    steps: List[StepsModel]
    r"""Steps of the workflow"""

    description: Optional[str] = None
    r"""Description of the workflow"""

    tags: Optional[List[str]] = None
    r"""Tags associated with the workflow"""

    active: Optional[bool] = False
    r"""Whether the workflow is active"""

    source: Annotated[
        Optional[WorkflowCreationSourceEnum], pydantic.Field(alias="__source")
    ] = WorkflowCreationSourceEnum.EDITOR
    r"""Source of workflow creation"""

    preferences: Optional[PreferencesRequestDto] = None
    r"""Workflow preferences"""

    payload_schema: Annotated[
        Optional[Dict[str, Any]], pydantic.Field(alias="payloadSchema")
    ] = None
    r"""The payload JSON Schema for the workflow"""

    validate_payload: Annotated[
        Optional[bool], pydantic.Field(alias="validatePayload")
    ] = None
    r"""Enable or disable payload schema validation"""
