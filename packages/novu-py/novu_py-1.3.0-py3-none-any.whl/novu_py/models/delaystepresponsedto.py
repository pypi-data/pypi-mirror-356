"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .delaycontrolsmetadataresponsedto import (
    DelayControlsMetadataResponseDto,
    DelayControlsMetadataResponseDtoTypedDict,
)
from .stepissuesdto import StepIssuesDto, StepIssuesDtoTypedDict
from .steptypeenum import StepTypeEnum
from .workfloworiginenum import WorkflowOriginEnum
from enum import Enum
from novu_py.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DelayStepResponseDtoType(str, Enum):
    r"""Type of the delay. Currently only 'regular' is supported by the schema."""

    REGULAR = "regular"


class DelayStepResponseDtoUnit(str, Enum):
    r"""Unit of time for the delay amount."""

    SECONDS = "seconds"
    MINUTES = "minutes"
    HOURS = "hours"
    DAYS = "days"
    WEEKS = "weeks"
    MONTHS = "months"


class DelayStepResponseDtoControlValuesTypedDict(TypedDict):
    r"""Control values for the delay step"""

    amount: float
    r"""Amount of time to delay."""
    unit: DelayStepResponseDtoUnit
    r"""Unit of time for the delay amount."""
    skip: NotRequired[Dict[str, Any]]
    r"""JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference."""
    type: NotRequired[DelayStepResponseDtoType]
    r"""Type of the delay. Currently only 'regular' is supported by the schema."""


class DelayStepResponseDtoControlValues(BaseModel):
    r"""Control values for the delay step"""

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    amount: float
    r"""Amount of time to delay."""

    unit: DelayStepResponseDtoUnit
    r"""Unit of time for the delay amount."""

    skip: Optional[Dict[str, Any]] = None
    r"""JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference."""

    type: Optional[DelayStepResponseDtoType] = DelayStepResponseDtoType.REGULAR
    r"""Type of the delay. Currently only 'regular' is supported by the schema."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]


class DelayStepResponseDtoSlugTypedDict(TypedDict):
    r"""Slug of the step"""


class DelayStepResponseDtoSlug(BaseModel):
    r"""Slug of the step"""


class DelayStepResponseDtoTypedDict(TypedDict):
    controls: DelayControlsMetadataResponseDtoTypedDict
    r"""Controls metadata for the delay step"""
    variables: Dict[str, Any]
    r"""JSON Schema for variables, follows the JSON Schema standard"""
    step_id: str
    r"""Unique identifier of the step"""
    id: str
    r"""Database identifier of the step"""
    name: str
    r"""Name of the step"""
    slug: DelayStepResponseDtoSlugTypedDict
    r"""Slug of the step"""
    type: StepTypeEnum
    r"""Type of the step"""
    origin: WorkflowOriginEnum
    r"""Origin of the workflow"""
    workflow_id: str
    r"""Workflow identifier"""
    workflow_database_id: str
    r"""Workflow database identifier"""
    control_values: NotRequired[DelayStepResponseDtoControlValuesTypedDict]
    r"""Control values for the delay step"""
    issues: NotRequired[StepIssuesDtoTypedDict]
    r"""Issues associated with the step"""


class DelayStepResponseDto(BaseModel):
    controls: DelayControlsMetadataResponseDto
    r"""Controls metadata for the delay step"""

    variables: Dict[str, Any]
    r"""JSON Schema for variables, follows the JSON Schema standard"""

    step_id: Annotated[str, pydantic.Field(alias="stepId")]
    r"""Unique identifier of the step"""

    id: Annotated[str, pydantic.Field(alias="_id")]
    r"""Database identifier of the step"""

    name: str
    r"""Name of the step"""

    slug: DelayStepResponseDtoSlug
    r"""Slug of the step"""

    type: StepTypeEnum
    r"""Type of the step"""

    origin: WorkflowOriginEnum
    r"""Origin of the workflow"""

    workflow_id: Annotated[str, pydantic.Field(alias="workflowId")]
    r"""Workflow identifier"""

    workflow_database_id: Annotated[str, pydantic.Field(alias="workflowDatabaseId")]
    r"""Workflow database identifier"""

    control_values: Annotated[
        Optional[DelayStepResponseDtoControlValues],
        pydantic.Field(alias="controlValues"),
    ] = None
    r"""Control values for the delay step"""

    issues: Optional[StepIssuesDto] = None
    r"""Issues associated with the step"""
