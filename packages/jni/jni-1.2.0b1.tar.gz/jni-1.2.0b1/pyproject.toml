# Copyright (c) 2004 Adam Karpierz
# SPDX-License-Identifier: CC-BY-NC-ND-4.0 OR LicenseRef-Proprietary
# Please refer to the accompanying LICENSE file.

[build-system]
build-backend = 'setuptools.build_meta'
requires = ['setuptools>=80.9.0', 'packaging>=25.0.0', 'tox>=4.27.0',
            'cffi>=1.17.1', 'cython>=3.1.2', 'pkg-about>=1.3.6']

[project]
name        = 'jni'
version     = '1.2.0b1'
description = 'Python bridge for the Java Native Interface.'
authors = [
    { name  = 'Adam Karpierz' },
    { email = 'adam@karpierz.net' },
]
maintainers = [
    { name  = 'Adam Karpierz' },
    { email = 'adam@karpierz.net' },
]
license = 'CC-BY-NC-ND-4.0 OR LicenseRef-Proprietary'
license-files = ['LICENSE']
urls.Homepage      = 'https://pypi.org/project/jni/'
urls.Documentation = 'https://jni.readthedocs.io/'
urls.Download      = 'https://pypi.org/project/jni/'
urls.Source        = 'https://github.com/karpierz/jni'
urls.Issues        = 'https://github.com/karpierz/jni/issues'
keywords = ['jni', 'jvm', 'jtypes', 'jt', 'jpype', 'jep', 'pyjnius', 'jpy', 'javabridge',
            'pyjava', 'jcc', 'py4j', 'jython', 'java', 'pythonjava', 'rubicon-java']
classifiers = [
    'Development Status :: 4 - Beta',
    'Intended Audience :: Developers',
    'Operating System :: OS Independent',
    'Natural Language :: Polish',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Programming Language :: Python :: 3.14',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: Implementation :: CPython',
    'Programming Language :: Python :: Implementation :: PyPy',
    'Programming Language :: Java',
    'Programming Language :: C',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Software Development :: Libraries :: Java Libraries',
]
requires-python = '>=3.10.0,<4.0.0'
dependencies = [
    # mandatory
    'setuptools>=80.9.0',
    'pkg-about>=1.3.6',
    # others
]
dynamic = ['readme']
optional-dependencies.'cffi' = [
    'cffi>=1.17.1',
]
optional-dependencies.'cython' = [
    'cython>=3.1.2',
]
optional-dependencies.'doc' = [
    'Sphinx>=8.1.3',
    'sphinx-autodoc-typehints>=3.0.1',
    'sphinx-toolbox>=4.0.0',
    'sphinx-tabs>=3.4.5', # don't touch! sphinx-toolbox requires <3.4.7
    'sphinx-copybutton>=0.5.2',
    'sphinxcontrib-spelling>=8.0.1',
    'sphinx-lint>=1.0.0',
    'restructuredtext-lint>=1.4.0',
    'nbsphinx>=0.9.7',
]
optional-dependencies.'test' = [
    'deepdiff>=8.5.0',
    'rich>=14.0.0',
]

[project.scripts]
#'jni' = 'jni.__main__:main'

[project.gui-scripts]
#'jni-gui' = 'jni:main_gui'

#[project.entry-points.'jni.magical']
#epoint = 'jni:main_epoint'

[tool.setuptools.dynamic]
readme = { file = ['README.rst', 'CHANGES.rst'], content-type = 'text/x-rst; charset=UTF-8' }

[tool.setuptools]
include-package-data = true
platforms = ['any']
zip-safe = false

[tool.setuptools.packages.find]
namespaces = false
where = ['src']
exclude = [
    'jni.capi.java',
]

[tool.setuptools.package-dir]
'' = 'src'
#'jni.tests' = 'tests'

[tool.setuptools.package-data]
jni = [
    'jni.cfg',
    'jni.c',
    'pvm.c',
]

[tool.setuptools.exclude-package-data]
'*' = ['*.h','*.cpp','*.hpp','*.cxx','*.hxx','*.pyx','*.pxd', '*.txt']
'jni.capi' = [
    'jni.c',
    'java',
]
'jni.cython' = [
    'jni.c',
]

[tool.coverage]
# run
run.source = [
    'jni',
    'tests',
]
run.omit = [
]
run.branch = true
run.data_file = '.tox/coverage/.coverage'
run.plugins = ['covdefaults']
# report
report.exclude_lines = [
    # Regexes
    # Have to re-enable the standard pragma
    '^\s*if\s+self\.debug\s*:',
    '^\s*if\s+__debug__\s*:',
    '^\s*if\s+(0|False)\s*:',
    '''if\s+__name__.*\s*==\s*['"]__main__['"]\s*:''',
    '^\s*@unittest\.skip\(',
    '^\s*@unittest\.skipIf\(sys\.platform\.startswith\("win"\)',
]
report.omit = [
    'tests/run.py',
]
report.skip_covered = false
# html report
html.directory = '.tox/coverage/.coverage.html'

[tool.flake8]
filename = ['*.py','*.pyx']
#include = ['tests']
#exclude = ['.tox','*.egg','.git','__pycache__','build','_build','docs/_build','dist']
extend-exclude = [
    'jni.py',
]
max-line-length = 99
ignore = ['E126','E203','E221','E251','E302','E701','E702','E731',
          'E122','E127','E128','E222','E272','E241','E266','E226','E704',
          'D100','D101','D102','D103','D104','D400','D401','D202',
          'N806','N802','N803','N801',
          'I100','W503']
# (e.g. 'E4','W') default: 'E121','E123','126','226','E24','704'
#select =
#select = ['E','W','F','N','I']
per-file-ignores = [
    '*/jni/_util.py: E501',
    '*/jni/ctypes/__init__.py: E501,A005',
    '*/jni/cffi/__init__.py: E501',
    '*/jni/capi/__init__.py: E501,F405',
    '*/jni/cython/__init__.py: E501,F405',
    '*/jni/cython/jni.pyx: E203,E225,E226,E227,E402,E741,E901,E999,W503,W504',
]
output-file = '.tox/lint/flake8out.txt'
count = true
#show-pep8,
#show-source
#verbose
#quiet

#
# Configuration(s) for tox
#

[tool.tox]
env_list = [{replace='ref',of=['tool','tox','labels','py'],extend=true}, 'lint', 'docs']
min_version = '4.27.0'
skip_missing_interpreters = true
requires = [
    {replace='ref',of=['tool','tox','_','base','deps'],extend=true},
    'virtualenv>=20.31.2',
    'tox-backtick>=0.6.4',
]
[tool.tox.labels]
py = ['py310','py311','py312','py313','py314', 'pypy310','pypy311']
py-build = ['py310-build','py311-build','py312-build','py313-build','py314-build', 'pypy310-build','pypy311-build']
prepare  = ['prepare']
coverage = ['coverage']
lint = ['lint']
docs = ['docs']
build  = [{replace='ref',of=['tool','tox','labels','py'],extend=true},
          {replace='ref',of=['tool','tox','labels','py-build'],extend=true}, 'docs', 'build']
deploy = [{replace='ref',of=['tool','tox','labels','build'],extend=true}, 'publish']

[tool.tox._.base]
base_python = ['python3.13']
deps = [
    'pip>=25.1.1',
    'setuptools>=80.9.0',
]
package_subdir = 'jni'

[tool.tox.env_run_base]
description = "Run tests under {base_python}"
pass_env = ['JAVA_HOME']
set_env.PYTHONDONTWRITEBYTECODE = '1'
set_env.PKG_IMPL = "`python -W ignore -c \"import platform ; pimpl = platform.python_implementation() ; print('cp' if pimpl == 'CPython' else 'pp' if pimpl == 'PyPy' else '', end='')\" 2> nul`"
set_env.PKG_PVER = "`python -W ignore -c \"import platform ; print(''.join(platform.python_version_tuple()[:2]), end='')\" 2> nul`"
set_env.PKG_NAME = "`python -W ignore -c \"import setuptools ; setuptools._distutils.core._setup_stop_after='config' ; print(setuptools.setup().metadata.get_name(),     end='')\" 2> nul`"
set_env.PKG_DIST = "`python -W ignore -c \"import setuptools ; setuptools._distutils.core._setup_stop_after='config' ; print(setuptools.setup().metadata.get_fullname(), end='')\" 2> nul`"
commands = [
    ['{env_python}','--version'],
    ['{env_python}','-m','tests',{replace='posargs',extend=true}],
]
extras = ['test', 'cffi', 'cython']
deps = [
    {replace='ref',of=['tool','tox','_','base','deps'],extend=true},
]

[tool.tox.env.'prepare']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
skip_install = true
allowlist_externals = [
    'cmd',
    '.build',
]
commands = [
    ['cmd','/C','if','exist','.build.cmd','.build.cmd'],
]
extras = []
deps = []

[tool.tox.env.'coverage']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
commands = [
    ['{env_python}','-m','coverage','erase'],
    ['-','{env_python}','-m','coverage','run','-m','tests',{replace="posargs",extend=true}],
    ['-','{env_python}','-m','coverage','html'],
    ['{env_python}','-m','coverage','report'],
]
deps = [
    {replace='ref',of=['tool','tox','env_run_base','deps'],extend=true},
    'coverage>=7.9.1',
    'covdefaults>=2.3.0',
    'diff-cover>=9.3.2',
]

[tool.tox.env.'docs']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
commands = [
    ['{env_python}','-m','sphinxlint','--ignore','.tox','--ignore','build','--ignore','dist'],
   #['{env_python}','-m','sphinx.apidoc','-f','{envsitepackagesdir}/{[tool.tox._.base]package_subdir}'],
    ['{env_python}','-m','sphinx.cmd.build','-W','-a','-b','html','-E','./docs','./build/docs/html'],
    ['{env_python}','-m','sphinx.cmd.build','-W','-a','-b','linkcheck','./docs','./build/docs/html'],
    ['{env_python}','-m','sphinx.cmd.build','-W','-a','-b','doctest',  './docs','./build/docs/html'],
]
extras = ['doc']
deps = [
    {replace='ref',of=['tool','tox','_','base','deps'],extend=true},
]

[tool.tox.env.'build']
depends = [{replace='ref',of=['tool','tox','labels','py'],extend=true},
           {replace='ref',of=['tool','tox','labels','py-build'],extend=true}, 'docs']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
commands = [
    ['{env_python}','-m','build','--sdist'],
    # check out for PyPi
    ['{env_python}','-m','twine','check','dist/*'],
]
deps = [
    {replace='ref',of=['tool','tox','env_run_base','deps'],extend=true},
    'build>=1.2.2.post1',
    'twine>=6.1.0',
]

#[tool.tox.env]
[tool.tox.env.'py310-build']
commands = [{replace='ref',of=['tool','tox','env','_','build','commands'],extend=true}]
deps     = [{replace='ref',of=['tool','tox','env','_','build','deps'],extend=true}]
[tool.tox.env.'py311-build']
commands = [{replace='ref',of=['tool','tox','env','_','build','commands'],extend=true}]
deps     = [{replace='ref',of=['tool','tox','env','_','build','deps'],extend=true}]
[tool.tox.env.'py312-build']
commands = [{replace='ref',of=['tool','tox','env','_','build','commands'],extend=true}]
deps     = [{replace='ref',of=['tool','tox','env','_','build','deps'],extend=true}]
[tool.tox.env.'py313-build']
commands = [{replace='ref',of=['tool','tox','env','_','build','commands'],extend=true}]
deps     = [{replace='ref',of=['tool','tox','env','_','build','deps'],extend=true}]
[tool.tox.env.'py314-build']
commands = [{replace='ref',of=['tool','tox','env','_','build','commands'],extend=true}]
deps     = [{replace='ref',of=['tool','tox','env','_','build','deps'],extend=true}]
[tool.tox.env.'pypy310-build']
commands = [{replace='ref',of=['tool','tox','env','_','build','commands'],extend=true}]
deps     = [{replace='ref',of=['tool','tox','env','_','build','deps'],extend=true}]
[tool.tox.env.'pypy311-build']
commands = [{replace='ref',of=['tool','tox','env','_','build','commands'],extend=true}]
deps     = [{replace='ref',of=['tool','tox','env','_','build','deps'],extend=true}]
[tool.tox.env._.build]
#depends = '{envname}'
commands = [
    ['{env_python}','-m','build','--wheel'],
    ['{env_python}','-m','pyc_wheel','--quiet','dist/{env:PKG_DIST}-{env:PKG_IMPL}{env:PKG_PVER}-*.whl'],
]
deps = [
    {replace='ref',of=['tool','tox','env_run_base','deps'],extend=true},
    'build>=1.2.2.post1',
    'pyc-wheel>=1.3.5',
]

[tool.tox.env.'publish']
depends = ['build']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
skip_install = true
commands = [
    # publish on PyPi
    ['{env_python}','-m','twine','upload','dist/*'],
]
extras = []
deps = [
    'twine>=6.1.0',
]

[tool.tox.env.'lint']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
commands = [
    ['{env_python}','-m','flake8','{envsitepackagesdir}/{[tool.tox._.base]package_subdir}/'],
]
extras = []
deps = [
    {replace='ref',of=['tool','tox','env_run_base','deps'],extend=true},
    'flake8>=7.2.0',
    'flake8-pyproject>=1.2.3',
    'flake8-docstrings>=1.7.0',
    'pep8-naming>=0.15.1',
    'flake8-builtins>=2.5.0',
    'flake8-deprecated>=2.2.1',
]
