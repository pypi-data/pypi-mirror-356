"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def authorize(
    clientID: str,
    redirectURI: str,
    responseType: str,
    nonce: str = None,
    scope: str = None,
    state: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Request authorization to a OAuth client (INTERNAL)

    :param str clientID: The clientID of the requesting client.
    :param str redirectURI: The redirectURI requested by the client.
    :param list responseType: Type of response requested.
    :param str nonce: A nonce requested by the client. The nonce should pass through unmodified and follow the token issued for this request.
    :param list scope: The scopes requested by the client. If \'openid\' is in scope\, this is an OpenID request.
    :param str state: The state submitted by the client. This state should follow unmodified back to the redirect response after a valid client authorization.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/authorize".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send clientID if the argument was provided, don't send null values
    if clientID is not None:
        body.update({"clientID": clientID})
    # Only send nonce if the argument was provided, don't send null values
    if nonce is not None:
        body.update({"nonce": nonce})
    # Only send redirectURI if the argument was provided, don't send null values
    if redirectURI is not None:
        body.update({"redirectURI": redirectURI})
    # Only send responseType if the argument was provided, don't send null values
    if responseType is not None:
        body.update({"responseType": responseType})
    # Only send scope if the argument was provided, don't send null values
    if scope is not None:
        body.update({"scope": scope})
    # Only send state if the argument was provided, don't send null values
    if state is not None:
        body.update({"state": state})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def create_oauth2_client(
    authenticationMethod: str,
    clientIPRange: str,
    description: str,
    mainURI: str,
    name: str,
    permissionScope: str,
    requiredFunction: str,
    shortName: str,
    clientSecret: str = None,
    customer: str = None,
    domain: str = None,
    hidden: bool = None,
    openIDCustomClaims: list = None,
    permittedScopes: str = None,
    redirectURI: str = None,
    redirectURIs: str = None,
    maxSecurityLevel: str = "external",
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Define a new OAuth2 client (PUBLIC)

    :param str authenticationMethod: The authentication method required for this client. Default is password.
    :param list clientIPRange: A list of CIDR IP ranges which the client will be permitted from. \[format\:ip\]
    :param str description: A description of this resource.
    :param str mainURI: The main landing page for this resource. This will be used to link to the application from Argus.
    :param str name: A name describing this resource. This name will show up when listing external resources.
    :param str permissionScope: The function\/role \(id or name\) to constrain the delegated client session to\, restricting what the resource client will be allowed to do on behalf of the user. The delegated client session will be constrained to the least set of the users current session permissions\, and this role.
    :param str requiredFunction: The function \(id or name\) required to grant access to this resource. If customer is specified\, this function is required for that particular customer.
    :param str shortName: A shortname describing this resource. This name will show up when listing external resources.
    :param str clientSecret: If authenticationMethod is password\, the password must be provided in the clientSecret parameter.
    :param str customer: Specifying a customer will restrict this resource to a specific customer. This will limit access to this resource to users having the required function for this specific customer. The resource clients delegated session will also be constrained to this particular customer. If customer is not specified\, access to this resource will be given to users having the requiredFunction for any customer.
    :param str domain: Specifies the domain in which this resource is defined. The user must have the required function for this domain. If customer is set\, the customer must be defined in this domain. If this field is not set\, it defaults to the current users domain.
    :param bool hidden: If true\, this client is by default excluded in the oauth external client list
    :param list openIDCustomClaims: Optional custom claims configuration. See documentation for valid configuration format per custom claim.
    :param list permittedScopes: A list of scopes the client will be permitted to make claims for. Default is no scopes permitted.
    :param str redirectURI: This field is DEPRECATED. Use redirectURIs instead.
    :param list redirectURIs: The redirect URIs to allow when redirecting from the OAuth authorization endpoint.
    :param str maxSecurityLevel: Max security level for this client
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/client".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send authenticationMethod if the argument was provided, don't send null values
    if authenticationMethod is not None:
        body.update({"authenticationMethod": authenticationMethod})
    # Only send clientIPRange if the argument was provided, don't send null values
    if clientIPRange is not None:
        body.update({"clientIPRange": clientIPRange})
    # Only send clientSecret if the argument was provided, don't send null values
    if clientSecret is not None:
        body.update({"clientSecret": clientSecret})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        body.update({"domain": domain})
    # Only send hidden if the argument was provided, don't send null values
    if hidden is not None:
        body.update({"hidden": hidden})
    # Only send mainURI if the argument was provided, don't send null values
    if mainURI is not None:
        body.update({"mainURI": mainURI})
    # Only send maxSecurityLevel if the argument was provided, don't send null values
    if maxSecurityLevel is not None:
        body.update({"maxSecurityLevel": maxSecurityLevel})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send openIDCustomClaims if the argument was provided, don't send null values
    if openIDCustomClaims is not None:
        body.update({"openIDCustomClaims": openIDCustomClaims})
    # Only send permissionScope if the argument was provided, don't send null values
    if permissionScope is not None:
        body.update({"permissionScope": permissionScope})
    # Only send permittedScopes if the argument was provided, don't send null values
    if permittedScopes is not None:
        body.update({"permittedScopes": permittedScopes})
    # Only send redirectURI if the argument was provided, don't send null values
    if redirectURI is not None:
        body.update({"redirectURI": redirectURI})
    # Only send redirectURIs if the argument was provided, don't send null values
    if redirectURIs is not None:
        body.update({"redirectURIs": redirectURIs})
    # Only send requiredFunction if the argument was provided, don't send null values
    if requiredFunction is not None:
        body.update({"requiredFunction": requiredFunction})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_oauth2_client(
    idOrShortname: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete a OAuth2 client (PUBLIC)

    :param str idOrShortname: ID or shortname of client to delete
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises SpecifiedObjectWasNotFoundException: on 404
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/client/{idOrShortname}".format(
        idOrShortname=idOrShortname
    )

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_oauth2_client(
    idOrShortname: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Fetch a OAuth2 client descriptor (PUBLIC)

    :param str idOrShortname: ID or shortname of client to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises SpecifiedObjectWasNotFoundException: on 404
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/client/{idOrShortname}".format(
        idOrShortname=idOrShortname
    )

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_token(
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Exchange a OAuth2 authorization code with an access token (PUBLIC)

    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises ValidationErrorException: on 400
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/token".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}

    response = session.post(
        route,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_user_info(
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Return OpenID userinfo (PUBLIC)

    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/userinfo".format()

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_oauth2_clients(
    customer: str = None,
    domain: str = None,
    keywords: str = None,
    sortBy: str = None,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List available OAuth2 client descriptors (PUBLIC)

    :param list customer: Limit results to clients for this customer \(or subcustomers\)
    :param list domain: Limit results to clients for this domain
    :param list keywords: Limit results to clients matching these keywords
    :param list sortBy: Specify sort order
    :param int limit: Limit number of results
    :param int offset: Skip a number of results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises SpecifiedObjectWasNotFoundException: on 404
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/client".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        query_parameters.update({"domain": domain})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def post_user_info(
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Return OpenID userinfo (PUBLIC)

    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/userinfo".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def search_oauth2_clients(
    customer: str = None,
    domain: str = None,
    excludeFlags: str = None,
    includeFlags: str = None,
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = None,
    keywords: str = None,
    requiredFunction: str = None,
    subCriteria: dict = None,
    limit: int = 25,
    offset: int = None,
    sortBy: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Search available OAuth2 client descriptors (PUBLIC)

    :param list customer: Match clients bound to any of these customers \(by id or shortname\)
    :param list domain: Match clients bound to any of these domains \(by id or shortname\)
    :param list excludeFlags: Exclude clients having any of these flags
    :param list includeFlags: Include clients having all these flags
    :param list keywordFieldStrategy: Which fields will be searched for the given keyword
    :param str keywordMatchStrategy: Search based on all keywords \(AND\)\, or based on any keyword \(OR\)
    :param list keywords: Match clients by these keywords
    :param list requiredFunction: Match clients having any of the specified functions \(id or shortname\) as requiredFunction
    :param list subCriteria: Subcriteria for this search request
    :param int limit: Limit the number of results
    :param int offset: Skip the first results\, in sort order
    :param list sortBy: Specify sort order
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises SpecifiedObjectWasNotFoundException: on 404
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/client/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        body.update({"domain": domain})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send requiredFunction if the argument was provided, don't send null values
    if requiredFunction is not None:
        body.update({"requiredFunction": requiredFunction})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_oauth2_client(
    idOrShortname: str,
    authenticationMethod: str = None,
    clientIPRange: str = None,
    clientSecret: str = None,
    description: str = None,
    hidden: bool = None,
    mainURI: str = None,
    maxSecurityLevel: str = None,
    name: str = None,
    openIDCustomClaims: list = None,
    permissionScope: str = None,
    permittedScopes: str = None,
    redirectURI: str = None,
    redirectURIs: str = None,
    requiredFunction: str = None,
    shortName: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Update an existing OAuth2 client (PUBLIC)

    :param str idOrShortname: ID or shortname of OAuth2 client to update
    :param str authenticationMethod: If set\, change the authentication method required for this client.
    :param list clientIPRange: If set\, change the CIDR IP ranges which the client will be permitted from. \[format\:ip\]
    :param str clientSecret: If set\, update the client secret of this OAuth2 client. If changing authenticationMethod to password\, the password must be provided in this clientSecret parameter.
    :param str description: If set\, update the description of this resource.
    :param bool hidden: If set\, change the value of the \'hidden\' flag on this client. A hidden client is by default excluded from the oauth client application list.
    :param str mainURI: If set\, update the main landing page for this resource. This will be used to link to the application from Argus.
    :param str maxSecurityLevel: If set\, change the max security level for this client
    :param str name: If set\, update the name describing this resource. This name will show up when listing external resources.
    :param list openIDCustomClaims: If set\, overwrite any existing custom claims configuration. This would remove any existing providers. Use empty array to remove all existing providers.
    :param str permissionScope: If set\, change the function\/role \(id or name\) to constrain the delegated client session to\, restricting what the resource client will be allowed to do on behalf of the user. The delegated client session will be constrained to the least set of the users current session permissions\, and this role.
    :param list permittedScopes: If set\, change the scopes the scopes the client is restricted to. An empty set will allow all scopes.
    :param str redirectURI: This field is DEPRECATED. Use redirectURIs instead.
    :param list redirectURIs: If set\, update the redirect URIs to allow when redirecting from the OAuth authorization endpoint.
    :param str requiredFunction: If set\, change the function \(id or name\) required to grant access to this resource. If customer is specified\, this function is required for that particular customer.
    :param str shortName: If set\, update the shortname describing this resource. This name will show up when listing external resources.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/oauth/client/{idOrShortname}".format(
        idOrShortname=idOrShortname
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send authenticationMethod if the argument was provided, don't send null values
    if authenticationMethod is not None:
        body.update({"authenticationMethod": authenticationMethod})
    # Only send clientIPRange if the argument was provided, don't send null values
    if clientIPRange is not None:
        body.update({"clientIPRange": clientIPRange})
    # Only send clientSecret if the argument was provided, don't send null values
    if clientSecret is not None:
        body.update({"clientSecret": clientSecret})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send hidden if the argument was provided, don't send null values
    if hidden is not None:
        body.update({"hidden": hidden})
    # Only send mainURI if the argument was provided, don't send null values
    if mainURI is not None:
        body.update({"mainURI": mainURI})
    # Only send maxSecurityLevel if the argument was provided, don't send null values
    if maxSecurityLevel is not None:
        body.update({"maxSecurityLevel": maxSecurityLevel})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send openIDCustomClaims if the argument was provided, don't send null values
    if openIDCustomClaims is not None:
        body.update({"openIDCustomClaims": openIDCustomClaims})
    # Only send permissionScope if the argument was provided, don't send null values
    if permissionScope is not None:
        body.update({"permissionScope": permissionScope})
    # Only send permittedScopes if the argument was provided, don't send null values
    if permittedScopes is not None:
        body.update({"permittedScopes": permittedScopes})
    # Only send redirectURI if the argument was provided, don't send null values
    if redirectURI is not None:
        body.update({"redirectURI": redirectURI})
    # Only send redirectURIs if the argument was provided, don't send null values
    if redirectURIs is not None:
        body.update({"redirectURIs": redirectURIs})
    # Only send requiredFunction if the argument was provided, don't send null values
    if requiredFunction is not None:
        body.update({"requiredFunction": requiredFunction})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
