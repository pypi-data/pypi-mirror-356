"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def initiate_api_key(
    description: str,
    authorization: str = None,
    expirationDays: int = None,
    password: str = None,
    sessionConstraints: dict = None,
    source: dict = None,
    validSources: str = None,
    disableExpiration: bool = None,
    disableSourceRestriction: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Initiate a new apikey for current user (PUBLIC)

    :param str description:
    :param str authorization: User authorization token obtained from the user authorization endpoint. The token must be issued for operation \'apikey.create\'
    :param int expirationDays: Requested expiration days\, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period\, an error will be returned.
    :param str password: User password to verify this request
    :param dict sessionConstraints:
    :param dict source:
    :param list validSources:
    :param bool disableExpiration: Request API\-key with unlimited expiration. If unlimited expiration is not permitted\, a 412 error will be returned.
    :param bool disableSourceRestriction: Request API\-key without source restriction. If key without source restriction is not permitted\, a 412 error will be returned. Deprecated\! Instead set provider in source to ´disabled´
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/apikey".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send authorization if the argument was provided, don't send null values
    if authorization is not None:
        body.update({"authorization": authorization})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send disableExpiration if the argument was provided, don't send null values
    if disableExpiration is not None:
        body.update({"disableExpiration": disableExpiration})
    # Only send disableSourceRestriction if the argument was provided, don't send null values
    if disableSourceRestriction is not None:
        body.update({"disableSourceRestriction": disableSourceRestriction})
    # Only send expirationDays if the argument was provided, don't send null values
    if expirationDays is not None:
        body.update({"expirationDays": expirationDays})
    # Only send password if the argument was provided, don't send null values
    if password is not None:
        body.update({"password": password})
    # Only send sessionConstraints if the argument was provided, don't send null values
    if sessionConstraints is not None:
        body.update({"sessionConstraints": sessionConstraints})
    # Only send source if the argument was provided, don't send null values
    if source is not None:
        body.update({"source": source})
    # Only send validSources if the argument was provided, don't send null values
    if validSources is not None:
        body.update({"validSources": validSources})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_api_keys(
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List current user apikeys (PUBLIC)

    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/apikey".format()

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def renew_api_key_by_id(
    keyID: int,
    authorization: str = None,
    expirationDays: int = None,
    password: str = None,
    disableExpiration: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Renew existing API-key (PUBLIC)

    :param int keyID: Key ID
    :param str authorization: User authorization token obtained from the user authorization endpoint. The token must be issued for operation \'apikey.renew\'
    :param int expirationDays: Requested expiration days\, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period\, an error will be returned.
    :param str password: User password to verify this request
    :param bool disableExpiration: Request API\-key with unlimited expiration. If unlimited expiration is not permitted\, a 412 error will be returned.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/apikey/{keyID}".format(keyID=keyID)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send authorization if the argument was provided, don't send null values
    if authorization is not None:
        body.update({"authorization": authorization})
    # Only send disableExpiration if the argument was provided, don't send null values
    if disableExpiration is not None:
        body.update({"disableExpiration": disableExpiration})
    # Only send expirationDays if the argument was provided, don't send null values
    if expirationDays is not None:
        body.update({"expirationDays": expirationDays})
    # Only send password if the argument was provided, don't send null values
    if password is not None:
        body.update({"password": password})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def renew_api_key_by_prefix(
    prefix: str,
    authorization: str = None,
    expirationDays: int = None,
    password: str = None,
    disableExpiration: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Renew an apikey for current user (PUBLIC)

    :param str prefix: Key prefix on the form 1ab\/2c
    :param str authorization: User authorization token obtained from the user authorization endpoint. The token must be issued for operation \'apikey.renew\'
    :param int expirationDays: Requested expiration days\, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period\, an error will be returned.
    :param str password: User password to verify this request
    :param bool disableExpiration: Request API\-key with unlimited expiration. If unlimited expiration is not permitted\, a 412 error will be returned.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/apikey/{prefix}".format(prefix=prefix)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send authorization if the argument was provided, don't send null values
    if authorization is not None:
        body.update({"authorization": authorization})
    # Only send disableExpiration if the argument was provided, don't send null values
    if disableExpiration is not None:
        body.update({"disableExpiration": disableExpiration})
    # Only send expirationDays if the argument was provided, don't send null values
    if expirationDays is not None:
        body.update({"expirationDays": expirationDays})
    # Only send password if the argument was provided, don't send null values
    if password is not None:
        body.update({"password": password})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def revoke_api_key_by_prefix(
    prefix: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Revoke an apikey from current user (PUBLIC)

    :param str prefix: Key prefix on the form 1ab\/2c
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/apikey/{prefix}".format(prefix=prefix)

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
