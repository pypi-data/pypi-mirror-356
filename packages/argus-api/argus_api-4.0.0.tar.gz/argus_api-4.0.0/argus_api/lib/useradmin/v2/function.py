"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def add_function(
    name: str,
    parent: str,
    minimumSecurityLevel: str = "standard",
    description: str = None,
    localizedDescriptions: dict = None,
    localizedNames: dict = None,
    readOnly: bool = None,
    role: bool = None,
    roleType: str = "otherRole",
    sysadm: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Add new function with a parent function (PUBLIC)

    :param str name: The name of the function
    :param str parent: The functions parent \(id or name\)
    :param str minimumSecurityLevel: The minimum security level of the function.
    :param str description: DEPRECATED\: Use localizedDescription instead
    :param dict localizedDescriptions: Function descriptions mapped by language. Supported languages are\: english\, norwegian.
    :param dict localizedNames: Function names mapped by language. Supported languages are\: english\, norwegian.
    :param bool readOnly: Mark this function as a read only function\?
    :param bool role: Can this function be assigned to a user\?
    :param str roleType: The type of role function
    :param bool sysadm: Mark this function as a sysadm function\?
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/useradmin/v2/function".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send localizedDescriptions if the argument was provided, don't send null values
    if localizedDescriptions is not None:
        body.update({"localizedDescriptions": localizedDescriptions})
    # Only send localizedNames if the argument was provided, don't send null values
    if localizedNames is not None:
        body.update({"localizedNames": localizedNames})
    # Only send minimumSecurityLevel if the argument was provided, don't send null values
    if minimumSecurityLevel is not None:
        body.update({"minimumSecurityLevel": minimumSecurityLevel})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send parent if the argument was provided, don't send null values
    if parent is not None:
        body.update({"parent": parent})
    # Only send readOnly if the argument was provided, don't send null values
    if readOnly is not None:
        body.update({"readOnly": readOnly})
    # Only send role if the argument was provided, don't send null values
    if role is not None:
        body.update({"role": role})
    # Only send roleType if the argument was provided, don't send null values
    if roleType is not None:
        body.update({"roleType": roleType})
    # Only send sysadm if the argument was provided, don't send null values
    if sysadm is not None:
        body.update({"sysadm": sysadm})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def add_function_child(
    functionNameOrID: str,
    children: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Adds functions to a parent function (PUBLIC)

    :param str functionNameOrID: The name or id of the function
    :param list children: The children to add to the function \(id or name\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/useradmin/v2/function/{functionNameOrID}/children".format(
        functionNameOrID=functionNameOrID
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send children if the argument was provided, don't send null values
    if children is not None:
        body.update({"children": children})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_function(
    functionNameOrID: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Deletes a function (PUBLIC)

    :param str functionNameOrID: The name or id of the function
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/useradmin/v2/function/{functionNameOrID}".format(
        functionNameOrID=functionNameOrID
    )

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_function(
    functionNameOrID: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Get a function (PUBLIC)

    :param str functionNameOrID: The name or id of the function
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/useradmin/v2/function/{functionNameOrID}".format(
        functionNameOrID=functionNameOrID
    )

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_function_children(
    functionNameOrID: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Returns the children of a function (PUBLIC)

    :param str functionNameOrID: The name or id of the function
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/useradmin/v2/function/{functionNameOrID}/children".format(
        functionNameOrID=functionNameOrID
    )

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_function_parents(
    functionNameOrID: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Returns the parents of a function (PUBLIC)

    :param str functionNameOrID: The name or id of the function
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/useradmin/v2/function/{functionNameOrID}/parents".format(
        functionNameOrID=functionNameOrID
    )

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_functions(
    function: str = None,
    minimumSecurityLevel: str = None,
    excludeFlag: str = None,
    includeFlag: str = None,
    ancestor: str = None,
    descendant: str = None,
    keyword: str = None,
    keywords: str = None,
    sortBy: str = None,
    offset: int = 0,
    limit: int = 25,
    includeDeleted: bool = False,
    keywordMatch: str = "all",
    keywordField: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Returns the functions matching the query (PUBLIC)

    :param list function: Search by function name or ID
    :param str minimumSecurityLevel: Specifies the minimum security level of functions to be returned
    :param list excludeFlag: Exclude functions with flag
    :param list includeFlag: Include functions with flag
    :param list ancestor: Search in ancestors of function
    :param list descendant: Search in descendants of function
    :param list keyword: DEPRECATED\: Use \'keywords\' instead
    :param list keywords: Search by keywords
    :param list sortBy: Sort search result
    :param int offset: Skip a number of results
    :param int limit: Maximum number of returned results
    :param bool includeDeleted: Include deleted functions
    :param str keywordMatch: Set match strategy for keyword search
    :param list keywordField: Set field strategy for keyword search
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/useradmin/v2/function".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    # Only send keywordMatch if the argument was provided, don't send null values
    if keywordMatch is not None:
        query_parameters.update({"keywordMatch": keywordMatch})
    # Only send keywordField if the argument was provided, don't send null values
    if keywordField is not None:
        query_parameters.update({"keywordField": keywordField})
    # Only send function if the argument was provided, don't send null values
    if function is not None:
        query_parameters.update({"function": function})
    # Only send minimumSecurityLevel if the argument was provided, don't send null values
    if minimumSecurityLevel is not None:
        query_parameters.update({"minimumSecurityLevel": minimumSecurityLevel})
    # Only send excludeFlag if the argument was provided, don't send null values
    if excludeFlag is not None:
        query_parameters.update({"excludeFlag": excludeFlag})
    # Only send includeFlag if the argument was provided, don't send null values
    if includeFlag is not None:
        query_parameters.update({"includeFlag": includeFlag})
    # Only send ancestor if the argument was provided, don't send null values
    if ancestor is not None:
        query_parameters.update({"ancestor": ancestor})
    # Only send descendant if the argument was provided, don't send null values
    if descendant is not None:
        query_parameters.update({"descendant": descendant})
    # Only send keyword if the argument was provided, don't send null values
    if keyword is not None:
        query_parameters.update({"keyword": keyword})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def remove_function_child(
    functionNameOrID: str,
    child: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Removes functions from a parent function (PUBLIC)

    :param str functionNameOrID: The name or id of the function
    :param list child: Name or ID of child functions to remove
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/useradmin/v2/function/{functionNameOrID}/children".format(
        functionNameOrID=functionNameOrID
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send child if the argument was provided, don't send null values
    if child is not None:
        query_parameters.update({"child": child})

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def search_functions(
    keywordFieldStrategy: str,
    keywordMatchStrategy: str,
    ancestors: str = None,
    descendants: str = None,
    excludeFlags: str = None,
    function: str = None,
    includeFlags: str = None,
    keywords: str = None,
    minimumSecurityLevel: str = None,
    subCriteria: dict = None,
    includeDeleted: bool = None,
    limit: int = 25,
    offset: int = None,
    sortBy: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Returns the functions matching the query (PUBLIC)

    :param list keywordFieldStrategy: Which fields will be searched for the given keyword
    :param str keywordMatchStrategy: Search based on all keywords \(AND\)\, or based on any keyword \(OR\)
    :param list ancestors: Specifies the function ancestors to search in. Can be the name or id
    :param list descendants: Specifies the function descendants to search in. Can be the name or id
    :param list excludeFlags: Exclude flags that have any of these flags set
    :param list function: Function to search for \(name or id\)
    :param list includeFlags: Include functions that have all these flags set
    :param list keywords: Keywords to search for
    :param str minimumSecurityLevel: Specifies the minimum security level of functions to be returned
    :param list subCriteria: Subcriteria to add to the search
    :param bool includeDeleted: Include deleted functions\?
    :param int limit: The max amount of items to display
    :param int offset: The amount of items to skip
    :param list sortBy: Field to sort result by
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/useradmin/v2/function/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send ancestors if the argument was provided, don't send null values
    if ancestors is not None:
        body.update({"ancestors": ancestors})
    # Only send descendants if the argument was provided, don't send null values
    if descendants is not None:
        body.update({"descendants": descendants})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send function if the argument was provided, don't send null values
    if function is not None:
        body.update({"function": function})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send minimumSecurityLevel if the argument was provided, don't send null values
    if minimumSecurityLevel is not None:
        body.update({"minimumSecurityLevel": minimumSecurityLevel})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_function(
    functionNameOrID: str,
    description: str = None,
    localizedDescriptions: dict = None,
    localizedNames: dict = None,
    minimumSecurityLevel: str = None,
    name: str = None,
    readOnly: bool = None,
    role: bool = None,
    roleType: str = None,
    sysadm: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Update a function (PUBLIC)

    :param str functionNameOrID: The name or id of the function
    :param str description: Describes what the function does
    :param dict localizedDescriptions: Function descriptions mapped by language. Supported languages are\: english\, norwegian.
    :param dict localizedNames: Function names mapped by language. Supported languages are\: english\, norwegian.
    :param str minimumSecurityLevel: The new minimum security level of the function.
    :param str name: The new name of the function
    :param bool readOnly: If set\, change the flag to mark as a read only function
    :param bool role: If set\, change the flag to mark as a role
    :param str roleType: The new type of role function
    :param bool sysadm: If set\, change the flag to mark as a sysadm function
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/useradmin/v2/function/{functionNameOrID}".format(
        functionNameOrID=functionNameOrID
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send localizedDescriptions if the argument was provided, don't send null values
    if localizedDescriptions is not None:
        body.update({"localizedDescriptions": localizedDescriptions})
    # Only send localizedNames if the argument was provided, don't send null values
    if localizedNames is not None:
        body.update({"localizedNames": localizedNames})
    # Only send minimumSecurityLevel if the argument was provided, don't send null values
    if minimumSecurityLevel is not None:
        body.update({"minimumSecurityLevel": minimumSecurityLevel})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send readOnly if the argument was provided, don't send null values
    if readOnly is not None:
        body.update({"readOnly": readOnly})
    # Only send role if the argument was provided, don't send null values
    if role is not None:
        body.update({"role": role})
    # Only send roleType if the argument was provided, don't send null values
    if roleType is not None:
        body.update({"roleType": roleType})
    # Only send sysadm if the argument was provided, don't send null values
    if sysadm is not None:
        body.update({"sysadm": sysadm})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
