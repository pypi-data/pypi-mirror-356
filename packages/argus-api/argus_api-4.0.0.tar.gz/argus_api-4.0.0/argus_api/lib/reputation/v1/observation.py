"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def add_observations(
    observations: dict,
    sourceAlias: str = None,
    sourceID: int = None,
    addAddresses: bool = True,
    addDomains: bool = True,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Add reputation observations (INTERNAL)

    :param list observations: Observations to add. Invalid observations will be rejected but not fail the entire request.
    :param str sourceAlias: The source\'s globally unique alias.
    :param int sourceID: The source\'s ID.
    :param bool addAddresses: Whether to add addresses
    :param bool addDomains: Whether to add domains
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/observation".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send addAddresses if the argument was provided, don't send null values
    if addAddresses is not None:
        body.update({"addAddresses": addAddresses})
    # Only send addDomains if the argument was provided, don't send null values
    if addDomains is not None:
        body.update({"addDomains": addDomains})
    # Only send observations if the argument was provided, don't send null values
    if observations is not None:
        body.update({"observations": observations})
    # Only send sourceAlias if the argument was provided, don't send null values
    if sourceAlias is not None:
        body.update({"sourceAlias": sourceAlias})
    # Only send sourceID if the argument was provided, don't send null values
    if sourceID is not None:
        body.update({"sourceID": sourceID})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_observations(
    sourceAlias: str = None,
    address: dict = None,
    fqdn: dict = None,
    sourceID: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete reputation observations (INTERNAL)

    :param str sourceAlias: Source alias
    :param list address: IP Addresses
    :param list fqdn: Domain names
    :param int sourceID: Source ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/observation".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send sourceID if the argument was provided, don't send null values
    if sourceID is not None:
        query_parameters.update({"sourceID": sourceID})
    # Only send sourceAlias if the argument was provided, don't send null values
    if sourceAlias is not None:
        query_parameters.update({"sourceAlias": sourceAlias})
    # Only send address if the argument was provided, don't send null values
    if address is not None:
        query_parameters.update({"address": address})
    # Only send fqdn if the argument was provided, don't send null values
    if fqdn is not None:
        query_parameters.update({"fqdn": fqdn})

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def fetch_observations_for_domain(
    fqdn: str,
    countMaxWait: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Look up reputation observations for the given domain (INTERNAL)

    :param str fqdn: Domain to fetch observations for
    :param int countMaxWait: Max wait time for result count calculation. 0 equates to unlimited wait and \-1 to skip counting altogether. Defaults to 2 seconds.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/observation/domain/{fqdn}".format(fqdn=fqdn)

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        query_parameters.update({"countMaxWait": countMaxWait})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def fetch_observations_for_ip(
    ip: str,
    countMaxWait: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Look up reputation observations for the given IP (INTERNAL)

    :param str ip: IP address to fetch observations for
    :param int countMaxWait: Max wait time for result count calculation. 0 equates to unlimited wait and \-1 to skip counting altogether. Defaults to 2 seconds.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/observation/ip/{ip}".format(ip=ip)

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        query_parameters.update({"countMaxWait": countMaxWait})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def find_address_observations(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    minimumState: int = None,
    minimumConfidence: float = None,
    sourceID: int = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    countMaxWait: int = None,
    fromAddress: dict = None,
    afterAddress: dict = None,
    addresses: dict = None,
    sortBy: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Search for IP observations (INTERNAL)

    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param int includeFlags: Only include objects which have includeFlags set.
    :param int excludeFlags: Exclude objects which have excludeFlags set.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param int minimumState: Filter results by observations with at least this state
    :param float minimumConfidence: Filter results by observations with at least this confidence
    :param list sourceID: Filter results by observations from these sources
    :param int startTimestamp: Filter results by observations last updated \>\= this timestamp
    :param int endTimestamp: Filter results by observations last updated \<\= this timestamp
    :param int countMaxWait: How many seconds to wait for count calculation to complete. \-1\: Skip counting altogether to return search results immediately. 0\: Unlimited count time for when the count matters and response time does not. Defaults to 2 seconds.
    :param dict fromAddress:
    :param dict afterAddress:
    :param list addresses: Filter results by these IP addresses
    :param list sortBy: List of properties to sort by \(prefix with \"\-\" to sort descending\).
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/observation/ip/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, don't send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, don't send null values
    if required is not None:
        body.update({"required": required})
    # Only send minimumState if the argument was provided, don't send null values
    if minimumState is not None:
        body.update({"minimumState": minimumState})
    # Only send minimumConfidence if the argument was provided, don't send null values
    if minimumConfidence is not None:
        body.update({"minimumConfidence": minimumConfidence})
    # Only send sourceID if the argument was provided, don't send null values
    if sourceID is not None:
        body.update({"sourceID": sourceID})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        body.update({"countMaxWait": countMaxWait})
    # Only send fromAddress if the argument was provided, don't send null values
    if fromAddress is not None:
        body.update({"fromAddress": fromAddress})
    # Only send afterAddress if the argument was provided, don't send null values
    if afterAddress is not None:
        body.update({"afterAddress": afterAddress})
    # Only send addresses if the argument was provided, don't send null values
    if addresses is not None:
        body.update({"addresses": addresses})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def find_domain_observations(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    minimumState: int = None,
    minimumConfidence: float = None,
    sourceID: int = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    countMaxWait: int = None,
    fromDomainName: dict = None,
    afterDomainName: dict = None,
    domainNames: dict = None,
    domains: str = None,
    sortBy: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Search for domain observations (INTERNAL)

    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param int includeFlags: Only include objects which have includeFlags set.
    :param int excludeFlags: Exclude objects which have excludeFlags set.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param int minimumState: Filter results by observations with at least this state
    :param float minimumConfidence: Filter results by observations with at least this confidence
    :param list sourceID: Filter results by observations from these sources
    :param int startTimestamp: Filter results by observations last updated \>\= this timestamp
    :param int endTimestamp: Filter results by observations last updated \<\= this timestamp
    :param int countMaxWait: How many seconds to wait for count calculation to complete. \-1\: Skip counting altogether to return search results immediately. 0\: Unlimited count time for when the count matters and response time does not. Defaults to 2 seconds.
    :param dict fromDomainName:
    :param dict afterDomainName:
    :param list domainNames: Search for observations by domain name. Deprecated\, use domains instead.
    :param list domains: Search for observations by domain name.
    :param list sortBy: List of properties to sort by \(prefix with \"\-\" to sort descending\).
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/observation/domain/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, don't send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, don't send null values
    if required is not None:
        body.update({"required": required})
    # Only send minimumState if the argument was provided, don't send null values
    if minimumState is not None:
        body.update({"minimumState": minimumState})
    # Only send minimumConfidence if the argument was provided, don't send null values
    if minimumConfidence is not None:
        body.update({"minimumConfidence": minimumConfidence})
    # Only send sourceID if the argument was provided, don't send null values
    if sourceID is not None:
        body.update({"sourceID": sourceID})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        body.update({"countMaxWait": countMaxWait})
    # Only send fromDomainName if the argument was provided, don't send null values
    if fromDomainName is not None:
        body.update({"fromDomainName": fromDomainName})
    # Only send afterDomainName if the argument was provided, don't send null values
    if afterDomainName is not None:
        body.update({"afterDomainName": afterDomainName})
    # Only send domainNames if the argument was provided, don't send null values
    if domainNames is not None:
        body.update({"domainNames": domainNames})
    # Only send domains if the argument was provided, don't send null values
    if domains is not None:
        body.update({"domains": domains})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_address_observations(
    sourceID: int = None,
    minimumState: int = None,
    minimumConfidence: float = None,
    countMaxWait: int = None,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List IP observations (INTERNAL)

    :param int sourceID: Limit result to observations from specified source
    :param int minimumState: Limit result to observations with this state or higher
    :param float minimumConfidence: Limit result to observations bound to sources with at least this confidence
    :param int countMaxWait: Max wait time for result count calculation. 0 equates to unlimited wait and \-1 to skip counting altogether. Defaults to 2 seconds.
    :param int limit: Limit result
    :param int offset: Offset result
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/observation/ip".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send sourceID if the argument was provided, don't send null values
    if sourceID is not None:
        query_parameters.update({"sourceID": sourceID})
    # Only send minimumState if the argument was provided, don't send null values
    if minimumState is not None:
        query_parameters.update({"minimumState": minimumState})
    # Only send minimumConfidence if the argument was provided, don't send null values
    if minimumConfidence is not None:
        query_parameters.update({"minimumConfidence": minimumConfidence})
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        query_parameters.update({"countMaxWait": countMaxWait})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_domain_observations(
    sourceID: int = None,
    minimumState: int = None,
    minimumConfidence: float = None,
    countMaxWait: int = None,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List domain observations (INTERNAL)

    :param int sourceID: Limit result to observations from specified source
    :param int minimumState: Limit result to observations with this state or higher
    :param float minimumConfidence: Limit result to observations bound to sources with at least this confidence
    :param int countMaxWait: Max wait time for result count calculation. 0 equates to unlimited wait and \-1 to skip counting altogether. Defaults to 2 seconds.
    :param int limit: Limit result
    :param int offset: Offset result
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/observation/domain".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send sourceID if the argument was provided, don't send null values
    if sourceID is not None:
        query_parameters.update({"sourceID": sourceID})
    # Only send minimumState if the argument was provided, don't send null values
    if minimumState is not None:
        query_parameters.update({"minimumState": minimumState})
    # Only send minimumConfidence if the argument was provided, don't send null values
    if minimumConfidence is not None:
        query_parameters.update({"minimumConfidence": minimumConfidence})
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        query_parameters.update({"countMaxWait": countMaxWait})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
