"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(extending=("reputation", "v2", "source"), module=argus_cli_module)
def add_source(
    description: str,
    name: str,
    readFunction: str,
    shortName: str,
    writeFunction: str,
    activePeriod: int = None,
    defaultConfidence: float = None,
    gracePeriod: int = None,
    useForDistributedSync: bool = None,
    useForReputationCalc: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Add a new reputation source (DEV)

    :param str description: Short description of the source.
    :param str name: Human\-readable name of the source. Does not need to be unique.
    :param str readFunction: ID or shortName of the function required to read data created by the source.
    :param str shortName: Unique name of the source. Can only contain alphanumeric characters\, hyphen\, underscore\, period and colon. No spaces.
    :param str writeFunction: ID or shortName of function required to write data on behalf of the source.
    :param int activePeriod: Duration in milliseconds of how long observations created by the source should be considered active.
    :param float defaultConfidence: Default confidence given to observations created by the source. Observations may override this value.
    :param int gracePeriod: Duration in milliseconds of how long observations created by the source should be able to be reactivated after its active period has passed.
    :param bool useForDistributedSync: Whether the source should be synced to distributed.
    :param bool useForReputationCalc: Whether the source should be included when calculating reputation scores.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v2/source".format()
    headers = {}

    body = body or {}
    # Only send activePeriod if the argument was provided, don't send null values
    if activePeriod is not None:
        body.update({"activePeriod": activePeriod})
    # Only send defaultConfidence if the argument was provided, don't send null values
    if defaultConfidence is not None:
        body.update({"defaultConfidence": defaultConfidence})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send gracePeriod if the argument was provided, don't send null values
    if gracePeriod is not None:
        body.update({"gracePeriod": gracePeriod})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send readFunction if the argument was provided, don't send null values
    if readFunction is not None:
        body.update({"readFunction": readFunction})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send useForDistributedSync if the argument was provided, don't send null values
    if useForDistributedSync is not None:
        body.update({"useForDistributedSync": useForDistributedSync})
    # Only send useForReputationCalc if the argument was provided, don't send null values
    if useForReputationCalc is not None:
        body.update({"useForReputationCalc": useForReputationCalc})
    # Only send writeFunction if the argument was provided, don't send null values
    if writeFunction is not None:
        body.update({"writeFunction": writeFunction})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("reputation", "v2", "source"), module=argus_cli_module)
def delete_source(
    idOrShortName: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Delete a reputation source (DEV)

    :param str idOrShortName: ID or shortName of the source to be deleted
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v2/source/{idOrShortName}".format(idOrShortName=idOrShortName)
    headers = {}

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("reputation", "v2", "source"), module=argus_cli_module)
def get_source(
    idOrShortName: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch a reputation source (DEV)

    :param str idOrShortName: ID or short name of the source
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v2/source/{idOrShortName}".format(idOrShortName=idOrShortName)
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("reputation", "v2", "source"), module=argus_cli_module)
def list_sources(
    keywords: str = None,
    offset: int = 0,
    limit: int = 25,
    sortBy: str = None,
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = "all",
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Simple search for reputation sources (DEV)

    :param list keywords: Keywords to search for.
    :param int offset: Number of sources to skip.
    :param int limit: Number of sources to return.
    :param list sortBy: How to sort the results.
    :param list keywordFieldStrategy: Which fields to search for keywords in.
    :param str keywordMatchStrategy: Whether all or any of the keywords are required to match any of the fields.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v2/source".format()
    headers = {}

    query_parameters = {}
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        query_parameters.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        query_parameters.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("reputation", "v2", "source"), module=argus_cli_module)
def search_sources(
    excludeFlags: str = None,
    includeFlags: str = None,
    keywords: str = None,
    includeDeleted: bool = None,
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = "any",
    limit: int = 25,
    offset: int = None,
    sortBy: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Advanced search for reputation sources (DEV)

    :param list excludeFlags: Require sources to not have certain flags set. For available flags\, see the flags field.
    :param list includeFlags: Require sources to have certain flags set. For available flags\, see the flags field.
    :param list keywords: Keywords to search for in fields specified by keywordFieldStrategy.
    :param bool includeDeleted: Whether to include deleted sources.
    :param list keywordFieldStrategy: Which fields to search for keywords in.
    :param str keywordMatchStrategy: Whether all or any of the keywords are required to match any of the fields.
    :param int limit: Number of sources to return.
    :param int offset: Number of sources to skip.
    :param list sortBy: How to order the results.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v2/source/search".format()
    headers = {}

    body = body or {}
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("reputation", "v2", "source"), module=argus_cli_module)
def update_source(
    idOrShortName: str,
    activePeriod: int = None,
    defaultConfidence: float = None,
    description: str = None,
    gracePeriod: int = None,
    name: str = None,
    readFunction: str = None,
    useForDistributedSync: bool = None,
    useForReputationCalc: bool = None,
    writeFunction: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Update a reputation source (DEV)

    :param str idOrShortName: ID or shortName of the source to be updated
    :param int activePeriod: Duration in milliseconds of how long observations created by the source should be considered active.
    :param float defaultConfidence: Default confidence given to observations created by the source. Observations may override this value.
    :param str description: Short description of the source.
    :param int gracePeriod: Duration in milliseconds of how long observations created by the source should be able to be reactivated after its active period has passed.
    :param str name: Human\-readable name of the source. Does not need to be unique.
    :param str readFunction: ID or shortName of the function required to read data created by the source.
    :param bool useForDistributedSync: Whether the source should be synced to distributed.
    :param bool useForReputationCalc: Whether the source should be included when calculating reputation scores.
    :param str writeFunction: ID or shortName of function required to write data on behalf of the source.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v2/source/{idOrShortName}".format(idOrShortName=idOrShortName)
    headers = {}

    body = body or {}
    # Only send activePeriod if the argument was provided, don't send null values
    if activePeriod is not None:
        body.update({"activePeriod": activePeriod})
    # Only send defaultConfidence if the argument was provided, don't send null values
    if defaultConfidence is not None:
        body.update({"defaultConfidence": defaultConfidence})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send gracePeriod if the argument was provided, don't send null values
    if gracePeriod is not None:
        body.update({"gracePeriod": gracePeriod})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send readFunction if the argument was provided, don't send null values
    if readFunction is not None:
        body.update({"readFunction": readFunction})
    # Only send useForDistributedSync if the argument was provided, don't send null values
    if useForDistributedSync is not None:
        body.update({"useForDistributedSync": useForDistributedSync})
    # Only send useForReputationCalc if the argument was provided, don't send null values
    if useForReputationCalc is not None:
        body.update({"useForReputationCalc": useForReputationCalc})
    # Only send writeFunction if the argument was provided, don't send null values
    if writeFunction is not None:
        body.update({"writeFunction": writeFunction})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
