"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
from requests import Response

log = logging.getLogger(__name__)


@register_command(extending=("customers", "v2", "customer"), module=argus_cli_module)
def get_customer(
    idOrShortName: str,
    domain: str = None,
    includeProperties: str = None,
    includePropertiesWithPrefix: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Returns a Customer identified by its ID or short name. (PUBLIC)

    :param str idOrShortName: Customer ID or short name
    :param str domain: Customer domain to lookup short name \(defaults to current users domain\)
    :param list includeProperties: Return with properties
    :param list includePropertiesWithPrefix: Return with properties fetched by prefix
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/customers/v2/customer/{idOrShortName}".format(idOrShortName=idOrShortName)
    headers = {}

    query_parameters = {}
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        query_parameters.update({"domain": domain})
    # Only send includeProperties if the argument was provided, don't send null values
    if includeProperties is not None:
        query_parameters.update({"includeProperties": includeProperties})
    # Only send includePropertiesWithPrefix if the argument was provided, don't send null values
    if includePropertiesWithPrefix is not None:
        query_parameters.update(
            {"includePropertiesWithPrefix": includePropertiesWithPrefix}
        )

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("customers", "v2", "customer"), module=argus_cli_module)
def get_customer_logo(
    idOrShortName: str,
    domain: str = None,
    size: str = None,
    includeDefault: bool = True,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> Response:
    r"""Returns a Customer logo by customer shortName or id. (PUBLIC)

    :param str idOrShortName: Customer ID or shortName
    :param str domain: Customer domain to lookup shortName \(defaults to current users domain\)
    :param str size: The preferred size of the logo \(small\, medium\, large\, xlarge\). Will resize the logo within the selected size\, retaining aspect ratio.
    :param bool includeDefault: Include default logo
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: ``requests.Response`` object

    """

    route = "/customers/v2/customer/{idOrShortName}/logo".format(
        idOrShortName=idOrShortName
    )
    headers = {}
    headers["content"] = None

    query_parameters = {}
    # Only send includeDefault if the argument was provided, don't send null values
    if includeDefault is not None:
        query_parameters.update({"includeDefault": includeDefault})
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        query_parameters.update({"domain": domain})
    # Only send size if the argument was provided, don't send null values
    if size is not None:
        query_parameters.update({"size": size})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response


@register_command(extending=("customers", "v2", "customer"), module=argus_cli_module)
def get_customer_properties(
    idOrShortName: str,
    domain: str = None,
    key: str = None,
    section: str = None,
    offset: int = 0,
    limit: int = 25,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Returns a set of properties for the customer id or shortName by property name. (PUBLIC)

    :param str idOrShortName: Customer ID or shortName
    :param str domain: Customer domain to lookup shortname \(defaults to current users domain\)
    :param list key: Filter for specific properties.
    :param list section: Filter for properties in specific sections.
    :param int offset: By how many records to offset results
    :param int limit: Maximum number of returned results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/customers/v2/customer/{idOrShortName}/properties".format(
        idOrShortName=idOrShortName
    )
    headers = {}

    query_parameters = {}
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        query_parameters.update({"domain": domain})
    # Only send key if the argument was provided, don't send null values
    if key is not None:
        query_parameters.update({"key": key})
    # Only send section if the argument was provided, don't send null values
    if section is not None:
        query_parameters.update({"section": section})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("customers", "v2", "customer"), module=argus_cli_module)
def get_customer_user_roles(
    idOrShortName: str,
    domain: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Returns a set of User roles for the customer id or shortName. (PUBLIC)

    :param str idOrShortName: Customer ID or shortName
    :param str domain: Customer domain to lookup user \(defaults to current users domain\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/customers/v2/customer/{idOrShortName}/userroles".format(
        idOrShortName=idOrShortName
    )
    headers = {}

    query_parameters = {}
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        query_parameters.update({"domain": domain})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("customers", "v2", "customer"), module=argus_cli_module)
def list_customers(
    parent: str = None,
    keywords: str = None,
    includeProperties: str = None,
    includePropertiesWithPrefix: str = None,
    sortBy: str = None,
    offset: int = 0,
    limit: int = 25,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Returns customers defined by query parameters (PUBLIC)

    :param list parent: Search by parent id or shortName
    :param list keywords: Search by keywords
    :param list includeProperties: Return with properties
    :param list includePropertiesWithPrefix: Return with properties fetched by prefix
    :param list sortBy: Sort search result
    :param int offset: By how many records to offset results
    :param int limit: Maximum number of returned results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/customers/v2/customer".format()
    headers = {}

    query_parameters = {}
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send parent if the argument was provided, don't send null values
    if parent is not None:
        query_parameters.update({"parent": parent})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})
    # Only send includeProperties if the argument was provided, don't send null values
    if includeProperties is not None:
        query_parameters.update({"includeProperties": includeProperties})
    # Only send includePropertiesWithPrefix if the argument was provided, don't send null values
    if includePropertiesWithPrefix is not None:
        query_parameters.update(
            {"includePropertiesWithPrefix": includePropertiesWithPrefix}
        )
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("customers", "v2", "customer"), module=argus_cli_module)
def search_customers(
    ancestor: str = None,
    customer: str = None,
    domain: str = None,
    excludeFlags: str = None,
    includeDeleted: bool = None,
    includeFlags: str = None,
    includeProperties: str = None,
    includePropertiesWithPrefix: str = None,
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = None,
    keywords: str = None,
    limit: int = None,
    offset: int = None,
    parent: str = None,
    subCriteria: dict = None,
    type: str = None,
    sortBy: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Returns customers defined by SearchBasicCustomerRequest (PUBLIC)

    :param list ancestor: Search for customers by ancestor customer id or shortname. Will return customers that descend from any of these parents.
    :param list customer: Restrict search to specified customers.
    :param list domain: Search for customers in one of these domains \(by domain id or name\).
    :param list excludeFlags: Exclude objects which have excludeFlags set. For \'deleted\' use the dedicated field
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param list includeFlags: Only include objects which have includeFlags set. For \'deleted\' use the dedicated field
    :param list includeProperties: Include properties matching one of the specified keys. Only properties specified here\, or by \"includePropertiesWithPrefix\" will be returned.
    :param list includePropertiesWithPrefix: Include properties matching one of the prefixes specified. Only properties specified by prefix\, or by \"includeProperties\" will be returned.
    :param list keywordFieldStrategy: Defines which fields will be searched by keywords \(default all supported fields\).
    :param str keywordMatchStrategy: Defines the MatchStrategy for keywords \(default match all keywords\).
    :param list keywords: Search for customers by keywords.
    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param list parent: Search for customers by parent customer id or shortname. Will return customers that are direct children of any of these parents.
    :param list subCriteria: Set additional criteria
    :param list type: Search for customers by type.
    :param list sortBy: Field to sort result by\, use \- to sort in desc order.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/customers/v2/customer/search".format()
    headers = {}

    body = body or {}
    # Only send ancestor if the argument was provided, don't send null values
    if ancestor is not None:
        body.update({"ancestor": ancestor})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        body.update({"domain": domain})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send includeProperties if the argument was provided, don't send null values
    if includeProperties is not None:
        body.update({"includeProperties": includeProperties})
    # Only send includePropertiesWithPrefix if the argument was provided, don't send null values
    if includePropertiesWithPrefix is not None:
        body.update({"includePropertiesWithPrefix": includePropertiesWithPrefix})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send parent if the argument was provided, don't send null values
    if parent is not None:
        body.update({"parent": parent})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send type if the argument was provided, don't send null values
    if type is not None:
        body.update({"type": type})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
