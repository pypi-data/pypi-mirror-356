"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def add_alarm(
    description: str,
    shortName: str = None,
    info: str = None,
    references: str = None,
    links: str = None,
    labels: str = None,
    internalReference: str = None,
    internalInformation: str = None,
    signatures: str = None,
    attackCategoryID: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Add a new alarm (INTERNAL)

    :param str description: Alarm description
    :param str shortName: Short name of the alarm
    :param str info: Alarm verbose information \[format\:html\]
    :param list references: Alarm vulnerability references \(CVE\-numbers\, BID\-numbers\, URLs etc\)
    :param list links: Links to external descriptions of this alarm
    :param list labels: Tag an alarm with labels
    :param str internalReference: A link to an internal reference for the alarm
    :param str internalInformation: Internal information about handling the alarm. Describes how the alarm should be handled by SOC. Contents may be HTML\, which will be sanitized.
    :param list signatures: List of signatures to map to this alarm
    :param int attackCategoryID: Alarm attack category ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm".format()
    headers = {}

    body = body or {}
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send attackCategoryID if the argument was provided, don't send null values
    if attackCategoryID is not None:
        body.update({"attackCategoryID": attackCategoryID})
    # Only send info if the argument was provided, don't send null values
    if info is not None:
        body.update({"info": info})
    # Only send references if the argument was provided, don't send null values
    if references is not None:
        body.update({"references": references})
    # Only send links if the argument was provided, don't send null values
    if links is not None:
        body.update({"links": links})
    # Only send labels if the argument was provided, don't send null values
    if labels is not None:
        body.update({"labels": labels})
    # Only send internalReference if the argument was provided, don't send null values
    if internalReference is not None:
        body.update({"internalReference": internalReference})
    # Only send internalInformation if the argument was provided, don't send null values
    if internalInformation is not None:
        body.update({"internalInformation": internalInformation})
    # Only send signatures if the argument was provided, don't send null values
    if signatures is not None:
        body.update({"signatures": signatures})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def add_alarm_comment(
    id: int,
    comment: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Add a comment to an alarm (INTERNAL)

    :param int id: ID of the alarm
    :param str comment: Comment content. Html is allowed\, will be sanitized. \[format\:html\]
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm/{id}/comment".format(id=id)
    headers = {}

    body = body or {}
    # Only send comment if the argument was provided, don't send null values
    if comment is not None:
        body.update({"comment": comment})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def add_alarm_mitre_relationship(
    idOrShortName: str,
    mitreCategory: str,
    categoryModel: str = None,
    categoryVersion: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Adds a new relationship between an alarm and a MITRE category (DEV)

    :param str idOrShortName: ID or short name of the alarm
    :param str mitreCategory: ID or external ID of the MITRE category \(external ID requires setting additional attributes\: categoryModel\, categoryVersion\)
    :param str categoryModel: Which threat model to use with external ID of the MITRE category
    :param str categoryVersion: Which version to use with external ID of the MITRE category
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm/{idOrShortName}/mitre".format(idOrShortName=idOrShortName)
    headers = {}

    body = body or {}
    # Only send mitreCategory if the argument was provided, don't send null values
    if mitreCategory is not None:
        body.update({"mitreCategory": mitreCategory})
    # Only send categoryModel if the argument was provided, don't send null values
    if categoryModel is not None:
        body.update({"categoryModel": categoryModel})
    # Only send categoryVersion if the argument was provided, don't send null values
    if categoryVersion is not None:
        body.update({"categoryVersion": categoryVersion})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def delete_alarm(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Delete an existing alarm (INTERNAL)

    :param int id: ID of the alarm
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm/{id}".format(id=id)
    headers = {}

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def delete_alarm_comment(
    id: int,
    timestamp: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Delete an existing comment from an alarm (INTERNAL)

    :param int id: ID of the alarm
    :param int timestamp: Timestamp of the comment
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm/{id}/comment/{timestamp}".format(
        id=id, timestamp=timestamp
    )
    headers = {}

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def delete_alarm_mitre_relationship(
    idOrShortName: str,
    idOrExtId: str,
    categoryModel: str = None,
    categoryVersion: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Deletes an existing relationship between an alarm and a MITRE category (DEV)

    :param str idOrShortName: ID or short name of the alarm
    :param str idOrExtId: ID or external ID of the MITRE category \(external ID requires additional query parameters\: categoryModel\, categoryVersion\)
    :param str categoryModel: Which threat model to use with external ID of the MITRE category
    :param str categoryVersion: Which version to use with external ID of the MITRE category
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm/{idOrShortName}/mitre/{idOrExtId}".format(
        idOrShortName=idOrShortName, idOrExtId=idOrExtId
    )
    headers = {}

    query_parameters = {}
    # Only send categoryModel if the argument was provided, don't send null values
    if categoryModel is not None:
        query_parameters.update({"categoryModel": categoryModel})
    # Only send categoryVersion if the argument was provided, don't send null values
    if categoryVersion is not None:
        query_parameters.update({"categoryVersion": categoryVersion})

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def get_alarm_by_id(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Get an alarm by ID (PUBLIC)

    :param int id: ID of the alarm
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm/{id}".format(id=id)
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def get_alarms(
    keywords: str = None,
    keywordMatch: str = "all",
    keywordField: str = None,
    offset: int = 0,
    limit: int = 25,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Get all alarms (PUBLIC)

    :param list keywords: Search by keywords
    :param str keywordMatch: Set match strategy for keyword search
    :param list keywordField: Set field strategy for keyword search
    :param int offset: Skip a number of alarms
    :param int limit: Maximum number of returned alarms
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm".format()
    headers = {}

    query_parameters = {}
    # Only send keywordMatch if the argument was provided, don't send null values
    if keywordMatch is not None:
        query_parameters.update({"keywordMatch": keywordMatch})
    # Only send keywordField if the argument was provided, don't send null values
    if keywordField is not None:
        query_parameters.update({"keywordField": keywordField})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def list_alarm_mitre_relationships(
    idOrShortName: str,
    categoryType: str = None,
    categoryModel: str = None,
    categoryVersion: str = None,
    includeDeleted: bool = None,
    sortBy: str = None,
    limit: int = None,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""List relationships between an alarm and MITRE categories (DEV)

    :param str idOrShortName: ID or short name of the alarm
    :param list categoryType: Type\(s\) of the MITRE categories \(all by default\)
    :param list categoryModel: The threat model\(s\) of the MITRE categories \(all by default\)
    :param list categoryVersion: The version\(s\) of the MITRE categories \(all by default\)
    :param bool includeDeleted: To include deleted relationships or not \(not included by default\)
    :param list sortBy: Field\(s\) to sort results by \(without sign is ascending\, with \'\-\' sign is descending\)
    :param int limit: The max amount of items to return \(25 by default\, 0 means no limit\)
    :param int offset: The amount of items to skip from the beginning \(0 by default\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm/{idOrShortName}/mitre".format(idOrShortName=idOrShortName)
    headers = {}

    query_parameters = {}
    # Only send categoryType if the argument was provided, don't send null values
    if categoryType is not None:
        query_parameters.update({"categoryType": categoryType})
    # Only send categoryModel if the argument was provided, don't send null values
    if categoryModel is not None:
        query_parameters.update({"categoryModel": categoryModel})
    # Only send categoryVersion if the argument was provided, don't send null values
    if categoryVersion is not None:
        query_parameters.update({"categoryVersion": categoryVersion})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def map_to_alarm(
    id: int,
    signatures: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Map signatures to an alarm (INTERNAL)

    :param int id: ID of the alarm
    :param list signatures: Signatures \(exist\/new\) to be mapped to the alarm
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm/{id}/map".format(id=id)
    headers = {}

    body = body or {}
    # Only send signatures if the argument was provided, don't send null values
    if signatures is not None:
        body.update({"signatures": signatures})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def search_alarm_mitre_relationships(
    id: str = None,
    alarm: str = None,
    category: str = None,
    categoryType: str = None,
    categoryModel: str = None,
    categoryVersion: str = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    subCriteria: dict = None,
    sortBy: str = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Searches for relationships between alarms and MITRE categories (DEV)

    :param list id: A set of IDs of the searched relationships
    :param list alarm: A set of IDs or short names of the alarms that take part in the relationships
    :param list category: A set of IDs\, external IDs or short names of the MITRE categories that take part in the relationships
    :param list categoryType: A set of enumerated types of the MITRE categories that take part in the relationships
    :param list categoryModel: A set of enumerated threat models of the MITRE categories that take part in the relationships
    :param list categoryVersion: A set of versions of the MITRE categories that take part in the relationships
    :param list includeFlags: A set of included enumerated flags of the searched relationships
    :param list excludeFlags: A set of excluded enumerated flags of the searched relationships
    :param list subCriteria: Set additional search criteria with AND\, OR or AND NOT
    :param list sortBy: Fields to sort results by \(without sign is ascending\, with \'\-\' sign is descending\)
    :param int limit: The max amount of items to return
    :param int offset: The amount of items to skip from the beginning
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm/mitre/search".format()
    headers = {}

    body = body or {}
    # Only send id if the argument was provided, don't send null values
    if id is not None:
        body.update({"id": id})
    # Only send alarm if the argument was provided, don't send null values
    if alarm is not None:
        body.update({"alarm": alarm})
    # Only send category if the argument was provided, don't send null values
    if category is not None:
        body.update({"category": category})
    # Only send categoryType if the argument was provided, don't send null values
    if categoryType is not None:
        body.update({"categoryType": categoryType})
    # Only send categoryModel if the argument was provided, don't send null values
    if categoryModel is not None:
        body.update({"categoryModel": categoryModel})
    # Only send categoryVersion if the argument was provided, don't send null values
    if categoryVersion is not None:
        body.update({"categoryVersion": categoryVersion})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def search_alarms(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    attackCategoryID: int = None,
    alarmID: int = None,
    alarm: str = None,
    alarmReferences: str = None,
    labels: str = None,
    startTimestamp: str = None,
    endTimestamp: str = None,
    keywords: str = None,
    signature: str = None,
    sortBy: str = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    includeMappings: bool = None,
    includeComments: bool = None,
    timeFieldStrategy: str = None,
    timeMatchStrategy: str = "any",
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = "all",
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Get all alarms matching a given search criteria (PUBLIC)

    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param list attackCategoryID: A set of IDs for attack categories \(alarm category\).
    :param list alarmID: A set of IDs for alarms.
    :param list alarm: A set of IDs or short names for alarms.
    :param list alarmReferences: A set of references. It does an exact match.
    :param list labels: A set of labels. It does an exact match.
    :param str startTimestamp: Only include alarms based on the set TimeFieldStrategy and TimeMatchStrategy \(start timestamp\) Timestamps can be milliseconds since epoch\, ISO8601 timestamp\, or a string with a relative timestamp. See the general integration guide for more details. Allows to specify a unix timestamp \(milliseconds\)\, ISO timestamp\, or relative time.
    :param str endTimestamp: Only include alarms based on the set TimeFieldStrategy and TimeMatchStrategy \(end timestamp\) Timestamps can be milliseconds since epoch\, ISO8601 timestamp\, or a string with a relative timestamp. See the general integration guide for more details. Allows to specify a unix timestamp \(milliseconds\)\, ISO timestamp\, or relative time.
    :param list keywords: A set of keywords matched against alarms based on the set KeywordFieldStrategy and KeywordMatchStrategy.
    :param list signature: A set of signatures. It does an exact match.
    :param list sortBy: List of properties to sort by \(prefix with \"\-\" to sort descending\).
    :param list includeFlags: Only include objects which have includeFlags set.
    :param list excludeFlags: Exclude objects which have excludeFlags set.
    :param bool includeMappings: Set to include mappings in the search result.
    :param bool includeComments: Set to include comments in the search result.
    :param list timeFieldStrategy: TimeFieldStrategy to define which timestamp field\(s\) to match.
    :param str timeMatchStrategy: TimeMatchStrategy to define how to match startTimestamp and endTimestamp with fields.
    :param list keywordFieldStrategy: KeywordFieldStrategy to define which field\(s\) to match against keywords.
    :param str keywordMatchStrategy: KeywordMatchStrategy to define how to match keywords with fields.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm/search".format()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, don't send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, don't send null values
    if required is not None:
        body.update({"required": required})
    # Only send attackCategoryID if the argument was provided, don't send null values
    if attackCategoryID is not None:
        body.update({"attackCategoryID": attackCategoryID})
    # Only send alarmID if the argument was provided, don't send null values
    if alarmID is not None:
        body.update({"alarmID": alarmID})
    # Only send alarm if the argument was provided, don't send null values
    if alarm is not None:
        body.update({"alarm": alarm})
    # Only send alarmReferences if the argument was provided, don't send null values
    if alarmReferences is not None:
        body.update({"alarmReferences": alarmReferences})
    # Only send labels if the argument was provided, don't send null values
    if labels is not None:
        body.update({"labels": labels})
    # Only send includeMappings if the argument was provided, don't send null values
    if includeMappings is not None:
        body.update({"includeMappings": includeMappings})
    # Only send includeComments if the argument was provided, don't send null values
    if includeComments is not None:
        body.update({"includeComments": includeComments})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send timeFieldStrategy if the argument was provided, don't send null values
    if timeFieldStrategy is not None:
        body.update({"timeFieldStrategy": timeFieldStrategy})
    # Only send timeMatchStrategy if the argument was provided, don't send null values
    if timeMatchStrategy is not None:
        body.update({"timeMatchStrategy": timeMatchStrategy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send signature if the argument was provided, don't send null values
    if signature is not None:
        body.update({"signature": signature})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def unmap(
    id: int,
    signature: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Unmap signatures from an alarm (INTERNAL)

    :param int id: ID of the alarm
    :param list signature: Signatures to unmap
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm/{id}/unmap".format(id=id)
    headers = {}

    query_parameters = {}
    # Only send signature if the argument was provided, don't send null values
    if signature is not None:
        query_parameters.update({"signature": signature})

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "alarm"), module=argus_cli_module)
def update_alarm(
    id: int,
    shortName: str = None,
    description: str = None,
    info: str = None,
    disabled: bool = None,
    addReferences: str = None,
    deleteReferences: str = None,
    addLinks: str = None,
    deleteLinks: str = None,
    addLabels: str = None,
    deleteLabels: str = None,
    internalReference: str = None,
    internalInformation: str = None,
    attackCategoryID: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Update an existing alarm (INTERNAL)

    :param int id: ID of the alarm
    :param str shortName: If set\, update short name of the alarm
    :param str description: If set\, update description of alarm
    :param str info: If set\, update verbose information of alarm \[format\:html\]
    :param bool disabled: If set\, disable or enable alarm \(unchanged if not set\)
    :param list addReferences: Vulnerability references to be added to the alarm \(CVE\-numbers\, BID\-numbers\, URLs etc\)
    :param list deleteReferences: Vulnerability references to be removed from the alarm
    :param list addLinks: External links to be added to the alarm
    :param list deleteLinks: External links to be removed from the alarm
    :param list addLabels: Labels to be added to the alarm
    :param list deleteLabels: Labels to be removed from the alarm
    :param str internalReference: If set\, update link to an internal reference for the alarm
    :param str internalInformation: If set\, update internal information about handling the alarm. Describes how the alarm should be handled by SOC. Contents may be HTML\, which will be sanitized.
    :param int attackCategoryID: Update category of alarm \(unchanged if set to 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/alarm/{id}".format(id=id)
    headers = {}

    body = body or {}
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send attackCategoryID if the argument was provided, don't send null values
    if attackCategoryID is not None:
        body.update({"attackCategoryID": attackCategoryID})
    # Only send info if the argument was provided, don't send null values
    if info is not None:
        body.update({"info": info})
    # Only send disabled if the argument was provided, don't send null values
    if disabled is not None:
        body.update({"disabled": disabled})
    # Only send addReferences if the argument was provided, don't send null values
    if addReferences is not None:
        body.update({"addReferences": addReferences})
    # Only send deleteReferences if the argument was provided, don't send null values
    if deleteReferences is not None:
        body.update({"deleteReferences": deleteReferences})
    # Only send addLinks if the argument was provided, don't send null values
    if addLinks is not None:
        body.update({"addLinks": addLinks})
    # Only send deleteLinks if the argument was provided, don't send null values
    if deleteLinks is not None:
        body.update({"deleteLinks": deleteLinks})
    # Only send addLabels if the argument was provided, don't send null values
    if addLabels is not None:
        body.update({"addLabels": addLabels})
    # Only send deleteLabels if the argument was provided, don't send null values
    if deleteLabels is not None:
        body.update({"deleteLabels": deleteLabels})
    # Only send internalReference if the argument was provided, don't send null values
    if internalReference is not None:
        body.update({"internalReference": internalReference})
    # Only send internalInformation if the argument was provided, don't send null values
    if internalInformation is not None:
        body.update({"internalInformation": internalInformation})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
