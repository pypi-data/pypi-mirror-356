"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("eventfilters", "v2", "status", "bulk"), module=argus_cli_module
)
def submit_event_filter_status_bulk(
    records: dict,
    errorMode: str = "rejectAll",
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Submit eventFilter status records in a bulk operation (INTERNAL)

    :param list records: Filters update statuses
    :param str errorMode: Error mode of the status updates
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/eventfilters/v2/status/bulk".format()
    headers = {}

    body = body or {}
    # Only send errorMode if the argument was provided, don't send null values
    if errorMode is not None:
        body.update({"errorMode": errorMode})
    # Only send records if the argument was provided, don't send null values
    if records is not None:
        body.update({"records": records})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
