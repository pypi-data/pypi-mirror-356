"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
from argus_api.utils import deprecated_alias
log = logging.getLogger(__name__)


@register_command(
    extending=("componentadmin", "v1", "property"),
    module=argus_cli_module
)
def get_property(
    property: str,
    pattern: dict = None,
    type: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Fetch property from runtime components (INTERNAL)
    
    :param str property: Property to fetch
    :param dict pattern: 
    :param str type: 
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises RemoteInvocationFailedException: on 409
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v1/property/{property}".format(property=property)
    headers = {}

    body = body or {}
    # Only send pattern if the argument was provided, don't send null values
    if pattern is not None:
        body.update({"pattern": pattern})
    # Only send type if the argument was provided, don't send null values
    if type is not None:
        body.update({"type": type})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

#: **DEPRECATED** : ``get_properties_1`` is an alias for ``get_property``. Exists
#: only for backward compatibility - **do not use** - use ``get_property`` instead.
get_properties_1 = register_command(
    extending=("componentadmin", "v1", "property"),
    module=argus_cli_module,
    alias="get_properties_1"
)(deprecated_alias("get_properties_1")(get_property))