"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(extending=("assets", "v2", "cpe"), module=argus_cli_module)
def get_asset_cpes(
    idOrWFN: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Get CPE by ID or WFN (INTERNAL)

    :param str idOrWFN: CPE ID or WFN
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/cpe/{idOrWFN}".format(idOrWFN=idOrWFN)
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("assets", "v2", "cpe"), module=argus_cli_module)
def list_asset_cpes(
    keywords: str = None,
    vendor: str = None,
    product: str = None,
    version: str = None,
    sortBy: str = None,
    startTimestamp: str = "0",
    endTimestamp: str = "0",
    includeDeprecated: bool = False,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Basic CPE search. (INTERNAL)

    :param list keywords: Match keywords against all available CPE keyword fields
    :param list vendor: CPE Vendor
    :param list product: CPE Product
    :param list version: CPE Version
    :param list sortBy: Field\(s\) to sort by \- refer to the search POST endpoint to see which fields are permitted
    :param str startTimestamp: Lower bound timestamp filter value against all available CPE timestamp fields
    :param str endTimestamp: Upper bound timestamp filter value against all available CPE timestamp fields
    :param bool includeDeprecated: Whether to include deprecated CPEs in the results
    :param int limit: Limit result set
    :param int offset: Offset result set
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/cpe".format()
    headers = {}

    query_parameters = {}
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        query_parameters.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        query_parameters.update({"endTimestamp": endTimestamp})
    # Only send includeDeprecated if the argument was provided, don't send null values
    if includeDeprecated is not None:
        query_parameters.update({"includeDeprecated": includeDeprecated})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})
    # Only send vendor if the argument was provided, don't send null values
    if vendor is not None:
        query_parameters.update({"vendor": vendor})
    # Only send product if the argument was provided, don't send null values
    if product is not None:
        query_parameters.update({"product": product})
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        query_parameters.update({"version": version})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("assets", "v2", "cpe"), module=argus_cli_module)
def search_cpes(
    cpe: str = None,
    deprecatedBy: str = None,
    deprecates: str = None,
    excludeFlags: str = None,
    includeFlags: str = None,
    keywords: str = None,
    part: str = None,
    product: str = None,
    sortBy: str = None,
    subCriteria: dict = None,
    vendor: str = None,
    version: str = None,
    endTimestamp: str = "0",
    includeDeprecated: bool = None,
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = "any",
    limit: int = 25,
    offset: int = None,
    startTimestamp: str = "0",
    timeFieldStrategy: str = None,
    timeMatchStrategy: str = "any",
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Search CPEs (INTERNAL)

    :param list cpe: Filter for CPEs matching one of these WFN or ID values
    :param list deprecatedBy: Filter for CPEs deprecated by at least one of these CPEs identified by ID or WFN
    :param list deprecates: Filter for CPEs that deprecate at least one of these CPEs identified by ID or WFN
    :param list excludeFlags: Explicitly filter out CPEs that contain these flags
    :param list includeFlags: Explicitly search for CPEs that contain these flags
    :param list keywords: Search for keywords against fields defined by a KeywordFieldStrategy
    :param list part: Filter for CPEs matching one of these part values
    :param list product: Filter for CPEs matching one of these products values
    :param list sortBy: Field\(s\) by which to sort the results
    :param list subCriteria: Set additional criteria that are applied with logical OR by default
    :param list vendor: Filter for CPEs matching one of these vendors values
    :param list version: Filter for CPEs matching one of these versions values
    :param str endTimestamp: Restrict to a time frame based on the set timeFieldStrategy \(end timestamp\).  Allows to specify a unix timestamp \(milliseconds\)\, ISO timestamp\, or relative time.
    :param bool includeDeprecated: Whether to include deprecated CPEs
    :param list keywordFieldStrategy: Defines which fields will be searched by keywords \(default all supported fields\)
    :param str keywordMatchStrategy: Defines how strict different keywords should be matched \(default match any keywords\)
    :param int limit: Limit the results to the specified amount
    :param int offset: Skip specified amount of results
    :param str startTimestamp: Restrict to a time frame based on the set timeFieldStrategy \(start timestamp\).  Allows to specify a unix timestamp \(milliseconds\)\, ISO timestamp\, or relative time.
    :param list timeFieldStrategy: Defines which timestamps fields will be filtered with start\/endTimestamp
    :param str timeMatchStrategy: Defines how strict to match against different timestamps \(all\/any\) using start and end timestamp \(default any\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/cpe/search".format()
    headers = {}

    body = body or {}
    # Only send cpe if the argument was provided, don't send null values
    if cpe is not None:
        body.update({"cpe": cpe})
    # Only send deprecatedBy if the argument was provided, don't send null values
    if deprecatedBy is not None:
        body.update({"deprecatedBy": deprecatedBy})
    # Only send deprecates if the argument was provided, don't send null values
    if deprecates is not None:
        body.update({"deprecates": deprecates})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send includeDeprecated if the argument was provided, don't send null values
    if includeDeprecated is not None:
        body.update({"includeDeprecated": includeDeprecated})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send part if the argument was provided, don't send null values
    if part is not None:
        body.update({"part": part})
    # Only send product if the argument was provided, don't send null values
    if product is not None:
        body.update({"product": product})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send timeFieldStrategy if the argument was provided, don't send null values
    if timeFieldStrategy is not None:
        body.update({"timeFieldStrategy": timeFieldStrategy})
    # Only send timeMatchStrategy if the argument was provided, don't send null values
    if timeMatchStrategy is not None:
        body.update({"timeMatchStrategy": timeMatchStrategy})
    # Only send vendor if the argument was provided, don't send null values
    if vendor is not None:
        body.update({"vendor": vendor})
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        body.update({"version": version})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
