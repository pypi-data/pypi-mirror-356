"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
from requests import Response

log = logging.getLogger(__name__)


@register_command(extending=("pdns", "v3", "cof"), module=argus_cli_module)
def search_records_simplified_cof(
    query: str,
    rrClass: str = None,
    rrType: str = None,
    customerID: int = None,
    tlp: str = None,
    queryMatchStrategy: str = None,
    aggregate: bool = True,
    includeAnonymous: bool = True,
    offset: int = 0,
    limit: int = 25,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Search against PassiveDNS and return matching records in PDNS COF format (PUBLIC)

    :param str query: Search by query
    :param list rrClass: Search by recordClass \(rrclass\)
    :param list rrType: Search by type \(rrtype\)
    :param list customerID: Search by customerID
    :param list tlp: Search by TLP
    :param str queryMatchStrategy: Query match strategy\, partial must be set to use the wildcard
    :param bool aggregate: Whether aggregate records
    :param bool includeAnonymous: Whether include anonymous records
    :param int offset: Skip a number of records
    :param int limit: Max number of records to be returned
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises ResourceLimitExceededException: on 402
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: ``requests.Response`` object or dictionary translated from JSON
    """

    route = "/pdns/v3/cof/{query}".format(query=query)
    headers = {}
    headers["content"] = None
    if json:
        headers["content"] = "application/json"

    query_parameters = {}
    # Only send aggregate if the argument was provided, don't send null values
    if aggregate is not None:
        query_parameters.update({"aggregate": aggregate})
    # Only send includeAnonymous if the argument was provided, don't send null values
    if includeAnonymous is not None:
        query_parameters.update({"includeAnonymous": includeAnonymous})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send rrClass if the argument was provided, don't send null values
    if rrClass is not None:
        query_parameters.update({"rrClass": rrClass})
    # Only send rrType if the argument was provided, don't send null values
    if rrType is not None:
        query_parameters.update({"rrType": rrType})
    # Only send customerID if the argument was provided, don't send null values
    if customerID is not None:
        query_parameters.update({"customerID": customerID})
    # Only send tlp if the argument was provided, don't send null values
    if tlp is not None:
        query_parameters.update({"tlp": tlp})
    # Only send queryMatchStrategy if the argument was provided, don't send null values
    if queryMatchStrategy is not None:
        query_parameters.update({"queryMatchStrategy": queryMatchStrategy})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
