"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def add_template_comment(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Add a comment to a configuration template (INTERNAL)

    :param int id: ID of template to add comment to
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{id}/comment".format(id=id)
    headers = {}

    body = body or {}

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def create_template(
    codeProfile: str,
    name: str,
    shortName: str,
    configuration: str = None,
    configurationResource: str = None,
    dependsOnID: int = None,
    information: str = None,
    mnemonic: str = None,
    properties: dict = None,
    startupIndex: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Create new configuration template (INTERNAL)

    :param str codeProfile: The code profile to use when running this template
    :param str name: A unique name for this template
    :param str shortName: A unique shortname for this template
    :param str configuration: The configuration XML to use for this template. One of configuration and configurationResource is required. \[format\:xml\]
    :param str configurationResource: Name of configuration resource \(class name or classpath to Spring XML. One of configuration and configurationResource is required. The resource must exist in the classpath of the code profile.
    :param int dependsOnID: If set\, this declares the ID of the template that this template requires as parent. Instances must be created with another instance with template dependsOnID as parent.
    :param str information: Informational text about this template. Default sanitation.
    :param str mnemonic: A unique shortname for this template. Use shortName instead.
    :param dict properties: Configuration properties to use for this template\, with default values. Values may be overridden on host or instance
    :param int startupIndex: Specify the startup order of this component
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template".format()
    headers = {}

    body = body or {}
    # Only send codeProfile if the argument was provided, don't send null values
    if codeProfile is not None:
        body.update({"codeProfile": codeProfile})
    # Only send configuration if the argument was provided, don't send null values
    if configuration is not None:
        body.update({"configuration": configuration})
    # Only send configurationResource if the argument was provided, don't send null values
    if configurationResource is not None:
        body.update({"configurationResource": configurationResource})
    # Only send dependsOnID if the argument was provided, don't send null values
    if dependsOnID is not None:
        body.update({"dependsOnID": dependsOnID})
    # Only send information if the argument was provided, don't send null values
    if information is not None:
        body.update({"information": information})
    # Only send mnemonic if the argument was provided, don't send null values
    if mnemonic is not None:
        body.update({"mnemonic": mnemonic})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send properties if the argument was provided, don't send null values
    if properties is not None:
        body.update({"properties": properties})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send startupIndex if the argument was provided, don't send null values
    if startupIndex is not None:
        body.update({"startupIndex": startupIndex})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def delete_template(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Delete configuration template (INTERNAL)

    :param int id: ID of template to delete
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{id}".format(id=id)
    headers = {}

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def duplicate_template(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Create a duplicate of a configuration template (INTERNAL)

    :param int id: ID of template to duplicate
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{id}/duplicate".format(id=id)
    headers = {}

    body = body or {}

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def get_template_configuration_data(
    idOrShortname: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch configuration template configuration data (INTERNAL)

    :param str idOrShortname: ID or shortname of template
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{idOrShortname}/configuration".format(
        idOrShortname=idOrShortname
    )
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def get_template_properties(
    idOrShortname: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch configuration template properties (INTERNAL)

    :param str idOrShortname: ID or shortname of template
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{idOrShortname}/properties".format(
        idOrShortname=idOrShortname
    )
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def list_templates(
    search: str = None,
    orderDesc: bool = None,
    includeComments: bool = False,
    includeDeleted: bool = False,
    offset: int = 0,
    limit: int = 25,
    orderBy: str = "name",
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""List configuration templates (INTERNAL)

    :param str search: Keyword search string
    :param bool orderDesc: Sort results descending
    :param bool includeComments: If true\, also include comments on every returned search result
    :param bool includeDeleted: If true\, also include templates marked as deleted
    :param int offset: Skip the first matching results
    :param int limit: Return a limited number of results
    :param str orderBy: Sort results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template".format()
    headers = {}

    query_parameters = {}
    # Only send includeComments if the argument was provided, don't send null values
    if includeComments is not None:
        query_parameters.update({"includeComments": includeComments})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send orderBy if the argument was provided, don't send null values
    if orderBy is not None:
        query_parameters.update({"orderBy": orderBy})
    # Only send search if the argument was provided, don't send null values
    if search is not None:
        query_parameters.update({"search": search})
    # Only send orderDesc if the argument was provided, don't send null values
    if orderDesc is not None:
        query_parameters.update({"orderDesc": orderDesc})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def promote_all_template_instances(
    idOrShortname: str,
    instances: int = None,
    templateRevision: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Promote all configuration instances for this template (INTERNAL)

    :param str idOrShortname: ID or shortname of template to promote
    :param list instances: The instances to promote. Default is to promote all instances.
    :param int templateRevision: The template revision to promote to. If not set\, this will default to latest revision.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{idOrShortname}/promoteAll".format(
        idOrShortname=idOrShortname
    )
    headers = {}

    body = body or {}
    # Only send instances if the argument was provided, don't send null values
    if instances is not None:
        body.update({"instances": instances})
    # Only send templateRevision if the argument was provided, don't send null values
    if templateRevision is not None:
        body.update({"templateRevision": templateRevision})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def search_templates(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    codeProfile: str = None,
    keywords: str = None,
    template: str = None,
    dependingOnID: int = None,
    searchString: dict = None,
    sortBy: str = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    includeComments: bool = None,
    includeConfiguration: bool = True,
    includeProperties: bool = True,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Search configuration templates (INTERNAL)

    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param list codeProfile: If true\, filter on templates having any of these code profiles.
    :param list keywords: If true\, filter on templates where name matches these keywords.
    :param list template: If set\, filter on templates by ID or shortname.
    :param list dependingOnID: If set\, filter on templates set to depend on any of the given template IDs.
    :param dict searchString:
    :param list sortBy: List of properties to sort by \(prefix with \"\-\" to sort descending\).
    :param list includeFlags: Only include objects which have includeFlags set.
    :param list excludeFlags: Exclude objects which have excludeFlags set.
    :param bool includeComments: If true\, also include comments on output.
    :param bool includeConfiguration: If true\, also include configuration on output.
    :param bool includeProperties: If true\, also include properties on output.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/search".format()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, don't send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, don't send null values
    if required is not None:
        body.update({"required": required})
    # Only send codeProfile if the argument was provided, don't send null values
    if codeProfile is not None:
        body.update({"codeProfile": codeProfile})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send template if the argument was provided, don't send null values
    if template is not None:
        body.update({"template": template})
    # Only send dependingOnID if the argument was provided, don't send null values
    if dependingOnID is not None:
        body.update({"dependingOnID": dependingOnID})
    # Only send includeComments if the argument was provided, don't send null values
    if includeComments is not None:
        body.update({"includeComments": includeComments})
    # Only send includeConfiguration if the argument was provided, don't send null values
    if includeConfiguration is not None:
        body.update({"includeConfiguration": includeConfiguration})
    # Only send includeProperties if the argument was provided, don't send null values
    if includeProperties is not None:
        body.update({"includeProperties": includeProperties})
    # Only send searchString if the argument was provided, don't send null values
    if searchString is not None:
        body.update({"searchString": searchString})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def template_revisions(
    idOrShortname: str,
    limit: int = 25,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""List revisions of configuration template (INTERNAL)

    :param str idOrShortname: ID or shortname of template
    :param int limit: Max number of revisions to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{idOrShortname}/revisions".format(
        idOrShortname=idOrShortname
    )
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def update_template(
    idOrShortname: str,
    codeProfile: str = None,
    configuration: str = None,
    configurationResource: str = None,
    dependsOnID: int = None,
    information: str = None,
    mnemonic: str = None,
    name: str = None,
    properties: dict = None,
    shortName: str = None,
    startupIndex: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Update configuration template (INTERNAL)

    :param str idOrShortname: ID or shortname of template to update
    :param str codeProfile: If set\, update the code profile to use for this template.
    :param str configuration: If set\, update the configuration of this template. Will clear configurationResource \[format\:xml\]
    :param str configurationResource: Name of configuration resource \(class name or classpath to Spring XML. Will clear explicit configuration. The resource must exist in the classpath of the code profile.
    :param int dependsOnID: If set\, update the parent dependency to the template with this ID
    :param str information: If set\, update the informational text of this template. Default sanitation.
    :param str mnemonic: If set\, update the shortname of this template. Use shortName instead
    :param str name: If set\, update the name of this template
    :param dict properties: If set\, add these properties to the template. Properties with null value will be removed.
    :param str shortName: If set\, update the shortname of this template
    :param int startupIndex: If set\, change the startup order of this component
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{idOrShortname}".format(
        idOrShortname=idOrShortname
    )
    headers = {}

    body = body or {}
    # Only send codeProfile if the argument was provided, don't send null values
    if codeProfile is not None:
        body.update({"codeProfile": codeProfile})
    # Only send configuration if the argument was provided, don't send null values
    if configuration is not None:
        body.update({"configuration": configuration})
    # Only send configurationResource if the argument was provided, don't send null values
    if configurationResource is not None:
        body.update({"configurationResource": configurationResource})
    # Only send dependsOnID if the argument was provided, don't send null values
    if dependsOnID is not None:
        body.update({"dependsOnID": dependsOnID})
    # Only send information if the argument was provided, don't send null values
    if information is not None:
        body.update({"information": information})
    # Only send mnemonic if the argument was provided, don't send null values
    if mnemonic is not None:
        body.update({"mnemonic": mnemonic})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send properties if the argument was provided, don't send null values
    if properties is not None:
        body.update({"properties": properties})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send startupIndex if the argument was provided, don't send null values
    if startupIndex is not None:
        body.update({"startupIndex": startupIndex})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def update_template_properties(
    idOrShortname: str,
    properties: dict,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Update configuration template properties (INTERNAL)

    :param str idOrShortname: ID of template to update properties on
    :param dict properties: The template properties to update to\, null value will clear the property
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{idOrShortname}/properties".format(
        idOrShortname=idOrShortname
    )
    headers = {}

    body = body or {}
    # Only send properties if the argument was provided, don't send null values
    if properties is not None:
        body.update({"properties": properties})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("configurationadmin", "v1", "template"), module=argus_cli_module
)
def view_template(
    idOrShortname: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch configuration template (INTERNAL)

    :param str idOrShortname: ID or shortname of template
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{idOrShortname}".format(
        idOrShortname=idOrShortname
    )
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
