"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def add_document(
    folderID: int,
    data: str,
    mimeType: str,
    name: str,
    accessMode: str = "roleBased",
    notificationOptions: dict = None,
    overwriteExisting: bool = None,
    text: str = None,
    inheritExplicitPermissions: bool = None,
    lockRequestTime: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Create a new document (PUBLIC)

    :param int folderID: Parent folder ID
    :param str data:
    :param str mimeType: MIME type of document content
    :param str name: Name of new document
    :param str accessMode: General access mode of new document
    :param dict notificationOptions:
    :param bool overwriteExisting: If true\, overwrite existing document with same name in parent folder\, as a new revision.
    :param str text: Plain text document content. If set change document content
    :param bool inheritExplicitPermissions: Inherit explicit permissions from parent folder
    :param int lockRequestTime: Specify how long the document should be locked
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ParentFolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/documents".format(folderID=folderID)
    headers = {}

    body = body or {}
    # Only send accessMode if the argument was provided, don't send null values
    if accessMode is not None:
        body.update({"accessMode": accessMode})
    # Only send data if the argument was provided, don't send null values
    if data is not None:
        body.update({"data": data})
    # Only send inheritExplicitPermissions if the argument was provided, don't send null values
    if inheritExplicitPermissions is not None:
        body.update({"inheritExplicitPermissions": inheritExplicitPermissions})
    # Only send lockRequestTime if the argument was provided, don't send null values
    if lockRequestTime is not None:
        body.update({"lockRequestTime": lockRequestTime})
    # Only send mimeType if the argument was provided, don't send null values
    if mimeType is not None:
        body.update({"mimeType": mimeType})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send notificationOptions if the argument was provided, don't send null values
    if notificationOptions is not None:
        body.update({"notificationOptions": notificationOptions})
    # Only send overwriteExisting if the argument was provided, don't send null values
    if overwriteExisting is not None:
        body.update({"overwriteExisting": overwriteExisting})
    # Only send text if the argument was provided, don't send null values
    if text is not None:
        body.update({"text": text})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def add_document_raw(
    folderID: int,
    documentName: str,
    accessMode: str = "roleBased",
    overwriteExisting: bool = False,
    skipNotification: bool = False,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Create a new document with the specified name into the parent folder (PUBLIC)

    :param int folderID: Parent folder ID
    :param str documentName: Document name
    :param str accessMode: Access mode to set on new document
    :param bool overwriteExisting: If true\, overwrite existing document with the same name
    :param bool skipNotification: If true\, skip notification to folder watchers
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ParentFolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/documents/{documentName}".format(
        folderID=folderID, documentName=documentName
    )
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send accessMode if the argument was provided, don't send null values
    if accessMode is not None:
        query_parameters.update({"accessMode": accessMode})
    # Only send overwriteExisting if the argument was provided, don't send null values
    if overwriteExisting is not None:
        query_parameters.update({"overwriteExisting": overwriteExisting})
    # Only send skipNotification if the argument was provided, don't send null values
    if skipNotification is not None:
        query_parameters.update({"skipNotification": skipNotification})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def add_folder(
    parentID: int,
    name: str,
    accessMode: str = "roleBased",
    inheritExplicitPermissions: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Create a new subfolder (PUBLIC)

    :param int parentID: ID of parent folder
    :param str name: Name of new folder
    :param str accessMode: General access mode of new folder
    :param bool inheritExplicitPermissions: Inherit explicit permissions from parent folder
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ParentFolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{parentID}".format(parentID=parentID)
    headers = {}

    body = body or {}
    # Only send accessMode if the argument was provided, don't send null values
    if accessMode is not None:
        body.update({"accessMode": accessMode})
    # Only send inheritExplicitPermissions if the argument was provided, don't send null values
    if inheritExplicitPermissions is not None:
        body.update({"inheritExplicitPermissions": inheritExplicitPermissions})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def add_folder_by_path(
    parentFolderPath: str,
    name: str,
    accessMode: str = "roleBased",
    customerID: dict = None,
    customer: str = None,
    createMissingFolders: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Create a new subfolder in specified parent folder. (PUBLIC)

    :param str parentFolderPath: Path from customer root to the parent folder \(if not specified\, add the folder in the root folder\)
    :param str name: Name of new folder
    :param str accessMode: General access mode of new folder
    :param dict customerID:
    :param str customer: Customer space to fetch from \(default is current users customer
    :param bool createMissingFolders: If true\, create any missing parent folder elements
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ParentFolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path{parentFolderPath}".format(
        parentFolderPath=parentFolderPath
    )
    headers = {}

    body = body or {}
    # Only send createMissingFolders if the argument was provided, don't send null values
    if createMissingFolders is not None:
        body.update({"createMissingFolders": createMissingFolders})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send accessMode if the argument was provided, don't send null values
    if accessMode is not None:
        body.update({"accessMode": accessMode})
    # Only send customerID if the argument was provided, don't send null values
    if customerID is not None:
        body.update({"customerID": customerID})

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def add_folder_watcher(
    folderID: int,
    subject: str,
    subjectDomain: str = None,
    negated: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Add watcher to specified folder. Requires write access to specified folder. (PUBLIC)

    :param int folderID: ID of folder
    :param str subject: ID or shortname of subject to add as watcher.
    :param str subjectDomain: Domain to resolve subject shortname in. Defaults to current users domain.
    :param bool negated: If true\, register an explicitly negated watcher entry. Default is to add a new active watcher.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/watchers".format(folderID=folderID)
    headers = {}

    body = body or {}
    # Only send negated if the argument was provided, don't send null values
    if negated is not None:
        body.update({"negated": negated})
    # Only send subject if the argument was provided, don't send null values
    if subject is not None:
        body.update({"subject": subject})
    # Only send subjectDomain if the argument was provided, don't send null values
    if subjectDomain is not None:
        body.update({"subjectDomain": subjectDomain})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def add_folder_watcher_by_path(
    path: str,
    subject: str,
    subjectDomain: str = None,
    customer: str = None,
    negated: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Add watcher to specified folder (PUBLIC)

    :param str path: Path to folder
    :param str subject: ID or shortname of subject to add as watcher.
    :param str subjectDomain: Domain to resolve subject shortname in. Defaults to current users domain.
    :param str customer: Customer space to lookup folder in \(default is current users customer\)
    :param bool negated: If true\, register an explicitly negated watcher entry. Default is to add a new active watcher.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path/watchers{path}".format(path=path)
    headers = {}

    body = body or {}
    # Only send negated if the argument was provided, don't send null values
    if negated is not None:
        body.update({"negated": negated})
    # Only send subject if the argument was provided, don't send null values
    if subject is not None:
        body.update({"subject": subject})
    # Only send subjectDomain if the argument was provided, don't send null values
    if subjectDomain is not None:
        body.update({"subjectDomain": subjectDomain})

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def browse_folder(
    folderID: int,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch specified folder entries (PUBLIC)

    :param int folderID: ID of folder to browse
    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises FolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/content".format(folderID=folderID)
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def browse_folder_by_path(
    path: str,
    customer: str = None,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch specified folder entries (PUBLIC)

    :param str path: Path from customer root \(if not specified\, this returns the root
    :param str customer: Customer space to fetch from \(default is current users customer
    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises FolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path/content{path}".format(path=path)
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def delete_folder(
    folderID: int,
    cascadeDocumentID: int = None,
    mode: str = "DELETE_IF_EMPTY",
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Delete specified folder, possibly recursively discarding contained documents (PUBLIC)

    :param int folderID: ID of folder to delete
    :param list cascadeDocumentID: List with IDs of documents which can be discarded \(with mode DELETE\_CASCADE\_LISTED\_DOCUMENTS\)
    :param str mode: Recursive folder delete strategy\, default is DELETE\_IF\_EMPTY
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ConflictOnDelete(folderContainsUndeletedDocument(s))Exception: on 409
    :raises ValidationFailedException: on 412
    :raises Document(s)LockedException: on 423
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}".format(folderID=folderID)
    headers = {}

    query_parameters = {}
    # Only send mode if the argument was provided, don't send null values
    if mode is not None:
        query_parameters.update({"mode": mode})
    # Only send cascadeDocumentID if the argument was provided, don't send null values
    if cascadeDocumentID is not None:
        query_parameters.update({"cascadeDocumentID": cascadeDocumentID})

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def delete_folder_by_path(
    parentFolderPath: str,
    folderName: str,
    customer: str = None,
    cascadeDocumentID: int = None,
    mode: str = "DELETE_IF_EMPTY",
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Delete specified folder, possibly recursively discarding contained documents (PUBLIC)

    :param str parentFolderPath: Path from customer root to the parent folder \(if not specified\, fetch target folder from root folder\)
    :param str folderName: Folder name
    :param str customer: Customer space to fetch from \(default is current users customer
    :param list cascadeDocumentID: List with IDs of documents which can be discarded \(with mode DELETE\_CASCADE\_LISTED\_DOCUMENTS\)
    :param str mode: Recursive folder delete strategy\, default is DELETE\_IF\_EMPTY
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ConflictOnDelete(folderContainsUndeletedDocument(s))Exception: on 409
    :raises ValidationFailedException: on 412
    :raises Document(s)LockedException: on 423
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path{parentFolderPath}/{folderName}".format(
        parentFolderPath=parentFolderPath, folderName=folderName
    )
    headers = {}

    query_parameters = {}
    # Only send mode if the argument was provided, don't send null values
    if mode is not None:
        query_parameters.update({"mode": mode})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    # Only send cascadeDocumentID if the argument was provided, don't send null values
    if cascadeDocumentID is not None:
        query_parameters.update({"cascadeDocumentID": cascadeDocumentID})

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def delete_folder_watcher(
    folderID: int,
    entryID: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Delete watcher entry from folder. Requires write access to specified folder. (PUBLIC)

    :param int folderID: ID of folder
    :param str entryID: ID of watcher entry
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/watchers/{entryID}".format(
        folderID=folderID, entryID=entryID
    )
    headers = {}

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def delete_folder_watcher_by_path(
    path: str,
    entryID: str,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Delete watcher entry from folder (PUBLIC)

    :param str path: Path to folder
    :param str entryID: ID of watcher entry
    :param str customer: Customer space to lookup folder in \(default is current users customer\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path/watchers{path}/{entryID}".format(
        path=path, entryID=entryID
    )
    headers = {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def get_current_user_folder_watch_status(
    folderID: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Get current user watcher status for folder (PUBLIC)

    :param int folderID: ID of folder
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/watch".format(folderID=folderID)
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def get_current_user_folder_watch_status_by_path(
    path: str,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Get current user watcher status for folder (PUBLIC)

    :param str path: Path to folder
    :param str customer: Customer space to fetch from \(default is current users customer\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path/watch{path}".format(path=path)
    headers = {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def get_current_user_root_folder(
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch root folder for the customers that current user has access to (PUBLIC)

    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/root".format()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def get_folder_meta_info_by_id(
    folderID: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch specified folder metadata (PUBLIC)

    :param int folderID: ID of folder to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}".format(folderID=folderID)
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def get_folder_meta_info_by_path(
    path: str,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch specified folder metadata (PUBLIC)

    :param str path: Path from customer root \(if not specified\, this returns the root\)
    :param str customer: Customer space to fetch from \(default is current users customer
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path/meta{path}".format(path=path)
    headers = {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def get_folder_watchers_by_id(
    folderID: int,
    offset: int = None,
    includeNegated: bool = None,
    includeDeleted: bool = None,
    limit: int = 25,
    includeInherited: bool = True,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Get all watchers for folder (PUBLIC)

    :param int folderID: ID of folder
    :param int offset: Skip this number of results
    :param bool includeNegated: If true\, also fetch explicit unwatch records
    :param bool includeDeleted: If true\, also fetch deleted watcher records
    :param int limit: Limit the result
    :param bool includeInherited: If true\, also fetch watchers defined on parent folders
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/watchers".format(folderID=folderID)
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send includeInherited if the argument was provided, don't send null values
    if includeInherited is not None:
        query_parameters.update({"includeInherited": includeInherited})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send includeNegated if the argument was provided, don't send null values
    if includeNegated is not None:
        query_parameters.update({"includeNegated": includeNegated})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def get_folder_watchers_by_path(
    path: str,
    customer: str = None,
    offset: int = None,
    includeNegated: bool = None,
    includeDeleted: bool = None,
    limit: int = 25,
    includeInherited: bool = True,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Get all watchers for folder (PUBLIC)

    :param str path: Path to folder
    :param str customer: Customer space to lookup folder in \(default is current users customer\)
    :param int offset: Skip this number of results
    :param bool includeNegated: If true\, also fetch explicit unwatch records
    :param bool includeDeleted: If true\, also fetch deleted watcher records
    :param int limit: Limit the result
    :param bool includeInherited: If true\, also fetch watchers defined on parent folders
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path/watchers{path}".format(path=path)
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send includeInherited if the argument was provided, don't send null values
    if includeInherited is not None:
        query_parameters.update({"includeInherited": includeInherited})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send includeNegated if the argument was provided, don't send null values
    if includeNegated is not None:
        query_parameters.update({"includeNegated": includeNegated})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def grant_folder_access(
    folderID: int,
    subject: str,
    level: str,
    subjectID: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Grant access to specified folder (PUBLIC)

    :param int folderID: Folder ID
    :param str subject: Specify user\/group to grant access to
    :param str level: Specify access level to grant to user\/group
    :param dict subjectID:
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/access".format(folderID=folderID)
    headers = {}

    body = body or {}
    # Only send subjectID if the argument was provided, don't send null values
    if subjectID is not None:
        body.update({"subjectID": subjectID})
    # Only send subject if the argument was provided, don't send null values
    if subject is not None:
        body.update({"subject": subject})
    # Only send level if the argument was provided, don't send null values
    if level is not None:
        body.update({"level": level})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def grant_folder_access_by_path(
    path: str,
    subject: str,
    level: str,
    subjectID: dict = None,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Grant access to specified folder (PUBLIC)

    :param str path: Path from customer root \(if not specified\, this returns the root
    :param str subject: Specify user\/group to grant access to
    :param str level: Specify access level to grant to user\/group
    :param dict subjectID:
    :param str customer: Customer space to fetch from \(default is current users customer
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path/access{path}".format(path=path)
    headers = {}

    body = body or {}
    # Only send subjectID if the argument was provided, don't send null values
    if subjectID is not None:
        body.update({"subjectID": subjectID})
    # Only send subject if the argument was provided, don't send null values
    if subject is not None:
        body.update({"subject": subject})
    # Only send level if the argument was provided, don't send null values
    if level is not None:
        body.update({"level": level})

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def list_folder_access(
    folderID: int,
    offset: int = 0,
    limit: int = 25,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch ACL for specified folder (PUBLIC)

    :param int folderID: Folder ID
    :param int offset: Skip a number of results
    :param int limit: Maximum number of returned results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/access".format(folderID=folderID)
    headers = {}

    query_parameters = {}
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def list_folder_access_by_path(
    path: str,
    customer: str = None,
    offset: int = 0,
    limit: int = 25,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch ACL for specified folder (PUBLIC)

    :param str path: Path from customer root \(if not specified\, this returns the root
    :param str customer: Customer space to fetch from \(default is current users customer
    :param int offset: Skip a number of results
    :param int limit: Maximum number of returned results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path/access{path}".format(path=path)
    headers = {}

    query_parameters = {}
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def move_folder(
    folderID: int,
    newFolderID: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Move specified folder (PUBLIC)

    :param int folderID: ID of folder to update
    :param int newFolderID: The ID of the parent folder to move this document to
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/move".format(folderID=folderID)
    headers = {}

    body = body or {}
    # Only send newFolderID if the argument was provided, don't send null values
    if newFolderID is not None:
        body.update({"newFolderID": newFolderID})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def revoke_folder_access(
    folderID: int,
    accessID: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Revoke specified explicit access from folder (PUBLIC)

    :param int folderID: Folder ID
    :param int accessID: Access ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/access/{accessID}".format(
        folderID=folderID, accessID=accessID
    )
    headers = {}

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def revoke_folder_access_by_path(
    path: str,
    accessID: int,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Revoke specified explicit access from folder (PUBLIC)

    :param str path: Path from customer root \(if not specified\, this returns the root\)
    :param int accessID: Access ID
    :param str customer: Customer space to fetch from \(default is current users customer
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path/access{path}/{accessID}".format(
        path=path, accessID=accessID
    )
    headers = {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def set_current_user_folder_watch_status_by_id(
    folderID: int,
    watch: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Change current user watcher status for folder. Requires read access to folder. (PUBLIC)

    :param int folderID: ID of folder
    :param bool watch: If true\, enable an explicit watcher for the current user for the target folder. If false\, add an explicit negation for the current user.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/watch".format(folderID=folderID)
    headers = {}

    body = body or {}
    # Only send watch if the argument was provided, don't send null values
    if watch is not None:
        body.update({"watch": watch})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def set_current_user_folder_watch_status_by_path(
    path: str,
    watch: bool = None,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Set current user watcher status for folder (PUBLIC)

    :param str path: Path to folder
    :param bool watch: If true\, enable an explicit watcher for the current user for the target folder. If false\, add an explicit negation for the current user.
    :param str customer: Customer space to lookup folder in \(default is current users customer\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path/watch{path}".format(path=path)
    headers = {}

    body = body or {}
    # Only send watch if the argument was provided, don't send null values
    if watch is not None:
        body.update({"watch": watch})

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def update_folder(
    folderID: int,
    name: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Update specified folder (PUBLIC)

    :param int folderID: ID of folder to update
    :param str name: If set change folder name
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}".format(folderID=folderID)
    headers = {}

    body = body or {}
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def update_folder_access_settings(
    folderID: int,
    accessMode: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Change access settings on specified folder (PUBLIC)

    :param int folderID: Folder ID
    :param str accessMode: Specify general access mode for document\/folder
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/{folderID}/access".format(folderID=folderID)
    headers = {}

    body = body or {}
    # Only send accessMode if the argument was provided, don't send null values
    if accessMode is not None:
        body.update({"accessMode": accessMode})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def update_folder_access_settings_by_path(
    path: str,
    accessMode: str,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Change access settings on specified folder (PUBLIC)

    :param str path: Path from customer root \(if not specified\, this returns the root\)
    :param str accessMode: Specify general access mode for document\/folder
    :param str customer: Customer space to fetch from \(default is current users customer\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path/access{path}".format(path=path)
    headers = {}

    body = body or {}
    # Only send accessMode if the argument was provided, don't send null values
    if accessMode is not None:
        body.update({"accessMode": accessMode})

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("documents", "v1", "folder", "path", "access"), module=argus_cli_module
)
def update_folder_by_path(
    path: str,
    name: str = None,
    customer: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Update specified folder (PUBLIC)

    :param str path: Path from customer root \(if not specified\, this returns the root\)
    :param str name: If set change folder name
    :param str customer: Customer space to fetch from \(default is current users customer
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/folder/path/meta{path}".format(path=path)
    headers = {}

    body = body or {}
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
