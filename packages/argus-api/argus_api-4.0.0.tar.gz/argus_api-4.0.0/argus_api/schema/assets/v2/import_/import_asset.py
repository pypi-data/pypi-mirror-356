"""Autogenerated API schema"""
from argus_api import session


get_import_status_by_id = {'tags': ['assets/v2/import/asset'], 'summary': 'Retrieve the status of an import job by the job id returned when submitting an import request (TEST)', 'description': '', 'operationId': 'getImportStatusByID', 'parameters': [{'name': 'importJobID', 'in': 'path', 'description': 'ID assigned to the import job', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}, {'name': 'includeComments', 'in': 'query', 'description': 'Whether to include any comments generated by the import job', 'schema': {'type': 'boolean'}, 'type': 'bool'}], 'responses': {'default': {'description': 'Retrieve the status of an import job by the job id returned when submitting an import request', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The status of an import request as it progresses through the import processing pipeline', 'properties': {'appendedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components appended by the import job'}, 'asset': {'type': 'object', 'description': "Compact representation of an Asset's metadata", 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'dataSourceID': {'type': 'string', 'format': 'uuid', 'description': 'ID of the Data Source that reported this asset'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the asset'}, 'shortName': {'type': 'string', 'description': 'Short name of the asset'}}}, 'comments': {'type': 'array', 'description': 'Any comments generated while processing the import, sorted by their timestamps', 'items': {'type': 'object', 'description': 'A comment added to an asset import status entity as the job progresses through the import pipeline', 'properties': {'comment': {'type': 'string', 'description': 'The actual comment'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the comment was generated by the import process'}}}}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'dataSource': {'type': 'object', 'description': "Data Source's metadata", 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of data source'}, 'name': {'type': 'string', 'description': 'Name of the data source'}, 'shortName': {'type': 'string', 'description': 'Short name of the data source'}}}, 'expiredComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components expired by the import job'}, 'failedObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of observations the import job failed to process'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The id assigned to the import job'}, 'invalidObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of invalid observations processed by the import job'}, 'jobEndTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the import pipeline completed processing the import'}, 'jobResult': {'type': 'string', 'description': 'The final result of the import job', 'enum': ['created', 'updated', 'failed']}, 'jobStartTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the import pipeline started processing the import'}, 'jobStatus': {'type': 'string', 'description': 'The current status of the import job', 'enum': ['prepared', 'active', 'failed', 'success', 'timeout']}, 'newComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components created by the import job'}, 'newObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of vulnerability observations created by the import job'}, 'processedObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of vulnerability observations processed by the import job'}, 'refreshedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components refreshed by the import job'}, 'refreshedObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of vulnerability observations refreshed by the import job'}, 'rejectedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components rejected by the import job'}, 'replacedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components replaced by the import job'}, 'staleObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of stale observations skipped by the import job'}, 'submittedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'submittedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components submitted by the import request'}, 'submittedObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of vulnerability observations submitted by the import request'}, 'submittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the import was submitted'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['importAssets'], 'x-Argus-ApiStatus': 'TEST'}
import_asset = {'tags': ['assets/v2/import/asset'], 'summary': 'Imports Assets (TEST)', 'description': '', 'operationId': 'importAsset', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request to import an Asset', 'properties': {'assetIdentification': {'type': 'dict', 'description': 'Request to identify an Asset', 'properties': {'asset': {'type': 'str', 'description': "ID or shortName of asset. Used to identify existing assets or assign new assets' shortname."}, 'assetDefinition': {'type': 'str', 'description': "ID or shortname of the asset's definition"}, 'identificationComponent': {'type': 'str', 'description': 'ID or shortName of component definition - required if identifying by component'}, 'identificationComponentValue': {'type': 'str', 'description': 'Component value, parsed based on the component definition type - required if identifying by component'}, 'strategy': {'type': 'str', 'description': 'Identification strategy to be used - by asset or by component', 'enum': ['asset', 'component']}}, 'required': ['asset', 'assetDefinition', 'strategy']}, 'assetName': {'type': 'str', 'description': "Display name of the Asset. Used if new asset. If not set the asset's ID will be used", 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'components': {'type': 'list', 'description': 'Specify components to import', 'items': {'type': 'dict', 'description': 'Request to import Components to an Asset', 'properties': {'componentDefinition': {'type': 'str', 'description': 'ID Or shortName of component definition'}, 'ttl': {'type': 'int', 'description': 'Time to live duration of this asset component since last seen, 0 means will not expire. If not set will inherit from the root DataImportRequest ttl.', 'minimum': 0}, 'value': {'type': 'str', 'description': "Value which is parsed based on the definition's type"}}, 'required': ['componentDefinition', 'value']}, 'uniqueItems': True}, 'customer': {'type': 'str', 'description': "ID or short name of the asset's customer"}, 'dataSource': {'type': 'str', 'description': 'Required ID or short name of the data source'}, 'description': {'type': 'str', 'description': 'Description of the Asset.'}, 'observations': {'type': 'list', 'description': 'Observations to be added to the asset', 'items': {'type': 'dict', 'description': 'Request to record vulnerabilities observed on an asset submitted to the asset import endpoint', 'properties': {'components': {'type': 'list', 'description': 'Observation components connected to the observation', 'items': {'type': 'dict', 'description': 'Observation components connected to an observation import in a data import request', 'properties': {'component': {'type': 'str', 'description': 'Id or short name of component definition'}, 'ttl': {'type': 'int', 'description': 'Time to live duration of this observation component since last seen, 0 means will not expire. If not set will inherit from the parent ObservationImportRequest if set there and the root DataImportRequest otherwise.', 'minimum': 0}, 'value': {'type': 'str', 'description': 'Component value, will be eventually parsed based on the component definition type'}}, 'required': ['component', 'value']}, 'uniqueItems': True}, 'cvss': {'type': 'float', 'default': 0.0, 'description': 'CVSS score of the observation (range from 0 to 10)', 'maximum': 10, 'minimum': 0}, 'observationDescription': {'type': 'str', 'description': 'Description of observation'}, 'observationReferences': {'type': 'list', 'description': 'Observation references', 'items': {'type': 'str', 'description': 'Observation references'}, 'uniqueItems': True}, 'rawOutput': {'type': 'str', 'description': 'Raw output of the scanner'}, 'severity': {'type': 'str', 'description': 'Optional field which describes the severity of the observation', 'enum': ['info', 'low', 'medium', 'high', 'critical']}, 'ttl': {'type': 'int', 'description': 'Time to live duration of this observation since last seen, 0 means will not expire. If not set will inherit from the root DataImportRequest ttl.', 'minimum': 0}, 'vulnerability': {'type': 'str', 'description': 'Identify the Vulnerability definition by ID (UUID) or vulnerability identifier (e.g. CVE-2015-3429)', 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}, 'required': ['vulnerability']}, 'uniqueItems': True}, 'ttl': {'type': 'int', 'description': "Time to live duration of this asset since last seen, 0 means won't expire.Will be inherited by any asset components, observations, and their components in the import if they do not have their own non-null TTLs.", 'minimum': 0}}, 'required': ['assetIdentification', 'customer', 'dataSource', 'ttl']}}}, 'required': True}, 'responses': {'default': {'description': 'Imports Assets', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'A response telling whether the asset was new or already existed, and the ID of the Asset, which can be used to retrieve the asset later', 'properties': {'asset': {'type': 'string', 'format': 'uuid', 'description': 'Id of the existing Asset, or new id of the not yet created new asset'}, 'jobID': {'type': 'string', 'format': 'uuid', 'description': 'Id of import job. Can be used to poll and retrieve the progress and result of the import job'}, 'status': {'type': 'string', 'description': 'Status telling whether the asset already existed in database or is new', 'enum': ['existingAsset', 'newAsset']}}}}}}}}, '200': {'description': 'OK', 'content': {'application/json': {}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['importAssets'], 'x-Argus-ApiStatus': 'TEST'}
list_import_status = {'tags': ['assets/v2/import/asset'], 'summary': 'Basic import status search (TEST)', 'description': '', 'operationId': 'listImportStatus', 'parameters': [{'name': 'job', 'in': 'query', 'description': 'Job ids', 'schema': {'type': 'list', 'items': {'type': 'str'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'str'}, 'uniqueItems': True}, {'name': 'customer', 'in': 'query', 'description': 'Customer ids or short names', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'asset', 'in': 'query', 'description': 'Asset ids or short names', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'minCount', 'in': 'query', 'description': 'Filter by minCount', 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'maxCount', 'in': 'query', 'description': 'Filter by maxCount', 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'countFieldStrategy', 'in': 'query', 'description': 'Which count field(s) to filter min/maxCount', 'schema': {'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['newComponents', 'expiredComponents', 'rejectedComponents', 'replacedComponents', 'appendedComponents', 'refreshedComponents', 'submittedObservations', 'newObservations', 'processedObservations', 'all']}, 'uniqueItems': True}, 'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['newComponents', 'expiredComponents', 'rejectedComponents', 'replacedComponents', 'appendedComponents', 'refreshedComponents', 'submittedObservations', 'newObservations', 'processedObservations', 'all']}, 'uniqueItems': True}, {'name': 'startTimestamp', 'in': 'query', 'description': 'Lower bound timestamp filter value', 'schema': {'type': 'str', 'default': '0'}, 'type': 'str', 'default': '0'}, {'name': 'endTimestamp', 'in': 'query', 'description': 'Upper bound timestamp filter value', 'schema': {'type': 'str', 'default': '0'}, 'type': 'str', 'default': '0'}, {'name': 'timeFieldStrategy', 'in': 'query', 'description': 'Which time field(s) to filter by timestamp start/end', 'schema': {'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['submittedTimestamp', 'jobStartTimestamp', 'jobEndTimestamp', 'all']}, 'uniqueItems': True}, 'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['submittedTimestamp', 'jobStartTimestamp', 'jobEndTimestamp', 'all']}, 'uniqueItems': True}, {'name': 'limit', 'in': 'query', 'description': 'Limit result set', 'schema': {'type': 'int', 'default': '25'}, 'type': 'int', 'default': '25'}, {'name': 'offset', 'in': 'query', 'description': 'Offset result set', 'schema': {'type': 'int', 'default': '0'}, 'type': 'int', 'default': '0'}, {'name': 'sortBy', 'in': 'query', 'description': 'Field(s) to sort by - refer to the search POST endpoint to see which fields are permitted', 'schema': {'type': 'list', 'items': {'type': 'string'}}, 'type': 'list', 'items': {'type': 'string'}}, {'name': 'includeComments', 'in': 'query', 'description': 'Whether to include any comments generated by the import job', 'schema': {'type': 'boolean'}, 'type': 'bool'}], 'responses': {'default': {'description': 'Basic import status search', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'The status of an import request as it progresses through the import processing pipeline', 'properties': {'appendedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components appended by the import job'}, 'asset': {'type': 'object', 'description': "Compact representation of an Asset's metadata", 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'dataSourceID': {'type': 'string', 'format': 'uuid', 'description': 'ID of the Data Source that reported this asset'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the asset'}, 'shortName': {'type': 'string', 'description': 'Short name of the asset'}}}, 'comments': {'type': 'array', 'description': 'Any comments generated while processing the import, sorted by their timestamps', 'items': {'type': 'object', 'description': 'A comment added to an asset import status entity as the job progresses through the import pipeline', 'properties': {'comment': {'type': 'string', 'description': 'The actual comment'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the comment was generated by the import process'}}}}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'dataSource': {'type': 'object', 'description': "Data Source's metadata", 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of data source'}, 'name': {'type': 'string', 'description': 'Name of the data source'}, 'shortName': {'type': 'string', 'description': 'Short name of the data source'}}}, 'expiredComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components expired by the import job'}, 'failedObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of observations the import job failed to process'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The id assigned to the import job'}, 'invalidObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of invalid observations processed by the import job'}, 'jobEndTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the import pipeline completed processing the import'}, 'jobResult': {'type': 'string', 'description': 'The final result of the import job', 'enum': ['created', 'updated', 'failed']}, 'jobStartTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the import pipeline started processing the import'}, 'jobStatus': {'type': 'string', 'description': 'The current status of the import job', 'enum': ['prepared', 'active', 'failed', 'success', 'timeout']}, 'newComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components created by the import job'}, 'newObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of vulnerability observations created by the import job'}, 'processedObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of vulnerability observations processed by the import job'}, 'refreshedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components refreshed by the import job'}, 'refreshedObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of vulnerability observations refreshed by the import job'}, 'rejectedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components rejected by the import job'}, 'replacedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components replaced by the import job'}, 'staleObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of stale observations skipped by the import job'}, 'submittedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'submittedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components submitted by the import request'}, 'submittedObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of vulnerability observations submitted by the import request'}, 'submittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the import was submitted'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['importAssets'], 'x-Argus-ApiStatus': 'TEST'}
search_import_status = {'tags': ['assets/v2/import/asset'], 'summary': 'Search import statuses (TEST)', 'description': '', 'operationId': 'searchImportStatus', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'asset': {'type': 'list', 'description': 'Filter by import jobs for these assets, identifiable by their id or shortname', 'items': {'type': 'str', 'description': 'Filter by import jobs for these assets, identifiable by their id or shortname'}, 'uniqueItems': True}, 'countFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'Defines which count fields will be filtered with min/maxCount', 'items': {'type': 'str', 'default': 'all', 'description': 'Defines which count fields will be filtered with min/maxCount', 'enum': ['newComponents', 'expiredComponents', 'rejectedComponents', 'replacedComponents', 'appendedComponents', 'refreshedComponents', 'submittedObservations', 'newObservations', 'processedObservations', 'all']}, 'uniqueItems': True}, 'countMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Defines how strict to match against different count fields (all/any) using min/maxCount(default any)', 'enum': ['any', 'all']}, 'customer': {'type': 'list', 'description': 'Filter by import jobs for assets belonging to these customers, identifiable by their id or shortname', 'items': {'type': 'str', 'description': 'Filter by import jobs for assets belonging to these customers, identifiable by their id or shortname'}, 'uniqueItems': True}, 'dataSource': {'type': 'list', 'description': 'Filter by import jobs for assets reported by these data sources, identifiable by their id or shortname', 'items': {'type': 'str', 'description': 'Filter by import jobs for assets reported by these data sources, identifiable by their id or shortname'}, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'default': '0', 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp).  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'importResult': {'type': 'list', 'description': 'Filter for import jobs with any of these results', 'items': {'type': 'str', 'description': 'Filter for import jobs with any of these results', 'enum': ['created', 'updated', 'failed']}, 'uniqueItems': True}, 'importStatus': {'type': 'list', 'description': 'Filter for import jobs with any of these statuses', 'items': {'type': 'str', 'description': 'Filter for import jobs with any of these statuses', 'enum': ['prepared', 'active', 'failed', 'success', 'timeout']}, 'uniqueItems': True}, 'includeComments': {'type': 'bool', 'description': 'Whether to include any comments generated by the import job'}, 'job': {'type': 'list', 'description': 'Filter by the IDs of the import jobs', 'items': {'type': 'str', 'description': 'Filter by the IDs of the import jobs'}, 'uniqueItems': True}, 'limit': {'type': 'int', 'default': 25, 'description': 'Limit the results to the specified amount', 'minimum': 0}, 'maxCount': {'type': 'int', 'description': 'Filter import job statuses whose count fields, as selected by the count field strategy, are at most this count i.e. <=', 'minimum': 0}, 'minCount': {'type': 'int', 'description': 'Filter import job statuses whose count fields, as selected by the count field strategy, are at least this count i.e. >=', 'minimum': 0}, 'offset': {'type': 'int', 'default': 0, 'description': 'Skip specified amount of results', 'minimum': 0}, 'sortBy': {'type': 'list', 'default': 'jobEndTimestamp', 'description': 'Field(s) by which to sort the results', 'items': {'type': 'str', 'default': 'jobEndTimestamp', 'description': 'Field(s) by which to sort the results', 'enum': ['submittedTimestamp', 'jobStartTimestamp', 'jobEndTimestamp', 'submittedComponentsCount', 'newComponentsCount', 'submittedObservationsCount', 'newObservationsCount', '-submittedTimestamp', '-jobStartTimestamp', '-jobEndTimestamp', '-submittedComponentsCount', '-newComponentsCount', '-submittedObservationsCount', '-newObservationsCount']}}, 'startTimestamp': {'type': 'str', 'default': '0', 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp).  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'subCriteria': {'type': 'list', 'description': 'Set additional criteria that are applied with logical OR by default', 'items': {'type': 'dict', 'description': 'Search sub-criteria for searching for import statuses with query logic i.e. AND/OR/NOT', 'properties': {'asset': {'type': 'list', 'description': 'Filter by import jobs for these assets, identifiable by their id or shortname', 'items': {'type': 'str', 'description': 'Filter by import jobs for these assets, identifiable by their id or shortname'}, 'uniqueItems': True}, 'countFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'Defines which count fields will be filtered with min/maxCount', 'items': {'type': 'str', 'default': 'all', 'description': 'Defines which count fields will be filtered with min/maxCount', 'enum': ['newComponents', 'expiredComponents', 'rejectedComponents', 'replacedComponents', 'appendedComponents', 'refreshedComponents', 'submittedObservations', 'newObservations', 'processedObservations', 'all']}, 'uniqueItems': True}, 'countMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Defines how strict to match against different count fields (all/any) using min/maxCount(default any)', 'enum': ['any', 'all']}, 'customer': {'type': 'list', 'description': 'Filter by import jobs for assets belonging to these customers, identifiable by their id or shortname', 'items': {'type': 'str', 'description': 'Filter by import jobs for assets belonging to these customers, identifiable by their id or shortname'}, 'uniqueItems': True}, 'dataSource': {'type': 'list', 'description': 'Filter by import jobs for assets reported by these data sources, identifiable by their id or shortname', 'items': {'type': 'str', 'description': 'Filter by import jobs for assets reported by these data sources, identifiable by their id or shortname'}, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'default': '0', 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp).  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'exclude': {'type': 'bool', 'default': False, 'description': 'If set to true, objects matching these criteria will be excluded'}, 'importResult': {'type': 'list', 'description': 'Filter for import jobs with any of these results', 'items': {'type': 'str', 'description': 'Filter for import jobs with any of these results', 'enum': ['created', 'updated', 'failed']}, 'uniqueItems': True}, 'importStatus': {'type': 'list', 'description': 'Filter for import jobs with any of these statuses', 'items': {'type': 'str', 'description': 'Filter for import jobs with any of these statuses', 'enum': ['prepared', 'active', 'failed', 'success', 'timeout']}, 'uniqueItems': True}, 'job': {'type': 'list', 'description': 'Filter by the IDs of the import jobs', 'items': {'type': 'str', 'description': 'Filter by the IDs of the import jobs'}, 'uniqueItems': True}, 'maxCount': {'type': 'int', 'description': 'Filter import job statuses whose count fields, as selected by the count field strategy, are at most this count i.e. <=', 'minimum': 0}, 'minCount': {'type': 'int', 'description': 'Filter import job statuses whose count fields, as selected by the count field strategy, are at least this count i.e. >=', 'minimum': 0}, 'required': {'type': 'bool', 'default': False, 'description': 'If set to true, objects matching these criteria are required (logical AND-ed together with parent criteria)'}, 'startTimestamp': {'type': 'str', 'default': '0', 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp).  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'timeFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'Defines which timestamps fields will be filtered with start/endTimestamp', 'items': {'type': 'str', 'default': 'all', 'description': 'Defines which timestamps fields will be filtered with start/endTimestamp', 'enum': ['submittedTimestamp', 'jobStartTimestamp', 'jobEndTimestamp', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any)', 'enum': ['any', 'all']}, 'user': {'type': 'list', 'description': 'Filter by import jobs related to these users, identifiable by their id or shortname', 'items': {'type': 'str', 'description': 'Filter by import jobs related to these users, identifiable by their id or shortname'}, 'uniqueItems': True}, 'userFieldStrategy': {'type': 'list', 'default': 'submittedByUser', 'description': 'Defines which user fields to filter by', 'items': {'type': 'str', 'default': 'submittedByUser', 'description': 'Defines which user fields to filter by', 'enum': ['submittedByUser', 'all']}, 'uniqueItems': True}, 'userMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Defines how strict to match against different user fields', 'enum': ['any', 'all']}}}, 'uniqueItems': True}, 'timeFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'Defines which timestamps fields will be filtered with start/endTimestamp', 'items': {'type': 'str', 'default': 'all', 'description': 'Defines which timestamps fields will be filtered with start/endTimestamp', 'enum': ['submittedTimestamp', 'jobStartTimestamp', 'jobEndTimestamp', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any)', 'enum': ['any', 'all']}, 'user': {'type': 'list', 'description': 'Filter by import jobs related to these users, identifiable by their id or shortname', 'items': {'type': 'str', 'description': 'Filter by import jobs related to these users, identifiable by their id or shortname'}, 'uniqueItems': True}, 'userFieldStrategy': {'type': 'list', 'default': 'submittedByUser', 'description': 'Defines which user fields to filter by', 'items': {'type': 'str', 'default': 'submittedByUser', 'description': 'Defines which user fields to filter by', 'enum': ['submittedByUser', 'all']}, 'uniqueItems': True}, 'userMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Defines how strict to match against different user fields', 'enum': ['any', 'all']}}}}}, 'required': True}, 'responses': {'default': {'description': 'Search import statuses', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'The status of an import request as it progresses through the import processing pipeline', 'properties': {'appendedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components appended by the import job'}, 'asset': {'type': 'object', 'description': "Compact representation of an Asset's metadata", 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'dataSourceID': {'type': 'string', 'format': 'uuid', 'description': 'ID of the Data Source that reported this asset'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the asset'}, 'shortName': {'type': 'string', 'description': 'Short name of the asset'}}}, 'comments': {'type': 'array', 'description': 'Any comments generated while processing the import, sorted by their timestamps', 'items': {'type': 'object', 'description': 'A comment added to an asset import status entity as the job progresses through the import pipeline', 'properties': {'comment': {'type': 'string', 'description': 'The actual comment'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the comment was generated by the import process'}}}}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'dataSource': {'type': 'object', 'description': "Data Source's metadata", 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of data source'}, 'name': {'type': 'string', 'description': 'Name of the data source'}, 'shortName': {'type': 'string', 'description': 'Short name of the data source'}}}, 'expiredComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components expired by the import job'}, 'failedObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of observations the import job failed to process'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The id assigned to the import job'}, 'invalidObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of invalid observations processed by the import job'}, 'jobEndTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the import pipeline completed processing the import'}, 'jobResult': {'type': 'string', 'description': 'The final result of the import job', 'enum': ['created', 'updated', 'failed']}, 'jobStartTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the import pipeline started processing the import'}, 'jobStatus': {'type': 'string', 'description': 'The current status of the import job', 'enum': ['prepared', 'active', 'failed', 'success', 'timeout']}, 'newComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components created by the import job'}, 'newObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of vulnerability observations created by the import job'}, 'processedObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of vulnerability observations processed by the import job'}, 'refreshedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components refreshed by the import job'}, 'refreshedObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of vulnerability observations refreshed by the import job'}, 'rejectedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components rejected by the import job'}, 'replacedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components replaced by the import job'}, 'staleObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of stale observations skipped by the import job'}, 'submittedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'submittedComponentsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of asset components submitted by the import request'}, 'submittedObservationsCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of vulnerability observations submitted by the import request'}, 'submittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the import was submitted'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['importAssets'], 'x-Argus-ApiStatus': 'TEST'}