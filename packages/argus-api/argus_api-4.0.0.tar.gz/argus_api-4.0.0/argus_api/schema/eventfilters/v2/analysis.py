"""Autogenerated API schema"""
from argus_api import session


add_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Adds an analysis filter (INTERNAL)', 'description': '', 'operationId': 'addAnalysisFilter', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to add analysis filters', 'properties': {'actions': {'type': 'dict', 'properties': {'actionName': {'type': 'str', 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'bool', 'default': False, 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'disableCompileStaticValidation': {'type': 'bool', 'default': False, 'description': 'If true, we will skip static validation of the filter'}, 'skipNewEvent': {'type': 'bool', 'default': False, 'description': 'If true the filter will not submit generated events for central storage'}, 'storeRawEvents': {'type': 'bool', 'default': False, 'description': 'If true the filter will store the raw events'}, 'triggerCode': {'type': 'str', 'description': 'Groovy code used to generate the new event'}}, 'required': ['actionName', 'triggerCode']}, 'authoredByUser': {'type': 'str', 'description': 'The user that submitted the Filter-as-Code change. Should be used with externallyManaged=true.'}, 'commitID': {'type': 'str', 'description': 'The commit ID of the Filter-as-Code change. Should be used with externallyManaged=true.'}, 'customer': {'type': 'str', 'description': "The shortname or ID of the customer the filter belongs to. To create a global filter set the value to '0'"}, 'description': {'type': 'str', 'description': 'A description of the filter'}, 'enabled': {'type': 'bool', 'default': False, 'description': 'Whether or not the filter is enabled'}, 'externallyManaged': {'type': 'bool', 'default': False, 'description': 'Whether or not the filter code is externally managed'}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'description': 'Esper code to select which events the filter will be applied to'}}, 'required': ['statementCode']}, 'labels': {'type': 'list', 'description': 'A set of labels which can be used to categorize the filter', 'items': {'type': 'str', 'description': 'A set of labels which can be used to categorize the filter'}, 'uniqueItems': True}, 'name': {'type': 'str', 'description': 'The name of the filter'}, 'shortName': {'type': 'str', 'description': 'Optional short name of the filter.', 'pattern': '[a-zA-Z0-9_:\\-\\.]*'}}, 'required': ['actions', 'customer', 'description', 'filters', 'name']}}}, 'required': True}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Adds an analysis filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n', 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be used to generate a new event', 'properties': {'actionName': {'type': 'string', 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'boolean', 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'boolean', 'description': 'If true the filter will not submit generated events for central storage'}, 'storeRawEvents': {'type': 'boolean', 'description': 'If true, the filter will store the raw events'}, 'triggerCode': {'type': 'string', 'description': 'Groovy code used to generate the new event'}}}, 'authoredByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was changed'}, 'commitID': {'type': 'string', 'description': 'The commit ID of the Filter-as-Code change'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'preStatementCode1': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'string', 'description': 'Esper code to select which events the filter will be applied to'}}}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number for this filter instance'}, 'shortName': {'type': 'string', 'description': 'The short name of the filter (can be null)'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['addAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
delete_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Deletes an analysis filter (INTERNAL)', 'description': '', 'operationId': 'deleteAnalysisFilter', 'parameters': [{'name': 'idOrShortName', 'in': 'path', 'description': 'ID or short name of filter to delete', 'required': True, 'schema': {'type': 'str', 'minLength': 1}, 'type': 'str', 'minLength': 1}], 'responses': {'default': {'description': 'Deletes an analysis filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n', 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be used to generate a new event', 'properties': {'actionName': {'type': 'string', 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'boolean', 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'boolean', 'description': 'If true the filter will not submit generated events for central storage'}, 'storeRawEvents': {'type': 'boolean', 'description': 'If true, the filter will store the raw events'}, 'triggerCode': {'type': 'string', 'description': 'Groovy code used to generate the new event'}}}, 'authoredByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was changed'}, 'commitID': {'type': 'string', 'description': 'The commit ID of the Filter-as-Code change'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'preStatementCode1': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'string', 'description': 'Esper code to select which events the filter will be applied to'}}}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number for this filter instance'}, 'shortName': {'type': 'string', 'description': 'The short name of the filter (can be null)'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['deleteAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
disable_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Disables an analysis filter (INTERNAL)', 'description': '', 'operationId': 'disableAnalysisFilter', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to enable an analysis filter', 'properties': {'comment': {'type': 'str', 'description': 'A comment describing why the filter was enabled/disabled'}}}}}}, 'responses': {'default': {'description': 'Disables an analysis filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n', 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be used to generate a new event', 'properties': {'actionName': {'type': 'string', 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'boolean', 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'boolean', 'description': 'If true the filter will not submit generated events for central storage'}, 'storeRawEvents': {'type': 'boolean', 'description': 'If true, the filter will store the raw events'}, 'triggerCode': {'type': 'string', 'description': 'Groovy code used to generate the new event'}}}, 'authoredByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was changed'}, 'commitID': {'type': 'string', 'description': 'The commit ID of the Filter-as-Code change'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'preStatementCode1': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'string', 'description': 'Esper code to select which events the filter will be applied to'}}}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number for this filter instance'}, 'shortName': {'type': 'string', 'description': 'The short name of the filter (can be null)'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
disable_analysis_filter_on_instance = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Disables an analysis filter on instance (INTERNAL)', 'description': '', 'operationId': 'disableAnalysisFilterOnInstance', 'parameters': [{'name': 'filterID', 'in': 'path', 'description': 'ID of the filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}, {'name': 'instanceID', 'in': 'path', 'description': 'ID of the instance', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'responses': {'default': {'description': 'Disables an analysis filter on instance', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'An object describing the filter disabled on an instance', 'properties': {'filterID': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter disabled on an instance'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
duplicate_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Duplicates an analysis filter (INTERNAL)', 'description': '', 'operationId': 'duplicateAnalysisFilter', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to duplicate an analysis filter', 'properties': {'customer': {'type': 'str', 'description': "The customer the duplicate should belong to (id or shortname). Use '0' to create a global filter, If this field is not set the default is using the same customer as the original filter."}}}}}}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Duplicates an analysis filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n', 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be used to generate a new event', 'properties': {'actionName': {'type': 'string', 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'boolean', 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'boolean', 'description': 'If true the filter will not submit generated events for central storage'}, 'storeRawEvents': {'type': 'boolean', 'description': 'If true, the filter will store the raw events'}, 'triggerCode': {'type': 'string', 'description': 'Groovy code used to generate the new event'}}}, 'authoredByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was changed'}, 'commitID': {'type': 'string', 'description': 'The commit ID of the Filter-as-Code change'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'preStatementCode1': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'string', 'description': 'Esper code to select which events the filter will be applied to'}}}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number for this filter instance'}, 'shortName': {'type': 'string', 'description': 'The short name of the filter (can be null)'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['duplicateAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
enable_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Enables an analysis filter (INTERNAL)', 'description': '', 'operationId': 'enableAnalysisFilter', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to enable an analysis filter', 'properties': {'comment': {'type': 'str', 'description': 'A comment describing why the filter was enabled/disabled'}}}}}}, 'responses': {'default': {'description': 'Enables an analysis filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n', 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be used to generate a new event', 'properties': {'actionName': {'type': 'string', 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'boolean', 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'boolean', 'description': 'If true the filter will not submit generated events for central storage'}, 'storeRawEvents': {'type': 'boolean', 'description': 'If true, the filter will store the raw events'}, 'triggerCode': {'type': 'string', 'description': 'Groovy code used to generate the new event'}}}, 'authoredByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was changed'}, 'commitID': {'type': 'string', 'description': 'The commit ID of the Filter-as-Code change'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'preStatementCode1': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'string', 'description': 'Esper code to select which events the filter will be applied to'}}}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number for this filter instance'}, 'shortName': {'type': 'string', 'description': 'The short name of the filter (can be null)'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
enable_analysis_filter_on_instance = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Enables an analysis filter on instance (INTERNAL)', 'description': '', 'operationId': 'enableAnalysisFilterOnInstance', 'parameters': [{'name': 'filterID', 'in': 'path', 'description': 'ID of the filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}, {'name': 'instanceID', 'in': 'path', 'description': 'ID of the instance', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'responses': {'default': {'description': 'Enables an analysis filter on instance', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'An object describing the enabled filter on instance', 'properties': {'filterID': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter enabled on instance'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
get_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Gets an analysis filter (INTERNAL)', 'description': '', 'operationId': 'getAnalysisFilter', 'parameters': [{'name': 'idOrShortName', 'in': 'path', 'description': 'ID or short name of filter', 'required': True, 'schema': {'type': 'str', 'minLength': 1}, 'type': 'str', 'minLength': 1}, {'name': 'includeCode', 'in': 'query', 'description': 'Whether to include code in AnnotationFilter', 'schema': {'type': 'bool', 'default': 'false'}, 'type': 'bool', 'default': 'false'}, {'name': 'revision', 'in': 'query', 'description': 'The expected revision of the filter', 'schema': {'type': 'int'}, 'type': 'int'}], 'responses': {'default': {'description': 'Gets an analysis filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n', 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be used to generate a new event', 'properties': {'actionName': {'type': 'string', 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'boolean', 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'boolean', 'description': 'If true the filter will not submit generated events for central storage'}, 'storeRawEvents': {'type': 'boolean', 'description': 'If true, the filter will store the raw events'}, 'triggerCode': {'type': 'string', 'description': 'Groovy code used to generate the new event'}}}, 'authoredByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was changed'}, 'commitID': {'type': 'string', 'description': 'The commit ID of the Filter-as-Code change'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'preStatementCode1': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'string', 'description': 'Esper code to select which events the filter will be applied to'}}}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number for this filter instance'}, 'shortName': {'type': 'string', 'description': 'The short name of the filter (can be null)'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
get_analysis_filter_revisions = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Gets a analysis filters earlier revisions (INTERNAL)', 'description': '', 'operationId': 'getAnalysisFilterRevisions', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter to fetch revisions for', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'description': 'The max amount of revisions to return', 'schema': {'type': 'int', 'default': '25'}, 'type': 'int', 'default': '25'}, {'name': 'offset', 'in': 'query', 'description': 'The number of revisions to skip before returning', 'schema': {'type': 'int', 'default': '0'}, 'type': 'int', 'default': '0'}], 'responses': {'default': {'description': 'Gets a analysis filters earlier revisions', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'A an earlier version of a filter. Should describe when and why a filter was changes, and who made the change', 'properties': {'comment': {'type': 'string', 'description': 'An explanation of the change that was made'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp the filter was updated'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of the filter'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
get_analysis_filter_status = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Gets the status of a analysis filters instance statuses (INTERNAL)', 'description': '', 'operationId': 'listAnalysisFilterStatus', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'schema': {'type': 'int', 'default': '25'}, 'type': 'int', 'default': '25'}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'schema': {'type': 'int', 'default': '0'}, 'type': 'int', 'default': '0'}], 'responses': {'default': {'description': 'Gets the status of a analysis filters instance statuses', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'An object describing the current status of an analysis filter instance on a host', 'properties': {'container': {'type': 'object', 'description': 'An object containing information about the container the filter instance is running on', 'properties': {'componentName': {'type': 'string', 'description': 'The name of the component the filter is running on'}, 'instanceID': {'type': 'integer', 'format': 'int32', 'description': 'The id of the container the filter is running on'}}}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'errorMessage': {'type': 'string', 'description': 'The message connected to the current error of the filter. null if no error is reported'}, 'filterStatus': {'type': 'string', 'description': 'The current filter status of the filter', 'enum': ['ok', 'error', 'disabled', 'disabledByCircuitBreaker', 'disabledByError']}, 'host': {'type': 'object', 'description': 'An object containing information about the host the filter is running on', 'properties': {'hostName': {'type': 'string', 'description': 'The name of the host the filter is running on'}, 'id': {'type': 'integer', 'format': 'int32', 'description': 'The ID of the host'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'loggingStatus': {'type': 'string', 'description': 'The current logging status of the filter', 'enum': ['debug', 'info']}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision of the filter that is running'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewAnalysisFilterStatus'], 'x-Argus-ApiStatus': 'INTERNAL'}
list_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Simple search for analysis filters (INTERNAL)', 'description': '', 'operationId': 'listAnalysisFilter', 'parameters': [{'name': 'keywords', 'in': 'query', 'description': 'Search by keywords', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'keywordMatch', 'in': 'query', 'description': 'Deprecated: Set match strategy for keyword search', 'schema': {'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'keywordField', 'in': 'query', 'description': 'Deprecated: Set field strategy for keyword search', 'schema': {'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['id', 'name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}, 'uniqueItems': True}, 'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['id', 'name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}, 'uniqueItems': True}, {'name': 'timestampMatch', 'in': 'query', 'description': 'Deprecated: Set match strategy for timestamp filtering', 'schema': {'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'timestampField', 'in': 'query', 'description': 'Deprecated: Set field strategy for timestamp filtering', 'schema': {'type': 'list', 'default': 'lastUpdated', 'items': {'type': 'str', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}, 'uniqueItems': True}, 'type': 'list', 'default': 'lastUpdated', 'items': {'type': 'str', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}, 'uniqueItems': True}, {'name': 'start', 'in': 'query', 'description': 'Deprecated: Lower bound timestamp filter value', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'end', 'in': 'query', 'description': 'Deprecated: Upper bound timestamp filter value', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'keywordMatchStrategy', 'in': 'query', 'description': 'Set match strategy for keyword search', 'schema': {'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'keywordFieldStrategy', 'in': 'query', 'description': 'Set field strategy for keyword search', 'schema': {'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['id', 'name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}, 'uniqueItems': True}, 'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['id', 'name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}, 'uniqueItems': True}, {'name': 'timestampMatchStrategy', 'in': 'query', 'description': 'Set match strategy for timestamp filtering', 'schema': {'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'timestampFieldStrategy', 'in': 'query', 'description': 'Set field strategy for timestamp filtering', 'schema': {'type': 'list', 'default': 'lastUpdated', 'items': {'type': 'str', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}, 'uniqueItems': True}, 'type': 'list', 'default': 'lastUpdated', 'items': {'type': 'str', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}, 'uniqueItems': True}, {'name': 'startTimestamp', 'in': 'query', 'description': 'Lower bound timestamp filter value', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'endTimestamp', 'in': 'query', 'description': 'Upper bound timestamp filter value', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'includeCode', 'in': 'query', 'description': 'Whether to include code in results', 'schema': {'type': 'boolean'}, 'type': 'bool'}, {'name': 'sortBy', 'in': 'query', 'description': 'Field to sort by', 'schema': {'type': 'list', 'enum': ['id', 'name', 'created', 'lastUpdated', 'deleted', '-id', '-name', '-created', '-lastUpdated', '-deleted'], 'items': {'type': 'string'}}, 'type': 'list', 'enum': ['id', 'name', 'created', 'lastUpdated', 'deleted', '-id', '-name', '-created', '-lastUpdated', '-deleted'], 'items': {'type': 'string'}}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'schema': {'type': 'int', 'default': '25'}, 'type': 'int', 'default': '25'}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'schema': {'type': 'int', 'default': '0'}, 'type': 'int', 'default': '0'}], 'responses': {'default': {'description': 'Simple search for analysis filters', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n', 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be used to generate a new event', 'properties': {'actionName': {'type': 'string', 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'boolean', 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'boolean', 'description': 'If true the filter will not submit generated events for central storage'}, 'storeRawEvents': {'type': 'boolean', 'description': 'If true, the filter will store the raw events'}, 'triggerCode': {'type': 'string', 'description': 'Groovy code used to generate the new event'}}}, 'authoredByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was changed'}, 'commitID': {'type': 'string', 'description': 'The commit ID of the Filter-as-Code change'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'preStatementCode1': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'string', 'description': 'Esper code to select which events the filter will be applied to'}}}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number for this filter instance'}, 'shortName': {'type': 'string', 'description': 'The short name of the filter (can be null)'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
revert_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Reverts an analysis filter to a previous revision (INTERNAL)', 'description': '', 'operationId': 'revertAnalysisFilter', 'parameters': [{'name': 'filterID', 'in': 'path', 'description': 'ID of the filter to revert( must be the current version of a filter)', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to revert an analysis filter to an earlier version', 'properties': {'comment': {'type': 'str', 'description': 'A comment describing why the filter was reverted'}, 'revisionID': {'type': 'int', 'description': 'The ID of the filter to revert to. Must be a revision of the filter to revert'}}, 'required': ['comment']}}}}, 'responses': {'default': {'description': 'Reverts an analysis filter to a previous revision', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n', 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be used to generate a new event', 'properties': {'actionName': {'type': 'string', 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'boolean', 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'boolean', 'description': 'If true the filter will not submit generated events for central storage'}, 'storeRawEvents': {'type': 'boolean', 'description': 'If true, the filter will store the raw events'}, 'triggerCode': {'type': 'string', 'description': 'Groovy code used to generate the new event'}}}, 'authoredByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was changed'}, 'commitID': {'type': 'string', 'description': 'The commit ID of the Filter-as-Code change'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'preStatementCode1': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'string', 'description': 'Esper code to select which events the filter will be applied to'}}}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number for this filter instance'}, 'shortName': {'type': 'string', 'description': 'The short name of the filter (can be null)'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['revertAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
revive_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Revives a deleted a analysis filter (INTERNAL)', 'description': '', 'operationId': 'reviveAnalysisFilter', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'responses': {'default': {'description': 'Revives a deleted a analysis filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n', 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be used to generate a new event', 'properties': {'actionName': {'type': 'string', 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'boolean', 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'boolean', 'description': 'If true the filter will not submit generated events for central storage'}, 'storeRawEvents': {'type': 'boolean', 'description': 'If true, the filter will store the raw events'}, 'triggerCode': {'type': 'string', 'description': 'Groovy code used to generate the new event'}}}, 'authoredByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was changed'}, 'commitID': {'type': 'string', 'description': 'The commit ID of the Filter-as-Code change'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'preStatementCode1': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'string', 'description': 'Esper code to select which events the filter will be applied to'}}}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number for this filter instance'}, 'shortName': {'type': 'string', 'description': 'The short name of the filter (can be null)'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['reviveAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
search_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Searches for analysis filters (INTERNAL)', 'description': '', 'operationId': 'searchAnalysisFilter', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to search for analysis filters', 'properties': {'customer': {'type': 'list', 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'items': {'type': 'str', 'description': 'Limit search to filters with the given customers, identified by id or shortname'}, 'uniqueItems': True}, 'endTimestamp': {'type': 'int', 'default': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp)', 'minimum': 0}, 'excludeFlags': {'type': 'list', 'description': 'Flags to exclude', 'items': {'type': 'str', 'description': 'Flags to exclude', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}, 'uniqueItems': True}, 'filterID': {'type': 'list', 'description': 'Limit search to filters with the given IDs', 'items': {'type': 'int', 'description': 'Limit search to filters with the given IDs'}, 'uniqueItems': True}, 'includeAscendingCustomers': {'type': 'bool', 'description': 'When limiting filters by customer, include filters of ascending customers (default is false)'}, 'includeCode': {'type': 'bool', 'default': False, 'description': 'Whether or not to include code in the result object. The code is only returned if set to true'}, 'includeDeleted': {'type': 'bool', 'default': False, 'description': 'Set to true to include deleted filters (excluded by default).'}, 'includeDescendingCustomers': {'type': 'bool', 'default': True, 'description': 'When limiting filters by customer, include filters of descending customers (default is true)'}, 'includeFlags': {'type': 'list', 'description': 'Flags to include', 'items': {'type': 'str', 'description': 'Flags to include', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}, 'uniqueItems': True}, 'keywordFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'Defines which fields will be searched by keywords (default all supported fields)', 'items': {'type': 'str', 'default': 'all', 'description': 'Defines which fields will be searched by keywords (default all supported fields)', 'enum': ['id', 'name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}, 'uniqueItems': True}, 'keywordMatchStrategy': {'type': 'str', 'default': 'all', 'description': 'Defines how strict different keywords should be matched (default match all keywords)', 'enum': ['any', 'all']}, 'keywords': {'type': 'list', 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'items': {'type': 'str', 'description': 'Search for keywords against fields defined by keywordFieldStrategy'}, 'uniqueItems': True}, 'limit': {'type': 'int', 'default': 25, 'description': 'Limit maximum amount of results', 'minimum': 0}, 'offset': {'type': 'int', 'default': 0, 'description': 'Skip specified amount of results', 'minimum': 0}, 'sortBy': {'type': 'list', 'items': {'type': 'str', 'enum': ['id', 'name', 'created', 'lastUpdated', 'deleted', '-id', '-name', '-created', '-lastUpdated', '-deleted']}}, 'startTimestamp': {'type': 'int', 'default': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp)', 'minimum': 0}, 'subCriteria': {'type': 'list', 'description': 'The set of sub criteria to add to the search', 'items': {'type': 'dict', 'description': 'The sub criteria for searching for analysis filters', 'properties': {'customer': {'type': 'list', 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'items': {'type': 'str', 'description': 'Limit search to filters with the given customers, identified by id or shortname'}, 'uniqueItems': True}, 'endTimestamp': {'type': 'int', 'default': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp)', 'minimum': 0}, 'exclude': {'type': 'boolean'}, 'excludeFlags': {'type': 'list', 'description': 'Flags to exclude', 'items': {'type': 'str', 'description': 'Flags to exclude', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}, 'uniqueItems': True}, 'filterID': {'type': 'list', 'description': 'Limit search to filters with the given IDs', 'items': {'type': 'int', 'description': 'Limit search to filters with the given IDs'}, 'uniqueItems': True}, 'includeDeleted': {'type': 'bool', 'default': False, 'description': 'Set to true to include deleted filters (excluded by default).'}, 'includeFlags': {'type': 'list', 'description': 'Flags to include', 'items': {'type': 'str', 'description': 'Flags to include', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}, 'uniqueItems': True}, 'keywordFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'Defines which fields will be searched by keywords (default all supported fields)', 'items': {'type': 'str', 'default': 'all', 'description': 'Defines which fields will be searched by keywords (default all supported fields)', 'enum': ['id', 'name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}, 'uniqueItems': True}, 'keywordMatchStrategy': {'type': 'str', 'default': 'all', 'description': 'Defines how strict different keywords should be matched (default match all keywords)', 'enum': ['any', 'all']}, 'keywords': {'type': 'list', 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'items': {'type': 'str', 'description': 'Search for keywords against fields defined by keywordFieldStrategy'}, 'uniqueItems': True}, 'required': {'type': 'boolean'}, 'startTimestamp': {'type': 'int', 'default': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp)', 'minimum': 0}, 'timeFieldStrategy': {'type': 'list', 'default': 'lastUpdated', 'description': 'Defines which timestamps will be included in the search (default lastUpdated)', 'items': {'type': 'str', 'default': 'lastUpdated', 'description': 'Defines which timestamps will be included in the search (default lastUpdated)', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any)', 'enum': ['any', 'all']}, 'user': {'type': 'list', 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'items': {'type': 'str', 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively'}, 'uniqueItems': True}, 'userFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'Defines which fields will be searched by user (default all supported fields)', 'items': {'type': 'str', 'default': 'all', 'description': 'Defines which fields will be searched by user (default all supported fields)', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}, 'uniqueItems': True}, 'userMatchStrategy': {'type': 'str', 'default': 'all', 'description': 'Defines how strict different keywords should be matched (default match all keywords)', 'enum': ['any', 'all']}}}, 'uniqueItems': True}, 'timeFieldStrategy': {'type': 'list', 'default': 'lastUpdated', 'description': 'Defines which timestamps will be included in the search (default lastUpdated)', 'items': {'type': 'str', 'default': 'lastUpdated', 'description': 'Defines which timestamps will be included in the search (default lastUpdated)', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any)', 'enum': ['any', 'all']}, 'user': {'type': 'list', 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'items': {'type': 'str', 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively'}, 'uniqueItems': True}, 'userFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'Defines which fields will be searched by user (default all supported fields)', 'items': {'type': 'str', 'default': 'all', 'description': 'Defines which fields will be searched by user (default all supported fields)', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}, 'uniqueItems': True}, 'userMatchStrategy': {'type': 'str', 'default': 'all', 'description': 'Defines how strict different keywords should be matched (default match all keywords)', 'enum': ['any', 'all']}}}}}, 'required': True}, 'responses': {'default': {'description': 'Searches for analysis filters', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n', 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be used to generate a new event', 'properties': {'actionName': {'type': 'string', 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'boolean', 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'boolean', 'description': 'If true the filter will not submit generated events for central storage'}, 'storeRawEvents': {'type': 'boolean', 'description': 'If true, the filter will store the raw events'}, 'triggerCode': {'type': 'string', 'description': 'Groovy code used to generate the new event'}}}, 'authoredByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was changed'}, 'commitID': {'type': 'string', 'description': 'The commit ID of the Filter-as-Code change'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'preStatementCode1': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'string', 'description': 'Esper code to select which events the filter will be applied to'}}}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number for this filter instance'}, 'shortName': {'type': 'string', 'description': 'The short name of the filter (can be null)'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
search_analysis_filter_status = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Search for analysis filters instance statuses for filters that match the criteria (INTERNAL)', 'description': '', 'operationId': 'searchAnalysisFilterStatus', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'customer': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'filterID': {'type': 'list', 'items': {'type': 'int'}, 'uniqueItems': True}, 'filterStatus': {'type': 'list', 'items': {'type': 'str', 'enum': ['ok', 'error', 'disabled', 'disabledByCircuitBreaker', 'disabledByError']}, 'uniqueItems': True}, 'filterType': {'type': 'str', 'enum': ['analysis', 'annotation', 'match']}, 'limit': {'type': 'int'}, 'loggingStatus': {'type': 'list', 'items': {'type': 'str', 'enum': ['debug', 'info']}, 'uniqueItems': True}, 'offset': {'type': 'int'}}}}}, 'required': True}, 'responses': {'default': {'description': 'Search for analysis filters instance statuses for filters that match the criteria', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'An object describing the current status of an analysis filter instance on a host', 'properties': {'container': {'type': 'object', 'description': 'An object containing information about the container the filter instance is running on', 'properties': {'componentName': {'type': 'string', 'description': 'The name of the component the filter is running on'}, 'instanceID': {'type': 'integer', 'format': 'int32', 'description': 'The id of the container the filter is running on'}}}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'errorMessage': {'type': 'string', 'description': 'The message connected to the current error of the filter. null if no error is reported'}, 'filterStatus': {'type': 'string', 'description': 'The current filter status of the filter', 'enum': ['ok', 'error', 'disabled', 'disabledByCircuitBreaker', 'disabledByError']}, 'host': {'type': 'object', 'description': 'An object containing information about the host the filter is running on', 'properties': {'hostName': {'type': 'string', 'description': 'The name of the host the filter is running on'}, 'id': {'type': 'integer', 'format': 'int32', 'description': 'The ID of the host'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'loggingStatus': {'type': 'string', 'description': 'The current logging status of the filter', 'enum': ['debug', 'info']}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision of the filter that is running'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['searchAnalysisFilterStatus'], 'x-Argus-ApiStatus': 'INTERNAL'}
set_analysis_filter_log_level = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Sets the log level of a analysis filter (INTERNAL)', 'description': '', 'operationId': 'setAnalysisFilterLogLevel', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to set the log level of the instances of the analysis filter', 'properties': {'logLevel': {'type': 'str', 'description': 'The new log level of the filter', 'enum': ['debug', 'info']}}, 'required': ['logLevel']}}}, 'required': True}, 'responses': {'default': {'description': 'Sets the log level of a analysis filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The log level filter instances of this filter should be set to', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'logLevel': {'type': 'string', 'description': 'The new log level of the filter', 'enum': ['debug', 'info']}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
update_analysis_filter = {'tags': ['eventfilters/v2/analysis'], 'summary': 'Updates an analysis filter (INTERNAL)', 'description': '', 'operationId': 'updateAnalysisFilter', 'parameters': [{'name': 'idOrShortName', 'in': 'path', 'description': 'ID or short name of filter', 'required': True, 'schema': {'type': 'str', 'minLength': 1}, 'type': 'str', 'minLength': 1}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to update an analysis filter', 'properties': {'actions': {'type': 'dict', 'properties': {'actionName': {'type': 'str', 'description': 'The name of the signature which should be attached to the created event'}, 'defaultAggregate': {'type': 'bool', 'description': 'If true this filter will populate the created event with information from the selected event'}, 'disableCompileStaticValidation': {'type': 'bool', 'default': False, 'description': 'If true, we will skip static validation of the filter'}, 'skipNewEvent': {'type': 'bool', 'description': 'If true the filter will not submit triggered events for central storage'}, 'storeRawEvents': {'type': 'bool', 'description': 'If true the filter will store the raw events'}, 'triggerCode': {'type': 'str', 'description': 'Groovy code which is run on the selected events'}}}, 'addLabels': {'type': 'list', 'description': 'A set of labels to add to the filter.  Will be applied after removing labels. Will throw an exception if used in conjunction with setLabels ', 'items': {'type': 'str', 'description': 'A set of labels to add to the filter.  Will be applied after removing labels. Will throw an exception if used in conjunction with setLabels '}, 'uniqueItems': True}, 'authoredByUser': {'type': 'str', 'description': 'The user that submitted the Filter-as-Code change. Should be used with externallyManaged=true or existing filter should have that flag set.'}, 'comment': {'type': 'str', 'description': 'A comment describing why the filter was updated'}, 'commitID': {'type': 'str', 'description': 'The commit ID of the Filter-as-Code change. Should be used with externallyManaged=true or existing filter should have that flag set.'}, 'description': {'type': 'str', 'description': 'A description of the filter'}, 'externallyManaged': {'type': 'bool', 'description': 'Whether or not the filter code is externally managed'}, 'filters': {'type': 'dict', 'properties': {'preStatementCode1': {'type': 'str', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'str', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'str', 'description': 'Esper code to select which events the filter will be applied to'}}}, 'name': {'type': 'str', 'description': 'The name of the filter'}, 'removeLabels': {'type': 'list', 'description': 'A set of labels to remove from the filter.  Will be applied before adding labels and ignore filters that are not present. Will throw an exception if used in conjunction with setLabels ', 'items': {'type': 'str', 'description': 'A set of labels to remove from the filter.  Will be applied before adding labels and ignore filters that are not present. Will throw an exception if used in conjunction with setLabels '}, 'uniqueItems': True}, 'setLabels': {'type': 'list', 'description': 'Replace the current set of labels with these. Will throw an exception if used in conjunction with addLabels or removeLabels', 'items': {'type': 'str', 'description': 'Replace the current set of labels with these. Will throw an exception if used in conjunction with addLabels or removeLabels'}, 'uniqueItems': True}, 'shortName': {'type': 'str', 'description': 'Optional short name of the filter (no change if left blank)', 'pattern': '[a-zA-Z0-9_:\\-\\.]*'}}, 'required': ['comment']}}}, 'required': True}, 'responses': {'default': {'description': 'Updates an analysis filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Analysis filters use Esper to analyse an event stream.\nEsper is an advanced Event Processing Language(ELP) which supports high throughput and advanced logic for\nselecting interesting events. Events that match an EPL expression generates a new Argus event, which can then\nbe modified using a Groovy script before it is sent to be reported and analysed.\nAnalysis filters always have the following properties:\n  * statementCode -- An ELP expression to select events in an event stream\n  * triggerCode -- Groovy code to manipulate the generated event\n  * actionName -- A unique name for this event. In argus the event will be named "ARGUS-<name>"\n', 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be used to generate a new event', 'properties': {'actionName': {'type': 'string', 'description': 'A unique name for this event. In argus the event will be named "ARGUS-<name>"'}, 'defaultAggregate': {'type': 'boolean', 'description': 'If true this filter will do a default aggregation of events that trigger this filter'}, 'skipNewEvent': {'type': 'boolean', 'description': 'If true the filter will not submit generated events for central storage'}, 'storeRawEvents': {'type': 'boolean', 'description': 'If true, the filter will store the raw events'}, 'triggerCode': {'type': 'string', 'description': 'Groovy code used to generate the new event'}}}, 'authoredByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was changed'}, 'commitID': {'type': 'string', 'description': 'The commit ID of the Filter-as-Code change'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'preStatementCode1': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code.'}, 'preStatementCode2': {'type': 'string', 'description': 'The pre statement code can be used to create a new event stream. Not connected to trigger code. Can do a select on preStatementCode1 to create a combination filter'}, 'statementCode': {'type': 'string', 'description': 'Esper code to select which events the filter will be applied to'}}}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'hasPreStatementCode1', 'hasPreStatementCode2', 'hasStatementCode', 'hasTriggerCode', 'externallyManaged']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number for this filter instance'}, 'shortName': {'type': 'string', 'description': 'The short name of the filter (can be null)'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateAnalysisFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}