"""Autogenerated API schema"""
from argus_api import session


prepare_notification_transaction = {'tags': ['notifications/v2/transaction'], 'summary': 'Prepare a new notification transaction. This endpoint is NOT meant for users, only for applications on behalf of a user. (DEV)', 'description': '', 'operationId': 'prepareNotificationTransaction', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Interface to be used by other services to generate notifications..', 'properties': {'objectCustomer': {'type': 'str', 'description': 'Id or shortname for customer of the object this notification is related to.If notification is not customer relevant, this may not be set.'}, 'objectID': {'type': 'str', 'description': 'Which Argus object (case, document, sensor, asset, etc.) generated the notification. Is not required, as some operations will not have a corresponding Argus object.'}, 'operation': {'type': 'str', 'description': 'What operation generated the notification.', 'enum': ['authenticationEnrollmentActivated', 'authenticationApiKeyExpired', 'authenticationApiKeyExpiring', 'authenticationApiKeyIssued', 'authenticationApiKeyUnused', 'authenticationSendOpenIDProviderLink', 'authenticationSendOpenIDUnknownProviderWarning', 'caseUpdate', 'caseCreate', 'caseClosed', 'casePriorityChange', 'caseAddAttachment', 'caseAddComment', 'caseAccessGranted', 'documentAdded', 'documentUpdated']}, 'recipients': {'type': 'list', 'description': 'List of user and email recipients to notify.', 'items': {'type': 'dict', 'discriminator': {'propertyName': 'dataType'}, 'properties': {'dataType': {'type': 'string'}}, 'required': ['dataType']}, 'maxItems': 2147483647, 'minItems': 1, 'uniqueItems': True}, 'requestContext': {'description': 'Context interface which is extended for specific services.', 'oneOf': [{'allOf': [{'type': 'dict', 'discriminator': {'propertyName': 'dataType'}, 'properties': {'dataType': {'type': 'string'}}, 'required': ['dataType']}, {'type': 'dict', 'properties': {'providerEmail': {'type': 'dict', 'description': 'Connected OpenID provider email. '}, 'providerLink': {'type': 'dict', 'description': 'Link to the for the provider. Null/empty if the provider is unknown'}, 'dataType': {'type': 'str', 'enum': ['authenticationOpenIDNotificationContext']}}}], 'description': 'Request context for OpenID related notifications', 'required': ['dataType', 'providerEmail']}, {'allOf': [{'type': 'dict', 'discriminator': {'propertyName': 'dataType'}, 'properties': {'dataType': {'type': 'string'}}, 'required': ['dataType']}, {'type': 'dict', 'properties': {'createdByUserID': {'type': 'dict', 'description': 'Id of the user who created the key'}, 'createdTimestamp': {'type': 'dict', 'description': 'Timestamp for when the key was created'}, 'keyId': {'type': 'dict', 'description': 'Id of the personal API-key'}, 'lastUsedClientIp': {'type': 'dict', 'description': 'Last client IP which used the API-key'}, 'lastUsedTimestamp': {'type': 'dict', 'description': 'Timestamp of when the key was last used. 0 if the key has never been used'}, 'prefix': {'type': 'dict', 'description': 'Key prefix'}, 'userId': {'type': 'dict', 'description': 'Id of the user owning the key', 'minimum': 1}, 'validUntil': {'type': 'dict', 'description': 'Timestamp for when key expires/expired'}, 'dataType': {'type': 'str', 'enum': ['authenticationApiKeyNotificationContext']}}}], 'description': 'Request context for API-key related notifications', 'required': ['dataType', 'prefix']}, {'allOf': [{'type': 'dict', 'discriminator': {'propertyName': 'dataType'}, 'properties': {'dataType': {'type': 'string'}}, 'required': ['dataType']}, {'type': 'dict', 'properties': {'element': {'type': 'dict', 'description': 'Model to describe a document', 'properties': {'id': {'type': 'int', 'description': 'Id of document', 'minimum': 1}, 'name': {'type': 'str', 'description': 'Name of document'}, 'type': 'str', 'options': ['folder', 'document']}, 'required': ['name', 'type']}, 'folder': {'type': 'dict', 'description': 'Model to describe a document', 'properties': {'id': {'type': 'int', 'description': 'Id of document', 'minimum': 1}, 'name': {'type': 'str', 'description': 'Name of document'}, 'type': 'str', 'options': ['folder', 'document']}, 'required': ['name', 'type']}, 'dataType': {'type': 'str', 'enum': ['documentNotificationContext']}}}], 'description': 'Request context for document-service related notifications', 'required': ['dataType', 'element']}, {'allOf': [{'type': 'dict', 'discriminator': {'propertyName': 'dataType'}, 'properties': {'dataType': {'type': 'string'}}, 'required': ['dataType']}, {'type': 'dict', 'properties': {'enrollmentCode': {'type': 'dict', 'description': 'Enrollment code to be sent to the user'}, 'dataType': {'type': 'str', 'enum': ['authenticationEnrollmentNotificationContext']}}}], 'description': 'Request context for enrollment notifications', 'required': ['dataType', 'enrollmentCode']}, {'allOf': [{'type': 'dict', 'discriminator': {'propertyName': 'dataType'}, 'properties': {'dataType': {'type': 'string'}}, 'required': ['dataType']}, {'type': 'dict', 'properties': {'assignedTech': {'type': 'dict', 'description': 'Common model to describe a user', 'properties': {'id': {'type': 'int', 'description': 'The id of the user.'}, 'name': {'type': 'str', 'description': 'The users name.'}, 'shortName': {'type': 'str', 'description': 'The shortname of the user.'}}, 'required': ['name']}, 'assignedUser': {'type': 'dict', 'description': 'Common model to describe a user', 'properties': {'id': {'type': 'int', 'description': 'The id of the user.'}, 'name': {'type': 'str', 'description': 'The users name.'}, 'shortName': {'type': 'str', 'description': 'The shortname of the user.'}}, 'required': ['name']}, 'caseID': {'type': 'dict', 'description': 'Id of the case.', 'minimum': 1}, 'category': {'type': 'dict', 'description': 'Common model to describe a category', 'properties': {'id': {'type': 'int', 'description': 'The UUID of the category.'}, 'localizedNames': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Localized names for the category.'}, 'description': 'Localized names for the category.'}, 'shortName': {'type': 'str', 'description': 'The shortname of the category.'}}, 'required': ['id', 'localizedNames', 'shortName']}, 'changes': {'type': 'dict', 'description': 'List of changes to the case being notified. Only required on case update events.', 'items': {'type': 'dict', 'description': 'Allows us to specify which specific changes has happen to the case on an update notification.', 'properties': {'field': {'type': 'str', 'description': 'Which case filed is changed.', 'enum': ['attachment', 'category', 'comment', 'description', 'field', 'priority', 'service', 'status', 'subject', 'tag', 'type', 'watcher', 'assignedTech', 'assignedUser', 'access']}, 'newObject': {'type': 'dict', 'description': 'What is the new value. If the change is removal, this should be null.', 'discriminator': {'propertyName': 'dataType'}, 'properties': {'dataType': {'type': 'string'}}, 'required': ['dataType']}, 'previousObject': {'type': 'dict', 'description': 'What is the new value. If the change is removal, this should be null.', 'discriminator': {'propertyName': 'dataType'}, 'properties': {'dataType': {'type': 'string'}}, 'required': ['dataType']}}, 'required': ['field']}}, 'customerReference': {'type': 'dict', 'description': 'Customer reference for the case.'}, 'description': {'type': 'dict', 'description': 'Textual description of the case. Will be sanitized (HTML). Only expected on created case notifications.'}, 'priority': {'type': 'dict', 'description': 'Current priority of the case. Required to correctly label in the notification center.', 'enum': ['low', 'medium', 'high', 'critical']}, 'service': {'type': 'dict', 'description': 'Common model to describe a service', 'properties': {'id': {'type': 'int', 'description': 'The id of the service.'}, 'localizedNames': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Localized names for the service.'}, 'description': 'Localized names for the service.'}, 'shortName': {'type': 'str', 'description': 'The shortname of the service.'}}, 'required': ['id', 'localizedNames', 'shortName']}, 'status': {'type': 'dict', 'description': 'Current status of the case.', 'enum': ['pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingSoc', 'workingCustomer', 'pendingClose', 'closed']}, 'subject': {'type': 'dict', 'description': 'Subject of the case.'}, 'type': 'dict', 'dataType': {'type': 'str', 'enum': ['caseNotificationContext']}, 'options': ['securityIncident', 'operationalIncident', 'informational', 'change']}}], 'description': 'Notification request context for case notifications. This object will be used to generate messages, based on templates that expect certain fields to be present.', 'required': ['dataType', 'priority', 'service', 'status', 'subject', 'type']}]}, 'service': {'type': 'str', 'description': 'What service generated the notification.', 'enum': ['authenticationService', 'caseService', 'documentService']}, 'triggeringUser': {'type': 'int', 'description': 'Id of user who generated this notification is related to.If null, current user will be extracted from request context.'}}, 'required': ['operation', 'recipients', 'requestContext', 'service']}}}, 'required': True}, 'responses': {'default': {'description': 'Prepare a new notification transaction. This endpoint is NOT meant for users, only for applications on behalf of a user.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Describes the prepared notification transaction', 'properties': {'records': {'type': 'array', 'items': {'type': 'object', 'properties': {'channels': {'type': 'array', 'description': 'The channel description describing how this recipient was notified', 'items': {'type': 'object', 'description': 'Specifies the notification channel and whether it was a success.', 'properties': {'channel': {'type': 'string', 'description': 'Type of notification channel.', 'enum': ['sms', 'email', 'app', 'argus']}, 'state': {'type': 'string', 'description': 'State of the notification.', 'enum': ['failed', 'succeeded', 'unknown']}}}, 'uniqueItems': True}, 'notificationID': {'type': 'string', 'format': 'uuid', 'description': 'The ID of the notification entity stored for this notification. May be null (for non-user notifications)'}, 'recipient': {'type': 'object', 'description': 'Describes the recipient of this notification, either a user, or an email address', 'discriminator': {'propertyName': 'dataType'}, 'properties': {'dataType': {'type': 'string'}}, 'required': ['dataType']}}}, 'uniqueItems': True}, 'transactionID': {'type': 'string', 'format': 'uuid'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['prepareNotification'], 'x-Argus-ApiStatus': 'DEV'}
send_notification_transaction = {'tags': ['notifications/v2/transaction'], 'summary': 'Send a prepared notification transaction - generating notifications to be sent to users. This endpoint is NOT meant for users, only for applications on behalf of a user. (DEV)', 'description': '', 'operationId': 'sendNotificationTransaction', 'parameters': [{'name': 'transactionID', 'in': 'path', 'description': 'Transaction ID', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Send a prepared notification transaction - generating notifications to be sent to users. This endpoint is NOT meant for users, only for applications on behalf of a user.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Describes the sent notification transaction', 'properties': {'transactionID': {'type': 'string', 'format': 'uuid'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['prepareNotification'], 'x-Argus-ApiStatus': 'DEV'}