"""Autogenerated API schema"""
from argus_api import session


add_data_store_descriptor = {'tags': ['datastores/v1'], 'summary': 'Adds a new datastore descriptor. (PUBLIC)', 'description': '', 'operationId': 'addDataStoreDescriptor', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request to create a new datastore descriptor.', 'properties': {'behaviourType': {'type': 'str', 'default': 'CENTRAL', 'description': 'The behaviour of the datastore. CENTRAL datastores are only updated centrally, but may be used in distributed processing. LOCAL and DISTRIBUTED datastores are not stored centrally, but updated in the distributed system. DISTRIBUTED may be shared between processing nodes.', 'enum': ['LOCAL', 'DISTRIBUTED', 'CENTRAL']}, 'dataType': {'type': 'str', 'default': 'MAP', 'description': 'The type of data stored in the datastore (MAP or LIST). Maps have keys with values, lists only have keys.', 'enum': ['MAP', 'LIST']}, 'description': {'type': 'str', 'description': 'A textual description of the datastore.', 'maxLength': 2048, 'minLength': 0, 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'expireData': {'type': 'bool', 'description': 'If true, the datastore entries will expire after the configured time period since added/last updated.'}, 'globalData': {'type': 'bool', 'description': 'If true, the datastore only accepts global data (not customer bound).'}, 'lifeTime': {'type': 'int', 'description': 'The requested expiry time in milliseconds. Requires a positive value (if expireData is true).', 'minimum': 1}, 'name': {'type': 'str', 'description': 'Name for the new datastore, must be unique.', 'maxLength': 255, 'minLength': 0, 'pattern': '[a-zA-Z0-9_:\\-\\.]*'}, 'useLowerCaseKeys': {'type': 'bool', 'default': False, 'description': 'Boolean flag that determines whether to use lower case keys.'}}, 'required': ['behaviourType', 'dataType', 'description', 'name']}}}, 'required': True}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Adds a new datastore descriptor.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'A datastore descriptor contains the configuration of one datastore.', 'properties': {'behaviourType': {'type': 'string', 'description': 'The behaviour of the datastore. CENTRAL datastores define their data in the central Argus application. LOCAL and DISTRIBUTED datastores are used to control expiry and format for stores used in distributed processing.', 'enum': ['LOCAL', 'DISTRIBUTED', 'CENTRAL']}, 'dataType': {'type': 'string', 'description': 'The type of data stored in the datastore (MAP or LIST). Maps have keys with values, lists only have keys.', 'enum': ['MAP', 'LIST']}, 'deleted': {'type': 'boolean', 'description': 'Indicates if the datastore and all of its data has been removed.'}, 'description': {'type': 'string', 'description': 'A textual description of the datastore.'}, 'expireData': {'type': 'boolean', 'description': 'Datastores with expireData will automatically expire data which is older than lifeTime millis.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'globalData': {'type': 'boolean', 'description': 'Datastores with globalData do not accept data per customer, but only to a common global store.'}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this descriptor.'}, 'lifeTime': {'type': 'integer', 'format': 'int64', 'description': 'For datastores with expireData, the lifeTime defines the time period (in milliseconds) until an entry will be removed from the datastore after it has been written (added or updated).'}, 'name': {'type': 'string', 'description': "The datastore's unique identifier."}, 'useLowerCaseKeys': {'type': 'boolean', 'description': 'Datastores that only have lower case keys.'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateDataStoreDescriptor'], 'x-Argus-ApiStatus': 'PUBLIC'}
delete_data_store_descriptor = {'tags': ['datastores/v1'], 'summary': 'Deletes an existing datastore descriptor. (PUBLIC)', 'description': 'This operation will permanently remove all entries stored inside the datastore. It is not possible to undo this operation.', 'operationId': 'deleteDataStoreDescriptor', 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Deletes an existing datastore descriptor.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'A datastore descriptor contains the configuration of one datastore.', 'properties': {'behaviourType': {'type': 'string', 'description': 'The behaviour of the datastore. CENTRAL datastores define their data in the central Argus application. LOCAL and DISTRIBUTED datastores are used to control expiry and format for stores used in distributed processing.', 'enum': ['LOCAL', 'DISTRIBUTED', 'CENTRAL']}, 'dataType': {'type': 'string', 'description': 'The type of data stored in the datastore (MAP or LIST). Maps have keys with values, lists only have keys.', 'enum': ['MAP', 'LIST']}, 'deleted': {'type': 'boolean', 'description': 'Indicates if the datastore and all of its data has been removed.'}, 'description': {'type': 'string', 'description': 'A textual description of the datastore.'}, 'expireData': {'type': 'boolean', 'description': 'Datastores with expireData will automatically expire data which is older than lifeTime millis.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'globalData': {'type': 'boolean', 'description': 'Datastores with globalData do not accept data per customer, but only to a common global store.'}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this descriptor.'}, 'lifeTime': {'type': 'integer', 'format': 'int64', 'description': 'For datastores with expireData, the lifeTime defines the time period (in milliseconds) until an entry will be removed from the datastore after it has been written (added or updated).'}, 'name': {'type': 'string', 'description': "The datastore's unique identifier."}, 'useLowerCaseKeys': {'type': 'boolean', 'description': 'Datastores that only have lower case keys.'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Datastore not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateDataStoreDescriptor'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_descriptor = {'tags': ['datastores/v1'], 'summary': 'Returns a datastore descriptor identified by its name. (PUBLIC)', 'description': '', 'operationId': 'getDescriptor', 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Returns a datastore descriptor identified by its name.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'A datastore descriptor contains the configuration of one datastore.', 'properties': {'behaviourType': {'type': 'string', 'description': 'The behaviour of the datastore. CENTRAL datastores define their data in the central Argus application. LOCAL and DISTRIBUTED datastores are used to control expiry and format for stores used in distributed processing.', 'enum': ['LOCAL', 'DISTRIBUTED', 'CENTRAL']}, 'dataType': {'type': 'string', 'description': 'The type of data stored in the datastore (MAP or LIST). Maps have keys with values, lists only have keys.', 'enum': ['MAP', 'LIST']}, 'deleted': {'type': 'boolean', 'description': 'Indicates if the datastore and all of its data has been removed.'}, 'description': {'type': 'string', 'description': 'A textual description of the datastore.'}, 'expireData': {'type': 'boolean', 'description': 'Datastores with expireData will automatically expire data which is older than lifeTime millis.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'globalData': {'type': 'boolean', 'description': 'Datastores with globalData do not accept data per customer, but only to a common global store.'}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this descriptor.'}, 'lifeTime': {'type': 'integer', 'format': 'int64', 'description': 'For datastores with expireData, the lifeTime defines the time period (in milliseconds) until an entry will be removed from the datastore after it has been written (added or updated).'}, 'name': {'type': 'string', 'description': "The datastore's unique identifier."}, 'useLowerCaseKeys': {'type': 'boolean', 'description': 'Datastores that only have lower case keys.'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Datastore not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewDataStoreDescriptors'], 'x-Argus-ApiStatus': 'PUBLIC'}
search_descriptors = {'tags': ['datastores/v1'], 'summary': 'Returns an array of datastore descriptors matching search criteria. (PUBLIC)', 'description': '', 'operationId': 'searchDescriptors', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Criteria to search for datastore descriptors.', 'properties': {'limit': {'type': 'int', 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'includeFlags': {'type': 'int', 'description': 'Only include objects which have includeFlags set.'}, 'excludeFlags': {'type': 'int', 'description': 'Exclude objects which have excludeFlags set.'}, 'subCriteria': {'type': 'list', 'description': 'Set additional criterias which are applied using a logical OR.', 'items': {'type': 'dict', 'description': 'Criteria to search for datastore descriptors.', 'properties': {'limit': {'type': 'int', 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'includeFlags': {'type': 'int', 'description': 'Only include objects which have includeFlags set.'}, 'excludeFlags': {'type': 'int', 'description': 'Exclude objects which have excludeFlags set.'}, 'subCriteria': {'type': 'list', 'description': 'Set additional criterias which are applied using a logical OR.', 'items': [], 'uniqueItems': True}, 'exclude': {'type': 'bool', 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'keywords': {'type': 'list', 'description': 'Search for datastores matching keywords.', 'items': {'type': 'str', 'description': 'Search for datastores matching keywords.'}, 'uniqueItems': True}, 'keywordFieldStrategy': {'type': 'list', 'description': 'Defines which fields will be searched by keywords (default all supported fields).', 'items': {'type': 'str', 'description': 'Defines which fields will be searched by keywords (default all supported fields).', 'enum': ['name', 'description', 'all']}, 'uniqueItems': True}, 'keywordMatchStrategy': {'type': 'str', 'description': 'Defines the MatchStrategy for keywords (default match all keywords).', 'enum': ['all', 'any']}, 'sortBy': {'type': 'list', 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'enum': ['name', 'lastUpdatedTimestamp', '-name', '-lastUpdatedTimestamp']}}}}, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'keywords': {'type': 'list', 'description': 'Search for datastores matching keywords.', 'items': {'type': 'str', 'description': 'Search for datastores matching keywords.'}, 'uniqueItems': True}, 'keywordFieldStrategy': {'type': 'list', 'description': 'Defines which fields will be searched by keywords (default all supported fields).', 'items': {'type': 'str', 'description': 'Defines which fields will be searched by keywords (default all supported fields).', 'enum': ['name', 'description', 'all']}, 'uniqueItems': True}, 'keywordMatchStrategy': {'type': 'str', 'description': 'Defines the MatchStrategy for keywords (default match all keywords).', 'enum': ['all', 'any']}, 'sortBy': {'type': 'list', 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'enum': ['name', 'lastUpdatedTimestamp', '-name', '-lastUpdatedTimestamp']}}}}}}, 'required': True}, 'responses': {'default': {'description': 'Returns an array of datastore descriptors matching search criteria.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'A datastore descriptor contains the configuration of one datastore.', 'properties': {'behaviourType': {'type': 'string', 'description': 'The behaviour of the datastore. CENTRAL datastores define their data in the central Argus application. LOCAL and DISTRIBUTED datastores are used to control expiry and format for stores used in distributed processing.', 'enum': ['LOCAL', 'DISTRIBUTED', 'CENTRAL']}, 'dataType': {'type': 'string', 'description': 'The type of data stored in the datastore (MAP or LIST). Maps have keys with values, lists only have keys.', 'enum': ['MAP', 'LIST']}, 'deleted': {'type': 'boolean', 'description': 'Indicates if the datastore and all of its data has been removed.'}, 'description': {'type': 'string', 'description': 'A textual description of the datastore.'}, 'expireData': {'type': 'boolean', 'description': 'Datastores with expireData will automatically expire data which is older than lifeTime millis.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'globalData': {'type': 'boolean', 'description': 'Datastores with globalData do not accept data per customer, but only to a common global store.'}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this descriptor.'}, 'lifeTime': {'type': 'integer', 'format': 'int64', 'description': 'For datastores with expireData, the lifeTime defines the time period (in milliseconds) until an entry will be removed from the datastore after it has been written (added or updated).'}, 'name': {'type': 'string', 'description': "The datastore's unique identifier."}, 'useLowerCaseKeys': {'type': 'boolean', 'description': 'Datastores that only have lower case keys.'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewDataStoreDescriptors'], 'x-Argus-ApiStatus': 'PUBLIC'}
search_descriptors_simple = {'tags': ['datastores/v1'], 'summary': 'Returns an array of datastore descriptors matching search parameters. (PUBLIC)', 'description': '', 'operationId': 'searchDescriptorsSimple', 'parameters': [{'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'q', 'in': 'query', 'description': '', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'keywords', 'in': 'query', 'description': 'Search by keywords', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'keywordMatch', 'in': 'query', 'description': 'Set match strategy for keyword search', 'schema': {'type': 'str', 'default': 'all', 'enum': ['all', 'any']}, 'type': 'str', 'default': 'all', 'enum': ['all', 'any']}, {'name': 'keywordField', 'in': 'query', 'description': 'Set field strategy for keyword search', 'schema': {'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['name', 'description', 'all']}, 'uniqueItems': True}, 'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['name', 'description', 'all']}, 'uniqueItems': True}, {'name': 'sortBy', 'in': 'query', 'description': 'Sort search result', 'schema': {'type': 'list', 'enum': ['name', 'lastUpdatedTimestamp', '-name', '-lastUpdatedTimestamp'], 'items': {'type': 'string'}}, 'type': 'list', 'enum': ['name', 'lastUpdatedTimestamp', '-name', '-lastUpdatedTimestamp'], 'items': {'type': 'string'}}], 'responses': {'default': {'description': 'Returns an array of datastore descriptors matching search parameters.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'A datastore descriptor contains the configuration of one datastore.', 'properties': {'behaviourType': {'type': 'string', 'description': 'The behaviour of the datastore. CENTRAL datastores define their data in the central Argus application. LOCAL and DISTRIBUTED datastores are used to control expiry and format for stores used in distributed processing.', 'enum': ['LOCAL', 'DISTRIBUTED', 'CENTRAL']}, 'dataType': {'type': 'string', 'description': 'The type of data stored in the datastore (MAP or LIST). Maps have keys with values, lists only have keys.', 'enum': ['MAP', 'LIST']}, 'deleted': {'type': 'boolean', 'description': 'Indicates if the datastore and all of its data has been removed.'}, 'description': {'type': 'string', 'description': 'A textual description of the datastore.'}, 'expireData': {'type': 'boolean', 'description': 'Datastores with expireData will automatically expire data which is older than lifeTime millis.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'globalData': {'type': 'boolean', 'description': 'Datastores with globalData do not accept data per customer, but only to a common global store.'}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this descriptor.'}, 'lifeTime': {'type': 'integer', 'format': 'int64', 'description': 'For datastores with expireData, the lifeTime defines the time period (in milliseconds) until an entry will be removed from the datastore after it has been written (added or updated).'}, 'name': {'type': 'string', 'description': "The datastore's unique identifier."}, 'useLowerCaseKeys': {'type': 'boolean', 'description': 'Datastores that only have lower case keys.'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewDataStoreDescriptors'], 'x-Argus-ApiStatus': 'PUBLIC'}
update_data_store_descriptor = {'tags': ['datastores/v1'], 'summary': 'Updates an existing datastore descriptor. (PUBLIC)', 'description': '', 'operationId': 'updateDataStoreDescriptor', 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request to update an existing datastore descriptor.', 'properties': {'description': {'type': 'str', 'description': 'If set, change the textual description of this datastore.', 'maxLength': 2048, 'minLength': 0, 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'expireData': {'type': 'bool', 'description': 'If set, change the expire data flag on this datastore. Default is no change.'}, 'globalData': {'type': 'bool', 'description': 'If set, change the global data flag on this datastore. Default is no change.'}, 'lifeTime': {'type': 'int', 'description': 'If set (to a positive value), change the expiry time of this datastore. Requires that the store has enabled expireData. Default is no change.', 'minimum': 1}, 'name': {'type': 'str', 'description': 'If set, change the name of this datastore. All entries will be updated (may take long time for large stores).', 'maxLength': 255, 'minLength': 0, 'pattern': '[a-zA-Z0-9_:\\-\\.]*'}}}}}, 'required': True}, 'responses': {'default': {'description': 'Updates an existing datastore descriptor.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'A datastore descriptor contains the configuration of one datastore.', 'properties': {'behaviourType': {'type': 'string', 'description': 'The behaviour of the datastore. CENTRAL datastores define their data in the central Argus application. LOCAL and DISTRIBUTED datastores are used to control expiry and format for stores used in distributed processing.', 'enum': ['LOCAL', 'DISTRIBUTED', 'CENTRAL']}, 'dataType': {'type': 'string', 'description': 'The type of data stored in the datastore (MAP or LIST). Maps have keys with values, lists only have keys.', 'enum': ['MAP', 'LIST']}, 'deleted': {'type': 'boolean', 'description': 'Indicates if the datastore and all of its data has been removed.'}, 'description': {'type': 'string', 'description': 'A textual description of the datastore.'}, 'expireData': {'type': 'boolean', 'description': 'Datastores with expireData will automatically expire data which is older than lifeTime millis.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'globalData': {'type': 'boolean', 'description': 'Datastores with globalData do not accept data per customer, but only to a common global store.'}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this descriptor.'}, 'lifeTime': {'type': 'integer', 'format': 'int64', 'description': 'For datastores with expireData, the lifeTime defines the time period (in milliseconds) until an entry will be removed from the datastore after it has been written (added or updated).'}, 'name': {'type': 'string', 'description': "The datastore's unique identifier."}, 'useLowerCaseKeys': {'type': 'boolean', 'description': 'Datastores that only have lower case keys.'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Datastore not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateDataStoreDescriptor'], 'x-Argus-ApiStatus': 'PUBLIC'}