"""Autogenerated API schema"""
from argus_api import session


validate_user_authorization = {'tags': ['authentication/v1'], 'summary': 'Validate authorization token (PUBLIC)', 'description': 'This endpoint will receive an authorization token to verify its validity.', 'operationId': 'validateUserAuthorization', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'allowExpired': {'type': 'bool', 'description': 'If true, an expired authorization is ignored. Defaults to false (will fail if token is expired)'}, 'allowReplay': {'type': 'bool', 'description': 'If true, previous validations of the same authorization is ignored. Defaults to false (will fail if token was previously validated)'}, 'authorization': {'type': 'str', 'description': 'The authorization JWT token'}, 'context': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Context variables to scope this authorization. All context variables must be present in the authorization token and their value must be equal to those provided here.'}, 'description': 'Context variables to scope this authorization. All context variables must be present in the authorization token and their value must be equal to those provided here.'}, 'operation': {'type': 'str', 'description': 'The name of the operation'}}, 'required': ['authorization', 'operation']}}}, 'required': True}, 'responses': {'default': {'description': 'Validate authorization token', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'context': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Context variables found in this authorization'}, 'description': 'Context variables found in this authorization'}, 'expires': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this authorization expires.'}, 'operation': {'type': 'string', 'description': 'The operation this authorization is valid for'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this authorization was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}