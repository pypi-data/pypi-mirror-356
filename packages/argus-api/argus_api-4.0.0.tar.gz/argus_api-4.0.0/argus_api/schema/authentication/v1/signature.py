"""Autogenerated API schema"""
from argus_api import session


enroll_public_key = {'tags': ['authentication/v1/signature'], 'summary': 'Enroll new public key (PUBLIC)', 'description': '', 'operationId': 'enrollPublicKey', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'algorithm': {'type': 'str', 'description': 'The key algorithm', 'enum': ['EC256']}, 'attestationObject': {'type': 'string'}, 'authorization': {'type': 'str', 'description': "The authorization token to permit enrolling this key. Token must be valid for operation 'publickey.enroll'"}, 'challengeID': {'type': 'str', 'description': 'ID of the challenge this request is bound to'}, 'clientData': {'type': 'string'}, 'name': {'type': 'str', 'description': 'A name to associate with the key'}, 'protection': {'type': 'str', 'description': 'The protection level selected by client', 'enum': ['biometric', 'software']}, 'publicKey': {'type': 'str', 'maxLength': 2147483647, 'minLength': 1}, 'type': {'type': 'str', 'description': 'The type of the key', 'enum': ['iphone', 'android']}, 'validDays': {'type': 'int', 'description': 'Number of days this key is valid, default is 1 year (which is also the default maximum).', 'maximum': 365, 'minimum': 1}, 'validSources': {'type': 'list', 'description': 'Valid source IPs/networks. Default is valid from all IPs.', 'items': {'type': 'str', 'description': 'Valid source IPs/networks. Default is valid from all IPs.'}, 'uniqueItems': True}}, 'required': ['algorithm', 'authorization', 'challengeID', 'name', 'publicKey', 'type']}}}, 'required': True}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Enroll new public key', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'keyID': {'type': 'integer', 'format': 'int32', 'description': 'ID of the stored key'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
enroll_webauthn_key = {'tags': ['authentication/v1/signature'], 'summary': 'Enroll new webauthn key (PUBLIC)', 'description': '', 'operationId': 'enrollWebauthnKey', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'attestationObject': {'type': 'str', 'maxLength': 2147483647, 'minLength': 1}, 'authorization': {'type': 'str', 'description': "The authorization token to permit enrolling this key. Token must be valid for operation 'publickey.enroll'"}, 'challengeID': {'type': 'str', 'description': 'ID of the challenge this request is bound to'}, 'clientData': {'type': 'str', 'maxLength': 2147483647, 'minLength': 1}, 'validDays': {'type': 'int', 'description': 'Number of days this key is valid, default is 1 year (which is also the default maximum).', 'maximum': 365, 'minimum': 1}, 'validSources': {'type': 'list', 'description': 'Valid source IPs/networks. Default is valid from all IPs.', 'items': {'type': 'str', 'description': 'Valid source IPs/networks. Default is valid from all IPs.'}, 'uniqueItems': True}, 'webAuthnKeyID': {'type': 'str', 'maxLength': 2147483647, 'minLength': 1}}, 'required': ['attestationObject', 'authorization', 'challengeID', 'clientData', 'webAuthnKeyID']}}}, 'required': True}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Enroll new webauthn key', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'keyID': {'type': 'integer', 'format': 'int32', 'description': 'ID of the stored key'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
get_public_key_enrollment_options = {'tags': ['authentication/v1/signature'], 'summary': 'Get enrollment options before enrolling new public key (PUBLIC)', 'description': '', 'operationId': 'getPublicKeyEnrollmentOptions', 'responses': {'default': {'description': 'Get enrollment options before enrolling new public key', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'challenge': {'type': 'string'}, 'challengeID': {'type': 'string', 'format': 'uuid', 'description': 'ID of the challenge returned in this response. This challengeID must be used in the enrollment request to identify the correct challenge to compare.'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
get_webauthn_authentication_options = {'tags': ['authentication/v1/signature'], 'summary': 'Request parameters for authenticating using webauthn (DEPRECATED, use POST /signature/webauthn/authentication/challenge) (PUBLIC)', 'description': '', 'operationId': 'getWebauthnAuthenticationOptions', 'parameters': [{'name': 'Origin', 'in': 'header', 'schema': {'type': 'string'}}, {'name': 'userName', 'in': 'query', 'description': 'Username of the user preparing to authenticate', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'User domain', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Request parameters for authenticating using webauthn (DEPRECATED, use POST /signature/webauthn/authentication/challenge)', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'challenge': {'type': 'string'}, 'challengeID': {'type': 'string', 'format': 'uuid', 'description': 'ID of the challenge returned in this response. This challengeID must be used in the authentication request to identify the correct challenge to compare.'}, 'permittedWebAuthnKeyIDs': {'type': 'array', 'description': 'A list of WebAuthn key IDs which are permitted to use', 'items': {'type': 'string'}, 'uniqueItems': True}, 'timeout': {'type': 'integer', 'format': 'int64', 'description': 'The timeout to use when waiting for the user.'}}}}}}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}, '429': {'description': 'If the current IP has submitted too many challenges within a short time frame. The client should slow down.', 'content': {'application/json': {}}}}, 'deprecated': True, 'x-Argus-ApiStatus': 'PUBLIC'}
get_webauthn_create_options = {'tags': ['authentication/v1/signature'], 'summary': 'Request parameters for enrolling new webauthn key (Deprecated, use POST /signature/webauthn/enroll/challenge instead) (PUBLIC)', 'description': '', 'operationId': 'getWebauthnCreateOptions', 'parameters': [{'name': 'Origin', 'in': 'header', 'schema': {'type': 'string'}}], 'responses': {'default': {'description': 'Request parameters for enrolling new webauthn key (Deprecated, use POST /signature/webauthn/enroll/challenge instead)', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'attestation': {'type': 'string', 'description': 'Parameters defining required attestation for the generated key.', 'enum': ['direct', 'indirect']}, 'authenticatorSelection': {'type': 'object', 'description': 'Parameters defining which types of authenticators are accepted.', 'properties': {'authenticatorAttachment': {'type': 'string', 'description': 'The authenticator attachment requirements', 'enum': ['platform', 'cross-platform']}, 'userVerification': {'type': 'string', 'description': 'The user verification requirements', 'enum': ['required', 'preferred', 'discouraged']}}}, 'challenge': {'type': 'string'}, 'challengeID': {'type': 'string', 'format': 'uuid', 'description': 'ID of the challenge returned in this response. This challengeID must be used in the enrollment request to identify the correct challenge to compare.'}, 'pubKeyCredParams': {'type': 'array', 'description': 'A set of parameters defining which type of public keys are accepted.', 'items': {'type': 'object', 'description': 'A set of parameters defining which type of public keys are accepted.', 'properties': {'alg': {'type': 'string', 'description': 'The ID of the algorithm to use', 'enum': ['-7', '-35', '-36', '-257', '-258', '-259', '-37', '-38', '-39', '0']}, 'type': {'type': 'string', 'description': 'The type of the key to use', 'enum': ['public-key']}}}, 'uniqueItems': True}, 'rp': {'type': 'object', 'description': 'The relying party to create a key for.', 'properties': {'id': {'type': 'string', 'description': 'ID (domainname) of the relying party to bind this key to'}, 'name': {'type': 'string', 'description': 'Name of the relying party to bind this key to'}}}, 'timeout': {'type': 'integer', 'format': 'int64', 'description': 'The timeout to use when waiting for the user.'}, 'user': {'type': 'object', 'description': 'The user to create a key for.', 'properties': {'displayName': {'type': 'string', 'description': 'Display name (full name) of the user to create a key for'}, 'id': {'type': 'string', 'description': 'User ID of the user to create a key for'}, 'name': {'type': 'string', 'description': 'Username of the user to create a key for'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'deprecated': True, 'x-Argus-ApiStatus': 'PUBLIC'}
get_webauthn_user_authorization_options = {'tags': ['authentication/v1/signature'], 'summary': 'Request an webauthn validation token to validate user presence. The returned token must be used when requesting authorization token. (INTERNAL)', 'description': 'This endpoint requires that the current user is logged in using SIGNATURE authentication. Even if the user has SIGNATURE authentication enabled, it will not work if the current session was creating using a different authentication method.', 'operationId': 'getWebauthnUserAuthorizationOptions', 'parameters': [{'name': 'Origin', 'in': 'header', 'schema': {'type': 'string'}}], 'responses': {'default': {'description': 'Request an webauthn validation token to validate user presence. The returned token must be used when requesting authorization token.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'challenge': {'type': 'string'}, 'challengeID': {'type': 'string', 'format': 'uuid', 'description': 'ID of the challenge returned in this response. This challengeID must be used in the authorization request to identify the correct challenge to compare.'}, 'permittedWebAuthnKeyIDs': {'type': 'array', 'description': 'A list of WebAuthn key IDs which are permitted to use', 'items': {'type': 'string'}, 'uniqueItems': True}, 'timeout': {'type': 'integer', 'format': 'int64', 'description': 'The timeout to use when waiting for the user.'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'INTERNAL'}
list_public_keys = {'tags': ['authentication/v1/signature'], 'summary': 'List current user enrolled public keys (PUBLIC)', 'description': '', 'operationId': 'listPublicKeys', 'parameters': [{'name': 'limit', 'in': 'query', 'description': 'Maximum number of values to return', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip this number of records', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}], 'responses': {'default': {'description': 'List current user enrolled public keys', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'keys': {'type': 'array', 'description': 'List of enrolled keys', 'items': {'type': 'object', 'description': 'List of enrolled keys', 'properties': {'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this key was created'}, 'description': {'type': 'string', 'description': 'A description or name for this key'}, 'keyID': {'type': 'integer', 'format': 'int32', 'description': 'The key ID (to use in signature headers)'}, 'lastUsedSourceIP': {'type': 'string', 'description': 'The source IP this key was last used from'}, 'lastUsedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this key was last used'}, 'type': {'type': 'string', 'description': 'The type of this key', 'enum': ['argus', 'webauthn', 'android', 'iphone']}}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
request_webauthn_authentication_challenge = {'tags': ['authentication/v1/signature'], 'summary': 'Request parameters for authenticating using webauthn (PUBLIC)', 'description': '', 'operationId': 'requestWebauthnAuthenticationChallenge', 'parameters': [{'name': 'Origin', 'in': 'header', 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'domain': {'type': 'str', 'description': 'User domain'}, 'password': {'type': 'str', 'description': 'Static Argus-password for user'}, 'userName': {'type': 'str', 'description': 'Username to authenticate'}}, 'required': ['domain', 'password', 'userName']}}}, 'required': True}, 'responses': {'default': {'description': 'Request parameters for authenticating using webauthn', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'challenge': {'type': 'string'}, 'challengeID': {'type': 'string', 'format': 'uuid', 'description': 'ID of the challenge returned in this response. This challengeID must be used in the authentication request to identify the correct challenge to compare.'}, 'permittedWebAuthnKeyIDs': {'type': 'array', 'description': 'A list of WebAuthn key IDs which are permitted to use', 'items': {'type': 'string'}, 'uniqueItems': True}, 'timeout': {'type': 'integer', 'format': 'int64', 'description': 'The timeout to use when waiting for the user.'}}}}}}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}, '429': {'description': 'If the current IP has submitted too many challenges within a short time frame. The client should slow down.', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
request_webauthn_enrollment_challenge = {'tags': ['authentication/v1/signature'], 'summary': 'Request parameters for enrolling new webauthn key (PUBLIC)', 'description': '', 'operationId': 'getWebauthnCreateChallenge', 'parameters': [{'name': 'Origin', 'in': 'header', 'schema': {'type': 'string'}}], 'responses': {'default': {'description': 'Request parameters for enrolling new webauthn key', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'attestation': {'type': 'string', 'description': 'Parameters defining required attestation for the generated key.', 'enum': ['direct', 'indirect']}, 'authenticatorSelection': {'type': 'object', 'description': 'Parameters defining which types of authenticators are accepted.', 'properties': {'authenticatorAttachment': {'type': 'string', 'description': 'The authenticator attachment requirements', 'enum': ['platform', 'cross-platform']}, 'userVerification': {'type': 'string', 'description': 'The user verification requirements', 'enum': ['required', 'preferred', 'discouraged']}}}, 'challenge': {'type': 'string'}, 'challengeID': {'type': 'string', 'format': 'uuid', 'description': 'ID of the challenge returned in this response. This challengeID must be used in the enrollment request to identify the correct challenge to compare.'}, 'pubKeyCredParams': {'type': 'array', 'description': 'A set of parameters defining which type of public keys are accepted.', 'items': {'type': 'object', 'description': 'A set of parameters defining which type of public keys are accepted.', 'properties': {'alg': {'type': 'string', 'description': 'The ID of the algorithm to use', 'enum': ['-7', '-35', '-36', '-257', '-258', '-259', '-37', '-38', '-39', '0']}, 'type': {'type': 'string', 'description': 'The type of the key to use', 'enum': ['public-key']}}}, 'uniqueItems': True}, 'rp': {'type': 'object', 'description': 'The relying party to create a key for.', 'properties': {'id': {'type': 'string', 'description': 'ID (domainname) of the relying party to bind this key to'}, 'name': {'type': 'string', 'description': 'Name of the relying party to bind this key to'}}}, 'timeout': {'type': 'integer', 'format': 'int64', 'description': 'The timeout to use when waiting for the user.'}, 'user': {'type': 'object', 'description': 'The user to create a key for.', 'properties': {'displayName': {'type': 'string', 'description': 'Display name (full name) of the user to create a key for'}, 'id': {'type': 'string', 'description': 'User ID of the user to create a key for'}, 'name': {'type': 'string', 'description': 'Username of the user to create a key for'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
revoke_key = {'tags': ['authentication/v1/signature'], 'summary': 'Revoke public key (PUBLIC)', 'description': '', 'operationId': 'revokeKey', 'parameters': [{'name': 'keyID', 'in': 'path', 'description': 'ID of key to revoke', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}], 'responses': {'default': {'description': 'Revoke public key', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'description': {'type': 'string', 'description': 'The description for the revoked key'}, 'keyID': {'type': 'integer', 'format': 'int32', 'description': 'The ID of the revoked key'}, 'type': {'type': 'string', 'description': 'The type of the revoked key', 'enum': ['argus', 'webauthn', 'android', 'iphone']}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
webauthn_authentication = {'tags': ['authentication/v1/signature'], 'summary': 'Initiate a new user session using WebAuthn authentication (PUBLIC)', 'description': 'Requires signature authentication to be enabled on the server, and for the user. Use /methods to check which authentication methods are available on the server.', 'operationId': 'webauthnAuthentication', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'authenticatorData': {'type': 'string'}, 'challengeID': {'type': 'str', 'description': 'The challenge ID returned from the GET /webauthn/authenticate'}, 'clientData': {'type': 'string'}, 'domain': {'type': 'str', 'description': 'User domain'}, 'requestedAuthorizations': {'type': 'list', 'description': 'Allow client to request authorizations as part of the authentication transaction. The client is not guaranteed to get the requested authorizations. The setPassword authorization is only returned if the current user has the FORCE_PW_CHANGE flag set.', 'items': {'type': 'str', 'description': 'Allow client to request authorizations as part of the authentication transaction. The client is not guaranteed to get the requested authorizations. The setPassword authorization is only returned if the current user has the FORCE_PW_CHANGE flag set.', 'enum': ['enrollPublicKey', 'setPassword']}, 'uniqueItems': True}, 'signature': {'type': 'string'}, 'userName': {'type': 'str', 'description': 'Username to authenticate'}, 'webauthnKeyID': {'type': 'string'}}, 'required': ['authenticatorData', 'challengeID', 'clientData', 'signature', 'userName', 'webauthnKeyID']}}}, 'required': True}, 'responses': {'default': {'description': 'Initiate a new user session using WebAuthn authentication', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authorizations': {'type': 'array', 'description': 'Any gratuitous authorization tokens generated during authentication, if requested by the client', 'items': {'type': 'object', 'properties': {'authorization': {'type': 'string', 'description': 'Authorization JWS string'}, 'expires': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this authorization expires'}, 'nextURI': {'type': 'string', 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'operation': {'type': 'string', 'description': 'Operation which is authorized by this token'}}}, 'uniqueItems': True}, 'credentials': {'type': 'object', 'description': 'The request credentials to use for this session', 'properties': {'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'requestCredentialsData': {'type': 'string'}, 'requestCredentialsType': {'type': 'string', 'enum': ['sessionToken', 'signature', 'apikey']}, 'uri': {'type': 'string'}}}, 'sessionKey': {'type': 'string'}}}}}}}}, '221': {'description': 'Session created, password change required', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authenticationMethod': {'type': 'string', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'clientIP': {'type': 'string'}, 'constrained': {'type': 'boolean'}, 'cookie': {'type': 'string'}, 'created': {'type': 'integer', 'format': 'int64'}, 'createdTimestamp': {'type': 'integer', 'format': 'int64'}, 'customerConstraints': {'type': 'array', 'items': {'type': 'integer', 'format': 'int64'}, 'uniqueItems': True}, 'domainID': {'type': 'integer', 'format': 'int32'}, 'forwardedIP': {'type': 'string'}, 'functionConstraints': {'type': 'array', 'items': {'type': 'integer', 'format': 'int64'}, 'uniqueItems': True}, 'impersonatingUserID': {'type': 'integer', 'format': 'int64'}, 'iplockMask': {'type': 'integer', 'format': 'int32'}, 'lastRefreshTimestamp': {'type': 'integer', 'format': 'int64'}, 'readOnly': {'type': 'boolean'}, 'requestCredentialsData': {'type': 'string'}, 'requestCredentialsType': {'type': 'string', 'enum': ['sessionToken', 'signature', 'apikey']}, 'scope': {'type': 'string', 'enum': ['SESSION', 'REQUEST']}, 'securityLevel': {'type': 'string', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'sessionKey': {'type': 'string'}, 'timestamp': {'type': 'integer', 'format': 'int64'}, 'uri': {'type': 'string'}, 'userID': {'type': 'integer', 'format': 'int64'}, 'username': {'type': 'string'}, 'validUntilTimestamp': {'type': 'integer', 'format': 'int64'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
webauthn_user_authorization = {'tags': ['authentication/v1/signature'], 'summary': 'Request an authorization token using a WebAuthn signature (INTERNAL)', 'description': 'This endpoint requires that the current user is logged in using SIGNATURE authentication. Even if the user has SIGNATURE authentication enabled, it will not work if the current session was creating using a different authentication method.', 'operationId': 'webauthnUserAuthorization', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'authenticatorData': {'type': 'string'}, 'challengeID': {'type': 'str', 'description': 'The challenge ID returned from the GET /webauthn/authenticate'}, 'clientData': {'type': 'string'}, 'context': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Context variables to scope this authorization. All context variables required by the executing service must be present and equal to those provided here.'}, 'description': 'Context variables to scope this authorization. All context variables required by the executing service must be present and equal to those provided here.'}, 'nextURI': {'type': 'str', 'description': 'The URI to redirect/route to after successful authorization. The URI will be validated according to policy. The authorization token returned from successful authorization should be appended as a query parameter to this URI.'}, 'operation': {'type': 'str', 'description': 'The name of the operation to authorize'}, 'signature': {'type': 'string'}, 'webauthnKeyID': {'type': 'string'}}, 'required': ['authenticatorData', 'challengeID', 'clientData', 'nextURI', 'operation', 'signature', 'webauthnKeyID']}}}, 'required': True}, 'responses': {'default': {'description': 'Request an authorization token using a WebAuthn signature', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authorization': {'type': 'string', 'description': 'Authorization JWS string'}, 'expires': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this authorization expires'}, 'nextURI': {'type': 'string', 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'operation': {'type': 'string', 'description': 'Operation which is authorized by this token'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'INTERNAL'}