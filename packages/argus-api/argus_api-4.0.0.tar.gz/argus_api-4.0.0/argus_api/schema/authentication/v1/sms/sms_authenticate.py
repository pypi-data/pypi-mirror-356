"""Autogenerated API schema"""
from argus_api import session


disable_current_user_sms_authentication = {'tags': ['authentication/v1/sms'], 'summary': 'Disable the current users SMS authentication method (PUBLIC)', 'description': 'Allow user to disable SMS authentication method, to increase security (e.g. after setting up TOTP/WebAuthn). The endpoint can only be called if the current user is NOT currently logged in using SMS, and the user must have another method initialized, either TOTP, WebAuthN or LDAP.', 'operationId': 'disableCurrentUserSMSAuthentication', 'responses': {'default': {'description': 'Disable the current users SMS authentication method', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object'}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
legacy_sms_authentication = {'tags': ['authentication/v1/sms'], 'summary': 'Initiate a new user session using SMS authentication (PUBLIC)', 'description': 'Requires SMS authentication to be enabled on the server, and for the user. \nUse /methods to check which authentication methods are available on the server.\n\nThis is a 2-step authentication method. The first request should have mode PASSWORD, and carry username and static password.\nThe request will return a challenge, carrying a session cookie.When the SMS code is received, submit a new request with mode VERIFICATION, the username, SMS code (in the passcode) and the session cookie returned in the challenge.This endpoint is deprecated, use /sms/authentication instead.', 'operationId': 'legacySMSAuthentication', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'cookie': {'type': 'str', 'description': 'When responding with SMS code, set the SMS session cookie returned by challenge'}, 'domain': {'type': 'str', 'description': 'User domain'}, 'mode': {'type': 'str', 'description': 'Use PASSWORD for initial request, and SMS to respond with SMS code', 'enum': ['PASSWORD', 'VERIFICATION']}, 'passcode': {'type': 'str', 'description': 'Password or SMS code'}, 'requestedAuthorizations': {'type': 'list', 'description': 'Allow client to request authorizations as part of the authentication transaction. The client is not guaranteed to get the requested authorizations. The setPassword authorization is only returned if the current user has the FORCE_PW_CHANGE flag set.', 'items': {'type': 'str', 'description': 'Allow client to request authorizations as part of the authentication transaction. The client is not guaranteed to get the requested authorizations. The setPassword authorization is only returned if the current user has the FORCE_PW_CHANGE flag set.', 'enum': ['enrollPublicKey', 'setPassword']}, 'uniqueItems': True}, 'userName': {'type': 'str', 'description': 'Username to authenticate'}}, 'required': ['mode', 'passcode', 'userName']}}}, 'required': True}, 'responses': {'default': {'description': 'Initiate a new user session using SMS authentication', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The request credentials to use for this session', 'properties': {'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'requestCredentialsData': {'type': 'string'}, 'requestCredentialsType': {'type': 'string', 'enum': ['sessionToken', 'signature', 'apikey']}, 'uri': {'type': 'string'}}}}}}}}, '221': {'description': 'Session created, password change required', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authenticationMethod': {'type': 'string', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'clientIP': {'type': 'string'}, 'constrained': {'type': 'boolean'}, 'cookie': {'type': 'string'}, 'created': {'type': 'integer', 'format': 'int64'}, 'createdTimestamp': {'type': 'integer', 'format': 'int64'}, 'customerConstraints': {'type': 'array', 'items': {'type': 'integer', 'format': 'int64'}, 'uniqueItems': True}, 'domainID': {'type': 'integer', 'format': 'int32'}, 'forwardedIP': {'type': 'string'}, 'functionConstraints': {'type': 'array', 'items': {'type': 'integer', 'format': 'int64'}, 'uniqueItems': True}, 'impersonatingUserID': {'type': 'integer', 'format': 'int64'}, 'iplockMask': {'type': 'integer', 'format': 'int32'}, 'lastRefreshTimestamp': {'type': 'integer', 'format': 'int64'}, 'readOnly': {'type': 'boolean'}, 'requestCredentialsData': {'type': 'string'}, 'requestCredentialsType': {'type': 'string', 'enum': ['sessionToken', 'signature', 'apikey']}, 'scope': {'type': 'string', 'enum': ['SESSION', 'REQUEST']}, 'securityLevel': {'type': 'string', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'sessionKey': {'type': 'string'}, 'timestamp': {'type': 'integer', 'format': 'int64'}, 'uri': {'type': 'string'}, 'userID': {'type': 'integer', 'format': 'int64'}, 'username': {'type': 'string'}, 'validUntilTimestamp': {'type': 'integer', 'format': 'int64'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '206': {'description': 'Authentication challenge, verification required', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authenticationMethod': {'type': 'string', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'cookie': {'type': 'string'}, 'failed': {'type': 'boolean'}, 'message': {'type': 'string'}, 'mode': {'type': 'string', 'enum': ['PASSWORD', 'VERIFICATION']}, 'suppressed': {'type': 'array', 'items': {'type': 'object', 'properties': {'localizedMessage': {'type': 'string'}, 'message': {'type': 'string'}, 'stackTrace': {'type': 'array', 'items': {'type': 'object', 'properties': {'classLoaderName': {'type': 'string'}, 'className': {'type': 'string'}, 'fileName': {'type': 'string'}, 'lineNumber': {'type': 'integer', 'format': 'int32'}, 'methodName': {'type': 'string'}, 'moduleName': {'type': 'string'}, 'moduleVersion': {'type': 'string'}, 'nativeMethod': {'type': 'boolean'}}}}}}}, 'username': {'type': 'string'}}}}}}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'deprecated': True, 'x-Argus-ApiStatus': 'PUBLIC'}
send_sms_validation_code = {'tags': ['authentication/v1/sms'], 'summary': 'Request an SMS validation token to validate user presence. The returned token must be used when requesting authorization token. (INTERNAL)', 'description': 'This endpoint requires that the current user is logged in using SMS  authentication. Even if the user has SMS authentication enabled, it will not work if the current session was creating using a different authentication method.', 'operationId': 'sendSMSValidationCode', 'responses': {'default': {'description': 'Request an SMS validation token to validate user presence. The returned token must be used when requesting authorization token.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'cookie': {'type': 'string', 'description': 'A state cookie bound to the requested SMS'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'INTERNAL'}
sms_authentication = {'tags': ['authentication/v1/sms'], 'summary': 'Initiate a new user session using SMS authentication (PUBLIC)', 'description': 'Requires SMS authentication to be enabled on the server, and for the user. \nUse /methods to check which authentication methods are available on the server.\n\nThis is a 2-step authentication method. The first request should have mode PASSWORD, and carry username and static password.\nThe request will return a challenge, carrying a session cookie.When the SMS code is received, submit a new request with mode VERIFICATION, the username, SMS code (in the passcode) and the session cookie returned in the challenge.', 'operationId': 'smsAuthentication', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'cookie': {'type': 'str', 'description': 'When responding with SMS code, set the SMS session cookie returned by challenge'}, 'domain': {'type': 'str', 'description': 'User domain'}, 'mode': {'type': 'str', 'description': 'Use PASSWORD for initial request, and SMS to respond with SMS code', 'enum': ['PASSWORD', 'VERIFICATION']}, 'passcode': {'type': 'str', 'description': 'Password or SMS code'}, 'requestedAuthorizations': {'type': 'list', 'description': 'Allow client to request authorizations as part of the authentication transaction. The client is not guaranteed to get the requested authorizations. The setPassword authorization is only returned if the current user has the FORCE_PW_CHANGE flag set.', 'items': {'type': 'str', 'description': 'Allow client to request authorizations as part of the authentication transaction. The client is not guaranteed to get the requested authorizations. The setPassword authorization is only returned if the current user has the FORCE_PW_CHANGE flag set.', 'enum': ['enrollPublicKey', 'setPassword']}, 'uniqueItems': True}, 'userName': {'type': 'str', 'description': 'Username to authenticate'}}, 'required': ['mode', 'passcode', 'userName']}}}, 'required': True}, 'responses': {'default': {'description': 'Initiate a new user session using SMS authentication', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authorizations': {'type': 'array', 'description': 'Any gratuitous authorization tokens generated during authentication, if requested by the client', 'items': {'type': 'object', 'properties': {'authorization': {'type': 'string', 'description': 'Authorization JWS string'}, 'expires': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this authorization expires'}, 'nextURI': {'type': 'string', 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'operation': {'type': 'string', 'description': 'Operation which is authorized by this token'}}}, 'uniqueItems': True}, 'credentials': {'type': 'object', 'description': 'The request credentials to use for this session', 'properties': {'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'requestCredentialsData': {'type': 'string'}, 'requestCredentialsType': {'type': 'string', 'enum': ['sessionToken', 'signature', 'apikey']}, 'uri': {'type': 'string'}}}, 'sessionKey': {'type': 'string'}}}}}}}}, '221': {'description': 'Session created, password change required', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authorizations': {'type': 'array', 'description': 'Any gratuitous authorization tokens generated during authentication, if requested by the client', 'items': {'type': 'object', 'properties': {'authorization': {'type': 'string', 'description': 'Authorization JWS string'}, 'expires': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this authorization expires'}, 'nextURI': {'type': 'string', 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'operation': {'type': 'string', 'description': 'Operation which is authorized by this token'}}}, 'uniqueItems': True}, 'credentials': {'type': 'object', 'description': 'The request credentials to use for this session', 'properties': {'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'requestCredentialsData': {'type': 'string'}, 'requestCredentialsType': {'type': 'string', 'enum': ['sessionToken', 'signature', 'apikey']}, 'uri': {'type': 'string'}}}, 'sessionKey': {'type': 'string'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '206': {'description': 'Authentication challenge, verification required', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authenticationMethod': {'type': 'string', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'cookie': {'type': 'string'}, 'failed': {'type': 'boolean'}, 'message': {'type': 'string'}, 'mode': {'type': 'string', 'enum': ['PASSWORD', 'VERIFICATION']}, 'suppressed': {'type': 'array', 'items': {'type': 'object', 'properties': {'localizedMessage': {'type': 'string'}, 'message': {'type': 'string'}, 'stackTrace': {'type': 'array', 'items': {'type': 'object', 'properties': {'classLoaderName': {'type': 'string'}, 'className': {'type': 'string'}, 'fileName': {'type': 'string'}, 'lineNumber': {'type': 'integer', 'format': 'int32'}, 'methodName': {'type': 'string'}, 'moduleName': {'type': 'string'}, 'moduleVersion': {'type': 'string'}, 'nativeMethod': {'type': 'boolean'}}}}}}}, 'username': {'type': 'string'}}}}}}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
sms_user_authorization = {'tags': ['authentication/v1/sms'], 'summary': 'Request an authorization token using an SMS validation code (INTERNAL)', 'description': 'This endpoint requires that the current user is logged in using SMS  authentication. Even if the user has SMS authentication enabled, it will not work if the current session was creating using a different authentication method.', 'operationId': 'smsUserAuthorization', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'context': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Context variables to scope this authorization. All context variables required by the executing service must be present and equal to those provided here.'}, 'description': 'Context variables to scope this authorization. All context variables required by the executing service must be present and equal to those provided here.'}, 'cookie': {'type': 'str', 'description': 'The cookie returned from the send-sms request'}, 'nextURI': {'type': 'str', 'description': 'The URI to redirect/route to after successful authorization. The URI will be validated according to policy. The authorization token returned from successful authorization should be appended as a query parameter to this URI.'}, 'operation': {'type': 'str', 'description': 'The name of the operation to authorize'}, 'token': {'type': 'str', 'description': 'The token received via SMS'}}, 'required': ['cookie', 'nextURI', 'operation', 'token']}}}, 'required': True}, 'responses': {'default': {'description': 'Request an authorization token using an SMS validation code', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authorization': {'type': 'string', 'description': 'Authorization JWS string'}, 'expires': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this authorization expires'}, 'nextURI': {'type': 'string', 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'operation': {'type': 'string', 'description': 'Operation which is authorized by this token'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'INTERNAL'}