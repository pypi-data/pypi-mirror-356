{
  "openapi": "3.1.0",
  "info": {
    "title": "Argus API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.mnemonic.no"
    }
  ],
  "security": [
    {
      "ApiKeyScheme": []
    }
  ],
  "paths": {
    "/customerdomains/v1/domain/{id}": {
      "get": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Get customer domain (INTERNAL)",
        "description": "",
        "operationId": "getCustomerDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the domain to get",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Get customer domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "viewCustomerDomains"
        ],
        "x-Argus-ApiStatus": "INTERNAL"
      },
      "put": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Update customer domain (INTERNAL)",
        "description": "",
        "operationId": "updateCustomerDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the domain to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "Update customer domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "updateCustomerDomain"
        ],
        "x-Argus-ApiStatus": "INTERNAL"
      },
      "delete": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Delete customer domain (INTERNAL)",
        "description": "",
        "operationId": "deleteCustomerDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the domain to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Delete customer domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "deleteCustomerDomain"
        ],
        "x-Argus-ApiStatus": "INTERNAL"
      }
    },
    "/customerdomains/v1/domain": {
      "get": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Search Customer Domains with specified query params (INTERNAL)",
        "description": "",
        "operationId": "getCustomerDomains",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keywords",
            "in": "query",
            "description": "Filter search by Customer Domain keyword fields (domainName and description)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "customer",
            "in": "query",
            "description": "Customer ids or short names",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": "25",
              "maximum": 10000,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": "0",
              "maximum": 10000,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Search Customer Domains with specified query params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {},
              "text/csv": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {},
              "text/csv": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {},
              "text/csv": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "viewCustomerDomains"
        ],
        "x-Argus-ApiStatus": "INTERNAL"
      },
      "post": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Create new customer domain (INTERNAL)",
        "description": "",
        "operationId": "createCustomerDomain",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          },
          "201": {
            "description": "Create new customer domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "addCustomerDomain"
        ],
        "x-Argus-ApiStatus": "INTERNAL"
      }
    },
    "/customerdomains/v1/domain/search": {
      "post": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Search Customer Domains with specified criteria (INTERNAL)",
        "description": "",
        "operationId": "searchCustomerDomain",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "Search Customer Domains with specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {},
              "text/csv": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {},
              "text/csv": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {},
              "text/csv": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "viewCustomerDomains"
        ],
        "x-Argus-ApiStatus": "INTERNAL"
      }
    },
    "/customernetworks/v1/network/{networkID}/comments": {
      "get": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Get network's comments (PUBLIC)",
        "description": "",
        "operationId": "getCustomerNetworkComments",
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of comments",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": "0",
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned comments",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": "25",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Get network's comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.jargus.model.CustomerNetworkComment"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "viewCustomerNetwork"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      },
      "post": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Add comment for customer network (PUBLIC)",
        "description": "",
        "operationId": "addCustomerNetworkComment",
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkAddCommentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          },
          "201": {
            "description": "Add comment for customer network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.jargus.model.CustomerNetworkComment"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "addCustomerNetworkComment"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      }
    },
    "/customernetworks/v1/network/{networkID}": {
      "get": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Get customer network (PUBLIC)",
        "description": "",
        "operationId": "getCustomerNetwork",
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Get customer network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.jargus.model.CustomerNetwork"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "viewCustomerNetwork"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      },
      "put": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Update customer network (PUBLIC)",
        "description": "",
        "operationId": "updateCustomerNetwork",
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "Update customer network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.jargus.model.CustomerNetwork"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "updateCustomerNetwork"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      },
      "delete": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Delete customer network (PUBLIC)",
        "description": "",
        "operationId": "deleteCustomerNetwork",
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Delete customer network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.jargus.model.CustomerNetwork"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "deleteCustomerNetwork"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      }
    },
    "/customernetworks/v1/network": {
      "get": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Get networks belonging to customer(s) (PUBLIC)",
        "description": "",
        "operationId": "getCustomerNetworks",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerID",
            "in": "query",
            "description": "ID of customer(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of networks",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": "0",
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned networks",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": "25",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Get networks belonging to customer(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.jargus.model.CustomerNetwork"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.jargus.model.CustomerNetwork"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.jargus.model.CustomerNetwork"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {},
              "text/csv": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {},
              "text/csv": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {},
              "text/csv": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "viewCustomerNetwork"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      },
      "post": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Add new customer network (PUBLIC)",
        "description": "",
        "operationId": "addCustomerNetwork",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkAddRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          },
          "201": {
            "description": "Add new customer network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.jargus.model.CustomerNetwork"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "addCustomerNetwork"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      }
    },
    "/customernetworks/v1/network/search": {
      "post": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Search customer network (PUBLIC)",
        "description": "",
        "operationId": "searchCustomerNetwork",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/no.mnemonic.jargus.criteria.customer.CustomerNetworkSearchCriteria"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "Search customer network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.jargus.model.CustomerNetwork"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.jargus.model.CustomerNetwork"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.jargus.model.CustomerNetwork"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {},
              "text/csv": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {},
              "text/csv": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {},
              "text/csv": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "viewCustomerNetwork"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      }
    },
    "/customerdomains/v1/domain/{id}/unverify": {
      "put": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Unverifies a verified customer domain (INTERNAL)",
        "description": "",
        "operationId": "unverifyCustomerDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the domain to unverify",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Unverifies a verified customer domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "unverifyCustomerDomain"
        ],
        "x-Argus-ApiStatus": "INTERNAL"
      }
    },
    "/customerdomains/v1/domain/{id}/verify": {
      "put": {
        "tags": [
          "customerdomains/v1"
        ],
        "summary": "Verifies an unverified customer domain and its subdomains (INTERNAL)",
        "description": "",
        "operationId": "verifyCustomerDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the domain to verify",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Verifies an unverified customer domain and its subdomains",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "verifyCustomerDomain"
        ],
        "x-Argus-ApiStatus": "INTERNAL"
      }
    },
    "/customernetworks/v1/network/{networkID}/comments/{commentID}": {
      "delete": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Delete comment from customer network (PUBLIC)",
        "description": "",
        "operationId": "deleteCustomerNetworkComment",
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of parent network",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          },
          {
            "name": "commentID",
            "in": "path",
            "description": "ID of comment to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Delete comment from customer network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.jargus.model.CustomerNetworkComment"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "removeCustomerNetworkComment"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      }
    },
    "/customernetworks/v1/network/bulk": {
      "post": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Bulk add/update customer networks (PUBLIC)",
        "description": "",
        "operationId": "bulkAddCustomerNetworks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkBulkAddRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "Bulk add/update customer networks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-list-no.mnemonic.jargus.model.CustomerNetwork"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "addCustomerNetwork",
          "updateCustomerNetwork"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      }
    },
    "/customernetworks/v1/network/bulk/lenient": {
      "post": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Bulk add/update customer networks with the option of ignoring failures (PUBLIC)",
        "description": "",
        "operationId": "lenientBulkAddCustomerNetworks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkLenientBulkAddRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "Bulk add/update customer networks with the option of ignoring failures",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.jargus.model.CustomerNetworkLenientBulkAddResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "addCustomerNetwork",
          "updateCustomerNetwork"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      }
    },
    "/customernetworks/v1/network/{networkID}/unverify": {
      "put": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Unverifies a verified customer network (PUBLIC)",
        "description": "",
        "operationId": "unverifyCustomerNetwork",
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network to unverify",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Unverifies a verified customer network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.jargus.model.CustomerNetwork"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "verifyCustomerNetwork"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      }
    },
    "/customernetworks/v1/network/{networkID}/verify": {
      "put": {
        "tags": [
          "customernetworks/v1"
        ],
        "summary": "Verifies an unverified customer network (PUBLIC)",
        "description": "",
        "operationId": "verifyCustomerNetwork",
        "parameters": [
          {
            "name": "networkID",
            "in": "path",
            "description": "ID of network to verify",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Verifies an unverified customer network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultStash-no.mnemonic.jargus.model.CustomerNetwork"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {}
            }
          },
          "412": {
            "description": "Validation failed",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-Argus-Required-Permissions": [
          "verifyCustomerNetwork"
        ],
        "x-Argus-ApiStatus": "PUBLIC"
      }
    }
  },
  "components": {
    "schemas": {
      "no.mnemonic.services.argus.common.spi.response.CustomerInfo": {
        "type": "object",
        "description": "SPI CustomerInfo",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the response object."
          },
          "name": {
            "type": "string",
            "description": "Name of the customer."
          },
          "shortName": {
            "type": "string",
            "description": "Shortname of the customer."
          },
          "domain": {
            "$ref": "#/components/schemas/no.mnemonic.services.argus.common.spi.response.DomainInfo"
          }
        }
      },
      "no.mnemonic.services.argus.common.spi.response.DomainInfo": {
        "type": "object",
        "description": "SPI DomainInfo",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the response object."
          },
          "name": {
            "type": "string",
            "description": "Name of the domain."
          }
        }
      },
      "no.mnemonic.services.argus.common.spi.response.UserInfo": {
        "type": "object",
        "description": "SPI UserInfo",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the response object."
          },
          "shortName": {
            "type": "string",
            "description": "The subject's short name"
          },
          "name": {
            "type": "string",
            "description": "The subject's name"
          },
          "domain": {
            "$ref": "#/components/schemas/no.mnemonic.services.argus.common.spi.response.DomainInfo"
          },
          "customer": {
            "$ref": "#/components/schemas/no.mnemonic.services.argus.common.spi.response.CustomerInfo"
          },
          "flags": {
            "type": "array",
            "description": "The subject's flags",
            "items": {
              "type": "string",
              "description": "The subject's flags",
              "enum": [
                "deleted"
              ]
            },
            "uniqueItems": true
          },
          "type": {
            "type": "string",
            "description": "Type of the subject",
            "enum": [
              "user",
              "group"
            ],
            "readOnly": true
          }
        }
      },
      "no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain": {
        "type": "object",
        "description": "Response containing information on a customer domain",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the domain"
          },
          "domainName": {
            "type": "string",
            "description": "Fully qualified name of the domain (FQDN)"
          },
          "customer": {
            "$ref": "#/components/schemas/no.mnemonic.services.argus.common.spi.response.CustomerInfo"
          },
          "description": {
            "type": "string",
            "description": "Description of the domain"
          },
          "flags": {
            "type": "array",
            "description": "Set of flags set on the domain",
            "items": {
              "type": "string",
              "description": "Set of flags set on the domain",
              "enum": [
                "deleted",
                "public",
                "internal",
                "unverified"
              ]
            },
            "uniqueItems": true
          },
          "createdByUser": {
            "$ref": "#/components/schemas/no.mnemonic.services.argus.common.spi.response.UserInfo"
          },
          "lastUpdatedByUser": {
            "$ref": "#/components/schemas/no.mnemonic.services.argus.common.spi.response.UserInfo"
          },
          "deletedByUser": {
            "$ref": "#/components/schemas/no.mnemonic.services.argus.common.spi.response.UserInfo"
          },
          "createdTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp when the domain was created"
          },
          "lastUpdatedTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp when the domain was last updated"
          },
          "deletedTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp when the domain was deleted"
          }
        }
      },
      "no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainSearchRequest": {
        "type": "object",
        "description": "A request to search for customer domains",
        "properties": {
          "keywords": {
            "type": "array",
            "description": "Search for keywords against fields defined by KeywordFieldStrategy",
            "items": {
              "type": "string",
              "description": "Search for keywords against fields defined by KeywordFieldStrategy"
            },
            "uniqueItems": true
          },
          "keywordFieldStrategy": {
            "type": "array",
            "default": "all",
            "description": "Defines which fields will be searched by keywords",
            "items": {
              "type": "string",
              "default": "all",
              "description": "Defines which fields will be searched by keywords",
              "enum": [
                "domainName",
                "description",
                "all"
              ]
            },
            "uniqueItems": true
          },
          "keywordMatchStrategy": {
            "type": "string",
            "default": "all",
            "description": "Defines how strict different keywords should be matched",
            "enum": [
              "any",
              "all"
            ]
          },
          "subCriteria": {
            "type": "array",
            "description": "The set of sub criteria to add to the search",
            "items": {
              "$ref": "#/components/schemas/no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainSearchSubCriteria"
            },
            "uniqueItems": true
          },
          "domainName": {
            "type": "array",
            "description": "The set of exact customer domain names to search for",
            "items": {
              "type": "string",
              "description": "The set of exact customer domain names to search for"
            },
            "uniqueItems": true
          },
          "includeSubDomains": {
            "type": "boolean",
            "default": false,
            "description": "Whether to search for subdomains of specified domains"
          },
          "includeSuperDomains": {
            "type": "boolean",
            "default": false,
            "description": "Whether to search for parent domains of specified domains"
          },
          "customer": {
            "type": "array",
            "description": "Limit search to domains with the given customers, identified by id or shortname",
            "items": {
              "type": "string",
              "description": "Limit search to domains with the given customers, identified by id or shortname"
            },
            "uniqueItems": true
          },
          "includeFlags": {
            "type": "array",
            "description": "Flags to include",
            "items": {
              "type": "string",
              "description": "Flags to include",
              "enum": [
                "deleted",
                "internal",
                "unverified"
              ]
            },
            "uniqueItems": true
          },
          "excludeFlags": {
            "type": "array",
            "description": "Flags to exclude",
            "items": {
              "type": "string",
              "description": "Flags to exclude",
              "enum": [
                "deleted",
                "internal",
                "unverified"
              ]
            },
            "uniqueItems": true
          },
          "startTimestamp": {
            "type": "string",
            "default": "0",
            "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp)  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.",
            "externalDocs": {
              "description": "See documentation",
              "url": "https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search"
            }
          },
          "endTimestamp": {
            "type": "string",
            "default": "0",
            "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp)  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.",
            "externalDocs": {
              "description": "See documentation",
              "url": "https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search"
            }
          },
          "timeFieldStrategy": {
            "type": "array",
            "default": "all",
            "description": "Defines which timestamps will be included in the search ",
            "items": {
              "type": "string",
              "default": "all",
              "description": "Defines which timestamps will be included in the search ",
              "enum": [
                "created",
                "lastUpdated",
                "deleted",
                "all"
              ]
            },
            "uniqueItems": true
          },
          "timeMatchStrategy": {
            "type": "string",
            "default": "any",
            "description": "Defines how strict different keywords should be matched",
            "enum": [
              "any",
              "all"
            ]
          },
          "user": {
            "type": "array",
            "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively",
            "items": {
              "type": "string",
              "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively"
            },
            "uniqueItems": true
          },
          "userFieldStrategy": {
            "type": "array",
            "default": "all",
            "description": "Defines which fields will be searched by user",
            "items": {
              "type": "string",
              "default": "all",
              "description": "Defines which fields will be searched by user",
              "enum": [
                "createdByUser",
                "lastUpdatedByUser",
                "deletedByUser",
                "all"
              ]
            },
            "uniqueItems": true
          },
          "userMatchStrategy": {
            "type": "string",
            "default": "any",
            "description": "Defines how strict different keywords should be matched",
            "enum": [
              "any",
              "all"
            ]
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "default": 25,
            "description": "Limit maximum amount of results",
            "minimum": 0
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Skip specified amount of results",
            "minimum": 0
          },
          "sortBy": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "customer",
                "domainName",
                "createdTimestamp",
                "lastUpdatedTimestamp",
                "-id",
                "-customer",
                "-domainName",
                "-createdTimestamp",
                "-lastUpdatedTimestamp"
              ]
            }
          },
          "includeDeleted": {
            "type": "boolean",
            "default": false,
            "description": "Whether to include deleted domains in the search (default false). Only allowed for users with `viewDeletedCustomerDomains` permission"
          }
        }
      },
      "no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainSearchSubCriteria": {
        "type": "object",
        "description": "The sub request for searching for customer domains",
        "properties": {
          "keywords": {
            "type": "array",
            "description": "Search for keywords against fields defined by KeywordFieldStrategy",
            "items": {
              "type": "string",
              "description": "Search for keywords against fields defined by KeywordFieldStrategy"
            },
            "uniqueItems": true
          },
          "keywordFieldStrategy": {
            "type": "array",
            "default": "all",
            "description": "Defines which fields will be searched by keywords",
            "items": {
              "type": "string",
              "default": "all",
              "description": "Defines which fields will be searched by keywords",
              "enum": [
                "domainName",
                "description",
                "all"
              ]
            },
            "uniqueItems": true
          },
          "keywordMatchStrategy": {
            "type": "string",
            "default": "all",
            "description": "Defines how strict different keywords should be matched",
            "enum": [
              "any",
              "all"
            ]
          },
          "domainName": {
            "type": "array",
            "description": "The set of exact customer domain names to search for",
            "items": {
              "type": "string",
              "description": "The set of exact customer domain names to search for"
            },
            "uniqueItems": true
          },
          "includeSubDomains": {
            "type": "boolean",
            "default": false,
            "description": "Whether to search for subdomains of specified domains"
          },
          "includeSuperDomains": {
            "type": "boolean",
            "default": false,
            "description": "Whether to search for parent domains of specified domains"
          },
          "customer": {
            "type": "array",
            "description": "Limit search to domains with the given customers, identified by id or shortname",
            "items": {
              "type": "string",
              "description": "Limit search to domains with the given customers, identified by id or shortname"
            },
            "uniqueItems": true
          },
          "includeFlags": {
            "type": "array",
            "description": "Flags to include",
            "items": {
              "type": "string",
              "description": "Flags to include",
              "enum": [
                "deleted",
                "internal",
                "unverified"
              ]
            },
            "uniqueItems": true
          },
          "excludeFlags": {
            "type": "array",
            "description": "Flags to exclude",
            "items": {
              "type": "string",
              "description": "Flags to exclude",
              "enum": [
                "deleted",
                "internal",
                "unverified"
              ]
            },
            "uniqueItems": true
          },
          "startTimestamp": {
            "type": "string",
            "default": "0",
            "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp)  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.",
            "externalDocs": {
              "description": "See documentation",
              "url": "https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search"
            }
          },
          "endTimestamp": {
            "type": "string",
            "default": "0",
            "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp)  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.",
            "externalDocs": {
              "description": "See documentation",
              "url": "https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search"
            }
          },
          "timeFieldStrategy": {
            "type": "array",
            "default": "all",
            "description": "Defines which timestamps will be included in the search ",
            "items": {
              "type": "string",
              "default": "all",
              "description": "Defines which timestamps will be included in the search ",
              "enum": [
                "created",
                "lastUpdated",
                "deleted",
                "all"
              ]
            },
            "uniqueItems": true
          },
          "timeMatchStrategy": {
            "type": "string",
            "default": "any",
            "description": "Defines how strict different keywords should be matched",
            "enum": [
              "any",
              "all"
            ]
          },
          "user": {
            "type": "array",
            "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively",
            "items": {
              "type": "string",
              "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively"
            },
            "uniqueItems": true
          },
          "userFieldStrategy": {
            "type": "array",
            "default": "all",
            "description": "Defines which fields will be searched by user",
            "items": {
              "type": "string",
              "default": "all",
              "description": "Defines which fields will be searched by user",
              "enum": [
                "createdByUser",
                "lastUpdatedByUser",
                "deletedByUser",
                "all"
              ]
            },
            "uniqueItems": true
          },
          "userMatchStrategy": {
            "type": "string",
            "default": "any",
            "description": "Defines how strict different keywords should be matched",
            "enum": [
              "any",
              "all"
            ]
          },
          "required": {
            "type": "boolean",
            "default": false,
            "description": "If set to true, objects matching this criteria are required (logical AND-ed together with parent criteria)"
          },
          "exclude": {
            "type": "boolean",
            "default": false,
            "description": "If set to true, objects matching this criteria will be excluded"
          }
        }
      },
      "no.mnemonic.jargus.model.CustomerInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "domain": {
            "$ref": "#/components/schemas/no.mnemonic.jargus.model.DomainInfo"
          }
        }
      },
      "no.mnemonic.jargus.model.CustomerNetworkComment": {
        "type": "object",
        "description": "Response containing information on a customer network comment",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "When the comment was added."
          },
          "user": {
            "$ref": "#/components/schemas/no.mnemonic.jargus.model.UserInfo"
          },
          "comment": {
            "type": "string",
            "description": "The comment's text."
          }
        }
      },
      "no.mnemonic.jargus.model.DomainInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "no.mnemonic.jargus.model.UserInfo": {
        "type": "object",
        "description": "User which created the customer network",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "customer": {
            "$ref": "#/components/schemas/no.mnemonic.jargus.model.CustomerInfo"
          },
          "domain": {
            "$ref": "#/components/schemas/no.mnemonic.jargus.model.DomainInfo"
          },
          "userName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "customerID": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "Type of the subject",
            "enum": [
              "user",
              "group"
            ],
            "readOnly": true
          }
        }
      },
      "no.mnemonic.jargus.model.CustomerNetwork": {
        "type": "object",
        "description": "Response containing information on a customer network",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "customer": {
            "$ref": "#/components/schemas/no.mnemonic.jargus.model.CustomerInfo"
          },
          "location": {
            "$ref": "#/components/schemas/no.mnemonic.jargus.model.LocationInfo"
          },
          "description": {
            "type": "string",
            "description": "Description of the customer network"
          },
          "networkAddress": {
            "$ref": "#/components/schemas/no.mnemonic.jargus.net.IPNetworkAddress"
          },
          "lastUpdatedByUser": {
            "$ref": "#/components/schemas/no.mnemonic.jargus.model.UserInfo"
          },
          "lastUpdatedTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of last update of the customer network"
          },
          "createdByUser": {
            "$ref": "#/components/schemas/no.mnemonic.jargus.model.UserInfo"
          },
          "createdTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of creation of the customer network"
          },
          "zone": {
            "type": "string",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "DMZ",
              "UNKNOWN"
            ]
          },
          "flags": {
            "type": "array",
            "description": "Flags assigned to the object.",
            "items": {
              "type": "string",
              "description": "Flags assigned to the object.",
              "enum": [
                "AUTO",
                "NAT",
                "PROXY",
                "SCANNER",
                "CLIENT",
                "SERVER",
                "DNS",
                "GUEST",
                "UNASSIGNED",
                "DELETED",
                "DOMAIN_CONTROLLER",
                "SHARED_HOST",
                "UNVERIFIED",
                "HOME_NET",
                "EXCLUDE_HOME_NET",
                "MANAGED_BY_SOC"
              ]
            },
            "uniqueItems": true
          }
        }
      },
      "no.mnemonic.jargus.model.LocationInfo": {
        "type": "object",
        "description": "DEPRECATED. Location where the network is",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "shortName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          }
        }
      },
      "no.mnemonic.jargus.net.IPNetworkAddress": {
        "type": "object",
        "description": "IP address of the customer network",
        "properties": {
          "public": {
            "type": "boolean"
          },
          "ipv6": {
            "type": "boolean",
            "xml": {
              "attribute": true
            }
          },
          "host": {
            "type": "boolean",
            "xml": {
              "attribute": true
            }
          },
          "maskBits": {
            "type": "integer",
            "format": "int32"
          },
          "multicast": {
            "type": "boolean"
          },
          "address": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "no.mnemonic.jargus.criteria.customer.CustomerNetworkSearchCriteria": {
        "type": "object",
        "description": "Request to search for customer networks",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Max number of results."
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "description": "Skip the first (offset) objects. By default, return result from first object."
          },
          "includeDeleted": {
            "type": "boolean",
            "description": "Set to true to include deleted objects. By default, exclude deleted objects."
          },
          "subCriteria": {
            "type": "array",
            "description": "Set additional criterias which are applied using a logical OR.",
            "items": {
              "$ref": "#/components/schemas/no.mnemonic.jargus.criteria.customer.CustomerNetworkSearchCriteria"
            },
            "uniqueItems": true
          },
          "exclude": {
            "type": "boolean",
            "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
          },
          "required": {
            "type": "boolean",
            "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
          },
          "customerID": {
            "type": "array",
            "description": "Restrict search to data belonging to specified customers.",
            "items": {
              "type": "integer",
              "format": "int64",
              "description": "Restrict search to data belonging to specified customers."
            },
            "uniqueItems": true
          },
          "addresses": {
            "type": "array",
            "description": "A set of IP addresses matched against networks",
            "items": {
              "$ref": "#/components/schemas/no.mnemonic.jargus.net.IPNetworkAddress"
            },
            "uniqueItems": true
          },
          "includeSupernet": {
            "type": "boolean",
            "default": true,
            "description": "Network in search criteria will be searched for matching supernets"
          },
          "includeSubnet": {
            "type": "boolean",
            "default": true,
            "description": "Network in search criteria will be searched for matching subnets"
          },
          "includeSubCustomers": {
            "type": "boolean",
            "default": false,
            "description": "If true, customer criteria will be expanded to include their sub customers when searching for customer networks."
          },
          "keywords": {
            "type": "array",
            "description": "A set of keywords matched against network's description",
            "items": {
              "type": "string",
              "description": "A set of keywords matched against network's description"
            },
            "uniqueItems": true
          },
          "keywordMatchStrategy": {
            "type": "string",
            "default": "any",
            "description": "KeywordMatchStrategy to define how keywords are queried for logically i.e. equivalent of AND/OR",
            "enum": [
              "all",
              "any"
            ]
          },
          "keywordFieldStrategy": {
            "type": "array",
            "default": "all",
            "description": "Defines which fields will be searched by keywords",
            "items": {
              "type": "string",
              "default": "all",
              "description": "Defines which fields will be searched by keywords",
              "enum": [
                "description",
                "all"
              ]
            },
            "uniqueItems": true
          },
          "startTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Start of time search period"
          },
          "endTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "End of time search period"
          },
          "timeMatchStrategy": {
            "type": "string",
            "default": "any",
            "description": "TimeMatchStrategy to define how to match startTimestamp and endTimestamp with provided timeFieldStrategies",
            "enum": [
              "all",
              "any"
            ]
          },
          "timeFieldStrategy": {
            "type": "array",
            "default": "createdTimestamp",
            "description": "TimeFieldStrategy to define which timestamp field(s) to match.",
            "items": {
              "type": "string",
              "default": "createdTimestamp",
              "description": "TimeFieldStrategy to define which timestamp field(s) to match.",
              "enum": [
                "createdTimestamp",
                "lastUpdatedTimestamp",
                "all"
              ]
            },
            "uniqueItems": true
          },
          "sortBy": {
            "type": "array",
            "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
            "items": {
              "type": "string",
              "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
              "enum": [
                "id",
                "networkAddress",
                "maskBits",
                "createdTimestamp",
                "lastUpdatedTimestamp",
                "-id",
                "-networkAddress",
                "-maskBits",
                "-createdTimestamp",
                "-lastUpdatedTimestamp"
              ]
            }
          },
          "includeFlags": {
            "type": "array",
            "description": "Only include objects which have includeFlags set.",
            "items": {
              "type": "string",
              "description": "Only include objects which have includeFlags set.",
              "enum": [
                "DELETED",
                "AUTO",
                "NAT",
                "PROXY",
                "SCANNER",
                "CLIENT",
                "SERVER",
                "DNS",
                "GUEST",
                "UNASSIGNED",
                "DOMAIN_CONTROLLER",
                "SHARED_HOST",
                "UNVERIFIED",
                "HOME_NET",
                "EXCLUDE_HOME_NET",
                "MANAGED_BY_SOC",
                "APPLIANCE",
                "ADCS",
                "RFC1918",
                "PRIVATE_ADDRESS"
              ]
            },
            "uniqueItems": true
          },
          "excludeFlags": {
            "type": "array",
            "description": "Exclude objects which have excludeFlags set.",
            "items": {
              "type": "string",
              "description": "Exclude objects which have excludeFlags set.",
              "enum": [
                "DELETED",
                "AUTO",
                "NAT",
                "PROXY",
                "SCANNER",
                "CLIENT",
                "SERVER",
                "DNS",
                "GUEST",
                "UNASSIGNED",
                "DOMAIN_CONTROLLER",
                "SHARED_HOST",
                "UNVERIFIED",
                "HOME_NET",
                "EXCLUDE_HOME_NET",
                "MANAGED_BY_SOC",
                "APPLIANCE",
                "ADCS",
                "RFC1918",
                "PRIVATE_ADDRESS"
              ]
            },
            "uniqueItems": true
          }
        }
      },
      "no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainCreateRequest": {
        "type": "object",
        "description": "Request model for creating a customer domain",
        "properties": {
          "customer": {
            "type": "string",
            "description": "Customer ID or short name of the customer that the domain belongs to"
          },
          "domainName": {
            "type": "string",
            "description": "Fully qualified name of the domain (FQDN)"
          },
          "description": {
            "type": "string",
            "description": "Description of the domain"
          },
          "internalDomain": {
            "type": "boolean",
            "default": false,
            "description": "Whether the domain is internal"
          }
        },
        "required": [
          "customer",
          "domainName"
        ]
      },
      "no.mnemonic.services.customernetwork.spi.v1.request.CustomerDomainUpdateRequest": {
        "type": "object",
        "description": "Request model for updating domain",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the domain. Maximum number of characters is 2048."
          },
          "internalDomain": {
            "type": "boolean",
            "default": false,
            "description": "Whether the domain is internal"
          }
        }
      },
      "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkAddCommentRequest": {
        "type": "object",
        "description": "Request model for adding a network comment",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Comment to add to the network",
            "pattern": "[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
          }
        },
        "required": [
          "comment"
        ]
      },
      "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkAddRequest": {
        "type": "object",
        "description": "Request model for adding a single customer network",
        "properties": {
          "customer": {
            "type": "string",
            "description": "Customer ID or short name of the customer that the network belongs to"
          },
          "location": {
            "type": "string",
            "default": "0",
            "deprecated": true,
            "description": "DEPRECATED. Location ID or short name of the location where the network is located"
          },
          "flagsToSet": {
            "type": "array",
            "description": "Flags to set for the network",
            "items": {
              "type": "string",
              "description": "Flags to set for the network",
              "enum": [
                "AUTO",
                "NAT",
                "PROXY",
                "SCANNER",
                "CLIENT",
                "SERVER",
                "DNS",
                "GUEST",
                "UNASSIGNED",
                "DOMAIN_CONTROLLER",
                "SHARED_HOST",
                "UNVERIFIED",
                "HOME_NET",
                "EXCLUDE_HOME_NET",
                "MANAGED_BY_SOC",
                "APPLIANCE",
                "ADCS"
              ]
            },
            "uniqueItems": true
          },
          "zone": {
            "type": "string",
            "description": "Zone of the network",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "DMZ",
              "UNKNOWN"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description of the customer network. Maximum number of characters is 2048."
          },
          "networkAddress": {
            "type": "string",
            "description": "IP address of the customer network [format:ip]",
            "x-Argus-Format": "ip"
          },
          "verified": {
            "type": "boolean",
            "default": true,
            "description": "DEPRECATED. Whether to create the network already Verified."
          }
        },
        "required": [
          "customer",
          "description",
          "networkAddress",
          "zone"
        ]
      },
      "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkBulkAddRequest": {
        "type": "object",
        "description": "Request for bulk adding customer networks",
        "properties": {
          "customer": {
            "type": "string",
            "description": "Customer ID or short name of the customer that the networks belong to"
          },
          "overwrite": {
            "type": "boolean",
            "default": true,
            "description": "Overwrite existing networks configuration"
          },
          "verified": {
            "type": "boolean",
            "default": true,
            "description": "DEPRECATED. Whether to create the networks already Verified."
          },
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkBulkNetworkRequest"
            },
            "maxItems": 2147483647,
            "minItems": 1
          }
        },
        "required": [
          "customer",
          "networks"
        ]
      },
      "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkBulkNetworkRequest": {
        "type": "object",
        "description": "Request model for adding a network as part of a bulk add operation",
        "properties": {
          "location": {
            "type": "string",
            "default": "0",
            "deprecated": true,
            "description": "DEPRECATED. Location ID or short name of the location where the network is located"
          },
          "flagsToSet": {
            "type": "array",
            "description": "Flags to set for the network",
            "items": {
              "type": "string",
              "description": "Flags to set for the network",
              "enum": [
                "AUTO",
                "NAT",
                "PROXY",
                "SCANNER",
                "CLIENT",
                "SERVER",
                "DNS",
                "GUEST",
                "UNASSIGNED",
                "DOMAIN_CONTROLLER",
                "SHARED_HOST",
                "UNVERIFIED",
                "HOME_NET",
                "EXCLUDE_HOME_NET",
                "MANAGED_BY_SOC",
                "APPLIANCE",
                "ADCS"
              ]
            },
            "uniqueItems": true
          },
          "zone": {
            "type": "string",
            "description": "Zone of the network",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "DMZ",
              "UNKNOWN"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description of the customer network. Maximum number of characters is 255."
          },
          "networkAddress": {
            "type": "string",
            "description": "IP address of the customer network [format:ip]",
            "x-Argus-Format": "ip"
          }
        },
        "required": [
          "description",
          "networkAddress",
          "zone"
        ]
      },
      "no.mnemonic.jargus.model.CustomerNetworkLenientBulkAddResponse": {
        "type": "object",
        "description": "Response containing information about the result of the bulk add operation",
        "properties": {
          "accepted": {
            "type": "integer",
            "format": "int32",
            "description": "The number of networks that were accepted and added"
          },
          "rejected": {
            "type": "integer",
            "format": "int32",
            "description": "The number of networks that were rejected and not added"
          },
          "errors": {
            "type": "array",
            "description": "Information about networks that were rejected",
            "items": {
              "$ref": "#/components/schemas/no.mnemonic.jargus.model.CustomerNetworkRecordErrorInformation"
            }
          }
        }
      },
      "no.mnemonic.jargus.model.CustomerNetworkRecordErrorInformation": {
        "type": "object",
        "description": "Response containing detailed error information about a failed add operation",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the add request as it appears in the request"
          },
          "errorMessages": {
            "type": "array",
            "description": "Messages for causes of errors",
            "items": {
              "type": "string",
              "description": "Messages for causes of errors"
            }
          }
        }
      },
      "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkLenientBulkAddRequest": {
        "type": "object",
        "description": "Request model for leniently bulk adding networks",
        "properties": {
          "customer": {
            "type": "string",
            "description": "Customer ID or short name of the customer that the networks belong to"
          },
          "domain": {
            "type": "string",
            "description": "The domain of the customer. Defaults to the current user's domain"
          },
          "overwrite": {
            "type": "boolean",
            "default": true,
            "description": "Overwrite existing networks configuration"
          },
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkLenientBulkNetworkRequest"
            },
            "maxItems": 2147483647,
            "minItems": 1
          },
          "ignoreOnFailed": {
            "type": "boolean",
            "default": false,
            "description": "Whether to ignore networks that fails to be added. If true, all networks that can be added, will be added"
          }
        },
        "required": [
          "customer",
          "networks"
        ]
      },
      "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkLenientBulkNetworkRequest": {
        "type": "object",
        "description": "Request model for adding a network as part of a lenient bulk add operation",
        "properties": {
          "flags": {
            "type": "array",
            "description": "Flags to set for the network",
            "items": {
              "type": "string",
              "description": "Flags to set for the network",
              "enum": [
                "AUTO",
                "NAT",
                "PROXY",
                "SCANNER",
                "CLIENT",
                "SERVER",
                "DNS",
                "GUEST",
                "UNASSIGNED",
                "DOMAIN_CONTROLLER",
                "SHARED_HOST",
                "UNVERIFIED",
                "HOME_NET",
                "EXCLUDE_HOME_NET",
                "MANAGED_BY_SOC",
                "APPLIANCE",
                "ADCS"
              ]
            },
            "uniqueItems": true
          },
          "zone": {
            "type": "string",
            "description": "Zone of the network",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "DMZ",
              "UNKNOWN"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description of the customer network. Maximum number of characters is 255."
          },
          "networkAddress": {
            "type": "string",
            "description": "IP address of the customer network [format:ip]",
            "x-Argus-Format": "ip"
          }
        },
        "required": [
          "description",
          "networkAddress",
          "zone"
        ]
      },
      "no.mnemonic.jargus.service.request.customernetwork.v1.CustomerNetworkUpdateRequest": {
        "type": "object",
        "description": "Request model for updating a network",
        "properties": {
          "location": {
            "type": "string",
            "description": "DEPRECATED. Location ID or short name of the location where the network is located"
          },
          "description": {
            "type": "string",
            "description": "Description of the customer network. Maximum number of characters is 2048."
          },
          "flagsToSet": {
            "type": "array",
            "description": "Flags to set for the network. This property takes precedence over the content of flagsToEnable and flagsToDisable properties. A permission check if performed to verify that the user is allowed to set the flags, and disable any flags already present on the network.",
            "items": {
              "type": "string",
              "description": "Flags to set for the network. This property takes precedence over the content of flagsToEnable and flagsToDisable properties. A permission check if performed to verify that the user is allowed to set the flags, and disable any flags already present on the network.",
              "enum": [
                "AUTO",
                "NAT",
                "PROXY",
                "SCANNER",
                "CLIENT",
                "SERVER",
                "DNS",
                "GUEST",
                "UNASSIGNED",
                "DOMAIN_CONTROLLER",
                "SHARED_HOST",
                "UNVERIFIED",
                "HOME_NET",
                "EXCLUDE_HOME_NET",
                "MANAGED_BY_SOC",
                "APPLIANCE",
                "ADCS"
              ]
            },
            "uniqueItems": true
          },
          "flagsToEnable": {
            "type": "array",
            "description": "Flags to enable for the network. A permission check if performed to verify that the user is allowed to set the flags",
            "items": {
              "type": "string",
              "description": "Flags to enable for the network. A permission check if performed to verify that the user is allowed to set the flags",
              "enum": [
                "AUTO",
                "NAT",
                "PROXY",
                "SCANNER",
                "CLIENT",
                "SERVER",
                "DNS",
                "GUEST",
                "UNASSIGNED",
                "DOMAIN_CONTROLLER",
                "SHARED_HOST",
                "UNVERIFIED",
                "HOME_NET",
                "EXCLUDE_HOME_NET",
                "MANAGED_BY_SOC",
                "APPLIANCE",
                "ADCS"
              ]
            },
            "uniqueItems": true
          },
          "flagsToDisable": {
            "type": "array",
            "description": "Flags to disable for the network. A permission check if performed to verify that the user is allowed to disable the flags",
            "items": {
              "type": "string",
              "description": "Flags to disable for the network. A permission check if performed to verify that the user is allowed to disable the flags",
              "enum": [
                "AUTO",
                "NAT",
                "PROXY",
                "SCANNER",
                "CLIENT",
                "SERVER",
                "DNS",
                "GUEST",
                "UNASSIGNED",
                "DOMAIN_CONTROLLER",
                "SHARED_HOST",
                "UNVERIFIED",
                "HOME_NET",
                "EXCLUDE_HOME_NET",
                "MANAGED_BY_SOC",
                "APPLIANCE",
                "ADCS"
              ]
            },
            "uniqueItems": true
          },
          "zone": {
            "type": "string",
            "description": "Zone of the network",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "DMZ",
              "UNKNOWN"
            ]
          }
        }
      },
      "no.mnemonic.services.argus.common.rest.model.ResultMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message text"
          },
          "messageTemplate": {
            "type": "string",
            "description": "Message template"
          },
          "type": {
            "type": "string",
            "description": "Message type",
            "enum": [
              "FIELD_ERROR",
              "ACTION_ERROR",
              "WARNING",
              "NOTIFICATION",
              "INFO"
            ]
          },
          "field": {
            "type": "string",
            "description": "Field which this message applies to"
          },
          "parameter": {
            "type": "string",
            "description": "The affected parameter"
          }
        }
      },
      "no.mnemonic.services.argus.common.rest.model.ResultStash": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "description": "Status code returned from API"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of returned results"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "Number of skipped results"
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of available results on server"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "Actual number of returned results"
          },
          "metaData": {
            "type": "object",
            "description": "Additional unstructured meta data associated with response"
          },
          "messages": {
            "type": "array",
            "description": "Contains messages returned from the API, usually error messages",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/no.mnemonic.services.argus.common.rest.model.ResultMessage"
            }
          },
          "data": {
            "type": "object",
            "description": "Returned results (might be an array or a single object)"
          }
        }
      },
      "ResultStash-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "description": "Status code returned from API"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of returned results"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "Number of skipped results"
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of available results on server"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "Actual number of returned results"
          },
          "metaData": {
            "type": "object",
            "description": "Additional unstructured meta data associated with response"
          },
          "messages": {
            "type": "array",
            "description": "Contains messages returned from the API, usually error messages",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/no.mnemonic.services.argus.common.rest.model.ResultMessage"
            }
          },
          "data": {
            "$ref": "#/components/schemas/no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain",
            "description": "Response containing information on a customer domain"
          }
        }
      },
      "ResultStash-list-no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "description": "Status code returned from API"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of returned results"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "Number of skipped results"
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of available results on server"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "Actual number of returned results"
          },
          "metaData": {
            "type": "object",
            "description": "Additional unstructured meta data associated with response"
          },
          "messages": {
            "type": "array",
            "description": "Contains messages returned from the API, usually error messages",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/no.mnemonic.services.argus.common.rest.model.ResultMessage"
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/no.mnemonic.services.customernetwork.spi.v1.response.CustomerDomain",
              "description": "Response containing information on a customer domain"
            }
          }
        }
      },
      "ResultStash-list-no.mnemonic.jargus.model.CustomerNetworkComment": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "description": "Status code returned from API"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of returned results"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "Number of skipped results"
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of available results on server"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "Actual number of returned results"
          },
          "metaData": {
            "type": "object",
            "description": "Additional unstructured meta data associated with response"
          },
          "messages": {
            "type": "array",
            "description": "Contains messages returned from the API, usually error messages",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/no.mnemonic.services.argus.common.rest.model.ResultMessage"
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/no.mnemonic.jargus.model.CustomerNetworkComment",
              "description": "Response containing information on a customer network comment"
            }
          }
        }
      },
      "ResultStash-no.mnemonic.jargus.model.CustomerNetworkComment": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "description": "Status code returned from API"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of returned results"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "Number of skipped results"
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of available results on server"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "Actual number of returned results"
          },
          "metaData": {
            "type": "object",
            "description": "Additional unstructured meta data associated with response"
          },
          "messages": {
            "type": "array",
            "description": "Contains messages returned from the API, usually error messages",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/no.mnemonic.services.argus.common.rest.model.ResultMessage"
            }
          },
          "data": {
            "$ref": "#/components/schemas/no.mnemonic.jargus.model.CustomerNetworkComment",
            "description": "Response containing information on a customer network comment"
          }
        }
      },
      "ResultStash-no.mnemonic.jargus.model.CustomerNetwork": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "description": "Status code returned from API"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of returned results"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "Number of skipped results"
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of available results on server"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "Actual number of returned results"
          },
          "metaData": {
            "type": "object",
            "description": "Additional unstructured meta data associated with response"
          },
          "messages": {
            "type": "array",
            "description": "Contains messages returned from the API, usually error messages",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/no.mnemonic.services.argus.common.rest.model.ResultMessage"
            }
          },
          "data": {
            "$ref": "#/components/schemas/no.mnemonic.jargus.model.CustomerNetwork",
            "description": "Response containing information on a customer network"
          }
        }
      },
      "ResultStash-list-no.mnemonic.jargus.model.CustomerNetwork": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "description": "Status code returned from API"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of returned results"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "Number of skipped results"
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of available results on server"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "Actual number of returned results"
          },
          "metaData": {
            "type": "object",
            "description": "Additional unstructured meta data associated with response"
          },
          "messages": {
            "type": "array",
            "description": "Contains messages returned from the API, usually error messages",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/no.mnemonic.services.argus.common.rest.model.ResultMessage"
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/no.mnemonic.jargus.model.CustomerNetwork",
              "description": "Response containing information on a customer network"
            }
          }
        }
      },
      "ResultStash-no.mnemonic.jargus.model.CustomerNetworkLenientBulkAddResponse": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "format": "int32",
            "description": "Status code returned from API"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum number of returned results"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "description": "Number of skipped results"
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of available results on server"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "Actual number of returned results"
          },
          "metaData": {
            "type": "object",
            "description": "Additional unstructured meta data associated with response"
          },
          "messages": {
            "type": "array",
            "description": "Contains messages returned from the API, usually error messages",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/no.mnemonic.services.argus.common.rest.model.ResultMessage"
            }
          },
          "data": {
            "$ref": "#/components/schemas/no.mnemonic.jargus.model.CustomerNetworkLenientBulkAddResponse",
            "description": "Response containing information about the result of the bulk add operation"
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyScheme": {
        "type": "apiKey",
        "name": "Argus-API-Key",
        "in": "header"
      }
    }
  },
  "x-ResultStash-converted": true
}