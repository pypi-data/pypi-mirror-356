"""Autogenerated API schema"""
from argus_api import session


add_location = {'tags': ['/geoip/v1'], 'summary': 'Add new location (DEV)', 'description': '', 'operationId': 'addLocation', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Location is a subunit of a region. It contains data about the location and also the region and country it belongs to.', 'properties': {'id': {'type': 'int'}, 'extID': {'type': 'int', 'description': 'The external ID of the location (0 if not set).'}, 'countryCode': {'type': 'str', 'description': 'The two-letter code of the country where this location is in.'}, 'locationName': {'type': 'str', 'description': 'The name of the the location.'}, 'lastUpdatedTimestamp': {'type': 'int', 'description': 'The timestamp when this location was last updated.'}, 'flags': {'type': 'list', 'description': 'Flags assigned to the object.', 'items': {'type': 'str', 'description': 'Flags assigned to the object.', 'enum': ['deleted', 'disabled']}, 'uniqueItems': True}}}}}, 'required': True}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Add new location', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Location is a subunit of a region. It contains data about the location and also the region and country it belongs to.', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'extID': {'type': 'integer', 'format': 'int32', 'description': 'The external ID of the location (0 if not set).'}, 'countryCode': {'type': 'string', 'description': 'The two-letter code of the country where this location is in.'}, 'locationName': {'type': 'string', 'description': 'The name of the the location.'}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this location was last updated.'}, 'flags': {'type': 'array', 'description': 'Flags assigned to the object.', 'items': {'type': 'string', 'description': 'Flags assigned to the object.', 'enum': ['deleted', 'disabled']}, 'uniqueItems': True}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['addGeoIPData', 'updateGeoIPData'], 'x-Argus-ApiStatus': 'DEV'}
get_location = {'tags': ['/geoip/v1'], 'summary': 'Lookup location (INTERNAL)', 'description': '', 'operationId': 'getLocation', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'Location ID', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'responses': {'default': {'description': 'Lookup location', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Location is a subunit of a region. It contains data about the location and also the region and country it belongs to.', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'extID': {'type': 'integer', 'format': 'int32', 'description': 'The external ID of the location (0 if not set).'}, 'countryCode': {'type': 'string', 'description': 'The two-letter code of the country where this location is in.'}, 'locationName': {'type': 'string', 'description': 'The name of the the location.'}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this location was last updated.'}, 'flags': {'type': 'array', 'description': 'Flags assigned to the object.', 'items': {'type': 'string', 'description': 'Flags assigned to the object.', 'enum': ['deleted', 'disabled']}, 'uniqueItems': True}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewGeoIPData'], 'x-Argus-ApiStatus': 'INTERNAL'}
list_locations = {'tags': ['/geoip/v1'], 'summary': 'List locations (INTERNAL)', 'description': '', 'operationId': 'listLocations', 'parameters': [{'name': 'limit', 'in': 'query', 'description': 'Max number of items to return', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'The amount of items to skip from the beginning', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "Fields to sort results by (without a sign is ascending, with '-' sign is descending, supported fields are: id, externalID, countryCode, regionCode)", 'schema': {'type': 'list', 'items': {'type': 'string'}}, 'type': 'list', 'items': {'type': 'string'}}, {'name': 'fromID', 'in': 'query', 'description': 'Only return locations with numeric ID greater than or equal to this value', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}], 'responses': {'default': {'description': 'List locations', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Location is a subunit of a region. It contains data about the location and also the region and country it belongs to.', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'extID': {'type': 'integer', 'format': 'int32', 'description': 'The external ID of the location (0 if not set).'}, 'countryCode': {'type': 'string', 'description': 'The two-letter code of the country where this location is in.'}, 'locationName': {'type': 'string', 'description': 'The name of the the location.'}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this location was last updated.'}, 'flags': {'type': 'array', 'description': 'Flags assigned to the object.', 'items': {'type': 'string', 'description': 'Flags assigned to the object.', 'enum': ['deleted', 'disabled']}, 'uniqueItems': True}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewGeoIPData'], 'x-Argus-ApiStatus': 'INTERNAL'}
search_locations = {'tags': ['/geoip/v1'], 'summary': 'Find locations (INTERNAL)', 'description': '', 'operationId': 'searchLocations', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request to search for locations', 'properties': {'country': {'type': 'list', 'description': 'Only return locations from these countries (by country ID or two-letter code).', 'items': {'type': 'str', 'description': 'Only return locations from these countries (by country ID or two-letter code).'}, 'uniqueItems': True}, 'extID': {'type': 'list', 'description': 'Only return locations bound to these external IDs.', 'items': {'type': 'int', 'description': 'Only return locations bound to these external IDs.'}, 'uniqueItems': True}, 'fromID': {'type': 'int', 'description': 'Only return locations with IDs greater than or equal to this ID.', 'minimum': 0}, 'includeFlags': {'type': 'list', 'description': 'A set of included enumerated flags of the searched locations.', 'items': {'type': 'str', 'description': 'A set of included enumerated flags of the searched locations.', 'enum': ['deleted', 'disabled', 'withoutExtID']}, 'uniqueItems': True}, 'excludeFlags': {'type': 'list', 'description': 'A set of excluded enumerated flags of the searched locations.', 'items': {'type': 'str', 'description': 'A set of excluded enumerated flags of the searched locations.', 'enum': ['deleted', 'disabled', 'withoutExtID']}, 'uniqueItems': True}, 'includeDeleted': {'type': 'bool', 'description': 'If true, also include locations marked as deleted.'}, 'startTimestamp': {'type': 'int', 'description': 'Search for locations having lastUpdatedTimestamp greater than or equal to this timestamp.'}, 'endTimestamp': {'type': 'int', 'description': 'Search for locations having lastUpdatedTimestamp lower than or equal to this timestamp.'}, 'countTimeout': {'type': 'int', 'default': -1, 'description': 'Max wait in seconds for the count query to run. Set the value to -1 to skip counting (count will be returned -1). Set the value to 0 to execute the count query as long as the service allows, max allowed timeout value is 30 (seconds), default value is -1.', 'maximum': 30, 'minimum': -1}, 'limit': {'type': 'int', 'description': 'Max number of results.', 'minimum': 0}, 'offset': {'type': 'int', 'description': 'Skip the first (offset) objects. By default, return result from first object.', 'minimum': 0}, 'sortBy': {'type': 'list', 'description': "Fields to sort results by (without a sign is ascending, with '-' sign is descending).", 'items': {'type': 'str', 'description': "Fields to sort results by (without a sign is ascending, with '-' sign is descending).", 'enum': ['id', 'externalID', 'countryCode', 'regionCode', '-id', '-externalID', '-countryCode', '-regionCode']}}}}}}, 'required': True}, 'responses': {'default': {'description': 'Find locations', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Location is a subunit of a region. It contains data about the location and also the region and country it belongs to.', 'properties': {'id': {'type': 'integer', 'format': 'int64'}, 'extID': {'type': 'integer', 'format': 'int32', 'description': 'The external ID of the location (0 if not set).'}, 'countryCode': {'type': 'string', 'description': 'The two-letter code of the country where this location is in.'}, 'locationName': {'type': 'string', 'description': 'The name of the the location.'}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this location was last updated.'}, 'flags': {'type': 'array', 'description': 'Flags assigned to the object.', 'items': {'type': 'string', 'description': 'Flags assigned to the object.', 'enum': ['deleted', 'disabled']}, 'uniqueItems': True}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewGeoIPData'], 'x-Argus-ApiStatus': 'INTERNAL'}