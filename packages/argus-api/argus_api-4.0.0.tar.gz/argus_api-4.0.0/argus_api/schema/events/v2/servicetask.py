"""Autogenerated API schema"""
from argus_api import session


abort_task = {'summary': 'Abort a running or pending task (DEV)', 'description': '', 'operationId': 'abortTask', 'parameters': [{'name': 'taskID', 'in': 'path', 'description': 'ID of task to abort', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Abort a running or pending task', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'correlationID': {'type': 'string', 'format': 'uuid', 'description': 'The correlationID of this task. The correlationID is set by the requesting client, to allow lookup based on a pre-selected value. If not requested, this value is null.'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was created/enqueued'}, 'executionTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task started executing, or 0 if not started'}, 'finishedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was finished/aborted/failed, or 0 if not finished'}, 'flags': {'type': 'array', 'description': 'Flags for this task', 'items': {'type': 'string', 'description': 'Flags for this task', 'enum': ['hasSubtasks', 'hasFailedSubtasks', 'hasFinalizationStage']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'operation': {'type': 'string', 'description': 'The name of the operation of this task. The operation names are service dependant.'}, 'parentTask': {'type': 'object', 'description': 'Reference to parent task, if this task is a subtask, else this field is null', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}}}, 'responseContext': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Response context map, filled out by worker'}, 'description': 'Response context map, filled out by worker'}, 'responseMessages': {'type': 'array', 'description': 'Response messages from worker', 'items': {'type': 'object', 'description': 'Response messages from worker', 'properties': {'message': {'type': 'string', 'description': 'The message added by the worker'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this message was added'}}}}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'workerHost': {'type': 'string', 'description': 'Name of host where task was executed'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'DEV'}
bulk_assess_task = {'tags': ['events/v2'], 'summary': 'Bulk assess events using a service task (DEV)', 'description': '', 'operationId': 'bulkAssessTask', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'assessment': {'type': 'dict', 'properties': {'associateCase': {'type': 'list', 'description': 'Case IDs that are going to be associated with this event (not required).\nSpecified cases must be readable to the current user and they must belong to same customer as this event.\n', 'items': {'type': 'int', 'description': 'Case IDs that are going to be associated with this event (not required).\nSpecified cases must be readable to the current user and they must belong to same customer as this event.\n'}, 'uniqueItems': True}, 'comment': {'type': 'str', 'description': 'Assessment comment to the event (not required).'}, 'disableFlag': {'type': 'list', 'description': 'Which flags to disable. Overlap with enableFlag will be an invalid request.', 'items': {'type': 'str', 'description': 'Which flags to disable. Overlap with enableFlag will be an invalid request.', 'enum': ['falsePositive', 'notAThreat', 'tuningCandidate', 'followup', 'identifiedThreat', 'acknowledged', 'partiallyAcknowledged']}, 'uniqueItems': True}, 'disassociateCase': {'type': 'list', 'description': 'Case IDs that are going to be disassociated from this event\n(should not overlap with case IDs that are going to be associated with this event, not required).\n', 'items': {'type': 'int', 'description': 'Case IDs that are going to be disassociated from this event\n(should not overlap with case IDs that are going to be associated with this event, not required).\n'}, 'uniqueItems': True}, 'enableFlag': {'type': 'list', 'description': 'Which flags to enable. Overlap with disableFlag will be an invalid request.', 'items': {'type': 'str', 'description': 'Which flags to enable. Overlap with disableFlag will be an invalid request.', 'enum': ['falsePositive', 'notAThreat', 'tuningCandidate', 'followup', 'identifiedThreat', 'acknowledged', 'partiallyAcknowledged']}, 'uniqueItems': True}, 'handledByAnalyst': {'type': 'bool', 'default': False, 'description': 'If true, then the event will be flagged as manually assessed by an analyst.'}, 'newSeverity': {'type': 'str', 'description': 'New severity of the event (if not set, keep current severity).', 'enum': ['low', 'medium', 'high', 'critical']}, 'trigger': {'type': 'list', 'description': 'Set of checks which will be run after assessment (not required).', 'items': {'type': 'str', 'description': 'Set of checks which will be run after assessment (not required).', 'enum': ['slaViolation', 'internalSlaViolation']}, 'uniqueItems': True}}}, 'search': {'type': 'dict', 'properties': {'associatedCase': {'type': 'list', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n', 'items': {'type': 'int', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attack': {'type': 'list', 'description': 'Restrict search to events matching these attack criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Attack criteria limit search depending on the attack that triggered the event.\nThe fields in one AttackCriteria are AND-ed together\n', 'properties': {'alarm': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'signature': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these signatures', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these signatures'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'customer': {'type': 'list', 'description': 'Which customers to search for events for. Search by id or short name', 'items': {'type': 'str', 'description': 'Which customers to search for events for. Search by id or short name'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'domain': {'type': 'list', 'description': 'Restrict search to events with one of these domains set', 'items': {'type': 'str', 'description': 'Restrict search to events with one of these domains set'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'description': 'Restrict search to data before this time (epoch millis)\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'endpoint': {'type': 'list', 'description': 'Restrict search to events with endpoints matching these criteria\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Endpoint criteria limit search depending on the endpoints of the event.\nThe fields in one EndpointCriteria are AND-ed together\n', 'properties': {'countryCode': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code'}, 'uniqueItems': True}, 'endpointFieldStrategy': {'type': 'str', 'default': 'all', 'description': 'Restrict the criterion to match with endpoints of this type', 'enum': ['source', 'destination', 'all']}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'excludeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'ip': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n [format:ip]', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'minMaskBits': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints where the mask bits on the IP no wider than this'}, 'port': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with one of these ports', 'items': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints with one of these ports'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'eventIdentifier': {'type': 'list', 'description': 'Which event identifiers to search for', 'items': {'type': 'str', 'description': 'Which event identifiers to search for'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'excludeFlag': {'type': 'list', 'description': 'Restrict search to events with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with NONE of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict search to events with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with ALL of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'indexEndTimestamp': {'type': 'str', 'description': 'Only search in indexes before or on this day. Defaults to current day.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. "\n+ "See the general integration guide for more details  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'indexStartTimestamp': {'type': 'str', 'description': 'Only search in indexes after or on this day. Defaults to current day.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. "\n+ "See the general integration guide for more details  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'limit': {'type': 'int', 'default': 25, 'description': 'Limit the results to the specified amount. If set to 0 we will include all results matching the query', 'minimum': 0}, 'offset': {'type': 'int', 'default': 0, 'description': 'Skip specified amount of results', 'minimum': 0}, 'productionCustomers': {'type': 'bool', 'description': "Restricts the search to customers that either are, or are not in production.\nIf null we don't filter (default)\nIf true we only return production customers\nIf false, we exclude all production customers\n"}, 'property': {'type': 'list', 'description': 'Restrict search to events with properties matching these criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query.\n', 'items': {'type': 'dict', 'description': 'Property criteria limit search depending on the properties that are set on the event.\n', 'properties': {'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'key': {'type': 'str', 'description': 'The key of the property to search for. If the search will look for the value in any property'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'value': {'type': 'list', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key', 'items': {'type': 'str', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'valueMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'The strategy for deciding if the criteria matches the values', 'enum': ['any', 'all']}, 'valueSearchStrategy': {'type': 'str', 'default': 'exact', 'description': 'The strategy for deciding if the value matches the property', 'enum': ['tokenized', 'exact']}}, 'required': ['valueMatchStrategy', 'valueSearchStrategy']}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'severity': {'type': 'list', 'description': 'Which severities to search for', 'items': {'type': 'str', 'description': 'Which severities to search for', 'enum': ['low', 'medium', 'high', 'critical']}, 'uniqueItems': True}, 'sortBy': {'type': 'list', 'description': 'Which field(s) to sort the results by (default is ascending by createdTimestamp)', 'items': {'type': 'str', 'description': 'Which field(s) to sort the results by (default is ascending by createdTimestamp)', 'enum': ['customerID', 'eventID', 'createdTimestamp', 'lastUpdatedTimestamp', 'firstEventTimestamp', 'lastEventTimestamp', '-customerID', '-eventID', '-createdTimestamp', '-lastUpdatedTimestamp', '-firstEventTimestamp', '-lastEventTimestamp']}}, 'startTimestamp': {'type': 'str', 'description': 'Restrict search to data after this time.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'subCriteria': {'type': 'list', 'description': 'The set of sub criteria to add to the search', 'items': {'type': 'dict', 'description': 'Sub-criteria allow constructing advanced queries with inclusions and exclusions', 'properties': {'associatedCase': {'type': 'list', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n', 'items': {'type': 'int', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attack': {'type': 'list', 'description': 'Restrict search to events matching these attack criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Attack criteria limit search depending on the attack that triggered the event.\nThe fields in one AttackCriteria are AND-ed together\n', 'properties': {'alarm': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'signature': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these signatures', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these signatures'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'customer': {'type': 'list', 'description': 'Which customers to search for events for. Search by id or short name', 'items': {'type': 'str', 'description': 'Which customers to search for events for. Search by id or short name'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'domain': {'type': 'list', 'description': 'Restrict search to events with one of these domains set', 'items': {'type': 'str', 'description': 'Restrict search to events with one of these domains set'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'description': 'Restrict search to data before this time (epoch millis)\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'endpoint': {'type': 'list', 'description': 'Restrict search to events with endpoints matching these criteria\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Endpoint criteria limit search depending on the endpoints of the event.\nThe fields in one EndpointCriteria are AND-ed together\n', 'properties': {'countryCode': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code'}, 'uniqueItems': True}, 'endpointFieldStrategy': {'type': 'str', 'default': 'all', 'description': 'Restrict the criterion to match with endpoints of this type', 'enum': ['source', 'destination', 'all']}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'excludeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'ip': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n [format:ip]', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'minMaskBits': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints where the mask bits on the IP no wider than this'}, 'port': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with one of these ports', 'items': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints with one of these ports'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'eventIdentifier': {'type': 'list', 'description': 'Which event identifiers to search for', 'items': {'type': 'str', 'description': 'Which event identifiers to search for'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this sub criterion'}, 'excludeFlag': {'type': 'list', 'description': 'Restrict search to events with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with NONE of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict search to events with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with ALL of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'productionCustomers': {'type': 'bool', 'description': "Restricts the search to customers that either are, or are not in production.\nIf null we don't filter (default)\nIf true we only return production customers\nIf false, we exclude all production customers\n"}, 'property': {'type': 'list', 'description': 'Restrict search to events with properties matching these criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query.\n', 'items': {'type': 'dict', 'description': 'Property criteria limit search depending on the properties that are set on the event.\n', 'properties': {'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'key': {'type': 'str', 'description': 'The key of the property to search for. If the search will look for the value in any property'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'value': {'type': 'list', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key', 'items': {'type': 'str', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'valueMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'The strategy for deciding if the criteria matches the values', 'enum': ['any', 'all']}, 'valueSearchStrategy': {'type': 'str', 'default': 'exact', 'description': 'The strategy for deciding if the value matches the property', 'enum': ['tokenized', 'exact']}}, 'required': ['valueMatchStrategy', 'valueSearchStrategy']}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this sub criterion.\nIf false the search only needs to match at least one sub criterion.\n'}, 'severity': {'type': 'list', 'description': 'Which severities to search for', 'items': {'type': 'str', 'description': 'Which severities to search for', 'enum': ['low', 'medium', 'high', 'critical']}, 'uniqueItems': True}, 'startTimestamp': {'type': 'str', 'description': 'Restrict search to data after this time.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'timeFieldStrategy': {'type': 'list', 'description': 'Which time fields to search for', 'items': {'type': 'str', 'description': 'Which time fields to search for', 'enum': ['created', 'lastUpdated', 'firstAssessment', 'enginePersisted', 'firstEvent', 'lastEvent', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Which time match strategy to use. Defaults to matching if any', 'enum': ['any', 'all']}, 'type': 'list'}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'timeFieldStrategy': {'type': 'list', 'description': 'Which time fields to search for', 'items': {'type': 'str', 'description': 'Which time fields to search for', 'enum': ['created', 'lastUpdated', 'firstAssessment', 'enginePersisted', 'firstEvent', 'lastEvent', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Which time match strategy to use. Defaults to matching if any', 'enum': ['any', 'all']}, 'type': 'list'}}}, 'required': ['assessment', 'search']}}}, 'required': True}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}}}, '201': {'description': 'Bulk assess events using a service task', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The response from creating an assessment task', 'properties': {'taskID': {'type': 'string', 'format': 'uuid', 'description': 'The ID of the assessment task'}}}}}}, 'text/csv': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The response from creating an assessment task', 'properties': {'taskID': {'type': 'string', 'format': 'uuid', 'description': 'The ID of the assessment task'}}}}}}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The response from creating an assessment task', 'properties': {'taskID': {'type': 'string', 'format': 'uuid', 'description': 'The ID of the assessment task'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}}}}, 'x-Argus-Required-Permissions': ['assessEvents'], 'x-Argus-ApiStatus': 'DEV'}
customer_prune_task_status = {'tags': ['events/v2'], 'summary': 'Returns the status of a customer prune task (DEV)', 'description': '', 'operationId': 'customerPruneTaskStatus', 'parameters': [{'name': 'taskID', 'in': 'path', 'description': 'Task ID', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Returns the status of a customer prune task', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The response from creating a customer prune task', 'properties': {'cassandraTaskStatus': {'type': 'object', 'description': 'The status of the cassandra customer prune tasks', 'properties': {'aborted': {'type': 'integer', 'format': 'int64'}, 'done': {'type': 'integer', 'format': 'int64'}, 'failed': {'type': 'integer', 'format': 'int64'}, 'pending': {'type': 'integer', 'format': 'int64'}, 'running': {'type': 'integer', 'format': 'int64'}, 'state': {'type': 'string', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'total': {'type': 'integer', 'format': 'int64'}}}, 'openSearchTaskStatus': {'type': 'object', 'description': 'The status of the open search customer prune tasks', 'properties': {'aborted': {'type': 'integer', 'format': 'int64'}, 'deletedEvents': {'type': 'integer', 'format': 'int64'}, 'done': {'type': 'integer', 'format': 'int64'}, 'failed': {'type': 'integer', 'format': 'int64'}, 'pending': {'type': 'integer', 'format': 'int64'}, 'running': {'type': 'integer', 'format': 'int64'}, 'state': {'type': 'string', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'total': {'type': 'integer', 'format': 'int64'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewEventServiceTask'], 'x-Argus-ApiStatus': 'DEV'}
get_task = {'summary': 'List status for service tasks (DEV)', 'description': '', 'operationId': 'getTask', 'parameters': [{'name': 'taskID', 'in': 'path', 'description': 'ID of task to fetch', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'List status for service tasks', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'correlationID': {'type': 'string', 'format': 'uuid', 'description': 'The correlationID of this task. The correlationID is set by the requesting client, to allow lookup based on a pre-selected value. If not requested, this value is null.'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was created/enqueued'}, 'executionTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task started executing, or 0 if not started'}, 'finishedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was finished/aborted/failed, or 0 if not finished'}, 'flags': {'type': 'array', 'description': 'Flags for this task', 'items': {'type': 'string', 'description': 'Flags for this task', 'enum': ['hasSubtasks', 'hasFailedSubtasks', 'hasFinalizationStage']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'operation': {'type': 'string', 'description': 'The name of the operation of this task. The operation names are service dependant.'}, 'parentTask': {'type': 'object', 'description': 'Reference to parent task, if this task is a subtask, else this field is null', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}}}, 'responseContext': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Response context map, filled out by worker'}, 'description': 'Response context map, filled out by worker'}, 'responseMessages': {'type': 'array', 'description': 'Response messages from worker', 'items': {'type': 'object', 'description': 'Response messages from worker', 'properties': {'message': {'type': 'string', 'description': 'The message added by the worker'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this message was added'}}}}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'workerHost': {'type': 'string', 'description': 'Name of host where task was executed'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'DEV'}
list_tasks = {'summary': 'List status for service tasks (DEV)', 'description': '', 'operationId': 'listTasks', 'parameters': [{'name': 'state', 'in': 'query', 'description': 'Filter results by state', 'schema': {'type': 'list', 'items': {'type': 'str', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'str', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'uniqueItems': True}, {'name': 'operation', 'in': 'query', 'description': 'Filter results by operation (service dependant)', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'user', 'in': 'query', 'description': 'Filter results by user (id or shortname)', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'parentTask', 'in': 'query', 'description': 'Filter results by parent task ID', 'schema': {'type': 'list', 'items': {'type': 'str'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'str'}, 'uniqueItems': True}, {'name': 'limit', 'in': 'query', 'description': 'Limit number of results', 'schema': {'type': 'int', 'default': '25'}, 'type': 'int', 'default': '25'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0'}, 'type': 'int', 'default': '0'}], 'responses': {'default': {'description': 'List status for service tasks', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'correlationID': {'type': 'string', 'format': 'uuid', 'description': 'The correlationID of this task. The correlationID is set by the requesting client, to allow lookup based on a pre-selected value. If not requested, this value is null.'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was created/enqueued'}, 'executionTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task started executing, or 0 if not started'}, 'finishedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was finished/aborted/failed, or 0 if not finished'}, 'flags': {'type': 'array', 'description': 'Flags for this task', 'items': {'type': 'string', 'description': 'Flags for this task', 'enum': ['hasSubtasks', 'hasFailedSubtasks', 'hasFinalizationStage']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'operation': {'type': 'string', 'description': 'The name of the operation of this task. The operation names are service dependant.'}, 'parentTask': {'type': 'object', 'description': 'Reference to parent task, if this task is a subtask, else this field is null', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}}}, 'responseContext': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Response context map, filled out by worker'}, 'description': 'Response context map, filled out by worker'}, 'responseMessages': {'type': 'array', 'description': 'Response messages from worker', 'items': {'type': 'object', 'description': 'Response messages from worker', 'properties': {'message': {'type': 'string', 'description': 'The message added by the worker'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this message was added'}}}}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'workerHost': {'type': 'string', 'description': 'Name of host where task was executed'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'DEV'}
reindex_search = {'tags': ['events/v2'], 'summary': 'Creates a reindexing task which will reindex events into OpenSearch (DEV)', 'description': '', 'operationId': 'reindexSearch', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Creates a long living reindexing task, which will reindex all events for the provided customers and time period\n', 'properties': {'customer': {'type': 'list', 'description': 'The indexing task will index events belonging to the provided customers, or all customers if left empty', 'items': {'type': 'str', 'description': 'The indexing task will index events belonging to the provided customers, or all customers if left empty'}, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'description': 'The indexing task will reindex events before this time (epoch millis). Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'startTimestamp': {'type': 'str', 'description': 'The indexing task will reindex events after this time (epoch millis). Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}}}}}, 'required': True}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}}}, '201': {'description': 'Creates a reindexing task which will reindex events into OpenSearch', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The response from creating a reindexing task', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of the reindexing task'}}}}}}, 'text/csv': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The response from creating a reindexing task', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of the reindexing task'}}}}}}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The response from creating a reindexing task', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of the reindexing task'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}}}}, 'x-Argus-Required-Permissions': ['eventReindex'], 'x-Argus-ApiStatus': 'DEV'}
reindex_search_status = {'tags': ['events/v2'], 'summary': 'Returns the status of a search reindexing task (DEV)', 'description': '', 'operationId': 'reindexSearchStatus', 'parameters': [{'name': 'taskID', 'in': 'path', 'description': 'Task ID', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Returns the status of a search reindexing task', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The response from creating a reindexing task', 'properties': {'aborted': {'type': 'integer', 'format': 'int64', 'description': 'The number of aborted subtasks'}, 'done': {'type': 'integer', 'format': 'int64', 'description': 'The number of subtasks that are completed'}, 'failed': {'type': 'integer', 'format': 'int64', 'description': 'The number of failed subtasks'}, 'indexed': {'type': 'integer', 'format': 'int64', 'description': 'The number of indexed events'}, 'pending': {'type': 'integer', 'format': 'int64', 'description': 'The number of subtasks that are pending start'}, 'running': {'type': 'integer', 'format': 'int64', 'description': 'The number of running subtasks'}, 'state': {'type': 'string', 'description': 'The current state of the task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}}}}}}, 'text/csv': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The response from creating a reindexing task', 'properties': {'aborted': {'type': 'integer', 'format': 'int64', 'description': 'The number of aborted subtasks'}, 'done': {'type': 'integer', 'format': 'int64', 'description': 'The number of subtasks that are completed'}, 'failed': {'type': 'integer', 'format': 'int64', 'description': 'The number of failed subtasks'}, 'indexed': {'type': 'integer', 'format': 'int64', 'description': 'The number of indexed events'}, 'pending': {'type': 'integer', 'format': 'int64', 'description': 'The number of subtasks that are pending start'}, 'running': {'type': 'integer', 'format': 'int64', 'description': 'The number of running subtasks'}, 'state': {'type': 'string', 'description': 'The current state of the task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}}}}}}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The response from creating a reindexing task', 'properties': {'aborted': {'type': 'integer', 'format': 'int64', 'description': 'The number of aborted subtasks'}, 'done': {'type': 'integer', 'format': 'int64', 'description': 'The number of subtasks that are completed'}, 'failed': {'type': 'integer', 'format': 'int64', 'description': 'The number of failed subtasks'}, 'indexed': {'type': 'integer', 'format': 'int64', 'description': 'The number of indexed events'}, 'pending': {'type': 'integer', 'format': 'int64', 'description': 'The number of subtasks that are pending start'}, 'running': {'type': 'integer', 'format': 'int64', 'description': 'The number of running subtasks'}, 'state': {'type': 'string', 'description': 'The current state of the task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}}}}, 'x-Argus-Required-Permissions': ['viewEventServiceTask'], 'x-Argus-ApiStatus': 'DEV'}
search_tasks = {'summary': 'List status for service tasks (DEV)', 'description': '', 'operationId': 'searchTasks', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'correlationID': {'type': 'list', 'description': 'Filter tasks by task correlation ID', 'items': {'type': 'str', 'description': 'Filter tasks by task correlation ID'}, 'uniqueItems': True}, 'endTimestamp': {'type': 'int', 'description': 'Filter tasks with selected time fields before this timestamp.'}, 'limit': {'type': 'int', 'minimum': 0}, 'offset': {'type': 'int', 'minimum': 0}, 'operation': {'type': 'list', 'description': 'Filter tasks by operation name. Valid operations are service dependant.', 'items': {'type': 'str', 'description': 'Filter tasks by operation name. Valid operations are service dependant.'}, 'uniqueItems': True}, 'parentTask': {'type': 'list', 'description': 'Filter tasks by parent task ID', 'items': {'type': 'str', 'description': 'Filter tasks by parent task ID'}, 'uniqueItems': True}, 'startTimestamp': {'type': 'int', 'description': 'Filter tasks with selected time fields after this timestamp.'}, 'state': {'type': 'list', 'description': 'Filter tasks by state.', 'items': {'type': 'str', 'description': 'Filter tasks by state.', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'uniqueItems': True}, 'timeFieldStrategy': {'type': 'list', 'description': "Select which time fields to use for time search. Defaults to 'all'", 'items': {'type': 'str', 'description': "Select which time fields to use for time search. Defaults to 'all'", 'enum': ['all', 'createdTimestamp', 'executionTimestamp', 'finishedTimestamp']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'description': "Select if any or all time fields must match time search. Defaults to 'any'.", 'enum': ['any', 'all']}, 'user': {'type': 'list', 'description': 'Filter tasks by creating user (id or shortname).', 'items': {'type': 'str', 'description': 'Filter tasks by creating user (id or shortname).'}, 'uniqueItems': True}}}}}, 'required': True}, 'responses': {'default': {'description': 'List status for service tasks', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'correlationID': {'type': 'string', 'format': 'uuid', 'description': 'The correlationID of this task. The correlationID is set by the requesting client, to allow lookup based on a pre-selected value. If not requested, this value is null.'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was created/enqueued'}, 'executionTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task started executing, or 0 if not started'}, 'finishedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was finished/aborted/failed, or 0 if not finished'}, 'flags': {'type': 'array', 'description': 'Flags for this task', 'items': {'type': 'string', 'description': 'Flags for this task', 'enum': ['hasSubtasks', 'hasFailedSubtasks', 'hasFinalizationStage']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'operation': {'type': 'string', 'description': 'The name of the operation of this task. The operation names are service dependant.'}, 'parentTask': {'type': 'object', 'description': 'Reference to parent task, if this task is a subtask, else this field is null', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}}}, 'responseContext': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Response context map, filled out by worker'}, 'description': 'Response context map, filled out by worker'}, 'responseMessages': {'type': 'array', 'description': 'Response messages from worker', 'items': {'type': 'object', 'description': 'Response messages from worker', 'properties': {'message': {'type': 'string', 'description': 'The message added by the worker'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this message was added'}}}}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'workerHost': {'type': 'string', 'description': 'Name of host where task was executed'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'DEV'}