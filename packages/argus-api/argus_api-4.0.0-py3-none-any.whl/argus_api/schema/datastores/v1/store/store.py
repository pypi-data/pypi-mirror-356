"""Autogenerated API schema"""
from argus_api import session


delete_data_store_entries = {'tags': ['datastores/v1'], 'summary': 'Deletes the provided datastore entries from the specified store. (PUBLIC)', 'description': "This operation marks entries as deleted. They are not permanently removed and can be retrieved using the 'includeDeleted' parameter.", 'operationId': 'deleteDataStoreEntries', 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'key', 'in': 'query', 'description': 'Entries to delete from the specified store', 'required': True, 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'customerID', 'in': 'query', 'description': "Customer the entries belong to (defaults to the user's customer)", 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}], 'responses': {'default': {'description': 'Deletes the provided datastore entries from the specified store.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'A datastore entry is one item stored inside a datastore.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'dataStoreName': {'type': 'string', 'description': 'Name of the datastore this entry belongs to.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'flags': {'type': 'array', 'description': 'Flags assigned to the object.', 'items': {'type': 'string', 'description': 'Flags assigned to the object.', 'enum': ['DELETED']}, 'uniqueItems': True}, 'key': {'type': 'string', 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this entry.'}, 'value': {'type': 'string', 'description': "An entry's value if the datastore is of type MAP, or unset if the datastore is of type LIST."}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Datastore not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateDataStoreEntry'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_entries_from_store = {'tags': ['datastores/v1'], 'summary': 'Returns datastore entries for the specified store, matching the search criteria. (PUBLIC)', 'description': '', 'operationId': 'getEntriesFromStore', 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Criteria to search for entries inside one datastore.', 'properties': {'limit': {'type': 'int', 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'subCriteria': {'type': 'list', 'description': 'Set additional criterias which are applied using a logical OR.', 'items': {'type': 'dict', 'description': 'Criteria to search for entries inside one datastore.', 'properties': {'limit': {'type': 'int', 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'subCriteria': {'type': 'list', 'description': 'Set additional criterias which are applied using a logical OR.', 'items': [], 'uniqueItems': True}, 'exclude': {'type': 'bool', 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'customerID': {'type': 'list', 'description': 'Restrict search to data belonging to specified customers.', 'items': {'type': 'int', 'description': 'Restrict search to data belonging to specified customers.'}, 'uniqueItems': True}, 'userID': {'type': 'list', 'description': 'Restrict search to entries which were last updated by specified users.', 'items': {'type': 'int', 'description': 'Restrict search to entries which were last updated by specified users.'}, 'uniqueItems': True}, 'key': {'type': 'list', 'description': 'Restrict search to entries with the specified keys.', 'items': {'type': 'str', 'description': 'Restrict search to entries with the specified keys.'}, 'uniqueItems': True}, 'fromKey': {'type': 'str', 'description': 'Restrict search to entries (map keys) which are greater than this key (including, by lexical order).'}, 'toKey': {'type': 'str', 'description': 'Restrict search to entries (map keys) which are less than this key (including, by lexical order).'}, 'startTimestamp': {'type': 'str', 'description': 'Restrict search to entries which were last updated after this timestamp (including). Allows unix timestamp (milliseconds), ISO timestamp, or relative time notation. See https://docs.mnemonic.no/x/AQDXAQ  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'endTimestamp': {'type': 'str', 'description': 'Restrict search to entries which were last updated before this timestamp (including). Allows unix timestamp (milliseconds), ISO timestamp, or relative time notation. See https://docs.mnemonic.no/x/AQDXAQ  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'countTimeout': {'type': 'int', 'default': 0, 'description': 'Max wait in seconds for the count query to run. Set the value to -1 to skip counting (count will be returned -1). Set the value to 0 to execute the count query as long as the service allows, max allowed timeout value is 30 (seconds), default value is 0.', 'maximum': 30, 'minimum': -1}, 'sortBy': {'type': 'list', 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'enum': ['key', 'lastUpdatedTimestamp', '-key', '-lastUpdatedTimestamp']}}, 'includeFlags': {'type': 'list', 'description': 'Only include objects which have includeFlags set.', 'items': {'type': 'str', 'description': 'Only include objects which have includeFlags set.', 'enum': ['DELETED']}, 'uniqueItems': True}, 'excludeFlags': {'type': 'list', 'description': 'Exclude objects which have excludeFlags set.', 'items': {'type': 'str', 'description': 'Exclude objects which have excludeFlags set.', 'enum': ['DELETED']}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'customerID': {'type': 'list', 'description': 'Restrict search to data belonging to specified customers.', 'items': {'type': 'int', 'description': 'Restrict search to data belonging to specified customers.'}, 'uniqueItems': True}, 'userID': {'type': 'list', 'description': 'Restrict search to entries which were last updated by specified users.', 'items': {'type': 'int', 'description': 'Restrict search to entries which were last updated by specified users.'}, 'uniqueItems': True}, 'key': {'type': 'list', 'description': 'Restrict search to entries with the specified keys.', 'items': {'type': 'str', 'description': 'Restrict search to entries with the specified keys.'}, 'uniqueItems': True}, 'fromKey': {'type': 'str', 'description': 'Restrict search to entries (map keys) which are greater than this key (including, by lexical order).'}, 'toKey': {'type': 'str', 'description': 'Restrict search to entries (map keys) which are less than this key (including, by lexical order).'}, 'startTimestamp': {'type': 'str', 'description': 'Restrict search to entries which were last updated after this timestamp (including). Allows unix timestamp (milliseconds), ISO timestamp, or relative time notation. See https://docs.mnemonic.no/x/AQDXAQ  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'endTimestamp': {'type': 'str', 'description': 'Restrict search to entries which were last updated before this timestamp (including). Allows unix timestamp (milliseconds), ISO timestamp, or relative time notation. See https://docs.mnemonic.no/x/AQDXAQ  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'countTimeout': {'type': 'int', 'default': 0, 'description': 'Max wait in seconds for the count query to run. Set the value to -1 to skip counting (count will be returned -1). Set the value to 0 to execute the count query as long as the service allows, max allowed timeout value is 30 (seconds), default value is 0.', 'maximum': 30, 'minimum': -1}, 'sortBy': {'type': 'list', 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'enum': ['key', 'lastUpdatedTimestamp', '-key', '-lastUpdatedTimestamp']}}, 'includeFlags': {'type': 'list', 'description': 'Only include objects which have includeFlags set.', 'items': {'type': 'str', 'description': 'Only include objects which have includeFlags set.', 'enum': ['DELETED']}, 'uniqueItems': True}, 'excludeFlags': {'type': 'list', 'description': 'Exclude objects which have excludeFlags set.', 'items': {'type': 'str', 'description': 'Exclude objects which have excludeFlags set.', 'enum': ['DELETED']}, 'uniqueItems': True}}}}}, 'required': True}, 'responses': {'default': {'description': 'Returns datastore entries for the specified store, matching the search criteria.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'A datastore entry is one item stored inside a datastore.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'dataStoreName': {'type': 'string', 'description': 'Name of the datastore this entry belongs to.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'flags': {'type': 'array', 'description': 'Flags assigned to the object.', 'items': {'type': 'string', 'description': 'Flags assigned to the object.', 'enum': ['DELETED']}, 'uniqueItems': True}, 'key': {'type': 'string', 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this entry.'}, 'value': {'type': 'string', 'description': "An entry's value if the datastore is of type MAP, or unset if the datastore is of type LIST."}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Datastore not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewDataStoreEntry'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_entries_from_store_simplified = {'tags': ['datastores/v1'], 'summary': 'Returns datastore entries for the specified store, matching query parameters. (PUBLIC)', 'description': '', 'operationId': 'getEntriesFromStoreSimplified', 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'customerID', 'in': 'query', 'description': 'Limit search to entries belonging to the specified customers', 'schema': {'type': 'list', 'items': {'type': 'int'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'int'}, 'uniqueItems': True}, {'name': 'key', 'in': 'query', 'description': 'Limit search to the specified entry keys', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'includeDeleted', 'in': 'query', 'description': 'Include deleted/expired entries', 'schema': {'type': 'bool', 'default': 'false'}, 'type': 'bool', 'default': 'false'}], 'responses': {'default': {'description': 'Returns datastore entries for the specified store, matching query parameters.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'A datastore entry is one item stored inside a datastore.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'dataStoreName': {'type': 'string', 'description': 'Name of the datastore this entry belongs to.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'flags': {'type': 'array', 'description': 'Flags assigned to the object.', 'items': {'type': 'string', 'description': 'Flags assigned to the object.', 'enum': ['DELETED']}, 'uniqueItems': True}, 'key': {'type': 'string', 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this entry.'}, 'value': {'type': 'string', 'description': "An entry's value if the datastore is of type MAP, or unset if the datastore is of type LIST."}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Datastore not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewDataStoreEntry'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_single_entry = {'tags': ['datastores/v1'], 'summary': 'Returns the specified datastore entry for the specified store, or null if it does not exist (PUBLIC)', 'description': '', 'operationId': 'getSingleEntry', 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'key', 'in': 'path', 'description': 'Key to identify entry', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'customerID', 'in': 'query', 'description': "Customer the entry belongs to (defaults to the user's customer)", 'schema': {'type': 'int'}, 'type': 'int'}, {'name': 'includeDeleted', 'in': 'query', 'description': 'Return deleted/expired entry', 'schema': {'type': 'bool', 'default': 'false'}, 'type': 'bool', 'default': 'false'}], 'responses': {'default': {'description': 'Returns the specified datastore entry for the specified store, or null if it does not exist', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'A datastore entry is one item stored inside a datastore.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'dataStoreName': {'type': 'string', 'description': 'Name of the datastore this entry belongs to.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'flags': {'type': 'array', 'description': 'Flags assigned to the object.', 'items': {'type': 'string', 'description': 'Flags assigned to the object.', 'enum': ['DELETED']}, 'uniqueItems': True}, 'key': {'type': 'string', 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this entry.'}, 'value': {'type': 'string', 'description': "An entry's value if the datastore is of type MAP, or unset if the datastore is of type LIST."}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Datastore not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewDataStoreEntry'], 'x-Argus-ApiStatus': 'PUBLIC'}
put_data_store_entries = {'tags': ['datastores/v1'], 'summary': 'Adds or updates the provided datastore entries for the specified store. (PUBLIC)', 'description': 'Previously unknown entries will be added to the store. The value of existing entries will be updated.', 'operationId': 'putDataStoreEntries', 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request to add/update multiple entries of a datastore.', 'properties': {'customerID': {'type': 'int', 'description': "Entries will be bound to the provided customer. If not set, defaults to bind to the current user's customer (or none, if the datastore is global).", 'minimum': 0}, 'entries': {'type': 'list', 'description': 'Entries to add/update. If an entry for a given customer and key already exists the entry will be updated. Otherwise, a new entry will be added.', 'items': {'type': 'dict', 'description': 'Add/update a single entry of a datastore.', 'properties': {'entry': {'type': 'str', 'writeOnly': True}, 'key': {'type': 'str', 'description': 'List entry or map key.', 'maxLength': 255, 'minLength': 0}, 'value': {'type': 'str', 'description': 'Map value. Not valid when writing entries to datastores of type LIST.', 'maxLength': 2048, 'minLength': 0}}, 'required': ['key']}, 'maxItems': 2147483647, 'minItems': 1, 'uniqueItems': True}}, 'required': ['entries']}}}, 'required': True}, 'responses': {'default': {'description': 'Adds or updates the provided datastore entries for the specified store.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'A datastore entry is one item stored inside a datastore.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'dataStoreName': {'type': 'string', 'description': 'Name of the datastore this entry belongs to.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'flags': {'type': 'array', 'description': 'Flags assigned to the object.', 'items': {'type': 'string', 'description': 'Flags assigned to the object.', 'enum': ['DELETED']}, 'uniqueItems': True}, 'key': {'type': 'string', 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this entry.'}, 'value': {'type': 'string', 'description': "An entry's value if the datastore is of type MAP, or unset if the datastore is of type LIST."}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Datastore not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateDataStoreEntry'], 'x-Argus-ApiStatus': 'PUBLIC'}
put_single_data_store_list_entry = {'tags': ['datastores/v1'], 'summary': 'Adds the provided datastore entry to the specified store. (PUBLIC)', 'description': 'This operation should only be used with datastores of type LIST.', 'operationId': 'putSingleDataStoreListEntry', 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'key', 'in': 'path', 'description': 'Entry to add to the specified store', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'customerID', 'in': 'query', 'description': "Customer the entry belongs to (defaults to the user's customer)", 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}], 'responses': {'default': {'description': 'Adds the provided datastore entry to the specified store.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'dataStoreName': {'type': 'string', 'description': 'Name of the datastore this entry belongs to.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'flags': {'type': 'array', 'description': 'Flags assigned to the object.', 'items': {'type': 'string', 'description': 'Flags assigned to the object.', 'enum': ['DELETED']}, 'uniqueItems': True}, 'key': {'type': 'string', 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this entry.'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Datastore not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateDataStoreEntry'], 'x-Argus-ApiStatus': 'PUBLIC'}
put_single_data_store_map_entry = {'tags': ['datastores/v1'], 'summary': 'Updates the provided datastore entry for the specified store. (PUBLIC)', 'description': 'This operation should only be used with datastores of type MAP.', 'operationId': 'putSingleDataStoreMapEntry', 'parameters': [{'name': 'dataStore', 'in': 'path', 'description': 'Store name', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'key', 'in': 'path', 'description': 'Key to identify entry', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'value', 'in': 'path', 'description': 'Value to set for the specified entry', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'customerID', 'in': 'query', 'description': "Customer the entry belongs to (defaults to the user's customer)", 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}], 'responses': {'default': {'description': 'Updates the provided datastore entry for the specified store.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'A datastore entry is one item stored inside a datastore.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'dataStoreName': {'type': 'string', 'description': 'Name of the datastore this entry belongs to.'}, 'flag': {'type': 'integer', 'format': 'int64', 'writeOnly': True}, 'flags': {'type': 'array', 'description': 'Flags assigned to the object.', 'items': {'type': 'string', 'description': 'Flags assigned to the object.', 'enum': ['DELETED']}, 'uniqueItems': True}, 'key': {'type': 'string', 'description': "An entry's key if the datastore is of type MAP, or a list entry if the datastore is of type LIST."}, 'lastUpdatedByUser': {'type': 'object', 'description': 'Information about the user who performed the last update of this entry.', 'properties': {'customer': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}, 'customerID': {'type': 'integer', 'format': 'int64'}, 'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}, 'userName': {'type': 'string'}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for the last update of this entry.'}, 'value': {'type': 'string', 'description': "An entry's value if the datastore is of type MAP, or unset if the datastore is of type LIST."}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Datastore not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateDataStoreEntry'], 'x-Argus-ApiStatus': 'PUBLIC'}