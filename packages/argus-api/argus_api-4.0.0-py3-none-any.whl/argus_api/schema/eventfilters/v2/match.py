"""Autogenerated API schema"""
from argus_api import session


add_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Adds a match filter (INTERNAL)', 'description': '', 'operationId': 'addMatchFilter', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to add a match filter', 'properties': {'actions': {'type': 'dict', 'properties': {'associatedCaseID': {'type': 'int', 'description': 'Adds an associated case ID'}, 'changeAggregationKey': {'type': 'bool', 'default': False, 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'bool', 'default': False, 'description': 'If true, this filter will continue to look for new events after transform'}, 'disableCompileStaticValidation': {'type': 'bool', 'default': False, 'description': 'If true, we will skip static validation of the transformCode'}, 'drop': {'type': 'bool', 'default': False, 'description': 'If true, this event will be dropped'}, 'dropRaw': {'type': 'bool', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'bool', 'default': False, 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'str', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'int', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'str', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'int', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'bool', 'default': False, 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'bool', 'default': False, 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'str', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'customer': {'type': 'str', 'description': "The shortname or ID of the customer the filter belongs to. To create a global filter set the value to '0'"}, 'description': {'type': 'str', 'description': 'A description of the filter'}, 'enabled': {'type': 'bool', 'default': False, 'description': 'Whether or not the filter is enabled'}, 'eventType': {'type': 'str', 'description': "What type of event the filter should match against. Type raw will create a NIDSEventMatchFilter in v1, aggregated will create a AggregatedIPAttackEventMatchFilter, and all will create a IPAttackEventMatchFilter. Defaults to 'all'", 'enum': ['raw', 'aggregated', 'all']}, 'filters': {'type': 'dict', 'properties': {'matchCode': {'type': 'str', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend'}, 'disableCompileStaticValidation': {'type': 'bool', 'default': False, 'description': 'If true, we will skip static validation of the matchCode'}, 'minSeverity': {'type': 'str', 'description': 'Only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'maxSeverity': {'type': 'str', 'description': 'Only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'includeEventFlags': {'type': 'list', 'description': 'Only match events that have these flags', 'items': {'type': 'str', 'description': 'Only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'excludeEventFlags': {'type': 'list', 'description': 'Only match events that does not have any of these flags', 'items': {'type': 'str', 'description': 'Only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'protocol': {'type': 'str', 'description': 'Only match events with the provided protocol'}, 'domainPattern': {'type': 'str', 'description': 'Only match events where the domain matches this regex'}, 'uriPattern': {'type': 'str', 'description': 'Only match events where the uri matches this regex'}, 'sourceIPAddresses': {'type': 'list', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'sourcePorts': {'type': 'list', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'int', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'list', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'destinationPorts': {'type': 'list', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'int', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'list', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'sourceOrDestinationPorts': {'type': 'list', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'int', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'location': {'type': 'list', 'description': 'Only match events from the these locations, given by shortname or id', 'items': {'type': 'str', 'description': 'Only match events from the these locations, given by shortname or id'}, 'uniqueItems': True}, 'signature': {'type': 'list', 'description': 'Only match events with these signatures', 'items': {'type': 'str', 'description': 'Only match events with these signatures'}, 'uniqueItems': True}, 'alarmID': {'type': 'list', 'description': 'Only match events connected to these alarms, given by id', 'items': {'type': 'int', 'description': 'Only match events connected to these alarms, given by id'}, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Only match events belonging to these attack categories, given by shortname or id', 'items': {'type': 'str', 'description': 'Only match events belonging to these attack categories, given by shortname or id'}, 'uniqueItems': True}, 'properties': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Only match events which have these properties'}, 'description': 'Only match events which have these properties'}, 'alarm': {'type': 'dict', 'properties': {'matchCode': {'type': 'str', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend'}, 'disableCompileStaticValidation': {'type': 'bool', 'default': False, 'description': 'If true, we will skip static validation of the matchCode'}, 'minSeverity': {'type': 'str', 'description': 'Only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'maxSeverity': {'type': 'str', 'description': 'Only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'includeEventFlags': {'type': 'list', 'description': 'Only match events that have these flags', 'items': {'type': 'str', 'description': 'Only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'excludeEventFlags': {'type': 'list', 'description': 'Only match events that does not have any of these flags', 'items': {'type': 'str', 'description': 'Only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'protocol': {'type': 'str', 'description': 'Only match events with the provided protocol'}, 'domainPattern': {'type': 'str', 'description': 'Only match events where the domain matches this regex'}, 'uriPattern': {'type': 'str', 'description': 'Only match events where the uri matches this regex'}, 'sourceIPAddresses': {'type': 'list', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'sourcePorts': {'type': 'list', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'int', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'list', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'destinationPorts': {'type': 'list', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'int', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'list', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'sourceOrDestinationPorts': {'type': 'list', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'int', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'location': {'type': 'list', 'description': 'Only match events from the these locations, given by shortname or id', 'items': {'type': 'str', 'description': 'Only match events from the these locations, given by shortname or id'}, 'uniqueItems': True}, 'signature': {'type': 'list', 'description': 'Only match events with these signatures', 'items': {'type': 'str', 'description': 'Only match events with these signatures'}, 'uniqueItems': True}, 'alarmID': {'type': 'list', 'description': 'Only match events connected to these alarms, given by id', 'items': {'type': 'int', 'description': 'Only match events connected to these alarms, given by id'}, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Only match events belonging to these attack categories, given by shortname or id', 'items': {'type': 'str', 'description': 'Only match events belonging to these attack categories, given by shortname or id'}, 'uniqueItems': True}, 'properties': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Only match events which have these properties'}, 'description': 'Only match events which have these properties'}, 'alarm': []}}}}, 'index': {'type': 'int', 'default': 5, 'description': 'The index of the filter. Filters with lower index will be ran first.', 'maximum': 10, 'minimum': 0}, 'labels': {'type': 'list', 'description': 'A set of labels which can be used to categorize the filter', 'items': {'type': 'str', 'description': 'A set of labels which can be used to categorize the filter'}, 'uniqueItems': True}, 'name': {'type': 'str', 'description': 'The name of the filter'}, 'validFrom': {'type': 'str', 'default': '0', 'description': 'When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'validTo': {'type': 'str', 'default': '0', 'description': 'When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}}, 'required': ['actions', 'customer', 'description', 'eventType', 'filters', 'name']}}}, 'required': True}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Adds a match filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': "Match filters compare events against a set of criteria.\nIf the criteria match then one or more actions will be performed on the event.\nPossible actions are:\n  * drop - If the drop action is added, the event is dropped and won't be sent forward\n  * newSeverity - If newSeverity is set, the severity of the event is set to the new value\n  * newAggregationKey - If newAggregationKey is set, then the aggregation key is set to the new value\n  * newSourceAggregationBits - If newSourceAggregationBits is set, the aggregation bits for the source IP is\n    set to the selected value\n  * newDestinationAggregationBits - If newDestinationAggregationBits is set, the aggregation bits for the\n    destination IP is set to the selected value\n  * transformCode - If transformCode is set, the groovy code is run is run on the event. Should return the\n    transformed event\n  * continueAfterTransform - If continueAfterTransform is set, the filter matcher will continue looking for\n    matching filters\n\nBoth matchCode and transformCode implement methods with the following parameters\n  * event: The event to transform or check for match\n  * filter: The match filter itself\n", 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be performed on the event', 'properties': {'associatedCaseID': {'type': 'integer', 'format': 'int64', 'description': 'The case this filter is associated with'}, 'changeAggregationKey': {'type': 'boolean', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'boolean', 'description': 'If true, this filter will continue to look for new events after transform'}, 'drop': {'type': 'boolean', 'description': "If true, the event is dropped and won't be sent forward"}, 'dropRaw': {'type': 'boolean', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'boolean', 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'string', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'string', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'boolean', 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'boolean', 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'string', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was modified'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filterType': {'type': 'string', 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'alarm': {'type': 'array', 'description': 'Will only match events connected to these alarms', 'items': {'type': 'object', 'description': 'Will only match events connected to these alarms', 'properties': {'description': {'type': 'string', 'description': 'The description of the alarm'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the alarm'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the alarm'}}}, 'uniqueItems': True}, 'attackCategory': {'type': 'array', 'description': 'Will only match events belonging to these attack categories', 'items': {'type': 'object', 'description': 'Will only match events belonging to these attack categories', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the category.'}, 'info': {'type': 'string', 'description': 'Short information about the category.'}, 'name': {'type': 'string', 'description': 'Name of the category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the category.'}}}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'array', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'array', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'domainPattern': {'type': 'string', 'description': 'Will only match events where the domain matches this regex'}, 'excludeEventFlags': {'type': 'array', 'description': 'Will only match events that does not have any of these flags', 'items': {'type': 'string', 'description': 'Will only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeEventFlags': {'type': 'array', 'description': 'Will only match events that have these flags', 'items': {'type': 'string', 'description': 'Will only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'location': {'type': 'array', 'description': 'Will only match events from the these locations', 'items': {'type': 'object', 'description': 'Will only match events from the these locations', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the Location'}, 'name': {'type': 'string', 'description': 'The name of the Location'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the Location'}}}, 'uniqueItems': True}, 'matchCode': {'type': 'string', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend.'}, 'maxSeverity': {'type': 'string', 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'minSeverity': {'type': 'string', 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Will only match events which have these properties'}, 'description': 'Will only match events which have these properties'}, 'protocol': {'type': 'string', 'description': 'Will only match events with the provided protocol'}, 'signature': {'type': 'array', 'description': 'Will only match events with these attack identifiers', 'items': {'type': 'string', 'description': 'Will only match events with these attack identifiers'}, 'uniqueItems': True}, 'sourceIPAddresses': {'type': 'array', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'array', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'array', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'array', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'uriPattern': {'type': 'string', 'description': 'Will only match events where the uri matches this regex'}}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'hasMatchCode', 'hasTransformCode']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'index': {'type': 'integer', 'format': 'int64', 'description': 'The execution index'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of this filter instance'}, 'validFrom': {'type': 'integer', 'format': 'int64', 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'integer', 'format': 'int64', 'description': 'When the filter stops being applied'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['addMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
debug_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Shows the result of running a match filter against a set of events (INTERNAL)', 'description': '', 'operationId': 'debugMatchFilter', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to debug a match filter against a set of events', 'properties': {'actions': {'type': 'dict', 'properties': {'associatedCaseID': {'type': 'int', 'description': 'Adds an associated case ID. Set to 0 to unset the value'}, 'changeAggregationKey': {'type': 'bool', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'bool', 'description': 'If true, this filter will continue to look for new events after transform'}, 'drop': {'type': 'bool', 'description': 'If true, this event will be dropped'}, 'invertIp': {'type': 'bool', 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'str', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true. Set to empty string to unset field'}, 'newDestinationAggregationBits': {'type': 'int', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim. Set to 0 to unset the value'}, 'newSeverity': {'type': 'str', 'description': "The new severity of events that are matched by the filter. Use 'unset' value to unset the field", 'enum': ['unset', 'lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'int', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder. Set to 0 to unset the value'}, 'noTransform': {'type': 'bool', 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'bool', 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'str', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend. Set to empty string to unset field'}}}, 'eventIDs': {'type': 'list', 'description': 'The list of event ids for the events to debug against. Can be given in the form of AGGR/1/123456789/{UUID} or simply UUID.', 'items': {'type': 'str', 'description': 'The list of event ids for the events to debug against. Can be given in the form of AGGR/1/123456789/{UUID} or simply UUID.'}, 'maxItems': 2147483647, 'minItems': 1}, 'filters': {'type': 'dict', 'properties': {'matchCode': {'type': 'str', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend. Set to empty string to unset field'}, 'minSeverity': {'type': 'str', 'description': "Only match events with severity at least this value. Use 'unset' value to unset the field", 'enum': ['unset', 'lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'maxSeverity': {'type': 'str', 'description': "Only match events with severity this value or lower. Use 'unset' value to unset the field. Use 'unset' value to unset the field", 'enum': ['unset', 'lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'includeEventFlags': {'type': 'list', 'description': 'Only match events that have these flags', 'items': {'type': 'str', 'description': 'Only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'excludeEventFlags': {'type': 'list', 'description': 'Only match events that does not have any of these flags', 'items': {'type': 'str', 'description': 'Only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'protocol': {'type': 'str', 'description': 'Only match events with the provided protocol. Set to empty string to unset field'}, 'domainPattern': {'type': 'str', 'description': 'Only match events where the domain matches this regex. Set to empty string to unset field'}, 'uriPattern': {'type': 'str', 'description': 'Only match events where the uri matches this regex. Set to empty string to unset field'}, 'sourceIPAddresses': {'type': 'list', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'str', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'list', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'int', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'list', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'str', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'list', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'int', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'list', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'str', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'list', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'int', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'location': {'type': 'list', 'description': 'Only match events from the these locations, given by shortname or id', 'items': {'type': 'str', 'description': 'Only match events from the these locations, given by shortname or id'}, 'uniqueItems': True}, 'signature': {'type': 'list', 'description': 'Only match events with these signatures', 'items': {'type': 'str', 'description': 'Only match events with these signatures'}, 'uniqueItems': True}, 'alarmID': {'type': 'list', 'description': 'Only match events connected to these alarms, given by id', 'items': {'type': 'int', 'description': 'Only match events connected to these alarms, given by id'}, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Only match events belonging to these attack categories, given by shortname or id', 'items': {'type': 'str', 'description': 'Only match events belonging to these attack categories, given by shortname or id'}, 'uniqueItems': True}, 'properties': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Only match events which have these properties'}, 'description': 'Only match events which have these properties'}, 'alarm': {'type': 'dict', 'properties': {'matchCode': {'type': 'str', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend. Set to empty string to unset field'}, 'minSeverity': {'type': 'str', 'description': "Only match events with severity at least this value. Use 'unset' value to unset the field", 'enum': ['unset', 'lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'maxSeverity': {'type': 'str', 'description': "Only match events with severity this value or lower. Use 'unset' value to unset the field. Use 'unset' value to unset the field", 'enum': ['unset', 'lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'includeEventFlags': {'type': 'list', 'description': 'Only match events that have these flags', 'items': {'type': 'str', 'description': 'Only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'excludeEventFlags': {'type': 'list', 'description': 'Only match events that does not have any of these flags', 'items': {'type': 'str', 'description': 'Only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'protocol': {'type': 'str', 'description': 'Only match events with the provided protocol. Set to empty string to unset field'}, 'domainPattern': {'type': 'str', 'description': 'Only match events where the domain matches this regex. Set to empty string to unset field'}, 'uriPattern': {'type': 'str', 'description': 'Only match events where the uri matches this regex. Set to empty string to unset field'}, 'sourceIPAddresses': {'type': 'list', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'str', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'list', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'int', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'list', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'str', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'list', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'int', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'list', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'str', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'list', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'int', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'location': {'type': 'list', 'description': 'Only match events from the these locations, given by shortname or id', 'items': {'type': 'str', 'description': 'Only match events from the these locations, given by shortname or id'}, 'uniqueItems': True}, 'signature': {'type': 'list', 'description': 'Only match events with these signatures', 'items': {'type': 'str', 'description': 'Only match events with these signatures'}, 'uniqueItems': True}, 'alarmID': {'type': 'list', 'description': 'Only match events connected to these alarms, given by id', 'items': {'type': 'int', 'description': 'Only match events connected to these alarms, given by id'}, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Only match events belonging to these attack categories, given by shortname or id', 'items': {'type': 'str', 'description': 'Only match events belonging to these attack categories, given by shortname or id'}, 'uniqueItems': True}, 'properties': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Only match events which have these properties'}, 'description': 'Only match events which have these properties'}, 'alarm': []}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}, 'validFrom': {'type': 'int', 'description': 'When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details. Null values will be ignored. Use 0 to unset'}, 'validTo': {'type': 'int', 'description': 'When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details. Null values will be ignored. Use 0 to unset'}}, 'required': ['eventIDs']}}}, 'required': True}, 'responses': {'default': {'description': 'Shows the result of running a match filter against a set of events', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'The result of debugging a match filter against a set of events', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'event': {'type': 'object', 'description': 'The properties of the event debugged against', 'properties': {'eventID': {'type': 'string', 'description': 'The ID of the event debugged against'}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'The properties of the event'}, 'description': 'The properties of the event'}}}, 'match': {'type': 'object', 'description': 'This object hold whether a match filter matched an event, and if applicable which field failed to match', 'properties': {'matchFailureReason': {'type': 'string', 'description': "If the filter didn't match, this will describe the reason why"}, 'matched': {'type': 'boolean', 'description': 'True if the filter matched the event'}}}, 'transformationErrors': {'type': 'array', 'description': 'The errors that occurred while transforming the event', 'items': {'type': 'object', 'description': 'The explanation of why a match filter failed to transform a matched event', 'properties': {'message': {'type': 'string', 'description': 'The message explaining the filter failed to transform the event'}}}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['debugMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
debug_unsaved_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Shows the result of running a match filter against a set of events (INTERNAL)', 'description': '', 'operationId': 'debugUnsavedMatchFilter', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to debug a match filter against a set of events', 'properties': {'actions': {'type': 'dict', 'properties': {'associatedCaseID': {'type': 'int', 'description': 'Adds an associated case ID'}, 'changeAggregationKey': {'type': 'bool', 'default': False, 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'bool', 'default': False, 'description': 'If true, this filter will continue to look for new events after transform'}, 'disableCompileStaticValidation': {'type': 'bool', 'default': False, 'description': 'If true, we will skip static validation of the transformCode'}, 'drop': {'type': 'bool', 'default': False, 'description': 'If true, this event will be dropped'}, 'dropRaw': {'type': 'bool', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'bool', 'default': False, 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'str', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'int', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'str', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'int', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'bool', 'default': False, 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'bool', 'default': False, 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'str', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'eventIDs': {'type': 'list', 'description': 'The list of event ids for the events to debug against. Can be given in the form of AGGR/1/123456789/{UUID} or simply UUID.', 'items': {'type': 'str', 'description': 'The list of event ids for the events to debug against. Can be given in the form of AGGR/1/123456789/{UUID} or simply UUID.'}, 'maxItems': 2147483647, 'minItems': 1}, 'eventType': {'type': 'str', 'description': "What type of event the filter should match against. Type raw will create a NIDSEventMatchFilter in v1, aggregated will create a AggregatedIPAttackEventMatchFilter, and all will create a IPAttackEventMatchFilter. Defaults to 'all'", 'enum': ['raw', 'aggregated', 'all']}, 'filters': {'type': 'dict', 'properties': {'matchCode': {'type': 'str', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend'}, 'disableCompileStaticValidation': {'type': 'bool', 'default': False, 'description': 'If true, we will skip static validation of the matchCode'}, 'minSeverity': {'type': 'str', 'description': 'Only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'maxSeverity': {'type': 'str', 'description': 'Only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'includeEventFlags': {'type': 'list', 'description': 'Only match events that have these flags', 'items': {'type': 'str', 'description': 'Only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'excludeEventFlags': {'type': 'list', 'description': 'Only match events that does not have any of these flags', 'items': {'type': 'str', 'description': 'Only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'protocol': {'type': 'str', 'description': 'Only match events with the provided protocol'}, 'domainPattern': {'type': 'str', 'description': 'Only match events where the domain matches this regex'}, 'uriPattern': {'type': 'str', 'description': 'Only match events where the uri matches this regex'}, 'sourceIPAddresses': {'type': 'list', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'sourcePorts': {'type': 'list', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'int', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'list', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'destinationPorts': {'type': 'list', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'int', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'list', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'sourceOrDestinationPorts': {'type': 'list', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'int', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'location': {'type': 'list', 'description': 'Only match events from the these locations, given by shortname or id', 'items': {'type': 'str', 'description': 'Only match events from the these locations, given by shortname or id'}, 'uniqueItems': True}, 'signature': {'type': 'list', 'description': 'Only match events with these signatures', 'items': {'type': 'str', 'description': 'Only match events with these signatures'}, 'uniqueItems': True}, 'alarmID': {'type': 'list', 'description': 'Only match events connected to these alarms, given by id', 'items': {'type': 'int', 'description': 'Only match events connected to these alarms, given by id'}, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Only match events belonging to these attack categories, given by shortname or id', 'items': {'type': 'str', 'description': 'Only match events belonging to these attack categories, given by shortname or id'}, 'uniqueItems': True}, 'properties': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Only match events which have these properties'}, 'description': 'Only match events which have these properties'}, 'alarm': {'type': 'dict', 'properties': {'matchCode': {'type': 'str', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend'}, 'disableCompileStaticValidation': {'type': 'bool', 'default': False, 'description': 'If true, we will skip static validation of the matchCode'}, 'minSeverity': {'type': 'str', 'description': 'Only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'maxSeverity': {'type': 'str', 'description': 'Only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'includeEventFlags': {'type': 'list', 'description': 'Only match events that have these flags', 'items': {'type': 'str', 'description': 'Only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'excludeEventFlags': {'type': 'list', 'description': 'Only match events that does not have any of these flags', 'items': {'type': 'str', 'description': 'Only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'protocol': {'type': 'str', 'description': 'Only match events with the provided protocol'}, 'domainPattern': {'type': 'str', 'description': 'Only match events where the domain matches this regex'}, 'uriPattern': {'type': 'str', 'description': 'Only match events where the uri matches this regex'}, 'sourceIPAddresses': {'type': 'list', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'sourcePorts': {'type': 'list', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'int', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'list', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'destinationPorts': {'type': 'list', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'int', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'list', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'sourceOrDestinationPorts': {'type': 'list', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'int', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'location': {'type': 'list', 'description': 'Only match events from the these locations, given by shortname or id', 'items': {'type': 'str', 'description': 'Only match events from the these locations, given by shortname or id'}, 'uniqueItems': True}, 'signature': {'type': 'list', 'description': 'Only match events with these signatures', 'items': {'type': 'str', 'description': 'Only match events with these signatures'}, 'uniqueItems': True}, 'alarmID': {'type': 'list', 'description': 'Only match events connected to these alarms, given by id', 'items': {'type': 'int', 'description': 'Only match events connected to these alarms, given by id'}, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Only match events belonging to these attack categories, given by shortname or id', 'items': {'type': 'str', 'description': 'Only match events belonging to these attack categories, given by shortname or id'}, 'uniqueItems': True}, 'properties': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Only match events which have these properties'}, 'description': 'Only match events which have these properties'}, 'alarm': []}}}}, 'validFrom': {'type': 'int', 'description': 'When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details. Null values will be ignored. Use 0 to unset'}, 'validTo': {'type': 'int', 'description': 'When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details. Null values will be ignored. Use 0 to unset'}}, 'required': ['eventIDs', 'eventType']}}}, 'required': True}, 'responses': {'default': {'description': 'Shows the result of running a match filter against a set of events', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'The result of debugging a match filter against a set of events', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'event': {'type': 'object', 'description': 'The properties of the event debugged against', 'properties': {'eventID': {'type': 'string', 'description': 'The ID of the event debugged against'}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'The properties of the event'}, 'description': 'The properties of the event'}}}, 'match': {'type': 'object', 'description': 'This object hold whether a match filter matched an event, and if applicable which field failed to match', 'properties': {'matchFailureReason': {'type': 'string', 'description': "If the filter didn't match, this will describe the reason why"}, 'matched': {'type': 'boolean', 'description': 'True if the filter matched the event'}}}, 'transformationErrors': {'type': 'array', 'description': 'The errors that occurred while transforming the event', 'items': {'type': 'object', 'description': 'The explanation of why a match filter failed to transform a matched event', 'properties': {'message': {'type': 'string', 'description': 'The message explaining the filter failed to transform the event'}}}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['debugMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
delete_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Deletes a match filter (INTERNAL)', 'description': '', 'operationId': 'deleteMatchFilter', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter to delete', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'responses': {'default': {'description': 'Deletes a match filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': "Match filters compare events against a set of criteria.\nIf the criteria match then one or more actions will be performed on the event.\nPossible actions are:\n  * drop - If the drop action is added, the event is dropped and won't be sent forward\n  * newSeverity - If newSeverity is set, the severity of the event is set to the new value\n  * newAggregationKey - If newAggregationKey is set, then the aggregation key is set to the new value\n  * newSourceAggregationBits - If newSourceAggregationBits is set, the aggregation bits for the source IP is\n    set to the selected value\n  * newDestinationAggregationBits - If newDestinationAggregationBits is set, the aggregation bits for the\n    destination IP is set to the selected value\n  * transformCode - If transformCode is set, the groovy code is run is run on the event. Should return the\n    transformed event\n  * continueAfterTransform - If continueAfterTransform is set, the filter matcher will continue looking for\n    matching filters\n\nBoth matchCode and transformCode implement methods with the following parameters\n  * event: The event to transform or check for match\n  * filter: The match filter itself\n", 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be performed on the event', 'properties': {'associatedCaseID': {'type': 'integer', 'format': 'int64', 'description': 'The case this filter is associated with'}, 'changeAggregationKey': {'type': 'boolean', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'boolean', 'description': 'If true, this filter will continue to look for new events after transform'}, 'drop': {'type': 'boolean', 'description': "If true, the event is dropped and won't be sent forward"}, 'dropRaw': {'type': 'boolean', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'boolean', 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'string', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'string', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'boolean', 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'boolean', 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'string', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was modified'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filterType': {'type': 'string', 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'alarm': {'type': 'array', 'description': 'Will only match events connected to these alarms', 'items': {'type': 'object', 'description': 'Will only match events connected to these alarms', 'properties': {'description': {'type': 'string', 'description': 'The description of the alarm'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the alarm'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the alarm'}}}, 'uniqueItems': True}, 'attackCategory': {'type': 'array', 'description': 'Will only match events belonging to these attack categories', 'items': {'type': 'object', 'description': 'Will only match events belonging to these attack categories', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the category.'}, 'info': {'type': 'string', 'description': 'Short information about the category.'}, 'name': {'type': 'string', 'description': 'Name of the category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the category.'}}}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'array', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'array', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'domainPattern': {'type': 'string', 'description': 'Will only match events where the domain matches this regex'}, 'excludeEventFlags': {'type': 'array', 'description': 'Will only match events that does not have any of these flags', 'items': {'type': 'string', 'description': 'Will only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeEventFlags': {'type': 'array', 'description': 'Will only match events that have these flags', 'items': {'type': 'string', 'description': 'Will only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'location': {'type': 'array', 'description': 'Will only match events from the these locations', 'items': {'type': 'object', 'description': 'Will only match events from the these locations', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the Location'}, 'name': {'type': 'string', 'description': 'The name of the Location'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the Location'}}}, 'uniqueItems': True}, 'matchCode': {'type': 'string', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend.'}, 'maxSeverity': {'type': 'string', 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'minSeverity': {'type': 'string', 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Will only match events which have these properties'}, 'description': 'Will only match events which have these properties'}, 'protocol': {'type': 'string', 'description': 'Will only match events with the provided protocol'}, 'signature': {'type': 'array', 'description': 'Will only match events with these attack identifiers', 'items': {'type': 'string', 'description': 'Will only match events with these attack identifiers'}, 'uniqueItems': True}, 'sourceIPAddresses': {'type': 'array', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'array', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'array', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'array', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'uriPattern': {'type': 'string', 'description': 'Will only match events where the uri matches this regex'}}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'hasMatchCode', 'hasTransformCode']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'index': {'type': 'integer', 'format': 'int64', 'description': 'The execution index'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of this filter instance'}, 'validFrom': {'type': 'integer', 'format': 'int64', 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'integer', 'format': 'int64', 'description': 'When the filter stops being applied'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['deleteMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
disable_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Disables a match filter (INTERNAL)', 'description': '', 'operationId': 'disableMatchFilter', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to enable a match filter', 'properties': {'comment': {'type': 'str', 'description': 'A comment describing why the filter was enabled/disabled'}}}}}}, 'responses': {'default': {'description': 'Disables a match filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': "Match filters compare events against a set of criteria.\nIf the criteria match then one or more actions will be performed on the event.\nPossible actions are:\n  * drop - If the drop action is added, the event is dropped and won't be sent forward\n  * newSeverity - If newSeverity is set, the severity of the event is set to the new value\n  * newAggregationKey - If newAggregationKey is set, then the aggregation key is set to the new value\n  * newSourceAggregationBits - If newSourceAggregationBits is set, the aggregation bits for the source IP is\n    set to the selected value\n  * newDestinationAggregationBits - If newDestinationAggregationBits is set, the aggregation bits for the\n    destination IP is set to the selected value\n  * transformCode - If transformCode is set, the groovy code is run is run on the event. Should return the\n    transformed event\n  * continueAfterTransform - If continueAfterTransform is set, the filter matcher will continue looking for\n    matching filters\n\nBoth matchCode and transformCode implement methods with the following parameters\n  * event: The event to transform or check for match\n  * filter: The match filter itself\n", 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be performed on the event', 'properties': {'associatedCaseID': {'type': 'integer', 'format': 'int64', 'description': 'The case this filter is associated with'}, 'changeAggregationKey': {'type': 'boolean', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'boolean', 'description': 'If true, this filter will continue to look for new events after transform'}, 'drop': {'type': 'boolean', 'description': "If true, the event is dropped and won't be sent forward"}, 'dropRaw': {'type': 'boolean', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'boolean', 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'string', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'string', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'boolean', 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'boolean', 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'string', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was modified'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filterType': {'type': 'string', 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'alarm': {'type': 'array', 'description': 'Will only match events connected to these alarms', 'items': {'type': 'object', 'description': 'Will only match events connected to these alarms', 'properties': {'description': {'type': 'string', 'description': 'The description of the alarm'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the alarm'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the alarm'}}}, 'uniqueItems': True}, 'attackCategory': {'type': 'array', 'description': 'Will only match events belonging to these attack categories', 'items': {'type': 'object', 'description': 'Will only match events belonging to these attack categories', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the category.'}, 'info': {'type': 'string', 'description': 'Short information about the category.'}, 'name': {'type': 'string', 'description': 'Name of the category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the category.'}}}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'array', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'array', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'domainPattern': {'type': 'string', 'description': 'Will only match events where the domain matches this regex'}, 'excludeEventFlags': {'type': 'array', 'description': 'Will only match events that does not have any of these flags', 'items': {'type': 'string', 'description': 'Will only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeEventFlags': {'type': 'array', 'description': 'Will only match events that have these flags', 'items': {'type': 'string', 'description': 'Will only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'location': {'type': 'array', 'description': 'Will only match events from the these locations', 'items': {'type': 'object', 'description': 'Will only match events from the these locations', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the Location'}, 'name': {'type': 'string', 'description': 'The name of the Location'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the Location'}}}, 'uniqueItems': True}, 'matchCode': {'type': 'string', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend.'}, 'maxSeverity': {'type': 'string', 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'minSeverity': {'type': 'string', 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Will only match events which have these properties'}, 'description': 'Will only match events which have these properties'}, 'protocol': {'type': 'string', 'description': 'Will only match events with the provided protocol'}, 'signature': {'type': 'array', 'description': 'Will only match events with these attack identifiers', 'items': {'type': 'string', 'description': 'Will only match events with these attack identifiers'}, 'uniqueItems': True}, 'sourceIPAddresses': {'type': 'array', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'array', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'array', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'array', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'uriPattern': {'type': 'string', 'description': 'Will only match events where the uri matches this regex'}}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'hasMatchCode', 'hasTransformCode']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'index': {'type': 'integer', 'format': 'int64', 'description': 'The execution index'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of this filter instance'}, 'validFrom': {'type': 'integer', 'format': 'int64', 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'integer', 'format': 'int64', 'description': 'When the filter stops being applied'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
disable_match_filter_on_instance = {'tags': ['eventfilters/v2/match'], 'summary': 'Disables a match filter on instance (INTERNAL)', 'description': '', 'operationId': 'disableMatchFilterOnInstance', 'parameters': [{'name': 'filterID', 'in': 'path', 'description': 'ID of the filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}, {'name': 'instanceID', 'in': 'path', 'description': 'ID of the instance', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'responses': {'default': {'description': 'Disables a match filter on instance', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'An object describing the filter disabled on instance', 'properties': {'filterID': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter disabled on instance'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
duplicate_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Duplicates a match filter (INTERNAL)', 'description': '', 'operationId': 'duplicateMatchFilter', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to duplicate a match filter', 'properties': {'customer': {'type': 'str', 'description': "The customer the duplicate should belong to (id or shortname). Use '0' to create a global filter, If this field is not set the default is using the same customer as the original filter."}}}}}}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Duplicates a match filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': "Match filters compare events against a set of criteria.\nIf the criteria match then one or more actions will be performed on the event.\nPossible actions are:\n  * drop - If the drop action is added, the event is dropped and won't be sent forward\n  * newSeverity - If newSeverity is set, the severity of the event is set to the new value\n  * newAggregationKey - If newAggregationKey is set, then the aggregation key is set to the new value\n  * newSourceAggregationBits - If newSourceAggregationBits is set, the aggregation bits for the source IP is\n    set to the selected value\n  * newDestinationAggregationBits - If newDestinationAggregationBits is set, the aggregation bits for the\n    destination IP is set to the selected value\n  * transformCode - If transformCode is set, the groovy code is run is run on the event. Should return the\n    transformed event\n  * continueAfterTransform - If continueAfterTransform is set, the filter matcher will continue looking for\n    matching filters\n\nBoth matchCode and transformCode implement methods with the following parameters\n  * event: The event to transform or check for match\n  * filter: The match filter itself\n", 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be performed on the event', 'properties': {'associatedCaseID': {'type': 'integer', 'format': 'int64', 'description': 'The case this filter is associated with'}, 'changeAggregationKey': {'type': 'boolean', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'boolean', 'description': 'If true, this filter will continue to look for new events after transform'}, 'drop': {'type': 'boolean', 'description': "If true, the event is dropped and won't be sent forward"}, 'dropRaw': {'type': 'boolean', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'boolean', 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'string', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'string', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'boolean', 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'boolean', 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'string', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was modified'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filterType': {'type': 'string', 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'alarm': {'type': 'array', 'description': 'Will only match events connected to these alarms', 'items': {'type': 'object', 'description': 'Will only match events connected to these alarms', 'properties': {'description': {'type': 'string', 'description': 'The description of the alarm'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the alarm'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the alarm'}}}, 'uniqueItems': True}, 'attackCategory': {'type': 'array', 'description': 'Will only match events belonging to these attack categories', 'items': {'type': 'object', 'description': 'Will only match events belonging to these attack categories', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the category.'}, 'info': {'type': 'string', 'description': 'Short information about the category.'}, 'name': {'type': 'string', 'description': 'Name of the category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the category.'}}}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'array', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'array', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'domainPattern': {'type': 'string', 'description': 'Will only match events where the domain matches this regex'}, 'excludeEventFlags': {'type': 'array', 'description': 'Will only match events that does not have any of these flags', 'items': {'type': 'string', 'description': 'Will only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeEventFlags': {'type': 'array', 'description': 'Will only match events that have these flags', 'items': {'type': 'string', 'description': 'Will only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'location': {'type': 'array', 'description': 'Will only match events from the these locations', 'items': {'type': 'object', 'description': 'Will only match events from the these locations', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the Location'}, 'name': {'type': 'string', 'description': 'The name of the Location'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the Location'}}}, 'uniqueItems': True}, 'matchCode': {'type': 'string', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend.'}, 'maxSeverity': {'type': 'string', 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'minSeverity': {'type': 'string', 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Will only match events which have these properties'}, 'description': 'Will only match events which have these properties'}, 'protocol': {'type': 'string', 'description': 'Will only match events with the provided protocol'}, 'signature': {'type': 'array', 'description': 'Will only match events with these attack identifiers', 'items': {'type': 'string', 'description': 'Will only match events with these attack identifiers'}, 'uniqueItems': True}, 'sourceIPAddresses': {'type': 'array', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'array', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'array', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'array', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'uriPattern': {'type': 'string', 'description': 'Will only match events where the uri matches this regex'}}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'hasMatchCode', 'hasTransformCode']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'index': {'type': 'integer', 'format': 'int64', 'description': 'The execution index'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of this filter instance'}, 'validFrom': {'type': 'integer', 'format': 'int64', 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'integer', 'format': 'int64', 'description': 'When the filter stops being applied'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['duplicateMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
enable_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Enables a match filter (INTERNAL)', 'description': '', 'operationId': 'enableMatchFilter', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to enable a match filter', 'properties': {'comment': {'type': 'str', 'description': 'A comment describing why the filter was enabled/disabled'}}}}}}, 'responses': {'default': {'description': 'Enables a match filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': "Match filters compare events against a set of criteria.\nIf the criteria match then one or more actions will be performed on the event.\nPossible actions are:\n  * drop - If the drop action is added, the event is dropped and won't be sent forward\n  * newSeverity - If newSeverity is set, the severity of the event is set to the new value\n  * newAggregationKey - If newAggregationKey is set, then the aggregation key is set to the new value\n  * newSourceAggregationBits - If newSourceAggregationBits is set, the aggregation bits for the source IP is\n    set to the selected value\n  * newDestinationAggregationBits - If newDestinationAggregationBits is set, the aggregation bits for the\n    destination IP is set to the selected value\n  * transformCode - If transformCode is set, the groovy code is run is run on the event. Should return the\n    transformed event\n  * continueAfterTransform - If continueAfterTransform is set, the filter matcher will continue looking for\n    matching filters\n\nBoth matchCode and transformCode implement methods with the following parameters\n  * event: The event to transform or check for match\n  * filter: The match filter itself\n", 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be performed on the event', 'properties': {'associatedCaseID': {'type': 'integer', 'format': 'int64', 'description': 'The case this filter is associated with'}, 'changeAggregationKey': {'type': 'boolean', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'boolean', 'description': 'If true, this filter will continue to look for new events after transform'}, 'drop': {'type': 'boolean', 'description': "If true, the event is dropped and won't be sent forward"}, 'dropRaw': {'type': 'boolean', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'boolean', 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'string', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'string', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'boolean', 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'boolean', 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'string', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was modified'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filterType': {'type': 'string', 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'alarm': {'type': 'array', 'description': 'Will only match events connected to these alarms', 'items': {'type': 'object', 'description': 'Will only match events connected to these alarms', 'properties': {'description': {'type': 'string', 'description': 'The description of the alarm'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the alarm'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the alarm'}}}, 'uniqueItems': True}, 'attackCategory': {'type': 'array', 'description': 'Will only match events belonging to these attack categories', 'items': {'type': 'object', 'description': 'Will only match events belonging to these attack categories', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the category.'}, 'info': {'type': 'string', 'description': 'Short information about the category.'}, 'name': {'type': 'string', 'description': 'Name of the category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the category.'}}}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'array', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'array', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'domainPattern': {'type': 'string', 'description': 'Will only match events where the domain matches this regex'}, 'excludeEventFlags': {'type': 'array', 'description': 'Will only match events that does not have any of these flags', 'items': {'type': 'string', 'description': 'Will only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeEventFlags': {'type': 'array', 'description': 'Will only match events that have these flags', 'items': {'type': 'string', 'description': 'Will only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'location': {'type': 'array', 'description': 'Will only match events from the these locations', 'items': {'type': 'object', 'description': 'Will only match events from the these locations', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the Location'}, 'name': {'type': 'string', 'description': 'The name of the Location'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the Location'}}}, 'uniqueItems': True}, 'matchCode': {'type': 'string', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend.'}, 'maxSeverity': {'type': 'string', 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'minSeverity': {'type': 'string', 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Will only match events which have these properties'}, 'description': 'Will only match events which have these properties'}, 'protocol': {'type': 'string', 'description': 'Will only match events with the provided protocol'}, 'signature': {'type': 'array', 'description': 'Will only match events with these attack identifiers', 'items': {'type': 'string', 'description': 'Will only match events with these attack identifiers'}, 'uniqueItems': True}, 'sourceIPAddresses': {'type': 'array', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'array', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'array', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'array', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'uriPattern': {'type': 'string', 'description': 'Will only match events where the uri matches this regex'}}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'hasMatchCode', 'hasTransformCode']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'index': {'type': 'integer', 'format': 'int64', 'description': 'The execution index'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of this filter instance'}, 'validFrom': {'type': 'integer', 'format': 'int64', 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'integer', 'format': 'int64', 'description': 'When the filter stops being applied'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
enable_match_filter_on_instance = {'tags': ['eventfilters/v2/match'], 'summary': 'Enables a match filter on instance (INTERNAL)', 'description': '', 'operationId': 'enableMatchFilterOnInstance', 'parameters': [{'name': 'filterID', 'in': 'path', 'description': 'ID of the filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}, {'name': 'instanceID', 'in': 'path', 'description': 'ID of the instance', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'responses': {'default': {'description': 'Enables a match filter on instance', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'An object describing the filter enabled on instance', 'properties': {'filterID': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter enabled on instance'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
get_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Gets a match filter (INTERNAL)', 'description': '', 'operationId': 'getMatchFilter', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}, {'name': 'includeCode', 'in': 'query', 'description': 'Whether to include code in MatchFilter', 'schema': {'type': 'bool', 'default': 'false'}, 'type': 'bool', 'default': 'false'}, {'name': 'revision', 'in': 'query', 'description': 'The expected revision of the filter', 'schema': {'type': 'int'}, 'type': 'int'}], 'responses': {'default': {'description': 'Gets a match filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': "Match filters compare events against a set of criteria.\nIf the criteria match then one or more actions will be performed on the event.\nPossible actions are:\n  * drop - If the drop action is added, the event is dropped and won't be sent forward\n  * newSeverity - If newSeverity is set, the severity of the event is set to the new value\n  * newAggregationKey - If newAggregationKey is set, then the aggregation key is set to the new value\n  * newSourceAggregationBits - If newSourceAggregationBits is set, the aggregation bits for the source IP is\n    set to the selected value\n  * newDestinationAggregationBits - If newDestinationAggregationBits is set, the aggregation bits for the\n    destination IP is set to the selected value\n  * transformCode - If transformCode is set, the groovy code is run is run on the event. Should return the\n    transformed event\n  * continueAfterTransform - If continueAfterTransform is set, the filter matcher will continue looking for\n    matching filters\n\nBoth matchCode and transformCode implement methods with the following parameters\n  * event: The event to transform or check for match\n  * filter: The match filter itself\n", 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be performed on the event', 'properties': {'associatedCaseID': {'type': 'integer', 'format': 'int64', 'description': 'The case this filter is associated with'}, 'changeAggregationKey': {'type': 'boolean', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'boolean', 'description': 'If true, this filter will continue to look for new events after transform'}, 'drop': {'type': 'boolean', 'description': "If true, the event is dropped and won't be sent forward"}, 'dropRaw': {'type': 'boolean', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'boolean', 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'string', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'string', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'boolean', 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'boolean', 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'string', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was modified'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filterType': {'type': 'string', 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'alarm': {'type': 'array', 'description': 'Will only match events connected to these alarms', 'items': {'type': 'object', 'description': 'Will only match events connected to these alarms', 'properties': {'description': {'type': 'string', 'description': 'The description of the alarm'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the alarm'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the alarm'}}}, 'uniqueItems': True}, 'attackCategory': {'type': 'array', 'description': 'Will only match events belonging to these attack categories', 'items': {'type': 'object', 'description': 'Will only match events belonging to these attack categories', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the category.'}, 'info': {'type': 'string', 'description': 'Short information about the category.'}, 'name': {'type': 'string', 'description': 'Name of the category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the category.'}}}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'array', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'array', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'domainPattern': {'type': 'string', 'description': 'Will only match events where the domain matches this regex'}, 'excludeEventFlags': {'type': 'array', 'description': 'Will only match events that does not have any of these flags', 'items': {'type': 'string', 'description': 'Will only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeEventFlags': {'type': 'array', 'description': 'Will only match events that have these flags', 'items': {'type': 'string', 'description': 'Will only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'location': {'type': 'array', 'description': 'Will only match events from the these locations', 'items': {'type': 'object', 'description': 'Will only match events from the these locations', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the Location'}, 'name': {'type': 'string', 'description': 'The name of the Location'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the Location'}}}, 'uniqueItems': True}, 'matchCode': {'type': 'string', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend.'}, 'maxSeverity': {'type': 'string', 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'minSeverity': {'type': 'string', 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Will only match events which have these properties'}, 'description': 'Will only match events which have these properties'}, 'protocol': {'type': 'string', 'description': 'Will only match events with the provided protocol'}, 'signature': {'type': 'array', 'description': 'Will only match events with these attack identifiers', 'items': {'type': 'string', 'description': 'Will only match events with these attack identifiers'}, 'uniqueItems': True}, 'sourceIPAddresses': {'type': 'array', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'array', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'array', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'array', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'uriPattern': {'type': 'string', 'description': 'Will only match events where the uri matches this regex'}}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'hasMatchCode', 'hasTransformCode']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'index': {'type': 'integer', 'format': 'int64', 'description': 'The execution index'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of this filter instance'}, 'validFrom': {'type': 'integer', 'format': 'int64', 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'integer', 'format': 'int64', 'description': 'When the filter stops being applied'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
get_match_filter_status = {'tags': ['eventfilters/v2/match'], 'summary': 'Gets the statuses of a match filters instances (INTERNAL)', 'description': '', 'operationId': 'listMatchFilterStatus', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'schema': {'type': 'int', 'default': '25'}, 'type': 'int', 'default': '25'}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'schema': {'type': 'int', 'default': '0'}, 'type': 'int', 'default': '0'}], 'responses': {'default': {'description': 'Gets the statuses of a match filters instances', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'An object describing the current status of a match filter instance on a host', 'properties': {'container': {'type': 'object', 'description': 'An object containing information about the container the filter instance is running on', 'properties': {'componentName': {'type': 'string', 'description': 'The name of the component the filter is running on'}, 'instanceID': {'type': 'integer', 'format': 'int32', 'description': 'The id of the container the filter is running on'}}}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'errorMessage': {'type': 'string', 'description': 'The current filter status of the filter'}, 'filterStatus': {'type': 'string', 'description': 'The current filter status of the filter', 'enum': ['ok', 'error', 'disabled', 'disabledByCircuitBreaker', 'disabledByError']}, 'host': {'type': 'object', 'description': 'An object containing information about the host the filter is running on', 'properties': {'hostName': {'type': 'string', 'description': 'The name of the host the filter is running on'}, 'id': {'type': 'integer', 'format': 'int32', 'description': 'The ID of the host'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'loggingStatus': {'type': 'string', 'description': 'The current logging status of the filter', 'enum': ['debug', 'info']}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision of the filter that is running'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewMatchFilterStatus'], 'x-Argus-ApiStatus': 'INTERNAL'}
list_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Simple search for match filters (INTERNAL)', 'description': '', 'operationId': 'listMatchFilter', 'parameters': [{'name': 'keywords', 'in': 'query', 'description': 'Search by keywords', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'keywordMatch', 'in': 'query', 'description': 'Deprecated: Set match strategy for keyword search', 'schema': {'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'keywordField', 'in': 'query', 'description': 'Deprecated: Set field strategy for keyword search', 'schema': {'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['id', 'description', 'name', 'matchCode', 'transformCode', 'protocol', 'domainPattern', 'uriPattern', 'newAggregationKey', 'label', 'attackIdentifier', 'signature', 'propertyKey', 'propertyValue', 'all']}, 'uniqueItems': True}, 'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['id', 'description', 'name', 'matchCode', 'transformCode', 'protocol', 'domainPattern', 'uriPattern', 'newAggregationKey', 'label', 'attackIdentifier', 'signature', 'propertyKey', 'propertyValue', 'all']}, 'uniqueItems': True}, {'name': 'timestampMatch', 'in': 'query', 'description': 'Deprecated: Set match strategy for timestamp filtering', 'schema': {'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'timestampField', 'in': 'query', 'description': 'Deprecated: Set field strategy for timestamp filtering', 'schema': {'type': 'list', 'default': 'lastUpdated', 'items': {'type': 'str', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}, 'uniqueItems': True}, 'type': 'list', 'default': 'lastUpdated', 'items': {'type': 'str', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}, 'uniqueItems': True}, {'name': 'start', 'in': 'query', 'description': 'Deprecated: Lower bound timestamp filter value', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'end', 'in': 'query', 'description': 'Deprecated: Upper bound timestamp filter value', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'keywordMatchStrategy', 'in': 'query', 'description': 'Set match strategy for keyword search', 'schema': {'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'keywordFieldStrategy', 'in': 'query', 'description': 'Set field strategy for keyword search', 'schema': {'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['id', 'description', 'name', 'matchCode', 'transformCode', 'protocol', 'domainPattern', 'uriPattern', 'newAggregationKey', 'label', 'attackIdentifier', 'signature', 'propertyKey', 'propertyValue', 'all']}, 'uniqueItems': True}, 'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['id', 'description', 'name', 'matchCode', 'transformCode', 'protocol', 'domainPattern', 'uriPattern', 'newAggregationKey', 'label', 'attackIdentifier', 'signature', 'propertyKey', 'propertyValue', 'all']}, 'uniqueItems': True}, {'name': 'timestampMatchStrategy', 'in': 'query', 'description': 'Set match strategy for timestamp filtering', 'schema': {'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'timestampFieldStrategy', 'in': 'query', 'description': 'Set field strategy for timestamp filtering', 'schema': {'type': 'list', 'default': 'lastUpdated', 'items': {'type': 'str', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}, 'uniqueItems': True}, 'type': 'list', 'default': 'lastUpdated', 'items': {'type': 'str', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}, 'uniqueItems': True}, {'name': 'startTimestamp', 'in': 'query', 'description': 'Lower bound timestamp filter value', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'endTimestamp', 'in': 'query', 'description': 'Upper bound timestamp filter value', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'includeCode', 'in': 'query', 'description': 'Whether to include code in results', 'schema': {'type': 'boolean'}, 'type': 'bool'}, {'name': 'sortBy', 'in': 'query', 'description': 'Field to sort by', 'schema': {'type': 'list', 'enum': ['id', 'name', 'validFrom', 'validTo', 'created', 'lastUpdated', 'deleted', '-id', '-name', '-validFrom', '-validTo', '-created', '-lastUpdated', '-deleted'], 'items': {'type': 'string'}}, 'type': 'list', 'enum': ['id', 'name', 'validFrom', 'validTo', 'created', 'lastUpdated', 'deleted', '-id', '-name', '-validFrom', '-validTo', '-created', '-lastUpdated', '-deleted'], 'items': {'type': 'string'}}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'schema': {'type': 'int', 'default': '25'}, 'type': 'int', 'default': '25'}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'schema': {'type': 'int', 'default': '0'}, 'type': 'int', 'default': '0'}], 'responses': {'default': {'description': 'Simple search for match filters', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': "Match filters compare events against a set of criteria.\nIf the criteria match then one or more actions will be performed on the event.\nPossible actions are:\n  * drop - If the drop action is added, the event is dropped and won't be sent forward\n  * newSeverity - If newSeverity is set, the severity of the event is set to the new value\n  * newAggregationKey - If newAggregationKey is set, then the aggregation key is set to the new value\n  * newSourceAggregationBits - If newSourceAggregationBits is set, the aggregation bits for the source IP is\n    set to the selected value\n  * newDestinationAggregationBits - If newDestinationAggregationBits is set, the aggregation bits for the\n    destination IP is set to the selected value\n  * transformCode - If transformCode is set, the groovy code is run is run on the event. Should return the\n    transformed event\n  * continueAfterTransform - If continueAfterTransform is set, the filter matcher will continue looking for\n    matching filters\n\nBoth matchCode and transformCode implement methods with the following parameters\n  * event: The event to transform or check for match\n  * filter: The match filter itself\n", 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be performed on the event', 'properties': {'associatedCaseID': {'type': 'integer', 'format': 'int64', 'description': 'The case this filter is associated with'}, 'changeAggregationKey': {'type': 'boolean', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'boolean', 'description': 'If true, this filter will continue to look for new events after transform'}, 'drop': {'type': 'boolean', 'description': "If true, the event is dropped and won't be sent forward"}, 'dropRaw': {'type': 'boolean', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'boolean', 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'string', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'string', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'boolean', 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'boolean', 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'string', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was modified'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filterType': {'type': 'string', 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'alarm': {'type': 'array', 'description': 'Will only match events connected to these alarms', 'items': {'type': 'object', 'description': 'Will only match events connected to these alarms', 'properties': {'description': {'type': 'string', 'description': 'The description of the alarm'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the alarm'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the alarm'}}}, 'uniqueItems': True}, 'attackCategory': {'type': 'array', 'description': 'Will only match events belonging to these attack categories', 'items': {'type': 'object', 'description': 'Will only match events belonging to these attack categories', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the category.'}, 'info': {'type': 'string', 'description': 'Short information about the category.'}, 'name': {'type': 'string', 'description': 'Name of the category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the category.'}}}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'array', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'array', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'domainPattern': {'type': 'string', 'description': 'Will only match events where the domain matches this regex'}, 'excludeEventFlags': {'type': 'array', 'description': 'Will only match events that does not have any of these flags', 'items': {'type': 'string', 'description': 'Will only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeEventFlags': {'type': 'array', 'description': 'Will only match events that have these flags', 'items': {'type': 'string', 'description': 'Will only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'location': {'type': 'array', 'description': 'Will only match events from the these locations', 'items': {'type': 'object', 'description': 'Will only match events from the these locations', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the Location'}, 'name': {'type': 'string', 'description': 'The name of the Location'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the Location'}}}, 'uniqueItems': True}, 'matchCode': {'type': 'string', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend.'}, 'maxSeverity': {'type': 'string', 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'minSeverity': {'type': 'string', 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Will only match events which have these properties'}, 'description': 'Will only match events which have these properties'}, 'protocol': {'type': 'string', 'description': 'Will only match events with the provided protocol'}, 'signature': {'type': 'array', 'description': 'Will only match events with these attack identifiers', 'items': {'type': 'string', 'description': 'Will only match events with these attack identifiers'}, 'uniqueItems': True}, 'sourceIPAddresses': {'type': 'array', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'array', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'array', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'array', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'uriPattern': {'type': 'string', 'description': 'Will only match events where the uri matches this regex'}}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'hasMatchCode', 'hasTransformCode']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'index': {'type': 'integer', 'format': 'int64', 'description': 'The execution index'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of this filter instance'}, 'validFrom': {'type': 'integer', 'format': 'int64', 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'integer', 'format': 'int64', 'description': 'When the filter stops being applied'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
list_match_filter_revisions = {'tags': ['eventfilters/v2/match'], 'summary': 'Gets a match filters earlier revisions (INTERNAL)', 'description': '', 'operationId': 'getMatchFilterRevisions', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter to fetch revisions for', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'description': 'The max amount of revisions to return', 'schema': {'type': 'int', 'default': '25'}, 'type': 'int', 'default': '25'}, {'name': 'offset', 'in': 'query', 'description': 'The number of revisions to skip before returning', 'schema': {'type': 'int', 'default': '0'}, 'type': 'int', 'default': '0'}], 'responses': {'default': {'description': 'Gets a match filters earlier revisions', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'A an earlier version of a filter. Should describe when and why a filter was changes, and who made the change', 'properties': {'comment': {'type': 'string', 'description': 'An explanation of the change that was made'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp the filter was updated'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of the filter'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
revert_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Reverts a match filter to a previous revision (INTERNAL)', 'description': '', 'operationId': 'revertMatchFilter', 'parameters': [{'name': 'filterID', 'in': 'path', 'description': 'ID of the filter to revert( must be the current version of a filter)', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to revert a match filter to an earlier version', 'properties': {'comment': {'type': 'str', 'description': 'A comment describing why the filter was reverted'}, 'revisionID': {'type': 'int', 'description': 'The ID of the filter to revert to. Must be a revision of the filter to revert'}}, 'required': ['comment']}}}}, 'responses': {'default': {'description': 'Reverts a match filter to a previous revision', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': "Match filters compare events against a set of criteria.\nIf the criteria match then one or more actions will be performed on the event.\nPossible actions are:\n  * drop - If the drop action is added, the event is dropped and won't be sent forward\n  * newSeverity - If newSeverity is set, the severity of the event is set to the new value\n  * newAggregationKey - If newAggregationKey is set, then the aggregation key is set to the new value\n  * newSourceAggregationBits - If newSourceAggregationBits is set, the aggregation bits for the source IP is\n    set to the selected value\n  * newDestinationAggregationBits - If newDestinationAggregationBits is set, the aggregation bits for the\n    destination IP is set to the selected value\n  * transformCode - If transformCode is set, the groovy code is run is run on the event. Should return the\n    transformed event\n  * continueAfterTransform - If continueAfterTransform is set, the filter matcher will continue looking for\n    matching filters\n\nBoth matchCode and transformCode implement methods with the following parameters\n  * event: The event to transform or check for match\n  * filter: The match filter itself\n", 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be performed on the event', 'properties': {'associatedCaseID': {'type': 'integer', 'format': 'int64', 'description': 'The case this filter is associated with'}, 'changeAggregationKey': {'type': 'boolean', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'boolean', 'description': 'If true, this filter will continue to look for new events after transform'}, 'drop': {'type': 'boolean', 'description': "If true, the event is dropped and won't be sent forward"}, 'dropRaw': {'type': 'boolean', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'boolean', 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'string', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'string', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'boolean', 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'boolean', 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'string', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was modified'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filterType': {'type': 'string', 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'alarm': {'type': 'array', 'description': 'Will only match events connected to these alarms', 'items': {'type': 'object', 'description': 'Will only match events connected to these alarms', 'properties': {'description': {'type': 'string', 'description': 'The description of the alarm'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the alarm'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the alarm'}}}, 'uniqueItems': True}, 'attackCategory': {'type': 'array', 'description': 'Will only match events belonging to these attack categories', 'items': {'type': 'object', 'description': 'Will only match events belonging to these attack categories', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the category.'}, 'info': {'type': 'string', 'description': 'Short information about the category.'}, 'name': {'type': 'string', 'description': 'Name of the category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the category.'}}}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'array', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'array', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'domainPattern': {'type': 'string', 'description': 'Will only match events where the domain matches this regex'}, 'excludeEventFlags': {'type': 'array', 'description': 'Will only match events that does not have any of these flags', 'items': {'type': 'string', 'description': 'Will only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeEventFlags': {'type': 'array', 'description': 'Will only match events that have these flags', 'items': {'type': 'string', 'description': 'Will only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'location': {'type': 'array', 'description': 'Will only match events from the these locations', 'items': {'type': 'object', 'description': 'Will only match events from the these locations', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the Location'}, 'name': {'type': 'string', 'description': 'The name of the Location'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the Location'}}}, 'uniqueItems': True}, 'matchCode': {'type': 'string', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend.'}, 'maxSeverity': {'type': 'string', 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'minSeverity': {'type': 'string', 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Will only match events which have these properties'}, 'description': 'Will only match events which have these properties'}, 'protocol': {'type': 'string', 'description': 'Will only match events with the provided protocol'}, 'signature': {'type': 'array', 'description': 'Will only match events with these attack identifiers', 'items': {'type': 'string', 'description': 'Will only match events with these attack identifiers'}, 'uniqueItems': True}, 'sourceIPAddresses': {'type': 'array', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'array', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'array', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'array', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'uriPattern': {'type': 'string', 'description': 'Will only match events where the uri matches this regex'}}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'hasMatchCode', 'hasTransformCode']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'index': {'type': 'integer', 'format': 'int64', 'description': 'The execution index'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of this filter instance'}, 'validFrom': {'type': 'integer', 'format': 'int64', 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'integer', 'format': 'int64', 'description': 'When the filter stops being applied'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['revertMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
revive_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Revives a deleted a Match filter (INTERNAL)', 'description': '', 'operationId': 'reviveMatchFilter', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'responses': {'default': {'description': 'Revives a deleted a Match filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': "Match filters compare events against a set of criteria.\nIf the criteria match then one or more actions will be performed on the event.\nPossible actions are:\n  * drop - If the drop action is added, the event is dropped and won't be sent forward\n  * newSeverity - If newSeverity is set, the severity of the event is set to the new value\n  * newAggregationKey - If newAggregationKey is set, then the aggregation key is set to the new value\n  * newSourceAggregationBits - If newSourceAggregationBits is set, the aggregation bits for the source IP is\n    set to the selected value\n  * newDestinationAggregationBits - If newDestinationAggregationBits is set, the aggregation bits for the\n    destination IP is set to the selected value\n  * transformCode - If transformCode is set, the groovy code is run is run on the event. Should return the\n    transformed event\n  * continueAfterTransform - If continueAfterTransform is set, the filter matcher will continue looking for\n    matching filters\n\nBoth matchCode and transformCode implement methods with the following parameters\n  * event: The event to transform or check for match\n  * filter: The match filter itself\n", 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be performed on the event', 'properties': {'associatedCaseID': {'type': 'integer', 'format': 'int64', 'description': 'The case this filter is associated with'}, 'changeAggregationKey': {'type': 'boolean', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'boolean', 'description': 'If true, this filter will continue to look for new events after transform'}, 'drop': {'type': 'boolean', 'description': "If true, the event is dropped and won't be sent forward"}, 'dropRaw': {'type': 'boolean', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'boolean', 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'string', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'string', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'boolean', 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'boolean', 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'string', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was modified'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filterType': {'type': 'string', 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'alarm': {'type': 'array', 'description': 'Will only match events connected to these alarms', 'items': {'type': 'object', 'description': 'Will only match events connected to these alarms', 'properties': {'description': {'type': 'string', 'description': 'The description of the alarm'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the alarm'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the alarm'}}}, 'uniqueItems': True}, 'attackCategory': {'type': 'array', 'description': 'Will only match events belonging to these attack categories', 'items': {'type': 'object', 'description': 'Will only match events belonging to these attack categories', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the category.'}, 'info': {'type': 'string', 'description': 'Short information about the category.'}, 'name': {'type': 'string', 'description': 'Name of the category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the category.'}}}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'array', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'array', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'domainPattern': {'type': 'string', 'description': 'Will only match events where the domain matches this regex'}, 'excludeEventFlags': {'type': 'array', 'description': 'Will only match events that does not have any of these flags', 'items': {'type': 'string', 'description': 'Will only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeEventFlags': {'type': 'array', 'description': 'Will only match events that have these flags', 'items': {'type': 'string', 'description': 'Will only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'location': {'type': 'array', 'description': 'Will only match events from the these locations', 'items': {'type': 'object', 'description': 'Will only match events from the these locations', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the Location'}, 'name': {'type': 'string', 'description': 'The name of the Location'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the Location'}}}, 'uniqueItems': True}, 'matchCode': {'type': 'string', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend.'}, 'maxSeverity': {'type': 'string', 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'minSeverity': {'type': 'string', 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Will only match events which have these properties'}, 'description': 'Will only match events which have these properties'}, 'protocol': {'type': 'string', 'description': 'Will only match events with the provided protocol'}, 'signature': {'type': 'array', 'description': 'Will only match events with these attack identifiers', 'items': {'type': 'string', 'description': 'Will only match events with these attack identifiers'}, 'uniqueItems': True}, 'sourceIPAddresses': {'type': 'array', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'array', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'array', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'array', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'uriPattern': {'type': 'string', 'description': 'Will only match events where the uri matches this regex'}}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'hasMatchCode', 'hasTransformCode']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'index': {'type': 'integer', 'format': 'int64', 'description': 'The execution index'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of this filter instance'}, 'validFrom': {'type': 'integer', 'format': 'int64', 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'integer', 'format': 'int64', 'description': 'When the filter stops being applied'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['reviveMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
search_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Searches for match filters (INTERNAL)', 'description': '', 'operationId': 'searchMatchFilter', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to search for match filters', 'properties': {'alarmID': {'type': 'list', 'description': 'Limit to filters which target the following alarms', 'items': {'type': 'int', 'description': 'Limit to filters which target the following alarms'}, 'uniqueItems': True}, 'associatedCaseID': {'type': 'list', 'description': 'Limit to streaming filters for the following cases ', 'items': {'type': 'int', 'description': 'Limit to streaming filters for the following cases '}, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Limit to filters which target the following attack categories, identified by id or shortname', 'items': {'type': 'str', 'description': 'Limit to filters which target the following attack categories, identified by id or shortname'}, 'uniqueItems': True}, 'customer': {'type': 'list', 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'items': {'type': 'str', 'description': 'Limit search to filters with the given customers, identified by id or shortname'}, 'uniqueItems': True}, 'endTimestamp': {'type': 'int', 'default': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp)', 'minimum': 0}, 'excludeEventFlags': {'type': 'list', 'description': 'Limit to filters which exclude the given event flags', 'items': {'type': 'str', 'description': 'Limit to filters which exclude the given event flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'excludeFlags': {'type': 'list', 'description': 'Exclude filters which have the following flags set', 'items': {'type': 'str', 'description': 'Exclude filters which have the following flags set', 'enum': ['deleted', 'enabled', 'controlled']}, 'uniqueItems': True}, 'filterID': {'type': 'list', 'description': 'Limit search to filters with the given IDs', 'items': {'type': 'int', 'description': 'Limit search to filters with the given IDs'}, 'uniqueItems': True}, 'filterType': {'type': 'list', 'description': 'Limit search to filters with the given filter types', 'items': {'type': 'str', 'description': 'Limit search to filters with the given filter types', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'AttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter']}, 'uniqueItems': True}, 'includeAscendingCustomers': {'type': 'bool', 'description': 'When limiting filters by customer, include filters of ascending customers (default is false)'}, 'includeCode': {'type': 'bool', 'default': False, 'description': 'Whether or not to include code in the result object. The code is only returned if set to true'}, 'includeDeleted': {'type': 'bool', 'default': False, 'description': 'Set to true to include deleted filters (excluded by default).'}, 'includeDescendingCustomers': {'type': 'bool', 'default': True, 'description': 'When limiting filters by customer, include filters of descending customers (default is true)'}, 'includeEventFlags': {'type': 'list', 'description': 'Limit to filters which include the given event flags', 'items': {'type': 'str', 'description': 'Limit to filters which include the given event flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeFlags': {'type': 'list', 'description': 'Limit to filters which have the following flags set', 'items': {'type': 'str', 'description': 'Limit to filters which have the following flags set', 'enum': ['deleted', 'enabled', 'controlled']}, 'uniqueItems': True}, 'keywordFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'Defines which fields will be searched by keywords (default all supported fields)', 'items': {'type': 'str', 'default': 'all', 'description': 'Defines which fields will be searched by keywords (default all supported fields)', 'enum': ['id', 'description', 'name', 'matchCode', 'transformCode', 'protocol', 'domainPattern', 'uriPattern', 'newAggregationKey', 'label', 'attackIdentifier', 'signature', 'propertyKey', 'propertyValue', 'all']}, 'uniqueItems': True}, 'keywordMatchStrategy': {'type': 'str', 'default': 'all', 'description': 'Defines how strict different keywords should be matched (default match all keywords)', 'enum': ['any', 'all']}, 'keywords': {'type': 'list', 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'items': {'type': 'str', 'description': 'Search for keywords against fields defined by keywordFieldStrategy'}, 'uniqueItems': True}, 'limit': {'type': 'int', 'default': 25, 'description': 'Limit maximum amount of results', 'minimum': 0}, 'location': {'type': 'list', 'description': 'Limit to filters which target the following locations, identified by id or shortname', 'items': {'type': 'str', 'description': 'Limit to filters which target the following locations, identified by id or shortname'}, 'uniqueItems': True}, 'offset': {'type': 'int', 'default': 0, 'description': 'Skip specified amount of results', 'minimum': 0}, 'sortBy': {'type': 'list', 'items': {'type': 'str', 'enum': ['id', 'name', 'validFrom', 'validTo', 'created', 'lastUpdated', 'deleted', '-id', '-name', '-validFrom', '-validTo', '-created', '-lastUpdated', '-deleted']}}, 'startTimestamp': {'type': 'int', 'default': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp)', 'minimum': 0}, 'subCriteria': {'type': 'list', 'description': 'Subcriteria to add to the search', 'items': {'type': 'dict', 'description': 'The sub criteria for searching for match filters', 'properties': {'alarmID': {'type': 'list', 'description': 'Limit to filters which target the following alarms', 'items': {'type': 'int', 'description': 'Limit to filters which target the following alarms'}, 'uniqueItems': True}, 'associatedCaseID': {'type': 'list', 'description': 'Limit to streaming filters for the following cases ', 'items': {'type': 'int', 'description': 'Limit to streaming filters for the following cases '}, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Limit to filters which target the following attack categories, identified by id or shortname', 'items': {'type': 'str', 'description': 'Limit to filters which target the following attack categories, identified by id or shortname'}, 'uniqueItems': True}, 'customer': {'type': 'list', 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'items': {'type': 'str', 'description': 'Limit search to filters with the given customers, identified by id or shortname'}, 'uniqueItems': True}, 'endTimestamp': {'type': 'int', 'default': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp)', 'minimum': 0}, 'exclude': {'type': 'boolean'}, 'excludeEventFlags': {'type': 'list', 'description': 'Limit to filters which exclude the given event flags', 'items': {'type': 'str', 'description': 'Limit to filters which exclude the given event flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'excludeFlags': {'type': 'list', 'description': 'Exclude filters which have the following flags set', 'items': {'type': 'str', 'description': 'Exclude filters which have the following flags set', 'enum': ['deleted', 'enabled', 'controlled']}, 'uniqueItems': True}, 'filterID': {'type': 'list', 'description': 'Limit search to filters with the given IDs', 'items': {'type': 'int', 'description': 'Limit search to filters with the given IDs'}, 'uniqueItems': True}, 'filterType': {'type': 'list', 'description': 'Limit search to filters with the given filter types', 'items': {'type': 'str', 'description': 'Limit search to filters with the given filter types', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'AttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter']}, 'uniqueItems': True}, 'includeDeleted': {'type': 'bool', 'default': False, 'description': 'Set to true to include deleted filters (excluded by default).'}, 'includeEventFlags': {'type': 'list', 'description': 'Limit to filters which include the given event flags', 'items': {'type': 'str', 'description': 'Limit to filters which include the given event flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeFlags': {'type': 'list', 'description': 'Limit to filters which have the following flags set', 'items': {'type': 'str', 'description': 'Limit to filters which have the following flags set', 'enum': ['deleted', 'enabled', 'controlled']}, 'uniqueItems': True}, 'keywordFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'Defines which fields will be searched by keywords (default all supported fields)', 'items': {'type': 'str', 'default': 'all', 'description': 'Defines which fields will be searched by keywords (default all supported fields)', 'enum': ['id', 'description', 'name', 'matchCode', 'transformCode', 'protocol', 'domainPattern', 'uriPattern', 'newAggregationKey', 'label', 'attackIdentifier', 'signature', 'propertyKey', 'propertyValue', 'all']}, 'uniqueItems': True}, 'keywordMatchStrategy': {'type': 'str', 'default': 'all', 'description': 'Defines how strict different keywords should be matched (default match all keywords)', 'enum': ['any', 'all']}, 'keywords': {'type': 'list', 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'items': {'type': 'str', 'description': 'Search for keywords against fields defined by keywordFieldStrategy'}, 'uniqueItems': True}, 'location': {'type': 'list', 'description': 'Limit to filters which target the following locations, identified by id or shortname', 'items': {'type': 'str', 'description': 'Limit to filters which target the following locations, identified by id or shortname'}, 'uniqueItems': True}, 'required': {'type': 'boolean'}, 'startTimestamp': {'type': 'int', 'default': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp)', 'minimum': 0}, 'timeFieldStrategy': {'type': 'list', 'default': 'lastUpdated', 'description': 'Defines which timestamps will be included in the search (default lastUpdated)', 'items': {'type': 'str', 'default': 'lastUpdated', 'description': 'Defines which timestamps will be included in the search (default lastUpdated)', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any)', 'enum': ['any', 'all']}, 'user': {'type': 'list', 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'items': {'type': 'str', 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively'}, 'uniqueItems': True}, 'userFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'Defines which fields will be searched by user (default all supported fields)', 'items': {'type': 'str', 'default': 'all', 'description': 'Defines which fields will be searched by user (default all supported fields)', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}, 'uniqueItems': True}, 'userMatchStrategy': {'type': 'str', 'default': 'all', 'description': 'Defines how strict different keywords should be matched (default match all keywords)', 'enum': ['any', 'all']}}}, 'uniqueItems': True}, 'timeFieldStrategy': {'type': 'list', 'default': 'lastUpdated', 'description': 'Defines which timestamps will be included in the search (default lastUpdated)', 'items': {'type': 'str', 'default': 'lastUpdated', 'description': 'Defines which timestamps will be included in the search (default lastUpdated)', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any)', 'enum': ['any', 'all']}, 'user': {'type': 'list', 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'items': {'type': 'str', 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively'}, 'uniqueItems': True}, 'userFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'Defines which fields will be searched by user (default all supported fields)', 'items': {'type': 'str', 'default': 'all', 'description': 'Defines which fields will be searched by user (default all supported fields)', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}, 'uniqueItems': True}, 'userMatchStrategy': {'type': 'str', 'default': 'all', 'description': 'Defines how strict different keywords should be matched (default match all keywords)', 'enum': ['any', 'all']}}}}}, 'required': True}, 'responses': {'default': {'description': 'Searches for match filters', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': "Match filters compare events against a set of criteria.\nIf the criteria match then one or more actions will be performed on the event.\nPossible actions are:\n  * drop - If the drop action is added, the event is dropped and won't be sent forward\n  * newSeverity - If newSeverity is set, the severity of the event is set to the new value\n  * newAggregationKey - If newAggregationKey is set, then the aggregation key is set to the new value\n  * newSourceAggregationBits - If newSourceAggregationBits is set, the aggregation bits for the source IP is\n    set to the selected value\n  * newDestinationAggregationBits - If newDestinationAggregationBits is set, the aggregation bits for the\n    destination IP is set to the selected value\n  * transformCode - If transformCode is set, the groovy code is run is run on the event. Should return the\n    transformed event\n  * continueAfterTransform - If continueAfterTransform is set, the filter matcher will continue looking for\n    matching filters\n\nBoth matchCode and transformCode implement methods with the following parameters\n  * event: The event to transform or check for match\n  * filter: The match filter itself\n", 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be performed on the event', 'properties': {'associatedCaseID': {'type': 'integer', 'format': 'int64', 'description': 'The case this filter is associated with'}, 'changeAggregationKey': {'type': 'boolean', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'boolean', 'description': 'If true, this filter will continue to look for new events after transform'}, 'drop': {'type': 'boolean', 'description': "If true, the event is dropped and won't be sent forward"}, 'dropRaw': {'type': 'boolean', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'boolean', 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'string', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'string', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'boolean', 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'boolean', 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'string', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was modified'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filterType': {'type': 'string', 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'alarm': {'type': 'array', 'description': 'Will only match events connected to these alarms', 'items': {'type': 'object', 'description': 'Will only match events connected to these alarms', 'properties': {'description': {'type': 'string', 'description': 'The description of the alarm'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the alarm'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the alarm'}}}, 'uniqueItems': True}, 'attackCategory': {'type': 'array', 'description': 'Will only match events belonging to these attack categories', 'items': {'type': 'object', 'description': 'Will only match events belonging to these attack categories', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the category.'}, 'info': {'type': 'string', 'description': 'Short information about the category.'}, 'name': {'type': 'string', 'description': 'Name of the category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the category.'}}}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'array', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'array', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'domainPattern': {'type': 'string', 'description': 'Will only match events where the domain matches this regex'}, 'excludeEventFlags': {'type': 'array', 'description': 'Will only match events that does not have any of these flags', 'items': {'type': 'string', 'description': 'Will only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeEventFlags': {'type': 'array', 'description': 'Will only match events that have these flags', 'items': {'type': 'string', 'description': 'Will only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'location': {'type': 'array', 'description': 'Will only match events from the these locations', 'items': {'type': 'object', 'description': 'Will only match events from the these locations', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the Location'}, 'name': {'type': 'string', 'description': 'The name of the Location'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the Location'}}}, 'uniqueItems': True}, 'matchCode': {'type': 'string', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend.'}, 'maxSeverity': {'type': 'string', 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'minSeverity': {'type': 'string', 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Will only match events which have these properties'}, 'description': 'Will only match events which have these properties'}, 'protocol': {'type': 'string', 'description': 'Will only match events with the provided protocol'}, 'signature': {'type': 'array', 'description': 'Will only match events with these attack identifiers', 'items': {'type': 'string', 'description': 'Will only match events with these attack identifiers'}, 'uniqueItems': True}, 'sourceIPAddresses': {'type': 'array', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'array', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'array', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'array', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'uriPattern': {'type': 'string', 'description': 'Will only match events where the uri matches this regex'}}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'hasMatchCode', 'hasTransformCode']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'index': {'type': 'integer', 'format': 'int64', 'description': 'The execution index'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of this filter instance'}, 'validFrom': {'type': 'integer', 'format': 'int64', 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'integer', 'format': 'int64', 'description': 'When the filter stops being applied'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
search_match_filter_status = {'tags': ['eventfilters/v2/match'], 'summary': 'Search for match filters instance statuses for filters that match the criteria (INTERNAL)', 'description': '', 'operationId': 'searchMatchFilterStatus', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'customer': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'filterID': {'type': 'list', 'items': {'type': 'int'}, 'uniqueItems': True}, 'filterStatus': {'type': 'list', 'items': {'type': 'str', 'enum': ['ok', 'error', 'disabled', 'disabledByCircuitBreaker', 'disabledByError']}, 'uniqueItems': True}, 'filterType': {'type': 'str', 'enum': ['analysis', 'annotation', 'match']}, 'limit': {'type': 'int'}, 'loggingStatus': {'type': 'list', 'items': {'type': 'str', 'enum': ['debug', 'info']}, 'uniqueItems': True}, 'offset': {'type': 'int'}}}}}, 'required': True}, 'responses': {'default': {'description': 'Search for match filters instance statuses for filters that match the criteria', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'An object describing the current status of a match filter instance on a host', 'properties': {'container': {'type': 'object', 'description': 'An object containing information about the container the filter instance is running on', 'properties': {'componentName': {'type': 'string', 'description': 'The name of the component the filter is running on'}, 'instanceID': {'type': 'integer', 'format': 'int32', 'description': 'The id of the container the filter is running on'}}}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'errorMessage': {'type': 'string', 'description': 'The current filter status of the filter'}, 'filterStatus': {'type': 'string', 'description': 'The current filter status of the filter', 'enum': ['ok', 'error', 'disabled', 'disabledByCircuitBreaker', 'disabledByError']}, 'host': {'type': 'object', 'description': 'An object containing information about the host the filter is running on', 'properties': {'hostName': {'type': 'string', 'description': 'The name of the host the filter is running on'}, 'id': {'type': 'integer', 'format': 'int32', 'description': 'The ID of the host'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'loggingStatus': {'type': 'string', 'description': 'The current logging status of the filter', 'enum': ['debug', 'info']}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision of the filter that is running'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['searchMatchFilterStatus'], 'x-Argus-ApiStatus': 'INTERNAL'}
set_match_filter_log_level = {'tags': ['eventfilters/v2/match'], 'summary': 'Sets the log level of a Match filter (INTERNAL)', 'description': '', 'operationId': 'setMatchFilterLogLevel', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to set the log level of the instances of a match filter', 'properties': {'logLevel': {'type': 'str', 'description': 'The new log level of the filter', 'enum': ['debug', 'info']}}, 'required': ['logLevel']}}}, 'required': True}, 'responses': {'default': {'description': 'Sets the log level of a Match filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The log level filter instances of this filter should be set to', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'logLevel': {'type': 'string', 'description': 'The new log level of the filter', 'enum': ['debug', 'info']}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}
update_match_filter = {'tags': ['eventfilters/v2/match'], 'summary': 'Updates a match filter (INTERNAL)', 'description': '', 'operationId': 'updateMatchFilter', 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'A request to update a match filter', 'properties': {'actions': {'type': 'dict', 'properties': {'associatedCaseID': {'type': 'int', 'description': 'Adds an associated case ID. Valid field for AggregatedAttackEventMatchFilter and AggregatedIPAttackEventMatchFilter'}, 'changeAggregationKey': {'type': 'bool', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey. Valid field for all filters'}, 'continueAfterTransform': {'type': 'bool', 'description': 'If true, this filter will continue to look for new events after transform. Valid field for all filters'}, 'disableCompileStaticValidation': {'type': 'bool', 'default': False, 'description': 'If true, we will skip static validation of the transformCode'}, 'drop': {'type': 'bool', 'description': 'If true, this event will be dropped. Valid field for all filters'}, 'dropRaw': {'type': 'bool', 'description': 'If true, then RAW events will be dropped. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'invertIp': {'type': 'bool', 'description': 'If true, this filter will switch the source and destination ip in the event. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'newAggregationKey': {'type': 'str', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true. Valid field for all filters'}, 'newDestinationAggregationBits': {'type': 'int', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'newSeverity': {'type': 'str', 'description': 'The new severity of events that are matched by the filter. Valid field for all filters', 'enum': ['unset', 'lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'int', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'noTransform': {'type': 'bool', 'description': 'If true, this event will not be transformed. Valid field for all filters'}, 'stopAfterNoMatch': {'type': 'bool', 'description': 'If true, this filter will stop looking for new matches after not matching. Valid field for all filters'}, 'transformCode': {'type': 'str', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend. Valid field for all filters'}}}, 'addLabels': {'type': 'list', 'description': 'A set of labels to add to the filter.  Will be applied after removing labels. Will throw an exception if used in conjunction with setLabels ', 'items': {'type': 'str', 'description': 'A set of labels to add to the filter.  Will be applied after removing labels. Will throw an exception if used in conjunction with setLabels '}, 'uniqueItems': True}, 'comment': {'type': 'str', 'description': 'A comment describing why the filter was created'}, 'description': {'type': 'str', 'description': 'A description of the filter'}, 'filters': {'type': 'dict', 'properties': {'matchCode': {'type': 'str', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend. Valid field for all filters'}, 'disableCompileStaticValidation': {'type': 'bool', 'default': False, 'description': 'If true, we will skip static validation of the matchCode'}, 'minSeverity': {'type': 'str', 'description': 'Only match events with severity at least this value. Valid field for all filters', 'enum': ['unset', 'lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'maxSeverity': {'type': 'str', 'description': 'Only match events with severity this value or lower. Valid field for all filters', 'enum': ['unset', 'lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'includeEventFlags': {'type': 'list', 'description': 'Only match events that have these flags. Valid field for all filters', 'items': {'type': 'str', 'description': 'Only match events that have these flags. Valid field for all filters', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'excludeEventFlags': {'type': 'list', 'description': 'Only match events that does not have any of these flags. Valid field for all filters', 'items': {'type': 'str', 'description': 'Only match events that does not have any of these flags. Valid field for all filters', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'protocol': {'type': 'str', 'description': 'Only match events with the provided protocol. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'domainPattern': {'type': 'str', 'description': 'Only match events where the domain matches this regex. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uriPattern': {'type': 'str', 'description': 'Only match events where the uri matches this regex. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'sourceIPAddresses': {'type': 'list', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'sourcePorts': {'type': 'list', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter', 'items': {'type': 'int', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'list', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'destinationPorts': {'type': 'list', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter', 'items': {'type': 'int', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'list', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'sourceOrDestinationPorts': {'type': 'list', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter', 'items': {'type': 'int', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uniqueItems': True}, 'location': {'type': 'list', 'description': 'Only match events from the these locations, given by shortname or id. Valid field for all filters', 'items': {'type': 'str', 'description': 'Only match events from the these locations, given by shortname or id. Valid field for all filters'}, 'uniqueItems': True}, 'signature': {'type': 'list', 'description': 'Only match events with these signatures. Valid field for all filters', 'items': {'type': 'str', 'description': 'Only match events with these signatures. Valid field for all filters'}, 'uniqueItems': True}, 'alarmID': {'type': 'list', 'description': 'Only match events connected to these alarms, given by id. Valid field for all filters', 'items': {'type': 'int', 'description': 'Only match events connected to these alarms, given by id. Valid field for all filters'}, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Only match events belonging to these attack categories, given by shortname or id. Valid field for all filters', 'items': {'type': 'str', 'description': 'Only match events belonging to these attack categories, given by shortname or id. Valid field for all filters'}, 'uniqueItems': True}, 'properties': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Only match events which have these properties. Valid field for all filters'}, 'description': 'Only match events which have these properties. Valid field for all filters'}, 'alarm': {'type': 'dict', 'properties': {'matchCode': {'type': 'str', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend. Valid field for all filters'}, 'disableCompileStaticValidation': {'type': 'bool', 'default': False, 'description': 'If true, we will skip static validation of the matchCode'}, 'minSeverity': {'type': 'str', 'description': 'Only match events with severity at least this value. Valid field for all filters', 'enum': ['unset', 'lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'maxSeverity': {'type': 'str', 'description': 'Only match events with severity this value or lower. Valid field for all filters', 'enum': ['unset', 'lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'includeEventFlags': {'type': 'list', 'description': 'Only match events that have these flags. Valid field for all filters', 'items': {'type': 'str', 'description': 'Only match events that have these flags. Valid field for all filters', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'excludeEventFlags': {'type': 'list', 'description': 'Only match events that does not have any of these flags. Valid field for all filters', 'items': {'type': 'str', 'description': 'Only match events that does not have any of these flags. Valid field for all filters', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'protocol': {'type': 'str', 'description': 'Only match events with the provided protocol. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'domainPattern': {'type': 'str', 'description': 'Only match events where the domain matches this regex. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uriPattern': {'type': 'str', 'description': 'Only match events where the uri matches this regex. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'sourceIPAddresses': {'type': 'list', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'sourcePorts': {'type': 'list', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter', 'items': {'type': 'int', 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'list', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'destinationPorts': {'type': 'list', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter', 'items': {'type': 'int', 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'list', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter [format:ip]', 'items': {'type': 'str', 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'sourceOrDestinationPorts': {'type': 'list', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter', 'items': {'type': 'int', 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution. Valid field for IPAttackEventMatchFilter, AggregatedIPAttackEventMatchFilter, and NIDSEventMatchFilter'}, 'uniqueItems': True}, 'location': {'type': 'list', 'description': 'Only match events from the these locations, given by shortname or id. Valid field for all filters', 'items': {'type': 'str', 'description': 'Only match events from the these locations, given by shortname or id. Valid field for all filters'}, 'uniqueItems': True}, 'signature': {'type': 'list', 'description': 'Only match events with these signatures. Valid field for all filters', 'items': {'type': 'str', 'description': 'Only match events with these signatures. Valid field for all filters'}, 'uniqueItems': True}, 'alarmID': {'type': 'list', 'description': 'Only match events connected to these alarms, given by id. Valid field for all filters', 'items': {'type': 'int', 'description': 'Only match events connected to these alarms, given by id. Valid field for all filters'}, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Only match events belonging to these attack categories, given by shortname or id. Valid field for all filters', 'items': {'type': 'str', 'description': 'Only match events belonging to these attack categories, given by shortname or id. Valid field for all filters'}, 'uniqueItems': True}, 'properties': {'type': 'dict', 'additionalProperties': {'type': 'str', 'description': 'Only match events which have these properties. Valid field for all filters'}, 'description': 'Only match events which have these properties. Valid field for all filters'}, 'alarm': []}}}}, 'index': {'type': 'int', 'description': 'The index of the filter. Filters with lower index will be ran first.', 'maximum': 10, 'minimum': 0}, 'name': {'type': 'str', 'description': 'The name of the filter'}, 'removeLabels': {'type': 'list', 'description': 'A set of labels to remove from the filter.  Will be applied before adding labels and ignore filters that are not present. Will throw an exception if used in conjunction with setLabels ', 'items': {'type': 'str', 'description': 'A set of labels to remove from the filter.  Will be applied before adding labels and ignore filters that are not present. Will throw an exception if used in conjunction with setLabels '}, 'uniqueItems': True}, 'setLabels': {'type': 'list', 'description': 'Replace the current set of labels with these. Will throw an exception if used in conjunction with addLabels or removeLabels', 'items': {'type': 'str', 'description': 'Replace the current set of labels with these. Will throw an exception if used in conjunction with addLabels or removeLabels'}, 'uniqueItems': True}, 'validFrom': {'type': 'str', 'default': 'null', 'description': 'When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details. Null values will be ignored. Use 0 to unset  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'validTo': {'type': 'str', 'default': 'null', 'description': 'When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details. Null values will be ignored. Use 0 to unset  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}}, 'required': ['comment']}}}, 'required': True}, 'responses': {'default': {'description': 'Updates a match filter', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': "Match filters compare events against a set of criteria.\nIf the criteria match then one or more actions will be performed on the event.\nPossible actions are:\n  * drop - If the drop action is added, the event is dropped and won't be sent forward\n  * newSeverity - If newSeverity is set, the severity of the event is set to the new value\n  * newAggregationKey - If newAggregationKey is set, then the aggregation key is set to the new value\n  * newSourceAggregationBits - If newSourceAggregationBits is set, the aggregation bits for the source IP is\n    set to the selected value\n  * newDestinationAggregationBits - If newDestinationAggregationBits is set, the aggregation bits for the\n    destination IP is set to the selected value\n  * transformCode - If transformCode is set, the groovy code is run is run on the event. Should return the\n    transformed event\n  * continueAfterTransform - If continueAfterTransform is set, the filter matcher will continue looking for\n    matching filters\n\nBoth matchCode and transformCode implement methods with the following parameters\n  * event: The event to transform or check for match\n  * filter: The match filter itself\n", 'properties': {'actions': {'type': 'object', 'description': 'The actions which will be performed on the event', 'properties': {'associatedCaseID': {'type': 'integer', 'format': 'int64', 'description': 'The case this filter is associated with'}, 'changeAggregationKey': {'type': 'boolean', 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'continueAfterTransform': {'type': 'boolean', 'description': 'If true, this filter will continue to look for new events after transform'}, 'drop': {'type': 'boolean', 'description': "If true, the event is dropped and won't be sent forward"}, 'dropRaw': {'type': 'boolean', 'default': False, 'description': 'If true, then RAW events will be dropped'}, 'invertIp': {'type': 'boolean', 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'newAggregationKey': {'type': 'string', 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newDestinationAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'newSeverity': {'type': 'string', 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'newSourceAggregationBits': {'type': 'integer', 'format': 'int32', 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'noTransform': {'type': 'boolean', 'description': 'If true, this event will not be transformed'}, 'stopAfterNoMatch': {'type': 'boolean', 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'transformCode': {'type': 'string', 'description': 'Custom groovy code for how the event will be transformed. Will be validated in the backend'}}}, 'comment': {'type': 'string', 'description': 'A comment describing why the filter was modified'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'deletedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was deleted'}, 'description': {'type': 'string', 'description': 'A description of the filter'}, 'filterType': {'type': 'string', 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'filters': {'type': 'object', 'description': 'The filters used to select events', 'properties': {'alarm': {'type': 'array', 'description': 'Will only match events connected to these alarms', 'items': {'type': 'object', 'description': 'Will only match events connected to these alarms', 'properties': {'description': {'type': 'string', 'description': 'The description of the alarm'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the alarm'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the alarm'}}}, 'uniqueItems': True}, 'attackCategory': {'type': 'array', 'description': 'Will only match events belonging to these attack categories', 'items': {'type': 'object', 'description': 'Will only match events belonging to these attack categories', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the category.'}, 'info': {'type': 'string', 'description': 'Short information about the category.'}, 'name': {'type': 'string', 'description': 'Name of the category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the category.'}}}, 'uniqueItems': True}, 'destinationIPAddresses': {'type': 'array', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'destinationPorts': {'type': 'array', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution'}, 'uniqueItems': True}, 'domainPattern': {'type': 'string', 'description': 'Will only match events where the domain matches this regex'}, 'excludeEventFlags': {'type': 'array', 'description': 'Will only match events that does not have any of these flags', 'items': {'type': 'string', 'description': 'Will only match events that does not have any of these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'includeEventFlags': {'type': 'array', 'description': 'Will only match events that have these flags', 'items': {'type': 'string', 'description': 'Will only match events that have these flags', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}, 'uniqueItems': True}, 'location': {'type': 'array', 'description': 'Will only match events from the these locations', 'items': {'type': 'object', 'description': 'Will only match events from the these locations', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'The id of the Location'}, 'name': {'type': 'string', 'description': 'The name of the Location'}, 'shortName': {'type': 'string', 'description': 'The unique shortname of the Location'}}}, 'uniqueItems': True}, 'matchCode': {'type': 'string', 'description': 'Custom groovy code for when the filter should match an event. Will be validated in the backend.'}, 'maxSeverity': {'type': 'string', 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'minSeverity': {'type': 'string', 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'properties': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Will only match events which have these properties'}, 'description': 'Will only match events which have these properties'}, 'protocol': {'type': 'string', 'description': 'Will only match events with the provided protocol'}, 'signature': {'type': 'array', 'description': 'Will only match events with these attack identifiers', 'items': {'type': 'string', 'description': 'Will only match events with these attack identifiers'}, 'uniqueItems': True}, 'sourceIPAddresses': {'type': 'array', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationIPAddresses': {'type': 'array', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'string', 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourceOrDestinationPorts': {'type': 'array', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution'}, 'uniqueItems': True}, 'sourcePorts': {'type': 'array', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'items': {'type': 'integer', 'format': 'int32', 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution'}, 'uniqueItems': True}, 'uriPattern': {'type': 'string', 'description': 'Will only match events where the uri matches this regex'}}, 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses']}, 'flags': {'type': 'array', 'description': 'The flags that are set on the filter', 'items': {'type': 'string', 'description': 'The flags that are set on the filter', 'enum': ['deleted', 'enabled', 'controlled', 'hasMatchCode', 'hasTransformCode']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the filter'}, 'index': {'type': 'integer', 'format': 'int64', 'description': 'The execution index'}, 'labels': {'type': 'array', 'description': 'The set of labels that can be used to categorize the filter', 'items': {'type': 'string', 'description': 'The set of labels that can be used to categorize the filter'}, 'uniqueItems': True}, 'lastUpdatedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'lastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the filter was last updated'}, 'masterID': {'type': 'integer', 'format': 'int64', 'description': "The ID of the master filter of this filter. Will be 'null' for the current filter"}, 'name': {'type': 'string', 'description': 'The name of the filter'}, 'revision': {'type': 'integer', 'format': 'int64', 'description': 'The revision number of this filter instance'}, 'validFrom': {'type': 'integer', 'format': 'int64', 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'integer', 'format': 'int64', 'description': 'When the filter stops being applied'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateMatchFilter'], 'x-Argus-ApiStatus': 'INTERNAL'}