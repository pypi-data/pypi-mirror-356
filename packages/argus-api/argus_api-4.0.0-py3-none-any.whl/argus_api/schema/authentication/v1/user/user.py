"""Autogenerated API schema"""
from argus_api import session


create_and_download_private_key = {'tags': ['authentication/v1/signature'], 'summary': 'Create and return a new private key. (INTERNAL)', 'description': '', 'operationId': 'createAndDownloadPrivateKey', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'defaultKey': {'type': 'bool', 'description': 'If true, use/overwrite the default key (keyIndex=0) instead of selecting the next available keyIndex'}, 'name': {'type': 'str', 'description': 'A name to associate with the key'}, 'validDays': {'type': 'int', 'description': 'Number of days this key is valid, default is unlimited (0).', 'minimum': 0}, 'validSources': {'type': 'list', 'description': 'Valid source IPs/networks. Default is valid from all IPs.', 'items': {'type': 'str', 'description': 'Valid source IPs/networks. Default is valid from all IPs.'}, 'uniqueItems': True}}}}}}, 'responses': {'default': {'description': 'Create and return a new private key.', 'content': {'application/json': {}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-SIGNATURE'], 'x-Argus-ApiStatus': 'INTERNAL'}
delete_all_user_sessions = {'tags': ['authentication/v1/session'], 'summary': 'Delete all sessions belonging to specific user. The sessions will be deleted from the authorative cache and flushed from all distributed caches (PUBLIC)', 'description': '', 'operationId': 'deleteAllUserSessions', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'Username or ID of user to delete sessions for', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain ID or name for domain to lookup username from', 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Delete all sessions belonging to specific user. The sessions will be deleted from the authorative cache and flushed from all distributed caches', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'sessionsDeleted': {'type': 'integer', 'format': 'int32', 'description': 'Number of sessions successfully deleted'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User or session not found', 'content': {'application/json': {}}}, '412': {'description': 'Invalid arguments', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['deleteSession'], 'x-Argus-ApiStatus': 'PUBLIC'}
delete_signature = {'tags': ['authentication/v1/signature'], 'summary': 'Delete signature (INTERNAL)', 'description': '', 'operationId': 'deleteSignature', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'id', 'in': 'path', 'description': 'Key to delete signature for', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}], 'responses': {'default': {'description': 'Delete signature', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'deletedKey': {'type': 'string', 'description': 'The administratively deleted key from signature'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-SIGNATURE'], 'x-Argus-ApiStatus': 'INTERNAL'}
disable_method_for_user = {'tags': ['authentication/v1'], 'summary': 'Disable an authentication method for a user (PUBLIC)', 'description': '', 'operationId': 'disableMethodForUser', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to modify', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'method', 'in': 'path', 'description': 'Authentication method to enable', 'required': True, 'schema': {'type': 'str', 'enum': ['password', 'signature', 'sms', 'totp', 'apikey', 'ldap', 'openid']}, 'type': 'str', 'enum': ['password', 'signature', 'sms', 'totp', 'apikey', 'ldap', 'openid']}], 'responses': {'default': {'description': 'Disable an authentication method for a user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'initialized': {'type': 'boolean', 'description': 'Whether method has been initialized'}, 'lastLoginIP': {'type': 'string', 'description': 'Last login IP'}, 'lastLoginTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Last login time in ms'}, 'method': {'type': 'string', 'description': 'Authentication method', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'settings': {'type': 'object', 'additionalProperties': {'description': 'Authentication method settings'}, 'description': 'Authentication method settings'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
disable_user_enrollment = {'tags': ['authentication/v1/enrollment'], 'summary': 'Deactivate/abort enrollment for user (INTERNAL)', 'description': '', 'operationId': 'disableUserEnrollment', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User id or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'ID or shortname of domain to lookup user in. Defaults to current users domain', 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Deactivate/abort enrollment for user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object'}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Invalid argument', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['disableUserEnrollment'], 'x-Argus-ApiStatus': 'INTERNAL'}
download_public_key = {'tags': ['authentication/v1/signature'], 'summary': 'Download user public key (INTERNAL)', 'description': '', 'operationId': 'downloadPublicKey', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Download user public key', 'content': {'application/octet-stream': {}}}, '401': {'description': 'Authentication failed', 'content': {'application/octet-stream': {}}}, '403': {'description': 'Access denied', 'content': {'application/octet-stream': {}}}, '404': {'description': 'Not found', 'content': {'application/octet-stream': {}}}, '412': {'description': 'Validation error', 'content': {'application/octet-stream': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-SIGNATURE'], 'x-Argus-ApiStatus': 'INTERNAL'}
enable_method_for_user = {'tags': ['authentication/v1'], 'summary': 'Enable an authentication method for a user (PUBLIC)', 'description': '', 'operationId': 'enableMethodForUser', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to modify', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'method', 'in': 'path', 'description': 'Authentication method to enable', 'required': True, 'schema': {'type': 'str', 'enum': ['password', 'signature', 'sms', 'totp', 'apikey', 'ldap', 'openid']}, 'type': 'str', 'enum': ['password', 'signature', 'sms', 'totp', 'apikey', 'ldap', 'openid']}], 'responses': {'default': {'description': 'Enable an authentication method for a user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'initialized': {'type': 'boolean', 'description': 'Whether method has been initialized'}, 'lastLoginIP': {'type': 'string', 'description': 'Last login IP'}, 'lastLoginTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Last login time in ms'}, 'method': {'type': 'string', 'description': 'Authentication method', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'settings': {'type': 'object', 'additionalProperties': {'description': 'Authentication method settings'}, 'description': 'Authentication method settings'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
enable_user_enrollment = {'tags': ['authentication/v1/enrollment'], 'summary': 'Enable enrollment for another user (INTERNAL)', 'description': '', 'operationId': 'enableUserEnrollment', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User id or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'ID or shortname of domain to lookup user in. Defaults to current users domain', 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Admin request to enable enrollment for a user'}}}}, 'responses': {'default': {'description': 'Enable enrollment for another user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Response for admin request to enable enrollment for a user', 'properties': {'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Invalid argument', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['enableUserEnrollment'], 'x-Argus-ApiStatus': 'INTERNAL'}
evict_signature_session = {'tags': ['authentication/v1/signature'], 'summary': 'Evict user signature session (INTERNAL)', 'description': '', 'operationId': 'evictSignatureSession', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'keyID', 'in': 'query', 'description': 'Key to clear session for. If not specified, the session will be cleared for all keys', 'schema': {'type': 'int'}, 'type': 'int'}], 'responses': {'default': {'description': 'Evict user signature session', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'evictedKeys': {'type': 'array', 'description': 'The list of evicted key hashes', 'items': {'type': 'string', 'description': 'The list of evicted key hashes'}, 'uniqueItems': True}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-SIGNATURE'], 'x-Argus-ApiStatus': 'INTERNAL'}
get_user_authentication_events = {'tags': ['authentication/v1'], 'summary': 'List authentication events for the specified user (PUBLIC)', 'description': 'Returns a list of authentication events for the specified user', 'operationId': 'getUserAuthenticationEvents', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User to search for events for (id or shortname)', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'startTimestamp', 'in': 'query', 'description': 'Limit search to events after this timestamp (inclusive). May use millis since epoch, ISO-8601, or relative time format.', 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'endTimestamp', 'in': 'query', 'description': 'Limit search to events before this timestamp (inclusive). May use millis since epoch, ISO-8601, or relative time format.', 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Limit number of results', 'schema': {'type': 'int', 'default': '25'}, 'type': 'int', 'default': '25'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0'}, 'type': 'int', 'default': '0'}], 'responses': {'default': {'description': 'List authentication events for the specified user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'action': {'type': 'string', 'description': 'Action which was recorded.', 'enum': ['login', 'loginChallenge', 'smsDelivery', 'keyEnrolled', 'userBlocked', 'userUnblocked', 'enrollment', 'enrollmentDisabled', 'enrollmentChallenge', 'totpEnrolled']}, 'authenticationMethod': {'type': 'string', 'description': 'Related authentication method for this event. May be null.', 'enum': ['password', 'signature', 'sms', 'totp', 'apikey', 'ldap', 'openid', 'enrollment', 'impersonated']}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of this record'}, 'ip': {'type': 'string', 'description': 'IP of the client associated with this event. May be null for non-client events.'}, 'message': {'type': 'string', 'description': 'Specific message recorded for the action'}, 'result': {'type': 'string', 'description': 'Generic result for the action.', 'enum': ['success', 'failure']}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this event was recorded'}}}}}}}}}}, 'x-Argus-Required-Permissions': ['viewUserAuthenticationEvents'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_user_authentication_status = {'tags': ['authentication/v1'], 'summary': 'Retrieve user authentication status (PUBLIC)', 'description': '', 'operationId': 'getUserAuthenticationStatus', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to fetch status for', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain to lookup username in, defaults to current users domain', 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Retrieve user authentication status', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'blocked': {'type': 'boolean', 'description': 'If true, the target user is marked as blocked.'}, 'forcePasswordChange': {'type': 'boolean', 'description': 'If true, the target user is marked as force password change.'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewUsers'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_user_methods = {'tags': ['authentication/v1'], 'summary': 'List authentication methods enabled for a specified user (PUBLIC)', 'description': '', 'operationId': 'getUserMethods', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User to fetch methods for', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'List authentication methods enabled for a specified user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'initialized': {'type': 'boolean', 'description': 'Whether method has been initialized'}, 'lastLoginIP': {'type': 'string', 'description': 'Last login IP'}, 'lastLoginTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Last login time in ms'}, 'method': {'type': 'string', 'description': 'Authentication method', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'settings': {'type': 'object', 'additionalProperties': {'description': 'Authentication method settings'}, 'description': 'Authentication method settings'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Invalid arguments', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewUsers'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_user_openid_configuration = {'tags': ['authentication/v1/openid'], 'summary': 'Retrieve OpenID Provider configuration for user (PUBLIC)', 'description': '', 'operationId': 'getUserOpenIDConfiguration', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to fetch config for', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Retrieve OpenID Provider configuration for user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'mappedUserName': {'type': 'string', 'description': 'The provider username that this user is mapped to'}, 'provider': {'type': 'object', 'description': 'Information about the provider this user is configured to use', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of this provider'}, 'name': {'type': 'string', 'description': 'The provider name'}, 'shortName': {'type': 'string', 'description': 'The provider shortname'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Invalid argument', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-OPENID'], 'x-Argus-ApiStatus': 'PUBLIC'}
initiate_user_api_key = {'tags': ['authentication/v1/apikey'], 'summary': 'Initiate a new user APIkey (PUBLIC)', 'description': 'API keys are bound to a limited IP range. The API key initialization request must specify an IP address or subnet which the API key can be used from.Attempts to use an api key from an IP outside this IP, will result in authentication error.\n\nTo allow authentication from different IPs, issue multiple API keys.\n\nThe initiation request returns the API key, in the format it can be used both in the Argus-API-Key header, or when initiating a durable session (/apikey/authenticate).\n\nThe API key cannot be retrieved at a later stage. If the key is lost, it should be deletedand a new key should be issued.', 'operationId': 'initiateUserApiKey', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'description': {'type': 'str', 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'disableExpiration': {'type': 'bool', 'default': False, 'description': 'Request API-key with unlimited expiration. If unlimited expiration is not permitted, a 412 error will be returned.'}, 'disableSourceRestriction': {'type': 'bool', 'default': False, 'description': 'Request API-key without source restriction. If key without source restriction is not permitted, a 412 error will be returned. Deprecated! Instead set provider in source to ´disabled´'}, 'expirationDays': {'type': 'int', 'description': 'Requested expiration days, default is 3 months. If the requested expiration exceeds the permitted expiration period, a 412 error will be returned.', 'minimum': 0}, 'sessionConstraints': {'type': 'dict', 'properties': {'customerID': {'type': 'list', 'description': 'List of customers to constrain this session to. Default is all available customers.', 'items': {'type': 'int', 'description': 'List of customers to constrain this session to. Default is all available customers.'}, 'uniqueItems': True}, 'function': {'type': 'list', 'description': 'List of functions (by name) to constrain this session to. Default is all available functions.', 'items': {'type': 'str', 'description': 'List of functions (by name) to constrain this session to. Default is all available functions.'}, 'uniqueItems': True}, 'functionID': {'type': 'list', 'description': 'List of functions (by ID) to constrain this session to. Default is all available functions.', 'items': {'type': 'int', 'description': 'List of functions (by ID) to constrain this session to. Default is all available functions.'}, 'uniqueItems': True}, 'readOnly': {'type': 'bool', 'description': 'If set, this session will be read only'}}}, 'source': {'type': 'dict', 'properties': {'awsOptions': {'type': 'dict', 'description': 'Options when requesting a API key for AWS services', 'properties': {'regions': {'type': 'list', 'description': 'AWS regions the API key should be valid for', 'items': {'type': 'str', 'description': 'AWS regions the API key should be valid for'}, 'uniqueItems': True}, 'services': {'type': 'list', 'description': 'AWS services the API key should be valid for', 'items': {'type': 'str', 'description': 'AWS services the API key should be valid for'}, 'uniqueItems': True}}}, 'azureOptions': {'type': 'dict', 'description': 'Options when requesting a API key for Azure instances', 'properties': {'regions': {'type': 'list', 'description': 'Azure regions the API key should be valid for', 'items': {'type': 'str', 'description': 'Azure regions the API key should be valid for'}, 'uniqueItems': True}, 'services': {'type': 'list', 'description': 'Azure services the API key should be valid for', 'items': {'type': 'str', 'description': 'Azure services the API key should be valid for'}, 'uniqueItems': True}}}, 'githubOptions': {'type': 'dict', 'description': 'Request to get API key for Github services', 'properties': {'services': {'type': 'list', 'description': 'Github services the API key should be valid for', 'items': {'type': 'str', 'description': 'Github services the API key should be valid for'}, 'uniqueItems': True}}}, 'provider': {'type': 'str', 'default': 'staticIP', 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'disabled', 'azure', 'aws', 'github']}, 'staticOptions': {'type': 'dict', 'properties': {'ipAddresses': {'type': 'list', 'description': 'IP addresses the static API key will be valid for', 'items': {'type': 'str', 'description': 'IP addresses the static API key will be valid for'}, 'maxItems': 2147483647, 'minItems': 1, 'uniqueItems': True}}, 'required': ['ipAddresses']}}, 'required': ['provider']}, 'validSources': {'type': 'list', 'items': {'type': 'dict', 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'properties': {'address': {'type': 'str', 'xml': {'attribute': True}}, 'host': {'type': 'bool', 'xml': {'attribute': True}}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'public': {'type': 'boolean'}}}, 'uniqueItems': True}}, 'required': ['description']}}}, 'required': True}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Initiate a new user APIkey', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'apiKeyString': {'type': 'string', 'description': 'The API key. This is the only response returning the actual API key, it cannot be retrieved later.'}, 'keyDescriptor': {'type': 'object', 'description': 'The list of configured API keys', 'properties': {'constraints': {'type': 'object', 'description': 'Permission constraints set for this key.', 'properties': {'customers': {'type': 'array', 'items': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'uniqueItems': True}, 'functions': {'type': 'array', 'items': {'type': 'object', 'description': 'SPI FunctionInfo', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the function.'}}}, 'uniqueItems': True}, 'readOnly': {'type': 'boolean'}}}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key was created.'}, 'description': {'type': 'string', 'description': 'Key description'}, 'lastUsedIP': {'type': 'object', 'description': 'IP source from which this key was last used.', 'properties': {'address': {'type': 'string', 'xml': {'attribute': True}}, 'host': {'type': 'boolean', 'xml': {'attribute': True}}, 'ipv6': {'type': 'boolean', 'xml': {'attribute': True}}, 'maskBits': {'type': 'integer', 'format': 'int32'}, 'multicast': {'type': 'boolean'}, 'public': {'type': 'boolean'}}}, 'lastUsedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key was last used.'}, 'prefix': {'type': 'string', 'description': 'Key prefix'}, 'source': {'type': 'object', 'description': 'Response when requesting an API key for use with cloud providers or static IPs', 'properties': {'awsOptions': {'type': 'object', 'description': 'Response for request to create API key for AWS', 'properties': {'regions': {'type': 'array', 'description': 'AWS regions the API key should be valid for', 'items': {'type': 'string', 'description': 'AWS regions the API key should be valid for'}, 'uniqueItems': True}, 'services': {'type': 'array', 'description': 'AWS services the API key should be valid for', 'items': {'type': 'string', 'description': 'AWS services the API key should be valid for'}, 'uniqueItems': True}}}, 'azureOptions': {'type': 'object', 'description': 'Response for request to create API key for Azure instances', 'properties': {'regions': {'type': 'array', 'description': 'Azure regions the API key should be valid for', 'items': {'type': 'string', 'description': 'Azure regions the API key should be valid for'}, 'uniqueItems': True}, 'services': {'type': 'array', 'description': 'Azure services the API key should be valid for', 'items': {'type': 'string', 'description': 'Azure services the API key should be valid for'}, 'uniqueItems': True}}}, 'githubOptions': {'type': 'object', 'description': 'Response for creating API key for Github services', 'properties': {'services': {'type': 'array', 'description': 'Github services the API key should be valid for', 'items': {'type': 'string', 'description': 'Github services the API key should be valid for'}, 'uniqueItems': True}}}, 'provider': {'type': 'string', 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'azure', 'disabled', 'aws', 'github']}, 'staticOptions': {'type': 'object', 'description': 'Options containing IP addresses for static API key', 'properties': {'ipAddresses': {'type': 'array', 'description': 'IP/CIDR networks the API key should be valid for', 'items': {'type': 'string', 'description': 'IP/CIDR networks the API key should be valid for'}, 'maxItems': 2147483647, 'minItems': 1, 'uniqueItems': True}}, 'required': ['ipAddresses']}}, 'required': ['provider']}, 'validSources': {'type': 'array', 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'items': {'type': 'object', 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'properties': {'address': {'type': 'string', 'xml': {'attribute': True}}, 'host': {'type': 'boolean', 'xml': {'attribute': True}}, 'ipv6': {'type': 'boolean', 'xml': {'attribute': True}}, 'maskBits': {'type': 'integer', 'format': 'int32'}, 'multicast': {'type': 'boolean'}, 'public': {'type': 'boolean'}}}, 'uniqueItems': True}, 'validUntil': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-APIKEY'], 'x-Argus-ApiStatus': 'PUBLIC'}
initiate_user_totp = {'tags': ['authentication/v1/totp'], 'summary': 'Initiate a new TOTP generator for the user (PUBLIC)', 'description': 'TOTP authentication requires a TOTP generator to be set up for the user.\n\nThis operation allows the administrator to set up a TOTP generator for the given user.\nNormally this should be done by the user, using the /totp resource.\nThe TOTP generator code retrieved cannot be retrieved again. It should be added directly to the TOTP generator, and should not be stored elsewhere.', 'operationId': 'initiateUserTOTP', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Initiate a new TOTP generator for the user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'keyAlgorithm': {'type': 'string', 'description': 'The key algorithm to pass to the TOTP generator'}, 'passCodeLength': {'type': 'integer', 'format': 'int32', 'description': 'The passcode length pass to the TOTP generator'}, 'seedBase32': {'type': 'string', 'description': 'The base32-encoded TOTP seed to pass to the TOTP generator'}, 'seedBase64': {'type': 'string', 'description': 'The base64-encoded TOTP seed'}, 'userName': {'type': 'string', 'description': 'The username this seed is bound to'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-TOTP'], 'x-Argus-ApiStatus': 'PUBLIC'}
list_user_api_keys = {'tags': ['authentication/v1/apikey'], 'summary': 'List user API keys (PUBLIC)', 'description': '', 'operationId': 'listUserApiKeys', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'List user API keys', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'keys': {'type': 'array', 'description': 'The list of configured API keys', 'items': {'type': 'object', 'description': 'The list of configured API keys', 'properties': {'constraints': {'type': 'object', 'description': 'Permission constraints set for this key.', 'properties': {'customers': {'type': 'array', 'items': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'uniqueItems': True}, 'functions': {'type': 'array', 'items': {'type': 'object', 'description': 'SPI FunctionInfo', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the function.'}}}, 'uniqueItems': True}, 'readOnly': {'type': 'boolean'}}}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key was created.'}, 'description': {'type': 'string', 'description': 'Key description'}, 'lastUsedIP': {'type': 'object', 'description': 'IP source from which this key was last used.', 'properties': {'address': {'type': 'string', 'xml': {'attribute': True}}, 'host': {'type': 'boolean', 'xml': {'attribute': True}}, 'ipv6': {'type': 'boolean', 'xml': {'attribute': True}}, 'maskBits': {'type': 'integer', 'format': 'int32'}, 'multicast': {'type': 'boolean'}, 'public': {'type': 'boolean'}}}, 'lastUsedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key was last used.'}, 'prefix': {'type': 'string', 'description': 'Key prefix'}, 'source': {'type': 'object', 'description': 'Response when requesting an API key for use with cloud providers or static IPs', 'properties': {'awsOptions': {'type': 'object', 'description': 'Response for request to create API key for AWS', 'properties': {'regions': {'type': 'array', 'description': 'AWS regions the API key should be valid for', 'items': {'type': 'string', 'description': 'AWS regions the API key should be valid for'}, 'uniqueItems': True}, 'services': {'type': 'array', 'description': 'AWS services the API key should be valid for', 'items': {'type': 'string', 'description': 'AWS services the API key should be valid for'}, 'uniqueItems': True}}}, 'azureOptions': {'type': 'object', 'description': 'Response for request to create API key for Azure instances', 'properties': {'regions': {'type': 'array', 'description': 'Azure regions the API key should be valid for', 'items': {'type': 'string', 'description': 'Azure regions the API key should be valid for'}, 'uniqueItems': True}, 'services': {'type': 'array', 'description': 'Azure services the API key should be valid for', 'items': {'type': 'string', 'description': 'Azure services the API key should be valid for'}, 'uniqueItems': True}}}, 'githubOptions': {'type': 'object', 'description': 'Response for creating API key for Github services', 'properties': {'services': {'type': 'array', 'description': 'Github services the API key should be valid for', 'items': {'type': 'string', 'description': 'Github services the API key should be valid for'}, 'uniqueItems': True}}}, 'provider': {'type': 'string', 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'azure', 'disabled', 'aws', 'github']}, 'staticOptions': {'type': 'object', 'description': 'Options containing IP addresses for static API key', 'properties': {'ipAddresses': {'type': 'array', 'description': 'IP/CIDR networks the API key should be valid for', 'items': {'type': 'string', 'description': 'IP/CIDR networks the API key should be valid for'}, 'maxItems': 2147483647, 'minItems': 1, 'uniqueItems': True}}, 'required': ['ipAddresses']}}, 'required': ['provider']}, 'validSources': {'type': 'array', 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'items': {'type': 'object', 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'properties': {'address': {'type': 'string', 'xml': {'attribute': True}}, 'host': {'type': 'boolean', 'xml': {'attribute': True}}, 'ipv6': {'type': 'boolean', 'xml': {'attribute': True}}, 'maskBits': {'type': 'integer', 'format': 'int32'}, 'multicast': {'type': 'boolean'}, 'public': {'type': 'boolean'}}}, 'uniqueItems': True}, 'validUntil': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-APIKEY'], 'x-Argus-ApiStatus': 'PUBLIC'}
list_user_public_keys = {'tags': ['authentication/v1/signature'], 'summary': 'List enrolled keys (INTERNAL)', 'description': '', 'operationId': 'listUserPublicKeys', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of values to return', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip this number of records', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}], 'responses': {'default': {'description': 'List enrolled keys', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'keys': {'type': 'array', 'description': 'List of enrolled keys', 'items': {'type': 'object', 'description': 'List of enrolled keys', 'properties': {'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this key was created'}, 'description': {'type': 'string', 'description': 'A description or name for this key'}, 'keyID': {'type': 'integer', 'format': 'int32', 'description': 'The key ID (to use in signature headers)'}, 'lastUsedSourceIP': {'type': 'string', 'description': 'The source IP this key was last used from'}, 'lastUsedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this key was last used'}, 'type': {'type': 'string', 'description': 'The type of this key', 'enum': ['argus', 'webauthn', 'android', 'iphone']}, 'validSources': {'type': 'array', 'description': 'The IP sources this key is valid for', 'items': {'type': 'string', 'description': 'The IP sources this key is valid for'}, 'uniqueItems': True}, 'validUntil': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp this key is valid until, or 0 if unlimited validity'}}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-SIGNATURE'], 'x-Argus-ApiStatus': 'INTERNAL'}
renew_user_api_key_by_prefix = {'tags': ['authentication/v1/apikey'], 'summary': 'Renew existing user APIkey (PUBLIC)', 'description': 'API keys have limited validity. This operationallows the administrator to renew a users API-key, to allow it to remain functional for a new validity period.', 'operationId': 'renewUserApiKeyByPrefix', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'prefix', 'in': 'path', 'description': 'Key prefix', 'required': True, 'schema': {'type': 'str', 'pattern': '[a-z0-9]+/[a-z0-9]+'}, 'type': 'str', 'pattern': '[a-z0-9]+/[a-z0-9]+'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'disableExpiration': {'type': 'bool', 'default': False, 'description': 'Request API-key with unlimited expiration. If unlimited expiration is not permitted, a 412 error will be returned.'}, 'expirationDays': {'type': 'int', 'description': 'Requested expiration days, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period, an error will be returned.', 'minimum': 0}}}}}}, 'responses': {'default': {'description': 'Renew existing user APIkey', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'renewedKey': {'type': 'object', 'description': 'The list of configured API keys', 'properties': {'constraints': {'type': 'object', 'description': 'Permission constraints set for this key.', 'properties': {'customers': {'type': 'array', 'items': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'uniqueItems': True}, 'functions': {'type': 'array', 'items': {'type': 'object', 'description': 'SPI FunctionInfo', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the function.'}}}, 'uniqueItems': True}, 'readOnly': {'type': 'boolean'}}}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key was created.'}, 'description': {'type': 'string', 'description': 'Key description'}, 'lastUsedIP': {'type': 'object', 'description': 'IP source from which this key was last used.', 'properties': {'address': {'type': 'string', 'xml': {'attribute': True}}, 'host': {'type': 'boolean', 'xml': {'attribute': True}}, 'ipv6': {'type': 'boolean', 'xml': {'attribute': True}}, 'maskBits': {'type': 'integer', 'format': 'int32'}, 'multicast': {'type': 'boolean'}, 'public': {'type': 'boolean'}}}, 'lastUsedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key was last used.'}, 'prefix': {'type': 'string', 'description': 'Key prefix'}, 'source': {'type': 'object', 'description': 'Response when requesting an API key for use with cloud providers or static IPs', 'properties': {'awsOptions': {'type': 'object', 'description': 'Response for request to create API key for AWS', 'properties': {'regions': {'type': 'array', 'description': 'AWS regions the API key should be valid for', 'items': {'type': 'string', 'description': 'AWS regions the API key should be valid for'}, 'uniqueItems': True}, 'services': {'type': 'array', 'description': 'AWS services the API key should be valid for', 'items': {'type': 'string', 'description': 'AWS services the API key should be valid for'}, 'uniqueItems': True}}}, 'azureOptions': {'type': 'object', 'description': 'Response for request to create API key for Azure instances', 'properties': {'regions': {'type': 'array', 'description': 'Azure regions the API key should be valid for', 'items': {'type': 'string', 'description': 'Azure regions the API key should be valid for'}, 'uniqueItems': True}, 'services': {'type': 'array', 'description': 'Azure services the API key should be valid for', 'items': {'type': 'string', 'description': 'Azure services the API key should be valid for'}, 'uniqueItems': True}}}, 'githubOptions': {'type': 'object', 'description': 'Response for creating API key for Github services', 'properties': {'services': {'type': 'array', 'description': 'Github services the API key should be valid for', 'items': {'type': 'string', 'description': 'Github services the API key should be valid for'}, 'uniqueItems': True}}}, 'provider': {'type': 'string', 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'azure', 'disabled', 'aws', 'github']}, 'staticOptions': {'type': 'object', 'description': 'Options containing IP addresses for static API key', 'properties': {'ipAddresses': {'type': 'array', 'description': 'IP/CIDR networks the API key should be valid for', 'items': {'type': 'string', 'description': 'IP/CIDR networks the API key should be valid for'}, 'maxItems': 2147483647, 'minItems': 1, 'uniqueItems': True}}, 'required': ['ipAddresses']}}, 'required': ['provider']}, 'validSources': {'type': 'array', 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'items': {'type': 'object', 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'properties': {'address': {'type': 'string', 'xml': {'attribute': True}}, 'host': {'type': 'boolean', 'xml': {'attribute': True}}, 'ipv6': {'type': 'boolean', 'xml': {'attribute': True}}, 'maskBits': {'type': 'integer', 'format': 'int32'}, 'multicast': {'type': 'boolean'}, 'public': {'type': 'boolean'}}}, 'uniqueItems': True}, 'validUntil': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-APIKEY'], 'x-Argus-ApiStatus': 'PUBLIC'}
reset_and_download_private_key = {'tags': ['authentication/v1/signature'], 'summary': 'Reset and download the default user private key (keyID=0), with unlimited validity and no IP constraints. This endpoint is deprecated, use /user/{user}/signature/create instead (INTERNAL)', 'description': '', 'operationId': 'resetAndDownloadPrivateKey', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Reset and download the default user private key (keyID=0), with unlimited validity and no IP constraints. This endpoint is deprecated, use /user/{user}/signature/create instead', 'content': {'application/octet-stream': {}, 'application/json': {}}}, '401': {'description': 'Authentication failed', 'content': {'application/octet-stream': {}, 'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/octet-stream': {}, 'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/octet-stream': {}, 'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/octet-stream': {}, 'application/json': {}}}}, 'deprecated': True, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-SIGNATURE'], 'x-Argus-ApiStatus': 'INTERNAL'}
reset_password = {'tags': ['authentication/v1/password'], 'summary': 'Reset the password for the specified user (INTERNAL)', 'description': '', 'operationId': 'resetPassword', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to reset password for', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'ID or name of user domain to resolve username from. Defaults to current users domain.', 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Reset the password for the specified user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authorization': {'type': 'string', 'description': 'Authorization JWS string'}, 'expires': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this authorization expires'}, 'nextURI': {'type': 'string', 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'operation': {'type': 'string', 'description': 'Operation which is authorized by this token'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'INTERNAL'}
retrieve_sms_token = {'tags': ['authentication/v1/sms'], 'summary': 'Retrieve the SMS code sent to user (PUBLIC)', 'description': 'SMS authentication depends on the verification code sent to the user by SMS reachingthe user. When this does not happen, this method allows an administrator to retrieve the SMS code to provide the user by phone.\n\nTo retrieve the token, the user must provide the administrator with thesession token printed in the browser in the SMS code input screen.', 'operationId': 'retrieveSMSToken', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'tokenSuffix', 'in': 'path', 'description': 'Token suffix', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Retrieve the SMS code sent to user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'sessionCookie': {'type': 'string', 'description': 'The full SMS cookie matching the requested suffix'}, 'token': {'type': 'string', 'description': 'The retrieved SMS token'}, 'userID': {'type': 'integer', 'format': 'int64', 'description': 'The ID of the target user'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-SMS'], 'x-Argus-ApiStatus': 'PUBLIC'}
revoke_user_api_key_by_id = {'tags': ['authentication/v1/apikey'], 'summary': 'Delete existing user APIkey (PUBLIC)', 'description': '', 'operationId': 'revokeUserApiKeyByID', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'keyID', 'in': 'path', 'description': 'Key ID', 'required': True, 'schema': {'type': 'int'}, 'type': 'int'}], 'responses': {'default': {'description': 'Delete existing user APIkey', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'revokedKey': {'type': 'object', 'description': 'The list of configured API keys', 'properties': {'constraints': {'type': 'object', 'description': 'Permission constraints set for this key.', 'properties': {'customers': {'type': 'array', 'items': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'uniqueItems': True}, 'functions': {'type': 'array', 'items': {'type': 'object', 'description': 'SPI FunctionInfo', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the function.'}}}, 'uniqueItems': True}, 'readOnly': {'type': 'boolean'}}}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key was created.'}, 'description': {'type': 'string', 'description': 'Key description'}, 'lastUsedIP': {'type': 'object', 'description': 'IP source from which this key was last used.', 'properties': {'address': {'type': 'string', 'xml': {'attribute': True}}, 'host': {'type': 'boolean', 'xml': {'attribute': True}}, 'ipv6': {'type': 'boolean', 'xml': {'attribute': True}}, 'maskBits': {'type': 'integer', 'format': 'int32'}, 'multicast': {'type': 'boolean'}, 'public': {'type': 'boolean'}}}, 'lastUsedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key was last used.'}, 'prefix': {'type': 'string', 'description': 'Key prefix'}, 'source': {'type': 'object', 'description': 'Response when requesting an API key for use with cloud providers or static IPs', 'properties': {'awsOptions': {'type': 'object', 'description': 'Response for request to create API key for AWS', 'properties': {'regions': {'type': 'array', 'description': 'AWS regions the API key should be valid for', 'items': {'type': 'string', 'description': 'AWS regions the API key should be valid for'}, 'uniqueItems': True}, 'services': {'type': 'array', 'description': 'AWS services the API key should be valid for', 'items': {'type': 'string', 'description': 'AWS services the API key should be valid for'}, 'uniqueItems': True}}}, 'azureOptions': {'type': 'object', 'description': 'Response for request to create API key for Azure instances', 'properties': {'regions': {'type': 'array', 'description': 'Azure regions the API key should be valid for', 'items': {'type': 'string', 'description': 'Azure regions the API key should be valid for'}, 'uniqueItems': True}, 'services': {'type': 'array', 'description': 'Azure services the API key should be valid for', 'items': {'type': 'string', 'description': 'Azure services the API key should be valid for'}, 'uniqueItems': True}}}, 'githubOptions': {'type': 'object', 'description': 'Response for creating API key for Github services', 'properties': {'services': {'type': 'array', 'description': 'Github services the API key should be valid for', 'items': {'type': 'string', 'description': 'Github services the API key should be valid for'}, 'uniqueItems': True}}}, 'provider': {'type': 'string', 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'azure', 'disabled', 'aws', 'github']}, 'staticOptions': {'type': 'object', 'description': 'Options containing IP addresses for static API key', 'properties': {'ipAddresses': {'type': 'array', 'description': 'IP/CIDR networks the API key should be valid for', 'items': {'type': 'string', 'description': 'IP/CIDR networks the API key should be valid for'}, 'maxItems': 2147483647, 'minItems': 1, 'uniqueItems': True}}, 'required': ['ipAddresses']}}, 'required': ['provider']}, 'validSources': {'type': 'array', 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'items': {'type': 'object', 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'properties': {'address': {'type': 'string', 'xml': {'attribute': True}}, 'host': {'type': 'boolean', 'xml': {'attribute': True}}, 'ipv6': {'type': 'boolean', 'xml': {'attribute': True}}, 'maskBits': {'type': 'integer', 'format': 'int32'}, 'multicast': {'type': 'boolean'}, 'public': {'type': 'boolean'}}}, 'uniqueItems': True}, 'validUntil': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-APIKEY'], 'x-Argus-ApiStatus': 'PUBLIC'}
revoke_user_api_key_by_prefix = {'tags': ['authentication/v1/apikey'], 'summary': 'Delete existing user APIkey (PUBLIC)', 'description': '', 'operationId': 'revokeUserAPIKeyByPrefix', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'prefix', 'in': 'path', 'description': 'Key Prefix', 'required': True, 'schema': {'type': 'str', 'pattern': '[a-z0-9]+/[a-z0-9]+'}, 'type': 'str', 'pattern': '[a-z0-9]+/[a-z0-9]+'}], 'responses': {'default': {'description': 'Delete existing user APIkey', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'revokedKey': {'type': 'object', 'description': 'The list of configured API keys', 'properties': {'constraints': {'type': 'object', 'description': 'Permission constraints set for this key.', 'properties': {'customers': {'type': 'array', 'items': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'uniqueItems': True}, 'functions': {'type': 'array', 'items': {'type': 'object', 'description': 'SPI FunctionInfo', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the function.'}}}, 'uniqueItems': True}, 'readOnly': {'type': 'boolean'}}}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key was created.'}, 'description': {'type': 'string', 'description': 'Key description'}, 'lastUsedIP': {'type': 'object', 'description': 'IP source from which this key was last used.', 'properties': {'address': {'type': 'string', 'xml': {'attribute': True}}, 'host': {'type': 'boolean', 'xml': {'attribute': True}}, 'ipv6': {'type': 'boolean', 'xml': {'attribute': True}}, 'maskBits': {'type': 'integer', 'format': 'int32'}, 'multicast': {'type': 'boolean'}, 'public': {'type': 'boolean'}}}, 'lastUsedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key was last used.'}, 'prefix': {'type': 'string', 'description': 'Key prefix'}, 'source': {'type': 'object', 'description': 'Response when requesting an API key for use with cloud providers or static IPs', 'properties': {'awsOptions': {'type': 'object', 'description': 'Response for request to create API key for AWS', 'properties': {'regions': {'type': 'array', 'description': 'AWS regions the API key should be valid for', 'items': {'type': 'string', 'description': 'AWS regions the API key should be valid for'}, 'uniqueItems': True}, 'services': {'type': 'array', 'description': 'AWS services the API key should be valid for', 'items': {'type': 'string', 'description': 'AWS services the API key should be valid for'}, 'uniqueItems': True}}}, 'azureOptions': {'type': 'object', 'description': 'Response for request to create API key for Azure instances', 'properties': {'regions': {'type': 'array', 'description': 'Azure regions the API key should be valid for', 'items': {'type': 'string', 'description': 'Azure regions the API key should be valid for'}, 'uniqueItems': True}, 'services': {'type': 'array', 'description': 'Azure services the API key should be valid for', 'items': {'type': 'string', 'description': 'Azure services the API key should be valid for'}, 'uniqueItems': True}}}, 'githubOptions': {'type': 'object', 'description': 'Response for creating API key for Github services', 'properties': {'services': {'type': 'array', 'description': 'Github services the API key should be valid for', 'items': {'type': 'string', 'description': 'Github services the API key should be valid for'}, 'uniqueItems': True}}}, 'provider': {'type': 'string', 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'azure', 'disabled', 'aws', 'github']}, 'staticOptions': {'type': 'object', 'description': 'Options containing IP addresses for static API key', 'properties': {'ipAddresses': {'type': 'array', 'description': 'IP/CIDR networks the API key should be valid for', 'items': {'type': 'string', 'description': 'IP/CIDR networks the API key should be valid for'}, 'maxItems': 2147483647, 'minItems': 1, 'uniqueItems': True}}, 'required': ['ipAddresses']}}, 'required': ['provider']}, 'validSources': {'type': 'array', 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'items': {'type': 'object', 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'properties': {'address': {'type': 'string', 'xml': {'attribute': True}}, 'host': {'type': 'boolean', 'xml': {'attribute': True}}, 'ipv6': {'type': 'boolean', 'xml': {'attribute': True}}, 'maskBits': {'type': 'integer', 'format': 'int32'}, 'multicast': {'type': 'boolean'}, 'public': {'type': 'boolean'}}}, 'uniqueItems': True}, 'validUntil': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-APIKEY'], 'x-Argus-ApiStatus': 'PUBLIC'}
revoke_user_totp = {'tags': ['authentication/v1/totp'], 'summary': 'Revoke the current TOTP generator for the user (PUBLIC)', 'description': 'This operation invalidates the current generator config for the user.\nThe user will need to re-initialize the TOTP generator to be able to log inusing TOTP.', 'operationId': 'revokeUserTOTP', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Revoke the current TOTP generator for the user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object'}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-TOTP'], 'x-Argus-ApiStatus': 'PUBLIC'}
set_user_openid_configuration = {'tags': ['authentication/v1/openid'], 'summary': 'Set OpenID Provider configuration for user (PUBLIC)', 'description': '', 'operationId': 'setUserOpenIDConfiguration', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to set config for', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'mappedUserName': {'type': 'str', 'description': 'The provider username to map to this user'}, 'provider': {'type': 'str', 'description': 'The ID or shortname of the provider to use for authenticating this user'}}, 'required': ['mappedUserName', 'provider']}}}, 'required': True}, 'responses': {'default': {'description': 'Set OpenID Provider configuration for user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'mappedUserName': {'type': 'string', 'description': 'The provider username that this user is mapped to'}, 'provider': {'type': 'object', 'description': 'Information about the provider this user is configured to use', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of this provider'}, 'name': {'type': 'string', 'description': 'The provider name'}, 'shortName': {'type': 'string', 'description': 'The provider shortname'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Invalid argument', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-OPENID'], 'x-Argus-ApiStatus': 'PUBLIC'}
setup_user_ldap = {'tags': ['authentication/v1/ldap'], 'summary': 'Configure user LDAP settings (INTERNAL)', 'description': '', 'operationId': 'setupUserLDAP', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'userName': {'type': 'str', 'description': 'LDAP username to set for user'}}}}}, 'required': True}, 'responses': {'default': {'description': 'Configure user LDAP settings', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object'}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['administrativeAuthenticationSetup-LDAP'], 'x-Argus-ApiStatus': 'INTERNAL'}
unblock_user = {'tags': ['authentication/v1'], 'summary': 'Administratively unblock a user (PUBLIC)', 'description': '', 'operationId': 'unblockUser', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to modify', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain to lookup username in, defaults to current users domain', 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Administratively unblock a user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object'}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['unblockUser'], 'x-Argus-ApiStatus': 'PUBLIC'}
user_enrollment_admin_verification = {'tags': ['authentication/v1/enrollment'], 'summary': 'Manually verify enrollment for another user, fetching the verification code on users behalf. (INTERNAL)', 'description': '', 'operationId': 'userEnrollmentAdminVerification', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User id or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'ID or shortname of domain to lookup user in. Defaults to current users domain', 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Admin request to manually retrieve verification code for a user', 'properties': {'activationCookie': {'type': 'str', 'description': 'Activation cookie retrieved by admin info endpoint. This should have been manually verified by admin before verifying.'}}, 'required': ['activationCookie']}}}, 'required': True}, 'responses': {'default': {'description': 'Manually verify enrollment for another user, fetching the verification code on users behalf.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Admin response with verification code for user enrollment', 'properties': {'verificationCode': {'type': 'string', 'description': 'The verification code that the admin should to pass to the user'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Invalid argument', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['userEnrollmentAdminVerification'], 'x-Argus-ApiStatus': 'INTERNAL'}
view_user_enrollment_status = {'tags': ['authentication/v1/enrollment'], 'summary': 'View enrollment status for user (INTERNAL)', 'description': '', 'operationId': 'viewUserEnrollmentStatus', 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User id or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'ID or shortname of domain to lookup user in. Defaults to current users domain', 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'View enrollment status for user', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Response with information on user enrollment status', 'properties': {'activationCookie': {'type': 'string', 'description': 'The activation cookie of the current enrollment, if state is pendingVerification. This allows admin to verify the ongoing enrollment session manually.'}, 'activationExpiry': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the enrollment activation expires'}, 'clientIP': {'type': 'string', 'description': 'The currently enrolling IP for the user. Only relevant in pending verification/manual verification states.'}, 'state': {'type': 'string', 'description': 'The current state of this users enrollment. If disabled, enrollment is not active.', 'enum': ['disabled', 'pendingActivation', 'pendingVerification', 'aborted', 'manuallyVerified']}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'verificationExpiry': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the enrollment verification expires'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Invalid argument', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewUserEnrollmentStatus'], 'x-Argus-ApiStatus': 'INTERNAL'}