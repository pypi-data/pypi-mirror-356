"""Autogenerated API schema"""
from argus_api import session


accept_session_transfer = {'tags': ['authentication/v1/session'], 'summary': 'Accept transfer of session token from other domain (PUBLIC)', 'description': '', 'operationId': 'putSession', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'data': {'type': 'string'}, 'seed': {'type': 'string'}}}}}, 'required': True}, 'responses': {'default': {'description': 'Accept transfer of session token from other domain', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authenticationMethod': {'type': 'string', 'description': 'The authentication method used for this session', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'clientIP': {'type': 'string', 'description': 'The client IP this session is bound to (as seen from Argus)'}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The creation timestamp of this session'}, 'passwordNotSet': {'type': 'boolean', 'description': 'If true, password is not set for this user'}, 'readOnly': {'type': 'boolean', 'description': 'If true, this session is read-only'}, 'securityLevel': {'type': 'string', 'description': 'The security level of this session', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'sessionKey': {'type': 'string', 'description': 'Session wide encryption key for CSRF and other uses'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The last updated timestamp of this session'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
check_session_function_permission = {'tags': ['authentication/v1/session'], 'summary': 'Validate current user permission to perform function on any customer (PUBLIC)', 'description': '', 'operationId': 'checkSessionFunctionPermission', 'parameters': [{'name': 'function', 'in': 'path', 'description': 'Function name', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Validate current user permission to perform function on any customer', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Returned results (might be an array or a single object)'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Forbidden permission', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
check_session_permission = {'tags': ['authentication/v1/session'], 'summary': 'Validate current user permission to perform function on specific customer (PUBLIC)', 'description': '', 'operationId': 'checkSessionPermission', 'parameters': [{'name': 'function', 'in': 'path', 'description': 'Function name', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'customer', 'in': 'path', 'description': 'Customer ID or shortname', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain ID or shortname for domain to lookup customer by shortname. Defaults to current users domain', 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Validate current user permission to perform function on specific customer', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Returned results (might be an array or a single object)'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Forbidden permission', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
clear_session_data = {'tags': ['authentication/v1/session'], 'summary': 'Clear the current sessions sessiondata (PUBLIC)', 'description': '', 'operationId': 'clearSessionData', 'responses': {'default': {'description': 'Clear the current sessions sessiondata', 'content': {'application/json': {}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
constrain_session = {'tags': ['authentication/v1/session'], 'summary': 'Request a constrained session (PUBLIC)', 'description': 'This operation will spawn a new user session, where the active userspermissions are constrained to the specified subset of the active users permissions.In addition to returning the constrained session token, the new session will be set as cookies, overwriting any existing session cookies.', 'operationId': 'constrainSession', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'customer': {'type': 'list', 'description': 'Set of customers the session should be valid for (default is all current customers). Cannot extend the current set of customers.', 'items': {'type': 'str', 'description': 'Set of customers the session should be valid for (default is all current customers). Cannot extend the current set of customers.'}, 'uniqueItems': True}, 'function': {'type': 'list', 'description': 'Set of functions/roles (by name) the session should be granted (default is all current functions). Cannot extend the current set of functions.', 'items': {'type': 'str', 'description': 'Set of functions/roles (by name) the session should be granted (default is all current functions). Cannot extend the current set of functions.'}, 'uniqueItems': True}, 'readOnly': {'type': 'bool', 'default': False, 'description': 'If true, this session will be constrained to read only'}, 'customerID': {'type': 'dict', 'properties': {'customer': {'type': 'list', 'description': 'Set of customers the session should be valid for (default is all current customers). Cannot extend the current set of customers.', 'items': {'type': 'str', 'description': 'Set of customers the session should be valid for (default is all current customers). Cannot extend the current set of customers.'}, 'uniqueItems': True}, 'function': {'type': 'list', 'description': 'Set of functions/roles (by name) the session should be granted (default is all current functions). Cannot extend the current set of functions.', 'items': {'type': 'str', 'description': 'Set of functions/roles (by name) the session should be granted (default is all current functions). Cannot extend the current set of functions.'}, 'uniqueItems': True}, 'readOnly': {'type': 'bool', 'default': False, 'description': 'If true, this session will be constrained to read only'}, 'customerID': [], 'functionID': []}}, 'functionID': {'type': 'dict', 'properties': {'customer': {'type': 'list', 'description': 'Set of customers the session should be valid for (default is all current customers). Cannot extend the current set of customers.', 'items': {'type': 'str', 'description': 'Set of customers the session should be valid for (default is all current customers). Cannot extend the current set of customers.'}, 'uniqueItems': True}, 'function': {'type': 'list', 'description': 'Set of functions/roles (by name) the session should be granted (default is all current functions). Cannot extend the current set of functions.', 'items': {'type': 'str', 'description': 'Set of functions/roles (by name) the session should be granted (default is all current functions). Cannot extend the current set of functions.'}, 'uniqueItems': True}, 'readOnly': {'type': 'bool', 'default': False, 'description': 'If true, this session will be constrained to read only'}, 'customerID': [], 'functionID': []}}}}}}, 'required': True}, 'responses': {'default': {'description': 'Request a constrained session', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authorizations': {'type': 'array', 'description': 'Any gratuitous authorization tokens generated during authentication, if requested by the client', 'items': {'type': 'object', 'properties': {'authorization': {'type': 'string', 'description': 'Authorization JWS string'}, 'expires': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this authorization expires'}, 'nextURI': {'type': 'string', 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'operation': {'type': 'string', 'description': 'Operation which is authorized by this token'}}}, 'uniqueItems': True}, 'credentials': {'type': 'object', 'description': 'The request credentials to use for this session', 'properties': {'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'requestCredentialsData': {'type': 'string'}, 'requestCredentialsType': {'type': 'string', 'enum': ['sessionToken', 'signature', 'apikey']}, 'uri': {'type': 'string'}}}, 'sessionKey': {'type': 'string'}}}}}}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
delete_session = {'tags': ['authentication/v1/session'], 'summary': 'Invalidate current user session (PUBLIC)', 'description': '', 'operationId': 'deleteSession', 'responses': {'default': {'description': 'Invalidate current user session', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
evict_session = {'tags': ['authentication/v1/session'], 'summary': 'Delete a specific session. The session will be deleted from the authorative cache and flushed from all distributed caches (PUBLIC)', 'description': '', 'operationId': 'evictSession', 'parameters': [{'name': 'sessionIdentifier', 'in': 'path', 'description': 'Session identifier for the session to delete.', 'required': True, 'schema': {'type': 'str', 'pattern': '.+'}, 'type': 'str', 'pattern': '.+'}], 'responses': {'default': {'description': 'Delete a specific session. The session will be deleted from the authorative cache and flushed from all distributed caches', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authenticationMethod': {'type': 'string', 'description': 'The authentication method used for this session', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'clientIP': {'type': 'string', 'description': 'The client IP this session is bound to (as seen from Argus)'}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The creation timestamp of this session'}, 'passwordNotSet': {'type': 'boolean', 'description': 'If true, password is not set for this user'}, 'readOnly': {'type': 'boolean', 'description': 'If true, this session is read-only'}, 'securityLevel': {'type': 'string', 'description': 'The security level of this session', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'sessionKey': {'type': 'string', 'description': 'Session wide encryption key for CSRF and other uses'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The last updated timestamp of this session'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Session not found', 'content': {'application/json': {}}}, '412': {'description': 'Invalid arguments', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['deleteSession'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_session = {'tags': ['authentication/v1/session'], 'summary': 'Get session information of current user. If the request specifies a domain, this will also ensure that thecurrent session is bound to the requested domain.  (PUBLIC)', 'description': '', 'operationId': 'getSession', 'parameters': [{'name': 'domain', 'in': 'query', 'description': 'Expected domain for this session.', 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Get session information of current user. If the request specifies a domain, this will also ensure that thecurrent session is bound to the requested domain. ', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authenticationMethod': {'type': 'string', 'description': 'The authentication method used for this session', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'clientIP': {'type': 'string', 'description': 'The client IP this session is bound to (as seen from Argus)'}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The creation timestamp of this session'}, 'passwordNotSet': {'type': 'boolean', 'description': 'If true, password is not set for this user'}, 'readOnly': {'type': 'boolean', 'description': 'If true, this session is read-only'}, 'securityLevel': {'type': 'string', 'description': 'The security level of this session', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'sessionKey': {'type': 'string', 'description': 'Session wide encryption key for CSRF and other uses'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The last updated timestamp of this session'}}}}}}}}, '401': {'description': 'Authentication failed, or session does not belong to expected domain', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
get_session_auth_methods = {'tags': ['authentication/v1/session'], 'summary': 'List the current users valid authentication methods (PUBLIC)', 'description': '', 'operationId': 'getSessionAuthMethods', 'responses': {'default': {'description': 'List the current users valid authentication methods', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'initialized': {'type': 'boolean', 'description': 'Whether method has been initialized'}, 'lastLoginIP': {'type': 'string', 'description': 'Last login IP'}, 'lastLoginTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Last login time in ms'}, 'method': {'type': 'string', 'description': 'Authentication method', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID', 'ENROLLMENT']}, 'settings': {'type': 'object', 'additionalProperties': {'description': 'Authentication method settings'}, 'description': 'Authentication method settings'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'User not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
get_session_customers = {'tags': ['authentication/v1/session'], 'summary': 'List customers available in this session (PUBLIC)', 'description': '', 'operationId': 'getSessionCustomers', 'responses': {'default': {'description': 'List customers available in this session', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'domain': {'type': 'object', 'properties': {'id': {'type': 'integer', 'format': 'int32'}, 'name': {'type': 'string'}}}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}}}}}}}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
get_session_functions = {'tags': ['authentication/v1/session'], 'summary': 'List functions available in this session (PUBLIC)', 'description': '', 'operationId': 'getSessionFunctions', 'responses': {'default': {'description': 'List functions available in this session', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'description': {'type': 'string', 'description': 'Function description'}, 'flags': {'type': 'array', 'description': 'Flags assigned to the object.', 'items': {'type': 'string', 'description': 'Flags assigned to the object.', 'enum': ['ROLE', 'SYSADM']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64'}, 'name': {'type': 'string', 'description': 'Function name'}, 'securityLevel': {'type': 'string', 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}}}}}}}}}}, 'x-Argus-ApiStatus': 'PUBLIC'}
impersonate_session = {'tags': ['authentication/v1/session'], 'summary': 'Request an impersonated session (INTERNAL)', 'description': 'This operation will spawn a new user session impersonating another user, where the active users permissions are constrained to the intersection of the impersonating and impersonated users, and limited to the subset optionally specified in the request. In addition to returning the impersonating session token, the new session will be set as cookies, overwriting any existing session cookies.', 'operationId': 'impersonateSession', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'customer': {'type': 'list', 'description': 'Set of customers the session should be valid for. If not specified, customers will be inherited from active permissions.', 'items': {'type': 'str', 'description': 'Set of customers the session should be valid for. If not specified, customers will be inherited from active permissions.'}, 'uniqueItems': True}, 'domain': {'type': 'str', 'description': 'Domain of user to impersonate (id or name)'}, 'function': {'type': 'list', 'description': 'Set of functions/roles (by name) the session should be granted (default is all current functions). Cannot extend the current set of functions.', 'items': {'type': 'str', 'description': 'Set of functions/roles (by name) the session should be granted (default is all current functions). Cannot extend the current set of functions.'}, 'uniqueItems': True}, 'user': {'type': 'str', 'description': 'Username or ID of user to impersonate.'}}}}}, 'required': True}, 'responses': {'default': {'description': 'Request an impersonated session', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'authorizations': {'type': 'array', 'description': 'Any gratuitous authorization tokens generated during authentication, if requested by the client', 'items': {'type': 'object', 'properties': {'authorization': {'type': 'string', 'description': 'Authorization JWS string'}, 'expires': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this authorization expires'}, 'nextURI': {'type': 'string', 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'operation': {'type': 'string', 'description': 'Operation which is authorized by this token'}}}, 'uniqueItems': True}, 'credentials': {'type': 'object', 'description': 'The request credentials to use for this session', 'properties': {'clientIP': {'type': 'string'}, 'forwardedIP': {'type': 'string'}, 'requestCredentialsData': {'type': 'string'}, 'requestCredentialsType': {'type': 'string', 'enum': ['sessionToken', 'signature', 'apikey']}, 'uri': {'type': 'string'}}}, 'sessionKey': {'type': 'string'}}}}}}}}}, 'x-Argus-Required-Permissions': ['impersonate'], 'x-Argus-ApiStatus': 'INTERNAL'}