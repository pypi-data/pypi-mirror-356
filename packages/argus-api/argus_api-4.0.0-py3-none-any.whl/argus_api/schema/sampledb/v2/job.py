"""Autogenerated API schema"""
from argus_api import session


get_job = {'tags': ['sampledb/v2'], 'summary': 'Fetch an analysis job (INTERNAL)', 'description': '', 'operationId': 'getJob', 'parameters': [{'name': 'jobID', 'in': 'path', 'description': 'The ID of the job to fetch', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Fetch an analysis job', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Information about an analysis job', 'properties': {'analysedSample': {'type': 'object', 'description': 'A compact representation of a sample', 'properties': {'id': {'type': 'string', 'description': 'The ID of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the sample in bytes'}}}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'endTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the job was ended'}, 'enqueuedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the job was enqueued'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'startTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the job was started'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'The job could not be found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewAnalysisJobs'], 'x-Argus-ApiStatus': 'INTERNAL'}
get_job_task = {'tags': ['sampledb/v2'], 'summary': 'Fetch an analysis job task for the job with the given ID (INTERNAL)', 'description': '', 'operationId': 'getJobTask', 'parameters': [{'name': 'jobID', 'in': 'path', 'description': 'The ID of the job the task belongs to', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}, {'name': 'taskID', 'in': 'path', 'description': 'The ID of the task to fetch', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Fetch an analysis job task for the job with the given ID', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Information about an analysis job task', 'properties': {'analyses': {'type': 'array', 'description': 'The analyses produced by this task. A JobTask may have multiple analyses.', 'items': {'type': 'object', 'description': 'Compact representation of an analysis', 'properties': {'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The scores for the analysis'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}, 'uniqueItems': True}, 'endTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the task was completed'}, 'enqueuedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the task was enqueued'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'message': {'type': 'string', 'description': 'A message related to the execution of this task'}, 'startTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the task was started'}, 'state': {'type': 'string', 'description': 'The state the task is currently in', 'enum': ['enqueued', 'executing', 'success', 'failed', 'cancelled', 'timeout']}, 'worker': {'type': 'string', 'description': 'The name of the analyser'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'The job task could not be found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewAnalysisJobs'], 'x-Argus-ApiStatus': 'INTERNAL'}
list_job_tasks = {'tags': ['sampledb/v2'], 'summary': 'List analysis job tasks (INTERNAL)', 'description': '', 'operationId': 'listJobTasks', 'parameters': [{'name': 'jobID', 'in': 'path', 'description': 'The ID of the job to list tasks for', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "The fields to sort the results by. Prefix with '-' to sort descending", 'schema': {'type': 'list', 'default': 'worker', 'enum': ['worker', 'state', 'enqueuedTimestamp', 'startTimestamp', 'endTimestamp', '-worker', '-state', '-enqueuedTimestamp', '-startTimestamp', '-endTimestamp'], 'items': {'type': 'string'}}, 'type': 'list', 'default': 'worker', 'enum': ['worker', 'state', 'enqueuedTimestamp', 'startTimestamp', 'endTimestamp', '-worker', '-state', '-enqueuedTimestamp', '-startTimestamp', '-endTimestamp'], 'items': {'type': 'string'}}], 'responses': {'default': {'description': 'List analysis job tasks', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Information about an analysis job task', 'properties': {'analyses': {'type': 'array', 'description': 'The analyses produced by this task. A JobTask may have multiple analyses.', 'items': {'type': 'object', 'description': 'Compact representation of an analysis', 'properties': {'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The scores for the analysis'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}, 'uniqueItems': True}, 'endTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the task was completed'}, 'enqueuedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the task was enqueued'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'message': {'type': 'string', 'description': 'A message related to the execution of this task'}, 'startTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the task was started'}, 'state': {'type': 'string', 'description': 'The state the task is currently in', 'enum': ['enqueued', 'executing', 'success', 'failed', 'cancelled', 'timeout']}, 'worker': {'type': 'string', 'description': 'The name of the analyser'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'The job could not be found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewAnalysisJobs'], 'x-Argus-ApiStatus': 'INTERNAL'}
list_jobs = {'tags': ['sampledb/v2'], 'summary': 'List analysis jobs (INTERNAL)', 'description': '', 'operationId': 'listJobs', 'parameters': [{'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "The fields to sort the results by. Prefix with '-' to sort descending", 'schema': {'type': 'list', 'default': '-enqueuedTimestamp', 'enum': ['enqueuedTimestamp', 'state', 'startTimestamp', 'endTimestamp', '-enqueuedTimestamp', '-state', '-startTimestamp', '-endTimestamp'], 'items': {'type': 'string'}}, 'type': 'list', 'default': '-enqueuedTimestamp', 'enum': ['enqueuedTimestamp', 'state', 'startTimestamp', 'endTimestamp', '-enqueuedTimestamp', '-state', '-startTimestamp', '-endTimestamp'], 'items': {'type': 'string'}}, {'name': 'state', 'in': 'query', 'description': 'Only return jobs in either of the defined states', 'schema': {'type': 'list', 'items': {'type': 'str', 'enum': ['enqueued', 'executing', 'done', 'timeout']}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'str', 'enum': ['enqueued', 'executing', 'done', 'timeout']}, 'uniqueItems': True}], 'responses': {'default': {'description': 'List analysis jobs', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Information about an analysis job', 'properties': {'analysedSample': {'type': 'object', 'description': 'A compact representation of a sample', 'properties': {'id': {'type': 'string', 'description': 'The ID of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the sample in bytes'}}}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'endTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the job was ended'}, 'enqueuedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the job was enqueued'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'startTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the job was started'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewAnalysisJobs'], 'x-Argus-ApiStatus': 'INTERNAL'}
search_jobs = {'tags': ['sampledb/v2'], 'summary': 'Search for jobs matching the provided search criteria (INTERNAL)', 'description': '', 'operationId': 'searchJobs', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'The model used to search for jobs', 'properties': {'customer': {'type': 'list', 'description': 'Only return jobs for these customers. Can be either customer shortname or ID', 'items': {'type': 'str', 'description': 'Only return jobs for these customers. Can be either customer shortname or ID'}}, 'endTimestamp': {'type': 'int', 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped before this timestamp.Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details'}, 'limit': {'type': 'int', 'default': 25, 'description': "Set this value to set max number of results. Setting limit to 0 means 'unlimited'", 'minimum': 0}, 'offset': {'type': 'int', 'default': 0, 'description': 'Set this value to skip the first (offset) objects. By default, return result from first object.', 'minimum': 0}, 'sampleSha256': {'type': 'list', 'description': 'Only return jobs for these samples', 'items': {'type': 'str', 'description': 'Only return jobs for these samples'}}, 'sortBy': {'type': 'list', 'default': 'enqueuedTimestamp', 'description': 'Specify sort ordering for returned jobs', 'items': {'type': 'str', 'default': 'enqueuedTimestamp', 'description': 'Specify sort ordering for returned jobs', 'enum': ['enqueuedTimestamp', 'state', 'startTimestamp', 'endTimestamp', '-enqueuedTimestamp', '-state', '-startTimestamp', '-endTimestamp']}}, 'startTimestamp': {'type': 'int', 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped after this timestamp. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details'}, 'state': {'type': 'list', 'description': 'Only return jobs in either of these states', 'items': {'type': 'str', 'description': 'Only return jobs in either of these states', 'enum': ['enqueued', 'executing', 'done', 'timeout']}, 'uniqueItems': True}, 'timeFieldStrategy': {'type': 'list', 'default': 'all', 'description': 'What time fields to use to limit the search.', 'items': {'type': 'str', 'default': 'all', 'description': 'What time fields to use to limit the search.', 'enum': ['enqueuedTimestamp', 'startTimestamp', 'endTimestamp', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Whether all or any of the fields in timeFieldStrategy must fall within startTimestamp and endTimestamp', 'enum': ['all', 'any']}}}}}, 'required': True}, 'responses': {'default': {'description': 'Search for jobs matching the provided search criteria', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Information about an analysis job', 'properties': {'analysedSample': {'type': 'object', 'description': 'A compact representation of a sample', 'properties': {'id': {'type': 'string', 'description': 'The ID of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the sample in bytes'}}}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'endTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the job was ended'}, 'enqueuedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the job was enqueued'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'startTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the job was started'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'The job could not be found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewAnalysisJobs'], 'x-Argus-ApiStatus': 'INTERNAL'}
update_job_task = {'tags': ['sampledb/v2'], 'summary': 'Update the state of an analysis task (INTERNAL)', 'description': '', 'operationId': 'updateJobTask', 'parameters': [{'name': 'jobID', 'in': 'path', 'description': 'The ID of the job', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}, {'name': 'taskID', 'in': 'path', 'description': 'The ID of the task', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request to update a job task', 'properties': {'analyses': {'type': 'list', 'description': 'The IDs of the analyses produced by this task', 'items': {'type': 'str', 'description': 'The IDs of the analyses produced by this task'}, 'uniqueItems': True}, 'message': {'type': 'str', 'description': 'A message related to the execution of the task'}, 'state': {'type': 'str', 'description': 'The new state of the job task', 'enum': ['executing', 'success', 'failed', 'cancelled']}}, 'required': ['state']}}}, 'required': True}, 'responses': {'default': {'description': 'Update the state of an analysis task', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Information about an analysis job task', 'properties': {'analyses': {'type': 'array', 'description': 'The analyses produced by this task. A JobTask may have multiple analyses.', 'items': {'type': 'object', 'description': 'Compact representation of an analysis', 'properties': {'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The scores for the analysis'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}, 'uniqueItems': True}, 'endTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the task was completed'}, 'enqueuedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the task was enqueued'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'message': {'type': 'string', 'description': 'A message related to the execution of this task'}, 'startTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the task was started'}, 'state': {'type': 'string', 'description': 'The state the task is currently in', 'enum': ['enqueued', 'executing', 'success', 'failed', 'cancelled', 'timeout']}, 'worker': {'type': 'string', 'description': 'The name of the analyser'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'The job could not be found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['updateAnalysisJob'], 'x-Argus-ApiStatus': 'INTERNAL'}