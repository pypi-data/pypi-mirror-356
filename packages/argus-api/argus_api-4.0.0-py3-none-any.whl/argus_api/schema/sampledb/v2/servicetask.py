"""Autogenerated API schema"""
from argus_api import session


abort_task = {'summary': 'Abort a running or pending task (DEV)', 'description': '', 'operationId': 'abortTask', 'parameters': [{'name': 'taskID', 'in': 'path', 'description': 'ID of task to abort', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Abort a running or pending task', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'correlationID': {'type': 'string', 'format': 'uuid', 'description': 'The correlationID of this task. The correlationID is set by the requesting client, to allow lookup based on a pre-selected value. If not requested, this value is null.'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was created/enqueued'}, 'executionTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task started executing, or 0 if not started'}, 'finishedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was finished/aborted/failed, or 0 if not finished'}, 'flags': {'type': 'array', 'description': 'Flags for this task', 'items': {'type': 'string', 'description': 'Flags for this task', 'enum': ['hasSubtasks', 'hasFailedSubtasks', 'hasFinalizationStage']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'operation': {'type': 'string', 'description': 'The name of the operation of this task. The operation names are service dependant.'}, 'parentTask': {'type': 'object', 'description': 'Reference to parent task, if this task is a subtask, else this field is null', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}}}, 'responseContext': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Response context map, filled out by worker'}, 'description': 'Response context map, filled out by worker'}, 'responseMessages': {'type': 'array', 'description': 'Response messages from worker', 'items': {'type': 'object', 'description': 'Response messages from worker', 'properties': {'message': {'type': 'string', 'description': 'The message added by the worker'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this message was added'}}}}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'workerHost': {'type': 'string', 'description': 'Name of host where task was executed'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'DEV'}
get_task = {'summary': 'List status for service tasks (DEV)', 'description': '', 'operationId': 'getTask', 'parameters': [{'name': 'taskID', 'in': 'path', 'description': 'ID of task to fetch', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'List status for service tasks', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'correlationID': {'type': 'string', 'format': 'uuid', 'description': 'The correlationID of this task. The correlationID is set by the requesting client, to allow lookup based on a pre-selected value. If not requested, this value is null.'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was created/enqueued'}, 'executionTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task started executing, or 0 if not started'}, 'finishedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was finished/aborted/failed, or 0 if not finished'}, 'flags': {'type': 'array', 'description': 'Flags for this task', 'items': {'type': 'string', 'description': 'Flags for this task', 'enum': ['hasSubtasks', 'hasFailedSubtasks', 'hasFinalizationStage']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'operation': {'type': 'string', 'description': 'The name of the operation of this task. The operation names are service dependant.'}, 'parentTask': {'type': 'object', 'description': 'Reference to parent task, if this task is a subtask, else this field is null', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}}}, 'responseContext': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Response context map, filled out by worker'}, 'description': 'Response context map, filled out by worker'}, 'responseMessages': {'type': 'array', 'description': 'Response messages from worker', 'items': {'type': 'object', 'description': 'Response messages from worker', 'properties': {'message': {'type': 'string', 'description': 'The message added by the worker'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this message was added'}}}}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'workerHost': {'type': 'string', 'description': 'Name of host where task was executed'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'DEV'}
list_tasks = {'summary': 'List status for service tasks (DEV)', 'description': '', 'operationId': 'listTasks', 'parameters': [{'name': 'state', 'in': 'query', 'description': 'Filter results by state', 'schema': {'type': 'list', 'items': {'type': 'str', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'str', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'uniqueItems': True}, {'name': 'operation', 'in': 'query', 'description': 'Filter results by operation (service dependant)', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'user', 'in': 'query', 'description': 'Filter results by user (id or shortname)', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'parentTask', 'in': 'query', 'description': 'Filter results by parent task ID', 'schema': {'type': 'list', 'items': {'type': 'str'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'str'}, 'uniqueItems': True}, {'name': 'limit', 'in': 'query', 'description': 'Limit number of results', 'schema': {'type': 'int', 'default': '25'}, 'type': 'int', 'default': '25'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0'}, 'type': 'int', 'default': '0'}], 'responses': {'default': {'description': 'List status for service tasks', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'correlationID': {'type': 'string', 'format': 'uuid', 'description': 'The correlationID of this task. The correlationID is set by the requesting client, to allow lookup based on a pre-selected value. If not requested, this value is null.'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was created/enqueued'}, 'executionTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task started executing, or 0 if not started'}, 'finishedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was finished/aborted/failed, or 0 if not finished'}, 'flags': {'type': 'array', 'description': 'Flags for this task', 'items': {'type': 'string', 'description': 'Flags for this task', 'enum': ['hasSubtasks', 'hasFailedSubtasks', 'hasFinalizationStage']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'operation': {'type': 'string', 'description': 'The name of the operation of this task. The operation names are service dependant.'}, 'parentTask': {'type': 'object', 'description': 'Reference to parent task, if this task is a subtask, else this field is null', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}}}, 'responseContext': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Response context map, filled out by worker'}, 'description': 'Response context map, filled out by worker'}, 'responseMessages': {'type': 'array', 'description': 'Response messages from worker', 'items': {'type': 'object', 'description': 'Response messages from worker', 'properties': {'message': {'type': 'string', 'description': 'The message added by the worker'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this message was added'}}}}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'workerHost': {'type': 'string', 'description': 'Name of host where task was executed'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'DEV'}
reindex_resources = {'tags': ['sampledb/v2'], 'summary': 'Starts a reindex service task for samples and/or submissions (DEV)', 'description': '', 'operationId': 'reindexResources', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request for samples and submissions to be reindexed', 'properties': {'dataCenter': {'type': 'str', 'default': 'all', 'description': 'Which data center(s) to reindex at', 'enum': ['all', 'osl', 'svg']}, 'endTimestamp': {'type': 'str', 'description': 'Timestamp to end reindexing  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'resource': {'type': 'str', 'default': 'sample', 'description': 'Types of resources to be reindexed', 'enum': ['all', 'sample', 'submission']}, 'reversed': {'type': 'bool', 'default': True, 'description': 'Reindexing order'}, 'startTimestamp': {'type': 'str', 'description': 'Timestamp to start reindexing  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}}, 'required': ['dataCenter', 'resource']}}}, 'required': True}, 'responses': {'default': {'description': 'Starts a reindex service task for samples and/or submissions', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The resulting correlation ID of the created tasks', 'properties': {'correlationID': {'type': 'string', 'format': 'uuid', 'description': 'The correlation ID of the service task. Not to be confused with an actual task ID,\nthe correlation ID can be used to reference tasks created from the request at a later point in time\nas these are created async.\n'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['reindexSampleResources'], 'x-Argus-ApiStatus': 'DEV'}
search_tasks = {'summary': 'List status for service tasks (DEV)', 'description': '', 'operationId': 'searchTasks', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'correlationID': {'type': 'list', 'description': 'Filter tasks by task correlation ID', 'items': {'type': 'str', 'description': 'Filter tasks by task correlation ID'}, 'uniqueItems': True}, 'endTimestamp': {'type': 'int', 'description': 'Filter tasks with selected time fields before this timestamp.'}, 'limit': {'type': 'int', 'minimum': 0}, 'offset': {'type': 'int', 'minimum': 0}, 'operation': {'type': 'list', 'description': 'Filter tasks by operation name. Valid operations are service dependant.', 'items': {'type': 'str', 'description': 'Filter tasks by operation name. Valid operations are service dependant.'}, 'uniqueItems': True}, 'parentTask': {'type': 'list', 'description': 'Filter tasks by parent task ID', 'items': {'type': 'str', 'description': 'Filter tasks by parent task ID'}, 'uniqueItems': True}, 'startTimestamp': {'type': 'int', 'description': 'Filter tasks with selected time fields after this timestamp.'}, 'state': {'type': 'list', 'description': 'Filter tasks by state.', 'items': {'type': 'str', 'description': 'Filter tasks by state.', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'uniqueItems': True}, 'timeFieldStrategy': {'type': 'list', 'description': "Select which time fields to use for time search. Defaults to 'all'", 'items': {'type': 'str', 'description': "Select which time fields to use for time search. Defaults to 'all'", 'enum': ['all', 'createdTimestamp', 'executionTimestamp', 'finishedTimestamp']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'description': "Select if any or all time fields must match time search. Defaults to 'any'.", 'enum': ['any', 'all']}, 'user': {'type': 'list', 'description': 'Filter tasks by creating user (id or shortname).', 'items': {'type': 'str', 'description': 'Filter tasks by creating user (id or shortname).'}, 'uniqueItems': True}}}}}, 'required': True}, 'responses': {'default': {'description': 'List status for service tasks', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'correlationID': {'type': 'string', 'format': 'uuid', 'description': 'The correlationID of this task. The correlationID is set by the requesting client, to allow lookup based on a pre-selected value. If not requested, this value is null.'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was created/enqueued'}, 'executionTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task started executing, or 0 if not started'}, 'finishedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Time when task was finished/aborted/failed, or 0 if not finished'}, 'flags': {'type': 'array', 'description': 'Flags for this task', 'items': {'type': 'string', 'description': 'Flags for this task', 'enum': ['hasSubtasks', 'hasFailedSubtasks', 'hasFinalizationStage']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'operation': {'type': 'string', 'description': 'The name of the operation of this task. The operation names are service dependant.'}, 'parentTask': {'type': 'object', 'description': 'Reference to parent task, if this task is a subtask, else this field is null', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this task'}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}}}, 'responseContext': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Response context map, filled out by worker'}, 'description': 'Response context map, filled out by worker'}, 'responseMessages': {'type': 'array', 'description': 'Response messages from worker', 'items': {'type': 'object', 'description': 'Response messages from worker', 'properties': {'message': {'type': 'string', 'description': 'The message added by the worker'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this message was added'}}}}, 'state': {'type': 'string', 'description': 'The current state of this task', 'enum': ['pending', 'running', 'waitingForSubtasks', 'done', 'failed', 'aborted']}, 'workerHost': {'type': 'string', 'description': 'Name of host where task was executed'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-ApiStatus': 'DEV'}