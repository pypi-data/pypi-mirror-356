"""Autogenerated API schema"""
from argus_api import session


add_analysis = {'tags': ['sampledb/v2'], 'summary': 'Adds an analysis to a sample (INTERNAL)', 'description': '', 'operationId': 'addAnalysis', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to add analysis result to', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request to create an analysis', 'properties': {'acl': {'type': 'list', 'description': 'The shortname or IDs of users or groups that will be given explicit access', 'items': {'type': 'str', 'description': 'The shortname or IDs of users or groups that will be given explicit access'}, 'uniqueItems': True}, 'analysisResult': {'type': 'object'}, 'analysisScore': {'type': 'int', 'description': 'The score for this analysis. The value is a score from -1 to 100 and is an indication of how certain the analyzer is that the sample is malicious. A value of -1 indicates no findings.', 'maximum': 100, 'minimum': -1}, 'customer': {'type': 'str', 'description': 'The shortname or ID of customer the analysis belongs to'}, 'executedWithInternetAccess': {'type': 'bool', 'description': 'A boolean to indicate whether the analysis have been executed with internet access or not'}, 'possibleDetections': {'type': 'int', 'description': 'The maximum number of possible detections'}, 'profile': {'type': 'str', 'description': 'The execution profile of the worker', 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'tags': {'type': 'list', 'description': 'The tags for the analysis', 'items': {'type': 'dict', 'description': 'A tag with a type and value for an analysis', 'properties': {'type': 'str', 'value': {'type': 'str', 'description': 'The value for the tag', 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'options': ['family', 'behaviour', 'yara']}, 'required': ['type', 'value']}, 'uniqueItems': True}, 'tlp': {'type': 'str', 'description': 'The TLP level of the analysis', 'enum': ['red', 'amber', 'green', 'clear']}, 'triggeredDetections': {'type': 'list', 'description': 'The triggered detections for this analysis', 'items': {'type': 'dict', 'description': 'Request used to add an analysis detection', 'properties': {'assessment': {'type': 'str', 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}, 'name': {'type': 'str', 'description': 'The name of the detection', 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}, 'required': ['assessment', 'name']}}, 'userAgent': {'type': 'dict', 'description': 'The user agent used in add requests', 'properties': {'name': {'type': 'str', 'description': 'The name of the user agent', 'pattern': '[a-zA-Z0-9_:\\-\\.]*'}, 'version': {'type': 'str', 'description': 'The version of the user agent, should be updated for each code or configuration change', 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}, 'required': ['name', 'version']}, 'verdictStatusOverride': {'type': 'str', 'description': "Can be set to signify that the worker posting the analysis result is 100% certain that the sample is malicious or benign. The verdict engine will consider this field and use as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead", 'enum': ['malicious', 'benign']}}, 'required': ['analysisResult', 'analysisScore', 'customer', 'tlp', 'userAgent']}}}, 'required': True}, 'responses': {'default': {'description': 'Adds an analysis to a sample', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The result of an analysis performed on a sample', 'properties': {'acl': {'type': 'array', 'description': 'List of users given explicit access', 'items': {'type': 'object', 'description': 'Response model for access control', 'properties': {'grantedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'grantedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The time at which the explicit access was granted'}, 'subject': {'type': 'object', 'description': 'SPI SubjectInfo', 'discriminator': {'propertyName': 'type'}, 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'analysisID': {'type': 'string', 'format': 'uuid', 'description': 'The ID of the analysis'}, 'analysisResult': {'type': 'object'}, 'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The value is a score from -1 to 100 and is an indication of how certain the analyzer is that the sample is malicious'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the analysis was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'flags': {'type': 'array', 'description': 'The flags for the analysis', 'items': {'type': 'string', 'description': 'The flags for the analysis', 'enum': ['executedWithInternetAccess', 'hasEvidence']}, 'uniqueItems': True}, 'job': {'type': 'object', 'description': 'A compact representation of an analysis job', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}, 'possibleDetections': {'type': 'integer', 'format': 'int32', 'description': 'The maximum number of possible detections'}, 'profile': {'type': 'string', 'description': 'The execution profile of the worker'}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample the analysis is for'}, 'tags': {'type': 'array', 'description': 'The tags for the analysis', 'items': {'type': 'object', 'description': 'A tag with a type and value for an analysis', 'properties': {'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}, 'tlp': {'type': 'string', 'description': 'The TLP level of the analysis', 'enum': ['red', 'amber', 'green', 'clear']}, 'triggeredDetections': {'type': 'array', 'description': 'The triggered detections for this analysis', 'items': {'type': 'object', 'description': 'Representation of an analysis detection', 'properties': {'assessment': {'type': 'string', 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}, 'name': {'type': 'string', 'description': 'The name of the detection'}}}}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}, 'verdictStatusOverride': {'type': 'string', 'description': "Signifies that the worker posting the analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead", 'enum': ['malicious', 'benign']}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['addSampleAnalysis'], 'x-Argus-ApiStatus': 'INTERNAL'}
add_link = {'tags': ['sampledb/v2'], 'summary': 'Adds an link to a sample (INTERNAL)', 'description': '', 'operationId': 'addLink', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to add link to', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request to add a link', 'properties': {'acl': {'type': 'list', 'description': 'The shortname or IDs of users or groups that will be given explicit access', 'items': {'type': 'str', 'description': 'The shortname or IDs of users or groups that will be given explicit access'}, 'uniqueItems': True}, 'customer': {'type': 'str', 'description': 'The shortname or ID of customer the link belongs to'}, 'reference': {'type': 'str', 'description': 'The ID of the sample the link references'}, 'tlp': {'type': 'str', 'description': 'The TLP level of the link', 'enum': ['red', 'amber', 'green', 'clear']}, 'type': {'type': 'str', 'description': 'The nature of the link between the two samples', 'enum': ['parent', 'child', 'downloads', 'loads', 'executes']}, 'userAgent': {'type': 'dict', 'description': 'The user agent used in add requests', 'properties': {'name': {'type': 'str', 'description': 'The name of the user agent', 'pattern': '[a-zA-Z0-9_:\\-\\.]*'}, 'version': {'type': 'str', 'description': 'The version of the user agent, should be updated for each code or configuration change', 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}, 'required': ['name', 'version']}}, 'required': ['reference', 'tlp', 'type', 'userAgent']}}}, 'required': True}, 'responses': {'default': {'description': 'Adds an link to a sample', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Representation of a link between two samples', 'properties': {'acl': {'type': 'array', 'description': 'List of users given explicit access', 'items': {'type': 'object', 'description': 'Response model for access control', 'properties': {'grantedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'grantedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The time at which the explicit access was granted'}, 'subject': {'type': 'object', 'description': 'SPI SubjectInfo', 'discriminator': {'propertyName': 'type'}, 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the link was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'flags': {'type': 'array', 'description': 'Flags for this link', 'items': {'type': 'string', 'description': 'Flags for this link', 'enum': ['deadReference']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this link'}, 'referencedSample': {'type': 'object', 'description': 'Metadata for a sample file', 'properties': {'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the sample was created.'}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the sample was deleted'}, 'firstObservedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the first observation for this sample'}, 'firstSubmittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the first submission for this sample'}, 'flags': {'type': 'array', 'description': 'The flags set for this sample', 'items': {'type': 'string', 'description': 'The flags set for this sample', 'enum': ['exceededMaxSearchableSubmissions', 'exceededMaxSearchableLinks', 'exceededMaxSearchableAnalyses', 'exceededMaxSearchableStaticFacts', 'deleted']}, 'uniqueItems': True}, 'lastObservedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the last observation for this sample'}, 'lastSubmittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the last submission for this sample'}, 'latestClassification': {'type': 'object', 'description': 'The result of a classification performed on a sample', 'properties': {'arch': {'type': 'string', 'description': 'The architecture for the sample'}, 'metaData': {'type': 'object', 'additionalProperties': {'description': 'Meta data for the sample'}, 'description': 'Meta data for the sample'}, 'platform': {'type': 'string', 'description': 'The platform for the sample'}, 'superType': {'type': 'string', 'description': 'The super type of file for the sample'}, 'type': {'type': 'string', 'description': 'The type of file for the sample'}, 'version': {'type': 'string', 'description': 'The version of the classifier used to generate this classification'}}}, 'latestVerdict': {'type': 'object', 'description': 'Representation of a verdict about a sample', 'properties': {'analysis': {'type': 'array', 'description': 'The analyses that this verdict is based on', 'items': {'type': 'object', 'description': 'Compact representation of an analysis', 'properties': {'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The scores for the analysis'}, 'difference': {'type': 'integer', 'format': 'int32', 'description': 'Represents the difference between this analysis result from the overall verdict score.\nInteger value from -100 to 100, or null if the analysis resulted in no findings'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'impact': {'type': 'integer', 'format': 'int32', 'description': 'Represents how much the worker/source impacted to the overall verdict score.\nInteger value from 0 to 100, or null if the analysis resulted in no findings'}, 'possibleDetections': {'type': 'integer', 'format': 'int32', 'description': 'The maximum number of possible detections'}, 'tags': {'type': 'array', 'description': 'The tags for the analysis', 'items': {'type': 'object', 'description': 'A tag with a type and value for an analysis', 'properties': {'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}, 'triggeredDetections': {'type': 'array', 'description': 'The triggered detections for this analysis', 'items': {'type': 'object', 'description': 'Representation of an analysis detection', 'properties': {'assessment': {'type': 'string', 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}, 'name': {'type': 'string', 'description': 'The name of the detection'}}}, 'uniqueItems': True}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}, 'uniqueItems': True}, 'comment': {'type': 'string', 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'array', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'items': {'type': 'string', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}, 'uniqueItems': True}, 'job': {'type': 'object', 'description': 'A compact representation of an analysis job', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample this verdict belongs to'}, 'score': {'type': 'integer', 'format': 'int32', 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}, 'statusOverride': {'type': 'string', 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'tags': {'type': 'array', 'description': 'Tags for the verdict', 'items': {'type': 'object', 'description': 'A tag for verdicts', 'properties': {'count': {'type': 'integer', 'format': 'int32', 'description': 'The number of times this tag was found in analysis results'}, 'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}}}, 'md5': {'type': 'string', 'description': 'The MD5 hash of the sample'}, 'sha1': {'type': 'string', 'description': 'The SHA1 hash of the sample'}, 'sha256': {'type': 'string', 'description': 'The ID of the sample'}, 'sha512': {'type': 'string', 'description': 'The SHA512 hash of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the sample in bytes'}}}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample this link belongs to'}, 'tlp': {'type': 'string', 'description': 'The TLP level of the link', 'enum': ['red', 'amber', 'green', 'clear']}, 'type': {'type': 'string', 'description': 'The nature of the link between the two samples', 'enum': ['parent', 'child', 'downloads', 'loads', 'executes']}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['addSampleAnalysis'], 'x-Argus-ApiStatus': 'INTERNAL'}
add_sample = {'tags': ['sampledb/v2'], 'summary': 'Upload a new sample file (INTERNAL)', 'description': '', 'operationId': 'addSample', 'requestBody': {'content': {'*': {'schema': {'type': 'object'}}}}, 'responses': {'default': {'description': 'Upload a new sample file', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The response from a sample upload', 'properties': {'challenge': {'type': 'object', 'description': 'A challenge for a particular sample', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The id of the challenge'}, 'sha256': {'type': 'string', 'description': 'The challenge token'}}}, 'exists': {'type': 'boolean', 'description': 'Whether the sample already existed'}, 'sample': {'type': 'object', 'description': 'A compact representation of a sample', 'properties': {'id': {'type': 'string', 'description': 'The ID of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the sample in bytes'}}}}}}}}}}, '201': {'description': 'The sample was created', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The response from a sample upload', 'properties': {'challenge': {'type': 'object', 'description': 'A challenge for a particular sample', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The id of the challenge'}, 'sha256': {'type': 'string', 'description': 'The challenge token'}}}, 'exists': {'type': 'boolean', 'description': 'Whether the sample already existed'}, 'sample': {'type': 'object', 'description': 'A compact representation of a sample', 'properties': {'id': {'type': 'string', 'description': 'The ID of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the sample in bytes'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'An error occurred', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['submitSample'], 'x-Argus-ApiStatus': 'INTERNAL'}
add_static_fact = {'tags': ['sampledb/v2'], 'summary': 'Endpoint for registering a new static fact (DEV)', 'description': '', 'operationId': 'addStaticFact', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample to add the static fact to', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request to register a static fact on a sample', 'properties': {'key': {'type': 'str', 'description': 'The static fact key'}, 'userAgent': {'type': 'dict', 'description': 'The user agent used in add requests', 'properties': {'name': {'type': 'str', 'description': 'The name of the user agent', 'pattern': '[a-zA-Z0-9_:\\-\\.]*'}, 'version': {'type': 'str', 'description': 'The version of the user agent, should be updated for each code or configuration change', 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}, 'required': ['name', 'version']}, 'value': {'type': 'str', 'description': 'The static fact value'}}, 'required': ['key', 'userAgent', 'value']}}}, 'required': True}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Endpoint for registering a new static fact', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The static fact added to a sample', 'properties': {'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the static fact was created'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the static fact'}, 'key': {'type': 'string', 'description': 'Key of the static fact'}, 'sampleSha256': {'type': 'string', 'description': 'Sha256 that the static fact belongs to'}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}, 'value': {'type': 'string', 'description': 'Value of the static fact'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['addSampleFact'], 'x-Argus-ApiStatus': 'DEV'}
add_submission = {'tags': ['sampledb/v2'], 'summary': 'Add a new sample submission. Requires a challenge token. A challenge token is a solution to a challenge generated by the challenge endpoint (INTERNAL)', 'description': '', 'operationId': 'addSubmission', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to add submission for', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request to add a submission', 'properties': {'acl': {'type': 'list', 'description': 'List of user IDs or shortnames that are given explicit access to the submission', 'items': {'type': 'str', 'description': 'List of user IDs or shortnames that are given explicit access to the submission'}, 'uniqueItems': True}, 'challengeToken': {'type': 'dict', 'description': 'Request containing the answer to a challenge', 'properties': {'id': {'type': 'str', 'description': 'The id of the challenge'}, 'sha256': {'type': 'str', 'description': 'The challenge token'}}, 'required': ['id', 'sha256']}, 'customer': {'type': 'str', 'description': "The shortname or ID of customer the submission belongs to. Default value is the currernt user's customer"}, 'fileName': {'type': 'str', 'description': 'The filename of the sample'}, 'metaData': {'type': 'dict', 'additionalProperties': {'type': 'str', 'default': '{}', 'description': 'Meta data about the sample'}, 'default': '{}', 'description': 'Meta data about the sample'}, 'mimeType': {'type': 'str', 'default': 'application/octet-stream', 'description': 'The sample mime type'}, 'observedTimestamp': {'type': 'int', 'description': 'The timestamp of when the sample was observed. Defaults to the current time'}, 'retention': {'type': 'str', 'description': 'Only retain the submission until the specified time. The submission will be deleted after this time, unless the sample is malicious. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'tlp': {'type': 'str', 'default': 'amber', 'description': 'TLP color of the submission. Submissions with TLP Red will be rejected as Sample Service does not support submissions with TLP redDefaults to amber', 'enum': ['red', 'amber', 'green', 'clear']}, 'userAgent': {'type': 'dict', 'description': 'The user agent used in add requests', 'properties': {'name': {'type': 'str', 'description': 'The name of the user agent', 'pattern': '[a-zA-Z0-9_:\\-\\.]*'}, 'version': {'type': 'str', 'description': 'The version of the user agent, should be updated for each code or configuration change', 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}, 'required': ['name', 'version']}}, 'required': ['challengeToken', 'fileName', 'userAgent']}}}, 'required': True}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Add a new sample submission. Requires a challenge token. A challenge token is a solution to a challenge generated by the challenge endpoint', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'A submission for a sample. Represents the observation of a sample at a customer site', 'properties': {'acl': {'type': 'array', 'description': 'List of access controls that describe explicit access given to users or groups for this submission', 'items': {'type': 'object', 'description': 'Response model for access control', 'properties': {'grantedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'grantedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The time at which the explicit access was granted'}, 'subject': {'type': 'object', 'description': 'SPI SubjectInfo', 'discriminator': {'propertyName': 'type'}, 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}, 'uniqueItems': True}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'expiryTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the submission will be deleted'}, 'fileName': {'type': 'string', 'description': 'The filename of the sample'}, 'flags': {'type': 'array', 'description': 'The flags set on this submission', 'items': {'type': 'string', 'description': 'The flags set on this submission', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'metaData': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Meta data about the sample'}, 'description': 'Meta data about the sample'}, 'mimeType': {'type': 'string', 'description': 'The sample mime type'}, 'observedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the sample was observed'}, 'sampleSha256': {'type': 'string', 'description': 'The sample this submission belongs to'}, 'submittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the submission was added'}, 'tlp': {'type': 'string', 'description': 'TLP color of the submission', 'enum': ['red', 'amber', 'green', 'clear']}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['addSampleSubmission'], 'x-Argus-ApiStatus': 'INTERNAL'}
add_verdict = {'tags': ['sampledb/v2'], 'summary': 'Manually add a verdict to a sample (INTERNAL)', 'description': '', 'operationId': 'addVerdict', 'parameters': [{'name': 'sha256', 'in': 'path', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request to add a verdict', 'properties': {'comment': {'type': 'str', 'description': 'A comment providing information or context to the verdict', 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'statusOverride': {'type': 'str', 'description': 'Field for manually overriding the status of the sample. If this field is set, this overrides the future event generations and verdicts for this sample', 'enum': ['malicious', 'benign']}}, 'required': ['comment', 'statusOverride']}}}, 'required': True}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Manually add a verdict to a sample', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Representation of a verdict about a sample', 'properties': {'analysis': {'type': 'array', 'description': 'The analyses that this verdict is based on', 'items': {'type': 'object', 'description': 'Compact representation of an analysis', 'properties': {'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The scores for the analysis'}, 'difference': {'type': 'integer', 'format': 'int32', 'description': 'Represents the difference between this analysis result from the overall verdict score.\nInteger value from -100 to 100, or null if the analysis resulted in no findings'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'impact': {'type': 'integer', 'format': 'int32', 'description': 'Represents how much the worker/source impacted to the overall verdict score.\nInteger value from 0 to 100, or null if the analysis resulted in no findings'}, 'possibleDetections': {'type': 'integer', 'format': 'int32', 'description': 'The maximum number of possible detections'}, 'tags': {'type': 'array', 'description': 'The tags for the analysis', 'items': {'type': 'object', 'description': 'A tag with a type and value for an analysis', 'properties': {'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}, 'triggeredDetections': {'type': 'array', 'description': 'The triggered detections for this analysis', 'items': {'type': 'object', 'description': 'Representation of an analysis detection', 'properties': {'assessment': {'type': 'string', 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}, 'name': {'type': 'string', 'description': 'The name of the detection'}}}, 'uniqueItems': True}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}, 'uniqueItems': True}, 'comment': {'type': 'string', 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'array', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'items': {'type': 'string', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}, 'uniqueItems': True}, 'job': {'type': 'object', 'description': 'A compact representation of an analysis job', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample this verdict belongs to'}, 'score': {'type': 'integer', 'format': 'int32', 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}, 'statusOverride': {'type': 'string', 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'tags': {'type': 'array', 'description': 'Tags for the verdict', 'items': {'type': 'object', 'description': 'A tag for verdicts', 'properties': {'count': {'type': 'integer', 'format': 'int32', 'description': 'The number of times this tag was found in analysis results'}, 'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['addSampleVerdict'], 'x-Argus-ApiStatus': 'INTERNAL'}
advanced_search = {'tags': ['sampledb/v2'], 'summary': 'Advanced search for samples (PUBLIC)', 'description': '', 'operationId': 'advancedSearch', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request used for sample search', 'properties': {'analysis': {'type': 'list', 'description': 'Search criteria for analysis', 'items': {'type': 'dict', 'description': 'Request used to search for analyses', 'properties': {'analysisResult': {'type': 'list', 'description': 'Restrict the search to analyses with either of the meta data properties defined', 'items': {'type': 'dict', 'description': 'Request used to search for sample metadata', 'properties': {'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'path': {'type': 'str', 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement'}, 'value': {'type': 'list', 'description': "Values to match against the field pointed to by 'path'", 'items': {'type': 'str', 'description': "Values to match against the field pointed to by 'path'"}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}, 'userAgent': {'type': 'list', 'description': 'Restrict the search to analysis with either of the user agents defined', 'items': {'type': 'dict', 'description': 'The user agent request used in sample search', 'properties': {'name': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined names', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined names'}, 'uniqueItems': True}, 'version': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined versions', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined versions'}, 'uniqueItems': True}}}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'classification': {'type': 'list', 'description': 'Search criteria for classifications', 'items': {'type': 'dict', 'description': 'Request used to search for classifications', 'properties': {'arch': {'type': 'list', 'description': 'Criteria for the arch field of a classification', 'items': {'type': 'str', 'description': 'Criteria for the arch field of a classification'}, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'metaData': {'type': 'list', 'description': 'Criteria for the meta data field of a classification', 'items': {'type': 'dict', 'description': 'Request used to search for sample metadata', 'properties': {'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'path': {'type': 'str', 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement'}, 'value': {'type': 'list', 'description': "Values to match against the field pointed to by 'path'", 'items': {'type': 'str', 'description': "Values to match against the field pointed to by 'path'"}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'platform': {'type': 'list', 'description': 'Criteria for the platform field of a classification', 'items': {'type': 'str', 'description': 'Criteria for the platform field of a classification'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement'}, 'superType': {'type': 'list', 'description': 'Criteria for the superType field of a classification', 'items': {'type': 'str', 'description': 'Criteria for the superType field of a classification'}, 'uniqueItems': True}, 'type': 'list', 'version': {'type': 'list', 'description': 'Criteria for the version field of a classification', 'items': {'type': 'str', 'description': 'Criteria for the version field of a classification'}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'customer': {'type': 'list', 'description': 'Restrict the search to samples containing submissions owned by certain customers', 'items': {'type': 'str', 'description': 'Restrict the search to samples containing submissions owned by certain customers'}, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped before this timestamp.Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'fact': {'type': 'list', 'description': 'Search criteria for static facts', 'items': {'type': 'dict', 'description': 'Request used to search for static facts', 'properties': {'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'key': {'type': 'list', 'description': 'Restrict the search to static facts with one of the keys', 'items': {'type': 'str', 'description': 'Restrict the search to static facts with one of the keys'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}, 'userAgent': {'type': 'list', 'description': 'Restrict the search to static facts with one of the user agents defined', 'items': {'type': 'dict', 'description': 'The user agent request used in sample search', 'properties': {'name': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined names', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined names'}, 'uniqueItems': True}, 'version': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined versions', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined versions'}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'value': {'type': 'list', 'description': 'Restrict the search to static facts with one of the values', 'items': {'type': 'str', 'description': 'Restrict the search to static facts with one of the values'}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'indexEndTimestamp': {'type': 'str', 'default': 'now', 'description': 'Restrict search to data before this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'indexStartTimestamp': {'type': 'str', 'default': 'now - 1 month', 'description': 'Restrict search to data after this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'keywordFieldStrategy': {'type': 'list', 'description': 'Restrict to search only in the selected keyword fields', 'items': {'type': 'str', 'description': 'Restrict to search only in the selected keyword fields', 'enum': ['all', 'sha256', 'sha512', 'sha1', 'md5', 'submission', 'analysis', 'link', 'classification', 'verdict', 'fact']}, 'uniqueItems': True}, 'keywordMatchStrategy': {'type': 'str', 'description': 'Whether all or any (default) of the fields must match one or more of the keywords', 'enum': ['all', 'any']}, 'keywords': {'type': 'list', 'description': 'A set of keywords to search for', 'items': {'type': 'str', 'description': 'A set of keywords to search for'}, 'uniqueItems': True}, 'limit': {'type': 'int', 'default': 25, 'description': 'Limit the number of search results', 'maximum': 10000, 'minimum': 0}, 'link': {'type': 'list', 'description': 'Search criteria for links', 'items': {'type': 'dict', 'description': 'Request used to search for links', 'properties': {'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'linkType': {'type': 'list', 'description': 'Restrict the search to links of a certain type', 'items': {'type': 'str', 'description': 'Restrict the search to links of a certain type', 'enum': ['parent', 'child', 'downloads', 'loads', 'executes']}, 'uniqueItems': True}, 'reference': {'type': 'list', 'description': 'Restrict the search by the sample sha256 ID a link is referencing', 'items': {'type': 'str', 'description': 'Restrict the search by the sample sha256 ID a link is referencing'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}, 'userAgent': {'type': 'list', 'description': 'Restrict the search to link with either of the user agents defined', 'items': {'type': 'dict', 'description': 'The user agent request used in sample search', 'properties': {'name': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined names', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined names'}, 'uniqueItems': True}, 'version': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined versions', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined versions'}, 'uniqueItems': True}}}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'md5': {'type': 'list', 'description': 'Restrict to search only in samples with these md5 hashes', 'items': {'type': 'str', 'description': 'Restrict to search only in samples with these md5 hashes'}, 'uniqueItems': True}, 'offset': {'type': 'int', 'default': 0, 'description': 'Skip a number of search results', 'maximum': 10000, 'minimum': 0}, 'sha1': {'type': 'list', 'description': 'Restrict to search only in samples with these sha1 hashes', 'items': {'type': 'str', 'description': 'Restrict to search only in samples with these sha1 hashes'}, 'uniqueItems': True}, 'sha256': {'type': 'list', 'description': 'Restrict to search only in the selected sample sha256 IDs', 'items': {'type': 'str', 'description': 'Restrict to search only in the selected sample sha256 IDs'}, 'uniqueItems': True}, 'sha512': {'type': 'list', 'description': 'Restrict to search only in samples with these sha512 hashes', 'items': {'type': 'str', 'description': 'Restrict to search only in samples with these sha512 hashes'}, 'uniqueItems': True}, 'sortBy': {'type': 'list', 'default': '-sampleCreatedTimestamp', 'description': 'Specify sort ordering for returned samples', 'items': {'type': 'str', 'default': '-sampleCreatedTimestamp', 'description': 'Specify sort ordering for returned samples', 'enum': ['sampleCreatedTimestamp', 'sampleSize', 'sampleClassificationType', 'lastAddedSubmission', 'lastAddedAnalysis', 'lastAddedLink', '-sampleCreatedTimestamp', '-sampleSize', '-sampleClassificationType', '-lastAddedSubmission', '-lastAddedAnalysis', '-lastAddedLink']}}, 'startTimestamp': {'type': 'str', 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped after this timestamp. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'subCriteria': {'type': 'list', 'description': 'Search sub criteria', 'items': {'type': 'dict', 'description': 'Request used for sample sub criteria search', 'properties': {'analysis': {'type': 'list', 'description': 'Search criteria for analysis', 'items': {'type': 'dict', 'description': 'Request used to search for analyses', 'properties': {'analysisResult': {'type': 'list', 'description': 'Restrict the search to analyses with either of the meta data properties defined', 'items': {'type': 'dict', 'description': 'Request used to search for sample metadata', 'properties': {'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'path': {'type': 'str', 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement'}, 'value': {'type': 'list', 'description': "Values to match against the field pointed to by 'path'", 'items': {'type': 'str', 'description': "Values to match against the field pointed to by 'path'"}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}, 'userAgent': {'type': 'list', 'description': 'Restrict the search to analysis with either of the user agents defined', 'items': {'type': 'dict', 'description': 'The user agent request used in sample search', 'properties': {'name': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined names', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined names'}, 'uniqueItems': True}, 'version': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined versions', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined versions'}, 'uniqueItems': True}}}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'classification': {'type': 'list', 'description': 'Search criteria for classifications', 'items': {'type': 'dict', 'description': 'Request used to search for classifications', 'properties': {'arch': {'type': 'list', 'description': 'Criteria for the arch field of a classification', 'items': {'type': 'str', 'description': 'Criteria for the arch field of a classification'}, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'metaData': {'type': 'list', 'description': 'Criteria for the meta data field of a classification', 'items': {'type': 'dict', 'description': 'Request used to search for sample metadata', 'properties': {'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'path': {'type': 'str', 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement'}, 'value': {'type': 'list', 'description': "Values to match against the field pointed to by 'path'", 'items': {'type': 'str', 'description': "Values to match against the field pointed to by 'path'"}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'platform': {'type': 'list', 'description': 'Criteria for the platform field of a classification', 'items': {'type': 'str', 'description': 'Criteria for the platform field of a classification'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement'}, 'superType': {'type': 'list', 'description': 'Criteria for the superType field of a classification', 'items': {'type': 'str', 'description': 'Criteria for the superType field of a classification'}, 'uniqueItems': True}, 'type': 'list', 'version': {'type': 'list', 'description': 'Criteria for the version field of a classification', 'items': {'type': 'str', 'description': 'Criteria for the version field of a classification'}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'customer': {'type': 'list', 'description': 'Restrict the search to samples containing submissions owned by certain customers', 'items': {'type': 'str', 'description': 'Restrict the search to samples containing submissions owned by certain customers'}, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped before this timestamp.Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'exclude': {'type': 'bool', 'description': 'Whether documents matching this sub-criteria should be excluded from search results. Defaults to false'}, 'fact': {'type': 'list', 'description': 'Search criteria for static facts', 'items': {'type': 'dict', 'description': 'Request used to search for static facts', 'properties': {'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'key': {'type': 'list', 'description': 'Restrict the search to static facts with one of the keys', 'items': {'type': 'str', 'description': 'Restrict the search to static facts with one of the keys'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}, 'userAgent': {'type': 'list', 'description': 'Restrict the search to static facts with one of the user agents defined', 'items': {'type': 'dict', 'description': 'The user agent request used in sample search', 'properties': {'name': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined names', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined names'}, 'uniqueItems': True}, 'version': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined versions', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined versions'}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'value': {'type': 'list', 'description': 'Restrict the search to static facts with one of the values', 'items': {'type': 'str', 'description': 'Restrict the search to static facts with one of the values'}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'keywordFieldStrategy': {'type': 'list', 'description': 'Restrict to search only in the selected keyword fields', 'items': {'type': 'str', 'description': 'Restrict to search only in the selected keyword fields', 'enum': ['all', 'sha256', 'sha512', 'sha1', 'md5', 'submission', 'analysis', 'link', 'classification', 'verdict', 'fact']}, 'uniqueItems': True}, 'keywordMatchStrategy': {'type': 'str', 'description': 'Whether all or any (default) of the fields must match one or more of the keywords', 'enum': ['all', 'any']}, 'keywords': {'type': 'list', 'description': 'A set of keywords to search for', 'items': {'type': 'str', 'description': 'A set of keywords to search for'}, 'uniqueItems': True}, 'link': {'type': 'list', 'description': 'Search criteria for links', 'items': {'type': 'dict', 'description': 'Request used to search for links', 'properties': {'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'linkType': {'type': 'list', 'description': 'Restrict the search to links of a certain type', 'items': {'type': 'str', 'description': 'Restrict the search to links of a certain type', 'enum': ['parent', 'child', 'downloads', 'loads', 'executes']}, 'uniqueItems': True}, 'reference': {'type': 'list', 'description': 'Restrict the search by the sample sha256 ID a link is referencing', 'items': {'type': 'str', 'description': 'Restrict the search by the sample sha256 ID a link is referencing'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}, 'userAgent': {'type': 'list', 'description': 'Restrict the search to link with either of the user agents defined', 'items': {'type': 'dict', 'description': 'The user agent request used in sample search', 'properties': {'name': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined names', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined names'}, 'uniqueItems': True}, 'version': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined versions', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined versions'}, 'uniqueItems': True}}}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'md5': {'type': 'list', 'description': 'Restrict to search only in samples with these md5 hashes', 'items': {'type': 'str', 'description': 'Restrict to search only in samples with these md5 hashes'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'description': 'Whether documents matching this sub-criteria is a requirement. Defaults to false'}, 'sha1': {'type': 'list', 'description': 'Restrict to search only in samples with these sha1 hashes', 'items': {'type': 'str', 'description': 'Restrict to search only in samples with these sha1 hashes'}, 'uniqueItems': True}, 'sha256': {'type': 'list', 'description': 'Restrict to search only in the selected sample sha256 IDs', 'items': {'type': 'str', 'description': 'Restrict to search only in the selected sample sha256 IDs'}, 'uniqueItems': True}, 'sha512': {'type': 'list', 'description': 'Restrict to search only in samples with these sha512 hashes', 'items': {'type': 'str', 'description': 'Restrict to search only in samples with these sha512 hashes'}, 'uniqueItems': True}, 'startTimestamp': {'type': 'str', 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped after this timestamp. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'submission': {'type': 'list', 'description': 'Search criteria for submissions', 'items': {'type': 'dict', 'description': 'Request used to search for links', 'properties': {'exclude': {'type': 'bool', 'default': False, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'excludeFlags': {'type': 'list', 'description': 'Restrict the search to submissions not containing any of the specified flags', 'items': {'type': 'str', 'description': 'Restrict the search to submissions not containing any of the specified flags', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}, 'uniqueItems': True}, 'fileName': {'type': 'list', 'description': 'Restrict the search to submissions with either of the file names defined', 'items': {'type': 'str', 'description': 'Restrict the search to submissions with either of the file names defined'}, 'uniqueItems': True}, 'includeFlags': {'type': 'list', 'description': 'Restrict the search to submissions containing any of the specified flags', 'items': {'type': 'str', 'description': 'Restrict the search to submissions containing any of the specified flags', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}, 'uniqueItems': True}, 'metaData': {'type': 'list', 'description': 'Restrict the search to submissions with either of the meta data properties defined', 'items': {'type': 'dict', 'description': 'Request used to search for sample metadata', 'properties': {'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'path': {'type': 'str', 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement'}, 'value': {'type': 'list', 'description': "Values to match against the field pointed to by 'path'", 'items': {'type': 'str', 'description': "Values to match against the field pointed to by 'path'"}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'mimeType': {'type': 'list', 'description': 'Restrict the search to submissions with either of the mime types defined', 'items': {'type': 'str', 'description': 'Restrict the search to submissions with either of the mime types defined'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Whether documents matching this criteria is a requirement'}, 'userAgent': {'type': 'list', 'description': 'Restrict the search to submissions with either of the user agents defined', 'items': {'type': 'dict', 'description': 'The user agent request used in sample search', 'properties': {'name': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined names', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined names'}, 'uniqueItems': True}, 'version': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined versions', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined versions'}, 'uniqueItems': True}}}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'timeFieldStrategy': {'type': 'list', 'description': "Restrict the search by timestamp (indicated by startTimestamp and endTimestamp) to these fields. Default is 'all'", 'items': {'type': 'str', 'description': "Restrict the search by timestamp (indicated by startTimestamp and endTimestamp) to these fields. Default is 'all'", 'enum': ['all', 'sampleCreated', 'classificationCreated', 'submissionCreated', 'submissionObserved', 'submissionExpiry', 'firstSubmitted', 'lastSubmitted', 'analysisCreated', 'linkCreated']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'description': 'Whether all or any (default) of the fields must match the time period (indicated by startTimestamp and endTimestamp)', 'enum': ['all', 'any']}, 'tlp': {'type': 'list', 'description': 'Restrict the search to samples where the sample contains one or more submission, analysis, or link with any of the defined TLPs', 'items': {'type': 'str', 'description': 'Restrict the search to samples where the sample contains one or more submission, analysis, or link with any of the defined TLPs', 'enum': ['red', 'amber', 'green', 'clear']}, 'uniqueItems': True}, 'user': {'type': 'list', 'description': 'Restrict the search to samples containing resources (indicated by userFieldStrategy) submitted by users', 'items': {'type': 'str', 'description': 'Restrict the search to samples containing resources (indicated by userFieldStrategy) submitted by users'}, 'uniqueItems': True}, 'userFieldStrategy': {'type': 'list', 'description': "Define what resources to apply the user criteria to. Defaults to 'all'", 'items': {'type': 'str', 'description': "Define what resources to apply the user criteria to. Defaults to 'all'", 'enum': ['all', 'submittedByUser', 'analysedByUser', 'linkedByUser']}, 'uniqueItems': True}, 'userMatchStrategy': {'type': 'str', 'description': ' Whether all or any (default) of the fields must match the user criteria', 'enum': ['all', 'any']}, 'verdict': {'type': 'list', 'description': 'Search criteria for verdicts', 'items': {'type': 'dict', 'description': 'Request used to search for verdicts', 'properties': {'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'excludeFlags': {'type': 'list', 'description': 'Restrict the search to verdicts not containing any of the specified flags', 'items': {'type': 'str', 'description': 'Restrict the search to verdicts not containing any of the specified flags', 'enum': ['manual', 'shared', 'contradictingStatusOverrides']}, 'uniqueItems': True}, 'includeFlags': {'type': 'list', 'description': 'Restrict the search to verdicts containing any of the specified flags', 'items': {'type': 'str', 'description': 'Restrict the search to verdicts containing any of the specified flags', 'enum': ['manual', 'shared', 'contradictingStatusOverrides']}, 'uniqueItems': True}, 'maximumScore': {'type': 'int', 'description': 'The maximum score to search for. The range is from -1 to 100 where -1 is unknown', 'maximum': 100, 'minimum': -1}, 'minimumScore': {'type': 'int', 'description': 'The minimum score to search for. The range is from -1 to 100 where -1 is unknown', 'maximum': 100, 'minimum': -1}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement'}, 'tags': {'type': 'list', 'description': 'The tags to search for', 'items': {'type': 'dict', 'description': 'Request model for searching for analysis tags', 'properties': {'type': 'str', 'value': {'type': 'str', 'description': 'The value of the tag to search for'}, 'options': ['family', 'behaviour', 'yara']}, 'required': ['type', 'value']}, 'uniqueItems': True}}}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'submission': {'type': 'list', 'description': 'Search criteria for submissions', 'items': {'type': 'dict', 'description': 'Request used to search for links', 'properties': {'exclude': {'type': 'bool', 'default': False, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'excludeFlags': {'type': 'list', 'description': 'Restrict the search to submissions not containing any of the specified flags', 'items': {'type': 'str', 'description': 'Restrict the search to submissions not containing any of the specified flags', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}, 'uniqueItems': True}, 'fileName': {'type': 'list', 'description': 'Restrict the search to submissions with either of the file names defined', 'items': {'type': 'str', 'description': 'Restrict the search to submissions with either of the file names defined'}, 'uniqueItems': True}, 'includeFlags': {'type': 'list', 'description': 'Restrict the search to submissions containing any of the specified flags', 'items': {'type': 'str', 'description': 'Restrict the search to submissions containing any of the specified flags', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}, 'uniqueItems': True}, 'metaData': {'type': 'list', 'description': 'Restrict the search to submissions with either of the meta data properties defined', 'items': {'type': 'dict', 'description': 'Request used to search for sample metadata', 'properties': {'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'path': {'type': 'str', 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement'}, 'value': {'type': 'list', 'description': "Values to match against the field pointed to by 'path'", 'items': {'type': 'str', 'description': "Values to match against the field pointed to by 'path'"}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'mimeType': {'type': 'list', 'description': 'Restrict the search to submissions with either of the mime types defined', 'items': {'type': 'str', 'description': 'Restrict the search to submissions with either of the mime types defined'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Whether documents matching this criteria is a requirement'}, 'userAgent': {'type': 'list', 'description': 'Restrict the search to submissions with either of the user agents defined', 'items': {'type': 'dict', 'description': 'The user agent request used in sample search', 'properties': {'name': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined names', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined names'}, 'uniqueItems': True}, 'version': {'type': 'list', 'description': 'Restrict the search to user agents with either of the defined versions', 'items': {'type': 'str', 'description': 'Restrict the search to user agents with either of the defined versions'}, 'uniqueItems': True}}}, 'uniqueItems': True}}}, 'uniqueItems': True}, 'timeFieldStrategy': {'type': 'list', 'description': "Restrict the search by timestamp (indicated by startTimestamp and endTimestamp) to these fields. Default is 'all'", 'items': {'type': 'str', 'description': "Restrict the search by timestamp (indicated by startTimestamp and endTimestamp) to these fields. Default is 'all'", 'enum': ['all', 'sampleCreated', 'classificationCreated', 'submissionCreated', 'submissionObserved', 'submissionExpiry', 'firstSubmitted', 'lastSubmitted', 'analysisCreated', 'linkCreated']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'description': 'Whether all or any (default) of the fields must match the time period (indicated by startTimestamp and endTimestamp)', 'enum': ['all', 'any']}, 'tlp': {'type': 'list', 'description': 'Restrict the search to samples where the sample contains one or more submission, analysis, or link with any of the defined TLPs', 'items': {'type': 'str', 'description': 'Restrict the search to samples where the sample contains one or more submission, analysis, or link with any of the defined TLPs', 'enum': ['red', 'amber', 'green', 'clear']}, 'uniqueItems': True}, 'user': {'type': 'list', 'description': 'Restrict the search to samples containing resources (indicated by userFieldStrategy) submitted by users', 'items': {'type': 'str', 'description': 'Restrict the search to samples containing resources (indicated by userFieldStrategy) submitted by users'}, 'uniqueItems': True}, 'userFieldStrategy': {'type': 'list', 'description': "Define what resources to apply the user criteria to. Defaults to 'all'", 'items': {'type': 'str', 'description': "Define what resources to apply the user criteria to. Defaults to 'all'", 'enum': ['all', 'submittedByUser', 'analysedByUser', 'linkedByUser']}, 'uniqueItems': True}, 'userMatchStrategy': {'type': 'str', 'description': ' Whether all or any (default) of the fields must match the user criteria', 'enum': ['all', 'any']}, 'verdict': {'type': 'list', 'description': 'Search criteria for verdicts', 'items': {'type': 'dict', 'description': 'Request used to search for verdicts', 'properties': {'exclude': {'type': 'bool', 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'excludeFlags': {'type': 'list', 'description': 'Restrict the search to verdicts not containing any of the specified flags', 'items': {'type': 'str', 'description': 'Restrict the search to verdicts not containing any of the specified flags', 'enum': ['manual', 'shared', 'contradictingStatusOverrides']}, 'uniqueItems': True}, 'includeFlags': {'type': 'list', 'description': 'Restrict the search to verdicts containing any of the specified flags', 'items': {'type': 'str', 'description': 'Restrict the search to verdicts containing any of the specified flags', 'enum': ['manual', 'shared', 'contradictingStatusOverrides']}, 'uniqueItems': True}, 'maximumScore': {'type': 'int', 'description': 'The maximum score to search for. The range is from -1 to 100 where -1 is unknown', 'maximum': 100, 'minimum': -1}, 'minimumScore': {'type': 'int', 'description': 'The minimum score to search for. The range is from -1 to 100 where -1 is unknown', 'maximum': 100, 'minimum': -1}, 'required': {'type': 'bool', 'description': 'Whether documents matching this criteria is a requirement'}, 'tags': {'type': 'list', 'description': 'The tags to search for', 'items': {'type': 'dict', 'description': 'Request model for searching for analysis tags', 'properties': {'type': 'str', 'value': {'type': 'str', 'description': 'The value of the tag to search for'}, 'options': ['family', 'behaviour', 'yara']}, 'required': ['type', 'value']}, 'uniqueItems': True}}}, 'uniqueItems': True}}}}}, 'required': True}, 'responses': {'default': {'description': 'Advanced search for samples', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Metadata for a sample file', 'properties': {'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the sample was created.'}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the sample was deleted'}, 'firstObservedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the first observation for this sample'}, 'firstSubmittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the first submission for this sample'}, 'flags': {'type': 'array', 'description': 'The flags set for this sample', 'items': {'type': 'string', 'description': 'The flags set for this sample', 'enum': ['exceededMaxSearchableSubmissions', 'exceededMaxSearchableLinks', 'exceededMaxSearchableAnalyses', 'exceededMaxSearchableStaticFacts', 'deleted']}, 'uniqueItems': True}, 'lastObservedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the last observation for this sample'}, 'lastSubmittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the last submission for this sample'}, 'latestClassification': {'type': 'object', 'description': 'The result of a classification performed on a sample', 'properties': {'arch': {'type': 'string', 'description': 'The architecture for the sample'}, 'metaData': {'type': 'object', 'additionalProperties': {'description': 'Meta data for the sample'}, 'description': 'Meta data for the sample'}, 'platform': {'type': 'string', 'description': 'The platform for the sample'}, 'superType': {'type': 'string', 'description': 'The super type of file for the sample'}, 'type': {'type': 'string', 'description': 'The type of file for the sample'}, 'version': {'type': 'string', 'description': 'The version of the classifier used to generate this classification'}}}, 'latestVerdict': {'type': 'object', 'description': 'Representation of a verdict about a sample', 'properties': {'analysis': {'type': 'array', 'description': 'The analyses that this verdict is based on', 'items': {'type': 'object', 'description': 'Compact representation of an analysis', 'properties': {'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The scores for the analysis'}, 'difference': {'type': 'integer', 'format': 'int32', 'description': 'Represents the difference between this analysis result from the overall verdict score.\nInteger value from -100 to 100, or null if the analysis resulted in no findings'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'impact': {'type': 'integer', 'format': 'int32', 'description': 'Represents how much the worker/source impacted to the overall verdict score.\nInteger value from 0 to 100, or null if the analysis resulted in no findings'}, 'possibleDetections': {'type': 'integer', 'format': 'int32', 'description': 'The maximum number of possible detections'}, 'tags': {'type': 'array', 'description': 'The tags for the analysis', 'items': {'type': 'object', 'description': 'A tag with a type and value for an analysis', 'properties': {'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}, 'triggeredDetections': {'type': 'array', 'description': 'The triggered detections for this analysis', 'items': {'type': 'object', 'description': 'Representation of an analysis detection', 'properties': {'assessment': {'type': 'string', 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}, 'name': {'type': 'string', 'description': 'The name of the detection'}}}, 'uniqueItems': True}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}, 'uniqueItems': True}, 'comment': {'type': 'string', 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'array', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'items': {'type': 'string', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}, 'uniqueItems': True}, 'job': {'type': 'object', 'description': 'A compact representation of an analysis job', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample this verdict belongs to'}, 'score': {'type': 'integer', 'format': 'int32', 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}, 'statusOverride': {'type': 'string', 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'tags': {'type': 'array', 'description': 'Tags for the verdict', 'items': {'type': 'object', 'description': 'A tag for verdicts', 'properties': {'count': {'type': 'integer', 'format': 'int32', 'description': 'The number of times this tag was found in analysis results'}, 'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}}}, 'md5': {'type': 'string', 'description': 'The MD5 hash of the sample'}, 'sha1': {'type': 'string', 'description': 'The SHA1 hash of the sample'}, 'sha256': {'type': 'string', 'description': 'The ID of the sample'}, 'sha512': {'type': 'string', 'description': 'The SHA512 hash of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the sample in bytes'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSamples'], 'x-Argus-ApiStatus': 'PUBLIC'}
delete_sample = {'tags': ['sampledb/v2'], 'summary': 'Delete a sample and all of its resources including submissions, analyses, links, classifications, verdicts, and jobs async. A minimal metadata record will be left behind (DEV)', 'description': '', 'operationId': 'deleteSample', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Delete a sample and all of its resources including submissions, analyses, links, classifications, verdicts, and jobs async. A minimal metadata record will be left behind', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The resulting correlation ID of the created tasks', 'properties': {'correlationID': {'type': 'string', 'format': 'uuid', 'description': 'The correlation ID of the service task. Not to be confused with an actual task ID,\nthe correlation ID can be used to reference tasks created from the request at a later point in time\nas these are created async.\n'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'An error occurred', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['deleteSampleCompletely'], 'x-Argus-ApiStatus': 'DEV'}
download_raw_sample = {'tags': ['sampledb/v2'], 'summary': 'Download a raw sample file. Warning: The file returned may be malicious. Take caution (INTERNAL)', 'description': '', 'operationId': 'downloadRawSample', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Download a raw sample file. Warning: The file returned may be malicious. Take caution', 'content': {'application/octet-stream': {}}}, '200': {'description': 'Successful operation', 'content': {'application/octet-stream': {}}}, '401': {'description': 'Authentication failed', 'content': {'application/octet-stream': {}}}, '403': {'description': 'Access denied', 'content': {'application/octet-stream': {}}}, '404': {'description': 'An error occurred', 'content': {'application/octet-stream': {}}}, '412': {'description': 'Validation error', 'content': {'application/octet-stream': {}}}}, 'x-Argus-Required-Permissions': ['downloadRawSample', 'downloadSampleUnrestricted'], 'x-Argus-ApiStatus': 'INTERNAL'}
download_safe_sample = {'tags': ['sampledb/v2'], 'summary': 'Download a zipped sample file, password protected with the password "infected". Warning: The zipped file may be malicious. Take caution (INTERNAL)', 'description': '', 'operationId': 'downloadSafeSample', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Download a zipped sample file, password protected with the password "infected". Warning: The zipped file may be malicious. Take caution', 'content': {'application/zip': {}}}, '200': {'description': 'Successful operation', 'content': {'application/zip': {}}}, '401': {'description': 'Authentication failed', 'content': {'application/zip': {}}}, '403': {'description': 'Access denied', 'content': {'application/zip': {}}}, '404': {'description': 'An error occurred', 'content': {'application/zip': {}}}, '412': {'description': 'Validation error', 'content': {'application/zip': {}}}}, 'x-Argus-Required-Permissions': ['downloadSample', 'downloadSampleUnrestricted'], 'x-Argus-ApiStatus': 'INTERNAL'}
get_analysis = {'tags': ['sampledb/v2'], 'summary': 'Fetches the analysis for the sample with the given ID (PUBLIC)', 'description': '', 'operationId': 'getAnalysis', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis from', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'ID of the analysis to fetch', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Fetches the analysis for the sample with the given ID', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The result of an analysis performed on a sample', 'properties': {'acl': {'type': 'array', 'description': 'List of users given explicit access', 'items': {'type': 'object', 'description': 'Response model for access control', 'properties': {'grantedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'grantedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The time at which the explicit access was granted'}, 'subject': {'type': 'object', 'description': 'SPI SubjectInfo', 'discriminator': {'propertyName': 'type'}, 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'analysisID': {'type': 'string', 'format': 'uuid', 'description': 'The ID of the analysis'}, 'analysisResult': {'type': 'object'}, 'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The value is a score from -1 to 100 and is an indication of how certain the analyzer is that the sample is malicious'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the analysis was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'flags': {'type': 'array', 'description': 'The flags for the analysis', 'items': {'type': 'string', 'description': 'The flags for the analysis', 'enum': ['executedWithInternetAccess', 'hasEvidence']}, 'uniqueItems': True}, 'job': {'type': 'object', 'description': 'A compact representation of an analysis job', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}, 'possibleDetections': {'type': 'integer', 'format': 'int32', 'description': 'The maximum number of possible detections'}, 'profile': {'type': 'string', 'description': 'The execution profile of the worker'}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample the analysis is for'}, 'tags': {'type': 'array', 'description': 'The tags for the analysis', 'items': {'type': 'object', 'description': 'A tag with a type and value for an analysis', 'properties': {'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}, 'tlp': {'type': 'string', 'description': 'The TLP level of the analysis', 'enum': ['red', 'amber', 'green', 'clear']}, 'triggeredDetections': {'type': 'array', 'description': 'The triggered detections for this analysis', 'items': {'type': 'object', 'description': 'Representation of an analysis detection', 'properties': {'assessment': {'type': 'string', 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}, 'name': {'type': 'string', 'description': 'The name of the detection'}}}}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}, 'verdictStatusOverride': {'type': 'string', 'description': "Signifies that the worker posting the analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead", 'enum': ['malicious', 'benign']}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSampleAnalysis'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_analysis_summary = {'tags': ['sampledb/v2'], 'summary': 'Get a summary of all analysis results for a given sample (DEV)', 'description': '', 'operationId': 'getAnalysisSummary', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis summary from', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Get a summary of all analysis results for a given sample', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Response model representing a summary of samples analyses', 'properties': {'analysers': {'type': 'array', 'description': 'A set of analysers used on this sample.', 'items': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}, 'uniqueItems': True}, 'latestAnalysis': {'type': 'object', 'description': 'Compact representation of an analysis', 'properties': {'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The scores for the analysis'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSampleAnalysis'], 'x-Argus-ApiStatus': 'DEV'}
get_evidence = {'tags': ['sampledb/v2'], 'summary': 'Fetches the evidence metadata for the analysis for the sample with the given ID (PUBLIC)', 'description': '', 'operationId': 'getEvidence', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis from', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'ID of the analysis the evidence is for', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}, {'name': 'evidenceID', 'in': 'path', 'description': 'ID of the evidence to fetch', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Fetches the evidence metadata for the analysis for the sample with the given ID', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Evidence data produced as a part of an analysis', 'properties': {'checksum': {'type': 'string', 'description': 'The sha256 of the evidence data. Used for integrity check of fragments'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the evidence was created'}, 'fileName': {'type': 'string', 'description': 'The file name of the evidence'}, 'flags': {'type': 'array', 'description': 'The flags for the evidence', 'items': {'type': 'string', 'description': 'The flags for the evidence', 'enum': ['internal', 'potentiallyMalicious']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this Evidence'}, 'mimeType': {'type': 'string', 'description': 'The MIME type of the evidence'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the evidence in bytes'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSampleAnalysis'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_evidence_data = {'tags': ['sampledb/v2'], 'summary': 'Returns the evidence file. (PUBLIC)', 'description': '', 'operationId': 'getEvidenceData', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample the analysis is from', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'The ID of the analysis you want to fetch evidence from', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}, {'name': 'evidenceID', 'in': 'path', 'description': 'The ID of the evidence data you want to fetch', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Returns the evidence file.', 'content': {'*/*': {}}}, '401': {'description': 'Authentication failed', 'content': {'*/*': {}}}, '403': {'description': 'Access denied', 'content': {'*/*': {}}}, '404': {'description': 'Object not found', 'content': {'*/*': {}}}, '412': {'description': 'Validation error', 'content': {'*/*': {}}}}, 'x-Argus-Required-Permissions': ['viewSampleAnalysis'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_link = {'tags': ['sampledb/v2'], 'summary': 'Fetches the link for the sample with the given ID (PUBLIC)', 'description': '', 'operationId': 'getLink', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the link from', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'linkID', 'in': 'path', 'description': 'ID of the link to fetch', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Fetches the link for the sample with the given ID', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Representation of a link between two samples', 'properties': {'acl': {'type': 'array', 'description': 'List of users given explicit access', 'items': {'type': 'object', 'description': 'Response model for access control', 'properties': {'grantedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'grantedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The time at which the explicit access was granted'}, 'subject': {'type': 'object', 'description': 'SPI SubjectInfo', 'discriminator': {'propertyName': 'type'}, 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the link was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'flags': {'type': 'array', 'description': 'Flags for this link', 'items': {'type': 'string', 'description': 'Flags for this link', 'enum': ['deadReference']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this link'}, 'referencedSample': {'type': 'object', 'description': 'Metadata for a sample file', 'properties': {'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the sample was created.'}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the sample was deleted'}, 'firstObservedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the first observation for this sample'}, 'firstSubmittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the first submission for this sample'}, 'flags': {'type': 'array', 'description': 'The flags set for this sample', 'items': {'type': 'string', 'description': 'The flags set for this sample', 'enum': ['exceededMaxSearchableSubmissions', 'exceededMaxSearchableLinks', 'exceededMaxSearchableAnalyses', 'exceededMaxSearchableStaticFacts', 'deleted']}, 'uniqueItems': True}, 'lastObservedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the last observation for this sample'}, 'lastSubmittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the last submission for this sample'}, 'latestClassification': {'type': 'object', 'description': 'The result of a classification performed on a sample', 'properties': {'arch': {'type': 'string', 'description': 'The architecture for the sample'}, 'metaData': {'type': 'object', 'additionalProperties': {'description': 'Meta data for the sample'}, 'description': 'Meta data for the sample'}, 'platform': {'type': 'string', 'description': 'The platform for the sample'}, 'superType': {'type': 'string', 'description': 'The super type of file for the sample'}, 'type': {'type': 'string', 'description': 'The type of file for the sample'}, 'version': {'type': 'string', 'description': 'The version of the classifier used to generate this classification'}}}, 'latestVerdict': {'type': 'object', 'description': 'Representation of a verdict about a sample', 'properties': {'analysis': {'type': 'array', 'description': 'The analyses that this verdict is based on', 'items': {'type': 'object', 'description': 'Compact representation of an analysis', 'properties': {'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The scores for the analysis'}, 'difference': {'type': 'integer', 'format': 'int32', 'description': 'Represents the difference between this analysis result from the overall verdict score.\nInteger value from -100 to 100, or null if the analysis resulted in no findings'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'impact': {'type': 'integer', 'format': 'int32', 'description': 'Represents how much the worker/source impacted to the overall verdict score.\nInteger value from 0 to 100, or null if the analysis resulted in no findings'}, 'possibleDetections': {'type': 'integer', 'format': 'int32', 'description': 'The maximum number of possible detections'}, 'tags': {'type': 'array', 'description': 'The tags for the analysis', 'items': {'type': 'object', 'description': 'A tag with a type and value for an analysis', 'properties': {'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}, 'triggeredDetections': {'type': 'array', 'description': 'The triggered detections for this analysis', 'items': {'type': 'object', 'description': 'Representation of an analysis detection', 'properties': {'assessment': {'type': 'string', 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}, 'name': {'type': 'string', 'description': 'The name of the detection'}}}, 'uniqueItems': True}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}, 'uniqueItems': True}, 'comment': {'type': 'string', 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'array', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'items': {'type': 'string', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}, 'uniqueItems': True}, 'job': {'type': 'object', 'description': 'A compact representation of an analysis job', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample this verdict belongs to'}, 'score': {'type': 'integer', 'format': 'int32', 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}, 'statusOverride': {'type': 'string', 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'tags': {'type': 'array', 'description': 'Tags for the verdict', 'items': {'type': 'object', 'description': 'A tag for verdicts', 'properties': {'count': {'type': 'integer', 'format': 'int32', 'description': 'The number of times this tag was found in analysis results'}, 'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}}}, 'md5': {'type': 'string', 'description': 'The MD5 hash of the sample'}, 'sha1': {'type': 'string', 'description': 'The SHA1 hash of the sample'}, 'sha256': {'type': 'string', 'description': 'The ID of the sample'}, 'sha512': {'type': 'string', 'description': 'The SHA512 hash of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the sample in bytes'}}}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample this link belongs to'}, 'tlp': {'type': 'string', 'description': 'The TLP level of the link', 'enum': ['red', 'amber', 'green', 'clear']}, 'type': {'type': 'string', 'description': 'The nature of the link between the two samples', 'enum': ['parent', 'child', 'downloads', 'loads', 'executes']}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSampleAnalysis'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_link_summary = {'tags': ['sampledb/v2'], 'summary': 'Get a summary of up to 1000 links for a given sample (DEV)', 'description': '', 'operationId': 'getLinkSummary', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample to fetch the links summary from', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Get a summary of up to 1000 links for a given sample', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Response model representing a summary of samples links', 'properties': {'flags': {'type': 'array', 'description': 'Flags for this link', 'items': {'type': 'string', 'description': 'Flags for this link', 'enum': ['incompleteTypeCount']}, 'uniqueItems': True}, 'linkTypeSummary': {'type': 'array', 'description': 'A list of Links that contains the type and count for the different links fetched for the sample.', 'items': {'type': 'object', 'description': 'The link type and count', 'properties': {'count': {'type': 'integer', 'format': 'int32', 'description': 'Counts the number of a given Link Type'}, 'type': {'type': 'string', 'description': 'Contains the type for a Link. These can be either parent, child, downloads, loads or executes', 'enum': ['parent', 'child', 'downloads', 'loads', 'executes']}}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSampleAnalysis'], 'x-Argus-ApiStatus': 'DEV'}
get_sample_meta_data = {'tags': ['sampledb/v2'], 'summary': 'Fetch meta data about a sample file (PUBLIC)', 'description': '', 'operationId': 'getSampleMetaData', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Fetch meta data about a sample file', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Metadata for a sample file', 'properties': {'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the sample was created.'}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the sample was deleted'}, 'firstObservedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the first observation for this sample'}, 'firstSubmittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the first submission for this sample'}, 'flags': {'type': 'array', 'description': 'The flags set for this sample', 'items': {'type': 'string', 'description': 'The flags set for this sample', 'enum': ['exceededMaxSearchableSubmissions', 'exceededMaxSearchableLinks', 'exceededMaxSearchableAnalyses', 'exceededMaxSearchableStaticFacts', 'deleted']}, 'uniqueItems': True}, 'lastObservedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the last observation for this sample'}, 'lastSubmittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the last submission for this sample'}, 'latestClassification': {'type': 'object', 'description': 'The result of a classification performed on a sample', 'properties': {'arch': {'type': 'string', 'description': 'The architecture for the sample'}, 'metaData': {'type': 'object', 'additionalProperties': {'description': 'Meta data for the sample'}, 'description': 'Meta data for the sample'}, 'platform': {'type': 'string', 'description': 'The platform for the sample'}, 'superType': {'type': 'string', 'description': 'The super type of file for the sample'}, 'type': {'type': 'string', 'description': 'The type of file for the sample'}, 'version': {'type': 'string', 'description': 'The version of the classifier used to generate this classification'}}}, 'latestVerdict': {'type': 'object', 'description': 'Representation of a verdict about a sample', 'properties': {'analysis': {'type': 'array', 'description': 'The analyses that this verdict is based on', 'items': {'type': 'object', 'description': 'Compact representation of an analysis', 'properties': {'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The scores for the analysis'}, 'difference': {'type': 'integer', 'format': 'int32', 'description': 'Represents the difference between this analysis result from the overall verdict score.\nInteger value from -100 to 100, or null if the analysis resulted in no findings'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'impact': {'type': 'integer', 'format': 'int32', 'description': 'Represents how much the worker/source impacted to the overall verdict score.\nInteger value from 0 to 100, or null if the analysis resulted in no findings'}, 'possibleDetections': {'type': 'integer', 'format': 'int32', 'description': 'The maximum number of possible detections'}, 'tags': {'type': 'array', 'description': 'The tags for the analysis', 'items': {'type': 'object', 'description': 'A tag with a type and value for an analysis', 'properties': {'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}, 'triggeredDetections': {'type': 'array', 'description': 'The triggered detections for this analysis', 'items': {'type': 'object', 'description': 'Representation of an analysis detection', 'properties': {'assessment': {'type': 'string', 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}, 'name': {'type': 'string', 'description': 'The name of the detection'}}}, 'uniqueItems': True}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}, 'uniqueItems': True}, 'comment': {'type': 'string', 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'array', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'items': {'type': 'string', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}, 'uniqueItems': True}, 'job': {'type': 'object', 'description': 'A compact representation of an analysis job', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample this verdict belongs to'}, 'score': {'type': 'integer', 'format': 'int32', 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}, 'statusOverride': {'type': 'string', 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'tags': {'type': 'array', 'description': 'Tags for the verdict', 'items': {'type': 'object', 'description': 'A tag for verdicts', 'properties': {'count': {'type': 'integer', 'format': 'int32', 'description': 'The number of times this tag was found in analysis results'}, 'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}}}, 'md5': {'type': 'string', 'description': 'The MD5 hash of the sample'}, 'sha1': {'type': 'string', 'description': 'The SHA1 hash of the sample'}, 'sha256': {'type': 'string', 'description': 'The ID of the sample'}, 'sha512': {'type': 'string', 'description': 'The SHA512 hash of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the sample in bytes'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'An error occurred', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSamples'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_submission = {'tags': ['sampledb/v2'], 'summary': 'Fetch a submission for the sample with the given ID (PUBLIC)', 'description': '', 'operationId': 'getSubmission', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample the submission belongs to', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'submissionID', 'in': 'path', 'description': 'The ID of the submission to fetch', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Fetch a submission for the sample with the given ID', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'A submission for a sample. Represents the observation of a sample at a customer site', 'properties': {'acl': {'type': 'array', 'description': 'List of access controls that describe explicit access given to users or groups for this submission', 'items': {'type': 'object', 'description': 'Response model for access control', 'properties': {'grantedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'grantedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The time at which the explicit access was granted'}, 'subject': {'type': 'object', 'description': 'SPI SubjectInfo', 'discriminator': {'propertyName': 'type'}, 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}, 'uniqueItems': True}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'expiryTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the submission will be deleted'}, 'fileName': {'type': 'string', 'description': 'The filename of the sample'}, 'flags': {'type': 'array', 'description': 'The flags set on this submission', 'items': {'type': 'string', 'description': 'The flags set on this submission', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'metaData': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Meta data about the sample'}, 'description': 'Meta data about the sample'}, 'mimeType': {'type': 'string', 'description': 'The sample mime type'}, 'observedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the sample was observed'}, 'sampleSha256': {'type': 'string', 'description': 'The sample this submission belongs to'}, 'submittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the submission was added'}, 'tlp': {'type': 'string', 'description': 'TLP color of the submission', 'enum': ['red', 'amber', 'green', 'clear']}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'The sample could not be found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSampleSubmission'], 'x-Argus-ApiStatus': 'PUBLIC'}
get_upload_challenge = {'tags': ['sampledb/v2'], 'summary': "Generate a new challenge for a sample. The solution of the challenge is SHA256(x) where x is 'length' bytes of data starting from 'offset' bytes into the sample file (INTERNAL)", 'description': '', 'operationId': 'getUploadChallenge', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to get submission challenge for', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': "Generate a new challenge for a sample. The solution of the challenge is SHA256(x) where x is 'length' bytes of data starting from 'offset' bytes into the sample file", 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Model representing a sample challenge. Must be solved in order to prove possession of the sample', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'The id of the challenge'}, 'length': {'type': 'integer', 'format': 'int32', 'description': 'The number of bytes to process'}, 'offset': {'type': 'integer', 'format': 'int32', 'description': 'The offset into the sample file from where to start calculating the hash'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'The sample could not be found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}, '422': {'description': 'The sample file is too small. Upload the full sample and use the challenge token returned in that response as proof', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['addSampleSubmission'], 'x-Argus-ApiStatus': 'INTERNAL'}
list_analysis = {'tags': ['sampledb/v2'], 'summary': 'Lists the analysis for the sample (PUBLIC)', 'description': '', 'operationId': 'listAnalysis', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis from', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}], 'responses': {'default': {'description': 'Lists the analysis for the sample', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'The result of an analysis performed on a sample', 'properties': {'acl': {'type': 'array', 'description': 'List of users given explicit access', 'items': {'type': 'object', 'description': 'Response model for access control', 'properties': {'grantedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'grantedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The time at which the explicit access was granted'}, 'subject': {'type': 'object', 'description': 'SPI SubjectInfo', 'discriminator': {'propertyName': 'type'}, 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'analysisID': {'type': 'string', 'format': 'uuid', 'description': 'The ID of the analysis'}, 'analysisResult': {'type': 'object'}, 'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The value is a score from -1 to 100 and is an indication of how certain the analyzer is that the sample is malicious'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the analysis was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'flags': {'type': 'array', 'description': 'The flags for the analysis', 'items': {'type': 'string', 'description': 'The flags for the analysis', 'enum': ['executedWithInternetAccess', 'hasEvidence']}, 'uniqueItems': True}, 'job': {'type': 'object', 'description': 'A compact representation of an analysis job', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}, 'possibleDetections': {'type': 'integer', 'format': 'int32', 'description': 'The maximum number of possible detections'}, 'profile': {'type': 'string', 'description': 'The execution profile of the worker'}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample the analysis is for'}, 'tags': {'type': 'array', 'description': 'The tags for the analysis', 'items': {'type': 'object', 'description': 'A tag with a type and value for an analysis', 'properties': {'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}, 'tlp': {'type': 'string', 'description': 'The TLP level of the analysis', 'enum': ['red', 'amber', 'green', 'clear']}, 'triggeredDetections': {'type': 'array', 'description': 'The triggered detections for this analysis', 'items': {'type': 'object', 'description': 'Representation of an analysis detection', 'properties': {'assessment': {'type': 'string', 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}, 'name': {'type': 'string', 'description': 'The name of the detection'}}}}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}, 'verdictStatusOverride': {'type': 'string', 'description': "Signifies that the worker posting the analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead", 'enum': ['malicious', 'benign']}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSampleAnalysis'], 'x-Argus-ApiStatus': 'PUBLIC'}
list_classifications = {'tags': ['sampledb/v2'], 'summary': 'Fetch all classifications for a sample (PUBLIC)', 'description': '', 'operationId': 'listClassifications', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'The maximum number of classifications to return', 'schema': {'type': 'int', 'default': '25'}, 'type': 'int', 'default': '25'}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "The field on which to sort the classifications. Prefix with '-' to sort descending", 'schema': {'type': 'list', 'default': '-createdTimestamp', 'enum': ['createdTimestamp', 'version', 'type', 'superType', 'arch', 'platform', '-createdTimestamp', '-version', '-type', '-superType', '-arch', '-platform'], 'items': {'type': 'string'}}, 'type': 'list', 'default': '-createdTimestamp', 'enum': ['createdTimestamp', 'version', 'type', 'superType', 'arch', 'platform', '-createdTimestamp', '-version', '-type', '-superType', '-arch', '-platform'], 'items': {'type': 'string'}}], 'responses': {'default': {'description': 'Fetch all classifications for a sample', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'The result of a classification performed on a sample', 'properties': {'arch': {'type': 'string', 'description': 'The architecture for the sample'}, 'metaData': {'type': 'object', 'additionalProperties': {'description': 'Meta data for the sample'}, 'description': 'Meta data for the sample'}, 'platform': {'type': 'string', 'description': 'The platform for the sample'}, 'superType': {'type': 'string', 'description': 'The super type of file for the sample'}, 'type': {'type': 'string', 'description': 'The type of file for the sample'}, 'version': {'type': 'string', 'description': 'The version of the classifier used to generate this classification'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'An error occurred', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSamples'], 'x-Argus-ApiStatus': 'PUBLIC'}
list_evidence = {'tags': ['sampledb/v2'], 'summary': 'Lists the evidence metadata for the analysis (PUBLIC)', 'description': '', 'operationId': 'listEvidence', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample the analysis is from', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'The ID of the analysis you want to list evidence from', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}], 'responses': {'default': {'description': 'Lists the evidence metadata for the analysis', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Evidence data produced as a part of an analysis', 'properties': {'checksum': {'type': 'string', 'description': 'The sha256 of the evidence data. Used for integrity check of fragments'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the evidence was created'}, 'fileName': {'type': 'string', 'description': 'The file name of the evidence'}, 'flags': {'type': 'array', 'description': 'The flags for the evidence', 'items': {'type': 'string', 'description': 'The flags for the evidence', 'enum': ['internal', 'potentiallyMalicious']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this Evidence'}, 'mimeType': {'type': 'string', 'description': 'The MIME type of the evidence'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the evidence in bytes'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSampleAnalysis'], 'x-Argus-ApiStatus': 'PUBLIC'}
list_links = {'tags': ['sampledb/v2'], 'summary': 'Lists the links for the sample (PUBLIC)', 'description': '', 'operationId': 'listLinks', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the link from', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}], 'responses': {'default': {'description': 'Lists the links for the sample', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Representation of a link between two samples', 'properties': {'acl': {'type': 'array', 'description': 'List of users given explicit access', 'items': {'type': 'object', 'description': 'Response model for access control', 'properties': {'grantedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'grantedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The time at which the explicit access was granted'}, 'subject': {'type': 'object', 'description': 'SPI SubjectInfo', 'discriminator': {'propertyName': 'type'}, 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the link was created'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'flags': {'type': 'array', 'description': 'Flags for this link', 'items': {'type': 'string', 'description': 'Flags for this link', 'enum': ['deadReference']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this link'}, 'referencedSample': {'type': 'object', 'description': 'Metadata for a sample file', 'properties': {'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the sample was created.'}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the sample was deleted'}, 'firstObservedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the first observation for this sample'}, 'firstSubmittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the first submission for this sample'}, 'flags': {'type': 'array', 'description': 'The flags set for this sample', 'items': {'type': 'string', 'description': 'The flags set for this sample', 'enum': ['exceededMaxSearchableSubmissions', 'exceededMaxSearchableLinks', 'exceededMaxSearchableAnalyses', 'exceededMaxSearchableStaticFacts', 'deleted']}, 'uniqueItems': True}, 'lastObservedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the last observation for this sample'}, 'lastSubmittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the last submission for this sample'}, 'latestClassification': {'type': 'object', 'description': 'The result of a classification performed on a sample', 'properties': {'arch': {'type': 'string', 'description': 'The architecture for the sample'}, 'metaData': {'type': 'object', 'additionalProperties': {'description': 'Meta data for the sample'}, 'description': 'Meta data for the sample'}, 'platform': {'type': 'string', 'description': 'The platform for the sample'}, 'superType': {'type': 'string', 'description': 'The super type of file for the sample'}, 'type': {'type': 'string', 'description': 'The type of file for the sample'}, 'version': {'type': 'string', 'description': 'The version of the classifier used to generate this classification'}}}, 'latestVerdict': {'type': 'object', 'description': 'Representation of a verdict about a sample', 'properties': {'analysis': {'type': 'array', 'description': 'The analyses that this verdict is based on', 'items': {'type': 'object', 'description': 'Compact representation of an analysis', 'properties': {'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The scores for the analysis'}, 'difference': {'type': 'integer', 'format': 'int32', 'description': 'Represents the difference between this analysis result from the overall verdict score.\nInteger value from -100 to 100, or null if the analysis resulted in no findings'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'impact': {'type': 'integer', 'format': 'int32', 'description': 'Represents how much the worker/source impacted to the overall verdict score.\nInteger value from 0 to 100, or null if the analysis resulted in no findings'}, 'possibleDetections': {'type': 'integer', 'format': 'int32', 'description': 'The maximum number of possible detections'}, 'tags': {'type': 'array', 'description': 'The tags for the analysis', 'items': {'type': 'object', 'description': 'A tag with a type and value for an analysis', 'properties': {'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}, 'triggeredDetections': {'type': 'array', 'description': 'The triggered detections for this analysis', 'items': {'type': 'object', 'description': 'Representation of an analysis detection', 'properties': {'assessment': {'type': 'string', 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}, 'name': {'type': 'string', 'description': 'The name of the detection'}}}, 'uniqueItems': True}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}, 'uniqueItems': True}, 'comment': {'type': 'string', 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'array', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'items': {'type': 'string', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}, 'uniqueItems': True}, 'job': {'type': 'object', 'description': 'A compact representation of an analysis job', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample this verdict belongs to'}, 'score': {'type': 'integer', 'format': 'int32', 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}, 'statusOverride': {'type': 'string', 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'tags': {'type': 'array', 'description': 'Tags for the verdict', 'items': {'type': 'object', 'description': 'A tag for verdicts', 'properties': {'count': {'type': 'integer', 'format': 'int32', 'description': 'The number of times this tag was found in analysis results'}, 'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}}}, 'md5': {'type': 'string', 'description': 'The MD5 hash of the sample'}, 'sha1': {'type': 'string', 'description': 'The SHA1 hash of the sample'}, 'sha256': {'type': 'string', 'description': 'The ID of the sample'}, 'sha512': {'type': 'string', 'description': 'The SHA512 hash of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the sample in bytes'}}}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample this link belongs to'}, 'tlp': {'type': 'string', 'description': 'The TLP level of the link', 'enum': ['red', 'amber', 'green', 'clear']}, 'type': {'type': 'string', 'description': 'The nature of the link between the two samples', 'enum': ['parent', 'child', 'downloads', 'loads', 'executes']}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSampleAnalysis'], 'x-Argus-ApiStatus': 'PUBLIC'}
list_static_fact = {'tags': ['sampledb/v2'], 'summary': 'Endpoint for listing the static facts for a sample (DEV)', 'description': '', 'operationId': 'listStaticFact', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample the static facts are for', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "Sort order of returned results. Prefix with '-' to sort descending", 'schema': {'type': 'list', 'default': 'key', 'enum': ['key', 'createdTimestamp', '-key', '-createdTimestamp'], 'items': {'type': 'string'}}, 'type': 'list', 'default': 'key', 'enum': ['key', 'createdTimestamp', '-key', '-createdTimestamp'], 'items': {'type': 'string'}}, {'name': 'key', 'in': 'query', 'description': 'A set of keys to search for', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}], 'responses': {'default': {'description': 'Endpoint for listing the static facts for a sample', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'The static fact added to a sample', 'properties': {'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the static fact was created'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the static fact'}, 'key': {'type': 'string', 'description': 'Key of the static fact'}, 'sampleSha256': {'type': 'string', 'description': 'Sha256 that the static fact belongs to'}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}, 'value': {'type': 'string', 'description': 'Value of the static fact'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSamples'], 'x-Argus-ApiStatus': 'DEV'}
list_submissions = {'tags': ['sampledb/v2'], 'summary': 'List all the submissions for a sample (PUBLIC)', 'description': '', 'operationId': 'listSubmissions', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample to fetch submissions for', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}], 'responses': {'default': {'description': 'List all the submissions for a sample', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'A submission for a sample. Represents the observation of a sample at a customer site', 'properties': {'acl': {'type': 'array', 'description': 'List of access controls that describe explicit access given to users or groups for this submission', 'items': {'type': 'object', 'description': 'Response model for access control', 'properties': {'grantedByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'grantedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The time at which the explicit access was granted'}, 'subject': {'type': 'object', 'description': 'SPI SubjectInfo', 'discriminator': {'propertyName': 'type'}, 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}, 'uniqueItems': True}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'expiryTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the submission will be deleted'}, 'fileName': {'type': 'string', 'description': 'The filename of the sample'}, 'flags': {'type': 'array', 'description': 'The flags set on this submission', 'items': {'type': 'string', 'description': 'The flags set on this submission', 'enum': ['trustedAgent', 'eventGeneratedNormal', 'eventGeneratedAlerted', 'eventGeneratedAlertedFlood']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'metaData': {'type': 'object', 'additionalProperties': {'type': 'string', 'description': 'Meta data about the sample'}, 'description': 'Meta data about the sample'}, 'mimeType': {'type': 'string', 'description': 'The sample mime type'}, 'observedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the sample was observed'}, 'sampleSha256': {'type': 'string', 'description': 'The sample this submission belongs to'}, 'submittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the submission was added'}, 'tlp': {'type': 'string', 'description': 'TLP color of the submission', 'enum': ['red', 'amber', 'green', 'clear']}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'The sample could not be found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSampleSubmission'], 'x-Argus-ApiStatus': 'PUBLIC'}
list_verdicts = {'tags': ['sampledb/v2'], 'summary': 'List all verdicts for a sample (PUBLIC)', 'description': '', 'operationId': 'listVerdicts', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample to fetch verdicts for', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'schema': {'type': 'int', 'default': '25', 'minimum': 0}, 'type': 'int', 'default': '25', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'schema': {'type': 'int', 'default': '0', 'minimum': 0}, 'type': 'int', 'default': '0', 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "The field on which to sort the verdicts. Prefix any of the allowed values with '-' to sort descending", 'schema': {'type': 'list', 'default': '-createdTimestamp', 'enum': ['createdTimestamp', 'triggeredDetections', 'score', '-createdTimestamp', '-triggeredDetections', '-score'], 'items': {'type': 'string'}}, 'type': 'list', 'default': '-createdTimestamp', 'enum': ['createdTimestamp', 'triggeredDetections', 'score', '-createdTimestamp', '-triggeredDetections', '-score'], 'items': {'type': 'string'}}], 'responses': {'default': {'description': 'List all verdicts for a sample', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Representation of a verdict about a sample', 'properties': {'analysis': {'type': 'array', 'description': 'The analyses that this verdict is based on', 'items': {'type': 'object', 'description': 'Compact representation of an analysis', 'properties': {'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The scores for the analysis'}, 'difference': {'type': 'integer', 'format': 'int32', 'description': 'Represents the difference between this analysis result from the overall verdict score.\nInteger value from -100 to 100, or null if the analysis resulted in no findings'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'impact': {'type': 'integer', 'format': 'int32', 'description': 'Represents how much the worker/source impacted to the overall verdict score.\nInteger value from 0 to 100, or null if the analysis resulted in no findings'}, 'possibleDetections': {'type': 'integer', 'format': 'int32', 'description': 'The maximum number of possible detections'}, 'tags': {'type': 'array', 'description': 'The tags for the analysis', 'items': {'type': 'object', 'description': 'A tag with a type and value for an analysis', 'properties': {'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}, 'triggeredDetections': {'type': 'array', 'description': 'The triggered detections for this analysis', 'items': {'type': 'object', 'description': 'Representation of an analysis detection', 'properties': {'assessment': {'type': 'string', 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}, 'name': {'type': 'string', 'description': 'The name of the detection'}}}, 'uniqueItems': True}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}, 'uniqueItems': True}, 'comment': {'type': 'string', 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'array', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'items': {'type': 'string', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}, 'uniqueItems': True}, 'job': {'type': 'object', 'description': 'A compact representation of an analysis job', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample this verdict belongs to'}, 'score': {'type': 'integer', 'format': 'int32', 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}, 'statusOverride': {'type': 'string', 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'tags': {'type': 'array', 'description': 'Tags for the verdict', 'items': {'type': 'object', 'description': 'A tag for verdicts', 'properties': {'count': {'type': 'integer', 'format': 'int32', 'description': 'The number of times this tag was found in analysis results'}, 'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSampleVerdicts'], 'x-Argus-ApiStatus': 'PUBLIC'}
reanalyse_sample = {'tags': ['sampledb/v2'], 'summary': 'Triggering reanalysis of a Sample without having to upload a new submission. (INTERNAL)', 'description': '', 'operationId': 'reanalyseSample', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'responses': {'default': {'description': 'Triggering reanalysis of a Sample without having to upload a new submission.', 'content': {'application/json': {}}}, '200': {'description': 'Successful operation', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Information about an analysis job', 'properties': {'analysedSample': {'type': 'object', 'description': 'A compact representation of a sample', 'properties': {'id': {'type': 'string', 'description': 'The ID of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the sample in bytes'}}}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'endTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the job was ended'}, 'enqueuedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the job was enqueued'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'startTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp for when the job was started'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'An error occurred', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['reanalyseSample'], 'x-Argus-ApiStatus': 'INTERNAL'}
reclassify_sample = {'tags': ['sampledb/v2'], 'summary': 'Manually reclassify an existing sample (INTERNAL)', 'description': '', 'operationId': 'reclassifySample', 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Manually reclassify an existing sample'}}}}, 'responses': {'default': {'description': 'Manually reclassify an existing sample', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'The result of a classification performed on a sample', 'properties': {'arch': {'type': 'string', 'description': 'The architecture for the sample'}, 'metaData': {'type': 'object', 'additionalProperties': {'description': 'Meta data for the sample'}, 'description': 'Meta data for the sample'}, 'platform': {'type': 'string', 'description': 'The platform for the sample'}, 'superType': {'type': 'string', 'description': 'The super type of file for the sample'}, 'type': {'type': 'string', 'description': 'The type of file for the sample'}, 'version': {'type': 'string', 'description': 'The version of the classifier used to generate this classification'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['reclassifySample'], 'x-Argus-ApiStatus': 'INTERNAL'}
simple_search = {'tags': ['sampledb/v2'], 'summary': 'Simple search for samples (PUBLIC)', 'description': '', 'operationId': 'simpleSearch', 'parameters': [{'name': 'offset', 'in': 'query', 'description': 'Number of results to skip', 'schema': {'type': 'int', 'default': '0', 'maximum': 10000, 'minimum': 0}, 'type': 'int', 'default': '0', 'maximum': 10000, 'minimum': 0}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'schema': {'type': 'int', 'default': '25', 'maximum': 10000, 'minimum': 0}, 'type': 'int', 'default': '25', 'maximum': 10000, 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "The fields to sort the results by. Prefix with '-' to sort descending", 'schema': {'type': 'list', 'default': '-sampleCreatedTimestamp', 'enum': ['sampleCreatedTimestamp', 'sampleSize', 'sampleClassificationType', 'lastUpdatedSubmission', 'lastUpdatedAnalysis', 'lastUpdatedLink', '-sampleCreatedTimestamp', '-sampleSize', '-sampleClassificationType', '-lastUpdatedSubmission', '-lastUpdatedAnalysis', '-lastUpdatedLink'], 'items': {'type': 'string'}}, 'type': 'list', 'default': '-sampleCreatedTimestamp', 'enum': ['sampleCreatedTimestamp', 'sampleSize', 'sampleClassificationType', 'lastUpdatedSubmission', 'lastUpdatedAnalysis', 'lastUpdatedLink', '-sampleCreatedTimestamp', '-sampleSize', '-sampleClassificationType', '-lastUpdatedSubmission', '-lastUpdatedAnalysis', '-lastUpdatedLink'], 'items': {'type': 'string'}}, {'name': 'indexStartTimestamp', 'in': 'query', 'description': 'Restrict search to data after this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details', 'schema': {'type': 'str', 'default': 'now - 1 month'}, 'type': 'str', 'default': 'now - 1 month'}, {'name': 'indexEndTimestamp', 'in': 'query', 'description': 'Restrict search to data before this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details', 'schema': {'type': 'str', 'default': 'now'}, 'type': 'str', 'default': 'now'}, {'name': 'keywords', 'in': 'query', 'description': 'A set of keywords to search for', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'keywordFieldStrategy', 'in': 'query', 'description': 'Which fields to search on', 'schema': {'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['all', 'sha256', 'sha512', 'sha1', 'md5', 'submission', 'analysis', 'link', 'classification', 'verdict', 'fact']}, 'uniqueItems': True}, 'type': 'list', 'default': 'all', 'items': {'type': 'str', 'enum': ['all', 'sha256', 'sha512', 'sha1', 'md5', 'submission', 'analysis', 'link', 'classification', 'verdict', 'fact']}, 'uniqueItems': True}, {'name': 'keywordMatchStrategy', 'in': 'query', 'description': 'Whether the keywords must match all or any of the keyword fields', 'schema': {'type': 'str', 'default': 'any', 'enum': ['all', 'any']}, 'type': 'str', 'default': 'any', 'enum': ['all', 'any']}], 'responses': {'default': {'description': 'Simple search for samples', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Metadata for a sample file', 'properties': {'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the sample was created.'}, 'deletedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when the sample was deleted'}, 'firstObservedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the first observation for this sample'}, 'firstSubmittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the first submission for this sample'}, 'flags': {'type': 'array', 'description': 'The flags set for this sample', 'items': {'type': 'string', 'description': 'The flags set for this sample', 'enum': ['exceededMaxSearchableSubmissions', 'exceededMaxSearchableLinks', 'exceededMaxSearchableAnalyses', 'exceededMaxSearchableStaticFacts', 'deleted']}, 'uniqueItems': True}, 'lastObservedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the last observation for this sample'}, 'lastSubmittedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp of the last submission for this sample'}, 'latestClassification': {'type': 'object', 'description': 'The result of a classification performed on a sample', 'properties': {'arch': {'type': 'string', 'description': 'The architecture for the sample'}, 'metaData': {'type': 'object', 'additionalProperties': {'description': 'Meta data for the sample'}, 'description': 'Meta data for the sample'}, 'platform': {'type': 'string', 'description': 'The platform for the sample'}, 'superType': {'type': 'string', 'description': 'The super type of file for the sample'}, 'type': {'type': 'string', 'description': 'The type of file for the sample'}, 'version': {'type': 'string', 'description': 'The version of the classifier used to generate this classification'}}}, 'latestVerdict': {'type': 'object', 'description': 'Representation of a verdict about a sample', 'properties': {'analysis': {'type': 'array', 'description': 'The analyses that this verdict is based on', 'items': {'type': 'object', 'description': 'Compact representation of an analysis', 'properties': {'analysisScore': {'type': 'integer', 'format': 'int32', 'description': 'The scores for the analysis'}, 'difference': {'type': 'integer', 'format': 'int32', 'description': 'Represents the difference between this analysis result from the overall verdict score.\nInteger value from -100 to 100, or null if the analysis resulted in no findings'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'impact': {'type': 'integer', 'format': 'int32', 'description': 'Represents how much the worker/source impacted to the overall verdict score.\nInteger value from 0 to 100, or null if the analysis resulted in no findings'}, 'possibleDetections': {'type': 'integer', 'format': 'int32', 'description': 'The maximum number of possible detections'}, 'tags': {'type': 'array', 'description': 'The tags for the analysis', 'items': {'type': 'object', 'description': 'A tag with a type and value for an analysis', 'properties': {'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}, 'triggeredDetections': {'type': 'array', 'description': 'The triggered detections for this analysis', 'items': {'type': 'object', 'description': 'Representation of an analysis detection', 'properties': {'assessment': {'type': 'string', 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious', 'informational']}, 'name': {'type': 'string', 'description': 'The name of the detection'}}}, 'uniqueItems': True}, 'userAgent': {'type': 'object', 'description': 'Model used for representing a user agent', 'properties': {'name': {'type': 'string', 'description': 'The name of the user agent'}, 'version': {'type': 'string', 'description': 'The version of the user agent'}}}}}, 'uniqueItems': True}, 'comment': {'type': 'string', 'description': 'A comment an analyst can supply with some information or context when manually adding a verdict'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp when this verdict was created'}, 'flags': {'type': 'array', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'items': {'type': 'string', 'description': 'Flags for this verdict. Can for example indicate whether the verdict is manually created', 'enum': ['manual', 'contradictingStatusOverrides', 'shared']}, 'uniqueItems': True}, 'job': {'type': 'object', 'description': 'A compact representation of an analysis job', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the response object.'}, 'state': {'type': 'string', 'description': 'The current state of the job', 'enum': ['enqueued', 'executing', 'done', 'timeout']}}}, 'sampleSha256': {'type': 'string', 'description': 'The sha256 of the sample this verdict belongs to'}, 'score': {'type': 'integer', 'format': 'int32', 'description': 'The value is a score from -1-100 and represents the degree of maliciousness. -1 means no findings, 100 means that it definitively is malicious. Please refer to the integration guide for a description of the scoring ranges'}, 'statusOverride': {'type': 'string', 'description': 'Signifies that an analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status', 'enum': ['malicious', 'benign']}, 'tags': {'type': 'array', 'description': 'Tags for the verdict', 'items': {'type': 'object', 'description': 'A tag for verdicts', 'properties': {'count': {'type': 'integer', 'format': 'int32', 'description': 'The number of times this tag was found in analysis results'}, 'type': {'type': 'string', 'description': 'The tag type', 'enum': ['family', 'behaviour', 'yara']}, 'value': {'type': 'string', 'description': 'The tag value'}}}, 'uniqueItems': True}}}, 'md5': {'type': 'string', 'description': 'The MD5 hash of the sample'}, 'sha1': {'type': 'string', 'description': 'The SHA1 hash of the sample'}, 'sha256': {'type': 'string', 'description': 'The ID of the sample'}, 'sha512': {'type': 'string', 'description': 'The SHA512 hash of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the sample in bytes'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['viewSamples'], 'x-Argus-ApiStatus': 'PUBLIC'}
upload_evidence = {'tags': ['sampledb/v2'], 'summary': 'Uploads an evidence file (INTERNAL)', 'description': '', 'operationId': 'uploadEvidence', 'parameters': [{'name': 'Content-Type', 'in': 'header', 'description': 'The mime type of the file', 'schema': {'type': 'string'}}, {'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample that holds the analysis', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'UUID of analysis to add evidence to', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}, {'name': 'fileName', 'in': 'path', 'description': 'The name of the evidence file to upload => [a-zA-Z0-9_:\\-\\.]*', 'required': True, 'schema': {'type': 'str', 'pattern': '[a-zA-Z0-9_:\\-\\.]*'}, 'type': 'str', 'pattern': '[a-zA-Z0-9_:\\-\\.]*'}, {'name': 'internal', 'in': 'query', 'description': 'If the evidence is internal', 'schema': {'type': 'boolean'}, 'type': 'bool'}, {'name': 'potentiallyMalicious', 'in': 'query', 'description': 'If the evidence is potentially malicious', 'schema': {'type': 'boolean'}, 'type': 'bool'}], 'requestBody': {'content': {'*/*': {'schema': {'type': 'object'}}}}, 'responses': {'default': {'description': 'default response', 'content': {'application/json': {}}}, '201': {'description': 'Uploads an evidence file', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'Evidence data produced as a part of an analysis', 'properties': {'checksum': {'type': 'string', 'description': 'The sha256 of the evidence data. Used for integrity check of fragments'}, 'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'When the evidence was created'}, 'fileName': {'type': 'string', 'description': 'The file name of the evidence'}, 'flags': {'type': 'array', 'description': 'The flags for the evidence', 'items': {'type': 'string', 'description': 'The flags for the evidence', 'enum': ['internal', 'potentiallyMalicious']}, 'uniqueItems': True}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'The ID of this Evidence'}, 'mimeType': {'type': 'string', 'description': 'The MIME type of the evidence'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'The size of the evidence in bytes'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation error', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['addSampleAnalysisEvidence'], 'x-Argus-ApiStatus': 'INTERNAL'}