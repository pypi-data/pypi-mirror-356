"""Autogenerated API schema"""
from argus_api import session


assess_event = {'tags': ['events/v2'], 'summary': 'Assess event (DEV)', 'description': '', 'operationId': 'assessEvent', 'parameters': [{'name': 'timestamp', 'in': 'path', 'description': 'Event timestamp', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'customerID', 'in': 'path', 'description': 'Customer ID', 'required': True, 'schema': {'type': 'int', 'minimum': 1}, 'type': 'int', 'minimum': 1}, {'name': 'eventID', 'in': 'path', 'description': 'Event ID', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'associateCase': {'type': 'list', 'description': 'Case IDs that are going to be associated with this event (not required).\nSpecified cases must be readable to the current user and they must belong to same customer as this event.\n', 'items': {'type': 'int', 'description': 'Case IDs that are going to be associated with this event (not required).\nSpecified cases must be readable to the current user and they must belong to same customer as this event.\n'}, 'uniqueItems': True}, 'comment': {'type': 'str', 'description': 'Assessment comment to the event (not required).'}, 'disableFlag': {'type': 'list', 'description': 'Which flags to disable. Overlap with enableFlag will be an invalid request.', 'items': {'type': 'str', 'description': 'Which flags to disable. Overlap with enableFlag will be an invalid request.', 'enum': ['falsePositive', 'notAThreat', 'tuningCandidate', 'followup', 'identifiedThreat', 'acknowledged', 'partiallyAcknowledged']}, 'uniqueItems': True}, 'disassociateCase': {'type': 'list', 'description': 'Case IDs that are going to be disassociated from this event\n(should not overlap with case IDs that are going to be associated with this event, not required).\n', 'items': {'type': 'int', 'description': 'Case IDs that are going to be disassociated from this event\n(should not overlap with case IDs that are going to be associated with this event, not required).\n'}, 'uniqueItems': True}, 'enableFlag': {'type': 'list', 'description': 'Which flags to enable. Overlap with disableFlag will be an invalid request.', 'items': {'type': 'str', 'description': 'Which flags to enable. Overlap with disableFlag will be an invalid request.', 'enum': ['falsePositive', 'notAThreat', 'tuningCandidate', 'followup', 'identifiedThreat', 'acknowledged', 'partiallyAcknowledged']}, 'uniqueItems': True}, 'handledByAnalyst': {'type': 'bool', 'default': False, 'description': 'If true, then the event will be flagged as manually assessed by an analyst.'}, 'newSeverity': {'type': 'str', 'description': 'New severity of the event (if not set, keep current severity).', 'enum': ['low', 'medium', 'high', 'critical']}, 'trigger': {'type': 'list', 'description': 'Set of checks which will be run after assessment (not required).', 'items': {'type': 'str', 'description': 'Set of checks which will be run after assessment (not required).', 'enum': ['slaViolation', 'internalSlaViolation']}, 'uniqueItems': True}}}}}, 'required': True}, 'responses': {'default': {'description': 'Assess event', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'alarm': {'type': 'object', 'description': 'Alarm associated with the event.', 'properties': {'description': {'type': 'string', 'description': 'Short description about the alarm.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the alarm.'}, 'shortName': {'type': 'string', 'description': 'Short name of the alarm.'}}}, 'associatedCases': {'type': 'array', 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'object', 'description': 'Cases associated with the event (only available for aggregate events).', 'properties': {'categoryID': {'type': 'integer', 'format': 'int64', 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'string', 'description': 'Category name of the case.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the associated case.'}, 'priority': {'type': 'string', 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}, 'serviceID': {'type': 'integer', 'format': 'int64', 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'string', 'description': 'Service name of the case.'}, 'status': {'type': 'string', 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'subject': {'type': 'string', 'description': 'Subject of the case.'}}}}, 'attackCategory': {'type': 'object', 'description': 'Attack category associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the attack category.'}, 'name': {'type': 'string', 'description': 'Name of the attack category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the attack category.'}}}, 'comments': {'type': 'array', 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'object', 'description': 'If requested, contains the comments added to the event.', 'properties': {'comment': {'type': 'string', 'description': 'Contents of the comment.'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the comment was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'count': {'type': 'integer', 'format': 'int32', 'description': 'Count of aggregate events, always 1 for raw events'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'destination': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'domain': {'type': 'string', 'description': 'Fully qualified domain name associated with the event.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the event.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the event.', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'id': {'type': 'string', 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'location': {'type': 'object', 'description': 'Location associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the location.'}, 'name': {'type': 'string', 'description': 'Name of the location.'}, 'shortName': {'type': 'string', 'description': 'Short name of the location.'}}}, 'properties': {'type': 'array', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'items': {'type': 'object', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'properties': {'key': {'type': 'string', 'description': 'Key of the property.'}, 'type': {'type': 'string', 'description': 'Enumerated type of the property.', 'enum': ['boolean', 'long', 'string', 'double']}, 'values': {'type': 'array', 'description': 'Value(s) of the property.', 'items': {'type': 'string', 'description': 'Value(s) of the property.'}}}}, 'uniqueItems': True}, 'protocol': {'type': 'string', 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'sensor': {'type': 'object', 'description': 'Sensor that registered the event.', 'properties': {'hostName': {'type': 'string', 'description': 'Host name of the device.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the device.'}, 'ip': {'type': 'string', 'description': 'IP address of the device.'}}}, 'severity': {'type': 'string', 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'signature': {'type': 'object', 'description': 'Signature associated with the event.', 'properties': {'name': {'type': 'string', 'description': 'Name/ID of the signature.'}}}, 'source': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'subEvents': {'type': 'array', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'items': {'type': 'string', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).'}, 'uniqueItems': True}, 'timestamps': {'type': 'object', 'description': 'Various timestamps associated with the event', 'properties': {'created': {'type': 'integer', 'format': 'int64', 'description': 'Creation timestamp of the event.'}, 'enginePersisted': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the event was first assessed.'}, 'firstEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'firstNotified': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the case association with the event.'}, 'lastEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'lastUpdated': {'type': 'integer', 'format': 'int64', 'description': 'Last update timestamp of the event (only for aggregated events).'}}}, 'type': {'type': 'string', 'description': 'Enumerated type of the event.', 'enum': ['aggregated', 'raw']}, 'uri': {'type': 'string', 'description': 'URI associated with the event.'}, 'uuid': {'type': 'string', 'format': 'uuid', 'description': 'UUID of the event.'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Events not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['assessEvents'], 'x-Argus-ApiStatus': 'DEV'}
assess_event_bulk = {'tags': ['events/v2'], 'summary': 'Bulk assess events (DEV)', 'description': '', 'operationId': 'assessEventBulk', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'assessment': {'type': 'dict', 'properties': {'associateCase': {'type': 'list', 'description': 'Case IDs that are going to be associated with this event (not required).\nSpecified cases must be readable to the current user and they must belong to same customer as this event.\n', 'items': {'type': 'int', 'description': 'Case IDs that are going to be associated with this event (not required).\nSpecified cases must be readable to the current user and they must belong to same customer as this event.\n'}, 'uniqueItems': True}, 'comment': {'type': 'str', 'description': 'Assessment comment to the event (not required).'}, 'disableFlag': {'type': 'list', 'description': 'Which flags to disable. Overlap with enableFlag will be an invalid request.', 'items': {'type': 'str', 'description': 'Which flags to disable. Overlap with enableFlag will be an invalid request.', 'enum': ['falsePositive', 'notAThreat', 'tuningCandidate', 'followup', 'identifiedThreat', 'acknowledged', 'partiallyAcknowledged']}, 'uniqueItems': True}, 'disassociateCase': {'type': 'list', 'description': 'Case IDs that are going to be disassociated from this event\n(should not overlap with case IDs that are going to be associated with this event, not required).\n', 'items': {'type': 'int', 'description': 'Case IDs that are going to be disassociated from this event\n(should not overlap with case IDs that are going to be associated with this event, not required).\n'}, 'uniqueItems': True}, 'enableFlag': {'type': 'list', 'description': 'Which flags to enable. Overlap with disableFlag will be an invalid request.', 'items': {'type': 'str', 'description': 'Which flags to enable. Overlap with disableFlag will be an invalid request.', 'enum': ['falsePositive', 'notAThreat', 'tuningCandidate', 'followup', 'identifiedThreat', 'acknowledged', 'partiallyAcknowledged']}, 'uniqueItems': True}, 'handledByAnalyst': {'type': 'bool', 'default': False, 'description': 'If true, then the event will be flagged as manually assessed by an analyst.'}, 'newSeverity': {'type': 'str', 'description': 'New severity of the event (if not set, keep current severity).', 'enum': ['low', 'medium', 'high', 'critical']}, 'trigger': {'type': 'list', 'description': 'Set of checks which will be run after assessment (not required).', 'items': {'type': 'str', 'description': 'Set of checks which will be run after assessment (not required).', 'enum': ['slaViolation', 'internalSlaViolation']}, 'uniqueItems': True}}}, 'search': {'type': 'dict', 'properties': {'associatedCase': {'type': 'list', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n', 'items': {'type': 'int', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attack': {'type': 'list', 'description': 'Restrict search to events matching these attack criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Attack criteria limit search depending on the attack that triggered the event.\nThe fields in one AttackCriteria are AND-ed together\n', 'properties': {'alarm': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'signature': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these signatures', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these signatures'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'customer': {'type': 'list', 'description': 'Which customers to search for events for. Search by id or short name', 'items': {'type': 'str', 'description': 'Which customers to search for events for. Search by id or short name'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'domain': {'type': 'list', 'description': 'Restrict search to events with one of these domains set', 'items': {'type': 'str', 'description': 'Restrict search to events with one of these domains set'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'description': 'Restrict search to data before this time (epoch millis)\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'endpoint': {'type': 'list', 'description': 'Restrict search to events with endpoints matching these criteria\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Endpoint criteria limit search depending on the endpoints of the event.\nThe fields in one EndpointCriteria are AND-ed together\n', 'properties': {'countryCode': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code'}, 'uniqueItems': True}, 'endpointFieldStrategy': {'type': 'str', 'default': 'all', 'description': 'Restrict the criterion to match with endpoints of this type', 'enum': ['source', 'destination', 'all']}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'excludeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'ip': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n [format:ip]', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'minMaskBits': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints where the mask bits on the IP no wider than this'}, 'port': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with one of these ports', 'items': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints with one of these ports'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'eventIdentifier': {'type': 'list', 'description': 'Which event identifiers to search for', 'items': {'type': 'str', 'description': 'Which event identifiers to search for'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'excludeFlag': {'type': 'list', 'description': 'Restrict search to events with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with NONE of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict search to events with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with ALL of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'indexEndTimestamp': {'type': 'str', 'description': 'Only search in indexes before or on this day. Defaults to current day.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. "\n+ "See the general integration guide for more details  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'indexStartTimestamp': {'type': 'str', 'description': 'Only search in indexes after or on this day. Defaults to current day.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. "\n+ "See the general integration guide for more details  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'limit': {'type': 'int', 'default': 25, 'description': 'Limit the results to the specified amount. If set to 0 we will include all results matching the query', 'minimum': 0}, 'offset': {'type': 'int', 'default': 0, 'description': 'Skip specified amount of results', 'minimum': 0}, 'productionCustomers': {'type': 'bool', 'description': "Restricts the search to customers that either are, or are not in production.\nIf null we don't filter (default)\nIf true we only return production customers\nIf false, we exclude all production customers\n"}, 'property': {'type': 'list', 'description': 'Restrict search to events with properties matching these criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query.\n', 'items': {'type': 'dict', 'description': 'Property criteria limit search depending on the properties that are set on the event.\n', 'properties': {'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'key': {'type': 'str', 'description': 'The key of the property to search for. If the search will look for the value in any property'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'value': {'type': 'list', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key', 'items': {'type': 'str', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'valueMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'The strategy for deciding if the criteria matches the values', 'enum': ['any', 'all']}, 'valueSearchStrategy': {'type': 'str', 'default': 'exact', 'description': 'The strategy for deciding if the value matches the property', 'enum': ['tokenized', 'exact']}}, 'required': ['valueMatchStrategy', 'valueSearchStrategy']}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'severity': {'type': 'list', 'description': 'Which severities to search for', 'items': {'type': 'str', 'description': 'Which severities to search for', 'enum': ['low', 'medium', 'high', 'critical']}, 'uniqueItems': True}, 'sortBy': {'type': 'list', 'description': 'Which field(s) to sort the results by (default is ascending by createdTimestamp)', 'items': {'type': 'str', 'description': 'Which field(s) to sort the results by (default is ascending by createdTimestamp)', 'enum': ['customerID', 'eventID', 'createdTimestamp', 'lastUpdatedTimestamp', 'firstEventTimestamp', 'lastEventTimestamp', '-customerID', '-eventID', '-createdTimestamp', '-lastUpdatedTimestamp', '-firstEventTimestamp', '-lastEventTimestamp']}}, 'startTimestamp': {'type': 'str', 'description': 'Restrict search to data after this time.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'subCriteria': {'type': 'list', 'description': 'The set of sub criteria to add to the search', 'items': {'type': 'dict', 'description': 'Sub-criteria allow constructing advanced queries with inclusions and exclusions', 'properties': {'associatedCase': {'type': 'list', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n', 'items': {'type': 'int', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attack': {'type': 'list', 'description': 'Restrict search to events matching these attack criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Attack criteria limit search depending on the attack that triggered the event.\nThe fields in one AttackCriteria are AND-ed together\n', 'properties': {'alarm': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'signature': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these signatures', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these signatures'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'customer': {'type': 'list', 'description': 'Which customers to search for events for. Search by id or short name', 'items': {'type': 'str', 'description': 'Which customers to search for events for. Search by id or short name'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'domain': {'type': 'list', 'description': 'Restrict search to events with one of these domains set', 'items': {'type': 'str', 'description': 'Restrict search to events with one of these domains set'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'description': 'Restrict search to data before this time (epoch millis)\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'endpoint': {'type': 'list', 'description': 'Restrict search to events with endpoints matching these criteria\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Endpoint criteria limit search depending on the endpoints of the event.\nThe fields in one EndpointCriteria are AND-ed together\n', 'properties': {'countryCode': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code'}, 'uniqueItems': True}, 'endpointFieldStrategy': {'type': 'str', 'default': 'all', 'description': 'Restrict the criterion to match with endpoints of this type', 'enum': ['source', 'destination', 'all']}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'excludeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'ip': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n [format:ip]', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'minMaskBits': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints where the mask bits on the IP no wider than this'}, 'port': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with one of these ports', 'items': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints with one of these ports'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'eventIdentifier': {'type': 'list', 'description': 'Which event identifiers to search for', 'items': {'type': 'str', 'description': 'Which event identifiers to search for'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this sub criterion'}, 'excludeFlag': {'type': 'list', 'description': 'Restrict search to events with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with NONE of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict search to events with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with ALL of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'productionCustomers': {'type': 'bool', 'description': "Restricts the search to customers that either are, or are not in production.\nIf null we don't filter (default)\nIf true we only return production customers\nIf false, we exclude all production customers\n"}, 'property': {'type': 'list', 'description': 'Restrict search to events with properties matching these criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query.\n', 'items': {'type': 'dict', 'description': 'Property criteria limit search depending on the properties that are set on the event.\n', 'properties': {'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'key': {'type': 'str', 'description': 'The key of the property to search for. If the search will look for the value in any property'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'value': {'type': 'list', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key', 'items': {'type': 'str', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'valueMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'The strategy for deciding if the criteria matches the values', 'enum': ['any', 'all']}, 'valueSearchStrategy': {'type': 'str', 'default': 'exact', 'description': 'The strategy for deciding if the value matches the property', 'enum': ['tokenized', 'exact']}}, 'required': ['valueMatchStrategy', 'valueSearchStrategy']}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this sub criterion.\nIf false the search only needs to match at least one sub criterion.\n'}, 'severity': {'type': 'list', 'description': 'Which severities to search for', 'items': {'type': 'str', 'description': 'Which severities to search for', 'enum': ['low', 'medium', 'high', 'critical']}, 'uniqueItems': True}, 'startTimestamp': {'type': 'str', 'description': 'Restrict search to data after this time.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'timeFieldStrategy': {'type': 'list', 'description': 'Which time fields to search for', 'items': {'type': 'str', 'description': 'Which time fields to search for', 'enum': ['created', 'lastUpdated', 'firstAssessment', 'enginePersisted', 'firstEvent', 'lastEvent', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Which time match strategy to use. Defaults to matching if any', 'enum': ['any', 'all']}, 'type': 'list'}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'timeFieldStrategy': {'type': 'list', 'description': 'Which time fields to search for', 'items': {'type': 'str', 'description': 'Which time fields to search for', 'enum': ['created', 'lastUpdated', 'firstAssessment', 'enginePersisted', 'firstEvent', 'lastEvent', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Which time match strategy to use. Defaults to matching if any', 'enum': ['any', 'all']}, 'type': 'list'}}}, 'required': ['assessment', 'search']}}}, 'required': True}, 'responses': {'default': {'description': 'Bulk assess events', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'A response that contains info about the bulk assessment of events.', 'properties': {'failures': {'type': 'array', 'description': 'Failure info of the events that failed assessment.', 'items': {'type': 'object', 'description': 'Single event failure info.', 'properties': {'eventID': {'type': 'string', 'description': 'ID of the event that failed assessment.'}, 'reason': {'type': 'string', 'description': 'The reason of assessment failure.'}}}, 'uniqueItems': True}, 'successes': {'type': 'array', 'description': 'IDs of the events that were successfully assessed.', 'items': {'type': 'string', 'description': 'IDs of the events that were successfully assessed.'}, 'uniqueItems': True}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['assessEvents'], 'x-Argus-ApiStatus': 'DEV'}
assess_event_by_compatibility_path = {'tags': ['events/v2'], 'summary': 'Assess event (by compatibility path) (DEV)', 'description': '', 'operationId': 'assessEventCompatibility', 'parameters': [{'name': 'type', 'in': 'path', 'description': 'Event type (ignored, provided for path compatibility)', 'required': True, 'schema': {'type': 'string'}, 'type': 'str'}, {'name': 'timestamp', 'in': 'path', 'description': 'Event timestamp', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'customerID', 'in': 'path', 'description': 'Customer ID', 'required': True, 'schema': {'type': 'int', 'minimum': 1}, 'type': 'int', 'minimum': 1}, {'name': 'eventID', 'in': 'path', 'description': 'Event ID', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'associateCase': {'type': 'list', 'description': 'Case IDs that are going to be associated with this event (not required).\nSpecified cases must be readable to the current user and they must belong to same customer as this event.\n', 'items': {'type': 'int', 'description': 'Case IDs that are going to be associated with this event (not required).\nSpecified cases must be readable to the current user and they must belong to same customer as this event.\n'}, 'uniqueItems': True}, 'comment': {'type': 'str', 'description': 'Assessment comment to the event (not required).'}, 'disableFlag': {'type': 'list', 'description': 'Which flags to disable. Overlap with enableFlag will be an invalid request.', 'items': {'type': 'str', 'description': 'Which flags to disable. Overlap with enableFlag will be an invalid request.', 'enum': ['falsePositive', 'notAThreat', 'tuningCandidate', 'followup', 'identifiedThreat', 'acknowledged', 'partiallyAcknowledged']}, 'uniqueItems': True}, 'disassociateCase': {'type': 'list', 'description': 'Case IDs that are going to be disassociated from this event\n(should not overlap with case IDs that are going to be associated with this event, not required).\n', 'items': {'type': 'int', 'description': 'Case IDs that are going to be disassociated from this event\n(should not overlap with case IDs that are going to be associated with this event, not required).\n'}, 'uniqueItems': True}, 'enableFlag': {'type': 'list', 'description': 'Which flags to enable. Overlap with disableFlag will be an invalid request.', 'items': {'type': 'str', 'description': 'Which flags to enable. Overlap with disableFlag will be an invalid request.', 'enum': ['falsePositive', 'notAThreat', 'tuningCandidate', 'followup', 'identifiedThreat', 'acknowledged', 'partiallyAcknowledged']}, 'uniqueItems': True}, 'handledByAnalyst': {'type': 'bool', 'default': False, 'description': 'If true, then the event will be flagged as manually assessed by an analyst.'}, 'newSeverity': {'type': 'str', 'description': 'New severity of the event (if not set, keep current severity).', 'enum': ['low', 'medium', 'high', 'critical']}, 'trigger': {'type': 'list', 'description': 'Set of checks which will be run after assessment (not required).', 'items': {'type': 'str', 'description': 'Set of checks which will be run after assessment (not required).', 'enum': ['slaViolation', 'internalSlaViolation']}, 'uniqueItems': True}}}}}, 'required': True}, 'responses': {'default': {'description': 'Assess event (by compatibility path)', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'alarm': {'type': 'object', 'description': 'Alarm associated with the event.', 'properties': {'description': {'type': 'string', 'description': 'Short description about the alarm.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the alarm.'}, 'shortName': {'type': 'string', 'description': 'Short name of the alarm.'}}}, 'associatedCases': {'type': 'array', 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'object', 'description': 'Cases associated with the event (only available for aggregate events).', 'properties': {'categoryID': {'type': 'integer', 'format': 'int64', 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'string', 'description': 'Category name of the case.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the associated case.'}, 'priority': {'type': 'string', 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}, 'serviceID': {'type': 'integer', 'format': 'int64', 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'string', 'description': 'Service name of the case.'}, 'status': {'type': 'string', 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'subject': {'type': 'string', 'description': 'Subject of the case.'}}}}, 'attackCategory': {'type': 'object', 'description': 'Attack category associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the attack category.'}, 'name': {'type': 'string', 'description': 'Name of the attack category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the attack category.'}}}, 'comments': {'type': 'array', 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'object', 'description': 'If requested, contains the comments added to the event.', 'properties': {'comment': {'type': 'string', 'description': 'Contents of the comment.'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the comment was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'count': {'type': 'integer', 'format': 'int32', 'description': 'Count of aggregate events, always 1 for raw events'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'destination': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'domain': {'type': 'string', 'description': 'Fully qualified domain name associated with the event.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the event.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the event.', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'id': {'type': 'string', 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'location': {'type': 'object', 'description': 'Location associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the location.'}, 'name': {'type': 'string', 'description': 'Name of the location.'}, 'shortName': {'type': 'string', 'description': 'Short name of the location.'}}}, 'properties': {'type': 'array', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'items': {'type': 'object', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'properties': {'key': {'type': 'string', 'description': 'Key of the property.'}, 'type': {'type': 'string', 'description': 'Enumerated type of the property.', 'enum': ['boolean', 'long', 'string', 'double']}, 'values': {'type': 'array', 'description': 'Value(s) of the property.', 'items': {'type': 'string', 'description': 'Value(s) of the property.'}}}}, 'uniqueItems': True}, 'protocol': {'type': 'string', 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'sensor': {'type': 'object', 'description': 'Sensor that registered the event.', 'properties': {'hostName': {'type': 'string', 'description': 'Host name of the device.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the device.'}, 'ip': {'type': 'string', 'description': 'IP address of the device.'}}}, 'severity': {'type': 'string', 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'signature': {'type': 'object', 'description': 'Signature associated with the event.', 'properties': {'name': {'type': 'string', 'description': 'Name/ID of the signature.'}}}, 'source': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'subEvents': {'type': 'array', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'items': {'type': 'string', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).'}, 'uniqueItems': True}, 'timestamps': {'type': 'object', 'description': 'Various timestamps associated with the event', 'properties': {'created': {'type': 'integer', 'format': 'int64', 'description': 'Creation timestamp of the event.'}, 'enginePersisted': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the event was first assessed.'}, 'firstEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'firstNotified': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the case association with the event.'}, 'lastEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'lastUpdated': {'type': 'integer', 'format': 'int64', 'description': 'Last update timestamp of the event (only for aggregated events).'}}}, 'type': {'type': 'string', 'description': 'Enumerated type of the event.', 'enum': ['aggregated', 'raw']}, 'uri': {'type': 'string', 'description': 'URI associated with the event.'}, 'uuid': {'type': 'string', 'format': 'uuid', 'description': 'UUID of the event.'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['assessEvents'], 'x-Argus-ApiStatus': 'DEV'}
get_event = {'tags': ['events/v2'], 'summary': 'Fetches corresponding event (DEV)', 'description': '', 'operationId': 'getEventV2', 'parameters': [{'name': 'timestamp', 'in': 'path', 'description': 'Event timestamp', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'customerID', 'in': 'path', 'description': 'Customer ID', 'required': True, 'schema': {'type': 'int', 'minimum': 1}, 'type': 'int', 'minimum': 1}, {'name': 'eventID', 'in': 'path', 'description': 'Event ID', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}, {'name': 'includeAllProperties', 'in': 'query', 'description': 'Whether to include all properties', 'schema': {'type': 'bool', 'default': 'false'}, 'type': 'bool', 'default': 'false'}, {'name': 'includeComments', 'in': 'query', 'description': 'Whether to include comments', 'schema': {'type': 'bool', 'default': 'false'}, 'type': 'bool', 'default': 'false'}, {'name': 'includeSubEvents', 'in': 'query', 'description': 'Whether to include sub-event IDs', 'schema': {'type': 'bool', 'default': 'false'}, 'type': 'bool', 'default': 'false'}, {'name': 'includeProperties', 'in': 'query', 'description': 'Which properties to include in the response (if includeAllProperties=false) => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'uniqueItems': True}], 'responses': {'default': {'description': 'Fetches corresponding event', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'alarm': {'type': 'object', 'description': 'Alarm associated with the event.', 'properties': {'description': {'type': 'string', 'description': 'Short description about the alarm.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the alarm.'}, 'shortName': {'type': 'string', 'description': 'Short name of the alarm.'}}}, 'associatedCases': {'type': 'array', 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'object', 'description': 'Cases associated with the event (only available for aggregate events).', 'properties': {'categoryID': {'type': 'integer', 'format': 'int64', 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'string', 'description': 'Category name of the case.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the associated case.'}, 'priority': {'type': 'string', 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}, 'serviceID': {'type': 'integer', 'format': 'int64', 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'string', 'description': 'Service name of the case.'}, 'status': {'type': 'string', 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'subject': {'type': 'string', 'description': 'Subject of the case.'}}}}, 'attackCategory': {'type': 'object', 'description': 'Attack category associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the attack category.'}, 'name': {'type': 'string', 'description': 'Name of the attack category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the attack category.'}}}, 'comments': {'type': 'array', 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'object', 'description': 'If requested, contains the comments added to the event.', 'properties': {'comment': {'type': 'string', 'description': 'Contents of the comment.'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the comment was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'count': {'type': 'integer', 'format': 'int32', 'description': 'Count of aggregate events, always 1 for raw events'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'destination': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'domain': {'type': 'string', 'description': 'Fully qualified domain name associated with the event.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the event.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the event.', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'id': {'type': 'string', 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'location': {'type': 'object', 'description': 'Location associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the location.'}, 'name': {'type': 'string', 'description': 'Name of the location.'}, 'shortName': {'type': 'string', 'description': 'Short name of the location.'}}}, 'properties': {'type': 'array', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'items': {'type': 'object', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'properties': {'key': {'type': 'string', 'description': 'Key of the property.'}, 'type': {'type': 'string', 'description': 'Enumerated type of the property.', 'enum': ['boolean', 'long', 'string', 'double']}, 'values': {'type': 'array', 'description': 'Value(s) of the property.', 'items': {'type': 'string', 'description': 'Value(s) of the property.'}}}}, 'uniqueItems': True}, 'protocol': {'type': 'string', 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'sensor': {'type': 'object', 'description': 'Sensor that registered the event.', 'properties': {'hostName': {'type': 'string', 'description': 'Host name of the device.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the device.'}, 'ip': {'type': 'string', 'description': 'IP address of the device.'}}}, 'severity': {'type': 'string', 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'signature': {'type': 'object', 'description': 'Signature associated with the event.', 'properties': {'name': {'type': 'string', 'description': 'Name/ID of the signature.'}}}, 'source': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'subEvents': {'type': 'array', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'items': {'type': 'string', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).'}, 'uniqueItems': True}, 'timestamps': {'type': 'object', 'description': 'Various timestamps associated with the event', 'properties': {'created': {'type': 'integer', 'format': 'int64', 'description': 'Creation timestamp of the event.'}, 'enginePersisted': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the event was first assessed.'}, 'firstEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'firstNotified': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the case association with the event.'}, 'lastEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'lastUpdated': {'type': 'integer', 'format': 'int64', 'description': 'Last update timestamp of the event (only for aggregated events).'}}}, 'type': {'type': 'string', 'description': 'Enumerated type of the event.', 'enum': ['aggregated', 'raw']}, 'uri': {'type': 'string', 'description': 'URI associated with the event.'}, 'uuid': {'type': 'string', 'format': 'uuid', 'description': 'UUID of the event.'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
get_event_compatibility = {'tags': ['events/v2'], 'summary': 'Fetches corresponding event (by compatibility path) (DEV)', 'description': '', 'operationId': 'getEventV2Compatibility', 'parameters': [{'name': 'type', 'in': 'path', 'description': 'Event type (ignored, provided for path compatibility)', 'required': True, 'schema': {'type': 'str', 'pattern': '(AGGR|NIDS|RAW)'}, 'type': 'str', 'pattern': '(AGGR|NIDS|RAW)'}, {'name': 'timestamp', 'in': 'path', 'description': 'Event timestamp', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'customerID', 'in': 'path', 'description': 'Customer ID', 'required': True, 'schema': {'type': 'int', 'minimum': 1}, 'type': 'int', 'minimum': 1}, {'name': 'eventID', 'in': 'path', 'description': 'Event ID', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}, {'name': 'includeAllProperties', 'in': 'query', 'description': 'Whether to include all properties', 'schema': {'type': 'bool', 'default': 'false'}, 'type': 'bool', 'default': 'false'}, {'name': 'includeComments', 'in': 'query', 'description': 'Whether to include comments', 'schema': {'type': 'bool', 'default': 'false'}, 'type': 'bool', 'default': 'false'}, {'name': 'includeSubEvents', 'in': 'query', 'description': 'Whether to include sub-event IDs', 'schema': {'type': 'bool', 'default': 'false'}, 'type': 'bool', 'default': 'false'}, {'name': 'includeProperties', 'in': 'query', 'description': 'Which properties to include in the response (if includeAllProperties=false) => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'pattern': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*', 'uniqueItems': True}], 'responses': {'default': {'description': 'Fetches corresponding event (by compatibility path)', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'alarm': {'type': 'object', 'description': 'Alarm associated with the event.', 'properties': {'description': {'type': 'string', 'description': 'Short description about the alarm.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the alarm.'}, 'shortName': {'type': 'string', 'description': 'Short name of the alarm.'}}}, 'associatedCases': {'type': 'array', 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'object', 'description': 'Cases associated with the event (only available for aggregate events).', 'properties': {'categoryID': {'type': 'integer', 'format': 'int64', 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'string', 'description': 'Category name of the case.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the associated case.'}, 'priority': {'type': 'string', 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}, 'serviceID': {'type': 'integer', 'format': 'int64', 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'string', 'description': 'Service name of the case.'}, 'status': {'type': 'string', 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'subject': {'type': 'string', 'description': 'Subject of the case.'}}}}, 'attackCategory': {'type': 'object', 'description': 'Attack category associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the attack category.'}, 'name': {'type': 'string', 'description': 'Name of the attack category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the attack category.'}}}, 'comments': {'type': 'array', 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'object', 'description': 'If requested, contains the comments added to the event.', 'properties': {'comment': {'type': 'string', 'description': 'Contents of the comment.'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the comment was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'count': {'type': 'integer', 'format': 'int32', 'description': 'Count of aggregate events, always 1 for raw events'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'destination': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'domain': {'type': 'string', 'description': 'Fully qualified domain name associated with the event.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the event.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the event.', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'id': {'type': 'string', 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'location': {'type': 'object', 'description': 'Location associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the location.'}, 'name': {'type': 'string', 'description': 'Name of the location.'}, 'shortName': {'type': 'string', 'description': 'Short name of the location.'}}}, 'properties': {'type': 'array', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'items': {'type': 'object', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'properties': {'key': {'type': 'string', 'description': 'Key of the property.'}, 'type': {'type': 'string', 'description': 'Enumerated type of the property.', 'enum': ['boolean', 'long', 'string', 'double']}, 'values': {'type': 'array', 'description': 'Value(s) of the property.', 'items': {'type': 'string', 'description': 'Value(s) of the property.'}}}}, 'uniqueItems': True}, 'protocol': {'type': 'string', 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'sensor': {'type': 'object', 'description': 'Sensor that registered the event.', 'properties': {'hostName': {'type': 'string', 'description': 'Host name of the device.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the device.'}, 'ip': {'type': 'string', 'description': 'IP address of the device.'}}}, 'severity': {'type': 'string', 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'signature': {'type': 'object', 'description': 'Signature associated with the event.', 'properties': {'name': {'type': 'string', 'description': 'Name/ID of the signature.'}}}, 'source': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'subEvents': {'type': 'array', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'items': {'type': 'string', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).'}, 'uniqueItems': True}, 'timestamps': {'type': 'object', 'description': 'Various timestamps associated with the event', 'properties': {'created': {'type': 'integer', 'format': 'int64', 'description': 'Creation timestamp of the event.'}, 'enginePersisted': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the event was first assessed.'}, 'firstEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'firstNotified': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the case association with the event.'}, 'lastEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'lastUpdated': {'type': 'integer', 'format': 'int64', 'description': 'Last update timestamp of the event (only for aggregated events).'}}}, 'type': {'type': 'string', 'description': 'Enumerated type of the event.', 'enum': ['aggregated', 'raw']}, 'uri': {'type': 'string', 'description': 'URI associated with the event.'}, 'uuid': {'type': 'string', 'format': 'uuid', 'description': 'UUID of the event.'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
get_event_links = {'tags': ['events/v2'], 'summary': 'Fetches links of the corresponding event (DEV)', 'description': '', 'operationId': 'getEventV2Links', 'parameters': [{'name': 'timestamp', 'in': 'path', 'description': 'Event timestamp', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'customerID', 'in': 'path', 'description': 'Customer ID', 'required': True, 'schema': {'type': 'int', 'minimum': 1}, 'type': 'int', 'minimum': 1}, {'name': 'eventID', 'in': 'path', 'description': 'Event ID', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Fetches links of the corresponding event', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'uri': {'type': 'string'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
get_event_links_compatibility = {'tags': ['events/v2'], 'summary': 'Fetches links of the corresponding event (DEV)', 'description': '', 'operationId': 'getEventV2LinksCompatibility', 'parameters': [{'name': 'type', 'in': 'path', 'description': 'Event type', 'required': True, 'schema': {'type': 'str', 'enum': ['RAW', 'AGGR'], 'pattern': '(AGGR|RAW)'}, 'type': 'str', 'enum': ['RAW', 'AGGR'], 'pattern': '(AGGR|RAW)'}, {'name': 'timestamp', 'in': 'path', 'description': 'Event timestamp', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'customerID', 'in': 'path', 'description': 'Customer ID', 'required': True, 'schema': {'type': 'int', 'minimum': 1}, 'type': 'int', 'minimum': 1}, {'name': 'eventID', 'in': 'path', 'description': 'Event ID', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Fetches links of the corresponding event', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'uri': {'type': 'string'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
get_event_statistics = {'tags': ['events/v2'], 'summary': 'Generate the requested statistics for events matching the provided search criteria. (DEV)', 'description': '', 'operationId': 'getEventStatistics', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'description': 'Request for creating aggregated statistics for an event', 'properties': {'associatedCase': {'type': 'list', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n', 'items': {'type': 'int', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attack': {'type': 'list', 'description': 'Restrict search to events matching these attack criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Attack criteria limit search depending on the attack that triggered the event.\nThe fields in one AttackCriteria are AND-ed together\n', 'properties': {'alarm': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'signature': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these signatures', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these signatures'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'customer': {'type': 'list', 'description': 'Which customers to search for events for. Search by id or short name', 'items': {'type': 'str', 'description': 'Which customers to search for events for. Search by id or short name'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'domain': {'type': 'list', 'description': 'Restrict search to events with one of these domains set', 'items': {'type': 'str', 'description': 'Restrict search to events with one of these domains set'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'description': 'Restrict search to data before this time (epoch millis)\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'endpoint': {'type': 'list', 'description': 'Restrict search to events with endpoints matching these criteria\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Endpoint criteria limit search depending on the endpoints of the event.\nThe fields in one EndpointCriteria are AND-ed together\n', 'properties': {'countryCode': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code'}, 'uniqueItems': True}, 'endpointFieldStrategy': {'type': 'str', 'default': 'all', 'description': 'Restrict the criterion to match with endpoints of this type', 'enum': ['source', 'destination', 'all']}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'excludeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'ip': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n [format:ip]', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'minMaskBits': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints where the mask bits on the IP no wider than this'}, 'port': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with one of these ports', 'items': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints with one of these ports'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'eventIdentifier': {'type': 'list', 'description': 'Which event identifiers to search for', 'items': {'type': 'str', 'description': 'Which event identifiers to search for'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'excludeFlag': {'type': 'list', 'description': 'Restrict search to events with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with NONE of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'groupBy': {'type': 'list', 'description': 'The list of fields to group by\nThe order in the list will determine the hierarchy of the aggregations and their buckets.\n', 'items': {'type': 'dict', 'description': 'An GroupByCriteria represents which fields to aggregate statistics on', 'properties': {'field': {'type': 'str', 'description': 'The field to group by', 'enum': ['signature', 'attackCategory', 'alarm', 'location', 'severity', 'sourceIP', 'destinationIP', 'protocol', 'customer', 'sourceCountry', 'destinationCountry', 'associatedCase']}, 'includeOthers': {'type': 'bool', 'description': 'If true, one of the buckets will be the "other" bucket, which contains the count of the events not in the specified buckets\nThe other bucket will not have the rawEventCount field populated\n'}, 'limit': {'type': 'int', 'description': 'The maximum number of groups to return'}}, 'required': ['field']}}, 'includeFlag': {'type': 'list', 'description': 'Restrict search to events with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with ALL of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'productionCustomers': {'type': 'bool', 'description': "Restricts the search to customers that either are, or are not in production.\nIf null we don't filter (default)\nIf true we only return production customers\nIf false, we exclude all production customers\n"}, 'property': {'type': 'list', 'description': 'Restrict search to events with properties matching these criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query.\n', 'items': {'type': 'dict', 'description': 'Property criteria limit search depending on the properties that are set on the event.\n', 'properties': {'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'key': {'type': 'str', 'description': 'The key of the property to search for. If the search will look for the value in any property'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'value': {'type': 'list', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key', 'items': {'type': 'str', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'valueMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'The strategy for deciding if the criteria matches the values', 'enum': ['any', 'all']}, 'valueSearchStrategy': {'type': 'str', 'default': 'exact', 'description': 'The strategy for deciding if the value matches the property', 'enum': ['tokenized', 'exact']}}, 'required': ['valueMatchStrategy', 'valueSearchStrategy']}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'severity': {'type': 'list', 'description': 'Which severities to search for', 'items': {'type': 'str', 'description': 'Which severities to search for', 'enum': ['low', 'medium', 'high', 'critical']}, 'uniqueItems': True}, 'startTimestamp': {'type': 'str', 'description': 'Restrict search to data after this time.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'subCriteria': {'type': 'list', 'description': 'The set of sub criteria to add to the search', 'items': {'type': 'dict', 'description': 'Sub-criteria allow constructing advanced queries with inclusions and exclusions', 'properties': {'associatedCase': {'type': 'list', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n', 'items': {'type': 'int', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attack': {'type': 'list', 'description': 'Restrict search to events matching these attack criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Attack criteria limit search depending on the attack that triggered the event.\nThe fields in one AttackCriteria are AND-ed together\n', 'properties': {'alarm': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'signature': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these signatures', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these signatures'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'customer': {'type': 'list', 'description': 'Which customers to search for events for. Search by id or short name', 'items': {'type': 'str', 'description': 'Which customers to search for events for. Search by id or short name'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'domain': {'type': 'list', 'description': 'Restrict search to events with one of these domains set', 'items': {'type': 'str', 'description': 'Restrict search to events with one of these domains set'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'description': 'Restrict search to data before this time (epoch millis)\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'endpoint': {'type': 'list', 'description': 'Restrict search to events with endpoints matching these criteria\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Endpoint criteria limit search depending on the endpoints of the event.\nThe fields in one EndpointCriteria are AND-ed together\n', 'properties': {'countryCode': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code'}, 'uniqueItems': True}, 'endpointFieldStrategy': {'type': 'str', 'default': 'all', 'description': 'Restrict the criterion to match with endpoints of this type', 'enum': ['source', 'destination', 'all']}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'excludeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'ip': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n [format:ip]', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'minMaskBits': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints where the mask bits on the IP no wider than this'}, 'port': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with one of these ports', 'items': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints with one of these ports'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'eventIdentifier': {'type': 'list', 'description': 'Which event identifiers to search for', 'items': {'type': 'str', 'description': 'Which event identifiers to search for'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this sub criterion'}, 'excludeFlag': {'type': 'list', 'description': 'Restrict search to events with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with NONE of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict search to events with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with ALL of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'productionCustomers': {'type': 'bool', 'description': "Restricts the search to customers that either are, or are not in production.\nIf null we don't filter (default)\nIf true we only return production customers\nIf false, we exclude all production customers\n"}, 'property': {'type': 'list', 'description': 'Restrict search to events with properties matching these criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query.\n', 'items': {'type': 'dict', 'description': 'Property criteria limit search depending on the properties that are set on the event.\n', 'properties': {'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'key': {'type': 'str', 'description': 'The key of the property to search for. If the search will look for the value in any property'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'value': {'type': 'list', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key', 'items': {'type': 'str', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'valueMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'The strategy for deciding if the criteria matches the values', 'enum': ['any', 'all']}, 'valueSearchStrategy': {'type': 'str', 'default': 'exact', 'description': 'The strategy for deciding if the value matches the property', 'enum': ['tokenized', 'exact']}}, 'required': ['valueMatchStrategy', 'valueSearchStrategy']}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this sub criterion.\nIf false the search only needs to match at least one sub criterion.\n'}, 'severity': {'type': 'list', 'description': 'Which severities to search for', 'items': {'type': 'str', 'description': 'Which severities to search for', 'enum': ['low', 'medium', 'high', 'critical']}, 'uniqueItems': True}, 'startTimestamp': {'type': 'str', 'description': 'Restrict search to data after this time.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'timeFieldStrategy': {'type': 'list', 'description': 'Which time fields to search for', 'items': {'type': 'str', 'description': 'Which time fields to search for', 'enum': ['created', 'lastUpdated', 'firstAssessment', 'enginePersisted', 'firstEvent', 'lastEvent', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Which time match strategy to use. Defaults to matching if any', 'enum': ['any', 'all']}, 'type': 'list'}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'timeFieldStrategy': {'type': 'list', 'description': 'Which time fields to search for', 'items': {'type': 'str', 'description': 'Which time fields to search for', 'enum': ['created', 'lastUpdated', 'firstAssessment', 'enginePersisted', 'firstEvent', 'lastEvent', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Which time match strategy to use. Defaults to matching if any', 'enum': ['any', 'all']}, 'timeline': {'type': 'list', 'description': 'The set of time range metrics used to create histogram buckets\n', 'items': {'type': 'dict', 'description': 'Request for statistics for events filtered by a time range', 'properties': {'endTimestamp': {'type': 'str', 'description': 'Filter by this max value. Defaults to NOW  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'field': {'type': 'str', 'description': 'The field aggregated on to create the time range aggregation', 'enum': ['created', 'lastUpdated', 'firstAssessment', 'enginePersisted', 'firstEvent', 'lastEvent']}, 'includeEmpty': {'type': 'bool', 'default': True, 'description': 'Whether to return temporal buckets for the entire range regardless of whether they contain values'}, 'name': {'type': 'str', 'description': 'The name for this aggregation. Must be unique for the parent statistics request.\nThe name is used to identify the range aggregation in the result set.\n', 'pattern': '[a-zA-Z0-9_:\\-\\.]*'}, 'resolution': {'type': 'str', 'description': 'The temporal resolution by which to sub-aggregate the range metric', 'enum': ['minutes', 'hours', 'days', 'weeks', 'months', 'years']}, 'startTimestamp': {'type': 'str', 'default': '0', 'description': 'Filter the by this min value. Defaults to 0 i.e. 1970-01-01.  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}}, 'required': ['field', 'name', 'resolution']}, 'uniqueItems': True}, 'type': {'type': 'list', 'description': 'Restrict search to of events of this type. If nothing is specified we will return all types', 'items': {'type': 'str', 'description': 'Restrict search to of events of this type. If nothing is specified we will return all types', 'enum': ['aggregated', 'raw']}, 'uniqueItems': True}}}}}, 'required': True}, 'responses': {'default': {'description': 'Generate the requested statistics for events matching the provided search criteria.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'description': 'Container for statistics about events', 'properties': {'buckets': {'type': 'array', 'description': 'Metric buckets below this level', 'items': {'type': 'object', 'description': 'Container for statistics about events', 'properties': {'buckets': {'type': 'array', 'description': 'Metric buckets below this level', 'items': []}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'The number of events contained within this record sharing the same metadata'}, 'group': {'type': 'object', 'description': 'A statistics field group', 'properties': {'displayName': {'type': 'string', 'description': "The aggregation container's display name."}, 'identifier': {'type': 'string', 'description': "The aggregation container's identifier e.g. id or enum value"}, 'shortName': {'type': 'string', 'description': "The aggregation container's shortName. Depending on the type of metadata can also be used to retrieve the full object."}, 'type': {'type': 'string', 'description': "The aggregation container's type", 'enum': ['signature', 'attackCategory', 'alarm', 'location', 'severity', 'sourceIP', 'destinationIP', 'protocol', 'customer', 'sourceCountry', 'destinationCountry', 'associatedCase']}}}, 'rawEventCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of raw events found within this record sharing the same metadata'}, 'timeline': {'type': 'array', 'description': 'Time range metrics for the requested fields. Only ever found at the bottom of the bucket hierarchy.', 'items': {'type': 'object', 'description': 'Metric representing the number of documents that matched the timestamp filter for a given time field\ne.g. events created within the last 2 weeks\n', 'properties': {'buckets': {'type': 'array', 'description': 'The histogram buckets', 'items': {'type': 'object', 'description': 'A timeline histogram bucket', 'properties': {'count': {'type': 'integer', 'format': 'int64', 'description': 'The number of events in the bucket'}, 'rawEventCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of raw events in the bucket, i.e. the sum of the count of the events in the bucket'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The start timestamp of the bucket'}}}}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'The number of events contained within this record sharing the same metadata'}, 'name': {'type': 'string', 'description': 'The name for this aggregation. It will match the one defined in the EventTimelineCriteria'}, 'rawEventCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of raw events found within this record sharing the same metadata'}}}, 'uniqueItems': True}}}}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'The number of events contained within this record sharing the same metadata'}, 'group': {'type': 'object', 'description': 'A statistics field group', 'properties': {'displayName': {'type': 'string', 'description': "The aggregation container's display name."}, 'identifier': {'type': 'string', 'description': "The aggregation container's identifier e.g. id or enum value"}, 'shortName': {'type': 'string', 'description': "The aggregation container's shortName. Depending on the type of metadata can also be used to retrieve the full object."}, 'type': {'type': 'string', 'description': "The aggregation container's type", 'enum': ['signature', 'attackCategory', 'alarm', 'location', 'severity', 'sourceIP', 'destinationIP', 'protocol', 'customer', 'sourceCountry', 'destinationCountry', 'associatedCase']}}}, 'rawEventCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of raw events found within this record sharing the same metadata'}, 'timeline': {'type': 'array', 'description': 'Time range metrics for the requested fields. Only ever found at the bottom of the bucket hierarchy.', 'items': {'type': 'object', 'description': 'Metric representing the number of documents that matched the timestamp filter for a given time field\ne.g. events created within the last 2 weeks\n', 'properties': {'buckets': {'type': 'array', 'description': 'The histogram buckets', 'items': {'type': 'object', 'description': 'A timeline histogram bucket', 'properties': {'count': {'type': 'integer', 'format': 'int64', 'description': 'The number of events in the bucket'}, 'rawEventCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of raw events in the bucket, i.e. the sum of the count of the events in the bucket'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'The start timestamp of the bucket'}}}}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'The number of events contained within this record sharing the same metadata'}, 'name': {'type': 'string', 'description': 'The name for this aggregation. It will match the one defined in the EventTimelineCriteria'}, 'rawEventCount': {'type': 'integer', 'format': 'int64', 'description': 'The number of raw events found within this record sharing the same metadata'}}}, 'uniqueItems': True}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
get_payload = {'tags': ['events/v2'], 'summary': 'Fetch specified event payload (DEV)', 'description': '', 'operationId': 'getPayloadV2', 'parameters': [{'name': 'timestamp', 'in': 'path', 'description': 'Event timestamp', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'customerID', 'in': 'path', 'description': 'Customer ID', 'required': True, 'schema': {'type': 'int', 'minimum': 1}, 'type': 'int', 'minimum': 1}, {'name': 'eventID', 'in': 'path', 'description': 'Unique UUID for the event', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Fetch specified event payload', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'A payload response.\nThis response contains the event id used to fetch the payload, the payloads type, and the actual payload.\n', 'properties': {'id': {'type': 'string', 'description': 'The ID of the event the payload was fetched for. The actual payload may belong to sub events'}, 'payload': {'type': 'string', 'description': 'Payload string (may be base64-encoded binary, depending on type)'}, 'type': {'type': 'string', 'description': 'The type of the payload', 'enum': ['ethernet', 'binary', 'string', 'pcap']}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
get_payload_compatibility = {'tags': ['events/v2'], 'summary': ' Fetch specified event payload. This variant accepts a type parameter which is not used but should make it easier to paste in AGGR-ids from the v1 api. (DEV)', 'description': '', 'operationId': 'getPayloadV2Compatibility', 'parameters': [{'name': 'type', 'in': 'path', 'description': 'Event type (ignored, provided for path compatibility)', 'required': True, 'schema': {'type': 'str', 'pattern': '(AGGR|NIDS|RAW)'}, 'type': 'str', 'pattern': '(AGGR|NIDS|RAW)'}, {'name': 'timestamp', 'in': 'path', 'description': 'Event timestamp', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'customerID', 'in': 'path', 'description': 'Customer ID', 'required': True, 'schema': {'type': 'int', 'minimum': 1}, 'type': 'int', 'minimum': 1}, {'name': 'eventID', 'in': 'path', 'description': 'Unique UUID for the event', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': '  Fetch specified event payload. This variant accepts a type parameter which is not used\n  but should make it easier to paste in AGGR-ids from the v1 api.\n', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'A payload response.\nThis response contains the event id used to fetch the payload, the payloads type, and the actual payload.\n', 'properties': {'id': {'type': 'string', 'description': 'The ID of the event the payload was fetched for. The actual payload may belong to sub events'}, 'payload': {'type': 'string', 'description': 'Payload string (may be base64-encoded binary, depending on type)'}, 'type': {'type': 'string', 'description': 'The type of the payload', 'enum': ['ethernet', 'binary', 'string', 'pcap']}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
get_pcap = {'tags': ['events/v2'], 'summary': 'Fetch specified event payload as PCAP (DEV)', 'description': '', 'operationId': 'getPCAPV2', 'parameters': [{'name': 'timestamp', 'in': 'path', 'description': 'Event timestamp', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'customerID', 'in': 'path', 'description': 'Customer ID', 'required': True, 'schema': {'type': 'int', 'minimum': 1}, 'type': 'int', 'minimum': 1}, {'name': 'eventID', 'in': 'path', 'description': 'Unique UUID for the event', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Fetch specified event payload as PCAP', 'content': {'application/x-pcap': {}}}, '401': {'description': 'Authentication failed', 'content': {'application/x-pcap': {}}}, '403': {'description': 'Access denied', 'content': {'application/x-pcap': {}}}, '404': {'description': 'Object not found', 'content': {'application/x-pcap': {}}}, '412': {'description': 'Validation failed', 'content': {'application/x-pcap': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
get_pcap_compatibility = {'tags': ['events/v2'], 'summary': 'Fetch specified event payload as PCAP. This variant accepts a type parameter which is not used but should make it easier to paste in AGGR-ids from the v1 api. (DEV)', 'description': '', 'operationId': 'getPCAPV2Compatibility', 'parameters': [{'name': 'type', 'in': 'path', 'description': 'Event type (ignored, provided for path compatibility)', 'required': True, 'schema': {'type': 'str', 'pattern': '(AGGR|NIDS|RAW)'}, 'type': 'str', 'pattern': '(AGGR|NIDS|RAW)'}, {'name': 'timestamp', 'in': 'path', 'description': 'Event timestamp', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'customerID', 'in': 'path', 'description': 'Customer ID', 'required': True, 'schema': {'type': 'int', 'minimum': 1}, 'type': 'int', 'minimum': 1}, {'name': 'eventID', 'in': 'path', 'description': 'Unique UUID for the event', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}], 'responses': {'default': {'description': 'Fetch specified event payload as PCAP. This variant accepts a type parameter which is not used\nbut should make it easier to paste in AGGR-ids from the v1 api.\n', 'content': {'application/x-pcap': {}}}, '401': {'description': 'Authentication failed', 'content': {'application/x-pcap': {}}}, '403': {'description': 'Access denied', 'content': {'application/x-pcap': {}}}, '404': {'description': 'Object not found', 'content': {'application/x-pcap': {}}}, '412': {'description': 'Validation failed', 'content': {'application/x-pcap': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
list_event_lineage = {'tags': ['events/v2'], 'summary': 'Fetches the lineage of an event (DEV)', 'description': '', 'operationId': 'listEventV2Lineage', 'parameters': [{'name': 'timestamp', 'in': 'path', 'description': 'Event timestamp', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'customerID', 'in': 'path', 'description': 'Customer ID', 'required': True, 'schema': {'type': 'int', 'minimum': 1}, 'type': 'int', 'minimum': 1}, {'name': 'eventID', 'in': 'path', 'description': 'Event ID', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}, {'name': 'sortBy', 'in': 'query', 'description': 'List of properties to sort by (prefix with "-" to sort descending)\nOnly accepts createdTimestamp and -createdTimestamp\nIf no value is given, it defaults to sorting by createdTimestamp descending\n', 'schema': {'type': 'list', 'items': {'type': 'string'}}, 'type': 'list', 'items': {'type': 'string'}}, {'name': 'limit', 'in': 'query', 'description': 'The max number of events to return', 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'The offset of the search', 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}], 'responses': {'default': {'description': 'Fetches the lineage of an event', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp the change event was created'}, 'dataCenter': {'type': 'string', 'description': 'The data center the change event was performed in', 'enum': ['osl', 'svg']}, 'description': {'type': 'string', 'description': 'A description of the change event'}, 'eventLastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The lastUpdatedTimestamp of the event when the change was performed'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the lineage event'}, 'type': {'type': 'string', 'description': 'The type of the change event', 'enum': ['created', 'updated', 'assessed', 'indexedElasticSearch', 'indexedOpenSearch']}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
list_event_lineage_compatibility = {'tags': ['events/v2'], 'summary': 'Fetches the lineage of an event (DEV)', 'description': '', 'operationId': 'listEventV2LineageCompatibility', 'parameters': [{'name': 'timestamp', 'in': 'path', 'description': 'Event timestamp', 'required': True, 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'customerID', 'in': 'path', 'description': 'Customer ID', 'required': True, 'schema': {'type': 'int', 'minimum': 1}, 'type': 'int', 'minimum': 1}, {'name': 'eventID', 'in': 'path', 'description': 'Event ID', 'required': True, 'schema': {'type': 'str'}, 'type': 'str'}, {'name': 'sortBy', 'in': 'query', 'description': 'List of properties to sort by (prefix with "-" to sort descending)\nOnly accepts createdTimestamp and -createdTimestamp\nIf no value is given, it defaults to sorting by createdTimestamp descending\n', 'schema': {'type': 'list', 'items': {'type': 'string'}}, 'type': 'list', 'items': {'type': 'string'}}, {'name': 'limit', 'in': 'query', 'description': 'The max number of events to return', 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'The offset of the search', 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}], 'responses': {'default': {'description': 'Fetches the lineage of an event', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'createdByUser': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}, 'createdTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The timestamp the change event was created'}, 'dataCenter': {'type': 'string', 'description': 'The data center the change event was performed in', 'enum': ['osl', 'svg']}, 'description': {'type': 'string', 'description': 'A description of the change event'}, 'eventLastUpdatedTimestamp': {'type': 'integer', 'format': 'int64', 'description': 'The lastUpdatedTimestamp of the event when the change was performed'}, 'id': {'type': 'string', 'format': 'uuid', 'description': 'ID of the lineage event'}, 'type': {'type': 'string', 'description': 'The type of the change event', 'enum': ['created', 'updated', 'assessed', 'indexedElasticSearch', 'indexedOpenSearch']}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '404': {'description': 'Object not found', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
list_events = {'tags': ['events/v2'], 'summary': 'Simple search for events (DEV)', 'description': '', 'operationId': 'listEvents', 'parameters': [{'name': 'Accept', 'in': 'header', 'schema': {'type': 'string'}}, {'name': 'type', 'in': 'query', 'description': 'Limit to events of this type', 'schema': {'type': 'list', 'items': {'type': 'str', 'enum': ['aggregated', 'raw']}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'str', 'enum': ['aggregated', 'raw']}, 'uniqueItems': True}, {'name': 'customer', 'in': 'query', 'description': 'Limit to customer', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'signature', 'in': 'query', 'description': 'Limit to signature', 'schema': {'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, 'type': 'list', 'items': {'type': 'string'}, 'uniqueItems': True}, {'name': 'startTimestamp', 'in': 'query', 'description': 'Only look for events after this timestamp', 'schema': {'type': 'int'}, 'type': 'int'}, {'name': 'endTimestamp', 'in': 'query', 'description': 'Only look for events before this timestamp', 'schema': {'type': 'int'}, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'description': 'The max number of events to return', 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'The offset of the search', 'schema': {'type': 'int', 'minimum': 0}, 'type': 'int', 'minimum': 0}], 'responses': {'default': {'description': 'Simple search for events', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'alarm': {'type': 'object', 'description': 'Alarm associated with the event.', 'properties': {'description': {'type': 'string', 'description': 'Short description about the alarm.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the alarm.'}, 'shortName': {'type': 'string', 'description': 'Short name of the alarm.'}}}, 'associatedCases': {'type': 'array', 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'object', 'description': 'Cases associated with the event (only available for aggregate events).', 'properties': {'categoryID': {'type': 'integer', 'format': 'int64', 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'string', 'description': 'Category name of the case.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the associated case.'}, 'priority': {'type': 'string', 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}, 'serviceID': {'type': 'integer', 'format': 'int64', 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'string', 'description': 'Service name of the case.'}, 'status': {'type': 'string', 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'subject': {'type': 'string', 'description': 'Subject of the case.'}}}}, 'attackCategory': {'type': 'object', 'description': 'Attack category associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the attack category.'}, 'name': {'type': 'string', 'description': 'Name of the attack category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the attack category.'}}}, 'comments': {'type': 'array', 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'object', 'description': 'If requested, contains the comments added to the event.', 'properties': {'comment': {'type': 'string', 'description': 'Contents of the comment.'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the comment was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'count': {'type': 'integer', 'format': 'int32', 'description': 'Count of aggregate events, always 1 for raw events'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'destination': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'domain': {'type': 'string', 'description': 'Fully qualified domain name associated with the event.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the event.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the event.', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'id': {'type': 'string', 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'location': {'type': 'object', 'description': 'Location associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the location.'}, 'name': {'type': 'string', 'description': 'Name of the location.'}, 'shortName': {'type': 'string', 'description': 'Short name of the location.'}}}, 'properties': {'type': 'array', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'items': {'type': 'object', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'properties': {'key': {'type': 'string', 'description': 'Key of the property.'}, 'type': {'type': 'string', 'description': 'Enumerated type of the property.', 'enum': ['boolean', 'long', 'string', 'double']}, 'values': {'type': 'array', 'description': 'Value(s) of the property.', 'items': {'type': 'string', 'description': 'Value(s) of the property.'}}}}, 'uniqueItems': True}, 'protocol': {'type': 'string', 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'sensor': {'type': 'object', 'description': 'Sensor that registered the event.', 'properties': {'hostName': {'type': 'string', 'description': 'Host name of the device.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the device.'}, 'ip': {'type': 'string', 'description': 'IP address of the device.'}}}, 'severity': {'type': 'string', 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'signature': {'type': 'object', 'description': 'Signature associated with the event.', 'properties': {'name': {'type': 'string', 'description': 'Name/ID of the signature.'}}}, 'source': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'subEvents': {'type': 'array', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'items': {'type': 'string', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).'}, 'uniqueItems': True}, 'timestamps': {'type': 'object', 'description': 'Various timestamps associated with the event', 'properties': {'created': {'type': 'integer', 'format': 'int64', 'description': 'Creation timestamp of the event.'}, 'enginePersisted': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the event was first assessed.'}, 'firstEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'firstNotified': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the case association with the event.'}, 'lastEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'lastUpdated': {'type': 'integer', 'format': 'int64', 'description': 'Last update timestamp of the event (only for aggregated events).'}}}, 'type': {'type': 'string', 'description': 'Enumerated type of the event.', 'enum': ['aggregated', 'raw']}, 'uri': {'type': 'string', 'description': 'URI associated with the event.'}, 'uuid': {'type': 'string', 'format': 'uuid', 'description': 'UUID of the event.'}}}}}}}, 'text/csv': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'alarm': {'type': 'object', 'description': 'Alarm associated with the event.', 'properties': {'description': {'type': 'string', 'description': 'Short description about the alarm.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the alarm.'}, 'shortName': {'type': 'string', 'description': 'Short name of the alarm.'}}}, 'associatedCases': {'type': 'array', 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'object', 'description': 'Cases associated with the event (only available for aggregate events).', 'properties': {'categoryID': {'type': 'integer', 'format': 'int64', 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'string', 'description': 'Category name of the case.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the associated case.'}, 'priority': {'type': 'string', 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}, 'serviceID': {'type': 'integer', 'format': 'int64', 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'string', 'description': 'Service name of the case.'}, 'status': {'type': 'string', 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'subject': {'type': 'string', 'description': 'Subject of the case.'}}}}, 'attackCategory': {'type': 'object', 'description': 'Attack category associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the attack category.'}, 'name': {'type': 'string', 'description': 'Name of the attack category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the attack category.'}}}, 'comments': {'type': 'array', 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'object', 'description': 'If requested, contains the comments added to the event.', 'properties': {'comment': {'type': 'string', 'description': 'Contents of the comment.'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the comment was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'count': {'type': 'integer', 'format': 'int32', 'description': 'Count of aggregate events, always 1 for raw events'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'destination': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'domain': {'type': 'string', 'description': 'Fully qualified domain name associated with the event.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the event.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the event.', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'id': {'type': 'string', 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'location': {'type': 'object', 'description': 'Location associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the location.'}, 'name': {'type': 'string', 'description': 'Name of the location.'}, 'shortName': {'type': 'string', 'description': 'Short name of the location.'}}}, 'properties': {'type': 'array', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'items': {'type': 'object', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'properties': {'key': {'type': 'string', 'description': 'Key of the property.'}, 'type': {'type': 'string', 'description': 'Enumerated type of the property.', 'enum': ['boolean', 'long', 'string', 'double']}, 'values': {'type': 'array', 'description': 'Value(s) of the property.', 'items': {'type': 'string', 'description': 'Value(s) of the property.'}}}}, 'uniqueItems': True}, 'protocol': {'type': 'string', 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'sensor': {'type': 'object', 'description': 'Sensor that registered the event.', 'properties': {'hostName': {'type': 'string', 'description': 'Host name of the device.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the device.'}, 'ip': {'type': 'string', 'description': 'IP address of the device.'}}}, 'severity': {'type': 'string', 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'signature': {'type': 'object', 'description': 'Signature associated with the event.', 'properties': {'name': {'type': 'string', 'description': 'Name/ID of the signature.'}}}, 'source': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'subEvents': {'type': 'array', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'items': {'type': 'string', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).'}, 'uniqueItems': True}, 'timestamps': {'type': 'object', 'description': 'Various timestamps associated with the event', 'properties': {'created': {'type': 'integer', 'format': 'int64', 'description': 'Creation timestamp of the event.'}, 'enginePersisted': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the event was first assessed.'}, 'firstEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'firstNotified': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the case association with the event.'}, 'lastEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'lastUpdated': {'type': 'integer', 'format': 'int64', 'description': 'Last update timestamp of the event (only for aggregated events).'}}}, 'type': {'type': 'string', 'description': 'Enumerated type of the event.', 'enum': ['aggregated', 'raw']}, 'uri': {'type': 'string', 'description': 'URI associated with the event.'}, 'uuid': {'type': 'string', 'format': 'uuid', 'description': 'UUID of the event.'}}}}}}}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'alarm': {'type': 'object', 'description': 'Alarm associated with the event.', 'properties': {'description': {'type': 'string', 'description': 'Short description about the alarm.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the alarm.'}, 'shortName': {'type': 'string', 'description': 'Short name of the alarm.'}}}, 'associatedCases': {'type': 'array', 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'object', 'description': 'Cases associated with the event (only available for aggregate events).', 'properties': {'categoryID': {'type': 'integer', 'format': 'int64', 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'string', 'description': 'Category name of the case.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the associated case.'}, 'priority': {'type': 'string', 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}, 'serviceID': {'type': 'integer', 'format': 'int64', 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'string', 'description': 'Service name of the case.'}, 'status': {'type': 'string', 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'subject': {'type': 'string', 'description': 'Subject of the case.'}}}}, 'attackCategory': {'type': 'object', 'description': 'Attack category associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the attack category.'}, 'name': {'type': 'string', 'description': 'Name of the attack category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the attack category.'}}}, 'comments': {'type': 'array', 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'object', 'description': 'If requested, contains the comments added to the event.', 'properties': {'comment': {'type': 'string', 'description': 'Contents of the comment.'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the comment was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'count': {'type': 'integer', 'format': 'int32', 'description': 'Count of aggregate events, always 1 for raw events'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'destination': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'domain': {'type': 'string', 'description': 'Fully qualified domain name associated with the event.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the event.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the event.', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'id': {'type': 'string', 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'location': {'type': 'object', 'description': 'Location associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the location.'}, 'name': {'type': 'string', 'description': 'Name of the location.'}, 'shortName': {'type': 'string', 'description': 'Short name of the location.'}}}, 'properties': {'type': 'array', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'items': {'type': 'object', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'properties': {'key': {'type': 'string', 'description': 'Key of the property.'}, 'type': {'type': 'string', 'description': 'Enumerated type of the property.', 'enum': ['boolean', 'long', 'string', 'double']}, 'values': {'type': 'array', 'description': 'Value(s) of the property.', 'items': {'type': 'string', 'description': 'Value(s) of the property.'}}}}, 'uniqueItems': True}, 'protocol': {'type': 'string', 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'sensor': {'type': 'object', 'description': 'Sensor that registered the event.', 'properties': {'hostName': {'type': 'string', 'description': 'Host name of the device.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the device.'}, 'ip': {'type': 'string', 'description': 'IP address of the device.'}}}, 'severity': {'type': 'string', 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'signature': {'type': 'object', 'description': 'Signature associated with the event.', 'properties': {'name': {'type': 'string', 'description': 'Name/ID of the signature.'}}}, 'source': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'subEvents': {'type': 'array', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'items': {'type': 'string', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).'}, 'uniqueItems': True}, 'timestamps': {'type': 'object', 'description': 'Various timestamps associated with the event', 'properties': {'created': {'type': 'integer', 'format': 'int64', 'description': 'Creation timestamp of the event.'}, 'enginePersisted': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the event was first assessed.'}, 'firstEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'firstNotified': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the case association with the event.'}, 'lastEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'lastUpdated': {'type': 'integer', 'format': 'int64', 'description': 'Last update timestamp of the event (only for aggregated events).'}}}, 'type': {'type': 'string', 'description': 'Enumerated type of the event.', 'enum': ['aggregated', 'raw']}, 'uri': {'type': 'string', 'description': 'URI associated with the event.'}, 'uuid': {'type': 'string', 'format': 'uuid', 'description': 'UUID of the event.'}}}}}}}, 'application/jsonl': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'alarm': {'type': 'object', 'description': 'Alarm associated with the event.', 'properties': {'description': {'type': 'string', 'description': 'Short description about the alarm.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the alarm.'}, 'shortName': {'type': 'string', 'description': 'Short name of the alarm.'}}}, 'associatedCases': {'type': 'array', 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'object', 'description': 'Cases associated with the event (only available for aggregate events).', 'properties': {'categoryID': {'type': 'integer', 'format': 'int64', 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'string', 'description': 'Category name of the case.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the associated case.'}, 'priority': {'type': 'string', 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}, 'serviceID': {'type': 'integer', 'format': 'int64', 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'string', 'description': 'Service name of the case.'}, 'status': {'type': 'string', 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'subject': {'type': 'string', 'description': 'Subject of the case.'}}}}, 'attackCategory': {'type': 'object', 'description': 'Attack category associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the attack category.'}, 'name': {'type': 'string', 'description': 'Name of the attack category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the attack category.'}}}, 'comments': {'type': 'array', 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'object', 'description': 'If requested, contains the comments added to the event.', 'properties': {'comment': {'type': 'string', 'description': 'Contents of the comment.'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the comment was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'count': {'type': 'integer', 'format': 'int32', 'description': 'Count of aggregate events, always 1 for raw events'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'destination': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'domain': {'type': 'string', 'description': 'Fully qualified domain name associated with the event.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the event.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the event.', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'id': {'type': 'string', 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'location': {'type': 'object', 'description': 'Location associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the location.'}, 'name': {'type': 'string', 'description': 'Name of the location.'}, 'shortName': {'type': 'string', 'description': 'Short name of the location.'}}}, 'properties': {'type': 'array', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'items': {'type': 'object', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'properties': {'key': {'type': 'string', 'description': 'Key of the property.'}, 'type': {'type': 'string', 'description': 'Enumerated type of the property.', 'enum': ['boolean', 'long', 'string', 'double']}, 'values': {'type': 'array', 'description': 'Value(s) of the property.', 'items': {'type': 'string', 'description': 'Value(s) of the property.'}}}}, 'uniqueItems': True}, 'protocol': {'type': 'string', 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'sensor': {'type': 'object', 'description': 'Sensor that registered the event.', 'properties': {'hostName': {'type': 'string', 'description': 'Host name of the device.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the device.'}, 'ip': {'type': 'string', 'description': 'IP address of the device.'}}}, 'severity': {'type': 'string', 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'signature': {'type': 'object', 'description': 'Signature associated with the event.', 'properties': {'name': {'type': 'string', 'description': 'Name/ID of the signature.'}}}, 'source': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'subEvents': {'type': 'array', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'items': {'type': 'string', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).'}, 'uniqueItems': True}, 'timestamps': {'type': 'object', 'description': 'Various timestamps associated with the event', 'properties': {'created': {'type': 'integer', 'format': 'int64', 'description': 'Creation timestamp of the event.'}, 'enginePersisted': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the event was first assessed.'}, 'firstEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'firstNotified': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the case association with the event.'}, 'lastEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'lastUpdated': {'type': 'integer', 'format': 'int64', 'description': 'Last update timestamp of the event (only for aggregated events).'}}}, 'type': {'type': 'string', 'description': 'Enumerated type of the event.', 'enum': ['aggregated', 'raw']}, 'uri': {'type': 'string', 'description': 'URI associated with the event.'}, 'uuid': {'type': 'string', 'format': 'uuid', 'description': 'UUID of the event.'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}, 'application/jsonl': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}, 'application/jsonl': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}, 'application/jsonl': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
reindex_events = {'tags': ['events/v2'], 'summary': 'Reindexes a set of events into the search engine (INTERNAL)', 'description': '', 'operationId': 'reindexEvents', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'eventID': {'type': 'list', 'description': 'The events that should be reindexed. The set should contain event IDs on the Argus EventID format, e.g. AGGR/10000/1/8bf1732c-f845-409a-8425-8fad3b5007ab.\nIf one of the IDs is malformed, or does not match an event you have access to the request will fail.\n', 'items': {'type': 'str', 'description': 'The events that should be reindexed. The set should contain event IDs on the Argus EventID format, e.g. AGGR/10000/1/8bf1732c-f845-409a-8425-8fad3b5007ab.\nIf one of the IDs is malformed, or does not match an event you have access to the request will fail.\n'}, 'minItems': 1, 'uniqueItems': True}}}}}, 'required': True}, 'responses': {'default': {'description': 'Reindexes a set of events into the search engine', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'count': {'type': 'integer', 'format': 'int64', 'description': 'The number of reindex-ed events'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['reindexEvent'], 'x-Argus-ApiStatus': 'INTERNAL'}
search_events = {'tags': ['events/v2'], 'summary': 'Searches for events (DEV)', 'description': '', 'operationId': 'searchEvents', 'parameters': [{'name': 'Accept', 'in': 'header', 'schema': {'type': 'string'}}], 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'associatedCase': {'type': 'list', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n', 'items': {'type': 'int', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attack': {'type': 'list', 'description': 'Restrict search to events matching these attack criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Attack criteria limit search depending on the attack that triggered the event.\nThe fields in one AttackCriteria are AND-ed together\n', 'properties': {'alarm': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'signature': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these signatures', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these signatures'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'customer': {'type': 'list', 'description': 'Which customers to search for events for. Search by id or short name', 'items': {'type': 'str', 'description': 'Which customers to search for events for. Search by id or short name'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'domain': {'type': 'list', 'description': 'Restrict search to events with one of these domains set', 'items': {'type': 'str', 'description': 'Restrict search to events with one of these domains set'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'description': 'Restrict search to data before this time (epoch millis)\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'endpoint': {'type': 'list', 'description': 'Restrict search to events with endpoints matching these criteria\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Endpoint criteria limit search depending on the endpoints of the event.\nThe fields in one EndpointCriteria are AND-ed together\n', 'properties': {'countryCode': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code'}, 'uniqueItems': True}, 'endpointFieldStrategy': {'type': 'str', 'default': 'all', 'description': 'Restrict the criterion to match with endpoints of this type', 'enum': ['source', 'destination', 'all']}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'excludeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'ip': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n [format:ip]', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'minMaskBits': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints where the mask bits on the IP no wider than this'}, 'port': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with one of these ports', 'items': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints with one of these ports'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'eventIdentifier': {'type': 'list', 'description': 'Which event identifiers to search for', 'items': {'type': 'str', 'description': 'Which event identifiers to search for'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'excludeFlag': {'type': 'list', 'description': 'Restrict search to events with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with NONE of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'includeAllProperties': {'type': 'bool', 'default': False, 'description': "Whether to include all properties (overrides the selection of 'includeProperties' if set to true)."}, 'includeComments': {'type': 'bool', 'default': False, 'description': 'Whether to include comments.'}, 'includeFlag': {'type': 'list', 'description': 'Restrict search to events with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with ALL of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'includeProperties': {'type': 'list', 'description': 'Which properties to include (if includeAllProperties=false).', 'items': {'type': 'str', 'description': 'Which properties to include (if includeAllProperties=false).'}, 'uniqueItems': True}, 'includeSubEvents': {'type': 'bool', 'default': False, 'description': "Whether to include sub-events' IDs (only for aggregated events)."}, 'indexEndTimestamp': {'type': 'str', 'description': 'Only search in indexes before or on this day.\nDefaults to current day.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'indexStartTimestamp': {'type': 'str', 'description': 'Only search in indexes after or on this day.\nDefaults to current day.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'limit': {'type': 'int', 'default': 25, 'description': 'Limit the results to the specified amount. If set to 0 we will stream all results matching the query'}, 'offset': {'type': 'int', 'default': 0, 'description': 'Skip specified amount of results'}, 'productionCustomers': {'type': 'bool', 'description': "Restricts the search to customers that either are, or are not in production.\nIf null we don't filter (default)\nIf true we only return production customers\nIf false, we exclude all production customers\n"}, 'property': {'type': 'list', 'description': 'Restrict search to events with properties matching these criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query.\n', 'items': {'type': 'dict', 'description': 'Property criteria limit search depending on the properties that are set on the event.\n', 'properties': {'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'key': {'type': 'str', 'description': 'The key of the property to search for. If the search will look for the value in any property'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'value': {'type': 'list', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key', 'items': {'type': 'str', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'valueMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'The strategy for deciding if the criteria matches the values', 'enum': ['any', 'all']}, 'valueSearchStrategy': {'type': 'str', 'default': 'exact', 'description': 'The strategy for deciding if the value matches the property', 'enum': ['tokenized', 'exact']}}, 'required': ['valueMatchStrategy', 'valueSearchStrategy']}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'severity': {'type': 'list', 'description': 'Which severities to search for', 'items': {'type': 'str', 'description': 'Which severities to search for', 'enum': ['low', 'medium', 'high', 'critical']}, 'uniqueItems': True}, 'sortBy': {'type': 'list', 'description': 'Which field(s) by which to sort the results', 'items': {'type': 'str', 'description': 'Which field(s) by which to sort the results', 'enum': ['customerID', 'eventID', 'createdTimestamp', 'lastUpdatedTimestamp', 'firstEventTimestamp', 'lastEventTimestamp', '-customerID', '-eventID', '-createdTimestamp', '-lastUpdatedTimestamp', '-firstEventTimestamp', '-lastEventTimestamp']}}, 'startTimestamp': {'type': 'str', 'description': 'Restrict search to data after this time.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'subCriteria': {'type': 'list', 'description': 'The set of sub criteria to add to the search', 'items': {'type': 'dict', 'description': 'Sub-criteria allow constructing advanced queries with inclusions and exclusions', 'properties': {'associatedCase': {'type': 'list', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n', 'items': {'type': 'int', 'description': 'Restrict search to events associated to cases with these IDs.\nNOTE: Searching for ID 0 will return events that are not associated to any cases.\n'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attack': {'type': 'list', 'description': 'Restrict search to events matching these attack criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Attack criteria limit search depending on the attack that triggered the event.\nThe fields in one AttackCriteria are AND-ed together\n', 'properties': {'alarm': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these alarms( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'attackCategory': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these attack categories( id or short name)'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'signature': {'type': 'list', 'description': 'Restricts the search to events triggered by one of these signatures', 'items': {'type': 'str', 'description': 'Restricts the search to events triggered by one of these signatures'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'customer': {'type': 'list', 'description': 'Which customers to search for events for. Search by id or short name', 'items': {'type': 'str', 'description': 'Which customers to search for events for. Search by id or short name'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'domain': {'type': 'list', 'description': 'Restrict search to events with one of these domains set', 'items': {'type': 'str', 'description': 'Restrict search to events with one of these domains set'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'endTimestamp': {'type': 'str', 'description': 'Restrict search to data before this time (epoch millis)\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'endpoint': {'type': 'list', 'description': 'Restrict search to events with endpoints matching these criteria\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query\n', 'items': {'type': 'dict', 'description': 'Endpoint criteria limit search depending on the endpoints of the event.\nThe fields in one EndpointCriteria are AND-ed together\n', 'properties': {'countryCode': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints located in one of these countries, specified by county code'}, 'uniqueItems': True}, 'endpointFieldStrategy': {'type': 'str', 'default': 'all', 'description': 'Restrict the criterion to match with endpoints of this type', 'enum': ['source', 'destination', 'all']}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'excludeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with NONE of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints with ALL of these flags set', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'ip': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n [format:ip]', 'items': {'type': 'str', 'description': 'Restrict the criterion to match with endpoints covered by one of these IPs\nYou can use CIDR notation to specify ip networks\n'}, 'uniqueItems': True, 'x-Argus-Format': 'ip'}, 'minMaskBits': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints where the mask bits on the IP no wider than this'}, 'port': {'type': 'list', 'description': 'Restrict the criterion to match with endpoints with one of these ports', 'items': {'type': 'int', 'description': 'Restrict the criterion to match with endpoints with one of these ports'}, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'eventIdentifier': {'type': 'list', 'description': 'Which event identifiers to search for', 'items': {'type': 'str', 'description': 'Which event identifiers to search for'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this sub criterion'}, 'excludeFlag': {'type': 'list', 'description': 'Restrict search to events with NONE of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with NONE of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'includeFlag': {'type': 'list', 'description': 'Restrict search to events with ALL of these flags set', 'items': {'type': 'str', 'description': 'Restrict search to events with ALL of these flags set', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'productionCustomers': {'type': 'bool', 'description': "Restricts the search to customers that either are, or are not in production.\nIf null we don't filter (default)\nIf true we only return production customers\nIf false, we exclude all production customers\n"}, 'property': {'type': 'list', 'description': 'Restrict search to events with properties matching these criteria.\nThese criteria follow sub request logic, which means that they are by default OR-ed together,\nbut will be AND-ed together if you set required=true.\nYou can also use exclude=true to match on the negation of the query.\n', 'items': {'type': 'dict', 'description': 'Property criteria limit search depending on the properties that are set on the event.\n', 'properties': {'exclude': {'type': 'bool', 'default': False, 'description': 'Exclude events that match this criterion'}, 'key': {'type': 'str', 'description': 'The key of the property to search for. If the search will look for the value in any property'}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this criterion.\nIf false the search only needs to match at least one criterion.\n'}, 'value': {'type': 'list', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key', 'items': {'type': 'str', 'description': 'The value of the property to search for. If not set, we will look for the presence of the key'}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'valueMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'The strategy for deciding if the criteria matches the values', 'enum': ['any', 'all']}, 'valueSearchStrategy': {'type': 'str', 'default': 'exact', 'description': 'The strategy for deciding if the value matches the property', 'enum': ['tokenized', 'exact']}}, 'required': ['valueMatchStrategy', 'valueSearchStrategy']}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'required': {'type': 'bool', 'default': False, 'description': 'Require that events match this sub criterion.\nIf false the search only needs to match at least one sub criterion.\n'}, 'severity': {'type': 'list', 'description': 'Which severities to search for', 'items': {'type': 'str', 'description': 'Which severities to search for', 'enum': ['low', 'medium', 'high', 'critical']}, 'uniqueItems': True}, 'startTimestamp': {'type': 'str', 'description': 'Restrict search to data after this time.\nTimestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details\n  Allows to specify a unix timestamp (milliseconds), ISO timestamp, or relative time.', 'externalDocs': {'description': 'See documentation', 'url': 'https://docs.mnemonic.no/api/general_integration_guide/08-time_fields.html#api-iguide-general-time-search'}}, 'timeFieldStrategy': {'type': 'list', 'description': 'Which time fields to search for', 'items': {'type': 'str', 'description': 'Which time fields to search for', 'enum': ['created', 'lastUpdated', 'firstAssessment', 'enginePersisted', 'firstEvent', 'lastEvent', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Which time match strategy to use. Defaults to matching if any', 'enum': ['any', 'all']}, 'type': 'list'}}, 'maxItems': 10000, 'minItems': 0, 'uniqueItems': True}, 'timeFieldStrategy': {'type': 'list', 'description': 'Which time fields to search for', 'items': {'type': 'str', 'description': 'Which time fields to search for', 'enum': ['created', 'lastUpdated', 'firstAssessment', 'enginePersisted', 'firstEvent', 'lastEvent', 'all']}, 'uniqueItems': True}, 'timeMatchStrategy': {'type': 'str', 'default': 'any', 'description': 'Which time match strategy to use. Defaults to matching if any', 'enum': ['any', 'all']}, 'type': {'type': 'list', 'description': 'Restrict search to of events of this type. If nothing is specified we will return all types', 'items': {'type': 'str', 'description': 'Restrict search to of events of this type. If nothing is specified we will return all types', 'enum': ['aggregated', 'raw']}, 'uniqueItems': True}}}}}, 'required': True}, 'responses': {'default': {'description': 'Searches for events', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'alarm': {'type': 'object', 'description': 'Alarm associated with the event.', 'properties': {'description': {'type': 'string', 'description': 'Short description about the alarm.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the alarm.'}, 'shortName': {'type': 'string', 'description': 'Short name of the alarm.'}}}, 'associatedCases': {'type': 'array', 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'object', 'description': 'Cases associated with the event (only available for aggregate events).', 'properties': {'categoryID': {'type': 'integer', 'format': 'int64', 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'string', 'description': 'Category name of the case.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the associated case.'}, 'priority': {'type': 'string', 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}, 'serviceID': {'type': 'integer', 'format': 'int64', 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'string', 'description': 'Service name of the case.'}, 'status': {'type': 'string', 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'subject': {'type': 'string', 'description': 'Subject of the case.'}}}}, 'attackCategory': {'type': 'object', 'description': 'Attack category associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the attack category.'}, 'name': {'type': 'string', 'description': 'Name of the attack category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the attack category.'}}}, 'comments': {'type': 'array', 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'object', 'description': 'If requested, contains the comments added to the event.', 'properties': {'comment': {'type': 'string', 'description': 'Contents of the comment.'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the comment was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'count': {'type': 'integer', 'format': 'int32', 'description': 'Count of aggregate events, always 1 for raw events'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'destination': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'domain': {'type': 'string', 'description': 'Fully qualified domain name associated with the event.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the event.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the event.', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'id': {'type': 'string', 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'location': {'type': 'object', 'description': 'Location associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the location.'}, 'name': {'type': 'string', 'description': 'Name of the location.'}, 'shortName': {'type': 'string', 'description': 'Short name of the location.'}}}, 'properties': {'type': 'array', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'items': {'type': 'object', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'properties': {'key': {'type': 'string', 'description': 'Key of the property.'}, 'type': {'type': 'string', 'description': 'Enumerated type of the property.', 'enum': ['boolean', 'long', 'string', 'double']}, 'values': {'type': 'array', 'description': 'Value(s) of the property.', 'items': {'type': 'string', 'description': 'Value(s) of the property.'}}}}, 'uniqueItems': True}, 'protocol': {'type': 'string', 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'sensor': {'type': 'object', 'description': 'Sensor that registered the event.', 'properties': {'hostName': {'type': 'string', 'description': 'Host name of the device.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the device.'}, 'ip': {'type': 'string', 'description': 'IP address of the device.'}}}, 'severity': {'type': 'string', 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'signature': {'type': 'object', 'description': 'Signature associated with the event.', 'properties': {'name': {'type': 'string', 'description': 'Name/ID of the signature.'}}}, 'source': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'subEvents': {'type': 'array', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'items': {'type': 'string', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).'}, 'uniqueItems': True}, 'timestamps': {'type': 'object', 'description': 'Various timestamps associated with the event', 'properties': {'created': {'type': 'integer', 'format': 'int64', 'description': 'Creation timestamp of the event.'}, 'enginePersisted': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the event was first assessed.'}, 'firstEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'firstNotified': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the case association with the event.'}, 'lastEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'lastUpdated': {'type': 'integer', 'format': 'int64', 'description': 'Last update timestamp of the event (only for aggregated events).'}}}, 'type': {'type': 'string', 'description': 'Enumerated type of the event.', 'enum': ['aggregated', 'raw']}, 'uri': {'type': 'string', 'description': 'URI associated with the event.'}, 'uuid': {'type': 'string', 'format': 'uuid', 'description': 'UUID of the event.'}}}}}}}, 'text/csv': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'alarm': {'type': 'object', 'description': 'Alarm associated with the event.', 'properties': {'description': {'type': 'string', 'description': 'Short description about the alarm.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the alarm.'}, 'shortName': {'type': 'string', 'description': 'Short name of the alarm.'}}}, 'associatedCases': {'type': 'array', 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'object', 'description': 'Cases associated with the event (only available for aggregate events).', 'properties': {'categoryID': {'type': 'integer', 'format': 'int64', 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'string', 'description': 'Category name of the case.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the associated case.'}, 'priority': {'type': 'string', 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}, 'serviceID': {'type': 'integer', 'format': 'int64', 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'string', 'description': 'Service name of the case.'}, 'status': {'type': 'string', 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'subject': {'type': 'string', 'description': 'Subject of the case.'}}}}, 'attackCategory': {'type': 'object', 'description': 'Attack category associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the attack category.'}, 'name': {'type': 'string', 'description': 'Name of the attack category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the attack category.'}}}, 'comments': {'type': 'array', 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'object', 'description': 'If requested, contains the comments added to the event.', 'properties': {'comment': {'type': 'string', 'description': 'Contents of the comment.'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the comment was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'count': {'type': 'integer', 'format': 'int32', 'description': 'Count of aggregate events, always 1 for raw events'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'destination': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'domain': {'type': 'string', 'description': 'Fully qualified domain name associated with the event.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the event.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the event.', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'id': {'type': 'string', 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'location': {'type': 'object', 'description': 'Location associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the location.'}, 'name': {'type': 'string', 'description': 'Name of the location.'}, 'shortName': {'type': 'string', 'description': 'Short name of the location.'}}}, 'properties': {'type': 'array', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'items': {'type': 'object', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'properties': {'key': {'type': 'string', 'description': 'Key of the property.'}, 'type': {'type': 'string', 'description': 'Enumerated type of the property.', 'enum': ['boolean', 'long', 'string', 'double']}, 'values': {'type': 'array', 'description': 'Value(s) of the property.', 'items': {'type': 'string', 'description': 'Value(s) of the property.'}}}}, 'uniqueItems': True}, 'protocol': {'type': 'string', 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'sensor': {'type': 'object', 'description': 'Sensor that registered the event.', 'properties': {'hostName': {'type': 'string', 'description': 'Host name of the device.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the device.'}, 'ip': {'type': 'string', 'description': 'IP address of the device.'}}}, 'severity': {'type': 'string', 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'signature': {'type': 'object', 'description': 'Signature associated with the event.', 'properties': {'name': {'type': 'string', 'description': 'Name/ID of the signature.'}}}, 'source': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'subEvents': {'type': 'array', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'items': {'type': 'string', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).'}, 'uniqueItems': True}, 'timestamps': {'type': 'object', 'description': 'Various timestamps associated with the event', 'properties': {'created': {'type': 'integer', 'format': 'int64', 'description': 'Creation timestamp of the event.'}, 'enginePersisted': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the event was first assessed.'}, 'firstEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'firstNotified': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the case association with the event.'}, 'lastEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'lastUpdated': {'type': 'integer', 'format': 'int64', 'description': 'Last update timestamp of the event (only for aggregated events).'}}}, 'type': {'type': 'string', 'description': 'Enumerated type of the event.', 'enum': ['aggregated', 'raw']}, 'uri': {'type': 'string', 'description': 'URI associated with the event.'}, 'uuid': {'type': 'string', 'format': 'uuid', 'description': 'UUID of the event.'}}}}}}}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'alarm': {'type': 'object', 'description': 'Alarm associated with the event.', 'properties': {'description': {'type': 'string', 'description': 'Short description about the alarm.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the alarm.'}, 'shortName': {'type': 'string', 'description': 'Short name of the alarm.'}}}, 'associatedCases': {'type': 'array', 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'object', 'description': 'Cases associated with the event (only available for aggregate events).', 'properties': {'categoryID': {'type': 'integer', 'format': 'int64', 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'string', 'description': 'Category name of the case.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the associated case.'}, 'priority': {'type': 'string', 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}, 'serviceID': {'type': 'integer', 'format': 'int64', 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'string', 'description': 'Service name of the case.'}, 'status': {'type': 'string', 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'subject': {'type': 'string', 'description': 'Subject of the case.'}}}}, 'attackCategory': {'type': 'object', 'description': 'Attack category associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the attack category.'}, 'name': {'type': 'string', 'description': 'Name of the attack category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the attack category.'}}}, 'comments': {'type': 'array', 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'object', 'description': 'If requested, contains the comments added to the event.', 'properties': {'comment': {'type': 'string', 'description': 'Contents of the comment.'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the comment was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'count': {'type': 'integer', 'format': 'int32', 'description': 'Count of aggregate events, always 1 for raw events'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'destination': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'domain': {'type': 'string', 'description': 'Fully qualified domain name associated with the event.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the event.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the event.', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'id': {'type': 'string', 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'location': {'type': 'object', 'description': 'Location associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the location.'}, 'name': {'type': 'string', 'description': 'Name of the location.'}, 'shortName': {'type': 'string', 'description': 'Short name of the location.'}}}, 'properties': {'type': 'array', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'items': {'type': 'object', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'properties': {'key': {'type': 'string', 'description': 'Key of the property.'}, 'type': {'type': 'string', 'description': 'Enumerated type of the property.', 'enum': ['boolean', 'long', 'string', 'double']}, 'values': {'type': 'array', 'description': 'Value(s) of the property.', 'items': {'type': 'string', 'description': 'Value(s) of the property.'}}}}, 'uniqueItems': True}, 'protocol': {'type': 'string', 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'sensor': {'type': 'object', 'description': 'Sensor that registered the event.', 'properties': {'hostName': {'type': 'string', 'description': 'Host name of the device.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the device.'}, 'ip': {'type': 'string', 'description': 'IP address of the device.'}}}, 'severity': {'type': 'string', 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'signature': {'type': 'object', 'description': 'Signature associated with the event.', 'properties': {'name': {'type': 'string', 'description': 'Name/ID of the signature.'}}}, 'source': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'subEvents': {'type': 'array', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'items': {'type': 'string', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).'}, 'uniqueItems': True}, 'timestamps': {'type': 'object', 'description': 'Various timestamps associated with the event', 'properties': {'created': {'type': 'integer', 'format': 'int64', 'description': 'Creation timestamp of the event.'}, 'enginePersisted': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the event was first assessed.'}, 'firstEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'firstNotified': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the case association with the event.'}, 'lastEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'lastUpdated': {'type': 'integer', 'format': 'int64', 'description': 'Last update timestamp of the event (only for aggregated events).'}}}, 'type': {'type': 'string', 'description': 'Enumerated type of the event.', 'enum': ['aggregated', 'raw']}, 'uri': {'type': 'string', 'description': 'URI associated with the event.'}, 'uuid': {'type': 'string', 'format': 'uuid', 'description': 'UUID of the event.'}}}}}}}, 'application/jsonl': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'array', 'items': {'type': 'object', 'properties': {'alarm': {'type': 'object', 'description': 'Alarm associated with the event.', 'properties': {'description': {'type': 'string', 'description': 'Short description about the alarm.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the alarm.'}, 'shortName': {'type': 'string', 'description': 'Short name of the alarm.'}}}, 'associatedCases': {'type': 'array', 'description': 'Cases associated with the event (only available for aggregate events).', 'items': {'type': 'object', 'description': 'Cases associated with the event (only available for aggregate events).', 'properties': {'categoryID': {'type': 'integer', 'format': 'int64', 'description': 'Category ID of the case.'}, 'categoryName': {'type': 'string', 'description': 'Category name of the case.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the associated case.'}, 'priority': {'type': 'string', 'description': 'Priority of the case.', 'enum': ['low', 'medium', 'high', 'critical']}, 'serviceID': {'type': 'integer', 'format': 'int64', 'description': 'Service ID of the case.'}, 'serviceName': {'type': 'string', 'description': 'Service name of the case.'}, 'status': {'type': 'string', 'description': 'Status of the case.', 'enum': ['closed', 'pendingClose', 'pendingCustomer', 'pendingSoc', 'pendingVendor', 'workingCustomer', 'workingSoc']}, 'subject': {'type': 'string', 'description': 'Subject of the case.'}}}}, 'attackCategory': {'type': 'object', 'description': 'Attack category associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the attack category.'}, 'name': {'type': 'string', 'description': 'Name of the attack category.'}, 'shortName': {'type': 'string', 'description': 'Short name of the attack category.'}}}, 'comments': {'type': 'array', 'description': 'If requested, contains the comments added to the event.', 'items': {'type': 'object', 'description': 'If requested, contains the comments added to the event.', 'properties': {'comment': {'type': 'string', 'description': 'Contents of the comment.'}, 'timestamp': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the comment was created.'}, 'user': {'type': 'object', 'description': 'SPI UserInfo', 'properties': {'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'flags': {'type': 'array', 'description': "The subject's flags", 'items': {'type': 'string', 'description': "The subject's flags", 'enum': ['deleted']}, 'uniqueItems': True}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': "The subject's name"}, 'shortName': {'type': 'string', 'description': "The subject's short name"}, 'type': {'type': 'string', 'description': 'Type of the subject', 'enum': ['user', 'group'], 'readOnly': True}}}}}}, 'count': {'type': 'integer', 'format': 'int32', 'description': 'Count of aggregate events, always 1 for raw events'}, 'customer': {'type': 'object', 'description': 'SPI CustomerInfo', 'properties': {'domain': {'type': 'object', 'description': 'SPI DomainInfo', 'properties': {'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the domain.'}}}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the response object.'}, 'name': {'type': 'string', 'description': 'Name of the customer.'}, 'shortName': {'type': 'string', 'description': 'Shortname of the customer.'}}}, 'destination': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'domain': {'type': 'string', 'description': 'Fully qualified domain name associated with the event.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the event.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the event.', 'enum': ['established', 'blocked', 'partiallyBlocked', 'snapshot', 'finalized', 'falsePositive', 'notAThreat', 'tuningCandidate', 'notified', 'notifiedUnpublished', 'notifiedDeleted', 'followup', 'partiallyNotified', 'identifiedThreat', 'threatCandidate', 'acknowledged', 'partiallyAcknowledged', 'severityAdjusted', 'commented', 'filtered', 'checked', 'incompleteDetails', 'aggregatedBaseEvent', 'remoteStorage', 'hasDetails', 'hasPayload', 'hasPcap', 'associatedToCaseByFilter', 'severityIncreasedByFilter', 'severityReducedByFilter', 'createdByAnalysisFilter', 'extendEventTtl', 'initialTuning', 'postAnalysis', 'partialSslTerminated', 'sslTerminated', 'autoReport', 'missingTimestamp', 'clockOutOfSync', 'dropAnalysis', 'escalatedByReputation', 'hasSample', 'storeEvent', 'storeAggregated', 'handledByAnalyst', 'slaViolation', 'payloadTruncated', 'hasStringPayload', 'reassessed', 'eventFromOtEnvironment', 'eventFromRestrictedItEnvironment']}, 'uniqueItems': True}, 'id': {'type': 'string', 'description': 'Compatibility ID of the event (<type>/<timestamp>/<customerID>/<uuid>).'}, 'location': {'type': 'object', 'description': 'Location associated with the event.', 'properties': {'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the location.'}, 'name': {'type': 'string', 'description': 'Name of the location.'}, 'shortName': {'type': 'string', 'description': 'Short name of the location.'}}}, 'properties': {'type': 'array', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'items': {'type': 'object', 'description': 'If requested, contains a a filtered or full set of properties of the event.', 'properties': {'key': {'type': 'string', 'description': 'Key of the property.'}, 'type': {'type': 'string', 'description': 'Enumerated type of the property.', 'enum': ['boolean', 'long', 'string', 'double']}, 'values': {'type': 'array', 'description': 'Value(s) of the property.', 'items': {'type': 'string', 'description': 'Value(s) of the property.'}}}}, 'uniqueItems': True}, 'protocol': {'type': 'string', 'description': 'Enumerated Internet protocol of the event.', 'enum': ['tcp', 'udp', 'icmp', 'ip', 'esp', 'unknown']}, 'sensor': {'type': 'object', 'description': 'Sensor that registered the event.', 'properties': {'hostName': {'type': 'string', 'description': 'Host name of the device.'}, 'id': {'type': 'integer', 'format': 'int64', 'description': 'ID of the device.'}, 'ip': {'type': 'string', 'description': 'IP address of the device.'}}}, 'severity': {'type': 'string', 'description': 'Enumerated severity of the event.', 'enum': ['low', 'medium', 'high', 'critical']}, 'signature': {'type': 'object', 'description': 'Signature associated with the event.', 'properties': {'name': {'type': 'string', 'description': 'Name/ID of the signature.'}}}, 'source': {'type': 'object', 'description': 'Destination endpoint of the event.', 'properties': {'address': {'type': 'string', 'description': 'IP address of the endpoint.'}, 'flags': {'type': 'array', 'description': 'Enumerated flags describing the features of the endpoint.', 'items': {'type': 'string', 'description': 'Enumerated flags describing the features of the endpoint.', 'enum': ['isCustomerNet', 'isPartialCustomerNet', 'customAggregation', 'isManagedBySoc']}, 'uniqueItems': True}, 'geoInfo': {'type': 'object', 'description': 'Geo-location info of this endpoint.', 'properties': {'countryCode': {'type': 'string', 'description': 'Two-letter code of the country where this location is in.'}, 'countryName': {'type': 'string', 'description': 'Name of the country where this location is in.'}, 'latitude': {'type': 'number', 'format': 'double', 'description': 'Geographic latitude of the location.'}, 'locationName': {'type': 'string', 'description': 'Name of the location.'}, 'longitude': {'type': 'number', 'format': 'double', 'description': 'Geographic longitude of the location.'}}}, 'host': {'type': 'string', 'description': 'Host name of the endpoint.'}, 'port': {'type': 'integer', 'format': 'int32', 'description': 'UDP or TCP port of the endpoint (0 - 65535).'}, 'user': {'type': 'string', 'description': 'User associated with this endpoint.'}}}, 'subEvents': {'type': 'array', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).', 'items': {'type': 'string', 'description': 'If requested, contains the IDs of the events that the aggregated event consists of (null for raw events).'}, 'uniqueItems': True}, 'timestamps': {'type': 'object', 'description': 'Various timestamps associated with the event', 'properties': {'created': {'type': 'integer', 'format': 'int64', 'description': 'Creation timestamp of the event.'}, 'enginePersisted': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the engine persisted the event.'}, 'firstAssessed': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp when the event was first assessed.'}, 'firstEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the first observed event (only for aggregated events).'}, 'firstNotified': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the case association with the event.'}, 'lastEvent': {'type': 'integer', 'format': 'int64', 'description': 'Timestamp of the last observed event (only for aggregated events).'}, 'lastUpdated': {'type': 'integer', 'format': 'int64', 'description': 'Last update timestamp of the event (only for aggregated events).'}}}, 'type': {'type': 'string', 'description': 'Enumerated type of the event.', 'enum': ['aggregated', 'raw']}, 'uri': {'type': 'string', 'description': 'URI associated with the event.'}, 'uuid': {'type': 'string', 'format': 'uuid', 'description': 'UUID of the event.'}}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}, 'application/jsonl': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}, 'application/jsonl': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}, 'text/csv': {}, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {}, 'application/jsonl': {}}}}, 'x-Argus-Required-Permissions': ['eventLookup'], 'x-Argus-ApiStatus': 'DEV'}
submit_events = {'tags': ['events/v2'], 'summary': 'Submit event to central storage. (INTERNAL)', 'description': 'This is a collector API, which will collect and enqueue the events for central storage.When this endpoint returns, the service guarantees that the events are validated and safely received for transport and storage. However, the services makes no guarantees for when the events will be searchable from the search endpoints.\n\nValidated events are enqueued for storage; the response will not indicate whether the event has been inserted or updated. Writing to an event ID (type/timestamp/customerID/UUID) of an existing event, will update/append the existing event with changed fields, and add flags/properties.\n\nIf an event attempts to update an existing event which is marked as FINALIZED, the update will be ignored, even if this endpoint accepts the event.', 'operationId': 'submitEvents', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'id': {'type': 'dict', 'properties': {'customer': {'type': 'string'}, 'customerDomain': {'type': 'string'}, 'timestamp': {'type': 'int'}, 'type': 'str', 'uuid': {'type': 'str'}, 'options': ['raw', 'aggregated']}}, 'startTimestamp': {'type': 'int'}, 'endTimestamp': {'type': 'int'}, 'signature': {'type': 'str', 'description': 'Event signature. If set, the system will automatically assign alarm and attack category based on this value.'}, 'severity': {'type': 'str', 'description': 'Event severity. When creating a new event, the default severity is low.', 'enum': ['low', 'medium', 'high', 'critical']}, 'count': {'type': 'int', 'description': 'Number of occurrences this event represents. The value must be at least 1, which is the default.'}, 'location': {'type': 'str', 'description': 'The sensor location (id or shortname) where this event was observed. If set, this location must be resolvable for the current user, and must either belong to the same customer as this event, or be a global location.'}, 'protocol': {'type': 'str', 'description': 'The protocol id or well-known name. Numeric protocol ID must be between 0 and 255. Protocol name must be well known (icmp, tcp, udp, esp, ah)'}, 'source': {'type': 'dict', 'properties': {'ip': {'type': 'str', 'description': 'IPv4 or IPv6 address (host or CIDR notation).'}, 'port': {'type': 'int', 'description': 'UDP or TCP port (0 - 65535).'}, 'user': {'type': 'str', 'description': 'Username or identifier.'}, 'host': {'type': 'str', 'description': 'Hostname or identifier.'}, 'geoLocation': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'description': '2-letter country code.'}, 'geoLocationID': {'type': 'int', 'description': 'MaxMind geolocation ID.'}, 'latitude': {'type': 'float', 'description': 'Latitude for location coordinates', 'maximum': 90, 'minimum': -90}, 'longitude': {'type': 'float', 'description': 'Longitude for location coordinates', 'maximum': 180, 'minimum': -180}}}}}, 'destination': {'type': 'dict', 'properties': {'ip': {'type': 'str', 'description': 'IPv4 or IPv6 address (host or CIDR notation).'}, 'port': {'type': 'int', 'description': 'UDP or TCP port (0 - 65535).'}, 'user': {'type': 'str', 'description': 'Username or identifier.'}, 'host': {'type': 'str', 'description': 'Hostname or identifier.'}, 'geoLocation': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'description': '2-letter country code.'}, 'geoLocationID': {'type': 'int', 'description': 'MaxMind geolocation ID.'}, 'latitude': {'type': 'float', 'description': 'Latitude for location coordinates', 'maximum': 90, 'minimum': -90}, 'longitude': {'type': 'float', 'description': 'Longitude for location coordinates', 'maximum': 180, 'minimum': -180}}}}}, 'flags': {'type': 'list', 'description': 'Event flags requested by the client for this event. On updating an existing event, existing flags will be retained, and flags in the update will be added.\nFlags that have a PARTIAL flag have custom handling. If FINALIZED flag is set, additional updates to this event will be ignored.\n', 'items': {'type': 'str', 'description': 'Event flags requested by the client for this event. On updating an existing event, existing flags will be retained, and flags in the update will be added.\nFlags that have a PARTIAL flag have custom handling. If FINALIZED flag is set, additional updates to this event will be ignored.\n', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'HAS_DETAILS', 'HAS_PAYLOAD', 'HAS_PCAP', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED', 'SOURCE_IS_MANAGED_BY_SOC', 'DESTINATION_IS_MANAGED_BY_SOC', 'SLA_VIOLATION', 'HANDLED_BY_ANALYST', 'PAYLOAD_TRUNCATED', 'HAS_STRING_PAYLOAD', 'REASSESSED', 'EVENT_FROM_OT_ENVIRONMENT', 'EVENT_FROM_RESTRICTED_IT_ENVIRONMENT']}, 'uniqueItems': True}, 'properties': {'type': 'dict', 'additionalProperties': {'type': 'list', 'description': 'Custom properties for this event. Each property key may have multiple values.\nOn updating an existing event, setting an existing property will overwrite existing value.\n\nThe max length of property keys is 50 characters. Keys longer than that will be truncated to the first 50.\nIf there are duplicate keys, one will overwrite the other.\nThis will also happen if there are duplicates after truncation.\n\nThe max length of property values are 1024 characters for each value.\nAny value longer than this will be truncated to 1024 characters.\n', 'items': {'type': 'str', 'description': 'Custom properties for this event. Each property key may have multiple values.\nOn updating an existing event, setting an existing property will overwrite existing value.\n\nThe max length of property keys is 50 characters. Keys longer than that will be truncated to the first 50.\nIf there are duplicate keys, one will overwrite the other.\nThis will also happen if there are duplicates after truncation.\n\nThe max length of property values are 1024 characters for each value.\nAny value longer than this will be truncated to 1024 characters.\n'}, 'uniqueItems': True}, 'description': 'Custom properties for this event. Each property key may have multiple values.\nOn updating an existing event, setting an existing property will overwrite existing value.\n\nThe max length of property keys is 50 characters. Keys longer than that will be truncated to the first 50.\nIf there are duplicate keys, one will overwrite the other.\nThis will also happen if there are duplicates after truncation.\n\nThe max length of property values are 1024 characters for each value.\nAny value longer than this will be truncated to 1024 characters.\n'}, 'subEvents': {'type': 'list', 'description': 'IDs (on form TYPE/timestamp/customer/UUID) for subevents to this event. Subevents may not be stored yet. System will validate that all subevents have the same customer as this event.', 'items': {'type': 'str', 'description': 'IDs (on form TYPE/timestamp/customer/UUID) for subevents to this event. Subevents may not be stored yet. System will validate that all subevents have the same customer as this event.'}, 'uniqueItems': True}, 'uri': {'type': 'str', 'description': 'URI observed in this event.'}, 'fqdn': {'type': 'str', 'description': 'FQDN (fqdn) observed in this event.'}, 'aggregationKey': {'type': 'str', 'description': 'Client specified aggregation key for this event.'}, 'associatedCaseID': {'type': 'int', 'description': 'Associated case ID. If set, the associated case must be readable for the current user, and must belong to the same customer as this event.'}, 'associatedCaseIDs': {'type': 'list', 'description': 'Add one or more case associations to an event, not required.\nIf set, the associated case must be readable for the current user, and must belong to the same customer as this event.\n', 'items': {'type': 'int', 'description': 'Add one or more case associations to an event, not required.\nIf set, the associated case must be readable for the current user, and must belong to the same customer as this event.\n'}, 'uniqueItems': True}, 'payload': {'type': 'dict', 'properties': {'payload': {'type': 'str', 'description': 'Payload associated to event', 'maxLength': 1048576, 'minLength': 0}, 'payloadType': {'type': 'str', 'description': 'Type for payload associated to event', 'enum': ['ethernet', 'pcap', 'binary', 'string']}}, 'required': ['payload', 'payloadType']}, 'finalized': {'type': 'dict', 'properties': {'id': {'type': 'dict', 'properties': {'customer': {'type': 'string'}, 'customerDomain': {'type': 'string'}, 'timestamp': {'type': 'int'}, 'type': 'str', 'uuid': {'type': 'str'}, 'options': ['raw', 'aggregated']}}, 'startTimestamp': {'type': 'int'}, 'endTimestamp': {'type': 'int'}, 'signature': {'type': 'str', 'description': 'Event signature. If set, the system will automatically assign alarm and attack category based on this value.'}, 'severity': {'type': 'str', 'description': 'Event severity. When creating a new event, the default severity is low.', 'enum': ['low', 'medium', 'high', 'critical']}, 'count': {'type': 'int', 'description': 'Number of occurrences this event represents. The value must be at least 1, which is the default.'}, 'location': {'type': 'str', 'description': 'The sensor location (id or shortname) where this event was observed. If set, this location must be resolvable for the current user, and must either belong to the same customer as this event, or be a global location.'}, 'protocol': {'type': 'str', 'description': 'The protocol id or well-known name. Numeric protocol ID must be between 0 and 255. Protocol name must be well known (icmp, tcp, udp, esp, ah)'}, 'source': {'type': 'dict', 'properties': {'ip': {'type': 'str', 'description': 'IPv4 or IPv6 address (host or CIDR notation).'}, 'port': {'type': 'int', 'description': 'UDP or TCP port (0 - 65535).'}, 'user': {'type': 'str', 'description': 'Username or identifier.'}, 'host': {'type': 'str', 'description': 'Hostname or identifier.'}, 'geoLocation': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'description': '2-letter country code.'}, 'geoLocationID': {'type': 'int', 'description': 'MaxMind geolocation ID.'}, 'latitude': {'type': 'float', 'description': 'Latitude for location coordinates', 'maximum': 90, 'minimum': -90}, 'longitude': {'type': 'float', 'description': 'Longitude for location coordinates', 'maximum': 180, 'minimum': -180}}}}}, 'destination': {'type': 'dict', 'properties': {'ip': {'type': 'str', 'description': 'IPv4 or IPv6 address (host or CIDR notation).'}, 'port': {'type': 'int', 'description': 'UDP or TCP port (0 - 65535).'}, 'user': {'type': 'str', 'description': 'Username or identifier.'}, 'host': {'type': 'str', 'description': 'Hostname or identifier.'}, 'geoLocation': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'description': '2-letter country code.'}, 'geoLocationID': {'type': 'int', 'description': 'MaxMind geolocation ID.'}, 'latitude': {'type': 'float', 'description': 'Latitude for location coordinates', 'maximum': 90, 'minimum': -90}, 'longitude': {'type': 'float', 'description': 'Longitude for location coordinates', 'maximum': 180, 'minimum': -180}}}}}, 'flags': {'type': 'list', 'description': 'Event flags requested by the client for this event. On updating an existing event, existing flags will be retained, and flags in the update will be added.\nFlags that have a PARTIAL flag have custom handling. If FINALIZED flag is set, additional updates to this event will be ignored.\n', 'items': {'type': 'str', 'description': 'Event flags requested by the client for this event. On updating an existing event, existing flags will be retained, and flags in the update will be added.\nFlags that have a PARTIAL flag have custom handling. If FINALIZED flag is set, additional updates to this event will be ignored.\n', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'HAS_DETAILS', 'HAS_PAYLOAD', 'HAS_PCAP', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED', 'SOURCE_IS_MANAGED_BY_SOC', 'DESTINATION_IS_MANAGED_BY_SOC', 'SLA_VIOLATION', 'HANDLED_BY_ANALYST', 'PAYLOAD_TRUNCATED', 'HAS_STRING_PAYLOAD', 'REASSESSED', 'EVENT_FROM_OT_ENVIRONMENT', 'EVENT_FROM_RESTRICTED_IT_ENVIRONMENT']}, 'uniqueItems': True}, 'properties': {'type': 'dict', 'additionalProperties': {'type': 'list', 'description': 'Custom properties for this event. Each property key may have multiple values.\nOn updating an existing event, setting an existing property will overwrite existing value.\n\nThe max length of property keys is 50 characters. Keys longer than that will be truncated to the first 50.\nIf there are duplicate keys, one will overwrite the other.\nThis will also happen if there are duplicates after truncation.\n\nThe max length of property values are 1024 characters for each value.\nAny value longer than this will be truncated to 1024 characters.\n', 'items': {'type': 'str', 'description': 'Custom properties for this event. Each property key may have multiple values.\nOn updating an existing event, setting an existing property will overwrite existing value.\n\nThe max length of property keys is 50 characters. Keys longer than that will be truncated to the first 50.\nIf there are duplicate keys, one will overwrite the other.\nThis will also happen if there are duplicates after truncation.\n\nThe max length of property values are 1024 characters for each value.\nAny value longer than this will be truncated to 1024 characters.\n'}, 'uniqueItems': True}, 'description': 'Custom properties for this event. Each property key may have multiple values.\nOn updating an existing event, setting an existing property will overwrite existing value.\n\nThe max length of property keys is 50 characters. Keys longer than that will be truncated to the first 50.\nIf there are duplicate keys, one will overwrite the other.\nThis will also happen if there are duplicates after truncation.\n\nThe max length of property values are 1024 characters for each value.\nAny value longer than this will be truncated to 1024 characters.\n'}, 'subEvents': {'type': 'list', 'description': 'IDs (on form TYPE/timestamp/customer/UUID) for subevents to this event. Subevents may not be stored yet. System will validate that all subevents have the same customer as this event.', 'items': {'type': 'str', 'description': 'IDs (on form TYPE/timestamp/customer/UUID) for subevents to this event. Subevents may not be stored yet. System will validate that all subevents have the same customer as this event.'}, 'uniqueItems': True}, 'uri': {'type': 'str', 'description': 'URI observed in this event.'}, 'fqdn': {'type': 'str', 'description': 'FQDN (fqdn) observed in this event.'}, 'aggregationKey': {'type': 'str', 'description': 'Client specified aggregation key for this event.'}, 'associatedCaseID': {'type': 'int', 'description': 'Associated case ID. If set, the associated case must be readable for the current user, and must belong to the same customer as this event.'}, 'associatedCaseIDs': {'type': 'list', 'description': 'Add one or more case associations to an event, not required.\nIf set, the associated case must be readable for the current user, and must belong to the same customer as this event.\n', 'items': {'type': 'int', 'description': 'Add one or more case associations to an event, not required.\nIf set, the associated case must be readable for the current user, and must belong to the same customer as this event.\n'}, 'uniqueItems': True}, 'payload': {'type': 'dict', 'properties': {'payload': {'type': 'str', 'description': 'Payload associated to event', 'maxLength': 1048576, 'minLength': 0}, 'payloadType': {'type': 'str', 'description': 'Type for payload associated to event', 'enum': ['ethernet', 'pcap', 'binary', 'string']}}, 'required': ['payload', 'payloadType']}, 'finalized': []}}}}}}, 'required': True}, 'responses': {'default': {'description': 'Submit event to central storage.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'description': 'List of event submission results for each submitted event. This field will have the same number and order of events as the bulk submission request.', 'properties': {'id': {'type': 'string', 'description': 'The ID of the submitted event. This will reflect the provided type, customerID, timestamp and UUID, or the generated values if these were not specified.'}, 'message': {'type': 'string', 'description': 'If the event was rejected with a validation error, this field will state the reason for the rejection.'}, 'status': {'type': 'string', 'description': "The submission status of this event. This will state 'rejected' if the event could not be validated, or 'accepted' if the event was accepted and has been enqueued for storage.", 'enum': ['accepted', 'rejected']}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['submitEvent'], 'x-Argus-ApiStatus': 'INTERNAL'}
submit_events_bulk = {'tags': ['events/v2'], 'summary': 'Submit a bulk of events to central storage. (INTERNAL)', 'description': 'This is a collector API, which will collect and enqueue the events for central storage.\nWhen this endpoint returns, the service guarantees that the events are validated and safely received for transport and storage. However, the services makes no guarantees for when the events will be searchable from the search endpoints.\n\nValidated events are enqueued for storage; the response will not indicate whether the event has been inserted or updated.\nWriting to an event ID (type/timestamp/customerID/UUID) of an existing event, will update/append the existing event with changed fields, and add flags/properties.\n\nIf an event attempts to update an existing event which is marked as FINALIZED, the update will be ignored, even if this endpoint accepts the event.', 'operationId': 'submitEventsBulk', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'properties': {'events': {'type': 'list', 'description': 'Events to submit in this bulk.', 'items': {'type': 'dict', 'properties': {'id': {'type': 'dict', 'properties': {'customer': {'type': 'string'}, 'customerDomain': {'type': 'string'}, 'timestamp': {'type': 'int'}, 'type': 'str', 'uuid': {'type': 'str'}, 'options': ['raw', 'aggregated']}}, 'startTimestamp': {'type': 'int'}, 'endTimestamp': {'type': 'int'}, 'signature': {'type': 'str', 'description': 'Event signature. If set, the system will automatically assign alarm and attack category based on this value.'}, 'severity': {'type': 'str', 'description': 'Event severity. When creating a new event, the default severity is low.', 'enum': ['low', 'medium', 'high', 'critical']}, 'count': {'type': 'int', 'description': 'Number of occurrences this event represents. The value must be at least 1, which is the default.'}, 'location': {'type': 'str', 'description': 'The sensor location (id or shortname) where this event was observed. If set, this location must be resolvable for the current user, and must either belong to the same customer as this event, or be a global location.'}, 'protocol': {'type': 'str', 'description': 'The protocol id or well-known name. Numeric protocol ID must be between 0 and 255. Protocol name must be well known (icmp, tcp, udp, esp, ah)'}, 'source': {'type': 'dict', 'properties': {'ip': {'type': 'str', 'description': 'IPv4 or IPv6 address (host or CIDR notation).'}, 'port': {'type': 'int', 'description': 'UDP or TCP port (0 - 65535).'}, 'user': {'type': 'str', 'description': 'Username or identifier.'}, 'host': {'type': 'str', 'description': 'Hostname or identifier.'}, 'geoLocation': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'description': '2-letter country code.'}, 'geoLocationID': {'type': 'int', 'description': 'MaxMind geolocation ID.'}, 'latitude': {'type': 'float', 'description': 'Latitude for location coordinates', 'maximum': 90, 'minimum': -90}, 'longitude': {'type': 'float', 'description': 'Longitude for location coordinates', 'maximum': 180, 'minimum': -180}}}}}, 'destination': {'type': 'dict', 'properties': {'ip': {'type': 'str', 'description': 'IPv4 or IPv6 address (host or CIDR notation).'}, 'port': {'type': 'int', 'description': 'UDP or TCP port (0 - 65535).'}, 'user': {'type': 'str', 'description': 'Username or identifier.'}, 'host': {'type': 'str', 'description': 'Hostname or identifier.'}, 'geoLocation': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'description': '2-letter country code.'}, 'geoLocationID': {'type': 'int', 'description': 'MaxMind geolocation ID.'}, 'latitude': {'type': 'float', 'description': 'Latitude for location coordinates', 'maximum': 90, 'minimum': -90}, 'longitude': {'type': 'float', 'description': 'Longitude for location coordinates', 'maximum': 180, 'minimum': -180}}}}}, 'flags': {'type': 'list', 'description': 'Event flags requested by the client for this event. On updating an existing event, existing flags will be retained, and flags in the update will be added.\nFlags that have a PARTIAL flag have custom handling. If FINALIZED flag is set, additional updates to this event will be ignored.\n', 'items': {'type': 'str', 'description': 'Event flags requested by the client for this event. On updating an existing event, existing flags will be retained, and flags in the update will be added.\nFlags that have a PARTIAL flag have custom handling. If FINALIZED flag is set, additional updates to this event will be ignored.\n', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'HAS_DETAILS', 'HAS_PAYLOAD', 'HAS_PCAP', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED', 'SOURCE_IS_MANAGED_BY_SOC', 'DESTINATION_IS_MANAGED_BY_SOC', 'SLA_VIOLATION', 'HANDLED_BY_ANALYST', 'PAYLOAD_TRUNCATED', 'HAS_STRING_PAYLOAD', 'REASSESSED', 'EVENT_FROM_OT_ENVIRONMENT', 'EVENT_FROM_RESTRICTED_IT_ENVIRONMENT']}, 'uniqueItems': True}, 'properties': {'type': 'dict', 'additionalProperties': {'type': 'list', 'description': 'Custom properties for this event. Each property key may have multiple values.\nOn updating an existing event, setting an existing property will overwrite existing value.\n\nThe max length of property keys is 50 characters. Keys longer than that will be truncated to the first 50.\nIf there are duplicate keys, one will overwrite the other.\nThis will also happen if there are duplicates after truncation.\n\nThe max length of property values are 1024 characters for each value.\nAny value longer than this will be truncated to 1024 characters.\n', 'items': {'type': 'str', 'description': 'Custom properties for this event. Each property key may have multiple values.\nOn updating an existing event, setting an existing property will overwrite existing value.\n\nThe max length of property keys is 50 characters. Keys longer than that will be truncated to the first 50.\nIf there are duplicate keys, one will overwrite the other.\nThis will also happen if there are duplicates after truncation.\n\nThe max length of property values are 1024 characters for each value.\nAny value longer than this will be truncated to 1024 characters.\n'}, 'uniqueItems': True}, 'description': 'Custom properties for this event. Each property key may have multiple values.\nOn updating an existing event, setting an existing property will overwrite existing value.\n\nThe max length of property keys is 50 characters. Keys longer than that will be truncated to the first 50.\nIf there are duplicate keys, one will overwrite the other.\nThis will also happen if there are duplicates after truncation.\n\nThe max length of property values are 1024 characters for each value.\nAny value longer than this will be truncated to 1024 characters.\n'}, 'subEvents': {'type': 'list', 'description': 'IDs (on form TYPE/timestamp/customer/UUID) for subevents to this event. Subevents may not be stored yet. System will validate that all subevents have the same customer as this event.', 'items': {'type': 'str', 'description': 'IDs (on form TYPE/timestamp/customer/UUID) for subevents to this event. Subevents may not be stored yet. System will validate that all subevents have the same customer as this event.'}, 'uniqueItems': True}, 'uri': {'type': 'str', 'description': 'URI observed in this event.'}, 'fqdn': {'type': 'str', 'description': 'FQDN (fqdn) observed in this event.'}, 'aggregationKey': {'type': 'str', 'description': 'Client specified aggregation key for this event.'}, 'associatedCaseID': {'type': 'int', 'description': 'Associated case ID. If set, the associated case must be readable for the current user, and must belong to the same customer as this event.'}, 'associatedCaseIDs': {'type': 'list', 'description': 'Add one or more case associations to an event, not required.\nIf set, the associated case must be readable for the current user, and must belong to the same customer as this event.\n', 'items': {'type': 'int', 'description': 'Add one or more case associations to an event, not required.\nIf set, the associated case must be readable for the current user, and must belong to the same customer as this event.\n'}, 'uniqueItems': True}, 'payload': {'type': 'dict', 'properties': {'payload': {'type': 'str', 'description': 'Payload associated to event', 'maxLength': 1048576, 'minLength': 0}, 'payloadType': {'type': 'str', 'description': 'Type for payload associated to event', 'enum': ['ethernet', 'pcap', 'binary', 'string']}}, 'required': ['payload', 'payloadType']}, 'finalized': {'type': 'dict', 'properties': {'id': {'type': 'dict', 'properties': {'customer': {'type': 'string'}, 'customerDomain': {'type': 'string'}, 'timestamp': {'type': 'int'}, 'type': 'str', 'uuid': {'type': 'str'}, 'options': ['raw', 'aggregated']}}, 'startTimestamp': {'type': 'int'}, 'endTimestamp': {'type': 'int'}, 'signature': {'type': 'str', 'description': 'Event signature. If set, the system will automatically assign alarm and attack category based on this value.'}, 'severity': {'type': 'str', 'description': 'Event severity. When creating a new event, the default severity is low.', 'enum': ['low', 'medium', 'high', 'critical']}, 'count': {'type': 'int', 'description': 'Number of occurrences this event represents. The value must be at least 1, which is the default.'}, 'location': {'type': 'str', 'description': 'The sensor location (id or shortname) where this event was observed. If set, this location must be resolvable for the current user, and must either belong to the same customer as this event, or be a global location.'}, 'protocol': {'type': 'str', 'description': 'The protocol id or well-known name. Numeric protocol ID must be between 0 and 255. Protocol name must be well known (icmp, tcp, udp, esp, ah)'}, 'source': {'type': 'dict', 'properties': {'ip': {'type': 'str', 'description': 'IPv4 or IPv6 address (host or CIDR notation).'}, 'port': {'type': 'int', 'description': 'UDP or TCP port (0 - 65535).'}, 'user': {'type': 'str', 'description': 'Username or identifier.'}, 'host': {'type': 'str', 'description': 'Hostname or identifier.'}, 'geoLocation': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'description': '2-letter country code.'}, 'geoLocationID': {'type': 'int', 'description': 'MaxMind geolocation ID.'}, 'latitude': {'type': 'float', 'description': 'Latitude for location coordinates', 'maximum': 90, 'minimum': -90}, 'longitude': {'type': 'float', 'description': 'Longitude for location coordinates', 'maximum': 180, 'minimum': -180}}}}}, 'destination': {'type': 'dict', 'properties': {'ip': {'type': 'str', 'description': 'IPv4 or IPv6 address (host or CIDR notation).'}, 'port': {'type': 'int', 'description': 'UDP or TCP port (0 - 65535).'}, 'user': {'type': 'str', 'description': 'Username or identifier.'}, 'host': {'type': 'str', 'description': 'Hostname or identifier.'}, 'geoLocation': {'type': 'dict', 'properties': {'countryCode': {'type': 'str', 'description': '2-letter country code.'}, 'geoLocationID': {'type': 'int', 'description': 'MaxMind geolocation ID.'}, 'latitude': {'type': 'float', 'description': 'Latitude for location coordinates', 'maximum': 90, 'minimum': -90}, 'longitude': {'type': 'float', 'description': 'Longitude for location coordinates', 'maximum': 180, 'minimum': -180}}}}}, 'flags': {'type': 'list', 'description': 'Event flags requested by the client for this event. On updating an existing event, existing flags will be retained, and flags in the update will be added.\nFlags that have a PARTIAL flag have custom handling. If FINALIZED flag is set, additional updates to this event will be ignored.\n', 'items': {'type': 'str', 'description': 'Event flags requested by the client for this event. On updating an existing event, existing flags will be retained, and flags in the update will be added.\nFlags that have a PARTIAL flag have custom handling. If FINALIZED flag is set, additional updates to this event will be ignored.\n', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'HAS_DETAILS', 'HAS_PAYLOAD', 'HAS_PCAP', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED', 'SOURCE_IS_MANAGED_BY_SOC', 'DESTINATION_IS_MANAGED_BY_SOC', 'SLA_VIOLATION', 'HANDLED_BY_ANALYST', 'PAYLOAD_TRUNCATED', 'HAS_STRING_PAYLOAD', 'REASSESSED', 'EVENT_FROM_OT_ENVIRONMENT', 'EVENT_FROM_RESTRICTED_IT_ENVIRONMENT']}, 'uniqueItems': True}, 'properties': {'type': 'dict', 'additionalProperties': {'type': 'list', 'description': 'Custom properties for this event. Each property key may have multiple values.\nOn updating an existing event, setting an existing property will overwrite existing value.\n\nThe max length of property keys is 50 characters. Keys longer than that will be truncated to the first 50.\nIf there are duplicate keys, one will overwrite the other.\nThis will also happen if there are duplicates after truncation.\n\nThe max length of property values are 1024 characters for each value.\nAny value longer than this will be truncated to 1024 characters.\n', 'items': {'type': 'str', 'description': 'Custom properties for this event. Each property key may have multiple values.\nOn updating an existing event, setting an existing property will overwrite existing value.\n\nThe max length of property keys is 50 characters. Keys longer than that will be truncated to the first 50.\nIf there are duplicate keys, one will overwrite the other.\nThis will also happen if there are duplicates after truncation.\n\nThe max length of property values are 1024 characters for each value.\nAny value longer than this will be truncated to 1024 characters.\n'}, 'uniqueItems': True}, 'description': 'Custom properties for this event. Each property key may have multiple values.\nOn updating an existing event, setting an existing property will overwrite existing value.\n\nThe max length of property keys is 50 characters. Keys longer than that will be truncated to the first 50.\nIf there are duplicate keys, one will overwrite the other.\nThis will also happen if there are duplicates after truncation.\n\nThe max length of property values are 1024 characters for each value.\nAny value longer than this will be truncated to 1024 characters.\n'}, 'subEvents': {'type': 'list', 'description': 'IDs (on form TYPE/timestamp/customer/UUID) for subevents to this event. Subevents may not be stored yet. System will validate that all subevents have the same customer as this event.', 'items': {'type': 'str', 'description': 'IDs (on form TYPE/timestamp/customer/UUID) for subevents to this event. Subevents may not be stored yet. System will validate that all subevents have the same customer as this event.'}, 'uniqueItems': True}, 'uri': {'type': 'str', 'description': 'URI observed in this event.'}, 'fqdn': {'type': 'str', 'description': 'FQDN (fqdn) observed in this event.'}, 'aggregationKey': {'type': 'str', 'description': 'Client specified aggregation key for this event.'}, 'associatedCaseID': {'type': 'int', 'description': 'Associated case ID. If set, the associated case must be readable for the current user, and must belong to the same customer as this event.'}, 'associatedCaseIDs': {'type': 'list', 'description': 'Add one or more case associations to an event, not required.\nIf set, the associated case must be readable for the current user, and must belong to the same customer as this event.\n', 'items': {'type': 'int', 'description': 'Add one or more case associations to an event, not required.\nIf set, the associated case must be readable for the current user, and must belong to the same customer as this event.\n'}, 'uniqueItems': True}, 'payload': {'type': 'dict', 'properties': {'payload': {'type': 'str', 'description': 'Payload associated to event', 'maxLength': 1048576, 'minLength': 0}, 'payloadType': {'type': 'str', 'description': 'Type for payload associated to event', 'enum': ['ethernet', 'pcap', 'binary', 'string']}}, 'required': ['payload', 'payloadType']}, 'finalized': []}}}}, 'maxItems': 2147483647, 'minItems': 1}, 'onError': {'type': 'str', 'description': 'Define how validation errors on single events should be handled. Using mode dropInvalid, invalid events will be ignored and reported in the response. The default mode is rejectAll, which will cause a 412 error on the entire request on a valiation failure for any event.', 'enum': ['rejectAll', 'dropInvalid']}}, 'required': ['events']}}}, 'required': True}, 'responses': {'default': {'description': 'Submit a bulk of events to central storage.', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message text'}, 'messageTemplate': {'type': 'string', 'description': 'Message template'}, 'type': {'type': 'string', 'description': 'Message type', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string', 'description': 'Field which this message applies to'}, 'parameter': {'type': 'string', 'description': 'The affected parameter'}}}}, 'data': {'type': 'object', 'properties': {'accepted': {'type': 'integer', 'format': 'int32', 'description': 'Number of accepted events'}, 'events': {'type': 'array', 'description': 'List of event submission results for each submitted event. This field will have the same number and order of events as the bulk submission request.', 'items': {'type': 'object', 'description': 'List of event submission results for each submitted event. This field will have the same number and order of events as the bulk submission request.', 'properties': {'id': {'type': 'string', 'description': 'The ID of the submitted event. This will reflect the provided type, customerID, timestamp and UUID, or the generated values if these were not specified.'}, 'message': {'type': 'string', 'description': 'If the event was rejected with a validation error, this field will state the reason for the rejection.'}, 'status': {'type': 'string', 'description': "The submission status of this event. This will state 'rejected' if the event could not be validated, or 'accepted' if the event was accepted and has been enqueued for storage.", 'enum': ['accepted', 'rejected']}}}}, 'rejected': {'type': 'integer', 'format': 'int32', 'description': 'Number of rejected events'}}}}}}}}, '401': {'description': 'Authentication failed', 'content': {'application/json': {}}}, '403': {'description': 'Access denied', 'content': {'application/json': {}}}, '412': {'description': 'Validation failed', 'content': {'application/json': {}}}}, 'x-Argus-Required-Permissions': ['submitEvent'], 'x-Argus-ApiStatus': 'INTERNAL'}