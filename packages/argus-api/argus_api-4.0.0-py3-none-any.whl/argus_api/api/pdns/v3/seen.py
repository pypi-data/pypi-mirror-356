"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(extending=("pdns", "v3", "seen"), module=argus_cli_module)
def exists_records_of_tlp_levels(
    query: str,
    tlp: str = None,
    ignoreOwnRecords: bool = True,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Search against PassiveDNS and return true if matching records are found (PUBLIC)

    :param str query: Search by query\, can be IP\, not subnet\, or domain
    :param list tlp: Search by TLP
    :param bool ignoreOwnRecords: Whether to ignore user\'s customer\'s own records\, defaults to true
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises ResourceLimitExceededException: on 402
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/pdns/v3/{query}/seen".format(query=query)
    headers = {}

    query_parameters = {}
    # Only send tlp if the argument was provided, don't send null values
    if tlp is not None:
        query_parameters.update({"tlp": tlp})
    # Only send ignoreOwnRecords if the argument was provided, don't send null values
    if ignoreOwnRecords is not None:
        query_parameters.update({"ignoreOwnRecords": ignoreOwnRecords})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
