"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def add_json_object_favorite(
    idOrShortname: str,
    type: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Creates a new JsonObjectFavorite to current user's JsonObject (PUBLIC)

    :param str idOrShortname: Id or shortName of the JsonObject to favorite.
    :param str type: The shortName of the JsonObject type.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}/{idOrShortname}/favorite".format(
        idOrShortname=idOrShortname, type=type
    )
    headers = {}

    body = body or {}

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def bulk_grant_json_object_access(
    type: str,
    idOrShortname: str,
    accessEntries: dict,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Bulk adds access entries to the identified JsonObject. (PUBLIC)

    :param str type: The shortName of the JsonObject type.
    :param str idOrShortname: Id or shortName of the JsonObject to add the access entries to.
    :param list accessEntries:
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}/{idOrShortname}/access/bulk".format(
        type=type, idOrShortname=idOrShortname
    )
    headers = {}

    body = body or {}
    # Only send accessEntries if the argument was provided, don't send null values
    if accessEntries is not None:
        body.update({"accessEntries": accessEntries})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def create_json_object(
    type: str,
    name: str,
    data: dict = None,
    description: str = None,
    localizedDescriptions: dict = None,
    localizedNames: dict = None,
    shortName: str = None,
    tags: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Creates a new JsonObject of a specified type. (PUBLIC)

    :param str type: The shortName of the JsonObject type.
    :param str name: Name of this object
    :param dict data:
    :param str description: Description of this object
    :param dict localizedDescriptions: Description in specified languages. Required for global objects.
    :param dict localizedNames: Display name in specified languages. Required for global objects.
    :param str shortName: If set\, this needs to be unique per type. If not\, this will default to the generated UUID of the object.
    :param list tags: Tags to set on this object.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}".format(type=type)
    headers = {}

    body = body or {}
    # Only send data if the argument was provided, don't send null values
    if data is not None:
        body.update({"data": data})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send localizedDescriptions if the argument was provided, don't send null values
    if localizedDescriptions is not None:
        body.update({"localizedDescriptions": localizedDescriptions})
    # Only send localizedNames if the argument was provided, don't send null values
    if localizedNames is not None:
        body.update({"localizedNames": localizedNames})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send tags if the argument was provided, don't send null values
    if tags is not None:
        body.update({"tags": tags})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def delete_json_object(
    type: str,
    idOrShortname: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Deletes a JsonObject identified by either id or type+shortname (PUBLIC)

    :param str type: The shortName of the JsonObject type.
    :param str idOrShortname: Id or shortName of the JsonObject to delete.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}/{idOrShortname}".format(
        type=type, idOrShortname=idOrShortname
    )
    headers = {}

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def get_json_object(
    type: str,
    idOrShortname: str,
    includeData: bool = False,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Returns a JsonObject identified by either id or type+shortname. (PUBLIC)

    :param str type: The shortName of the JsonObject type.
    :param str idOrShortname: Id or shortName of the JsonObject to retrieve.
    :param bool includeData: Whether or not to include the actual JsonObject data in the response.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}/{idOrShortname}".format(
        type=type, idOrShortname=idOrShortname
    )
    headers = {}

    query_parameters = {}
    # Only send includeData if the argument was provided, don't send null values
    if includeData is not None:
        query_parameters.update({"includeData": includeData})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def get_json_objects(
    type: str,
    keywords: str = None,
    favorite: bool = None,
    includeData: bool = False,
    includeDeleted: bool = False,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Search json objects with specified query parameters (PUBLIC)

    :param str type: The shortName of the JsonObject type.
    :param list keywords: Filter search by JsonObject keyword fields \(name and short name\)
    :param bool favorite: Limit search to favorites
    :param bool includeData: Whether or not to include the actual JsonObject data in the response.
    :param bool includeDeleted: Whether or not to include deleted JsonObjects in the response.
    :param int limit: Limit result
    :param int offset: Offset result
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}".format(type=type)
    headers = {}

    query_parameters = {}
    # Only send includeData if the argument was provided, don't send null values
    if includeData is not None:
        query_parameters.update({"includeData": includeData})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})
    # Only send favorite if the argument was provided, don't send null values
    if favorite is not None:
        query_parameters.update({"favorite": favorite})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def grant_json_object_access(
    type: str,
    idOrShortname: str,
    level: str,
    customer: str = None,
    function: str = None,
    subject: str = None,
    searchable: bool = True,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Adds an access entry to the identified JsonObject. (PUBLIC)

    :param str type: The shortName of the JsonObject type.
    :param str idOrShortname: Id or shortName of the JsonObject to add the access entry to.
    :param str level: The access level this entry grants.
    :param str customer: ID or shortname of customer for granting role\-based access. Null if global permission.
    :param str function: ID or name of function for granting role\-based access.
    :param str subject: ID or shortname for user or group to grant explicit access to.
    :param bool searchable: If true\, the object will be searchable.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}/{idOrShortname}/access".format(
        type=type, idOrShortname=idOrShortname
    )
    headers = {}

    body = body or {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send function if the argument was provided, don't send null values
    if function is not None:
        body.update({"function": function})
    # Only send level if the argument was provided, don't send null values
    if level is not None:
        body.update({"level": level})
    # Only send searchable if the argument was provided, don't send null values
    if searchable is not None:
        body.update({"searchable": searchable})
    # Only send subject if the argument was provided, don't send null values
    if subject is not None:
        body.update({"subject": subject})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def list_json_object_access(
    type: str,
    idOrShortname: str,
    includeDeleted: bool = False,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Returns a list of access entries for a JsonObject identified by either id or type+shortname (PUBLIC)

    :param str type: The shortName of the JsonObject type.
    :param str idOrShortname: Id or shortName of the JsonObject to list access entries for.
    :param bool includeDeleted: Whether or not to include deleted access entries in the response.
    :param int limit: Maximum number of returned results
    :param int offset: By how many records to offset results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}/{idOrShortname}/access".format(
        type=type, idOrShortname=idOrShortname
    )
    headers = {}

    query_parameters = {}
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def list_json_object_revisions(
    type: str,
    idOrShortname: str,
    includeData: bool = False,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Returns the revisions of a JsonObject identified by either id or type+shortname (PUBLIC)

    :param str type: The shortName of the JsonObject type.
    :param str idOrShortname: Id or shortName of the JsonObject to retrieve revisions for.
    :param bool includeData: Whether or not to include the actual JsonObject data in the revision responses.
    :param int limit: Maximum number of returned results
    :param int offset: By how many records to offset results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}/{idOrShortname}/revisions".format(
        type=type, idOrShortname=idOrShortname
    )
    headers = {}

    query_parameters = {}
    # Only send includeData if the argument was provided, don't send null values
    if includeData is not None:
        query_parameters.update({"includeData": includeData})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def remove_json_object_favorite(
    idOrShortname: str,
    type: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Deletes JsonObjectFavorite to current user's JsonObject (PUBLIC)

    :param str idOrShortname: Id or shortName of the JsonObject the favorite should be removed from.
    :param str type: The shortName of the JsonObject type.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}/{idOrShortname}/favorite".format(
        idOrShortname=idOrShortname, type=type
    )
    headers = {}

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def revert_json_object(
    type: str,
    idOrShortname: str,
    revision: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Reverts a JsonObject identified by either id or type+shortname to a previous revision (PUBLIC)

    :param str type: The shortName of the JsonObject type.
    :param str idOrShortname: Id or shortName of the current JsonObject.
    :param int revision: The revision to revert to.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}/{idOrShortname}/revisions/{revision}/revert".format(
        type=type, idOrShortname=idOrShortname, revision=revision
    )
    headers = {}

    body = body or {}

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def revoke_json_object_access(
    idOrShortname: str,
    type: str,
    id: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Revokes access entity to the identified JsonObject (PUBLIC)

    :param str idOrShortname: Id or shortName of the JsonObject the access entity should be removed from.
    :param str type: The shortName of the JsonObject type.
    :param str id: ID of the access entity to revoke
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}/{idOrShortname}/access/{id}".format(
        idOrShortname=idOrShortname, type=type, id=id
    )
    headers = {}

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def search_json_objects(
    type: str,
    customer: str = None,
    excludeFlags: str = None,
    includeFlags: str = None,
    keywords: str = None,
    subCriteria: dict = None,
    tags: dict = None,
    user: str = None,
    endTimestamp: int = None,
    favorite: bool = None,
    includeData: bool = None,
    includeDeleted: bool = None,
    includeTags: bool = None,
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = "all",
    limit: int = 25,
    offset: int = None,
    sortBy: str = None,
    startTimestamp: int = None,
    timeFieldStrategy: str = None,
    timeMatchStrategy: str = "any",
    userFieldStrategy: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Search json objects with specified criteria (PUBLIC)

    :param str type: The shortName of the JsonObject type.
    :param list customer: Limit search to json objects with the given customers\, identified by id or shortname
    :param list excludeFlags: Filter out objects with any of these flags set
    :param list includeFlags: Filter by objects with all these flags set
    :param list keywords: Search for keywords against fields defined by KeywordFieldStrategy
    :param list subCriteria: Set additional criteria
    :param list tags: Search for objects matching these tags
    :param list user: Search using users identified by id or shortname. If given a group\, we will resolve all members of the group recursively
    :param int endTimestamp: Restrict to a time frame based on the set timeFieldStrategy \(end timestamp\)
    :param bool favorite: Whether to only search for favorites\, exclude favorites or neither
    :param bool includeData: Whether to include data in the response.
    :param bool includeDeleted: Whether to include deleted json objects in the search. Only allowed for users with ´jsonObjectAdministration\` permission
    :param bool includeTags: Whether to include tags in the response.
    :param list keywordFieldStrategy: Defines which fields will be searched by keywords
    :param str keywordMatchStrategy: Defines how strict different keywords should be matched
    :param int limit: Limit maximum amount of results
    :param int offset: Skip specified amount of results
    :param list sortBy: Which fields to sort json objects by
    :param int startTimestamp: Restrict to a time frame based on the set timeFieldStrategy \(start timestamp\)
    :param list timeFieldStrategy: Defines which timestamp fields will be filtered with start\/endTimestamp
    :param str timeMatchStrategy: Defines how strict to match against different timestamps \(all\/any\) using start and end timestamp
    :param list userFieldStrategy: Defines which fields will be searched by user
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}/search".format(type=type)
    headers = {}

    body = body or {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send favorite if the argument was provided, don't send null values
    if favorite is not None:
        body.update({"favorite": favorite})
    # Only send includeData if the argument was provided, don't send null values
    if includeData is not None:
        body.update({"includeData": includeData})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send includeTags if the argument was provided, don't send null values
    if includeTags is not None:
        body.update({"includeTags": includeTags})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send tags if the argument was provided, don't send null values
    if tags is not None:
        body.update({"tags": tags})
    # Only send timeFieldStrategy if the argument was provided, don't send null values
    if timeFieldStrategy is not None:
        body.update({"timeFieldStrategy": timeFieldStrategy})
    # Only send timeMatchStrategy if the argument was provided, don't send null values
    if timeMatchStrategy is not None:
        body.update({"timeMatchStrategy": timeMatchStrategy})
    # Only send user if the argument was provided, don't send null values
    if user is not None:
        body.update({"user": user})
    # Only send userFieldStrategy if the argument was provided, don't send null values
    if userFieldStrategy is not None:
        body.update({"userFieldStrategy": userFieldStrategy})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("jsonobject", "v1", "object"), module=argus_cli_module)
def update_json_object(
    type: str,
    idOrShortname: str,
    addTags: dict = None,
    data: dict = None,
    description: str = None,
    localizedDescriptions: dict = None,
    localizedNames: dict = None,
    name: str = None,
    removeTags: str = None,
    shortName: str = None,
    skipRevision: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Updates a JsonObject identified by either id or type+shortname (PUBLIC)

    :param str type: The shortName of the JsonObject type.
    :param str idOrShortname: Id or shortName of the JsonObject to update.
    :param list addTags: If set\, add these tags to the object.
    :param dict data:
    :param str description: Description of this object
    :param dict localizedDescriptions: Description in specified languages. Required for global objects.
    :param dict localizedNames: Display name in specified languages. Required for global objects.
    :param str name: Name of this object
    :param list removeTags: If set\, remove these tags from the object\, by tag ID or key. If key is specified\, this will match all tags with this key.
    :param str shortName: If set\, this needs to be unique per type.
    :param bool skipRevision: If true\, do not create a new revision for this update.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/jsonobject/v1/object/{type}/{idOrShortname}".format(
        type=type, idOrShortname=idOrShortname
    )
    headers = {}

    body = body or {}
    # Only send addTags if the argument was provided, don't send null values
    if addTags is not None:
        body.update({"addTags": addTags})
    # Only send data if the argument was provided, don't send null values
    if data is not None:
        body.update({"data": data})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send localizedDescriptions if the argument was provided, don't send null values
    if localizedDescriptions is not None:
        body.update({"localizedDescriptions": localizedDescriptions})
    # Only send localizedNames if the argument was provided, don't send null values
    if localizedNames is not None:
        body.update({"localizedNames": localizedNames})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send removeTags if the argument was provided, don't send null values
    if removeTags is not None:
        body.update({"removeTags": removeTags})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send skipRevision if the argument was provided, don't send null values
    if skipRevision is not None:
        body.update({"skipRevision": skipRevision})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
