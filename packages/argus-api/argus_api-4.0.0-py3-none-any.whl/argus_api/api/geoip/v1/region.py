"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(extending=("geoip", "v1", "region"), module=argus_cli_module)
def add_region(
    id: int = None,
    countryCode: str = None,
    regionCode: str = None,
    regionName: str = None,
    lastUpdatedTimestamp: int = None,
    flags: str = None,
    minLocationID: int = None,
    maxLocationID: int = None,
    flag: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Add new region (DEV)

    :param int id:
    :param str countryCode: The two\-letter code of the country where this region is in.
    :param str regionCode: The code of the region.
    :param str regionName: The name of the region.
    :param int lastUpdatedTimestamp: The timestamp when this region was last updated.
    :param list flags: Flags assigned to the object.
    :param int minLocationID:
    :param int maxLocationID:
    :param int flag:
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/region".format()
    headers = {}

    body = body or {}
    # Only send id if the argument was provided, don't send null values
    if id is not None:
        body.update({"id": id})
    # Only send countryCode if the argument was provided, don't send null values
    if countryCode is not None:
        body.update({"countryCode": countryCode})
    # Only send regionCode if the argument was provided, don't send null values
    if regionCode is not None:
        body.update({"regionCode": regionCode})
    # Only send regionName if the argument was provided, don't send null values
    if regionName is not None:
        body.update({"regionName": regionName})
    # Only send lastUpdatedTimestamp if the argument was provided, don't send null values
    if lastUpdatedTimestamp is not None:
        body.update({"lastUpdatedTimestamp": lastUpdatedTimestamp})
    # Only send flags if the argument was provided, don't send null values
    if flags is not None:
        body.update({"flags": flags})
    # Only send minLocationID if the argument was provided, don't send null values
    if minLocationID is not None:
        body.update({"minLocationID": minLocationID})
    # Only send maxLocationID if the argument was provided, don't send null values
    if maxLocationID is not None:
        body.update({"maxLocationID": maxLocationID})
    # Only send flag if the argument was provided, don't send null values
    if flag is not None:
        body.update({"flag": flag})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
