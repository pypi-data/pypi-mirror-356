"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("reputation", "v1", "calculated", "domain"), module=argus_cli_module
)
def calculate_reputation_for_domain(
    fqdn: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Look up the calculated reputation value for the given Domain (INTERNAL)

    :param str fqdn: Domain to look up
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/calculated/domain/{fqdn}".format(fqdn=fqdn)
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("reputation", "v1", "calculated", "domain"), module=argus_cli_module
)
def calculate_reputation_for_ip(
    ip: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Look up the calculated reputation value for the given IP (INTERNAL)

    :param str ip: IP address to look up
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/calculated/ip/{ip}".format(ip=ip)
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("reputation", "v1", "calculated", "domain"), module=argus_cli_module
)
def find_address_reputation(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    minimumValue: float = None,
    sourceID: int = None,
    fromAddress: dict = None,
    afterAddress: dict = None,
    addresses: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Search for calculated IP reputation values (INTERNAL)

    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param int includeFlags: Only include objects which have includeFlags set.
    :param int excludeFlags: Exclude objects which have excludeFlags set.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param float minimumValue: Filter results by reputations with at least this value
    :param list sourceID: Filter results by reputation values from these sources
    :param dict fromAddress:
    :param dict afterAddress:
    :param list addresses: Filter results by these IP addresses
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/calculated/ip/search".format()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, don't send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, don't send null values
    if required is not None:
        body.update({"required": required})
    # Only send minimumValue if the argument was provided, don't send null values
    if minimumValue is not None:
        body.update({"minimumValue": minimumValue})
    # Only send sourceID if the argument was provided, don't send null values
    if sourceID is not None:
        body.update({"sourceID": sourceID})
    # Only send fromAddress if the argument was provided, don't send null values
    if fromAddress is not None:
        body.update({"fromAddress": fromAddress})
    # Only send afterAddress if the argument was provided, don't send null values
    if afterAddress is not None:
        body.update({"afterAddress": afterAddress})
    # Only send addresses if the argument was provided, don't send null values
    if addresses is not None:
        body.update({"addresses": addresses})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("reputation", "v1", "calculated", "domain"), module=argus_cli_module
)
def find_domain_reputation(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    minimumValue: float = None,
    sourceID: int = None,
    fromDomainName: dict = None,
    afterDomainName: dict = None,
    domains: str = None,
    domainNames: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Search for calculated domain reputation values (INTERNAL)

    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param int includeFlags: Only include objects which have includeFlags set.
    :param int excludeFlags: Exclude objects which have excludeFlags set.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param float minimumValue: Filter results by reputations with at least this value
    :param list sourceID: Filter results by reputation values from these sources
    :param dict fromDomainName:
    :param dict afterDomainName:
    :param list domains: Search for observations by exactly matching on domain name. Invalid domains will be ignored.
    :param list domainNames: Fully Qualified Domain Names
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/calculated/domain/search".format()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, don't send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, don't send null values
    if required is not None:
        body.update({"required": required})
    # Only send minimumValue if the argument was provided, don't send null values
    if minimumValue is not None:
        body.update({"minimumValue": minimumValue})
    # Only send sourceID if the argument was provided, don't send null values
    if sourceID is not None:
        body.update({"sourceID": sourceID})
    # Only send fromDomainName if the argument was provided, don't send null values
    if fromDomainName is not None:
        body.update({"fromDomainName": fromDomainName})
    # Only send afterDomainName if the argument was provided, don't send null values
    if afterDomainName is not None:
        body.update({"afterDomainName": afterDomainName})
    # Only send domains if the argument was provided, don't send null values
    if domains is not None:
        body.update({"domains": domains})
    # Only send domainNames if the argument was provided, don't send null values
    if domainNames is not None:
        body.update({"domainNames": domainNames})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("reputation", "v1", "calculated", "domain"), module=argus_cli_module
)
def list_address_reputation(
    fromAddress: dict = None,
    afterAddress: dict = None,
    sourceID: int = None,
    minimumValue: float = None,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""List up calculated IP reputation values (INTERNAL)

    :param dict fromAddress: List observed domains after this domain\, including \(sorted by reverse domain\)
    :param dict afterAddress: List observed domains after this domain\, excluding \(sorted by reverse domain\)
    :param int sourceID: Limit to domains observed in this source
    :param float minimumValue: Limit to domains which have a reputation score at lease this large
    :param int limit: Limit output
    :param int offset: Offset result
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/calculated/ip".format()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send fromAddress if the argument was provided, don't send null values
    if fromAddress is not None:
        query_parameters.update({"fromAddress": fromAddress})
    # Only send afterAddress if the argument was provided, don't send null values
    if afterAddress is not None:
        query_parameters.update({"afterAddress": afterAddress})
    # Only send sourceID if the argument was provided, don't send null values
    if sourceID is not None:
        query_parameters.update({"sourceID": sourceID})
    # Only send minimumValue if the argument was provided, don't send null values
    if minimumValue is not None:
        query_parameters.update({"minimumValue": minimumValue})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(
    extending=("reputation", "v1", "calculated", "domain"), module=argus_cli_module
)
def list_domain_reputation(
    fromDomain: str = None,
    afterDomain: str = None,
    sourceID: int = None,
    minimumValue: float = None,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""List up calculated domain reputation values (INTERNAL)

    :param str fromDomain: List observed domains after this domain\, including \(sorted by reverse domain\)
    :param str afterDomain: List observed domains after this domain\, excluding \(sorted by reverse domain\)
    :param int sourceID: Limit to domains observed in this source
    :param float minimumValue: Limit to domains which have a reputation score at lease this large
    :param int limit: Limit output
    :param int offset: Offset result
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/calculated/domain".format()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send fromDomain if the argument was provided, don't send null values
    if fromDomain is not None:
        query_parameters.update({"fromDomain": fromDomain})
    # Only send afterDomain if the argument was provided, don't send null values
    if afterDomain is not None:
        query_parameters.update({"afterDomain": afterDomain})
    # Only send sourceID if the argument was provided, don't send null values
    if sourceID is not None:
        query_parameters.update({"sourceID": sourceID})
    # Only send minimumValue if the argument was provided, don't send null values
    if minimumValue is not None:
        query_parameters.update({"minimumValue": minimumValue})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
