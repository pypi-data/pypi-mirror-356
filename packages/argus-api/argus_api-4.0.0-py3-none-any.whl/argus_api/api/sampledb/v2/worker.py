"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(extending=("sampledb", "v2", "worker"), module=argus_cli_module)
def add_analysis_worker(
    localizedDescriptions: dict,
    localizedNames: dict,
    shortName: str,
    schema: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Endpoint for registering a new analysis worker (INTERNAL)

    :param dict localizedDescriptions: Localized descriptions mapped by language. Supported languages are\: english and norwegian. Required to set at least english
    :param dict localizedNames: Localized names mapped by language. Supported languages are\: english and norwegian. Required to set at least english
    :param str shortName: The name of the analysis worker. Required and must be unique
    :param dict schema:
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/sampledb/v2/worker".format()
    headers = {}

    body = body or {}
    # Only send localizedDescriptions if the argument was provided, don't send null values
    if localizedDescriptions is not None:
        body.update({"localizedDescriptions": localizedDescriptions})
    # Only send localizedNames if the argument was provided, don't send null values
    if localizedNames is not None:
        body.update({"localizedNames": localizedNames})
    # Only send schema if the argument was provided, don't send null values
    if schema is not None:
        body.update({"schema": schema})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("sampledb", "v2", "worker"), module=argus_cli_module)
def delete_analysis_worker(
    idOrShortName: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Deletes an analysis worker by id or shortName (INTERNAL)

    :param str idOrShortName: Id or shortName of the analysis worker to delete
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/sampledb/v2/worker/{idOrShortName}".format(idOrShortName=idOrShortName)
    headers = {}

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("sampledb", "v2", "worker"), module=argus_cli_module)
def fetch_analysis_worker_schema(
    idOrShortName: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch the raw JSON schema of the analysis results produced by the analysis worker. The response will be the JSON schema itself (INTERNAL)

    :param str idOrShortName: Id or shortName of the analysis worker
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/sampledb/v2/worker/{idOrShortName}/schema".format(
        idOrShortName=idOrShortName
    )
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("sampledb", "v2", "worker"), module=argus_cli_module)
def get_analysis_worker(
    idOrShortName: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Fetch an analysis worker by id or shortName (INTERNAL)

    :param str idOrShortName: Id or shortName of the analysis worker to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/sampledb/v2/worker/{idOrShortName}".format(idOrShortName=idOrShortName)
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("sampledb", "v2", "worker"), module=argus_cli_module)
def list_analysis_workers(
    limit: int = 25,
    offset: int = 0,
    sortBy: str = None,
    includeDeleted: bool = False,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""List existing analysis workers (INTERNAL)

    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :param list sortBy: Sort order of returned results. Prefix with \'\-\' to sort descending
    :param bool includeDeleted: Include deleted analysis workers
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/sampledb/v2/worker".format()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("sampledb", "v2", "worker"), module=argus_cli_module)
def update_analysis_worker(
    idOrShortName: str,
    localizedDescriptions: dict = None,
    localizedNames: dict = None,
    schema: dict = None,
    shortName: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Update an existing analysis worker (INTERNAL)

    :param str idOrShortName: Id or shortName of the analysis worker to update
    :param dict localizedDescriptions: Localized descriptions mapped by language. Supported languages are\: english and norwegian. Required to set at least english
    :param dict localizedNames: Localized names mapped by language. Supported languages are\: english and norwegian
    :param dict schema:
    :param str shortName: the shortName of the analysis worker
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/sampledb/v2/worker/{idOrShortName}".format(idOrShortName=idOrShortName)
    headers = {}

    body = body or {}
    # Only send localizedDescriptions if the argument was provided, don't send null values
    if localizedDescriptions is not None:
        body.update({"localizedDescriptions": localizedDescriptions})
    # Only send localizedNames if the argument was provided, don't send null values
    if localizedNames is not None:
        body.update({"localizedNames": localizedNames})
    # Only send schema if the argument was provided, don't send null values
    if schema is not None:
        body.update({"schema": schema})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
