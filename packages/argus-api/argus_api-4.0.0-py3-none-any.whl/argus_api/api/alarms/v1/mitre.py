"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def add_mitre_category(
    externalId: str,
    shortName: str,
    name: str,
    type: str,
    model: str,
    version: str,
    url: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Adds a new MITRE category (DEV)

    :param str externalId: External ID of the MITRE category
    :param str shortName: Short name of the MITRE category
    :param str name: Detailed name of the MITRE category
    :param str type: Enumerated type of the MITRE category
    :param str model: Enumerated threat model of the MITRE category
    :param str version: Version of the MITRE ATT\&CK release
    :param str url: URL of the external MITRE category page
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre".format()
    headers = {}

    body = body or {}
    # Only send externalId if the argument was provided, don't send null values
    if externalId is not None:
        body.update({"externalId": externalId})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send type if the argument was provided, don't send null values
    if type is not None:
        body.update({"type": type})
    # Only send model if the argument was provided, don't send null values
    if model is not None:
        body.update({"model": model})
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        body.update({"version": version})
    # Only send url if the argument was provided, don't send null values
    if url is not None:
        body.update({"url": url})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def add_mitre_category_relationship(
    idOrExtId: str,
    externalId: str,
    targetCategory: str,
    type: str,
    version: str,
    targetCategoryModel: str = None,
    sourceCategoryModel: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Adds a new MITRE category relationship (DEV)

    :param str idOrExtId: ID or external ID of the source MITRE category \(external ID requires an additional query parameter\: sourceCategoryModel\; version is already part of the request payload\)
    :param str externalId: External ID of the MITRE category relationship
    :param str targetCategory: ID or external ID of target MITRE category \(external ID requires setting an additional attribute\: targetCategoryModel\)
    :param str type: Enumerated type of the MITRE category relationship
    :param str version: Version of the MITRE ATT\&CK release\, has to match the version of the related categories
    :param str targetCategoryModel: Which threat model to use with target MITRE category external ID
    :param str sourceCategoryModel: Which threat model to use with external ID of the source MITRE category
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/{idOrExtId}/relations".format(idOrExtId=idOrExtId)
    headers = {}

    body = body or {}
    # Only send externalId if the argument was provided, don't send null values
    if externalId is not None:
        body.update({"externalId": externalId})
    # Only send targetCategory if the argument was provided, don't send null values
    if targetCategory is not None:
        body.update({"targetCategory": targetCategory})
    # Only send targetCategoryModel if the argument was provided, don't send null values
    if targetCategoryModel is not None:
        body.update({"targetCategoryModel": targetCategoryModel})
    # Only send type if the argument was provided, don't send null values
    if type is not None:
        body.update({"type": type})
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        body.update({"version": version})

    query_parameters = {}
    # Only send sourceCategoryModel if the argument was provided, don't send null values
    if sourceCategoryModel is not None:
        query_parameters.update({"sourceCategoryModel": sourceCategoryModel})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def add_or_update_mitre_model_version(
    model: str,
    version: str,
    markAsDefault: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Adds or updates MITRE model version info (DEV)

    :param str model: Threat model of the MITRE category
    :param str version: Version of the MITRE ATT\&CK release
    :param bool markAsDefault: A boolean flag indicating whether this version should be marked as the default one for this model \(default value is null\, meaning no change\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/model/{model}/versions/{version}".format(
        model=model, version=version
    )
    headers = {}

    body = body or {}
    # Only send markAsDefault if the argument was provided, don't send null values
    if markAsDefault is not None:
        body.update({"markAsDefault": markAsDefault})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def delete_mitre_category(
    idOrExtId: str,
    model: str = None,
    version: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Deletes an existing MITRE category (DEV)

    :param str idOrExtId: ID or external ID of the MITRE category \(external ID requires additional query parameters\: model\, version\)
    :param str model: Which threat model to use with external ID
    :param str version: Which version to use with external ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/{idOrExtId}".format(idOrExtId=idOrExtId)
    headers = {}

    query_parameters = {}
    # Only send model if the argument was provided, don't send null values
    if model is not None:
        query_parameters.update({"model": model})
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        query_parameters.update({"version": version})

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def delete_mitre_category_relationship(
    idOrExtId: str,
    version: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Deletes an existing MITRE category relationship (DEV)

    :param str idOrExtId: ID or external ID of the MITRE category relationship \(external ID requires an additional query parameter\: version\)
    :param str version: Which version to use with external ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/relations/{idOrExtId}".format(idOrExtId=idOrExtId)
    headers = {}

    query_parameters = {}
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        query_parameters.update({"version": version})

    log.debug("DELETE %s (headers: %s)" % (route, str(headers)))

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def get_mitre_category(
    idOrExtId: str,
    model: str = None,
    version: str = None,
    includeRelationships: bool = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Gets an existing MITRE category by ID or external ID (DEV)

    :param str idOrExtId: ID or external ID of the MITRE category \(external ID requires additional query parameters\: model\, version\)
    :param str model: Which threat model to use with external ID
    :param str version: Which version to use with external ID
    :param bool includeRelationships: Whether to include MITRE category relationships or not \(not included by default\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/{idOrExtId}".format(idOrExtId=idOrExtId)
    headers = {}

    query_parameters = {}
    # Only send model if the argument was provided, don't send null values
    if model is not None:
        query_parameters.update({"model": model})
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        query_parameters.update({"version": version})
    # Only send includeRelationships if the argument was provided, don't send null values
    if includeRelationships is not None:
        query_parameters.update({"includeRelationships": includeRelationships})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def get_mitre_category_relationship(
    idOrExtId: str,
    version: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Gets an existing MITRE category relationship by ID or external ID (DEV)

    :param str idOrExtId: ID or external ID of the MITRE category relationship \(external ID requires an additional query parameter\: version\)
    :param str version: Which version to use with external ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/relations/{idOrExtId}".format(idOrExtId=idOrExtId)
    headers = {}

    query_parameters = {}
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        query_parameters.update({"version": version})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def get_mitre_model_version(
    model: str,
    version: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Gets MITRE model version info by model and version (DEV)

    :param str model: Threat model of the MITRE category
    :param str version: Version of the MITRE ATT\&CK release
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/model/{model}/versions/{version}".format(
        model=model, version=version
    )
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def list_mitre_categories(
    type: str = None,
    model: str = None,
    version: str = None,
    includeDeleted: bool = None,
    includeDeprecated: bool = None,
    includeRelationships: bool = None,
    sortBy: str = None,
    limit: int = None,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""List MITRE categories (DEV)

    :param list type: Type\(s\) of the included MITRE categories \(all by default\)
    :param list model: Threat model\(s\) of the included MITRE categories \(all by default\)
    :param list version: Version\(s\) of the included MITRE categories \(all by default\)
    :param bool includeDeleted: Whether to include deleted MITRE categories or not \(not included by default\)
    :param bool includeDeprecated: Whether to include deprecated MITRE categories or not \(not included by default\)
    :param bool includeRelationships: Whether to include MITRE category relationships or not \(not included by default\)
    :param list sortBy: Field\(s\) to sort results by \(without sign is ascending\, with \'\-\' sign is descending\)
    :param int limit: The max amount of items to return \(25 by default\, 0 means no limit\)
    :param int offset: The amount of items to skip from the beginning \(0 by default\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre".format()
    headers = {}

    query_parameters = {}
    # Only send type if the argument was provided, don't send null values
    if type is not None:
        query_parameters.update({"type": type})
    # Only send model if the argument was provided, don't send null values
    if model is not None:
        query_parameters.update({"model": model})
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        query_parameters.update({"version": version})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    # Only send includeDeprecated if the argument was provided, don't send null values
    if includeDeprecated is not None:
        query_parameters.update({"includeDeprecated": includeDeprecated})
    # Only send includeRelationships if the argument was provided, don't send null values
    if includeRelationships is not None:
        query_parameters.update({"includeRelationships": includeRelationships})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def list_mitre_category_relationships(
    idOrExtId: str,
    model: str = None,
    version: str = None,
    includeDeleted: bool = None,
    sortBy: str = None,
    limit: int = None,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""List MITRE category relationships (DEV)

    :param str idOrExtId: ID or external ID of the source or target MITRE category \(external ID requires additional query parameters\: model\, version\)
    :param str model: Which threat model to use with external ID of the MITRE category
    :param str version: Which version to use with external ID of the MITRE category
    :param bool includeDeleted: Whether to include deleted MITRE category relationships or not \(not included by default\)
    :param list sortBy: Field\(s\) to sort results by \(without sign is ascending\, with \'\-\' sign is descending\)
    :param int limit: The max amount of items to return \(25 by default\, 0 means no limit\)
    :param int offset: The amount of items to skip from the beginning \(0 by default\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/{idOrExtId}/relations".format(idOrExtId=idOrExtId)
    headers = {}

    query_parameters = {}
    # Only send model if the argument was provided, don't send null values
    if model is not None:
        query_parameters.update({"model": model})
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        query_parameters.update({"version": version})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def list_mitre_model_versions(
    model: str,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
) -> dict:
    r"""Lists available MITRE model versions' info by model (DEV)

    :param str model: Threat model of the MITRE category
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/model/{model}/versions".format(model=model)
    headers = {}

    log.debug("GET %s (headers: %s)" % (route, str(headers)))

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def search_mitre_categories(
    id: str = None,
    externalId: str = None,
    shortName: str = None,
    type: str = None,
    model: str = None,
    version: str = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    keywords: str = None,
    subCriteria: dict = None,
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = "all",
    includeRelationships: bool = None,
    sortBy: str = None,
    limit: int = 25,
    offset: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Searches for MITRE categories (DEV)

    :param list id: A set of IDs of the searched MITRE categories
    :param list externalId: A set of external IDs of the searched MITRE categories
    :param list shortName: A set of short names of the searched MITRE categories
    :param list type: A set of enumerated types of the searched MITRE categories
    :param list model: A set of enumerated threat models of the searched MITRE categories
    :param list version: A set of versions of the searched MITRE categories
    :param list includeFlags: A set of included enumerated flags of the searched MITRE categories
    :param list excludeFlags: A set of excluded enumerated flags of the searched MITRE categories
    :param list keywords: Keywords that are searched for in the fields of MITRE categories
    :param list subCriteria: Set additional search criteria with AND\, OR or AND NOT
    :param list keywordFieldStrategy: A set of fields of the MITRE categories where the keywords are searched
    :param str keywordMatchStrategy: Selected keyword matching strategy for searching in the fields of MITRE categories
    :param bool includeRelationships: Whether to include MITRE category relationships in search results or not
    :param list sortBy: Fields to sort results by \(without sign is ascending\, with \'\-\' sign is descending\)
    :param int limit: The max amount of items to return
    :param int offset: The amount of items to skip from the beginning
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/search".format()
    headers = {}

    body = body or {}
    # Only send id if the argument was provided, don't send null values
    if id is not None:
        body.update({"id": id})
    # Only send externalId if the argument was provided, don't send null values
    if externalId is not None:
        body.update({"externalId": externalId})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send type if the argument was provided, don't send null values
    if type is not None:
        body.update({"type": type})
    # Only send model if the argument was provided, don't send null values
    if model is not None:
        body.update({"model": model})
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        body.update({"version": version})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send includeRelationships if the argument was provided, don't send null values
    if includeRelationships is not None:
        body.update({"includeRelationships": includeRelationships})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def update_mitre_category(
    idOrExtId: str,
    name: str = None,
    type: str = None,
    url: str = None,
    deprecated: bool = None,
    model: str = None,
    version: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Updates an existing MITRE category (DEV)

    :param str idOrExtId: ID or external ID of the MITRE category \(external ID requires additional query parameters\: model\, version\)
    :param str name: Detailed name of the MITRE category
    :param str type: Enumerated type of the MITRE category
    :param str url: URL of the external MITRE category page
    :param bool deprecated: A boolean flag indicating if the MITRE category is deprecated
    :param str model: Which threat model to use with external ID
    :param str version: Which version to use with external ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/{idOrExtId}".format(idOrExtId=idOrExtId)
    headers = {}

    body = body or {}
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send type if the argument was provided, don't send null values
    if type is not None:
        body.update({"type": type})
    # Only send url if the argument was provided, don't send null values
    if url is not None:
        body.update({"url": url})
    # Only send deprecated if the argument was provided, don't send null values
    if deprecated is not None:
        body.update({"deprecated": deprecated})

    query_parameters = {}
    # Only send model if the argument was provided, don't send null values
    if model is not None:
        query_parameters.update({"model": model})
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        query_parameters.update({"version": version})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


@register_command(extending=("alarms", "v1", "mitre"), module=argus_cli_module)
def update_mitre_category_relationship(
    idOrExtId: str,
    type: str = None,
    version: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Updates an existing MITRE category relationship (DEV)

    :param str idOrExtId: ID or external ID of the MITRE category relationship \(external ID requires an additional query parameter\: version\)
    :param str type: Enumerated type of the MITRE category relationship
    :param str version: Which version to use with external ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/alarms/v1/mitre/relations/{idOrExtId}".format(idOrExtId=idOrExtId)
    headers = {}

    body = body or {}
    # Only send type if the argument was provided, don't send null values
    if type is not None:
        body.update({"type": type})

    query_parameters = {}
    # Only send version if the argument was provided, don't send null values
    if version is not None:
        query_parameters.update({"version": version})

    log.debug("PUT %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
