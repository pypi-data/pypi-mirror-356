"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("authentication", "v1", "impersonate"), module=argus_cli_module
)
def impersonate(
    customer: str = None,
    domain: str = None,
    function: str = None,
    user: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Request an impersonated session (INTERNAL)

    :param list customer: Set of customers the session should be valid for. If not specified\, customers will be inherited from active permissions.
    :param str domain: Domain of user to impersonate \(id or name\)
    :param list function: Set of functions\/roles \(by name\) the session should be granted \(default is all current functions\). Cannot extend the current set of functions.
    :param str user: Username or ID of user to impersonate.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/impersonate".format()
    headers = {}

    body = body or {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        body.update({"domain": domain})
    # Only send function if the argument was provided, don't send null values
    if function is not None:
        body.update({"function": function})
    # Only send user if the argument was provided, don't send null values
    if user is not None:
        body.update({"user": user})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
