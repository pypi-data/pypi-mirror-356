"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)


@register_command(
    extending=("authentication", "v1", "authorization", "validate"),
    module=argus_cli_module,
)
def validate_user_authorization(
    authorization: str,
    operation: str,
    allowExpired: bool = None,
    allowReplay: bool = None,
    context: dict = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    r"""Validate authorization token (PUBLIC)

    :param str authorization: The authorization JWT token
    :param str operation: The name of the operation
    :param bool allowExpired: If true\, an expired authorization is ignored. Defaults to false \(will fail if token is expired\)
    :param bool allowReplay: If true\, previous validations of the same authorization is ignored. Defaults to false \(will fail if token was previously validated\)
    :param dict context: Context variables to scope this authorization. All context variables must be present in the authorization token and their value must be equal to those provided here.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/authorization/validate".format()
    headers = {}

    body = body or {}
    # Only send allowExpired if the argument was provided, don't send null values
    if allowExpired is not None:
        body.update({"allowExpired": allowExpired})
    # Only send allowReplay if the argument was provided, don't send null values
    if allowReplay is not None:
        body.update({"allowReplay": allowReplay})
    # Only send authorization if the argument was provided, don't send null values
    if authorization is not None:
        body.update({"authorization": authorization})
    # Only send context if the argument was provided, don't send null values
    if context is not None:
        body.update({"context": context})
    # Only send operation if the argument was provided, don't send null values
    if operation is not None:
        body.update({"operation": operation})

    log.debug(
        "POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or "")
    )

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
