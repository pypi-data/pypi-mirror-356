"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def create_property_mapper(
    configuration: str,
    name: str,
    shortName: str,
    description: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Create new property mapper (INTERNAL)

    :param str configuration: The JSON configuration
    :param str name: Name of the property mapper configuration
    :param str shortName: Unique short name of the property mapper configuration
    :param str description: The property mapper description
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/propertymapper".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send configuration if the argument was provided, don't send null values
    if configuration is not None:
        body.update({"configuration": configuration})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_property_mapper(
    idOrShortName: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete a property mapper by its id or shortname. This creates a revision with the same contents as the primary version at the time the request is made.The new primary is, however, flagged as deleted. NB: You can only delete the current primary and only if it is not already deleted. (INTERNAL)

    :param str idOrShortName: ID or shortname of a property mapper
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/propertymapper/{idOrShortName}".format(
        idOrShortName=idOrShortName
    )

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_property_mapper(
    idOrShortName: str,
    includeConfig: bool = True,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Get a property mapper by its id or shortname.Fetching by short name will always return the master revision.Fetching by ID will return the specifically requested property mapper revision. (INTERNAL)

    :param str idOrShortName: ID or shortName of a property mapper
    :param bool includeConfig: Whether to include the property mapper config too
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/propertymapper/{idOrShortName}".format(
        idOrShortName=idOrShortName
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send includeConfig if the argument was provided, don't send null values
    if includeConfig is not None:
        query_parameters.update({"includeConfig": includeConfig})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_property_mapper_revision(
    idOrShortName: str,
    revision: int,
    includeConfig: bool = True,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Get a property mapper by its id or shortname and revision number (INTERNAL)

    :param str idOrShortName: ID or shortName of a property mapper
    :param int revision: Property mapper revision number
    :param bool includeConfig: Whether to include the property mapper config too
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/propertymapper/{idOrShortName}/revisions/{revision}".format(
        idOrShortName=idOrShortName, revision=revision
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send includeConfig if the argument was provided, don't send null values
    if includeConfig is not None:
        query_parameters.update({"includeConfig": includeConfig})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_property_mapper_revisions(
    idOrShortName: str,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List a property mapper's - retrieved by its id or shortname - revisions. (INTERNAL)

    :param str idOrShortName: ID or shortname of a property mapper
    :param int limit: Limit results
    :param int offset: Offset results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/propertymapper/{idOrShortName}/revisions".format(
        idOrShortName=idOrShortName
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_property_mappers(
    keyword: str = None,
    keywordField: str = None,
    timestampField: str = None,
    sortBy: str = None,
    limit: int = 25,
    offset: int = 0,
    includeDeleted: bool = False,
    includeConfig: bool = True,
    keywordMatch: str = "all",
    timestampMatch: str = "all",
    start: int = 0,
    end: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List primary property mappers matching the provided criteria (INTERNAL)

    :param list keyword: Search by keywords
    :param list keywordField: Set field strategy for keyword search
    :param list timestampField: Set field strategy for timestamp filtering
    :param list sortBy: Field\(s\) to sort by \- refer to the search POST endpoint to see which fields are permitted
    :param int limit: Maximum number of hits to return
    :param int offset: Number of hits to skip in the result set \- useful for pagination
    :param bool includeDeleted: Include deleted
    :param bool includeConfig: Whether to include the property mapper config too
    :param str keywordMatch: Set match strategy for keyword search
    :param str timestampMatch: Set match strategy for timestamp filtering
    :param int start: Lower bound timestamp filter value
    :param int end: Upper bound timestamp filter value
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/propertymapper".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    # Only send includeConfig if the argument was provided, don't send null values
    if includeConfig is not None:
        query_parameters.update({"includeConfig": includeConfig})
    # Only send keywordMatch if the argument was provided, don't send null values
    if keywordMatch is not None:
        query_parameters.update({"keywordMatch": keywordMatch})
    # Only send timestampMatch if the argument was provided, don't send null values
    if timestampMatch is not None:
        query_parameters.update({"timestampMatch": timestampMatch})
    # Only send start if the argument was provided, don't send null values
    if start is not None:
        query_parameters.update({"start": start})
    # Only send end if the argument was provided, don't send null values
    if end is not None:
        query_parameters.update({"end": end})
    # Only send keyword if the argument was provided, don't send null values
    if keyword is not None:
        query_parameters.update({"keyword": keyword})
    # Only send keywordField if the argument was provided, don't send null values
    if keywordField is not None:
        query_parameters.update({"keywordField": keywordField})
    # Only send timestampField if the argument was provided, don't send null values
    if timestampField is not None:
        query_parameters.update({"timestampField": timestampField})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def restore_property_mapper(
    idOrShortName: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Restore a property mapper by its id or shortname. This creates a revision with the same contents as the primary version at the time the request is made.The new primary is, however, no longer flagged as deleted. NB: You can only restore the current primary and only if it is already deleted. (INTERNAL)

    :param str idOrShortName: ID or shortname of a property mapper
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/propertymapper/{idOrShortName}/restore".format(
        idOrShortName=idOrShortName
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def rollback_property_mapper(
    idOrShortName: str,
    revision: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Rollback a property mapper to the requested revision. Similar to updating a property mapper, this creates a revision based on the contents of the primary version at the time the request is made. The new primary property mapper will contain the same values as the rollback target version.NB: You cannot rollback to a deleted version or to the current primary. (INTERNAL)

    :param str idOrShortName: ID or shortname of a property mapper
    :param int revision: Revision to rollback to
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/propertymapper/{idOrShortName}/revisions/{revision}/rollback".format(
        idOrShortName=idOrShortName, revision=revision
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def search_property_mappers(
    idOrShortName: str = None,
    keywords: str = None,
    sortBy: str = None,
    subCriteria: dict = None,
    endTimestamp: int = None,
    includeConfig: bool = None,
    includeDeleted: bool = None,
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = "all",
    limit: int = 25,
    offset: int = None,
    startTimestamp: int = None,
    timeFieldStrategy: str = None,
    timeMatchStrategy: str = "any",
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Search for primary property mappers (INTERNAL)

    :param list idOrShortName: Filter by specific property mapper IDs or shortName.
    :param list keywords: Search for keywords against fields defined by keywordFieldStrategy
    :param list sortBy:
    :param list subCriteria: Set additional criteria which are applied with logical OR by default
    :param int endTimestamp: Restrict to a time frame based on the set timeFieldStrategy \(end timestamp\)
    :param bool includeConfig: Whether to include the property mapper JSON config in the result set
    :param bool includeDeleted: Whether to include deleted property mappers
    :param list keywordFieldStrategy: Defines which fields will be searched by keywords \(default all supported fields\)
    :param str keywordMatchStrategy: Defines how strict different keywords should be matched \(default match all keywords\)
    :param int limit: Limit maximum amount of results
    :param int offset: Skip specified amount of results
    :param int startTimestamp: Restrict to a time frame based on the set timeFieldStrategy \(start timestamp\)
    :param list timeFieldStrategy: Defines which timestamps fields will be filtered with start\/endTimestamp
    :param str timeMatchStrategy: Defines how strict to match against different timestamps \(all\/any\) using start and end timestamp \(default any\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/propertymapper/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send idOrShortName if the argument was provided, don't send null values
    if idOrShortName is not None:
        body.update({"idOrShortName": idOrShortName})
    # Only send includeConfig if the argument was provided, don't send null values
    if includeConfig is not None:
        body.update({"includeConfig": includeConfig})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send timeFieldStrategy if the argument was provided, don't send null values
    if timeFieldStrategy is not None:
        body.update({"timeFieldStrategy": timeFieldStrategy})
    # Only send timeMatchStrategy if the argument was provided, don't send null values
    if timeMatchStrategy is not None:
        body.update({"timeMatchStrategy": timeMatchStrategy})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_property_mapper(
    idOrShortName: str,
    configuration: str = None,
    description: str = None,
    name: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Update a property mapper. This creates a revision based on the contents of the primary version at the time the request is made.The new primary property mapper's contents reflects the update request. (INTERNAL)

    :param str idOrShortName: ID or shortname of a property mapper
    :param str configuration: The JSON configuration
    :param str description: The property mapper description
    :param str name: Name of the property mapper configuration
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/propertymapper/{idOrShortName}".format(
        idOrShortName=idOrShortName
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send configuration if the argument was provided, don't send null values
    if configuration is not None:
        body.update({"configuration": configuration})
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
