"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional
if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def update_instance_status2(
    id: int,
    containerID: str = None,
    identifiers: dict = None,
    state: str = None,
    components: dict = None,
    instanceID: int = None,
    runningInstanceRevision: int = None,
    runningTemplateRevision: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """null (INTERNAL)
    
    :param int id: ID of instance
    :param str containerID: ID of the currently running container
    :param dict identifiers: Any identifiers for this instance container
    :param str state: The state of this instance container
    :param list components: An optional list of component updates for the root container
    :param int instanceID: The instanceID of this container
    :param int runningInstanceRevision: The instance revision of the running container
    :param int runningTemplateRevision: The template revision of the running container
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :returns: dictionary translated from JSON
    """

    route = "/componentadmin/v2/instance/{id}/status".format(id=id)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send containerID if the argument was provided, don't send null values
    if containerID is not None:
        body.update({"containerID": containerID})
    # Only send identifiers if the argument was provided, don't send null values
    if identifiers is not None:
        body.update({"identifiers": identifiers})
    # Only send state if the argument was provided, don't send null values
    if state is not None:
        body.update({"state": state})
    # Only send components if the argument was provided, don't send null values
    if components is not None:
        body.update({"components": components})
    # Only send instanceID if the argument was provided, don't send null values
    if instanceID is not None:
        body.update({"instanceID": instanceID})
    # Only send runningInstanceRevision if the argument was provided, don't send null values
    if runningInstanceRevision is not None:
        body.update({"runningInstanceRevision": runningInstanceRevision})
    # Only send runningTemplateRevision if the argument was provided, don't send null values
    if runningTemplateRevision is not None:
        body.update({"runningTemplateRevision": runningTemplateRevision})

    query_parameters = {}

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
