"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession
from requests import Response


def search_records(
    query: str,
    aggregateResult: bool = None,
    includeAnonymousResults: bool = None,
    rrClass: str = None,
    rrType: str = None,
    customerID: int = None,
    tlp: str = None,
    limit: int = None,
    sortBy: str = None,
    offset: int = None,
    queryMatchStrategy: str = "exact",
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Search against PassiveDNS with criteria and return matching records (PUBLIC)

    :param str query: Lookup query
    :param bool aggregateResult: Whether aggregate results \(default true\)
    :param bool includeAnonymousResults: Whether include anonymous results \(default true\)
    :param list rrClass: Lookup with specified record classes
    :param list rrType: Lookup with specified record types
    :param list customerID: Lookup for specified customer IDs
    :param list tlp: Lookup with specified TLPs\, public usage only TLP white allowed
    :param int limit: Max number of results to be returned\, default unset means default limit 25 will be used\, 0 means unlimited
    :param list sortBy: The field on which to sort the records
    :param int offset: Number of results to be skipped first\, default 0
    :param str queryMatchStrategy: Query match strategy\, partial must be set to use the wildcard
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises ResourceLimitExceeded.Exception: on 402
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: ``requests.Response`` object or dictionary translated from JSON
    """

    route = "/pdns/v3/search".format()

    session = api_session or _get_session()
    headers = {}
    headers["content"] = None
    if json:
        headers["content"] = "application/json"

    body = body or {}
    # Only send query if the argument was provided, don't send null values
    if query is not None:
        body.update({"query": query})
    # Only send aggregateResult if the argument was provided, don't send null values
    if aggregateResult is not None:
        body.update({"aggregateResult": aggregateResult})
    # Only send includeAnonymousResults if the argument was provided, don't send null values
    if includeAnonymousResults is not None:
        body.update({"includeAnonymousResults": includeAnonymousResults})
    # Only send rrClass if the argument was provided, don't send null values
    if rrClass is not None:
        body.update({"rrClass": rrClass})
    # Only send rrType if the argument was provided, don't send null values
    if rrType is not None:
        body.update({"rrType": rrType})
    # Only send customerID if the argument was provided, don't send null values
    if customerID is not None:
        body.update({"customerID": customerID})
    # Only send tlp if the argument was provided, don't send null values
    if tlp is not None:
        body.update({"tlp": tlp})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send queryMatchStrategy if the argument was provided, don't send null values
    if queryMatchStrategy is not None:
        body.update({"queryMatchStrategy": queryMatchStrategy})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
