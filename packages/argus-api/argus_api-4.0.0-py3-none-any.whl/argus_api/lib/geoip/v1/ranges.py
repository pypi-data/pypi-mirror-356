"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def add_or_update_ranges(
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Add or update IP ranges (DEV)

    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/ranges".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def find_ranges(
    country: str = None,
    regionID: int = None,
    locationID: int = None,
    rangeID: int = None,
    ipAddress: str = None,
    addressFamily: str = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    includeDeleted: bool = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    limit: int = None,
    offset: int = None,
    sortBy: str = None,
    startIPAddress: str = None,
    fromIP: str = None,
    toIP: str = None,
    countTimeout: int = -1,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Find IP ranges (INTERNAL)

    :param list country: Only return ranges from these countries \(by country ID or two\-letter code\).
    :param list regionID: Only return ranges from these regions \(by region ID\).
    :param list locationID: Only return ranges from these locations \(by location ID\).
    :param list rangeID: Only return specific ranges \(by ID\).
    :param list ipAddress: Only return ranges which cover any of these IP\-addresses. \[format\:ip\]
    :param str addressFamily: Only return ranges for this address family range \(ipv4 or ipv6\).
    :param list includeFlags: A set of included enumerated flags of the searched ranges.
    :param list excludeFlags: A set of excluded enumerated flags of the searched ranges.
    :param bool includeDeleted: If true\, also include ranges marked as deleted.
    :param int startTimestamp: Search for ranges having lastUpdatedTimestamp greater than or equal to this timestamp.
    :param int endTimestamp: Search for ranges having lastUpdatedTimestamp less than or equal to this timestamp.
    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param list sortBy: Fields to sort results by \(without a sign is ascending\, with \'\-\' sign is descending\).
    :param list startIPAddress: Only return ranges where the range start address matches one of these IP\-addresses. \[format\:ip\]
    :param str fromIP: Only return ranges where the range start address is greater than or equal to this IP\-address. \[format\:ip\]
    :param str toIP: Only return ranges where the range start address is less than or equal to this IP\-address. \[format\:ip\]
    :param int countTimeout: Max wait in seconds for the count query to run. Set the value to \-1 to skip counting \(count will be returned \-1\). Set the value to 0 to execute the count query as long as the service allows\, max allowed timeout value is 30 \(seconds\)\, default value is \-1.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/ranges/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send country if the argument was provided, don't send null values
    if country is not None:
        body.update({"country": country})
    # Only send regionID if the argument was provided, don't send null values
    if regionID is not None:
        body.update({"regionID": regionID})
    # Only send locationID if the argument was provided, don't send null values
    if locationID is not None:
        body.update({"locationID": locationID})
    # Only send rangeID if the argument was provided, don't send null values
    if rangeID is not None:
        body.update({"rangeID": rangeID})
    # Only send ipAddress if the argument was provided, don't send null values
    if ipAddress is not None:
        body.update({"ipAddress": ipAddress})
    # Only send addressFamily if the argument was provided, don't send null values
    if addressFamily is not None:
        body.update({"addressFamily": addressFamily})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send countTimeout if the argument was provided, don't send null values
    if countTimeout is not None:
        body.update({"countTimeout": countTimeout})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send startIPAddress if the argument was provided, don't send null values
    if startIPAddress is not None:
        body.update({"startIPAddress": startIPAddress})
    # Only send fromIP if the argument was provided, don't send null values
    if fromIP is not None:
        body.update({"fromIP": fromIP})
    # Only send toIP if the argument was provided, don't send null values
    if toIP is not None:
        body.update({"toIP": toIP})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_ranges(
    sortBy: str = None,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List IP ranges (INTERNAL)

    :param list sortBy: Fields to sort results by \(without a sign is ascending\, with \'\-\' sign is descending\, supported fields are\: id\, startIP\, endIP\, locationID\)
    :param int limit: Max number of items to return
    :param int offset: The amount of items to skip from the beginning
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/ranges".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def lookup_ip(
    ip: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Lookup IP range (INTERNAL)

    :param str ip: IP\-address that has to be covered by the range
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/ranges/{ip}".format(ip=ip)

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
