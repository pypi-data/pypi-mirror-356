"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def add_location(
    id: int = None,
    extID: int = None,
    countryCode: str = None,
    locationName: str = None,
    lastUpdatedTimestamp: int = None,
    flags: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Add new location (DEV)

    :param int id:
    :param int extID: The external ID of the location \(0 if not set\).
    :param str countryCode: The two\-letter code of the country where this location is in.
    :param str locationName: The name of the the location.
    :param int lastUpdatedTimestamp: The timestamp when this location was last updated.
    :param list flags: Flags assigned to the object.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/location".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send id if the argument was provided, don't send null values
    if id is not None:
        body.update({"id": id})
    # Only send extID if the argument was provided, don't send null values
    if extID is not None:
        body.update({"extID": extID})
    # Only send countryCode if the argument was provided, don't send null values
    if countryCode is not None:
        body.update({"countryCode": countryCode})
    # Only send locationName if the argument was provided, don't send null values
    if locationName is not None:
        body.update({"locationName": locationName})
    # Only send lastUpdatedTimestamp if the argument was provided, don't send null values
    if lastUpdatedTimestamp is not None:
        body.update({"lastUpdatedTimestamp": lastUpdatedTimestamp})
    # Only send flags if the argument was provided, don't send null values
    if flags is not None:
        body.update({"flags": flags})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_location(
    id: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Lookup location (INTERNAL)

    :param int id: Location ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/location/{id}".format(id=id)

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_locations(
    sortBy: str = None,
    limit: int = 25,
    offset: int = 0,
    fromID: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List locations (INTERNAL)

    :param list sortBy: Fields to sort results by \(without a sign is ascending\, with \'\-\' sign is descending\, supported fields are\: id\, externalID\, countryCode\, regionCode\)
    :param int limit: Max number of items to return
    :param int offset: The amount of items to skip from the beginning
    :param int fromID: Only return locations with numeric ID greater than or equal to this value
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/location".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send fromID if the argument was provided, don't send null values
    if fromID is not None:
        query_parameters.update({"fromID": fromID})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def search_locations(
    country: str = None,
    extID: int = None,
    fromID: int = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    includeDeleted: bool = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    limit: int = None,
    offset: int = None,
    sortBy: str = None,
    countTimeout: int = -1,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Find locations (INTERNAL)

    :param list country: Only return locations from these countries \(by country ID or two\-letter code\).
    :param list extID: Only return locations bound to these external IDs.
    :param int fromID: Only return locations with IDs greater than or equal to this ID.
    :param list includeFlags: A set of included enumerated flags of the searched locations.
    :param list excludeFlags: A set of excluded enumerated flags of the searched locations.
    :param bool includeDeleted: If true\, also include locations marked as deleted.
    :param int startTimestamp: Search for locations having lastUpdatedTimestamp greater than or equal to this timestamp.
    :param int endTimestamp: Search for locations having lastUpdatedTimestamp lower than or equal to this timestamp.
    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param list sortBy: Fields to sort results by \(without a sign is ascending\, with \'\-\' sign is descending\).
    :param int countTimeout: Max wait in seconds for the count query to run. Set the value to \-1 to skip counting \(count will be returned \-1\). Set the value to 0 to execute the count query as long as the service allows\, max allowed timeout value is 30 \(seconds\)\, default value is \-1.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/location/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send country if the argument was provided, don't send null values
    if country is not None:
        body.update({"country": country})
    # Only send extID if the argument was provided, don't send null values
    if extID is not None:
        body.update({"extID": extID})
    # Only send fromID if the argument was provided, don't send null values
    if fromID is not None:
        body.update({"fromID": fromID})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send countTimeout if the argument was provided, don't send null values
    if countTimeout is not None:
        body.update({"countTimeout": countTimeout})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
