"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def add_sensor_type(
    shortName: str,
    name: str,
    url: str = None,
    expectedSensorUpdateTime: int = None,
    department: str = "none",
    monitorCollectionOnly: bool = None,
    reportingSeverity: str = "medium",
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Create a new sensor type (INTERNAL)

    :param str shortName: Short name of Sensor Type\, needs to be unique
    :param str name: Name of sensor type
    :param str url: URL of sensor type
    :param int expectedSensorUpdateTime: Expected maximum update time duration in millis of sensor which belong to the type
    :param str department: Department that the sensor type belongs to
    :param bool monitorCollectionOnly: Flag to determine whether sensors of this type are monitored by analysis or only by collection
    :param str reportingSeverity: Flag to determine escalation workflow for Sensors of this type
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/sensors/v1/type".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send url if the argument was provided, don't send null values
    if url is not None:
        body.update({"url": url})
    # Only send expectedSensorUpdateTime if the argument was provided, don't send null values
    if expectedSensorUpdateTime is not None:
        body.update({"expectedSensorUpdateTime": expectedSensorUpdateTime})
    # Only send department if the argument was provided, don't send null values
    if department is not None:
        body.update({"department": department})
    # Only send monitorCollectionOnly if the argument was provided, don't send null values
    if monitorCollectionOnly is not None:
        body.update({"monitorCollectionOnly": monitorCollectionOnly})
    # Only send reportingSeverity if the argument was provided, don't send null values
    if reportingSeverity is not None:
        body.update({"reportingSeverity": reportingSeverity})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_sensor_type(
    idOrShortName: str,
    newType: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete a sensor type and update existing Sensors of that type to a new sensor type (INTERNAL)

    :param str idOrShortName: Sensor type ID or short name
    :param str newType: Sensor type delete request
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/sensors/v1/type/{idOrShortName}".format(idOrShortName=idOrShortName)

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send newType if the argument was provided, don't send null values
    if newType is not None:
        query_parameters.update({"newType": newType})

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_sensor_type(
    idOrShortName: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Get sensor type by ID or short name (INTERNAL)

    :param str idOrShortName: Sensor type ID or short name
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/sensors/v1/type/{idOrShortName}".format(idOrShortName=idOrShortName)

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_sensor_types(
    includeDeleted: bool = True,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Get all sensor types (INTERNAL)

    :param bool includeDeleted: Include deleted sensor types in the response
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/sensors/v1/type".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_sensor_type(
    idOrShortName: str,
    shortName: str = None,
    name: str = None,
    url: str = None,
    expectedSensorUpdateTime: int = None,
    department: str = None,
    monitorCollectionOnly: bool = None,
    reportingSeverity: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Update a sensor type (INTERNAL)

    :param str idOrShortName: Sensor type ID or short name
    :param str shortName: New unique short name of the Sensor Type.
    :param str name: New name of the Sensor Type
    :param str url: New URL of the Sensor Type
    :param int expectedSensorUpdateTime: Update expected Sensor update time for the Sensor Type
    :param str department: Update department of the Sensor Type
    :param bool monitorCollectionOnly: Flag to determine whether Sensors of this Type are monitored by analysis or only by collection
    :param str reportingSeverity: Flag to determine escalation workflow for Sensors of this type
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/sensors/v1/type/{idOrShortName}".format(idOrShortName=idOrShortName)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send url if the argument was provided, don't send null values
    if url is not None:
        body.update({"url": url})
    # Only send expectedSensorUpdateTime if the argument was provided, don't send null values
    if expectedSensorUpdateTime is not None:
        body.update({"expectedSensorUpdateTime": expectedSensorUpdateTime})
    # Only send department if the argument was provided, don't send null values
    if department is not None:
        body.update({"department": department})
    # Only send monitorCollectionOnly if the argument was provided, don't send null values
    if monitorCollectionOnly is not None:
        body.update({"monitorCollectionOnly": monitorCollectionOnly})
    # Only send reportingSeverity if the argument was provided, don't send null values
    if reportingSeverity is not None:
        body.update({"reportingSeverity": reportingSeverity})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
