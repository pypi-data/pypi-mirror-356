"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def add_openid_group_mapping(
    idOrShortname: str,
    argusGroup: str,
    externalGroupName: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Add a group mapping to a OpenID provider (INTERNAL)

    :param str idOrShortname: ID or shortname of provider to update
    :param str argusGroup: The name or ID of the argus group to map to
    :param str externalGroupName: The name of the group to map from \(as it appears in the ID\-token group claim\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises InvalidArgumentsException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/{idOrShortname}/groupmappings".format(
        idOrShortname=idOrShortname
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send argusGroup if the argument was provided, don't send null values
    if argusGroup is not None:
        body.update({"argusGroup": argusGroup})
    # Only send externalGroupName if the argument was provided, don't send null values
    if externalGroupName is not None:
        body.update({"externalGroupName": externalGroupName})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def add_openid_provider(
    claimsMapping: dict,
    clientID: str,
    name: str,
    providerURI: str,
    scope: str,
    shortName: str,
    authorizationPrompt: str = "login",
    responseMode: str = "none",
    responseType: str = "idToken",
    certificate: str = None,
    configurationURI: str = None,
    customer: str = None,
    domain: str = None,
    emailDomains: str = None,
    issuer: str = None,
    jwks: str = None,
    jwksURI: str = None,
    newUserMapping: bool = None,
    secret: str = None,
    tokenURI: str = None,
    updateGroupMapping: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Define new OpenID provider (INTERNAL)

    :param dict claimsMapping:
    :param str clientID: The OAuth ClientID of this provider
    :param str name: The name of this provider
    :param str providerURI: The URI to redirect to to initiate OpenID authentication flow
    :param list scope: Define extra scopes to request \(in addition to openid\)
    :param str shortName: Set a shortname for this provider
    :param str authorizationPrompt: Define prompt type to request on authorization
    :param str responseMode: Define response mode to request from provider
    :param str responseType: Define response type to request from provider
    :param str certificate:
    :param str configurationURI: The URI to the OpenID autodiscovery document
    :param str customer: The id or shortname of the customer this provider is bound to. If customer is a customer group\, subcustomer users are also eligible for this provider. If not set\, this provider will be domain global.
    :param str domain: The id or shortname of the domain this provider is bound to\, if this is a domain\-global provider. If not set\, customer must be set.
    :param list emailDomains: Define email domains for automatic enrollment of users
    :param str issuer: Define a specific issuer to require on id\-tokens. If not set\, the issuer is expected to be a prefix of the providerURI.
    :param str jwks:
    :param str jwksURI: The URI to the OpenID JWKS document. Exactly one of certificate\, jwks and jwksURI can be used. Setting jwksURI will enable automatic refresh of jwks.
    :param bool newUserMapping: Option to enable automatic mapping of new users. To map new users\, the claims mapping for name and email must be set.
    :param str secret: Define secret to use for the token endpoint. Required for responseType\=code
    :param str tokenURI: The URI for the token endpoint. Required for responseType\=code.
    :param bool updateGroupMapping: Option to enable updates of automatic group mappings. This requires the claims mapping for groups to be set.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send authorizationPrompt if the argument was provided, don't send null values
    if authorizationPrompt is not None:
        body.update({"authorizationPrompt": authorizationPrompt})
    # Only send certificate if the argument was provided, don't send null values
    if certificate is not None:
        body.update({"certificate": certificate})
    # Only send claimsMapping if the argument was provided, don't send null values
    if claimsMapping is not None:
        body.update({"claimsMapping": claimsMapping})
    # Only send clientID if the argument was provided, don't send null values
    if clientID is not None:
        body.update({"clientID": clientID})
    # Only send configurationURI if the argument was provided, don't send null values
    if configurationURI is not None:
        body.update({"configurationURI": configurationURI})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send domain if the argument was provided, don't send null values
    if domain is not None:
        body.update({"domain": domain})
    # Only send emailDomains if the argument was provided, don't send null values
    if emailDomains is not None:
        body.update({"emailDomains": emailDomains})
    # Only send issuer if the argument was provided, don't send null values
    if issuer is not None:
        body.update({"issuer": issuer})
    # Only send jwks if the argument was provided, don't send null values
    if jwks is not None:
        body.update({"jwks": jwks})
    # Only send jwksURI if the argument was provided, don't send null values
    if jwksURI is not None:
        body.update({"jwksURI": jwksURI})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send newUserMapping if the argument was provided, don't send null values
    if newUserMapping is not None:
        body.update({"newUserMapping": newUserMapping})
    # Only send providerURI if the argument was provided, don't send null values
    if providerURI is not None:
        body.update({"providerURI": providerURI})
    # Only send responseMode if the argument was provided, don't send null values
    if responseMode is not None:
        body.update({"responseMode": responseMode})
    # Only send responseType if the argument was provided, don't send null values
    if responseType is not None:
        body.update({"responseType": responseType})
    # Only send scope if the argument was provided, don't send null values
    if scope is not None:
        body.update({"scope": scope})
    # Only send secret if the argument was provided, don't send null values
    if secret is not None:
        body.update({"secret": secret})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send tokenURI if the argument was provided, don't send null values
    if tokenURI is not None:
        body.update({"tokenURI": tokenURI})
    # Only send updateGroupMapping if the argument was provided, don't send null values
    if updateGroupMapping is not None:
        body.update({"updateGroupMapping": updateGroupMapping})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_openid_group_mapping(
    idOrShortname: str,
    mappingID: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete a group mapping from an OpenID provider (INTERNAL)

    :param str idOrShortname: ID or shortname of provider to update
    :param str mappingID: The ID of the mapping to delete
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/{idOrShortname}/groupmappings/{mappingID}".format(
        idOrShortname=idOrShortname, mappingID=mappingID
    )

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_openid_provider(
    idOrShortname: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete OpenID provider (INTERNAL)

    :param str idOrShortname: ID or shortname of provider to delete
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/{idOrShortname}".format(
        idOrShortname=idOrShortname
    )

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_openid_provider(
    idOrShortname: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Fetch OpenID provider (INTERNAL)

    :param str idOrShortname: ID or shortname of provider to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/{idOrShortname}".format(
        idOrShortname=idOrShortname
    )

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_openid_user_link(
    email: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Fetch OpenID provider (INTERNAL)

    :param str email: Request a userlink sent to this email address
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises IfTheRequestIsInvalidException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/userlink".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send email if the argument was provided, don't send null values
    if email is not None:
        query_parameters.update({"email": email})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_openid_group_mappings(
    idOrShortname: str,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List group mappings for a OpenID provider (INTERNAL)

    :param str idOrShortname: ID or shortname of provider to list mappings for
    :param int limit: Limit number of results
    :param int offset: Skip a number of results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/{idOrShortname}/groupmappings".format(
        idOrShortname=idOrShortname
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_openid_providers(
    targetCustomer: str = None,
    customer: str = None,
    keywords: str = None,
    sortBy: str = None,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List OpenID providers (INTERNAL)

    :param str targetCustomer: Limit results to providers which apply to users bound to this customer
    :param list customer: Limit results to providers for this customer \(or subcustomers\)
    :param list keywords: Limit results to providers matching these keywords
    :param list sortBy: Specify sort order
    :param int limit: Limit number of results
    :param int offset: Skip a number of results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises InvalidArgumentsException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send targetCustomer if the argument was provided, don't send null values
    if targetCustomer is not None:
        query_parameters.update({"targetCustomer": targetCustomer})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def openid_authentication(
    provider: str,
    authorizationCode: str = None,
    idToken: str = None,
    requestedAuthorizations: str = None,
    flow: str = "idToken",
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Submit OpenID token for validation to create a new user session (PUBLIC)

    :param str provider: ID or shortname of OpenID provider
    :param str authorizationCode: Authorization code provider. Required for flow authorizationCode.
    :param str idToken: ID token from provider. Required for flow idToken.
    :param list requestedAuthorizations: Allow client to request authorizations as part of the authentication transaction. The client is not guaranteed to get the requested authorizations. The setPassword authorization is only returned if the current user has the FORCE\_PW\_CHANGE flag set.
    :param str flow: The flow to use. If set to authorizationCode\, follow the authorization code flow\, and the authorizationCode field must be set. If set to idToken\, follow the implicit flow\, and the idToken must be set \(default\).
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/{provider}/authentication".format(
        provider=provider
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send authorizationCode if the argument was provided, don't send null values
    if authorizationCode is not None:
        body.update({"authorizationCode": authorizationCode})
    # Only send flow if the argument was provided, don't send null values
    if flow is not None:
        body.update({"flow": flow})
    # Only send idToken if the argument was provided, don't send null values
    if idToken is not None:
        body.update({"idToken": idToken})
    # Only send requestedAuthorizations if the argument was provided, don't send null values
    if requestedAuthorizations is not None:
        body.update({"requestedAuthorizations": requestedAuthorizations})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def openid_pre_authentication(
    provider: str,
    state: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Request redirect URI to OpenID provider (PUBLIC)

    :param str provider: ID or shortname of OpenID provider
    :param str state: State to retain
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises InvalidArgumentException: on 412
    :raises TooManyPendingRequestsException: on 429
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/{provider}/authentication".format(
        provider=provider
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send state if the argument was provided, don't send null values
    if state is not None:
        query_parameters.update({"state": state})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def request_openid_authorization_redirect(
    nextURI: str,
    operation: str,
    context: dict = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Register a user authorization request, and request a redirect to the OpenID Identity Provider to validate user presence. (INTERNAL)

    :param str nextURI: The URI to redirect\/route to after successful authorization. The URI will be validated according to policy. The authorization token returned from successful authorization should be appended as a query parameter to this URI.
    :param str operation: The name of the operation to authorize
    :param dict context: Context variables to scope this authorization. All context variables required by the executing service must be present and equal to those provided here.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/authorize/redirect".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send context if the argument was provided, don't send null values
    if context is not None:
        body.update({"context": context})
    # Only send nextURI if the argument was provided, don't send null values
    if nextURI is not None:
        body.update({"nextURI": nextURI})
    # Only send operation if the argument was provided, don't send null values
    if operation is not None:
        body.update({"operation": operation})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def search_openid_providers(
    customer: str = None,
    keywords: str = None,
    targetCustomer: str = None,
    limit: int = 25,
    offset: int = None,
    sortBy: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Search OpenID providers (INTERNAL)

    :param list customer: Limit result by customer ID or shortname
    :param list keywords: Match providers by keywords
    :param str targetCustomer: Limit result to providers which are usable for users bound to this customer \(by customer ID or shortname\)
    :param int limit: Limit the number of results
    :param int offset: Skip the first results\, in sort order
    :param list sortBy: Specify sort order
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises InvalidArgumentsException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send targetCustomer if the argument was provided, don't send null values
    if targetCustomer is not None:
        body.update({"targetCustomer": targetCustomer})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def submit_openid_authorization(
    idToken: str,
    stateID: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Receive the ID token redirect response for a pending User Authorization (INTERNAL)

    :param str idToken: The ID token returned by the OpenID Provider
    :param str stateID: The OpenID state identifier
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises NotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/authorize".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send idToken if the argument was provided, don't send null values
    if idToken is not None:
        body.update({"idToken": idToken})
    # Only send stateID if the argument was provided, don't send null values
    if stateID is not None:
        body.update({"stateID": stateID})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_openid_provider(
    idOrShortname: str,
    authorizationPrompt: str = None,
    certificate: str = None,
    claimsMapping: dict = None,
    clientID: str = None,
    configurationURI: str = None,
    emailDomains: str = None,
    issuer: str = None,
    jwks: str = None,
    jwksURI: str = None,
    name: str = None,
    newUserMapping: bool = None,
    providerURI: str = None,
    responseMode: str = None,
    responseType: str = None,
    scope: str = None,
    secret: str = None,
    shortName: str = None,
    tokenURI: str = None,
    updateGroupMapping: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Update OpenID provider (INTERNAL)

    :param str idOrShortname: ID or shortname of provider to update
    :param str authorizationPrompt: If set\, update the prompt to request from provider on authorization requests
    :param str certificate:
    :param dict claimsMapping:
    :param str clientID: If set\, update the OAuth ClientID for this provider
    :param str configurationURI: If set\, update the URI to the OpenID autodiscovery document
    :param list emailDomains: If set\, change the email domains for automatic enrollment of users
    :param str issuer: If set\, update the OpenID Issuer to require for this provider. Use blank string \"\" to reset to default.
    :param str jwks:
    :param str jwksURI: If set\, update the URI to the OpenID JWKS document. Exactly one of certificate\, jwks and jwksURI can be used. Setting jwksURI will clear certificate and enable automatic refresh of jwks.
    :param str name: If set\, update the name for this provider
    :param bool newUserMapping: If set\, enable\/disable option to enable automatic user mapping. To map new users\, the claims mapping for name and email must be set.
    :param str providerURI: If set\, update the authorization URI for this provider
    :param str responseMode: If set\, update the response type to request from provider
    :param str responseType: If set\, update the response type to request from provider
    :param list scope: If set\, change the scopes to request from this provider
    :param str secret: If set\, update the secret for use with the token URI for this provider
    :param str shortName: If set\, update the shortname for this provider
    :param str tokenURI: If set\, update the token URI for this provider
    :param bool updateGroupMapping: If set\, enable\/disable option to enable updates of automatic group mappings. This requires the claims mapping for groups to be set.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises InvalidArgumentsException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/authentication/v1/openid/provider/{idOrShortname}".format(
        idOrShortname=idOrShortname
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send authorizationPrompt if the argument was provided, don't send null values
    if authorizationPrompt is not None:
        body.update({"authorizationPrompt": authorizationPrompt})
    # Only send certificate if the argument was provided, don't send null values
    if certificate is not None:
        body.update({"certificate": certificate})
    # Only send claimsMapping if the argument was provided, don't send null values
    if claimsMapping is not None:
        body.update({"claimsMapping": claimsMapping})
    # Only send clientID if the argument was provided, don't send null values
    if clientID is not None:
        body.update({"clientID": clientID})
    # Only send configurationURI if the argument was provided, don't send null values
    if configurationURI is not None:
        body.update({"configurationURI": configurationURI})
    # Only send emailDomains if the argument was provided, don't send null values
    if emailDomains is not None:
        body.update({"emailDomains": emailDomains})
    # Only send issuer if the argument was provided, don't send null values
    if issuer is not None:
        body.update({"issuer": issuer})
    # Only send jwks if the argument was provided, don't send null values
    if jwks is not None:
        body.update({"jwks": jwks})
    # Only send jwksURI if the argument was provided, don't send null values
    if jwksURI is not None:
        body.update({"jwksURI": jwksURI})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send newUserMapping if the argument was provided, don't send null values
    if newUserMapping is not None:
        body.update({"newUserMapping": newUserMapping})
    # Only send providerURI if the argument was provided, don't send null values
    if providerURI is not None:
        body.update({"providerURI": providerURI})
    # Only send responseMode if the argument was provided, don't send null values
    if responseMode is not None:
        body.update({"responseMode": responseMode})
    # Only send responseType if the argument was provided, don't send null values
    if responseType is not None:
        body.update({"responseType": responseType})
    # Only send scope if the argument was provided, don't send null values
    if scope is not None:
        body.update({"scope": scope})
    # Only send secret if the argument was provided, don't send null values
    if secret is not None:
        body.update({"secret": secret})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send tokenURI if the argument was provided, don't send null values
    if tokenURI is not None:
        body.update({"tokenURI": tokenURI})
    # Only send updateGroupMapping if the argument was provided, don't send null values
    if updateGroupMapping is not None:
        body.update({"updateGroupMapping": updateGroupMapping})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
