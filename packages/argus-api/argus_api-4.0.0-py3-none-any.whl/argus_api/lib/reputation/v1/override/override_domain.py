"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def add_address_overrides(
    listID: int = None,
    listName: str = None,
    overrides: dict = None,
    clear: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Add reputation IP override (INTERNAL)

    :param int listID: The ID of the override list to which we\'re adding the address override entries.
    :param str listName: The globally unique name of the override list to which we\'re adding the address override entries.
    :param list overrides: The address override entries to add.
    :param bool clear: Whether to remove all current override entries in the override list.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/ip".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send clear if the argument was provided, don't send null values
    if clear is not None:
        body.update({"clear": clear})
    # Only send listID if the argument was provided, don't send null values
    if listID is not None:
        body.update({"listID": listID})
    # Only send listName if the argument was provided, don't send null values
    if listName is not None:
        body.update({"listName": listName})
    # Only send overrides if the argument was provided, don't send null values
    if overrides is not None:
        body.update({"overrides": overrides})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def add_domain_override(
    listID: int = None,
    listName: str = None,
    overrides: dict = None,
    clear: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Add reputation domain override (INTERNAL)

    :param int listID: The ID of the override list to which we\'re adding the domain override entries.
    :param str listName: The globally unique name of the override list to which we\'re adding the domain override entries.
    :param list overrides: The domain override entries to add.
    :param bool clear: Whether to remove all current override entries in the override list.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/domain".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send clear if the argument was provided, don't send null values
    if clear is not None:
        body.update({"clear": clear})
    # Only send listID if the argument was provided, don't send null values
    if listID is not None:
        body.update({"listID": listID})
    # Only send listName if the argument was provided, don't send null values
    if listName is not None:
        body.update({"listName": listName})
    # Only send overrides if the argument was provided, don't send null values
    if overrides is not None:
        body.update({"overrides": overrides})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def add_override_list(
    description: str,
    name: str,
    useForDefaultValues: bool = None,
    useForInputFiltering: bool = None,
    useForReputationCalc: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Add reputation override list (INTERNAL)

    :param str description: Override list description
    :param str name: Unique Override list name
    :param bool useForDefaultValues: If true\, enable use of the overrides in this list as default values.
    :param bool useForInputFiltering: If true\, enable use of the overrides in this list for observation input filtering.
    :param bool useForReputationCalc: If true\, enable use of the overrides in this list when calculating reputation values.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/list".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send useForDefaultValues if the argument was provided, don't send null values
    if useForDefaultValues is not None:
        body.update({"useForDefaultValues": useForDefaultValues})
    # Only send useForInputFiltering if the argument was provided, don't send null values
    if useForInputFiltering is not None:
        body.update({"useForInputFiltering": useForInputFiltering})
    # Only send useForReputationCalc if the argument was provided, don't send null values
    if useForReputationCalc is not None:
        body.update({"useForReputationCalc": useForReputationCalc})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_address_override(
    id: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete reputation IP override (INTERNAL)

    :param int id: ID of override entry to remove
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/ip/{id}".format(id=id)

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_address_overrides(
    id: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Bulk delete reputation IP overrides (INTERNAL)

    :param list id: IDs of IP overrides
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/ip".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send id if the argument was provided, don't send null values
    if id is not None:
        query_parameters.update({"id": id})

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_domain_override(
    id: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete reputation domain override (INTERNAL)

    :param int id: ID of override entry to remove
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/domain/{id}".format(id=id)

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_domain_overrides(
    id: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Bulk delete reputation domain overrides (INTERNAL)

    :param list id: IDs of reputation overrides
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/domain".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send id if the argument was provided, don't send null values
    if id is not None:
        query_parameters.update({"id": id})

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_override_list(
    id: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete reputation override list (INTERNAL)

    :param int id: ID of override list to remove
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/list/{id}".format(id=id)

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def find_address_overrides(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    listID: int = None,
    listName: str = None,
    includedListFlags: int = None,
    excludedListFlags: int = None,
    includeExpired: bool = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    timeFieldStrategy: str = None,
    minValue: float = None,
    maxValue: float = None,
    keywords: str = None,
    keywordMatchStrategy: str = None,
    timeMatchStrategy: str = None,
    countMaxWait: int = None,
    keywordFieldStrategy: str = None,
    sortBy: str = None,
    ranges: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Search IP overrides (INTERNAL)

    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param int includeFlags: Only include objects which have includeFlags set.
    :param int excludeFlags: Exclude objects which have excludeFlags set.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param list listID: Collection of override lists\' IDs
    :param list listName: Collection of override lists\' names
    :param int includedListFlags: Include records with flags in override list
    :param int excludedListFlags: Exclude records with flags in override list
    :param bool includeExpired: Whether include expired overrides\, default not include expired overrides
    :param int startTimestamp: Records after this timestamp against fields defined by timeFieldStrategy
    :param int endTimestamp: Records before this timestamp against fields defined by timeFieldStrategy
    :param list timeFieldStrategy: TimeFieldStrategy to define which timestamp field\(s\) to match\, default lastUpdatedTimestamp
    :param float minValue: Lower bound for override value range \[0\,1\]
    :param float maxValue: Upper bound for override data value range \[0\,1\]
    :param list keywords: Set of keywords to match selected fields\, depends on KeywordMatchStrategy
    :param str keywordMatchStrategy: Define whether all\/any keywords have to be matched with selected fields
    :param str timeMatchStrategy: Defines how strict to match against different timestamps \(all\/any\) using start and end timestamp \(default any\)
    :param int countMaxWait: How many seconds to wait for count calculation to complete. \-1\: Skip counting altogether to return search results immediately. 0\: Unlimited count time for when the count matters and response time does not. Defaults to 2 seconds.
    :param list keywordFieldStrategy: Define which field\(s\) to be matched against keywords
    :param list sortBy: List of properties to sort by \(prefix with \"\-\" to sort descending\).
    :param list ranges:
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/ip/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, don't send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, don't send null values
    if required is not None:
        body.update({"required": required})
    # Only send listID if the argument was provided, don't send null values
    if listID is not None:
        body.update({"listID": listID})
    # Only send listName if the argument was provided, don't send null values
    if listName is not None:
        body.update({"listName": listName})
    # Only send includedListFlags if the argument was provided, don't send null values
    if includedListFlags is not None:
        body.update({"includedListFlags": includedListFlags})
    # Only send excludedListFlags if the argument was provided, don't send null values
    if excludedListFlags is not None:
        body.update({"excludedListFlags": excludedListFlags})
    # Only send includeExpired if the argument was provided, don't send null values
    if includeExpired is not None:
        body.update({"includeExpired": includeExpired})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send timeFieldStrategy if the argument was provided, don't send null values
    if timeFieldStrategy is not None:
        body.update({"timeFieldStrategy": timeFieldStrategy})
    # Only send minValue if the argument was provided, don't send null values
    if minValue is not None:
        body.update({"minValue": minValue})
    # Only send maxValue if the argument was provided, don't send null values
    if maxValue is not None:
        body.update({"maxValue": maxValue})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send timeMatchStrategy if the argument was provided, don't send null values
    if timeMatchStrategy is not None:
        body.update({"timeMatchStrategy": timeMatchStrategy})
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        body.update({"countMaxWait": countMaxWait})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send ranges if the argument was provided, don't send null values
    if ranges is not None:
        body.update({"ranges": ranges})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def find_domain_overrides(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    listID: int = None,
    listName: str = None,
    includedListFlags: int = None,
    excludedListFlags: int = None,
    includeExpired: bool = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    timeFieldStrategy: str = None,
    minValue: float = None,
    maxValue: float = None,
    keywords: str = None,
    keywordMatchStrategy: str = None,
    timeMatchStrategy: str = None,
    countMaxWait: int = None,
    domainPatternBases: str = None,
    keywordFieldStrategy: str = None,
    sortBy: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Search domain overrides (INTERNAL)

    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param int includeFlags: Only include objects which have includeFlags set.
    :param int excludeFlags: Exclude objects which have excludeFlags set.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param list listID: Collection of override lists\' IDs
    :param list listName: Collection of override lists\' names
    :param int includedListFlags: Include records with flags in override list
    :param int excludedListFlags: Exclude records with flags in override list
    :param bool includeExpired: Whether include expired overrides\, default not include expired overrides
    :param int startTimestamp: Records after this timestamp against fields defined by timeFieldStrategy
    :param int endTimestamp: Records before this timestamp against fields defined by timeFieldStrategy
    :param list timeFieldStrategy: TimeFieldStrategy to define which timestamp field\(s\) to match\, default lastUpdatedTimestamp
    :param float minValue: Lower bound for override value range \[0\,1\]
    :param float maxValue: Upper bound for override data value range \[0\,1\]
    :param list keywords: Set of keywords to match selected fields\, depends on KeywordMatchStrategy
    :param str keywordMatchStrategy: Define whether all\/any keywords have to be matched with selected fields
    :param str timeMatchStrategy: Defines how strict to match against different timestamps \(all\/any\) using start and end timestamp \(default any\)
    :param int countMaxWait: How many seconds to wait for count calculation to complete. \-1\: Skip counting altogether to return search results immediately. 0\: Unlimited count time for when the count matters and response time does not. Defaults to 2 seconds.
    :param list domainPatternBases: Collection of domain pattern bases
    :param list keywordFieldStrategy: Define which field\(s\) to be matched against keywords
    :param list sortBy: List of properties to sort by \(prefix with \"\-\" to sort descending\).
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/domain/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, don't send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, don't send null values
    if required is not None:
        body.update({"required": required})
    # Only send listID if the argument was provided, don't send null values
    if listID is not None:
        body.update({"listID": listID})
    # Only send listName if the argument was provided, don't send null values
    if listName is not None:
        body.update({"listName": listName})
    # Only send includedListFlags if the argument was provided, don't send null values
    if includedListFlags is not None:
        body.update({"includedListFlags": includedListFlags})
    # Only send excludedListFlags if the argument was provided, don't send null values
    if excludedListFlags is not None:
        body.update({"excludedListFlags": excludedListFlags})
    # Only send includeExpired if the argument was provided, don't send null values
    if includeExpired is not None:
        body.update({"includeExpired": includeExpired})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send timeFieldStrategy if the argument was provided, don't send null values
    if timeFieldStrategy is not None:
        body.update({"timeFieldStrategy": timeFieldStrategy})
    # Only send minValue if the argument was provided, don't send null values
    if minValue is not None:
        body.update({"minValue": minValue})
    # Only send maxValue if the argument was provided, don't send null values
    if maxValue is not None:
        body.update({"maxValue": maxValue})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send timeMatchStrategy if the argument was provided, don't send null values
    if timeMatchStrategy is not None:
        body.update({"timeMatchStrategy": timeMatchStrategy})
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        body.update({"countMaxWait": countMaxWait})
    # Only send domainPatternBases if the argument was provided, don't send null values
    if domainPatternBases is not None:
        body.update({"domainPatternBases": domainPatternBases})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_override_for_domain(
    id: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Look up domain override value by ID (INTERNAL)

    :param int id: ID of override object
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/domain/{id}".format(id=id)

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_override_for_ip(
    id: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Look up IP override value by ID (INTERNAL)

    :param int id: ID of override object
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/ip/{id}".format(id=id)

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_override_list_by_id(
    id: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Get override list by ID (INTERNAL)

    :param int id: ID of OverrideList
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/list/{id}".format(id=id)

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_override_lists(
    sortBy: str = None,
    keywords: str = None,
    includeDeleted: bool = None,
    countMaxWait: int = None,
    offset: int = 0,
    limit: int = 25,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List all override lists (INTERNAL)

    :param list sortBy: Fields to sort results by \(without a sign is ascending\, with \'\-\' sign is descending\, supported fields are\: id\, lastModified\)
    :param list keywords: Filter override lists by keywords
    :param bool includeDeleted: Whether to include deleted results \(not included by default\)
    :param int countMaxWait: Max wait time for result count calculation. 0 equates to unlimited wait and \-1 to skip counting altogether. Defaults to 2 seconds.
    :param int offset: Skip a number of results
    :param int limit: Maximum number of returned results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/list".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        query_parameters.update({"countMaxWait": countMaxWait})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_overrides_for_domain(
    fqdn: str,
    countMaxWait: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Look up domain override value by FQDN (INTERNAL)

    :param str fqdn: Domain\/domain pattern to fetch overrides for
    :param int countMaxWait: Max wait time for result count calculation. 0 equates to unlimited wait and \-1 to skip counting altogether. Defaults to 2 seconds.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/domain/{fqdn}".format(fqdn=fqdn)

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        query_parameters.update({"countMaxWait": countMaxWait})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_overrides_for_ip(
    ip: str,
    countMaxWait: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Look up domain override value by IP address (INTERNAL)

    :param str ip: IP to search overrides for
    :param int countMaxWait: Max wait time for result count calculation. 0 equates to unlimited wait and \-1 to skip counting altogether. Defaults to 2 seconds.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/ip/{ip}".format(ip=ip)

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        query_parameters.update({"countMaxWait": countMaxWait})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_address_overrides(
    list: str = None,
    sortBy: str = None,
    countMaxWait: int = None,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List address overrides (INTERNAL)

    :param str list: Limit results to overrides from this list
    :param list sortBy: Fields to sort results by \(without a sign is ascending\, with \'\-\' sign is descending\, supported fields are\: id\, lastModified\, range\)
    :param int countMaxWait: Max wait time for result count calculation. 0 equates to unlimited wait and \-1 to skip counting altogether. Defaults to 2 seconds.
    :param int limit: Limit results
    :param int offset: Offset results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/ip".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send list if the argument was provided, don't send null values
    if list is not None:
        query_parameters.update({"list": list})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        query_parameters.update({"countMaxWait": countMaxWait})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_domain_overrides(
    list: str = None,
    sortBy: str = None,
    countMaxWait: int = None,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List domain overrides (INTERNAL)

    :param str list: Limit results to overrides from this list
    :param list sortBy: Fields to sort results by \(without a sign is ascending\, with \'\-\' sign is descending\, supported fields are\: id\, lastModified\, domainPattern\)
    :param int countMaxWait: Max wait time for result count calculation. 0 equates to unlimited wait and \-1 to skip counting altogether. Defaults to 2 seconds.
    :param int limit: Limit results
    :param int offset: Offset results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/domain".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send list if the argument was provided, don't send null values
    if list is not None:
        query_parameters.update({"list": list})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    # Only send countMaxWait if the argument was provided, don't send null values
    if countMaxWait is not None:
        query_parameters.update({"countMaxWait": countMaxWait})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_override_list(
    id: int,
    description: str = None,
    name: str = None,
    useForDefaultValues: bool = None,
    useForInputFiltering: bool = None,
    useForReputationCalc: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Update reputation override list (INTERNAL)

    :param int id: ID of reputation override list
    :param str description: If set\, update the description of this list
    :param str name: If set\, update the name of this list
    :param bool useForDefaultValues: If set\, enable\/disable use of the overrides in this list as default values
    :param bool useForInputFiltering: If set\, enable\/disable use of the overrides in this list for observation input filtering
    :param bool useForReputationCalc: If set\, enable\/disable use of the overrides in this list when calculating reputation values
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v1/override/list/{id}".format(id=id)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send id if the argument was provided, don't send null values
    if id is not None:
        body.update({"id": id})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send useForDefaultValues if the argument was provided, don't send null values
    if useForDefaultValues is not None:
        body.update({"useForDefaultValues": useForDefaultValues})
    # Only send useForInputFiltering if the argument was provided, don't send null values
    if useForInputFiltering is not None:
        body.update({"useForInputFiltering": useForInputFiltering})
    # Only send useForReputationCalc if the argument was provided, don't send null values
    if useForReputationCalc is not None:
        body.update({"useForReputationCalc": useForReputationCalc})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
