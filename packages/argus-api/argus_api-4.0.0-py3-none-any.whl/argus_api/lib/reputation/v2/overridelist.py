"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def add_override_list(
    description: str,
    listType: str,
    name: str,
    readFunction: str,
    shortName: str,
    writeFunction: str,
    useForInputFiltering: bool = None,
    useForReputationCalc: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Add a new reputation override list (DEV)

    :param str description: Description of the override list.
    :param str listType: Type of override list. Can be one of \'allow\'\, \'deny\' or \'all\'.
    :param str name: Human\-readable name of the override list. Does not need to be unique.
    :param str readFunction: ID or shortName of function required to view the override list.
    :param str shortName: Unique name of the override list.
    :param str writeFunction: ID or shortName of function required to make changes to the override list.
    :param bool useForInputFiltering: Whether the override list should be consulted when importing observations.
    :param bool useForReputationCalc: Whether the override list should be consulted when calculating reputation score for observations.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v2/overrideList".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send listType if the argument was provided, don't send null values
    if listType is not None:
        body.update({"listType": listType})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send readFunction if the argument was provided, don't send null values
    if readFunction is not None:
        body.update({"readFunction": readFunction})
    # Only send shortName if the argument was provided, don't send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send useForInputFiltering if the argument was provided, don't send null values
    if useForInputFiltering is not None:
        body.update({"useForInputFiltering": useForInputFiltering})
    # Only send useForReputationCalc if the argument was provided, don't send null values
    if useForReputationCalc is not None:
        body.update({"useForReputationCalc": useForReputationCalc})
    # Only send writeFunction if the argument was provided, don't send null values
    if writeFunction is not None:
        body.update({"writeFunction": writeFunction})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_override_list(
    idOrShortName: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete an override list (DEV)

    :param str idOrShortName: ID or shortName of the override list to be deleted
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v2/overrideList/{idOrShortName}".format(
        idOrShortName=idOrShortName
    )

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_override_list(
    idOrShortName: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Fetch a reputation override list (DEV)

    :param str idOrShortName: ID or short name of the override list
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v2/overrideList/{idOrShortName}".format(
        idOrShortName=idOrShortName
    )

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_override_lists(
    keywords: str = None,
    offset: int = 0,
    limit: int = 25,
    sortBy: str = None,
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = "any",
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Simple search for override lists (DEV)

    :param list keywords: Keywords to search for.
    :param int offset: Number of override lists to skip.
    :param int limit: Number of override lists to return.
    :param list sortBy: How to sort the results.
    :param list keywordFieldStrategy: Which fields to search for keywords in.
    :param str keywordMatchStrategy: Whether all or any of the keywords are required to match any of the fields.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v2/overrideList".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        query_parameters.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        query_parameters.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def search_override_lists(
    excludeFlags: str = None,
    includeFlags: str = None,
    keywords: str = None,
    includeDeleted: bool = None,
    keywordFieldStrategy: str = None,
    keywordMatchStrategy: str = "any",
    limit: int = 25,
    offset: int = None,
    sortBy: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Advanced search for override lists (DEV)

    :param list excludeFlags: Require override lists to not have certain flags set.
    :param list includeFlags: Require override lists to have certain flags set.
    :param list keywords: Keywords to search for in fields specified by keywordFieldStrategy.
    :param bool includeDeleted: Whether to include deleted override lists.
    :param list keywordFieldStrategy: Which fields to search for keywords in.
    :param str keywordMatchStrategy: Whether all or any of the keywords are required to match any of the fields.
    :param int limit: Number of override lists to return.
    :param int offset: Number of override lists to skip.
    :param list sortBy: How to order the results.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v2/overrideList/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_override_list(
    idOrShortName: str,
    description: str = None,
    name: str = None,
    readFunction: str = None,
    useForInputFiltering: bool = None,
    useForReputationCalc: bool = None,
    writeFunction: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Update an override list (DEV)

    :param str idOrShortName: ID or shortName of the override list to be updated
    :param str description: Description of the override list.
    :param str name: Human\-readable name of the override list. Does not need to be unique.
    :param str readFunction: ID or shortName of function required to view the override list.
    :param bool useForInputFiltering: Whether the override list should be synced to distributed.
    :param bool useForReputationCalc: Whether the override list should be included when calculating reputation scores.
    :param str writeFunction: ID or shortName of function required to make changes to the override list.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/reputation/v2/overrideList/{idOrShortName}".format(
        idOrShortName=idOrShortName
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send description if the argument was provided, don't send null values
    if description is not None:
        body.update({"description": description})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send readFunction if the argument was provided, don't send null values
    if readFunction is not None:
        body.update({"readFunction": readFunction})
    # Only send useForInputFiltering if the argument was provided, don't send null values
    if useForInputFiltering is not None:
        body.update({"useForInputFiltering": useForInputFiltering})
    # Only send useForReputationCalc if the argument was provided, don't send null values
    if useForReputationCalc is not None:
        body.update({"useForReputationCalc": useForReputationCalc})
    # Only send writeFunction if the argument was provided, don't send null values
    if writeFunction is not None:
        body.update({"writeFunction": writeFunction})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
