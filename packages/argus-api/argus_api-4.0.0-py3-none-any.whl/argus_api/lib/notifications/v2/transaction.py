"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def prepare_notification_transaction(
    operation: str,
    recipients: dict,
    requestContext,
    service: str,
    objectCustomer: str = None,
    objectID: str = None,
    triggeringUser: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Prepare a new notification transaction. This endpoint is NOT meant for users, only for applications on behalf of a user. (DEV)

    :param str operation: What operation generated the notification.
    :param list recipients: List of user and email recipients to notify.
    :param  requestContext: Context interface which is extended for specific services.
    :param str service: What service generated the notification.
    :param str objectCustomer: Id or shortname for customer of the object this notification is related to.If notification is not customer relevant\, this may not be set.
    :param str objectID: Which Argus object \(case\, document\, sensor\, asset\, etc.\) generated the notification. Is not required\, as some operations will not have a corresponding Argus object.
    :param int triggeringUser: Id of user who generated this notification is related to.If null\, current user will be extracted from request context.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/notifications/v2/transaction".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send objectCustomer if the argument was provided, don't send null values
    if objectCustomer is not None:
        body.update({"objectCustomer": objectCustomer})
    # Only send objectID if the argument was provided, don't send null values
    if objectID is not None:
        body.update({"objectID": objectID})
    # Only send operation if the argument was provided, don't send null values
    if operation is not None:
        body.update({"operation": operation})
    # Only send recipients if the argument was provided, don't send null values
    if recipients is not None:
        body.update({"recipients": recipients})
    # Only send requestContext if the argument was provided, don't send null values
    if requestContext is not None:
        body.update({"requestContext": requestContext})
    # Only send service if the argument was provided, don't send null values
    if service is not None:
        body.update({"service": service})
    # Only send triggeringUser if the argument was provided, don't send null values
    if triggeringUser is not None:
        body.update({"triggeringUser": triggeringUser})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def send_notification_transaction(
    transactionID: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Send a prepared notification transaction - generating notifications to be sent to users. This endpoint is NOT meant for users, only for applications on behalf of a user. (DEV)

    :param str transactionID: Transaction ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/notifications/v2/transaction/{transactionID}/send".format(
        transactionID=transactionID
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
