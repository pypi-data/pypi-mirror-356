"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def add_notification_rule_for_current_user(
    channels: dict,
    name: str,
    caseTypes: str = None,
    categories: str = None,
    customers: str = None,
    index: int = None,
    operations: str = None,
    priorities: str = None,
    services: str = None,
    userRoles: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Add a case notification rule for the current user (DEV)

    :param dict channels:
    :param str name: A name for this rule
    :param list caseTypes: Specify which case types should match this rule. Default is empty \(match all\)
    :param list categories: Specify which categories \(ID or shortname\) should match this rule. Default is empty \(match all\)
    :param list customers: Specify which customers \(ID or shortname\) should match this rule. Default is empty \(match all\)
    :param int index: Specify the evaluation index for this rule \(0\-based\). Default is 0\, meaning that the new rule will be evaluated first.
    :param list operations: Specify which update operations should match this rule. Default is empty \(match all\)
    :param list priorities: Specify which priorities should match this rule. Default is empty \(match all\)
    :param list services: Specify which services \(ID or shortname\) should match this rule. Default is empty \(match all\)
    :param list userRoles: Specify which user roles should match this rule. Default is empty \(match all\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/notifications/v2/settings/case/rules".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send caseTypes if the argument was provided, don't send null values
    if caseTypes is not None:
        body.update({"caseTypes": caseTypes})
    # Only send categories if the argument was provided, don't send null values
    if categories is not None:
        body.update({"categories": categories})
    # Only send channels if the argument was provided, don't send null values
    if channels is not None:
        body.update({"channels": channels})
    # Only send customers if the argument was provided, don't send null values
    if customers is not None:
        body.update({"customers": customers})
    # Only send index if the argument was provided, don't send null values
    if index is not None:
        body.update({"index": index})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send operations if the argument was provided, don't send null values
    if operations is not None:
        body.update({"operations": operations})
    # Only send priorities if the argument was provided, don't send null values
    if priorities is not None:
        body.update({"priorities": priorities})
    # Only send services if the argument was provided, don't send null values
    if services is not None:
        body.update({"services": services})
    # Only send userRoles if the argument was provided, don't send null values
    if userRoles is not None:
        body.update({"userRoles": userRoles})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_notification_rule_for_current_user(
    id: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete a case notification rule for the current user (DEV)

    :param str id:
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/notifications/v2/settings/case/rules/{id}".format(id=id)

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_notification_rule_for_current_user(
    id: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Get specified notification rule from the current user (DEV)

    :param str id:
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises UserNotFoundException: on 404
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/notifications/v2/settings/case/rules/{id}".format(id=id)

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_notification_settings_for_current_user(
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Returns the current users default notification settings (DEV)

    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/notifications/v2/settings".format()

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_notification_rules_for_current_user(
    limit: int = 25,
    offset: int = 0,
    includeDeleted: bool = False,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List the current users case notification rules (DEV)

    :param int limit:
    :param int offset:
    :param bool includeDeleted:
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises UserNotFoundException: on 404
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/notifications/v2/settings/case/rules".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def set_default_notification_settings_current_user(
    email: dict = None,
    mobile: dict = None,
    sms: dict = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Update the current users default case notification settings (DEV)

    :param dict email: Specification for the notification settings for a specific notification channel
    :param dict mobile: Specification for the notification settings for a specific notification channel
    :param dict sms: Specification for the notification settings for a specific notification channel
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/notifications/v2/settings/case".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send email if the argument was provided, don't send null values
    if email is not None:
        body.update({"email": email})
    # Only send mobile if the argument was provided, don't send null values
    if mobile is not None:
        body.update({"mobile": mobile})
    # Only send sms if the argument was provided, don't send null values
    if sms is not None:
        body.update({"sms": sms})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_notification_rule_for_current_user(
    id: str,
    caseTypes: str = None,
    categories: str = None,
    channels: dict = None,
    customers: str = None,
    disabled: bool = None,
    index: int = None,
    name: str = None,
    operations: str = None,
    priorities: str = None,
    services: str = None,
    userRoles: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Update a case notification rule for the current user (DEV)

    :param str id:
    :param list caseTypes: If set\, update which case types should match this rule. Use empty set to reset to empty \(match all\)
    :param list categories: If set\, update which categories \(ID or shortname\) should match this rule. Use empty set to reset to empty \(match all\)
    :param dict channels:
    :param list customers: If set\, update which customers \(ID or shortname\) should match this rule. Use empty set to reset to empty \(match all\)
    :param bool disabled: If set\, enable\/disable the rule.
    :param int index: If set\, change the rule evaluation index for this rule \(0\-based\). This will reorder all other rules.
    :param str name: If set\, update the rule name
    :param list operations: If set\, update which operations should match this rule. Use empty set to reset to empty \(match all\)
    :param list priorities: If set\, update which case priorities should match this rule. Use empty set to reset to empty \(match all\)
    :param list services: If set\, update which services \(ID or shortname\) should match this rule. Use empty set to reset to empty \(match all\)
    :param list userRoles: If set\, update which user roles should match this rule. Use empty set to reset to empty \(match all\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises InvalidArgumentException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/notifications/v2/settings/case/rules/{id}".format(id=id)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send caseTypes if the argument was provided, don't send null values
    if caseTypes is not None:
        body.update({"caseTypes": caseTypes})
    # Only send categories if the argument was provided, don't send null values
    if categories is not None:
        body.update({"categories": categories})
    # Only send channels if the argument was provided, don't send null values
    if channels is not None:
        body.update({"channels": channels})
    # Only send customers if the argument was provided, don't send null values
    if customers is not None:
        body.update({"customers": customers})
    # Only send disabled if the argument was provided, don't send null values
    if disabled is not None:
        body.update({"disabled": disabled})
    # Only send index if the argument was provided, don't send null values
    if index is not None:
        body.update({"index": index})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send operations if the argument was provided, don't send null values
    if operations is not None:
        body.update({"operations": operations})
    # Only send priorities if the argument was provided, don't send null values
    if priorities is not None:
        body.update({"priorities": priorities})
    # Only send services if the argument was provided, don't send null values
    if services is not None:
        body.update({"services": services})
    # Only send userRoles if the argument was provided, don't send null values
    if userRoles is not None:
        body.update({"userRoles": userRoles})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
