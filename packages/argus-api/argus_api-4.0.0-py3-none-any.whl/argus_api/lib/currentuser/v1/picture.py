"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession
from requests import Response


def get_profile_picture(
    width: int = None,
    height: int = None,
    size: str = None,
    default: bool = False,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> Response:
    r"""Get current user's profile picture (PUBLIC)

    :param int width: If set\, rescale image to the smallest size above this width in pixels \(keep aspect ratio\)
    :param int height: If set\, rescale image to the smallest size above this height in pixels \(keep aspect ratio\)
    :param str size: If set\, rescale image to this predefined size
    :param bool default: If true\, return default avatar image if user picture not set. Default is false.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises ProfilePictureNotFoundException: on 404
    :raises ArgusException: on other status codes

    :returns: ``requests.Response`` object

    """

    route = "/currentuser/v1/picture".format()

    session = api_session or _get_session()
    headers = {}
    headers["content"] = None

    query_parameters = {}
    # Only send default if the argument was provided, don't send null values
    if default is not None:
        query_parameters.update({"default": default})
    # Only send width if the argument was provided, don't send null values
    if width is not None:
        query_parameters.update({"width": width})
    # Only send height if the argument was provided, don't send null values
    if height is not None:
        query_parameters.update({"height": height})
    # Only send size if the argument was provided, don't send null values
    if size is not None:
        query_parameters.update({"size": size})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response


def update_profile_picture_json(
    image: str,
    mimeType: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Set current user's profile picture (PUBLIC)

    :param str image:
    :param str mimeType: Image MIME type
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises InvalidArgumentsException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/currentuser/v1/picture".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send image if the argument was provided, don't send null values
    if image is not None:
        body.update({"image": image})
    # Only send mimeType if the argument was provided, don't send null values
    if mimeType is not None:
        body.update({"mimeType": mimeType})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
