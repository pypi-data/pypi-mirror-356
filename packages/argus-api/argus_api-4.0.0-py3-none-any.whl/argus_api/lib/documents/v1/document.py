"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession
from requests import Response


def add_document_by_path_raw(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    accessMode: str = "roleBased",
    createMissing: bool = False,
    overwriteExisting: bool = False,
    skipNotification: bool = False,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Create a new document with the specified name into the parent folder (PUBLIC)

    :param str parentFolderPath: Path from customer root to the parent folder \(if not specified\, add the folder in the root folder\)
    :param str documentName: Document name
    :param str customer: Customer space to fetch from \(default is current users customer
    :param str accessMode: Access mode to set on new document
    :param bool createMissing: If true\, create any missing folders before adding document
    :param bool overwriteExisting: If true\, overwrite existing document with the same name
    :param bool skipNotification: If true\, skip notification to folder watchers
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ParentFolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/path{parentFolderPath}/{documentName}".format(
        parentFolderPath=parentFolderPath, documentName=documentName
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send accessMode if the argument was provided, don't send null values
    if accessMode is not None:
        query_parameters.update({"accessMode": accessMode})
    # Only send createMissing if the argument was provided, don't send null values
    if createMissing is not None:
        query_parameters.update({"createMissing": createMissing})
    # Only send overwriteExisting if the argument was provided, don't send null values
    if overwriteExisting is not None:
        query_parameters.update({"overwriteExisting": overwriteExisting})
    # Only send skipNotification if the argument was provided, don't send null values
    if skipNotification is not None:
        query_parameters.update({"skipNotification": skipNotification})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def add_document_watcher(
    documentID: int,
    subject: str,
    subjectDomain: str = None,
    negated: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Add watcher to specified document. Requires write access to the document. (PUBLIC)

    :param int documentID: ID of document
    :param str subject: ID or shortname of subject to add as watcher.
    :param str subjectDomain: Domain to resolve subject shortname in. Defaults to current users domain.
    :param bool negated: If true\, register an explicitly negated watcher entry. Default is to add a new active watcher.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/watchers".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send negated if the argument was provided, don't send null values
    if negated is not None:
        body.update({"negated": negated})
    # Only send subject if the argument was provided, don't send null values
    if subject is not None:
        body.update({"subject": subject})
    # Only send subjectDomain if the argument was provided, don't send null values
    if subjectDomain is not None:
        body.update({"subjectDomain": subjectDomain})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def add_document_watcher_by_path(
    parentFolderPath: str,
    documentName: str,
    subject: str,
    subjectDomain: str = None,
    customer: str = None,
    negated: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Add watcher to specified document. Requires write access to the document. (PUBLIC)

    :param str parentFolderPath: Path to parent folder \(if not specified\, select document from root folder\)
    :param str documentName: Document name
    :param str subject: ID or shortname of subject to add as watcher.
    :param str subjectDomain: Domain to resolve subject shortname in. Defaults to current users domain.
    :param str customer: Customer space to lookup folder in \(default is current users customer\)
    :param bool negated: If true\, register an explicitly negated watcher entry. Default is to add a new active watcher.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = (
        "/documents/v1/document/path/watchers{parentFolderPath}/{documentName}".format(
            parentFolderPath=parentFolderPath, documentName=documentName
        )
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send negated if the argument was provided, don't send null values
    if negated is not None:
        body.update({"negated": negated})
    # Only send subject if the argument was provided, don't send null values
    if subject is not None:
        body.update({"subject": subject})
    # Only send subjectDomain if the argument was provided, don't send null values
    if subjectDomain is not None:
        body.update({"subjectDomain": subjectDomain})

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def commit_document(
    documentID: int,
    data: str = None,
    mimeType: str = None,
    name: str = None,
    notificationOptions: dict = None,
    text: str = None,
    lockRequestTime: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Commit specified document (PUBLIC)

    :param int documentID: ID of document to commit
    :param str data:
    :param str mimeType: If set change document MIME type
    :param str name: If set change document name
    :param dict notificationOptions:
    :param str text: Plain text document content. If set change document content
    :param int lockRequestTime: Specify how long the document should be locked
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/commit".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send data if the argument was provided, don't send null values
    if data is not None:
        body.update({"data": data})
    # Only send lockRequestTime if the argument was provided, don't send null values
    if lockRequestTime is not None:
        body.update({"lockRequestTime": lockRequestTime})
    # Only send mimeType if the argument was provided, don't send null values
    if mimeType is not None:
        body.update({"mimeType": mimeType})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send notificationOptions if the argument was provided, don't send null values
    if notificationOptions is not None:
        body.update({"notificationOptions": notificationOptions})
    # Only send text if the argument was provided, don't send null values
    if text is not None:
        body.update({"text": text})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_document(
    documentID: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Discard specified document (PUBLIC)

    :param int documentID: ID of document to discard
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_document_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Discard specified document (PUBLIC)

    :param str parentFolderPath: Path from customer root to the parent folder \(if not specified\, fetch document from root folder\)
    :param str documentName: Document name
    :param str customer: Customer space to fetch from \(default is current users customer
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/path{parentFolderPath}/{documentName}".format(
        parentFolderPath=parentFolderPath, documentName=documentName
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_document_watcher(
    documentID: int,
    entryID: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete watcher entry on document. Requires write access to document. (PUBLIC)

    :param int documentID: ID of document
    :param str entryID: ID of watcher entry
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/watchers/{entryID}".format(
        documentID=documentID, entryID=entryID
    )

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_document_watcher_by_path(
    parentFolderPath: str,
    documentName: str,
    entryID: str,
    customer: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Delete watcher entry on document. Requires write access to document. (PUBLIC)

    :param str parentFolderPath: Path to parent folder \(if not specified\, select document from root folder\)
    :param str documentName: Document name
    :param str entryID: ID of watcher entry
    :param str customer: Customer space to lookup folder in \(default is current users customer\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/path/watchers{parentFolderPath}/{documentName}/{entryID}".format(
        parentFolderPath=parentFolderPath, documentName=documentName, entryID=entryID
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_current_user_document_watch_status(
    documentID: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Get current user watcher status for document (PUBLIC)

    :param int documentID: ID of document
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/watch".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_current_user_document_watch_status_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Get current user watcher status for document (PUBLIC)

    :param str parentFolderPath: Path to parent folder \(if not specified\, select document from root folder\)
    :param str documentName: Document name
    :param str customer: Customer space to lookup folder in \(default is current users customer\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/path/watch{parentFolderPath}/{documentName}".format(
        parentFolderPath=parentFolderPath, documentName=documentName
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_document_content_by_id(
    documentID: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> Response:
    r"""Download content as a file for specified document (PUBLIC)

    :param int documentID: ID of document to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: ``requests.Response`` object

    """

    route = "/documents/v1/document/{documentID}/content".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}
    headers["content"] = None

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response


def get_document_content_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Download content as a file for specified document (PUBLIC)

    :param str parentFolderPath: Path from customer root to the parent folder \(if not specified\, fetch document from root folder\)
    :param str documentName: Document name
    :param str customer: Customer space to fetch from \(default is current users customer
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = (
        "/documents/v1/document/path/content{parentFolderPath}/{documentName}".format(
            parentFolderPath=parentFolderPath, documentName=documentName
        )
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_document_revisions(
    documentID: int,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Fetch specified document revisions (PUBLIC)

    :param int documentID: ID of document to fetch revisions
    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/versions".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_meta_info_by_id(
    documentID: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Fetch specified document excluding content (PUBLIC)

    :param int documentID: ID of document to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    response = session.get(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def get_meta_info_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Fetch specified document meta data (PUBLIC)

    :param str parentFolderPath: Path from customer root to the parent folder \(if not specified\, fetch document from root folder\)
    :param str documentName: Document name
    :param str customer: Customer space to fetch from \(default is current users customer
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/path/meta{parentFolderPath}/{documentName}".format(
        parentFolderPath=parentFolderPath, documentName=documentName
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def grant_document_access(
    documentID: int,
    subject: str,
    level: str,
    subjectID: dict = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Grant access to specified document (PUBLIC)

    :param int documentID: Document ID
    :param str subject: Specify user\/group to grant access to
    :param str level: Specify access level to grant to user\/group
    :param dict subjectID:
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/access".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send subjectID if the argument was provided, don't send null values
    if subjectID is not None:
        body.update({"subjectID": subjectID})
    # Only send subject if the argument was provided, don't send null values
    if subject is not None:
        body.update({"subject": subject})
    # Only send level if the argument was provided, don't send null values
    if level is not None:
        body.update({"level": level})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def grant_document_access_by_path(
    parentFolderPath: str,
    documentName: str,
    subject: str,
    level: str,
    subjectID: dict = None,
    customer: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Grant access to specified document (PUBLIC)

    :param str parentFolderPath: Path from customer root \(if not specified\, this returns the root\)
    :param str documentName: Document name
    :param str subject: Specify user\/group to grant access to
    :param str level: Specify access level to grant to user\/group
    :param dict subjectID:
    :param str customer: Customer space to fetch from \(default is current users customer\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = (
        "/documents/v1/document/path/access{parentFolderPath}/{documentName}".format(
            parentFolderPath=parentFolderPath, documentName=documentName
        )
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send subjectID if the argument was provided, don't send null values
    if subjectID is not None:
        body.update({"subjectID": subjectID})
    # Only send subject if the argument was provided, don't send null values
    if subject is not None:
        body.update({"subject": subject})
    # Only send level if the argument was provided, don't send null values
    if level is not None:
        body.update({"level": level})

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_document_access(
    documentID: int,
    offset: int = 0,
    limit: int = 25,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Fetch ACL for specified document (PUBLIC)

    :param int documentID: Document ID
    :param int offset: Skip a number of results
    :param int limit: Maximum number of returned results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/access".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_document_access_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    offset: int = 0,
    limit: int = 25,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Fetch ACL for specified document (PUBLIC)

    :param str parentFolderPath: Path from customer root \(if not specified\, this returns the root\)
    :param str documentName: Document name
    :param str customer: Customer space to fetch from \(default is current users customer\)
    :param int offset: Skip a number of results
    :param int limit: Maximum number of returned results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = (
        "/documents/v1/document/path/access{parentFolderPath}/{documentName}".format(
            parentFolderPath=parentFolderPath, documentName=documentName
        )
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_document_watchers_by_id(
    documentID: int,
    offset: int = None,
    includeNegated: bool = None,
    includeDeleted: bool = None,
    limit: int = 25,
    includeInherited: bool = True,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Get all watchers for document (PUBLIC)

    :param int documentID: ID of document
    :param int offset: Skip this number of results
    :param bool includeNegated: If true\, also fetch explicit unwatch records
    :param bool includeDeleted: If true\, also fetch deleted watcher records
    :param int limit: Limit the result
    :param bool includeInherited: If true\, also fetch watchers defined on parent folders
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/watchers".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send includeInherited if the argument was provided, don't send null values
    if includeInherited is not None:
        query_parameters.update({"includeInherited": includeInherited})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send includeNegated if the argument was provided, don't send null values
    if includeNegated is not None:
        query_parameters.update({"includeNegated": includeNegated})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_document_watchers_by_path(
    parentFolderPath: str,
    documentName: str,
    customer: str = None,
    offset: int = None,
    includeNegated: bool = None,
    includeDeleted: bool = None,
    limit: int = 25,
    includeInherited: bool = True,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Get all watchers for document (PUBLIC)

    :param str parentFolderPath: Path to parent folder \(if not specified\, select document from root folder\)
    :param str documentName: Document name
    :param str customer: Customer space to lookup folder in \(default is current users customer\)
    :param int offset: Skip this number of results
    :param bool includeNegated: If true\, also fetch explicit unwatch records
    :param bool includeDeleted: If true\, also fetch deleted watcher records
    :param int limit: Limit the result
    :param bool includeInherited: If true\, also fetch watchers defined on parent folders
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = (
        "/documents/v1/document/path/watchers{parentFolderPath}/{documentName}".format(
            parentFolderPath=parentFolderPath, documentName=documentName
        )
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send includeInherited if the argument was provided, don't send null values
    if includeInherited is not None:
        query_parameters.update({"includeInherited": includeInherited})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send includeNegated if the argument was provided, don't send null values
    if includeNegated is not None:
        query_parameters.update({"includeNegated": includeNegated})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_documents(
    customerID: int = None,
    keywords: str = None,
    offset: int = 0,
    limit: int = 25,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""List documents (PUBLIC)

    :param list customerID: Filter documents by customerID
    :param list keywords: Filter documents by keywords
    :param int offset: Skip a number of results
    :param int limit: Maximum number of returned results
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document".format()

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send customerID if the argument was provided, don't send null values
    if customerID is not None:
        query_parameters.update({"customerID": customerID})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        query_parameters.update({"keywords": keywords})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def lock_document(
    documentID: int,
    mode: str = "LOCK",
    lockRequestTime: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Lock/Unlock specified document (PUBLIC)

    :param int documentID: ID of document to lock\/unlock
    :param str mode: Specify whether to lock or unlock the document\, or to override an existing lock
    :param int lockRequestTime: If \'mode\' is set to LOCK\, specify how long the document should be locked
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/lock".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send lockRequestTime if the argument was provided, don't send null values
    if lockRequestTime is not None:
        body.update({"lockRequestTime": lockRequestTime})
    # Only send mode if the argument was provided, don't send null values
    if mode is not None:
        body.update({"mode": mode})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def move_document(
    documentID: int,
    newFolderID: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Move document to a different folder (PUBLIC)

    :param int documentID: ID of document to move
    :param int newFolderID: The ID of the parent folder to move this document to
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/move".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send newFolderID if the argument was provided, don't send null values
    if newFolderID is not None:
        body.update({"newFolderID": newFolderID})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def revoke_document_access(
    documentID: int,
    accessID: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Revoke specified explicit access from document (PUBLIC)

    :param int documentID: Document ID
    :param int accessID: Access ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/access/{accessID}".format(
        documentID=documentID, accessID=accessID
    )

    session = api_session or _get_session()
    headers = {}

    response = session.delete(
        route,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def revoke_document_access_by_path(
    parentFolderPath: str,
    documentName: str,
    accessID: int,
    customer: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Revoke specified explicit access from document (PUBLIC)

    :param str parentFolderPath: Path from customer root \(if not specified\, this returns the root\)
    :param str documentName: Document name
    :param int accessID: Access ID
    :param str customer: Customer space to fetch from \(default is current users customer\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/path/access{parentFolderPath}/{documentName}/{accessID}".format(
        parentFolderPath=parentFolderPath, documentName=documentName, accessID=accessID
    )

    session = api_session or _get_session()
    headers = {}

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def search_documents(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    customerID: int = None,
    id: int = None,
    userID: int = None,
    accessMode: str = None,
    state: str = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    keywords: str = None,
    labels: str = None,
    folderID: int = None,
    sortBy: str = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    userFieldStrategy: str = None,
    timeMatchStrategy: str = "any",
    timeFieldStrategy: str = None,
    keywordMatchStrategy: str = "any",
    keywordFieldStrategy: str = None,
    recursive: bool = True,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Search for specific documents (PUBLIC)

    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param list customerID: Restrict search to data belonging to specified customers.
    :param list id: ID of documents to match
    :param list userID: Restrict search to documents associated with any of these users.
    :param list accessMode: Match these access modes
    :param list state: The status of the documents to match
    :param int startTimestamp: Start of time search period
    :param int endTimestamp: End of time search period
    :param list keywords: A set of keywords matched against documents based on the set KeywordFieldStrategy and KeywordMatchStrategy.
    :param list labels: Match documents with any of these labels
    :param list folderID: Search for documents within any of these folders. Use folderID\=0 to search root folders.
    :param list sortBy: List of properties to sort by \(prefix with \"\-\" to sort descending\).
    :param list includeFlags: Only include objects which have includeFlags set.
    :param list excludeFlags: Exclude objects which have excludeFlags set.
    :param list userFieldStrategy: Defines which user fields will be used for searching for documents associated to userID field.
    :param str timeMatchStrategy: TimeMatchStrategy to define how to match startTimestamp and endTimestamp with fields.
    :param list timeFieldStrategy: TimeFieldStrategy to define which timestamp field\(s\) to match.
    :param str keywordMatchStrategy: KeywordMatchStrategy to define how to match keywords with fields.
    :param list keywordFieldStrategy: KeywordFieldStrategy to define which document field\(s\) to match.
    :param bool recursive: Search all subfolders below selected folders
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/search".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, don't send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, don't send null values
    if required is not None:
        body.update({"required": required})
    # Only send customerID if the argument was provided, don't send null values
    if customerID is not None:
        body.update({"customerID": customerID})
    # Only send id if the argument was provided, don't send null values
    if id is not None:
        body.update({"id": id})
    # Only send userID if the argument was provided, don't send null values
    if userID is not None:
        body.update({"userID": userID})
    # Only send userFieldStrategy if the argument was provided, don't send null values
    if userFieldStrategy is not None:
        body.update({"userFieldStrategy": userFieldStrategy})
    # Only send accessMode if the argument was provided, don't send null values
    if accessMode is not None:
        body.update({"accessMode": accessMode})
    # Only send state if the argument was provided, don't send null values
    if state is not None:
        body.update({"state": state})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send timeMatchStrategy if the argument was provided, don't send null values
    if timeMatchStrategy is not None:
        body.update({"timeMatchStrategy": timeMatchStrategy})
    # Only send timeFieldStrategy if the argument was provided, don't send null values
    if timeFieldStrategy is not None:
        body.update({"timeFieldStrategy": timeFieldStrategy})
    # Only send keywords if the argument was provided, don't send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send keywordMatchStrategy if the argument was provided, don't send null values
    if keywordMatchStrategy is not None:
        body.update({"keywordMatchStrategy": keywordMatchStrategy})
    # Only send keywordFieldStrategy if the argument was provided, don't send null values
    if keywordFieldStrategy is not None:
        body.update({"keywordFieldStrategy": keywordFieldStrategy})
    # Only send labels if the argument was provided, don't send null values
    if labels is not None:
        body.update({"labels": labels})
    # Only send folderID if the argument was provided, don't send null values
    if folderID is not None:
        body.update({"folderID": folderID})
    # Only send recursive if the argument was provided, don't send null values
    if recursive is not None:
        body.update({"recursive": recursive})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def set_current_user_document_watch_status(
    documentID: int,
    watch: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Change current user watcher status for document. Requires read access to the document. (PUBLIC)

    :param int documentID: ID of document
    :param bool watch: If true\, enable an explicit watcher for the current user for the target document. If false\, add an explicit negation for the current user.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/watch".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send watch if the argument was provided, don't send null values
    if watch is not None:
        body.update({"watch": watch})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def set_current_user_document_watch_status_by_path(
    parentFolderPath: str,
    documentName: str,
    watch: bool = None,
    customer: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Change current user watcher status for document. Requires read access to the document. (PUBLIC)

    :param str parentFolderPath: Path to parent folder \(if not specified\, select document from root folder\)
    :param str documentName: Document name
    :param bool watch: If true\, enable an explicit watcher for the current user for the target document. If false\, add an explicit negation for the current user.
    :param str customer: Customer space to lookup folder in \(default is current users customer\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/path/watch{parentFolderPath}/{documentName}".format(
        parentFolderPath=parentFolderPath, documentName=documentName
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send watch if the argument was provided, don't send null values
    if watch is not None:
        body.update({"watch": watch})

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def set_document_labels(
    documentID: int,
    addLabels: str = None,
    removeLabels: str = None,
    setLabels: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Update labels for specified document (PUBLIC)

    :param int documentID: ID of document to set labels for
    :param list addLabels: Add these labels to existing labels. Cannot be used with setLabels.
    :param list removeLabels: Remove these labels from existing labels. Cannot be used with setLabels.
    :param list setLabels: Overwrite existing labels with this set of labels. Cannot be used with addLabels or removeLabels.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/labels".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send addLabels if the argument was provided, don't send null values
    if addLabels is not None:
        body.update({"addLabels": addLabels})
    # Only send removeLabels if the argument was provided, don't send null values
    if removeLabels is not None:
        body.update({"removeLabels": removeLabels})
    # Only send setLabels if the argument was provided, don't send null values
    if setLabels is not None:
        body.update({"setLabels": setLabels})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_document(
    documentID: int,
    data: str = None,
    mimeType: str = None,
    name: str = None,
    notificationOptions: dict = None,
    text: str = None,
    lockRequestTime: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Update specified document (PUBLIC)

    :param int documentID: ID of document to update
    :param str data:
    :param str mimeType: If set change document MIME type
    :param str name: If set change document name
    :param dict notificationOptions:
    :param str text: Plain text document content. If set change document content
    :param int lockRequestTime: Specify how long the document should be locked
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises DocumentLockedException: on 423
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send data if the argument was provided, don't send null values
    if data is not None:
        body.update({"data": data})
    # Only send lockRequestTime if the argument was provided, don't send null values
    if lockRequestTime is not None:
        body.update({"lockRequestTime": lockRequestTime})
    # Only send mimeType if the argument was provided, don't send null values
    if mimeType is not None:
        body.update({"mimeType": mimeType})
    # Only send name if the argument was provided, don't send null values
    if name is not None:
        body.update({"name": name})
    # Only send notificationOptions if the argument was provided, don't send null values
    if notificationOptions is not None:
        body.update({"notificationOptions": notificationOptions})
    # Only send text if the argument was provided, don't send null values
    if text is not None:
        body.update({"text": text})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_document_access_settings(
    documentID: int,
    accessMode: str,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Change access settings on specified document (PUBLIC)

    :param int documentID: Document ID
    :param str accessMode: Specify general access mode for document\/folder
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/documents/v1/document/{documentID}/access".format(documentID=documentID)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send accessMode if the argument was provided, don't send null values
    if accessMode is not None:
        body.update({"accessMode": accessMode})

    response = session.put(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_document_access_settings_by_path(
    parentFolderPath: str,
    documentName: str,
    accessMode: str,
    customer: str = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Change access settings on specified document (PUBLIC)

    :param str parentFolderPath: Path from customer root \(if not specified\, this returns the root\)
    :param str documentName: Document name
    :param str accessMode: Specify general access mode for document\/folder
    :param str customer: Customer space to fetch from \(default is current users customer\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = (
        "/documents/v1/document/path/access{parentFolderPath}/{documentName}".format(
            parentFolderPath=parentFolderPath, documentName=documentName
        )
    )

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send accessMode if the argument was provided, don't send null values
    if accessMode is not None:
        body.update({"accessMode": accessMode})

    query_parameters = {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        query_parameters.update({"customer": customer})

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
