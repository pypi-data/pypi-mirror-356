"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def aggregate_metrics(
    descriptor: str,
    startTimestamp: str,
    values: dict,
    endTimestamp: str = "now",
    calendarInterval: str = None,
    customer: str = None,
    customerDomain: str = None,
    groupBy: dict = None,
    keyIntervals: dict = None,
    keys: dict = None,
    resolution: int = None,
    sortBy: str = None,
    timeZone: str = None,
    descriptorDomain: str = None,
    groupByCustomer: bool = None,
    includeOthers: bool = True,
    resolutionUnit: str = "millisecond",
    skipKeyTranslation: bool = None,
    subCriteria: dict = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Fetch metrics that matches given aggregation criteria (PUBLIC)

    :param str descriptor: Shortname or ID of descriptor
    :param str startTimestamp: Restrict result set to records submitted after this time.Allows the use of unix timestamp \(milliseconds\)\, ISO timestamp\, or relative time.  Allows to specify a unix timestamp \(milliseconds\)\, ISO timestamp\, or relative time.
    :param list values: Descriptor\'s values included in aggregation result.
    :param str endTimestamp: Restrict result set to records submitted before this time. Allows the use of unix timestamp \(milliseconds\)\, ISO timestamp\, or relative time.  Allows to specify a unix timestamp \(milliseconds\)\, ISO timestamp\, or relative time.
    :param str calendarInterval: States the calendar interval the aggregation results should be sorted by\, such as month or year.It only allows for a resolution of 1\, and overrides the resolution unit such that if calendar interval is week\, then the result will be in intervals of 1 whole week\, expanding backwards in time for start and forwards for end. It is by defaults not used and set to null.
    :param list customer: Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics\, this field should not be set.
    :param str customerDomain: Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain.
    :param list groupBy: List of descriptor\'s key names for aggregating the result. The result will be grouped into key buckets up to the limit given.The buckets themselves will be ordered in a descending order based on the values aggregated.
    :param list keyIntervals: List of key intervals\, to filter the aggregation on.
    :param dict keys: Restrict result set to records with these key names and key values. Must match the keys given in the descriptor\, but IP type allows using IP ranges\, such as 192.168.0.0\/16 for IPv4 or 2001\:db8\:\:\/48 for IPv6. Deprecated\, use keyIntervals instead.
    :param int resolution: Aggregation resolution period in units specified by \'resolutionUnit\' property. If 0 the resolution is the entire time span given by the start and end timestamps. If the expected combination of timestamps\, resolution\, and resolution unit would result in more buckets than ElasticSearch permits\, which is 10000\, then the request will be denied. Note that the initial calculation on this is rough\, and that ES might still deny the request. In which case lower the resolution.
    :param list sortBy: Fields to sort result by. The results are sortable by any of the keys or values in the resulting aggregation. Note\: you have to provide the exact names of the fields you need the sorting done on. So if the resulting field name is \'value1\_sum\' this is what has to be provided. The sorting is prioritized based on the order given\, and in the case of key and value having the same name\, then the value is used\, while the key is ignored. Note\: use \'\-\' to sort in desc order. By default the results are not sorted. To sort by customer use option field name \'customerID\'.
    :param str timeZone: Settable Timezone. For more information please refer to official java documentation https\:\/\/docs.oracle.com\/middleware\/12211\/wcs\/tag\-ref\/MISC\/TimeZones.html If not set the data will be localized according to user\'s timezone.
    :param str descriptorDomain: Domain which is used if short name is specified for \'descriptor\' parameter. Defaults to current user domain.
    :param bool groupByCustomer: States whether Metric records will be aggregated by customers. Deprecated\, use the groupBy field.
    :param bool includeOthers: States whether the aggregation results will contain buckets for the data not included in the keys given by the groupBy field.Is not used if the groupBy field is empty. It defaults to true.
    :param str resolutionUnit: Units for aggregation resolution.
    :param bool skipKeyTranslation: Whether to skip key translation and return the raw value.
    :param list subCriteria: Set additional criterias to be applied as specified in the subcriteria object\(s\) \(AND\, AND NOT\, OR\).
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/metrics/v1/metric/{descriptor}/aggregate".format(descriptor=descriptor)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send calendarInterval if the argument was provided, don't send null values
    if calendarInterval is not None:
        body.update({"calendarInterval": calendarInterval})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send customerDomain if the argument was provided, don't send null values
    if customerDomain is not None:
        body.update({"customerDomain": customerDomain})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send groupBy if the argument was provided, don't send null values
    if groupBy is not None:
        body.update({"groupBy": groupBy})
    # Only send groupByCustomer if the argument was provided, don't send null values
    if groupByCustomer is not None:
        body.update({"groupByCustomer": groupByCustomer})
    # Only send includeOthers if the argument was provided, don't send null values
    if includeOthers is not None:
        body.update({"includeOthers": includeOthers})
    # Only send keyIntervals if the argument was provided, don't send null values
    if keyIntervals is not None:
        body.update({"keyIntervals": keyIntervals})
    # Only send keys if the argument was provided, don't send null values
    if keys is not None:
        body.update({"keys": keys})
    # Only send resolution if the argument was provided, don't send null values
    if resolution is not None:
        body.update({"resolution": resolution})
    # Only send resolutionUnit if the argument was provided, don't send null values
    if resolutionUnit is not None:
        body.update({"resolutionUnit": resolutionUnit})
    # Only send skipKeyTranslation if the argument was provided, don't send null values
    if skipKeyTranslation is not None:
        body.update({"skipKeyTranslation": skipKeyTranslation})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send timeZone if the argument was provided, don't send null values
    if timeZone is not None:
        body.update({"timeZone": timeZone})
    # Only send values if the argument was provided, don't send null values
    if values is not None:
        body.update({"values": values})

    query_parameters = {}
    # Only send descriptorDomain if the argument was provided, don't send null values
    if descriptorDomain is not None:
        query_parameters.update({"descriptorDomain": descriptorDomain})

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def search_metrics(
    descriptor: str,
    startTimestamp: str,
    endTimestamp: str = "now",
    customer: str = None,
    customerDomain: str = None,
    keyIntervals: dict = None,
    keys: dict = None,
    offset: int = None,
    sortBy: str = None,
    timeZone: str = None,
    descriptorDomain: str = None,
    limit: int = 25,
    skipKeyTranslation: bool = None,
    subCriteria: dict = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Search the submitted metrics for a specific descriptor. (PUBLIC)

    :param str descriptor: Shortname or ID of descriptor
    :param str startTimestamp: Restrict result set to records submitted after this time.Allows the use of unix timestamp \(milliseconds\)\, ISO timestamp\, or relative time.  Allows to specify a unix timestamp \(milliseconds\)\, ISO timestamp\, or relative time.
    :param str endTimestamp: Restrict result set to records submitted before this time. Allows the use of unix timestamp \(milliseconds\)\, ISO timestamp\, or relative time.  Allows to specify a unix timestamp \(milliseconds\)\, ISO timestamp\, or relative time.
    :param list customer: Restrict result set to records bound to specified customers. The list accepts both ID or shortname for the customers. For global metrics\, this field should not be set.
    :param str customerDomain: Restrict result set to records with customers from the specific domain. The field accepts ID or shortname for the domain.
    :param list keyIntervals: List of key intervals\, to filter the aggregation on.
    :param dict keys: Restrict result set to records with these key names and key values. Must match the keys given in the descriptor\, but IP type allows using IP ranges\, such as 192.168.0.0\/16 for IPv4 or 2001\:db8\:\:\/48 for IPv6. Deprecated\, use keyIntervals instead.
    :param int offset: Set this value to skip the first \(offset\) objects. By default\, return result from first object.Cannot\, in combination with the limit\, exceed 10000\, as this will exceed the Elasticsearch search window.
    :param list sortBy: Fields to sort result by. The results are sortable by any of the keys or values in the descriptor\,e.g. \'suricata\_detections\' is sortable by \'host\, interface\, alerts\, rules\_loaded\'.The sorting is prioritized based on the order given\, and in the case of both key and value having the same name\,then the value is used\, while the key is ignored.Note\: use \'\-\' to sort in desc order. By default the results are sorted by timestamp.
    :param str timeZone: Settable Timezone. For more information please refer to official java documentation https\:\/\/docs.oracle.com\/middleware\/12211\/wcs\/tag\-ref\/MISC\/TimeZones.html If not set the data will be localized according to user\'s timezone.
    :param str descriptorDomain: Domain which is used if short name is specified for \'descriptor\' parameter. Defaults to current user domain.
    :param int limit: Set this value to set max number of results. Cannot exceed 10000 which is the Elasticsearch search window.
    :param bool skipKeyTranslation: Whether to skip key translation and return the raw value.
    :param list subCriteria: Set additional criterias to be applied as specified in the subcriteria object\(s\) \(AND\, AND NOT\, OR\).
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/metrics/v1/metric/{descriptor}/search".format(descriptor=descriptor)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send customerDomain if the argument was provided, don't send null values
    if customerDomain is not None:
        body.update({"customerDomain": customerDomain})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send keyIntervals if the argument was provided, don't send null values
    if keyIntervals is not None:
        body.update({"keyIntervals": keyIntervals})
    # Only send keys if the argument was provided, don't send null values
    if keys is not None:
        body.update({"keys": keys})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send skipKeyTranslation if the argument was provided, don't send null values
    if skipKeyTranslation is not None:
        body.update({"skipKeyTranslation": skipKeyTranslation})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send subCriteria if the argument was provided, don't send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send timeZone if the argument was provided, don't send null values
    if timeZone is not None:
        body.update({"timeZone": timeZone})

    query_parameters = {}
    # Only send descriptorDomain if the argument was provided, don't send null values
    if descriptorDomain is not None:
        query_parameters.update({"descriptorDomain": descriptorDomain})

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def submit_metric(
    descriptor: str,
    records: dict,
    descriptorDomain: str = None,
    ignoreOnFailed: bool = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Submit new metric (PUBLIC)

    :param str descriptor: ID or short name of metric descriptor
    :param list records: Metric records for submission.
    :param str descriptorDomain: Domain which is used if short name is specified for \'descriptor\' parameter. Defaults to current user domain.
    :param bool ignoreOnFailed: Set this value for successful response even failures occur while submitting.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/metrics/v1/metric/{descriptor}".format(descriptor=descriptor)

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send ignoreOnFailed if the argument was provided, don't send null values
    if ignoreOnFailed is not None:
        body.update({"ignoreOnFailed": ignoreOnFailed})
    # Only send records if the argument was provided, don't send null values
    if records is not None:
        body.update({"records": records})

    query_parameters = {}
    # Only send descriptorDomain if the argument was provided, don't send null values
    if descriptorDomain is not None:
        query_parameters.update({"descriptorDomain": descriptorDomain})

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
