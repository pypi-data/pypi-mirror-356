"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def submit_csp_log_event(
    blockedUri: str,
    disposition: str,
    documentUri: str,
    originalPolicy: str,
    violatedDirective: str,
    csp_report: dict = None,
    effectiveDirective: str = None,
    referrer: str = None,
    scriptSample: str = None,
    statusCode: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Submit CSP log event (INTERNAL)

    :param str blockedUri: The URI of the resource that was blocked from loading by the Content Security Policy.
    :param str disposition: Either \'enforce\' or \'report\'.
    :param str documentUri: The URI of the document in which the violation occurred.
    :param str originalPolicy: The original policy as specified by the Content\-Security\-Policy\-Report\-Only HTTP header.
    :param str violatedDirective: The name of the policy section that was violated.
    :param dict csp_report:
    :param str effectiveDirective: The directive whose enforcement caused the violation.
    :param str referrer: The referrer of the document in which the violation occurred.
    :param str scriptSample: The first 40 characters of the inline script\, event handler\, or style that caused the violation.
    :param int statusCode: The HTTP status code of the resource on which the global object was instantiated.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: dictionary translated from JSON
    """

    route = "/logging/v1/csp-report-uri".format()

    session = api_session or _get_session()
    headers = {}

    body = body or {}
    # Only send blockedUri if the argument was provided, don't send null values
    if blockedUri is not None:
        body.update({"blockedUri": blockedUri})
    # Only send csp-report if the argument was provided, don't send null values
    if csp_report is not None:
        body.update({"csp-report": csp_report})
    # Only send disposition if the argument was provided, don't send null values
    if disposition is not None:
        body.update({"disposition": disposition})
    # Only send documentUri if the argument was provided, don't send null values
    if documentUri is not None:
        body.update({"documentUri": documentUri})
    # Only send effectiveDirective if the argument was provided, don't send null values
    if effectiveDirective is not None:
        body.update({"effectiveDirective": effectiveDirective})
    # Only send originalPolicy if the argument was provided, don't send null values
    if originalPolicy is not None:
        body.update({"originalPolicy": originalPolicy})
    # Only send referrer if the argument was provided, don't send null values
    if referrer is not None:
        body.update({"referrer": referrer})
    # Only send scriptSample if the argument was provided, don't send null values
    if scriptSample is not None:
        body.update({"scriptSample": scriptSample})
    # Only send statusCode if the argument was provided, don't send null values
    if statusCode is not None:
        body.update({"statusCode": statusCode})
    # Only send violatedDirective if the argument was provided, don't send null values
    if violatedDirective is not None:
        body.update({"violatedDirective": violatedDirective})

    response = session.post(
        route,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
