"""Autogenerated API"""
from argus_api.session import get_session as _get_session
from typing import TYPE_CHECKING, Optional

if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession
from requests import Response


def list_events_by_case(
    caseID: int,
    includeAllProperties: bool = None,
    includeComments: bool = None,
    includeSubEvents: bool = None,
    includeProperties: str = None,
    sortBy: str = None,
    limit: int = 25,
    offset: int = 0,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    r"""Lists events associated with the case (DEV)

    :param int caseID: Case ID
    :param bool includeAllProperties: Whether to include all properties of events \(overrides the selection of \'includeProperties\' if set to true\).
    :param bool includeComments: Whether to include comments of events.
    :param bool includeSubEvents: Whether to include sub\-events\' IDs.
    :param list includeProperties: Which event properties to include \(if includeAllProperties\=false\).
    :param list sortBy: Fields to sort events by \(without sign is ascending\, with \'\-\' sign is descending\).
    :param int limit: The max amount of events to return \(0 means no limit\)
    :param int offset: The amount of events to skip from the beginning
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes

    :returns: ``requests.Response`` object or dictionary translated from JSON
    """

    route = "/events/v2/case/{caseID}".format(caseID=caseID)

    session = api_session or _get_session()
    headers = {}
    headers["content"] = None
    if json:
        headers["content"] = "application/json"

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    # Only send includeAllProperties if the argument was provided, don't send null values
    if includeAllProperties is not None:
        query_parameters.update({"includeAllProperties": includeAllProperties})
    # Only send includeComments if the argument was provided, don't send null values
    if includeComments is not None:
        query_parameters.update({"includeComments": includeComments})
    # Only send includeSubEvents if the argument was provided, don't send null values
    if includeSubEvents is not None:
        query_parameters.update({"includeSubEvents": includeSubEvents})
    # Only send includeProperties if the argument was provided, don't send null values
    if includeProperties is not None:
        query_parameters.update({"includeProperties": includeProperties})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
