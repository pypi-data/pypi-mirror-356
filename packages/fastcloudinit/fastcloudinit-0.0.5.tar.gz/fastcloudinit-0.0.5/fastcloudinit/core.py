# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['ufw', 'user', 'source', 'apt', 'systemd', 'log_rotate', 'phone_home', 'reboot', 'mounts', 'runcmd', 'cc_validate',
           'cloud_init_base', 'cloud_init_config']

# %% ../nbs/00_core.ipynb
from fastcore.utils import *
from textwrap import dedent
from jsonschema import validate
from httpx import get as xget

import fastcore.xtras, yaml, json

# %% ../nbs/00_core.ipynb
def ufw(logging="off", def_incoming="deny", def_outgoing="allow", internal=None, **allows):
    cmds = [ f"ufw default {def_incoming} incoming", f"ufw default {def_outgoing} outgoing", f"ufw logging {logging}" ]
    for name, port in allows.items(): cmds.append("ufw allow {}/tcp".format(port))
    if internal: cmds.append("ufw allow in on {}".format(internal))
    cmds.append("ufw --force enable")
    return cmds

# %% ../nbs/00_core.ipynb
def user(name, pub_keys, groups=None, shell="/bin/bash", sudo=True):
    groups = listify(groups)
    if sudo and 'sudo' not in groups: groups.append('sudo')
    sudo = ["ALL=(ALL) NOPASSWD:ALL"] if sudo else []
    return dict(name=name, groups=groups, shell=shell, sudo=sudo, ssh_authorized_keys=listify(pub_keys))

# %% ../nbs/00_core.ipynb
def source(url, keyid, keyserver):
    return dict(source=f"deb [signed-by=$KEY_FILE] {url} $RELEASE stable", keyid=keyid, keyserver=keyserver)

# %% ../nbs/00_core.ipynb
def apt(unattended=False, autoclean=30, email='', auto_reboot=False, **sources):
    unattended = "1" if unattended else "0"
    auto_reboot = "true" if auto_reboot else "false"
    apt_conf = f"""\
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "{unattended}";
Unattended-Upgrade::Automatic-Reboot "{auto_reboot}";
"""
    if email: apt_conf += 'Unattended-Upgrade::Mail "{email}";\n'
    res = dict(conf=apt_conf)
    if sources: res['sources'] = sources
    return dict(apt=res)

# %% ../nbs/00_core.ipynb
def systemd(items):
    return [
        {'path': f"/etc/systemd/system/{unit_name}.d/override.conf", 
         'owner': 'root:root',  'permissions': '0644',  'content': content}
        for unit_name, content in items.items()
    ]

# %% ../nbs/00_core.ipynb
def log_rotate(freq="weekly", num_keep=7, fname="00-cloud-init-global"):
    snippet = f"""\
/var/log/*.log {{
    {freq}
    rotate {num_keep}
    compress
    su root adm
    create
    missingok
}}
"""
    return dict(path=f"/etc/logrotate.d/{fname}", owner="root:root", permissions="0644", content=snippet)

# %% ../nbs/00_core.ipynb
def phone_home(url):
    if not url: return {}
    res = dict(url=url, post=["instance_id", "hostname"], tries=5)
    return dict(phone_home=res)

# %% ../nbs/00_core.ipynb
def reboot(enable=True, message="Rebooting"):
    if not enable: return {}
    return dict(power_state=dict( mode="reboot", message=message, timeout=1, condition=True))

# %% ../nbs/00_core.ipynb
def mounts(devices):
    if not devices: return {}
    return dict(mounts=devices)

# %% ../nbs/00_core.ipynb
def runcmd(cmds):
    if not cmds: return {}
    return dict(runcmd=cmds)

# %% ../nbs/00_core.ipynb
def cc_validate(d):
    vsc = xget('https://raw.githubusercontent.com/canonical/cloud-init/main/cloudinit/config/schemas/versions.schema.cloud-config.json').text
    validate(d, schema=json.loads(vsc))

# %% ../nbs/00_core.ipynb
def cloud_init_base(hostname, packages=None, check=True, **kw):
    cfg = dict(
        hostname=hostname, preserve_hostname=False,
        packages=listify(packages), package_update=True, package_upgrade=True,
        disable_root=True, ssh_pwauth=False, **kw
    )
    if check: cc_validate(cfg)
    return "#cloud-config\n" + yaml.safe_dump(cfg, sort_keys=False, width=1_000_000)

# %% ../nbs/00_core.ipynb
def cloud_init_config(hostname, username, pub_keys, email='', groups=None, internal=None, cmds=None,
                      devices=None, ping_host=None, packages=None, dropins=None, **sources):
    cmds = listify(cmds)
    cmds += ufw(internal=internal, OpenSSH=22)
    return cloud_init_base(
        hostname, packages=packages,
        users=[user(username, pub_keys, groups=groups)],
        **runcmd(cmds),
        **apt(**sources),
        write_files=[ log_rotate(), *systemd(dropins or {}) ],
        **mounts(devices),
        **phone_home(ping_host),
        **reboot(),
    )
