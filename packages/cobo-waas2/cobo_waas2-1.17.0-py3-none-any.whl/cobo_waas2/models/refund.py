# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.payment_transaction import PaymentTransaction
from cobo_waas2.models.refund_status import RefundStatus
from cobo_waas2.models.refund_type import RefundType
from typing import Optional, Set
from typing_extensions import Self


class Refund(BaseModel):
    """
    Refund
    """  # noqa: E501
    request_id: Optional[StrictStr] = Field(default=None, description="The request ID provided by you when creating the refund request.")
    refund_id: StrictStr = Field(description="The refund order ID.")
    order_id: Optional[StrictStr] = Field(default=None, description="The order ID corresponding to this refund.")
    merchant_id: Optional[StrictStr] = Field(default=None, description="The merchant ID.")
    token_id: StrictStr = Field(description="The ID of the cryptocurrency used for refund.")
    chain_id: StrictStr = Field(description="The ID of the blockchain network on which the refund transaction occurs.")
    amount: StrictStr = Field(description="The amount in cryptocurrency to be returned for this refund order.")
    to_address: StrictStr = Field(description="The recipient's wallet address where the refund will be sent.")
    status: RefundStatus
    refund_type: Optional[RefundType] = None
    created_timestamp: Optional[StrictInt] = Field(default=None, description="The created time of the refund order, represented as a UNIX timestamp in seconds.")
    updated_timestamp: Optional[StrictInt] = Field(default=None, description="The updated time of the refund order, represented as a UNIX timestamp in seconds.")
    initiator: Optional[StrictStr] = Field(default=None, description="The initiator of this refund order, usually the user's API key.")
    transactions: Optional[List[PaymentTransaction]] = Field(default=None, description="An array of transactions associated with this refund order. Each transaction represents a separate blockchain operation related to the refund process.")
    __properties: ClassVar[List[str]] = ["request_id", "refund_id", "order_id", "merchant_id", "token_id", "chain_id", "amount", "to_address", "status", "refund_type", "created_timestamp", "updated_timestamp", "initiator", "transactions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Refund from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item in self.transactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['transactions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Refund from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "request_id": obj.get("request_id"),
            "refund_id": obj.get("refund_id"),
            "order_id": obj.get("order_id"),
            "merchant_id": obj.get("merchant_id"),
            "token_id": obj.get("token_id"),
            "chain_id": obj.get("chain_id"),
            "amount": obj.get("amount"),
            "to_address": obj.get("to_address"),
            "status": obj.get("status"),
            "refund_type": obj.get("refund_type"),
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp"),
            "initiator": obj.get("initiator"),
            "transactions": [PaymentTransaction.from_dict(_item) for _item in obj["transactions"]] if obj.get("transactions") is not None else None
        })
        return _obj


