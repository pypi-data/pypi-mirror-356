# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LiquidationAddressResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'state': 'str',
        'customer_id': 'str',
        'chain': 'str',
        'currency': 'str',
        'address': 'str',
        'external_account_id': 'str',
        'prefunded_account_id': 'str',
        'bridge_wallet_id': 'str',
        'destination_payment_rail': 'str',
        'destination_currency': 'str',
        'custom_developer_fee_percent': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'customer_id': 'customer_id',
        'chain': 'chain',
        'currency': 'currency',
        'address': 'address',
        'external_account_id': 'external_account_id',
        'prefunded_account_id': 'prefunded_account_id',
        'bridge_wallet_id': 'bridge_wallet_id',
        'destination_payment_rail': 'destination_payment_rail',
        'destination_currency': 'destination_currency',
        'custom_developer_fee_percent': 'custom_developer_fee_percent',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, state=None, customer_id=None, chain=None, currency=None, address=None, external_account_id=None, prefunded_account_id=None, bridge_wallet_id=None, destination_payment_rail=None, destination_currency=None, custom_developer_fee_percent=None, created_at=None, updated_at=None):  # noqa: E501
        """LiquidationAddressResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._state = None
        self._customer_id = None
        self._chain = None
        self._currency = None
        self._address = None
        self._external_account_id = None
        self._prefunded_account_id = None
        self._bridge_wallet_id = None
        self._destination_payment_rail = None
        self._destination_currency = None
        self._custom_developer_fee_percent = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.state = state
        self.customer_id = customer_id
        self.chain = chain
        self.currency = currency
        self.address = address
        if external_account_id is not None:
            self.external_account_id = external_account_id
        if prefunded_account_id is not None:
            self.prefunded_account_id = prefunded_account_id
        if bridge_wallet_id is not None:
            self.bridge_wallet_id = bridge_wallet_id
        if destination_payment_rail is not None:
            self.destination_payment_rail = destination_payment_rail
        if destination_currency is not None:
            self.destination_currency = destination_currency
        if custom_developer_fee_percent is not None:
            self.custom_developer_fee_percent = custom_developer_fee_percent
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this LiquidationAddressResponseDto.  # noqa: E501

        Unique identifier for the liquidation address  # noqa: E501

        :return: The id of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LiquidationAddressResponseDto.

        Unique identifier for the liquidation address  # noqa: E501

        :param id: The id of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def state(self):
        """Gets the state of this LiquidationAddressResponseDto.  # noqa: E501

        Current state of the liquidation address  # noqa: E501

        :return: The state of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LiquidationAddressResponseDto.

        Current state of the liquidation address  # noqa: E501

        :param state: The state of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def customer_id(self):
        """Gets the customer_id of this LiquidationAddressResponseDto.  # noqa: E501

        Customer ID this liquidation address belongs to  # noqa: E501

        :return: The customer_id of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this LiquidationAddressResponseDto.

        Customer ID this liquidation address belongs to  # noqa: E501

        :param customer_id: The customer_id of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def chain(self):
        """Gets the chain of this LiquidationAddressResponseDto.  # noqa: E501

        Blockchain chain  # noqa: E501

        :return: The chain of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this LiquidationAddressResponseDto.

        Blockchain chain  # noqa: E501

        :param chain: The chain of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """
        if chain is None:
            raise ValueError("Invalid value for `chain`, must not be `None`")  # noqa: E501

        self._chain = chain

    @property
    def currency(self):
        """Gets the currency of this LiquidationAddressResponseDto.  # noqa: E501

        Currency  # noqa: E501

        :return: The currency of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this LiquidationAddressResponseDto.

        Currency  # noqa: E501

        :param currency: The currency of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def address(self):
        """Gets the address of this LiquidationAddressResponseDto.  # noqa: E501

        Liquidation address  # noqa: E501

        :return: The address of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LiquidationAddressResponseDto.

        Liquidation address  # noqa: E501

        :param address: The address of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def external_account_id(self):
        """Gets the external_account_id of this LiquidationAddressResponseDto.  # noqa: E501

        External account ID  # noqa: E501

        :return: The external_account_id of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this LiquidationAddressResponseDto.

        External account ID  # noqa: E501

        :param external_account_id: The external_account_id of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """

        self._external_account_id = external_account_id

    @property
    def prefunded_account_id(self):
        """Gets the prefunded_account_id of this LiquidationAddressResponseDto.  # noqa: E501

        Prefunded account ID  # noqa: E501

        :return: The prefunded_account_id of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._prefunded_account_id

    @prefunded_account_id.setter
    def prefunded_account_id(self, prefunded_account_id):
        """Sets the prefunded_account_id of this LiquidationAddressResponseDto.

        Prefunded account ID  # noqa: E501

        :param prefunded_account_id: The prefunded_account_id of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """

        self._prefunded_account_id = prefunded_account_id

    @property
    def bridge_wallet_id(self):
        """Gets the bridge_wallet_id of this LiquidationAddressResponseDto.  # noqa: E501

        Bridge wallet ID  # noqa: E501

        :return: The bridge_wallet_id of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._bridge_wallet_id

    @bridge_wallet_id.setter
    def bridge_wallet_id(self, bridge_wallet_id):
        """Sets the bridge_wallet_id of this LiquidationAddressResponseDto.

        Bridge wallet ID  # noqa: E501

        :param bridge_wallet_id: The bridge_wallet_id of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """

        self._bridge_wallet_id = bridge_wallet_id

    @property
    def destination_payment_rail(self):
        """Gets the destination_payment_rail of this LiquidationAddressResponseDto.  # noqa: E501

        Destination payment rail  # noqa: E501

        :return: The destination_payment_rail of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._destination_payment_rail

    @destination_payment_rail.setter
    def destination_payment_rail(self, destination_payment_rail):
        """Sets the destination_payment_rail of this LiquidationAddressResponseDto.

        Destination payment rail  # noqa: E501

        :param destination_payment_rail: The destination_payment_rail of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """

        self._destination_payment_rail = destination_payment_rail

    @property
    def destination_currency(self):
        """Gets the destination_currency of this LiquidationAddressResponseDto.  # noqa: E501

        Destination currency  # noqa: E501

        :return: The destination_currency of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._destination_currency

    @destination_currency.setter
    def destination_currency(self, destination_currency):
        """Sets the destination_currency of this LiquidationAddressResponseDto.

        Destination currency  # noqa: E501

        :param destination_currency: The destination_currency of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """

        self._destination_currency = destination_currency

    @property
    def custom_developer_fee_percent(self):
        """Gets the custom_developer_fee_percent of this LiquidationAddressResponseDto.  # noqa: E501

        Custom developer fee percent  # noqa: E501

        :return: The custom_developer_fee_percent of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._custom_developer_fee_percent

    @custom_developer_fee_percent.setter
    def custom_developer_fee_percent(self, custom_developer_fee_percent):
        """Sets the custom_developer_fee_percent of this LiquidationAddressResponseDto.

        Custom developer fee percent  # noqa: E501

        :param custom_developer_fee_percent: The custom_developer_fee_percent of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """

        self._custom_developer_fee_percent = custom_developer_fee_percent

    @property
    def created_at(self):
        """Gets the created_at of this LiquidationAddressResponseDto.  # noqa: E501

        Creation timestamp  # noqa: E501

        :return: The created_at of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LiquidationAddressResponseDto.

        Creation timestamp  # noqa: E501

        :param created_at: The created_at of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this LiquidationAddressResponseDto.  # noqa: E501

        Last update timestamp  # noqa: E501

        :return: The updated_at of this LiquidationAddressResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LiquidationAddressResponseDto.

        Last update timestamp  # noqa: E501

        :param updated_at: The updated_at of this LiquidationAddressResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LiquidationAddressResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiquidationAddressResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
