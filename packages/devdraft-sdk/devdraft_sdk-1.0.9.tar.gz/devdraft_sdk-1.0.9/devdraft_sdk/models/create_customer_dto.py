# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateCustomerDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'phone_number': 'str',
        'customer_type': 'str',
        'status': 'AllOfCreateCustomerDtoStatus'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'phone_number': 'phone_number',
        'customer_type': 'customer_type',
        'status': 'status'
    }

    def __init__(self, first_name=None, last_name=None, email=None, phone_number=None, customer_type='Individual', status=None):  # noqa: E501
        """CreateCustomerDto - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._email = None
        self._phone_number = None
        self._customer_type = None
        self._status = None
        self.discriminator = None
        self.first_name = first_name
        self.last_name = last_name
        if email is not None:
            self.email = email
        self.phone_number = phone_number
        if customer_type is not None:
            self.customer_type = customer_type
        if status is not None:
            self.status = status

    @property
    def first_name(self):
        """Gets the first_name of this CreateCustomerDto.  # noqa: E501

        Customer's first name. Used for personalization and legal documentation.  # noqa: E501

        :return: The first_name of this CreateCustomerDto.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CreateCustomerDto.

        Customer's first name. Used for personalization and legal documentation.  # noqa: E501

        :param first_name: The first_name of this CreateCustomerDto.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CreateCustomerDto.  # noqa: E501

        Customer's last name. Used for personalization and legal documentation.  # noqa: E501

        :return: The last_name of this CreateCustomerDto.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CreateCustomerDto.

        Customer's last name. Used for personalization and legal documentation.  # noqa: E501

        :param last_name: The last_name of this CreateCustomerDto.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this CreateCustomerDto.  # noqa: E501

        Customer's email address. Used for notifications, receipts, and account management. Must be a valid email format.  # noqa: E501

        :return: The email of this CreateCustomerDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateCustomerDto.

        Customer's email address. Used for notifications, receipts, and account management. Must be a valid email format.  # noqa: E501

        :param email: The email of this CreateCustomerDto.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this CreateCustomerDto.  # noqa: E501

        Customer's phone number. Used for SMS notifications and verification. Include country code for international numbers.  # noqa: E501

        :return: The phone_number of this CreateCustomerDto.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CreateCustomerDto.

        Customer's phone number. Used for SMS notifications and verification. Include country code for international numbers.  # noqa: E501

        :param phone_number: The phone_number of this CreateCustomerDto.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def customer_type(self):
        """Gets the customer_type of this CreateCustomerDto.  # noqa: E501

        Type of customer account. Determines available features and compliance requirements.  # noqa: E501

        :return: The customer_type of this CreateCustomerDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_type

    @customer_type.setter
    def customer_type(self, customer_type):
        """Sets the customer_type of this CreateCustomerDto.

        Type of customer account. Determines available features and compliance requirements.  # noqa: E501

        :param customer_type: The customer_type of this CreateCustomerDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Individual", "Business", "Enterprise", "Non-Profit"]  # noqa: E501
        if customer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `customer_type` ({0}), must be one of {1}"  # noqa: E501
                .format(customer_type, allowed_values)
            )

        self._customer_type = customer_type

    @property
    def status(self):
        """Gets the status of this CreateCustomerDto.  # noqa: E501

        Current status of the customer account. Controls access to services and features.  # noqa: E501

        :return: The status of this CreateCustomerDto.  # noqa: E501
        :rtype: AllOfCreateCustomerDtoStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateCustomerDto.

        Current status of the customer account. Controls access to services and features.  # noqa: E501

        :param status: The status of this CreateCustomerDto.  # noqa: E501
        :type: AllOfCreateCustomerDtoStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCustomerDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCustomerDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
