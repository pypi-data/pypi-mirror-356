# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExchangeRateResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'str',
        'to': 'str',
        'midmarket_rate': 'str',
        'buy_rate': 'str',
        'sell_rate': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'to': 'to',
        'midmarket_rate': 'midmarket_rate',
        'buy_rate': 'buy_rate',
        'sell_rate': 'sell_rate',
        'timestamp': 'timestamp'
    }

    def __init__(self, _from=None, to=None, midmarket_rate=None, buy_rate=None, sell_rate=None, timestamp=None):  # noqa: E501
        """ExchangeRateResponseDto - a model defined in Swagger"""  # noqa: E501
        self.__from = None
        self._to = None
        self._midmarket_rate = None
        self._buy_rate = None
        self._sell_rate = None
        self._timestamp = None
        self.discriminator = None
        self._from = _from
        self.to = to
        self.midmarket_rate = midmarket_rate
        self.buy_rate = buy_rate
        self.sell_rate = sell_rate
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def _from(self):
        """Gets the _from of this ExchangeRateResponseDto.  # noqa: E501

        Source currency code (USD for USDC)  # noqa: E501

        :return: The _from of this ExchangeRateResponseDto.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ExchangeRateResponseDto.

        Source currency code (USD for USDC)  # noqa: E501

        :param _from: The _from of this ExchangeRateResponseDto.  # noqa: E501
        :type: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this ExchangeRateResponseDto.  # noqa: E501

        Target currency code (EUR for EURC)  # noqa: E501

        :return: The to of this ExchangeRateResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ExchangeRateResponseDto.

        Target currency code (EUR for EURC)  # noqa: E501

        :param to: The to of this ExchangeRateResponseDto.  # noqa: E501
        :type: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def midmarket_rate(self):
        """Gets the midmarket_rate of this ExchangeRateResponseDto.  # noqa: E501

        Mid-market exchange rate from source to target currency  # noqa: E501

        :return: The midmarket_rate of this ExchangeRateResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._midmarket_rate

    @midmarket_rate.setter
    def midmarket_rate(self, midmarket_rate):
        """Sets the midmarket_rate of this ExchangeRateResponseDto.

        Mid-market exchange rate from source to target currency  # noqa: E501

        :param midmarket_rate: The midmarket_rate of this ExchangeRateResponseDto.  # noqa: E501
        :type: str
        """
        if midmarket_rate is None:
            raise ValueError("Invalid value for `midmarket_rate`, must not be `None`")  # noqa: E501

        self._midmarket_rate = midmarket_rate

    @property
    def buy_rate(self):
        """Gets the buy_rate of this ExchangeRateResponseDto.  # noqa: E501

        Rate for buying target currency (what you get when converting from source to target)  # noqa: E501

        :return: The buy_rate of this ExchangeRateResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._buy_rate

    @buy_rate.setter
    def buy_rate(self, buy_rate):
        """Sets the buy_rate of this ExchangeRateResponseDto.

        Rate for buying target currency (what you get when converting from source to target)  # noqa: E501

        :param buy_rate: The buy_rate of this ExchangeRateResponseDto.  # noqa: E501
        :type: str
        """
        if buy_rate is None:
            raise ValueError("Invalid value for `buy_rate`, must not be `None`")  # noqa: E501

        self._buy_rate = buy_rate

    @property
    def sell_rate(self):
        """Gets the sell_rate of this ExchangeRateResponseDto.  # noqa: E501

        Rate for selling target currency (what you pay when converting from target to source)  # noqa: E501

        :return: The sell_rate of this ExchangeRateResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._sell_rate

    @sell_rate.setter
    def sell_rate(self, sell_rate):
        """Sets the sell_rate of this ExchangeRateResponseDto.

        Rate for selling target currency (what you pay when converting from target to source)  # noqa: E501

        :param sell_rate: The sell_rate of this ExchangeRateResponseDto.  # noqa: E501
        :type: str
        """
        if sell_rate is None:
            raise ValueError("Invalid value for `sell_rate`, must not be `None`")  # noqa: E501

        self._sell_rate = sell_rate

    @property
    def timestamp(self):
        """Gets the timestamp of this ExchangeRateResponseDto.  # noqa: E501

        Timestamp when the exchange rate was last updated  # noqa: E501

        :return: The timestamp of this ExchangeRateResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ExchangeRateResponseDto.

        Timestamp when the exchange rate was last updated  # noqa: E501

        :param timestamp: The timestamp of this ExchangeRateResponseDto.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExchangeRateResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExchangeRateResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
