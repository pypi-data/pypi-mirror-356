# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AggregatedBalanceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'total_balance': 'str',
        'balances': 'list[list]'
    }

    attribute_map = {
        'currency': 'currency',
        'total_balance': 'total_balance',
        'balances': 'balances'
    }

    def __init__(self, currency=None, total_balance=None, balances=None):  # noqa: E501
        """AggregatedBalanceResponse - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._total_balance = None
        self._balances = None
        self.discriminator = None
        self.currency = currency
        self.total_balance = total_balance
        self.balances = balances

    @property
    def currency(self):
        """Gets the currency of this AggregatedBalanceResponse.  # noqa: E501

        The stablecoin currency  # noqa: E501

        :return: The currency of this AggregatedBalanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AggregatedBalanceResponse.

        The stablecoin currency  # noqa: E501

        :param currency: The currency of this AggregatedBalanceResponse.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        allowed_values = ["usdc", "eurc"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def total_balance(self):
        """Gets the total_balance of this AggregatedBalanceResponse.  # noqa: E501

        The total aggregated balance across all wallets and chains  # noqa: E501

        :return: The total_balance of this AggregatedBalanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_balance

    @total_balance.setter
    def total_balance(self, total_balance):
        """Sets the total_balance of this AggregatedBalanceResponse.

        The total aggregated balance across all wallets and chains  # noqa: E501

        :param total_balance: The total_balance of this AggregatedBalanceResponse.  # noqa: E501
        :type: str
        """
        if total_balance is None:
            raise ValueError("Invalid value for `total_balance`, must not be `None`")  # noqa: E501

        self._total_balance = total_balance

    @property
    def balances(self):
        """Gets the balances of this AggregatedBalanceResponse.  # noqa: E501

        Detailed breakdown of balances by wallet and chain  # noqa: E501

        :return: The balances of this AggregatedBalanceResponse.  # noqa: E501
        :rtype: list[list]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this AggregatedBalanceResponse.

        Detailed breakdown of balances by wallet and chain  # noqa: E501

        :param balances: The balances of this AggregatedBalanceResponse.  # noqa: E501
        :type: list[list]
        """
        if balances is None:
            raise ValueError("Invalid value for `balances`, must not be `None`")  # noqa: E501

        self._balances = balances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AggregatedBalanceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggregatedBalanceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
