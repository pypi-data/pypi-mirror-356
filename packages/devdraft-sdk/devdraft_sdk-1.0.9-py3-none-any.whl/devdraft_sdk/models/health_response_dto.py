# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HealthResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'timestamp': 'datetime',
        'version': 'str',
        'database': 'str',
        'message': 'str',
        'authenticated': 'bool'
    }

    attribute_map = {
        'status': 'status',
        'timestamp': 'timestamp',
        'version': 'version',
        'database': 'database',
        'message': 'message',
        'authenticated': 'authenticated'
    }

    def __init__(self, status=None, timestamp=None, version=None, database=None, message=None, authenticated=None):  # noqa: E501
        """HealthResponseDto - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._timestamp = None
        self._version = None
        self._database = None
        self._message = None
        self._authenticated = None
        self.discriminator = None
        self.status = status
        self.timestamp = timestamp
        self.version = version
        self.database = database
        self.message = message
        self.authenticated = authenticated

    @property
    def status(self):
        """Gets the status of this HealthResponseDto.  # noqa: E501

        Overall health status of the service. Returns \"ok\" when healthy, \"error\" when issues detected.  # noqa: E501

        :return: The status of this HealthResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HealthResponseDto.

        Overall health status of the service. Returns \"ok\" when healthy, \"error\" when issues detected.  # noqa: E501

        :param status: The status of this HealthResponseDto.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ok", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this HealthResponseDto.  # noqa: E501

        ISO 8601 timestamp when the health check was performed.  # noqa: E501

        :return: The timestamp of this HealthResponseDto.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this HealthResponseDto.

        ISO 8601 timestamp when the health check was performed.  # noqa: E501

        :param timestamp: The timestamp of this HealthResponseDto.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def version(self):
        """Gets the version of this HealthResponseDto.  # noqa: E501

        Current version of the API service. Useful for debugging and compatibility checks.  # noqa: E501

        :return: The version of this HealthResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HealthResponseDto.

        Current version of the API service. Useful for debugging and compatibility checks.  # noqa: E501

        :param version: The version of this HealthResponseDto.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def database(self):
        """Gets the database of this HealthResponseDto.  # noqa: E501

        Database connectivity status. Shows \"connected\" when database is accessible, \"error\" when connection fails.  # noqa: E501

        :return: The database of this HealthResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this HealthResponseDto.

        Database connectivity status. Shows \"connected\" when database is accessible, \"error\" when connection fails.  # noqa: E501

        :param database: The database of this HealthResponseDto.  # noqa: E501
        :type: str
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")  # noqa: E501
        allowed_values = ["connected", "error"]  # noqa: E501
        if database not in allowed_values:
            raise ValueError(
                "Invalid value for `database` ({0}), must be one of {1}"  # noqa: E501
                .format(database, allowed_values)
            )

        self._database = database

    @property
    def message(self):
        """Gets the message of this HealthResponseDto.  # noqa: E501

        Human-readable message describing the current health status and any issues.  # noqa: E501

        :return: The message of this HealthResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this HealthResponseDto.

        Human-readable message describing the current health status and any issues.  # noqa: E501

        :param message: The message of this HealthResponseDto.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def authenticated(self):
        """Gets the authenticated of this HealthResponseDto.  # noqa: E501

        Indicates whether the request was properly authenticated. Always true for this endpoint since authentication is required.  # noqa: E501

        :return: The authenticated of this HealthResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._authenticated

    @authenticated.setter
    def authenticated(self, authenticated):
        """Sets the authenticated of this HealthResponseDto.

        Indicates whether the request was properly authenticated. Always true for this endpoint since authentication is required.  # noqa: E501

        :param authenticated: The authenticated of this HealthResponseDto.  # noqa: E501
        :type: bool
        """
        if authenticated is None:
            raise ValueError("Invalid value for `authenticated`, must not be `None`")  # noqa: E501

        self._authenticated = authenticated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
