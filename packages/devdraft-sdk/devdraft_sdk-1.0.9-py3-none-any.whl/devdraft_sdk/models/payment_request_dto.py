# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentRequestDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'currency': 'str',
        'description': 'str',
        'customer_id': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'currency': 'currency',
        'description': 'description',
        'customer_id': 'customerId'
    }

    def __init__(self, amount=None, currency=None, description=None, customer_id=None):  # noqa: E501
        """PaymentRequestDto - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._currency = None
        self._description = None
        self._customer_id = None
        self.discriminator = None
        self.amount = amount
        self.currency = currency
        self.description = description
        if customer_id is not None:
            self.customer_id = customer_id

    @property
    def amount(self):
        """Gets the amount of this PaymentRequestDto.  # noqa: E501

        The amount to charge  # noqa: E501

        :return: The amount of this PaymentRequestDto.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentRequestDto.

        The amount to charge  # noqa: E501

        :param amount: The amount of this PaymentRequestDto.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this PaymentRequestDto.  # noqa: E501

        The currency code  # noqa: E501

        :return: The currency of this PaymentRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentRequestDto.

        The currency code  # noqa: E501

        :param currency: The currency of this PaymentRequestDto.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this PaymentRequestDto.  # noqa: E501

        Description of the payment  # noqa: E501

        :return: The description of this PaymentRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentRequestDto.

        Description of the payment  # noqa: E501

        :param description: The description of this PaymentRequestDto.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def customer_id(self):
        """Gets the customer_id of this PaymentRequestDto.  # noqa: E501

        Customer reference ID  # noqa: E501

        :return: The customer_id of this PaymentRequestDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PaymentRequestDto.

        Customer reference ID  # noqa: E501

        :param customer_id: The customer_id of this PaymentRequestDto.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentRequestDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
