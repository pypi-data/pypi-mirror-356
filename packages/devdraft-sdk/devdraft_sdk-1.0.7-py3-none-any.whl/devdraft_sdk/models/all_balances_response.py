# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllBalancesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'usdc': 'AllOfAllBalancesResponseUsdc',
        'eurc': 'AllOfAllBalancesResponseEurc',
        'total_usd_value': 'str'
    }

    attribute_map = {
        'usdc': 'usdc',
        'eurc': 'eurc',
        'total_usd_value': 'total_usd_value'
    }

    def __init__(self, usdc=None, eurc=None, total_usd_value=None):  # noqa: E501
        """AllBalancesResponse - a model defined in Swagger"""  # noqa: E501
        self._usdc = None
        self._eurc = None
        self._total_usd_value = None
        self.discriminator = None
        self.usdc = usdc
        self.eurc = eurc
        self.total_usd_value = total_usd_value

    @property
    def usdc(self):
        """Gets the usdc of this AllBalancesResponse.  # noqa: E501

        USDC balance aggregation  # noqa: E501

        :return: The usdc of this AllBalancesResponse.  # noqa: E501
        :rtype: AllOfAllBalancesResponseUsdc
        """
        return self._usdc

    @usdc.setter
    def usdc(self, usdc):
        """Sets the usdc of this AllBalancesResponse.

        USDC balance aggregation  # noqa: E501

        :param usdc: The usdc of this AllBalancesResponse.  # noqa: E501
        :type: AllOfAllBalancesResponseUsdc
        """
        if usdc is None:
            raise ValueError("Invalid value for `usdc`, must not be `None`")  # noqa: E501

        self._usdc = usdc

    @property
    def eurc(self):
        """Gets the eurc of this AllBalancesResponse.  # noqa: E501

        EURC balance aggregation  # noqa: E501

        :return: The eurc of this AllBalancesResponse.  # noqa: E501
        :rtype: AllOfAllBalancesResponseEurc
        """
        return self._eurc

    @eurc.setter
    def eurc(self, eurc):
        """Sets the eurc of this AllBalancesResponse.

        EURC balance aggregation  # noqa: E501

        :param eurc: The eurc of this AllBalancesResponse.  # noqa: E501
        :type: AllOfAllBalancesResponseEurc
        """
        if eurc is None:
            raise ValueError("Invalid value for `eurc`, must not be `None`")  # noqa: E501

        self._eurc = eurc

    @property
    def total_usd_value(self):
        """Gets the total_usd_value of this AllBalancesResponse.  # noqa: E501

        Total value in USD equivalent  # noqa: E501

        :return: The total_usd_value of this AllBalancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_usd_value

    @total_usd_value.setter
    def total_usd_value(self, total_usd_value):
        """Sets the total_usd_value of this AllBalancesResponse.

        Total value in USD equivalent  # noqa: E501

        :param total_usd_value: The total_usd_value of this AllBalancesResponse.  # noqa: E501
        :type: str
        """
        if total_usd_value is None:
            raise ValueError("Invalid value for `total_usd_value`, must not be `None`")  # noqa: E501

        self._total_usd_value = total_usd_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllBalancesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllBalancesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
