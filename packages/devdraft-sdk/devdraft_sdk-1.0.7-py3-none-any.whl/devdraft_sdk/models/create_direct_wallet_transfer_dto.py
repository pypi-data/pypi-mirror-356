# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateDirectWalletTransferDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wallet_id': 'str',
        'network': 'str',
        'stable_coin_currency': 'str',
        'amount': 'float'
    }

    attribute_map = {
        'wallet_id': 'walletId',
        'network': 'network',
        'stable_coin_currency': 'stableCoinCurrency',
        'amount': 'amount'
    }

    def __init__(self, wallet_id=None, network=None, stable_coin_currency=None, amount=None):  # noqa: E501
        """CreateDirectWalletTransferDto - a model defined in Swagger"""  # noqa: E501
        self._wallet_id = None
        self._network = None
        self._stable_coin_currency = None
        self._amount = None
        self.discriminator = None
        self.wallet_id = wallet_id
        self.network = network
        self.stable_coin_currency = stable_coin_currency
        self.amount = amount

    @property
    def wallet_id(self):
        """Gets the wallet_id of this CreateDirectWalletTransferDto.  # noqa: E501

        The ID of the bridge wallet to transfer from  # noqa: E501

        :return: The wallet_id of this CreateDirectWalletTransferDto.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this CreateDirectWalletTransferDto.

        The ID of the bridge wallet to transfer from  # noqa: E501

        :param wallet_id: The wallet_id of this CreateDirectWalletTransferDto.  # noqa: E501
        :type: str
        """
        if wallet_id is None:
            raise ValueError("Invalid value for `wallet_id`, must not be `None`")  # noqa: E501

        self._wallet_id = wallet_id

    @property
    def network(self):
        """Gets the network of this CreateDirectWalletTransferDto.  # noqa: E501

        The network to use for the transfer  # noqa: E501

        :return: The network of this CreateDirectWalletTransferDto.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this CreateDirectWalletTransferDto.

        The network to use for the transfer  # noqa: E501

        :param network: The network of this CreateDirectWalletTransferDto.  # noqa: E501
        :type: str
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def stable_coin_currency(self):
        """Gets the stable_coin_currency of this CreateDirectWalletTransferDto.  # noqa: E501

        The stablecoin currency to use  # noqa: E501

        :return: The stable_coin_currency of this CreateDirectWalletTransferDto.  # noqa: E501
        :rtype: str
        """
        return self._stable_coin_currency

    @stable_coin_currency.setter
    def stable_coin_currency(self, stable_coin_currency):
        """Sets the stable_coin_currency of this CreateDirectWalletTransferDto.

        The stablecoin currency to use  # noqa: E501

        :param stable_coin_currency: The stable_coin_currency of this CreateDirectWalletTransferDto.  # noqa: E501
        :type: str
        """
        if stable_coin_currency is None:
            raise ValueError("Invalid value for `stable_coin_currency`, must not be `None`")  # noqa: E501

        self._stable_coin_currency = stable_coin_currency

    @property
    def amount(self):
        """Gets the amount of this CreateDirectWalletTransferDto.  # noqa: E501

        The amount to transfer  # noqa: E501

        :return: The amount of this CreateDirectWalletTransferDto.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateDirectWalletTransferDto.

        The amount to transfer  # noqa: E501

        :param amount: The amount of this CreateDirectWalletTransferDto.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateDirectWalletTransferDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDirectWalletTransferDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
