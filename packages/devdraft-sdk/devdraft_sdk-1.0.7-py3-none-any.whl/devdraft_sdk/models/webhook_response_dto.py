# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhookResponseDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'url': 'str',
        'is_active': 'bool',
        'encrypted': 'bool',
        'created_at': 'str',
        'updated_at': 'str',
        'delivery_stats': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'url': 'url',
        'is_active': 'isActive',
        'encrypted': 'encrypted',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'delivery_stats': 'delivery_stats'
    }

    def __init__(self, id=None, name=None, url=None, is_active=None, encrypted=None, created_at=None, updated_at=None, delivery_stats=None):  # noqa: E501
        """WebhookResponseDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._url = None
        self._is_active = None
        self._encrypted = None
        self._created_at = None
        self._updated_at = None
        self._delivery_stats = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.url = url
        self.is_active = is_active
        self.encrypted = encrypted
        self.created_at = created_at
        self.updated_at = updated_at
        self.delivery_stats = delivery_stats

    @property
    def id(self):
        """Gets the id of this WebhookResponseDto.  # noqa: E501

        Unique identifier for the webhook  # noqa: E501

        :return: The id of this WebhookResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhookResponseDto.

        Unique identifier for the webhook  # noqa: E501

        :param id: The id of this WebhookResponseDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this WebhookResponseDto.  # noqa: E501

        Name of the webhook  # noqa: E501

        :return: The name of this WebhookResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebhookResponseDto.

        Name of the webhook  # noqa: E501

        :param name: The name of this WebhookResponseDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this WebhookResponseDto.  # noqa: E501

        URL where webhook events are sent  # noqa: E501

        :return: The url of this WebhookResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookResponseDto.

        URL where webhook events are sent  # noqa: E501

        :param url: The url of this WebhookResponseDto.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def is_active(self):
        """Gets the is_active of this WebhookResponseDto.  # noqa: E501

        Whether the webhook is currently active  # noqa: E501

        :return: The is_active of this WebhookResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this WebhookResponseDto.

        Whether the webhook is currently active  # noqa: E501

        :param is_active: The is_active of this WebhookResponseDto.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def encrypted(self):
        """Gets the encrypted of this WebhookResponseDto.  # noqa: E501

        Whether webhook payloads are encrypted  # noqa: E501

        :return: The encrypted of this WebhookResponseDto.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this WebhookResponseDto.

        Whether webhook payloads are encrypted  # noqa: E501

        :param encrypted: The encrypted of this WebhookResponseDto.  # noqa: E501
        :type: bool
        """
        if encrypted is None:
            raise ValueError("Invalid value for `encrypted`, must not be `None`")  # noqa: E501

        self._encrypted = encrypted

    @property
    def created_at(self):
        """Gets the created_at of this WebhookResponseDto.  # noqa: E501

        Timestamp when the webhook was created  # noqa: E501

        :return: The created_at of this WebhookResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WebhookResponseDto.

        Timestamp when the webhook was created  # noqa: E501

        :param created_at: The created_at of this WebhookResponseDto.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this WebhookResponseDto.  # noqa: E501

        Timestamp when the webhook was last updated  # noqa: E501

        :return: The updated_at of this WebhookResponseDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this WebhookResponseDto.

        Timestamp when the webhook was last updated  # noqa: E501

        :param updated_at: The updated_at of this WebhookResponseDto.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def delivery_stats(self):
        """Gets the delivery_stats of this WebhookResponseDto.  # noqa: E501

        Webhook delivery statistics  # noqa: E501

        :return: The delivery_stats of this WebhookResponseDto.  # noqa: E501
        :rtype: object
        """
        return self._delivery_stats

    @delivery_stats.setter
    def delivery_stats(self, delivery_stats):
        """Sets the delivery_stats of this WebhookResponseDto.

        Webhook delivery statistics  # noqa: E501

        :param delivery_stats: The delivery_stats of this WebhookResponseDto.  # noqa: E501
        :type: object
        """
        if delivery_stats is None:
            raise ValueError("Invalid value for `delivery_stats`, must not be `None`")  # noqa: E501

        self._delivery_stats = delivery_stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookResponseDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookResponseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
