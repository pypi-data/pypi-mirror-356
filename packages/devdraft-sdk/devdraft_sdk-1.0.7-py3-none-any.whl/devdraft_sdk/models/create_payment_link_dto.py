# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreatePaymentLinkDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'url': 'str',
        'description': 'str',
        'cover_image': 'str',
        'link_type': 'str',
        'amount': 'float',
        'payment_for_id': 'str',
        'recurring_type': 'str',
        'customer_id': 'str',
        'payment_link_products': 'list[PaymentLinkProductDto]',
        'is_for_all_product': 'bool',
        'allow_quantity_adjustment': 'bool',
        'collect_tax': 'bool',
        'tax_id': 'str',
        'collect_address': 'bool',
        'require_phone_number': 'bool',
        'limit_payments': 'bool',
        'max_payments': 'float',
        'custom_fields': 'object',
        'allow_business_tax_id': 'bool',
        'allow_mobile_payment': 'bool',
        'confirmation_page': 'str',
        'create_invoice_pdf': 'bool',
        'currency': 'str',
        'expiration_date': 'datetime'
    }

    attribute_map = {
        'title': 'title',
        'url': 'url',
        'description': 'description',
        'cover_image': 'coverImage',
        'link_type': 'linkType',
        'amount': 'amount',
        'payment_for_id': 'paymentForId',
        'recurring_type': 'recurringType',
        'customer_id': 'customerId',
        'payment_link_products': 'paymentLinkProducts',
        'is_for_all_product': 'isForAllProduct',
        'allow_quantity_adjustment': 'allowQuantityAdjustment',
        'collect_tax': 'collectTax',
        'tax_id': 'taxId',
        'collect_address': 'collectAddress',
        'require_phone_number': 'requirePhoneNumber',
        'limit_payments': 'limitPayments',
        'max_payments': 'maxPayments',
        'custom_fields': 'customFields',
        'allow_business_tax_id': 'allowBusinessTaxId',
        'allow_mobile_payment': 'allowMobilePayment',
        'confirmation_page': 'confirmationPage',
        'create_invoice_pdf': 'createInvoicePdf',
        'currency': 'currency',
        'expiration_date': 'expiration_date'
    }

    def __init__(self, title=None, url=None, description=None, cover_image=None, link_type=None, amount=None, payment_for_id=None, recurring_type='ONE_TIME', customer_id=None, payment_link_products=None, is_for_all_product=False, allow_quantity_adjustment=True, collect_tax=False, tax_id=None, collect_address=False, require_phone_number=False, limit_payments=False, max_payments=None, custom_fields=None, allow_business_tax_id=False, allow_mobile_payment=False, confirmation_page='SHOW', create_invoice_pdf=False, currency='usdc', expiration_date=None):  # noqa: E501
        """CreatePaymentLinkDto - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._url = None
        self._description = None
        self._cover_image = None
        self._link_type = None
        self._amount = None
        self._payment_for_id = None
        self._recurring_type = None
        self._customer_id = None
        self._payment_link_products = None
        self._is_for_all_product = None
        self._allow_quantity_adjustment = None
        self._collect_tax = None
        self._tax_id = None
        self._collect_address = None
        self._require_phone_number = None
        self._limit_payments = None
        self._max_payments = None
        self._custom_fields = None
        self._allow_business_tax_id = None
        self._allow_mobile_payment = None
        self._confirmation_page = None
        self._create_invoice_pdf = None
        self._currency = None
        self._expiration_date = None
        self.discriminator = None
        self.title = title
        self.url = url
        if description is not None:
            self.description = description
        if cover_image is not None:
            self.cover_image = cover_image
        self.link_type = link_type
        if amount is not None:
            self.amount = amount
        if payment_for_id is not None:
            self.payment_for_id = payment_for_id
        self.recurring_type = recurring_type
        if customer_id is not None:
            self.customer_id = customer_id
        if payment_link_products is not None:
            self.payment_link_products = payment_link_products
        if is_for_all_product is not None:
            self.is_for_all_product = is_for_all_product
        self.allow_quantity_adjustment = allow_quantity_adjustment
        self.collect_tax = collect_tax
        if tax_id is not None:
            self.tax_id = tax_id
        self.collect_address = collect_address
        self.require_phone_number = require_phone_number
        if limit_payments is not None:
            self.limit_payments = limit_payments
        if max_payments is not None:
            self.max_payments = max_payments
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if allow_business_tax_id is not None:
            self.allow_business_tax_id = allow_business_tax_id
        self.allow_mobile_payment = allow_mobile_payment
        self.confirmation_page = confirmation_page
        self.create_invoice_pdf = create_invoice_pdf
        self.currency = currency
        if expiration_date is not None:
            self.expiration_date = expiration_date

    @property
    def title(self):
        """Gets the title of this CreatePaymentLinkDto.  # noqa: E501

        Display title for the payment link. This appears on the checkout page and in customer communications.  # noqa: E501

        :return: The title of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreatePaymentLinkDto.

        Display title for the payment link. This appears on the checkout page and in customer communications.  # noqa: E501

        :param title: The title of this CreatePaymentLinkDto.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def url(self):
        """Gets the url of this CreatePaymentLinkDto.  # noqa: E501

        Unique URL slug for the payment link. Can be a full URL or just the path segment. Must be unique within your account.  # noqa: E501

        :return: The url of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreatePaymentLinkDto.

        Unique URL slug for the payment link. Can be a full URL or just the path segment. Must be unique within your account.  # noqa: E501

        :param url: The url of this CreatePaymentLinkDto.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def description(self):
        """Gets the description of this CreatePaymentLinkDto.  # noqa: E501

        Detailed description of what the customer is purchasing. Supports markdown formatting.  # noqa: E501

        :return: The description of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreatePaymentLinkDto.

        Detailed description of what the customer is purchasing. Supports markdown formatting.  # noqa: E501

        :param description: The description of this CreatePaymentLinkDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def cover_image(self):
        """Gets the cover_image of this CreatePaymentLinkDto.  # noqa: E501

        Cover image URL  # noqa: E501

        :return: The cover_image of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: str
        """
        return self._cover_image

    @cover_image.setter
    def cover_image(self, cover_image):
        """Sets the cover_image of this CreatePaymentLinkDto.

        Cover image URL  # noqa: E501

        :param cover_image: The cover_image of this CreatePaymentLinkDto.  # noqa: E501
        :type: str
        """

        self._cover_image = cover_image

    @property
    def link_type(self):
        """Gets the link_type of this CreatePaymentLinkDto.  # noqa: E501

        Type of the payment link  # noqa: E501

        :return: The link_type of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this CreatePaymentLinkDto.

        Type of the payment link  # noqa: E501

        :param link_type: The link_type of this CreatePaymentLinkDto.  # noqa: E501
        :type: str
        """
        if link_type is None:
            raise ValueError("Invalid value for `link_type`, must not be `None`")  # noqa: E501
        allowed_values = ["INVOICE", "PRODUCT", "COLLECTION", "SUBSCRIPTION", "DONATION"]  # noqa: E501
        if link_type not in allowed_values:
            raise ValueError(
                "Invalid value for `link_type` ({0}), must be one of {1}"  # noqa: E501
                .format(link_type, allowed_values)
            )

        self._link_type = link_type

    @property
    def amount(self):
        """Gets the amount of this CreatePaymentLinkDto.  # noqa: E501

        Amount for the payment link  # noqa: E501

        :return: The amount of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreatePaymentLinkDto.

        Amount for the payment link  # noqa: E501

        :param amount: The amount of this CreatePaymentLinkDto.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def payment_for_id(self):
        """Gets the payment_for_id of this CreatePaymentLinkDto.  # noqa: E501

        Payment for ID  # noqa: E501

        :return: The payment_for_id of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: str
        """
        return self._payment_for_id

    @payment_for_id.setter
    def payment_for_id(self, payment_for_id):
        """Sets the payment_for_id of this CreatePaymentLinkDto.

        Payment for ID  # noqa: E501

        :param payment_for_id: The payment_for_id of this CreatePaymentLinkDto.  # noqa: E501
        :type: str
        """

        self._payment_for_id = payment_for_id

    @property
    def recurring_type(self):
        """Gets the recurring_type of this CreatePaymentLinkDto.  # noqa: E501

        Recurring type  # noqa: E501

        :return: The recurring_type of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: str
        """
        return self._recurring_type

    @recurring_type.setter
    def recurring_type(self, recurring_type):
        """Sets the recurring_type of this CreatePaymentLinkDto.

        Recurring type  # noqa: E501

        :param recurring_type: The recurring_type of this CreatePaymentLinkDto.  # noqa: E501
        :type: str
        """
        if recurring_type is None:
            raise ValueError("Invalid value for `recurring_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ONE_TIME", "WEEKLY", "BI_WEEKLY", "MONTHLY", "BI_MONTHLY", "QUARTERLY", "ANNUALLY"]  # noqa: E501
        if recurring_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recurring_type` ({0}), must be one of {1}"  # noqa: E501
                .format(recurring_type, allowed_values)
            )

        self._recurring_type = recurring_type

    @property
    def customer_id(self):
        """Gets the customer_id of this CreatePaymentLinkDto.  # noqa: E501

        Customer ID  # noqa: E501

        :return: The customer_id of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CreatePaymentLinkDto.

        Customer ID  # noqa: E501

        :param customer_id: The customer_id of this CreatePaymentLinkDto.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def payment_link_products(self):
        """Gets the payment_link_products of this CreatePaymentLinkDto.  # noqa: E501

        Array of products in the payment link  # noqa: E501

        :return: The payment_link_products of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: list[PaymentLinkProductDto]
        """
        return self._payment_link_products

    @payment_link_products.setter
    def payment_link_products(self, payment_link_products):
        """Sets the payment_link_products of this CreatePaymentLinkDto.

        Array of products in the payment link  # noqa: E501

        :param payment_link_products: The payment_link_products of this CreatePaymentLinkDto.  # noqa: E501
        :type: list[PaymentLinkProductDto]
        """

        self._payment_link_products = payment_link_products

    @property
    def is_for_all_product(self):
        """Gets the is_for_all_product of this CreatePaymentLinkDto.  # noqa: E501

        Whether the payment link is for all products  # noqa: E501

        :return: The is_for_all_product of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_for_all_product

    @is_for_all_product.setter
    def is_for_all_product(self, is_for_all_product):
        """Sets the is_for_all_product of this CreatePaymentLinkDto.

        Whether the payment link is for all products  # noqa: E501

        :param is_for_all_product: The is_for_all_product of this CreatePaymentLinkDto.  # noqa: E501
        :type: bool
        """

        self._is_for_all_product = is_for_all_product

    @property
    def allow_quantity_adjustment(self):
        """Gets the allow_quantity_adjustment of this CreatePaymentLinkDto.  # noqa: E501

        Whether to allow quantity adjustment  # noqa: E501

        :return: The allow_quantity_adjustment of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_quantity_adjustment

    @allow_quantity_adjustment.setter
    def allow_quantity_adjustment(self, allow_quantity_adjustment):
        """Sets the allow_quantity_adjustment of this CreatePaymentLinkDto.

        Whether to allow quantity adjustment  # noqa: E501

        :param allow_quantity_adjustment: The allow_quantity_adjustment of this CreatePaymentLinkDto.  # noqa: E501
        :type: bool
        """
        if allow_quantity_adjustment is None:
            raise ValueError("Invalid value for `allow_quantity_adjustment`, must not be `None`")  # noqa: E501

        self._allow_quantity_adjustment = allow_quantity_adjustment

    @property
    def collect_tax(self):
        """Gets the collect_tax of this CreatePaymentLinkDto.  # noqa: E501

        Whether to collect tax  # noqa: E501

        :return: The collect_tax of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: bool
        """
        return self._collect_tax

    @collect_tax.setter
    def collect_tax(self, collect_tax):
        """Sets the collect_tax of this CreatePaymentLinkDto.

        Whether to collect tax  # noqa: E501

        :param collect_tax: The collect_tax of this CreatePaymentLinkDto.  # noqa: E501
        :type: bool
        """
        if collect_tax is None:
            raise ValueError("Invalid value for `collect_tax`, must not be `None`")  # noqa: E501

        self._collect_tax = collect_tax

    @property
    def tax_id(self):
        """Gets the tax_id of this CreatePaymentLinkDto.  # noqa: E501

        Tax ID  # noqa: E501

        :return: The tax_id of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this CreatePaymentLinkDto.

        Tax ID  # noqa: E501

        :param tax_id: The tax_id of this CreatePaymentLinkDto.  # noqa: E501
        :type: str
        """

        self._tax_id = tax_id

    @property
    def collect_address(self):
        """Gets the collect_address of this CreatePaymentLinkDto.  # noqa: E501

        Whether to collect address  # noqa: E501

        :return: The collect_address of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: bool
        """
        return self._collect_address

    @collect_address.setter
    def collect_address(self, collect_address):
        """Sets the collect_address of this CreatePaymentLinkDto.

        Whether to collect address  # noqa: E501

        :param collect_address: The collect_address of this CreatePaymentLinkDto.  # noqa: E501
        :type: bool
        """
        if collect_address is None:
            raise ValueError("Invalid value for `collect_address`, must not be `None`")  # noqa: E501

        self._collect_address = collect_address

    @property
    def require_phone_number(self):
        """Gets the require_phone_number of this CreatePaymentLinkDto.  # noqa: E501

        Whether to require phone number  # noqa: E501

        :return: The require_phone_number of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: bool
        """
        return self._require_phone_number

    @require_phone_number.setter
    def require_phone_number(self, require_phone_number):
        """Sets the require_phone_number of this CreatePaymentLinkDto.

        Whether to require phone number  # noqa: E501

        :param require_phone_number: The require_phone_number of this CreatePaymentLinkDto.  # noqa: E501
        :type: bool
        """
        if require_phone_number is None:
            raise ValueError("Invalid value for `require_phone_number`, must not be `None`")  # noqa: E501

        self._require_phone_number = require_phone_number

    @property
    def limit_payments(self):
        """Gets the limit_payments of this CreatePaymentLinkDto.  # noqa: E501

        Whether to limit payments  # noqa: E501

        :return: The limit_payments of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: bool
        """
        return self._limit_payments

    @limit_payments.setter
    def limit_payments(self, limit_payments):
        """Sets the limit_payments of this CreatePaymentLinkDto.

        Whether to limit payments  # noqa: E501

        :param limit_payments: The limit_payments of this CreatePaymentLinkDto.  # noqa: E501
        :type: bool
        """

        self._limit_payments = limit_payments

    @property
    def max_payments(self):
        """Gets the max_payments of this CreatePaymentLinkDto.  # noqa: E501

        Maximum number of payments  # noqa: E501

        :return: The max_payments of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: float
        """
        return self._max_payments

    @max_payments.setter
    def max_payments(self, max_payments):
        """Sets the max_payments of this CreatePaymentLinkDto.

        Maximum number of payments  # noqa: E501

        :param max_payments: The max_payments of this CreatePaymentLinkDto.  # noqa: E501
        :type: float
        """

        self._max_payments = max_payments

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CreatePaymentLinkDto.  # noqa: E501

        Custom fields  # noqa: E501

        :return: The custom_fields of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CreatePaymentLinkDto.

        Custom fields  # noqa: E501

        :param custom_fields: The custom_fields of this CreatePaymentLinkDto.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    @property
    def allow_business_tax_id(self):
        """Gets the allow_business_tax_id of this CreatePaymentLinkDto.  # noqa: E501

        Whether to allow business tax ID  # noqa: E501

        :return: The allow_business_tax_id of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_business_tax_id

    @allow_business_tax_id.setter
    def allow_business_tax_id(self, allow_business_tax_id):
        """Sets the allow_business_tax_id of this CreatePaymentLinkDto.

        Whether to allow business tax ID  # noqa: E501

        :param allow_business_tax_id: The allow_business_tax_id of this CreatePaymentLinkDto.  # noqa: E501
        :type: bool
        """

        self._allow_business_tax_id = allow_business_tax_id

    @property
    def allow_mobile_payment(self):
        """Gets the allow_mobile_payment of this CreatePaymentLinkDto.  # noqa: E501

        Whether to allow mobile payment  # noqa: E501

        :return: The allow_mobile_payment of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_mobile_payment

    @allow_mobile_payment.setter
    def allow_mobile_payment(self, allow_mobile_payment):
        """Sets the allow_mobile_payment of this CreatePaymentLinkDto.

        Whether to allow mobile payment  # noqa: E501

        :param allow_mobile_payment: The allow_mobile_payment of this CreatePaymentLinkDto.  # noqa: E501
        :type: bool
        """
        if allow_mobile_payment is None:
            raise ValueError("Invalid value for `allow_mobile_payment`, must not be `None`")  # noqa: E501

        self._allow_mobile_payment = allow_mobile_payment

    @property
    def confirmation_page(self):
        """Gets the confirmation_page of this CreatePaymentLinkDto.  # noqa: E501

        Confirmation page type  # noqa: E501

        :return: The confirmation_page of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: str
        """
        return self._confirmation_page

    @confirmation_page.setter
    def confirmation_page(self, confirmation_page):
        """Sets the confirmation_page of this CreatePaymentLinkDto.

        Confirmation page type  # noqa: E501

        :param confirmation_page: The confirmation_page of this CreatePaymentLinkDto.  # noqa: E501
        :type: str
        """
        if confirmation_page is None:
            raise ValueError("Invalid value for `confirmation_page`, must not be `None`")  # noqa: E501
        allowed_values = ["SHOW", "REDIRECT"]  # noqa: E501
        if confirmation_page not in allowed_values:
            raise ValueError(
                "Invalid value for `confirmation_page` ({0}), must be one of {1}"  # noqa: E501
                .format(confirmation_page, allowed_values)
            )

        self._confirmation_page = confirmation_page

    @property
    def create_invoice_pdf(self):
        """Gets the create_invoice_pdf of this CreatePaymentLinkDto.  # noqa: E501

        Whether to create invoice PDF  # noqa: E501

        :return: The create_invoice_pdf of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: bool
        """
        return self._create_invoice_pdf

    @create_invoice_pdf.setter
    def create_invoice_pdf(self, create_invoice_pdf):
        """Sets the create_invoice_pdf of this CreatePaymentLinkDto.

        Whether to create invoice PDF  # noqa: E501

        :param create_invoice_pdf: The create_invoice_pdf of this CreatePaymentLinkDto.  # noqa: E501
        :type: bool
        """
        if create_invoice_pdf is None:
            raise ValueError("Invalid value for `create_invoice_pdf`, must not be `None`")  # noqa: E501

        self._create_invoice_pdf = create_invoice_pdf

    @property
    def currency(self):
        """Gets the currency of this CreatePaymentLinkDto.  # noqa: E501

        Currency  # noqa: E501

        :return: The currency of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreatePaymentLinkDto.

        Currency  # noqa: E501

        :param currency: The currency of this CreatePaymentLinkDto.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        allowed_values = ["usdc", "eurc"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def expiration_date(self):
        """Gets the expiration_date of this CreatePaymentLinkDto.  # noqa: E501

        Expiration date  # noqa: E501

        :return: The expiration_date of this CreatePaymentLinkDto.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this CreatePaymentLinkDto.

        Expiration date  # noqa: E501

        :param expiration_date: The expiration_date of this CreatePaymentLinkDto.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePaymentLinkDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePaymentLinkDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
