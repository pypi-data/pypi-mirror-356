# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from devdraft_ai_sdk.api_client import ApiClient


class ProductsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def product_controller_create(self, name, description, price, currency, type, weight, unit, quantity, stock_count, status, product_type, images, **kwargs):  # noqa: E501
        """Create a new product  # noqa: E501

        Creates a new product with optional image uploads.      This endpoint allows you to create products with detailed information and multiple images.  ## Use Cases - Add new products to your catalog - Create products with multiple images - Set up product pricing and descriptions  ## Supported Image Formats - JPEG/JPG - PNG - WebP - Maximum 10 images per product - Maximum file size: 5MB per image  ## Example Request (multipart/form-data) ``` name: \"Premium Widget\" description: \"High-quality widget for all your needs\" price: \"99.99\" images: [file1.jpg, file2.jpg]  // Optional, up to 10 images ```  ## Required Fields - `name`: Product name - `price`: Product price (decimal number)  ## Optional Fields - `description`: Detailed product description - `images`: Product images (up to 10 files)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_controller_create(name, description, price, currency, type, weight, unit, quantity, stock_count, status, product_type, images, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str description: (required)
        :param float price: (required)
        :param str currency: (required)
        :param str type: (required)
        :param float weight: (required)
        :param str unit: (required)
        :param float quantity: (required)
        :param float stock_count: (required)
        :param str status: (required)
        :param str product_type: (required)
        :param list[str] images: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_controller_create_with_http_info(name, description, price, currency, type, weight, unit, quantity, stock_count, status, product_type, images, **kwargs)  # noqa: E501
        else:
            (data) = self.product_controller_create_with_http_info(name, description, price, currency, type, weight, unit, quantity, stock_count, status, product_type, images, **kwargs)  # noqa: E501
            return data

    def product_controller_create_with_http_info(self, name, description, price, currency, type, weight, unit, quantity, stock_count, status, product_type, images, **kwargs):  # noqa: E501
        """Create a new product  # noqa: E501

        Creates a new product with optional image uploads.      This endpoint allows you to create products with detailed information and multiple images.  ## Use Cases - Add new products to your catalog - Create products with multiple images - Set up product pricing and descriptions  ## Supported Image Formats - JPEG/JPG - PNG - WebP - Maximum 10 images per product - Maximum file size: 5MB per image  ## Example Request (multipart/form-data) ``` name: \"Premium Widget\" description: \"High-quality widget for all your needs\" price: \"99.99\" images: [file1.jpg, file2.jpg]  // Optional, up to 10 images ```  ## Required Fields - `name`: Product name - `price`: Product price (decimal number)  ## Optional Fields - `description`: Detailed product description - `images`: Product images (up to 10 files)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_controller_create_with_http_info(name, description, price, currency, type, weight, unit, quantity, stock_count, status, product_type, images, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str description: (required)
        :param float price: (required)
        :param str currency: (required)
        :param str type: (required)
        :param float weight: (required)
        :param str unit: (required)
        :param float quantity: (required)
        :param float stock_count: (required)
        :param str status: (required)
        :param str product_type: (required)
        :param list[str] images: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'description', 'price', 'currency', 'type', 'weight', 'unit', 'quantity', 'stock_count', 'status', 'product_type', 'images']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_controller_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `product_controller_create`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `product_controller_create`")  # noqa: E501
        # verify the required parameter 'price' is set
        if ('price' not in params or
                params['price'] is None):
            raise ValueError("Missing the required parameter `price` when calling `product_controller_create`")  # noqa: E501
        # verify the required parameter 'currency' is set
        if ('currency' not in params or
                params['currency'] is None):
            raise ValueError("Missing the required parameter `currency` when calling `product_controller_create`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `product_controller_create`")  # noqa: E501
        # verify the required parameter 'weight' is set
        if ('weight' not in params or
                params['weight'] is None):
            raise ValueError("Missing the required parameter `weight` when calling `product_controller_create`")  # noqa: E501
        # verify the required parameter 'unit' is set
        if ('unit' not in params or
                params['unit'] is None):
            raise ValueError("Missing the required parameter `unit` when calling `product_controller_create`")  # noqa: E501
        # verify the required parameter 'quantity' is set
        if ('quantity' not in params or
                params['quantity'] is None):
            raise ValueError("Missing the required parameter `quantity` when calling `product_controller_create`")  # noqa: E501
        # verify the required parameter 'stock_count' is set
        if ('stock_count' not in params or
                params['stock_count'] is None):
            raise ValueError("Missing the required parameter `stock_count` when calling `product_controller_create`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `product_controller_create`")  # noqa: E501
        # verify the required parameter 'product_type' is set
        if ('product_type' not in params or
                params['product_type'] is None):
            raise ValueError("Missing the required parameter `product_type` when calling `product_controller_create`")  # noqa: E501
        # verify the required parameter 'images' is set
        if ('images' not in params or
                params['images'] is None):
            raise ValueError("Missing the required parameter `images` when calling `product_controller_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'price' in params:
            form_params.append(('price', params['price']))  # noqa: E501
        if 'currency' in params:
            form_params.append(('currency', params['currency']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'weight' in params:
            form_params.append(('weight', params['weight']))  # noqa: E501
        if 'unit' in params:
            form_params.append(('unit', params['unit']))  # noqa: E501
        if 'quantity' in params:
            form_params.append(('quantity', params['quantity']))  # noqa: E501
        if 'stock_count' in params:
            form_params.append(('stockCount', params['stock_count']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
        if 'product_type' in params:
            form_params.append(('productType', params['product_type']))  # noqa: E501
        if 'images' in params:
            form_params.append(('images', params['images']))  # noqa: E501
            collection_formats['images'] = 'multi'  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-client-key', 'x-client-secret']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0/products', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_controller_find_all(self, **kwargs):  # noqa: E501
        """Get all products  # noqa: E501

        Retrieves a list of products with pagination.      This endpoint allows you to fetch products with optional pagination.  ## Use Cases - List all products - Browse product catalog - Implement product search  ## Query Parameters - `skip`: Number of records to skip (default: 0) - `take`: Number of records to take (default: 10)  ## Example Response ```json {   \"data\": [     {       \"id\": \"prod_123456\",       \"name\": \"Premium Widget\",       \"description\": \"High-quality widget for all your needs\",       \"price\": \"99.99\",       \"images\": [         \"https://storage.example.com/images/file1.jpg\",         \"https://storage.example.com/images/file2.jpg\"       ],       \"createdAt\": \"2024-03-20T10:00:00Z\"     }   ],   \"total\": 100,   \"skip\": 0,   \"take\": 10 } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_controller_find_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float skip: Number of records to skip
        :param float take: Number of records to take
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_controller_find_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_controller_find_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_controller_find_all_with_http_info(self, **kwargs):  # noqa: E501
        """Get all products  # noqa: E501

        Retrieves a list of products with pagination.      This endpoint allows you to fetch products with optional pagination.  ## Use Cases - List all products - Browse product catalog - Implement product search  ## Query Parameters - `skip`: Number of records to skip (default: 0) - `take`: Number of records to take (default: 10)  ## Example Response ```json {   \"data\": [     {       \"id\": \"prod_123456\",       \"name\": \"Premium Widget\",       \"description\": \"High-quality widget for all your needs\",       \"price\": \"99.99\",       \"images\": [         \"https://storage.example.com/images/file1.jpg\",         \"https://storage.example.com/images/file2.jpg\"       ],       \"createdAt\": \"2024-03-20T10:00:00Z\"     }   ],   \"total\": 100,   \"skip\": 0,   \"take\": 10 } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_controller_find_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float skip: Number of records to skip
        :param float take: Number of records to take
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skip', 'take']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_controller_find_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['x-client-key', 'x-client-secret']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0/products', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_controller_find_one(self, id, **kwargs):  # noqa: E501
        """Get a product by ID  # noqa: E501

        Retrieves detailed information about a specific product.      This endpoint allows you to fetch complete product details including all images.  ## Use Cases - View product details - Display product information - Check product availability  ## Example Response ```json {   \"id\": \"prod_123456\",   \"name\": \"Premium Widget\",   \"description\": \"High-quality widget for all your needs\",   \"price\": \"99.99\",   \"images\": [     \"https://storage.example.com/images/file1.jpg\",     \"https://storage.example.com/images/file2.jpg\"   ],   \"createdAt\": \"2024-03-20T10:00:00Z\",   \"updatedAt\": \"2024-03-20T10:00:00Z\" } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_controller_find_one(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Product ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_controller_find_one_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_controller_find_one_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_controller_find_one_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a product by ID  # noqa: E501

        Retrieves detailed information about a specific product.      This endpoint allows you to fetch complete product details including all images.  ## Use Cases - View product details - Display product information - Check product availability  ## Example Response ```json {   \"id\": \"prod_123456\",   \"name\": \"Premium Widget\",   \"description\": \"High-quality widget for all your needs\",   \"price\": \"99.99\",   \"images\": [     \"https://storage.example.com/images/file1.jpg\",     \"https://storage.example.com/images/file2.jpg\"   ],   \"createdAt\": \"2024-03-20T10:00:00Z\",   \"updatedAt\": \"2024-03-20T10:00:00Z\" } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_controller_find_one_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Product ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_controller_find_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_controller_find_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['x-client-key', 'x-client-secret']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0/products/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_controller_remove(self, id, **kwargs):  # noqa: E501
        """Delete a product  # noqa: E501

        Deletes a product and its associated images.      This endpoint allows you to remove a product and all its associated data.  ## Use Cases - Remove discontinued products - Clean up product catalog - Delete test products  ## Notes - This action cannot be undone - All product images will be deleted - Associated data will be removed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_controller_remove(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Product ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_controller_remove_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_controller_remove_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_controller_remove_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a product  # noqa: E501

        Deletes a product and its associated images.      This endpoint allows you to remove a product and all its associated data.  ## Use Cases - Remove discontinued products - Clean up product catalog - Delete test products  ## Notes - This action cannot be undone - All product images will be deleted - Associated data will be removed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_controller_remove_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Product ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_controller_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_controller_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['x-client-key', 'x-client-secret']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0/products/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_controller_update(self, name, description, price, currency, type, weight, unit, quantity, stock_count, status, product_type, images, id, **kwargs):  # noqa: E501
        """Update a product  # noqa: E501

        Updates an existing product's information and optionally adds new images.      This endpoint allows you to modify product details and manage product images.  ## Use Cases - Update product information - Change product pricing - Modify product images - Update product description  ## Example Request (multipart/form-data) ``` name: \"Updated Premium Widget\" description: \"Updated description\" price: \"129.99\" images: [file1.jpg, file2.jpg]  // Optional, up to 10 images ```  ## Notes - Only include fields that need to be updated - New images will replace existing images - Maximum 10 images per product - Images are automatically optimized  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_controller_update(name, description, price, currency, type, weight, unit, quantity, stock_count, status, product_type, images, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str description: (required)
        :param float price: (required)
        :param str currency: (required)
        :param str type: (required)
        :param float weight: (required)
        :param str unit: (required)
        :param float quantity: (required)
        :param float stock_count: (required)
        :param str status: (required)
        :param str product_type: (required)
        :param list[str] images: (required)
        :param str id: Product ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_controller_update_with_http_info(name, description, price, currency, type, weight, unit, quantity, stock_count, status, product_type, images, id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_controller_update_with_http_info(name, description, price, currency, type, weight, unit, quantity, stock_count, status, product_type, images, id, **kwargs)  # noqa: E501
            return data

    def product_controller_update_with_http_info(self, name, description, price, currency, type, weight, unit, quantity, stock_count, status, product_type, images, id, **kwargs):  # noqa: E501
        """Update a product  # noqa: E501

        Updates an existing product's information and optionally adds new images.      This endpoint allows you to modify product details and manage product images.  ## Use Cases - Update product information - Change product pricing - Modify product images - Update product description  ## Example Request (multipart/form-data) ``` name: \"Updated Premium Widget\" description: \"Updated description\" price: \"129.99\" images: [file1.jpg, file2.jpg]  // Optional, up to 10 images ```  ## Notes - Only include fields that need to be updated - New images will replace existing images - Maximum 10 images per product - Images are automatically optimized  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_controller_update_with_http_info(name, description, price, currency, type, weight, unit, quantity, stock_count, status, product_type, images, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str description: (required)
        :param float price: (required)
        :param str currency: (required)
        :param str type: (required)
        :param float weight: (required)
        :param str unit: (required)
        :param float quantity: (required)
        :param float stock_count: (required)
        :param str status: (required)
        :param str product_type: (required)
        :param list[str] images: (required)
        :param str id: Product ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'description', 'price', 'currency', 'type', 'weight', 'unit', 'quantity', 'stock_count', 'status', 'product_type', 'images', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_controller_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `product_controller_update`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `product_controller_update`")  # noqa: E501
        # verify the required parameter 'price' is set
        if ('price' not in params or
                params['price'] is None):
            raise ValueError("Missing the required parameter `price` when calling `product_controller_update`")  # noqa: E501
        # verify the required parameter 'currency' is set
        if ('currency' not in params or
                params['currency'] is None):
            raise ValueError("Missing the required parameter `currency` when calling `product_controller_update`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `product_controller_update`")  # noqa: E501
        # verify the required parameter 'weight' is set
        if ('weight' not in params or
                params['weight'] is None):
            raise ValueError("Missing the required parameter `weight` when calling `product_controller_update`")  # noqa: E501
        # verify the required parameter 'unit' is set
        if ('unit' not in params or
                params['unit'] is None):
            raise ValueError("Missing the required parameter `unit` when calling `product_controller_update`")  # noqa: E501
        # verify the required parameter 'quantity' is set
        if ('quantity' not in params or
                params['quantity'] is None):
            raise ValueError("Missing the required parameter `quantity` when calling `product_controller_update`")  # noqa: E501
        # verify the required parameter 'stock_count' is set
        if ('stock_count' not in params or
                params['stock_count'] is None):
            raise ValueError("Missing the required parameter `stock_count` when calling `product_controller_update`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `product_controller_update`")  # noqa: E501
        # verify the required parameter 'product_type' is set
        if ('product_type' not in params or
                params['product_type'] is None):
            raise ValueError("Missing the required parameter `product_type` when calling `product_controller_update`")  # noqa: E501
        # verify the required parameter 'images' is set
        if ('images' not in params or
                params['images'] is None):
            raise ValueError("Missing the required parameter `images` when calling `product_controller_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_controller_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'price' in params:
            form_params.append(('price', params['price']))  # noqa: E501
        if 'currency' in params:
            form_params.append(('currency', params['currency']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'weight' in params:
            form_params.append(('weight', params['weight']))  # noqa: E501
        if 'unit' in params:
            form_params.append(('unit', params['unit']))  # noqa: E501
        if 'quantity' in params:
            form_params.append(('quantity', params['quantity']))  # noqa: E501
        if 'stock_count' in params:
            form_params.append(('stockCount', params['stock_count']))  # noqa: E501
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
        if 'product_type' in params:
            form_params.append(('productType', params['product_type']))  # noqa: E501
        if 'images' in params:
            form_params.append(('images', params['images']))  # noqa: E501
            collection_formats['images'] = 'multi'  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-client-key', 'x-client-secret']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0/products/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_controller_upload_image(self, id, **kwargs):  # noqa: E501
        """Upload images for a product  # noqa: E501

        Adds new images to an existing product.      This endpoint allows you to upload additional images for a product that already exists.  ## Use Cases - Add more product images - Update product gallery - Enhance product presentation  ## Supported Image Formats - JPEG/JPG - PNG - WebP - Maximum 10 images per upload - Maximum file size: 5MB per image  ## Example Request (multipart/form-data) ``` images: [file1.jpg, file2.jpg]  // Up to 10 images ```  ## Notes - Images are appended to existing product images - Total images per product cannot exceed 10 - Images are automatically optimized and resized  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_controller_upload_image(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Product ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_controller_upload_image_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_controller_upload_image_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_controller_upload_image_with_http_info(self, id, **kwargs):  # noqa: E501
        """Upload images for a product  # noqa: E501

        Adds new images to an existing product.      This endpoint allows you to upload additional images for a product that already exists.  ## Use Cases - Add more product images - Update product gallery - Enhance product presentation  ## Supported Image Formats - JPEG/JPG - PNG - WebP - Maximum 10 images per upload - Maximum file size: 5MB per image  ## Example Request (multipart/form-data) ``` images: [file1.jpg, file2.jpg]  // Up to 10 images ```  ## Notes - Images are appended to existing product images - Total images per product cannot exceed 10 - Images are automatically optimized and resized  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_controller_upload_image_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Product ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_controller_upload_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_controller_upload_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['x-client-key', 'x-client-secret']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0/products/{id}/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
