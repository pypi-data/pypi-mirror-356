# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateInvoiceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'email': 'str',
        'customer_id': 'str',
        'currency': 'str',
        'items': 'list[InvoiceProductDto]',
        'due_date': 'datetime',
        'delivery': 'str',
        'payment_link': 'bool',
        'payment_methods': 'list[str]',
        'status': 'str',
        'address': 'str',
        'phone_number': 'str',
        'send_date': 'datetime',
        'logo': 'str',
        'partial_payment': 'bool',
        'tax_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'email': 'email',
        'customer_id': 'customer_id',
        'currency': 'currency',
        'items': 'items',
        'due_date': 'due_date',
        'delivery': 'delivery',
        'payment_link': 'payment_link',
        'payment_methods': 'payment_methods',
        'status': 'status',
        'address': 'address',
        'phone_number': 'phone_number',
        'send_date': 'send_date',
        'logo': 'logo',
        'partial_payment': 'partial_payment',
        'tax_id': 'taxId'
    }

    def __init__(self, name=None, email=None, customer_id=None, currency=None, items=None, due_date=None, delivery=None, payment_link=None, payment_methods=None, status=None, address=None, phone_number=None, send_date=None, logo=None, partial_payment=None, tax_id=None):  # noqa: E501
        """CreateInvoiceDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._email = None
        self._customer_id = None
        self._currency = None
        self._items = None
        self._due_date = None
        self._delivery = None
        self._payment_link = None
        self._payment_methods = None
        self._status = None
        self._address = None
        self._phone_number = None
        self._send_date = None
        self._logo = None
        self._partial_payment = None
        self._tax_id = None
        self.discriminator = None
        self.name = name
        self.email = email
        self.customer_id = customer_id
        self.currency = currency
        self.items = items
        self.due_date = due_date
        self.delivery = delivery
        self.payment_link = payment_link
        self.payment_methods = payment_methods
        self.status = status
        if address is not None:
            self.address = address
        if phone_number is not None:
            self.phone_number = phone_number
        if send_date is not None:
            self.send_date = send_date
        if logo is not None:
            self.logo = logo
        self.partial_payment = partial_payment
        if tax_id is not None:
            self.tax_id = tax_id

    @property
    def name(self):
        """Gets the name of this CreateInvoiceDto.  # noqa: E501

        Name of the invoice  # noqa: E501

        :return: The name of this CreateInvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateInvoiceDto.

        Name of the invoice  # noqa: E501

        :param name: The name of this CreateInvoiceDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this CreateInvoiceDto.  # noqa: E501

        Email address  # noqa: E501

        :return: The email of this CreateInvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateInvoiceDto.

        Email address  # noqa: E501

        :param email: The email of this CreateInvoiceDto.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def customer_id(self):
        """Gets the customer_id of this CreateInvoiceDto.  # noqa: E501

        Customer ID  # noqa: E501

        :return: The customer_id of this CreateInvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CreateInvoiceDto.

        Customer ID  # noqa: E501

        :param customer_id: The customer_id of this CreateInvoiceDto.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def currency(self):
        """Gets the currency of this CreateInvoiceDto.  # noqa: E501

        Currency for the invoice  # noqa: E501

        :return: The currency of this CreateInvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreateInvoiceDto.

        Currency for the invoice  # noqa: E501

        :param currency: The currency of this CreateInvoiceDto.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        allowed_values = ["usdc", "eurc"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def items(self):
        """Gets the items of this CreateInvoiceDto.  # noqa: E501

        Array of products in the invoice  # noqa: E501

        :return: The items of this CreateInvoiceDto.  # noqa: E501
        :rtype: list[InvoiceProductDto]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CreateInvoiceDto.

        Array of products in the invoice  # noqa: E501

        :param items: The items of this CreateInvoiceDto.  # noqa: E501
        :type: list[InvoiceProductDto]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def due_date(self):
        """Gets the due_date of this CreateInvoiceDto.  # noqa: E501

        Due date of the invoice  # noqa: E501

        :return: The due_date of this CreateInvoiceDto.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this CreateInvoiceDto.

        Due date of the invoice  # noqa: E501

        :param due_date: The due_date of this CreateInvoiceDto.  # noqa: E501
        :type: datetime
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")  # noqa: E501

        self._due_date = due_date

    @property
    def delivery(self):
        """Gets the delivery of this CreateInvoiceDto.  # noqa: E501

        Delivery method  # noqa: E501

        :return: The delivery of this CreateInvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this CreateInvoiceDto.

        Delivery method  # noqa: E501

        :param delivery: The delivery of this CreateInvoiceDto.  # noqa: E501
        :type: str
        """
        if delivery is None:
            raise ValueError("Invalid value for `delivery`, must not be `None`")  # noqa: E501
        allowed_values = ["EMAIL", "MANUALLY"]  # noqa: E501
        if delivery not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery` ({0}), must be one of {1}"  # noqa: E501
                .format(delivery, allowed_values)
            )

        self._delivery = delivery

    @property
    def payment_link(self):
        """Gets the payment_link of this CreateInvoiceDto.  # noqa: E501

        Whether to generate a payment link  # noqa: E501

        :return: The payment_link of this CreateInvoiceDto.  # noqa: E501
        :rtype: bool
        """
        return self._payment_link

    @payment_link.setter
    def payment_link(self, payment_link):
        """Sets the payment_link of this CreateInvoiceDto.

        Whether to generate a payment link  # noqa: E501

        :param payment_link: The payment_link of this CreateInvoiceDto.  # noqa: E501
        :type: bool
        """
        if payment_link is None:
            raise ValueError("Invalid value for `payment_link`, must not be `None`")  # noqa: E501

        self._payment_link = payment_link

    @property
    def payment_methods(self):
        """Gets the payment_methods of this CreateInvoiceDto.  # noqa: E501

        Array of accepted payment methods  # noqa: E501

        :return: The payment_methods of this CreateInvoiceDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this CreateInvoiceDto.

        Array of accepted payment methods  # noqa: E501

        :param payment_methods: The payment_methods of this CreateInvoiceDto.  # noqa: E501
        :type: list[str]
        """
        if payment_methods is None:
            raise ValueError("Invalid value for `payment_methods`, must not be `None`")  # noqa: E501
        allowed_values = ["ACH", "BANK_TRANSFER", "CREDIT_CARD", "CASH", "MOBILE_MONEY", "CRYPTO"]  # noqa: E501
        if not set(payment_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `payment_methods` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(payment_methods) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._payment_methods = payment_methods

    @property
    def status(self):
        """Gets the status of this CreateInvoiceDto.  # noqa: E501

        Invoice status  # noqa: E501

        :return: The status of this CreateInvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateInvoiceDto.

        Invoice status  # noqa: E501

        :param status: The status of this CreateInvoiceDto.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["DRAFT", "OPEN", "PASTDUE", "PAID", "PARTIALLYPAID"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def address(self):
        """Gets the address of this CreateInvoiceDto.  # noqa: E501

        Address  # noqa: E501

        :return: The address of this CreateInvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreateInvoiceDto.

        Address  # noqa: E501

        :param address: The address of this CreateInvoiceDto.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def phone_number(self):
        """Gets the phone_number of this CreateInvoiceDto.  # noqa: E501

        Phone number  # noqa: E501

        :return: The phone_number of this CreateInvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CreateInvoiceDto.

        Phone number  # noqa: E501

        :param phone_number: The phone_number of this CreateInvoiceDto.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def send_date(self):
        """Gets the send_date of this CreateInvoiceDto.  # noqa: E501

        Send date  # noqa: E501

        :return: The send_date of this CreateInvoiceDto.  # noqa: E501
        :rtype: datetime
        """
        return self._send_date

    @send_date.setter
    def send_date(self, send_date):
        """Sets the send_date of this CreateInvoiceDto.

        Send date  # noqa: E501

        :param send_date: The send_date of this CreateInvoiceDto.  # noqa: E501
        :type: datetime
        """

        self._send_date = send_date

    @property
    def logo(self):
        """Gets the logo of this CreateInvoiceDto.  # noqa: E501

        Logo URL  # noqa: E501

        :return: The logo of this CreateInvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this CreateInvoiceDto.

        Logo URL  # noqa: E501

        :param logo: The logo of this CreateInvoiceDto.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def partial_payment(self):
        """Gets the partial_payment of this CreateInvoiceDto.  # noqa: E501

        Allow partial payments  # noqa: E501

        :return: The partial_payment of this CreateInvoiceDto.  # noqa: E501
        :rtype: bool
        """
        return self._partial_payment

    @partial_payment.setter
    def partial_payment(self, partial_payment):
        """Sets the partial_payment of this CreateInvoiceDto.

        Allow partial payments  # noqa: E501

        :param partial_payment: The partial_payment of this CreateInvoiceDto.  # noqa: E501
        :type: bool
        """
        if partial_payment is None:
            raise ValueError("Invalid value for `partial_payment`, must not be `None`")  # noqa: E501

        self._partial_payment = partial_payment

    @property
    def tax_id(self):
        """Gets the tax_id of this CreateInvoiceDto.  # noqa: E501

        Tax ID  # noqa: E501

        :return: The tax_id of this CreateInvoiceDto.  # noqa: E501
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this CreateInvoiceDto.

        Tax ID  # noqa: E501

        :param tax_id: The tax_id of this CreateInvoiceDto.  # noqa: E501
        :type: str
        """

        self._tax_id = tax_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateInvoiceDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateInvoiceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
