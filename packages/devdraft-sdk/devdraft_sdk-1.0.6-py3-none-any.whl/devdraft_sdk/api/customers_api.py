# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from devdraft_ai_sdk.api_client import ApiClient


class CustomersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def customer_controller_create(self, body, **kwargs):  # noqa: E501
        """Create a new customer  # noqa: E501

        Creates a new customer in the system with their personal and contact information.      This endpoint allows you to register new customers and store their details for future transactions.  ## Use Cases - Register new customers for payment processing - Store customer information for recurring payments - Maintain customer profiles for transaction history  ## Example: Create New Customer ```json {   \"firstName\": \"John\",   \"lastName\": \"Doe\",   \"email\": \"john.doe@example.com\",   \"phone\": \"+1234567890\",   \"address\": {     \"street\": \"123 Main St\",     \"city\": \"New York\",     \"state\": \"NY\",     \"zipCode\": \"10001\",     \"country\": \"USA\"   } } ```  ## Required Fields - `firstName`: Customer's first name - `lastName`: Customer's last name - `email`: Valid email address (must be unique)  ## Optional Fields - `phone`: Contact phone number - `address`: Complete address information   - `street`: Street address   - `city`: City name   - `state`: State/province   - `zipCode`: Postal/ZIP code   - `country`: Country name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_controller_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomerDto body: Customer creation data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_controller_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_controller_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def customer_controller_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new customer  # noqa: E501

        Creates a new customer in the system with their personal and contact information.      This endpoint allows you to register new customers and store their details for future transactions.  ## Use Cases - Register new customers for payment processing - Store customer information for recurring payments - Maintain customer profiles for transaction history  ## Example: Create New Customer ```json {   \"firstName\": \"John\",   \"lastName\": \"Doe\",   \"email\": \"john.doe@example.com\",   \"phone\": \"+1234567890\",   \"address\": {     \"street\": \"123 Main St\",     \"city\": \"New York\",     \"state\": \"NY\",     \"zipCode\": \"10001\",     \"country\": \"USA\"   } } ```  ## Required Fields - `firstName`: Customer's first name - `lastName`: Customer's last name - `email`: Valid email address (must be unique)  ## Optional Fields - `phone`: Contact phone number - `address`: Complete address information   - `street`: Street address   - `city`: City name   - `state`: State/province   - `zipCode`: Postal/ZIP code   - `country`: Country name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_controller_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCustomerDto body: Customer creation data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_controller_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `customer_controller_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-client-key', 'x-client-secret']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0/customers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def customer_controller_find_all(self, **kwargs):  # noqa: E501
        """Get all customers with filters  # noqa: E501

        Retrieves a list of customers with optional filtering and pagination.      This endpoint allows you to search and filter customers based on various criteria.  ## Use Cases - List all customers with pagination - Search customers by name or email - Filter customers by status - Export customer data  ## Query Parameters - `skip`: Number of records to skip (default: 0) - `take`: Number of records to take (default: 10) - `status`: Filter by customer status (ACTIVE, INACTIVE, SUSPENDED) - `name`: Filter by customer name (partial match) - `email`: Filter by customer email (exact match)  ## Example Response ```json {   \"data\": [     {       \"id\": \"cust_123456\",       \"firstName\": \"John\",       \"lastName\": \"Doe\",       \"email\": \"john.doe@example.com\",       \"status\": \"ACTIVE\",       \"createdAt\": \"2024-03-20T10:00:00Z\"     }   ],   \"total\": 100,   \"skip\": 0,   \"take\": 10 } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_controller_find_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Filter by customer status
        :param str name: Filter by customer name
        :param str email: Filter by customer email
        :param float take: Number of records to take
        :param float skip: Number of records to skip
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_controller_find_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.customer_controller_find_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def customer_controller_find_all_with_http_info(self, **kwargs):  # noqa: E501
        """Get all customers with filters  # noqa: E501

        Retrieves a list of customers with optional filtering and pagination.      This endpoint allows you to search and filter customers based on various criteria.  ## Use Cases - List all customers with pagination - Search customers by name or email - Filter customers by status - Export customer data  ## Query Parameters - `skip`: Number of records to skip (default: 0) - `take`: Number of records to take (default: 10) - `status`: Filter by customer status (ACTIVE, INACTIVE, SUSPENDED) - `name`: Filter by customer name (partial match) - `email`: Filter by customer email (exact match)  ## Example Response ```json {   \"data\": [     {       \"id\": \"cust_123456\",       \"firstName\": \"John\",       \"lastName\": \"Doe\",       \"email\": \"john.doe@example.com\",       \"status\": \"ACTIVE\",       \"createdAt\": \"2024-03-20T10:00:00Z\"     }   ],   \"total\": 100,   \"skip\": 0,   \"take\": 10 } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_controller_find_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Filter by customer status
        :param str name: Filter by customer name
        :param str email: Filter by customer email
        :param float take: Number of records to take
        :param float skip: Number of records to skip
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'name', 'email', 'take', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_controller_find_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['x-client-key', 'x-client-secret']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0/customers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def customer_controller_find_one(self, id, **kwargs):  # noqa: E501
        """Get a customer by ID  # noqa: E501

        Retrieves detailed information about a specific customer.      This endpoint allows you to fetch complete customer details including their address and contact information.  ## Use Cases - View customer details - Verify customer information - Update customer records  ## Example Response ```json {   \"id\": \"cust_123456\",   \"firstName\": \"John\",   \"lastName\": \"Doe\",   \"email\": \"john.doe@example.com\",   \"phone\": \"+1234567890\",   \"status\": \"ACTIVE\",   \"address\": {     \"street\": \"123 Main St\",     \"city\": \"New York\",     \"state\": \"NY\",     \"zipCode\": \"10001\",     \"country\": \"USA\"   },   \"createdAt\": \"2024-03-20T10:00:00Z\",   \"updatedAt\": \"2024-03-20T10:00:00Z\" } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_controller_find_one(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_controller_find_one_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_controller_find_one_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def customer_controller_find_one_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a customer by ID  # noqa: E501

        Retrieves detailed information about a specific customer.      This endpoint allows you to fetch complete customer details including their address and contact information.  ## Use Cases - View customer details - Verify customer information - Update customer records  ## Example Response ```json {   \"id\": \"cust_123456\",   \"firstName\": \"John\",   \"lastName\": \"Doe\",   \"email\": \"john.doe@example.com\",   \"phone\": \"+1234567890\",   \"status\": \"ACTIVE\",   \"address\": {     \"street\": \"123 Main St\",     \"city\": \"New York\",     \"state\": \"NY\",     \"zipCode\": \"10001\",     \"country\": \"USA\"   },   \"createdAt\": \"2024-03-20T10:00:00Z\",   \"updatedAt\": \"2024-03-20T10:00:00Z\" } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_controller_find_one_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_controller_find_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `customer_controller_find_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['x-client-key', 'x-client-secret']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0/customers/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def customer_controller_update(self, body, id, **kwargs):  # noqa: E501
        """Update a customer  # noqa: E501

        Updates an existing customer's information.      This endpoint allows you to modify customer details while preserving their core information.  ## Use Cases - Update customer contact information - Change customer address - Modify customer status  ## Example Request ```json {   \"firstName\": \"John\",   \"lastName\": \"Smith\",   \"phone\": \"+1987654321\",   \"address\": {     \"street\": \"456 Oak St\",     \"city\": \"Los Angeles\",     \"state\": \"CA\",     \"zipCode\": \"90001\",     \"country\": \"USA\"   } } ```  ## Notes - Only include fields that need to be updated - Email address cannot be changed - Status changes may require additional verification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_controller_update(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCustomerDto body: Customer update data (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_controller_update_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_controller_update_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def customer_controller_update_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update a customer  # noqa: E501

        Updates an existing customer's information.      This endpoint allows you to modify customer details while preserving their core information.  ## Use Cases - Update customer contact information - Change customer address - Modify customer status  ## Example Request ```json {   \"firstName\": \"John\",   \"lastName\": \"Smith\",   \"phone\": \"+1987654321\",   \"address\": {     \"street\": \"456 Oak St\",     \"city\": \"Los Angeles\",     \"state\": \"CA\",     \"zipCode\": \"90001\",     \"country\": \"USA\"   } } ```  ## Notes - Only include fields that need to be updated - Email address cannot be changed - Status changes may require additional verification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_controller_update_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCustomerDto body: Customer update data (required)
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_controller_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `customer_controller_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `customer_controller_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-client-key', 'x-client-secret']  # noqa: E501

        return self.api_client.call_api(
            '/api/v0/customers/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
