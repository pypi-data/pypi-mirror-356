# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateLiquidationAddressDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chain': 'str',
        'currency': 'str',
        'address': 'str',
        'external_account_id': 'str',
        'prefunded_account_id': 'str',
        'bridge_wallet_id': 'str',
        'destination_payment_rail': 'AllOfCreateLiquidationAddressDtoDestinationPaymentRail',
        'destination_currency': 'AllOfCreateLiquidationAddressDtoDestinationCurrency',
        'destination_wire_message': 'str',
        'destination_sepa_reference': 'str',
        'destination_ach_reference': 'str',
        'destination_address': 'str',
        'destination_blockchain_memo': 'str',
        'return_address': 'str',
        'custom_developer_fee_percent': 'str'
    }

    attribute_map = {
        'chain': 'chain',
        'currency': 'currency',
        'address': 'address',
        'external_account_id': 'external_account_id',
        'prefunded_account_id': 'prefunded_account_id',
        'bridge_wallet_id': 'bridge_wallet_id',
        'destination_payment_rail': 'destination_payment_rail',
        'destination_currency': 'destination_currency',
        'destination_wire_message': 'destination_wire_message',
        'destination_sepa_reference': 'destination_sepa_reference',
        'destination_ach_reference': 'destination_ach_reference',
        'destination_address': 'destination_address',
        'destination_blockchain_memo': 'destination_blockchain_memo',
        'return_address': 'return_address',
        'custom_developer_fee_percent': 'custom_developer_fee_percent'
    }

    def __init__(self, chain=None, currency=None, address=None, external_account_id=None, prefunded_account_id=None, bridge_wallet_id=None, destination_payment_rail=None, destination_currency=None, destination_wire_message=None, destination_sepa_reference=None, destination_ach_reference=None, destination_address=None, destination_blockchain_memo=None, return_address=None, custom_developer_fee_percent=None):  # noqa: E501
        """CreateLiquidationAddressDto - a model defined in Swagger"""  # noqa: E501
        self._chain = None
        self._currency = None
        self._address = None
        self._external_account_id = None
        self._prefunded_account_id = None
        self._bridge_wallet_id = None
        self._destination_payment_rail = None
        self._destination_currency = None
        self._destination_wire_message = None
        self._destination_sepa_reference = None
        self._destination_ach_reference = None
        self._destination_address = None
        self._destination_blockchain_memo = None
        self._return_address = None
        self._custom_developer_fee_percent = None
        self.discriminator = None
        self.chain = chain
        self.currency = currency
        self.address = address
        if external_account_id is not None:
            self.external_account_id = external_account_id
        if prefunded_account_id is not None:
            self.prefunded_account_id = prefunded_account_id
        if bridge_wallet_id is not None:
            self.bridge_wallet_id = bridge_wallet_id
        if destination_payment_rail is not None:
            self.destination_payment_rail = destination_payment_rail
        if destination_currency is not None:
            self.destination_currency = destination_currency
        if destination_wire_message is not None:
            self.destination_wire_message = destination_wire_message
        if destination_sepa_reference is not None:
            self.destination_sepa_reference = destination_sepa_reference
        if destination_ach_reference is not None:
            self.destination_ach_reference = destination_ach_reference
        if destination_address is not None:
            self.destination_address = destination_address
        if destination_blockchain_memo is not None:
            self.destination_blockchain_memo = destination_blockchain_memo
        if return_address is not None:
            self.return_address = return_address
        if custom_developer_fee_percent is not None:
            self.custom_developer_fee_percent = custom_developer_fee_percent

    @property
    def chain(self):
        """Gets the chain of this CreateLiquidationAddressDto.  # noqa: E501

        The blockchain chain for the liquidation address  # noqa: E501

        :return: The chain of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this CreateLiquidationAddressDto.

        The blockchain chain for the liquidation address  # noqa: E501

        :param chain: The chain of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """
        if chain is None:
            raise ValueError("Invalid value for `chain`, must not be `None`")  # noqa: E501
        allowed_values = ["ethereum", "solana", "polygon", "avalanche_c_chain", "base", "arbitrum", "optimism", "stellar", "tron"]  # noqa: E501
        if chain not in allowed_values:
            raise ValueError(
                "Invalid value for `chain` ({0}), must be one of {1}"  # noqa: E501
                .format(chain, allowed_values)
            )

        self._chain = chain

    @property
    def currency(self):
        """Gets the currency of this CreateLiquidationAddressDto.  # noqa: E501

        The currency for the liquidation address  # noqa: E501

        :return: The currency of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreateLiquidationAddressDto.

        The currency for the liquidation address  # noqa: E501

        :param currency: The currency of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        allowed_values = ["usdc", "eurc", "dai", "pyusd", "usdt"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def address(self):
        """Gets the address of this CreateLiquidationAddressDto.  # noqa: E501

        The liquidation address on the blockchain  # noqa: E501

        :return: The address of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreateLiquidationAddressDto.

        The liquidation address on the blockchain  # noqa: E501

        :param address: The address of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def external_account_id(self):
        """Gets the external_account_id of this CreateLiquidationAddressDto.  # noqa: E501

        External bank account to send funds to  # noqa: E501

        :return: The external_account_id of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """Sets the external_account_id of this CreateLiquidationAddressDto.

        External bank account to send funds to  # noqa: E501

        :param external_account_id: The external_account_id of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """

        self._external_account_id = external_account_id

    @property
    def prefunded_account_id(self):
        """Gets the prefunded_account_id of this CreateLiquidationAddressDto.  # noqa: E501

        Developer's prefunded account id  # noqa: E501

        :return: The prefunded_account_id of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._prefunded_account_id

    @prefunded_account_id.setter
    def prefunded_account_id(self, prefunded_account_id):
        """Sets the prefunded_account_id of this CreateLiquidationAddressDto.

        Developer's prefunded account id  # noqa: E501

        :param prefunded_account_id: The prefunded_account_id of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """

        self._prefunded_account_id = prefunded_account_id

    @property
    def bridge_wallet_id(self):
        """Gets the bridge_wallet_id of this CreateLiquidationAddressDto.  # noqa: E501

        Bridge Wallet to send funds to  # noqa: E501

        :return: The bridge_wallet_id of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._bridge_wallet_id

    @bridge_wallet_id.setter
    def bridge_wallet_id(self, bridge_wallet_id):
        """Sets the bridge_wallet_id of this CreateLiquidationAddressDto.

        Bridge Wallet to send funds to  # noqa: E501

        :param bridge_wallet_id: The bridge_wallet_id of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """

        self._bridge_wallet_id = bridge_wallet_id

    @property
    def destination_payment_rail(self):
        """Gets the destination_payment_rail of this CreateLiquidationAddressDto.  # noqa: E501

        Payment rail for sending funds  # noqa: E501

        :return: The destination_payment_rail of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: AllOfCreateLiquidationAddressDtoDestinationPaymentRail
        """
        return self._destination_payment_rail

    @destination_payment_rail.setter
    def destination_payment_rail(self, destination_payment_rail):
        """Sets the destination_payment_rail of this CreateLiquidationAddressDto.

        Payment rail for sending funds  # noqa: E501

        :param destination_payment_rail: The destination_payment_rail of this CreateLiquidationAddressDto.  # noqa: E501
        :type: AllOfCreateLiquidationAddressDtoDestinationPaymentRail
        """

        self._destination_payment_rail = destination_payment_rail

    @property
    def destination_currency(self):
        """Gets the destination_currency of this CreateLiquidationAddressDto.  # noqa: E501

        Currency for sending funds  # noqa: E501

        :return: The destination_currency of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: AllOfCreateLiquidationAddressDtoDestinationCurrency
        """
        return self._destination_currency

    @destination_currency.setter
    def destination_currency(self, destination_currency):
        """Sets the destination_currency of this CreateLiquidationAddressDto.

        Currency for sending funds  # noqa: E501

        :param destination_currency: The destination_currency of this CreateLiquidationAddressDto.  # noqa: E501
        :type: AllOfCreateLiquidationAddressDtoDestinationCurrency
        """

        self._destination_currency = destination_currency

    @property
    def destination_wire_message(self):
        """Gets the destination_wire_message of this CreateLiquidationAddressDto.  # noqa: E501

        Message for wire transfers  # noqa: E501

        :return: The destination_wire_message of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._destination_wire_message

    @destination_wire_message.setter
    def destination_wire_message(self, destination_wire_message):
        """Sets the destination_wire_message of this CreateLiquidationAddressDto.

        Message for wire transfers  # noqa: E501

        :param destination_wire_message: The destination_wire_message of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """

        self._destination_wire_message = destination_wire_message

    @property
    def destination_sepa_reference(self):
        """Gets the destination_sepa_reference of this CreateLiquidationAddressDto.  # noqa: E501

        Reference for SEPA transactions  # noqa: E501

        :return: The destination_sepa_reference of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._destination_sepa_reference

    @destination_sepa_reference.setter
    def destination_sepa_reference(self, destination_sepa_reference):
        """Sets the destination_sepa_reference of this CreateLiquidationAddressDto.

        Reference for SEPA transactions  # noqa: E501

        :param destination_sepa_reference: The destination_sepa_reference of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """

        self._destination_sepa_reference = destination_sepa_reference

    @property
    def destination_ach_reference(self):
        """Gets the destination_ach_reference of this CreateLiquidationAddressDto.  # noqa: E501

        Reference for ACH transactions  # noqa: E501

        :return: The destination_ach_reference of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._destination_ach_reference

    @destination_ach_reference.setter
    def destination_ach_reference(self, destination_ach_reference):
        """Sets the destination_ach_reference of this CreateLiquidationAddressDto.

        Reference for ACH transactions  # noqa: E501

        :param destination_ach_reference: The destination_ach_reference of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """

        self._destination_ach_reference = destination_ach_reference

    @property
    def destination_address(self):
        """Gets the destination_address of this CreateLiquidationAddressDto.  # noqa: E501

        Crypto wallet address for crypto transfers  # noqa: E501

        :return: The destination_address of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this CreateLiquidationAddressDto.

        Crypto wallet address for crypto transfers  # noqa: E501

        :param destination_address: The destination_address of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """

        self._destination_address = destination_address

    @property
    def destination_blockchain_memo(self):
        """Gets the destination_blockchain_memo of this CreateLiquidationAddressDto.  # noqa: E501

        Memo for blockchain transactions  # noqa: E501

        :return: The destination_blockchain_memo of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._destination_blockchain_memo

    @destination_blockchain_memo.setter
    def destination_blockchain_memo(self, destination_blockchain_memo):
        """Sets the destination_blockchain_memo of this CreateLiquidationAddressDto.

        Memo for blockchain transactions  # noqa: E501

        :param destination_blockchain_memo: The destination_blockchain_memo of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """

        self._destination_blockchain_memo = destination_blockchain_memo

    @property
    def return_address(self):
        """Gets the return_address of this CreateLiquidationAddressDto.  # noqa: E501

        Address to return funds on failed transactions (Not supported on Stellar)  # noqa: E501

        :return: The return_address of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._return_address

    @return_address.setter
    def return_address(self, return_address):
        """Sets the return_address of this CreateLiquidationAddressDto.

        Address to return funds on failed transactions (Not supported on Stellar)  # noqa: E501

        :param return_address: The return_address of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """

        self._return_address = return_address

    @property
    def custom_developer_fee_percent(self):
        """Gets the custom_developer_fee_percent of this CreateLiquidationAddressDto.  # noqa: E501

        Custom developer fee percentage (Base 100 percentage: 10.2% = \"10.2\")  # noqa: E501

        :return: The custom_developer_fee_percent of this CreateLiquidationAddressDto.  # noqa: E501
        :rtype: str
        """
        return self._custom_developer_fee_percent

    @custom_developer_fee_percent.setter
    def custom_developer_fee_percent(self, custom_developer_fee_percent):
        """Sets the custom_developer_fee_percent of this CreateLiquidationAddressDto.

        Custom developer fee percentage (Base 100 percentage: 10.2% = \"10.2\")  # noqa: E501

        :param custom_developer_fee_percent: The custom_developer_fee_percent of this CreateLiquidationAddressDto.  # noqa: E501
        :type: str
        """

        self._custom_developer_fee_percent = custom_developer_fee_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateLiquidationAddressDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateLiquidationAddressDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
