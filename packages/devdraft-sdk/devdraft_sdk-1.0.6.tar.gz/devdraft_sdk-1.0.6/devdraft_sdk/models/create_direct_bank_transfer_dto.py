# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateDirectBankTransferDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wallet_id': 'str',
        'payment_rail': 'str',
        'destination_currency': 'str',
        'source_currency': 'str',
        'amount': 'float',
        'wire_message': 'str',
        'sepa_reference': 'str',
        'ach_reference': 'str'
    }

    attribute_map = {
        'wallet_id': 'walletId',
        'payment_rail': 'paymentRail',
        'destination_currency': 'destinationCurrency',
        'source_currency': 'sourceCurrency',
        'amount': 'amount',
        'wire_message': 'wire_message',
        'sepa_reference': 'sepa_reference',
        'ach_reference': 'ach_reference'
    }

    def __init__(self, wallet_id=None, payment_rail=None, destination_currency=None, source_currency=None, amount=None, wire_message=None, sepa_reference=None, ach_reference=None):  # noqa: E501
        """CreateDirectBankTransferDto - a model defined in Swagger"""  # noqa: E501
        self._wallet_id = None
        self._payment_rail = None
        self._destination_currency = None
        self._source_currency = None
        self._amount = None
        self._wire_message = None
        self._sepa_reference = None
        self._ach_reference = None
        self.discriminator = None
        self.wallet_id = wallet_id
        self.payment_rail = payment_rail
        self.destination_currency = destination_currency
        self.source_currency = source_currency
        self.amount = amount
        if wire_message is not None:
            self.wire_message = wire_message
        if sepa_reference is not None:
            self.sepa_reference = sepa_reference
        if ach_reference is not None:
            self.ach_reference = ach_reference

    @property
    def wallet_id(self):
        """Gets the wallet_id of this CreateDirectBankTransferDto.  # noqa: E501

        The ID of the bridge wallet to transfer from  # noqa: E501

        :return: The wallet_id of this CreateDirectBankTransferDto.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this CreateDirectBankTransferDto.

        The ID of the bridge wallet to transfer from  # noqa: E501

        :param wallet_id: The wallet_id of this CreateDirectBankTransferDto.  # noqa: E501
        :type: str
        """
        if wallet_id is None:
            raise ValueError("Invalid value for `wallet_id`, must not be `None`")  # noqa: E501

        self._wallet_id = wallet_id

    @property
    def payment_rail(self):
        """Gets the payment_rail of this CreateDirectBankTransferDto.  # noqa: E501

        The payment rail to use  # noqa: E501

        :return: The payment_rail of this CreateDirectBankTransferDto.  # noqa: E501
        :rtype: str
        """
        return self._payment_rail

    @payment_rail.setter
    def payment_rail(self, payment_rail):
        """Sets the payment_rail of this CreateDirectBankTransferDto.

        The payment rail to use  # noqa: E501

        :param payment_rail: The payment_rail of this CreateDirectBankTransferDto.  # noqa: E501
        :type: str
        """
        if payment_rail is None:
            raise ValueError("Invalid value for `payment_rail`, must not be `None`")  # noqa: E501

        self._payment_rail = payment_rail

    @property
    def destination_currency(self):
        """Gets the destination_currency of this CreateDirectBankTransferDto.  # noqa: E501

        The destination currency  # noqa: E501

        :return: The destination_currency of this CreateDirectBankTransferDto.  # noqa: E501
        :rtype: str
        """
        return self._destination_currency

    @destination_currency.setter
    def destination_currency(self, destination_currency):
        """Sets the destination_currency of this CreateDirectBankTransferDto.

        The destination currency  # noqa: E501

        :param destination_currency: The destination_currency of this CreateDirectBankTransferDto.  # noqa: E501
        :type: str
        """
        if destination_currency is None:
            raise ValueError("Invalid value for `destination_currency`, must not be `None`")  # noqa: E501

        self._destination_currency = destination_currency

    @property
    def source_currency(self):
        """Gets the source_currency of this CreateDirectBankTransferDto.  # noqa: E501

        The source currency  # noqa: E501

        :return: The source_currency of this CreateDirectBankTransferDto.  # noqa: E501
        :rtype: str
        """
        return self._source_currency

    @source_currency.setter
    def source_currency(self, source_currency):
        """Sets the source_currency of this CreateDirectBankTransferDto.

        The source currency  # noqa: E501

        :param source_currency: The source_currency of this CreateDirectBankTransferDto.  # noqa: E501
        :type: str
        """
        if source_currency is None:
            raise ValueError("Invalid value for `source_currency`, must not be `None`")  # noqa: E501

        self._source_currency = source_currency

    @property
    def amount(self):
        """Gets the amount of this CreateDirectBankTransferDto.  # noqa: E501

        The amount to transfer  # noqa: E501

        :return: The amount of this CreateDirectBankTransferDto.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateDirectBankTransferDto.

        The amount to transfer  # noqa: E501

        :param amount: The amount of this CreateDirectBankTransferDto.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def wire_message(self):
        """Gets the wire_message of this CreateDirectBankTransferDto.  # noqa: E501

        Wire transfer message  # noqa: E501

        :return: The wire_message of this CreateDirectBankTransferDto.  # noqa: E501
        :rtype: str
        """
        return self._wire_message

    @wire_message.setter
    def wire_message(self, wire_message):
        """Sets the wire_message of this CreateDirectBankTransferDto.

        Wire transfer message  # noqa: E501

        :param wire_message: The wire_message of this CreateDirectBankTransferDto.  # noqa: E501
        :type: str
        """

        self._wire_message = wire_message

    @property
    def sepa_reference(self):
        """Gets the sepa_reference of this CreateDirectBankTransferDto.  # noqa: E501

        SEPA transfer reference  # noqa: E501

        :return: The sepa_reference of this CreateDirectBankTransferDto.  # noqa: E501
        :rtype: str
        """
        return self._sepa_reference

    @sepa_reference.setter
    def sepa_reference(self, sepa_reference):
        """Sets the sepa_reference of this CreateDirectBankTransferDto.

        SEPA transfer reference  # noqa: E501

        :param sepa_reference: The sepa_reference of this CreateDirectBankTransferDto.  # noqa: E501
        :type: str
        """

        self._sepa_reference = sepa_reference

    @property
    def ach_reference(self):
        """Gets the ach_reference of this CreateDirectBankTransferDto.  # noqa: E501

        ACH transfer reference  # noqa: E501

        :return: The ach_reference of this CreateDirectBankTransferDto.  # noqa: E501
        :rtype: str
        """
        return self._ach_reference

    @ach_reference.setter
    def ach_reference(self, ach_reference):
        """Sets the ach_reference of this CreateDirectBankTransferDto.

        ACH transfer reference  # noqa: E501

        :param ach_reference: The ach_reference of this CreateDirectBankTransferDto.  # noqa: E501
        :type: str
        """

        self._ach_reference = ach_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateDirectBankTransferDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDirectBankTransferDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
