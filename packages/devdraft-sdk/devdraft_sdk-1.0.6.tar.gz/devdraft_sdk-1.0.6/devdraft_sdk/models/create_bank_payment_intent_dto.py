# coding: utf-8

"""
    Devdraft Payment & Business Management API

     A comprehensive payment processing and business management API that enables seamless integration of cryptocurrency and traditional payment methods.       # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateBankPaymentIntentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_payment_rail': 'AllOfCreateBankPaymentIntentDtoSourcePaymentRail',
        'source_currency': 'AllOfCreateBankPaymentIntentDtoSourceCurrency',
        'destination_currency': 'AllOfCreateBankPaymentIntentDtoDestinationCurrency',
        'destination_network': 'AllOfCreateBankPaymentIntentDtoDestinationNetwork',
        'destination_address': 'str',
        'amount': 'str',
        'customer_first_name': 'str',
        'customer_last_name': 'str',
        'customer_email': 'str',
        'customer_address': 'str',
        'customer_country': 'str',
        'customer_country_iso': 'str',
        'customer_province': 'str',
        'customer_province_iso': 'str',
        'phone_number': 'str',
        'wire_message': 'str',
        'sepa_reference': 'str',
        'ach_reference': 'str'
    }

    attribute_map = {
        'source_payment_rail': 'sourcePaymentRail',
        'source_currency': 'sourceCurrency',
        'destination_currency': 'destinationCurrency',
        'destination_network': 'destinationNetwork',
        'destination_address': 'destinationAddress',
        'amount': 'amount',
        'customer_first_name': 'customer_first_name',
        'customer_last_name': 'customer_last_name',
        'customer_email': 'customer_email',
        'customer_address': 'customer_address',
        'customer_country': 'customer_country',
        'customer_country_iso': 'customer_countryISO',
        'customer_province': 'customer_province',
        'customer_province_iso': 'customer_provinceISO',
        'phone_number': 'phoneNumber',
        'wire_message': 'wire_message',
        'sepa_reference': 'sepa_reference',
        'ach_reference': 'ach_reference'
    }

    def __init__(self, source_payment_rail=None, source_currency=None, destination_currency=None, destination_network=None, destination_address=None, amount=None, customer_first_name=None, customer_last_name=None, customer_email=None, customer_address=None, customer_country=None, customer_country_iso=None, customer_province=None, customer_province_iso=None, phone_number=None, wire_message=None, sepa_reference=None, ach_reference=None):  # noqa: E501
        """CreateBankPaymentIntentDto - a model defined in Swagger"""  # noqa: E501
        self._source_payment_rail = None
        self._source_currency = None
        self._destination_currency = None
        self._destination_network = None
        self._destination_address = None
        self._amount = None
        self._customer_first_name = None
        self._customer_last_name = None
        self._customer_email = None
        self._customer_address = None
        self._customer_country = None
        self._customer_country_iso = None
        self._customer_province = None
        self._customer_province_iso = None
        self._phone_number = None
        self._wire_message = None
        self._sepa_reference = None
        self._ach_reference = None
        self.discriminator = None
        self.source_payment_rail = source_payment_rail
        self.source_currency = source_currency
        self.destination_currency = destination_currency
        self.destination_network = destination_network
        if destination_address is not None:
            self.destination_address = destination_address
        if amount is not None:
            self.amount = amount
        if customer_first_name is not None:
            self.customer_first_name = customer_first_name
        if customer_last_name is not None:
            self.customer_last_name = customer_last_name
        if customer_email is not None:
            self.customer_email = customer_email
        if customer_address is not None:
            self.customer_address = customer_address
        if customer_country is not None:
            self.customer_country = customer_country
        if customer_country_iso is not None:
            self.customer_country_iso = customer_country_iso
        if customer_province is not None:
            self.customer_province = customer_province
        if customer_province_iso is not None:
            self.customer_province_iso = customer_province_iso
        if phone_number is not None:
            self.phone_number = phone_number
        if wire_message is not None:
            self.wire_message = wire_message
        if sepa_reference is not None:
            self.sepa_reference = sepa_reference
        if ach_reference is not None:
            self.ach_reference = ach_reference

    @property
    def source_payment_rail(self):
        """Gets the source_payment_rail of this CreateBankPaymentIntentDto.  # noqa: E501

        The banking payment method to use for the transfer. Determines processing time and fees.  # noqa: E501

        :return: The source_payment_rail of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: AllOfCreateBankPaymentIntentDtoSourcePaymentRail
        """
        return self._source_payment_rail

    @source_payment_rail.setter
    def source_payment_rail(self, source_payment_rail):
        """Sets the source_payment_rail of this CreateBankPaymentIntentDto.

        The banking payment method to use for the transfer. Determines processing time and fees.  # noqa: E501

        :param source_payment_rail: The source_payment_rail of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: AllOfCreateBankPaymentIntentDtoSourcePaymentRail
        """
        if source_payment_rail is None:
            raise ValueError("Invalid value for `source_payment_rail`, must not be `None`")  # noqa: E501

        self._source_payment_rail = source_payment_rail

    @property
    def source_currency(self):
        """Gets the source_currency of this CreateBankPaymentIntentDto.  # noqa: E501

        The fiat currency to convert FROM. Must match the currency of the source payment rail.  # noqa: E501

        :return: The source_currency of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: AllOfCreateBankPaymentIntentDtoSourceCurrency
        """
        return self._source_currency

    @source_currency.setter
    def source_currency(self, source_currency):
        """Sets the source_currency of this CreateBankPaymentIntentDto.

        The fiat currency to convert FROM. Must match the currency of the source payment rail.  # noqa: E501

        :param source_currency: The source_currency of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: AllOfCreateBankPaymentIntentDtoSourceCurrency
        """
        if source_currency is None:
            raise ValueError("Invalid value for `source_currency`, must not be `None`")  # noqa: E501

        self._source_currency = source_currency

    @property
    def destination_currency(self):
        """Gets the destination_currency of this CreateBankPaymentIntentDto.  # noqa: E501

        The stablecoin currency to convert TO. The customer will receive this currency.  # noqa: E501

        :return: The destination_currency of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: AllOfCreateBankPaymentIntentDtoDestinationCurrency
        """
        return self._destination_currency

    @destination_currency.setter
    def destination_currency(self, destination_currency):
        """Sets the destination_currency of this CreateBankPaymentIntentDto.

        The stablecoin currency to convert TO. The customer will receive this currency.  # noqa: E501

        :param destination_currency: The destination_currency of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: AllOfCreateBankPaymentIntentDtoDestinationCurrency
        """
        if destination_currency is None:
            raise ValueError("Invalid value for `destination_currency`, must not be `None`")  # noqa: E501

        self._destination_currency = destination_currency

    @property
    def destination_network(self):
        """Gets the destination_network of this CreateBankPaymentIntentDto.  # noqa: E501

        The blockchain network where the stablecoin will be delivered. Must support the destination currency.  # noqa: E501

        :return: The destination_network of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: AllOfCreateBankPaymentIntentDtoDestinationNetwork
        """
        return self._destination_network

    @destination_network.setter
    def destination_network(self, destination_network):
        """Sets the destination_network of this CreateBankPaymentIntentDto.

        The blockchain network where the stablecoin will be delivered. Must support the destination currency.  # noqa: E501

        :param destination_network: The destination_network of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: AllOfCreateBankPaymentIntentDtoDestinationNetwork
        """
        if destination_network is None:
            raise ValueError("Invalid value for `destination_network`, must not be `None`")  # noqa: E501

        self._destination_network = destination_network

    @property
    def destination_address(self):
        """Gets the destination_address of this CreateBankPaymentIntentDto.  # noqa: E501

        Destination wallet address. Supports Ethereum (0x...) and Solana address formats.  # noqa: E501

        :return: The destination_address of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this CreateBankPaymentIntentDto.

        Destination wallet address. Supports Ethereum (0x...) and Solana address formats.  # noqa: E501

        :param destination_address: The destination_address of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._destination_address = destination_address

    @property
    def amount(self):
        """Gets the amount of this CreateBankPaymentIntentDto.  # noqa: E501

        Payment amount (optional for flexible amount)  # noqa: E501

        :return: The amount of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateBankPaymentIntentDto.

        Payment amount (optional for flexible amount)  # noqa: E501

        :param amount: The amount of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def customer_first_name(self):
        """Gets the customer_first_name of this CreateBankPaymentIntentDto.  # noqa: E501

        Customer first name  # noqa: E501

        :return: The customer_first_name of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_first_name

    @customer_first_name.setter
    def customer_first_name(self, customer_first_name):
        """Sets the customer_first_name of this CreateBankPaymentIntentDto.

        Customer first name  # noqa: E501

        :param customer_first_name: The customer_first_name of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._customer_first_name = customer_first_name

    @property
    def customer_last_name(self):
        """Gets the customer_last_name of this CreateBankPaymentIntentDto.  # noqa: E501

        Customer last name  # noqa: E501

        :return: The customer_last_name of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_last_name

    @customer_last_name.setter
    def customer_last_name(self, customer_last_name):
        """Sets the customer_last_name of this CreateBankPaymentIntentDto.

        Customer last name  # noqa: E501

        :param customer_last_name: The customer_last_name of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._customer_last_name = customer_last_name

    @property
    def customer_email(self):
        """Gets the customer_email of this CreateBankPaymentIntentDto.  # noqa: E501

        Customer email address  # noqa: E501

        :return: The customer_email of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this CreateBankPaymentIntentDto.

        Customer email address  # noqa: E501

        :param customer_email: The customer_email of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._customer_email = customer_email

    @property
    def customer_address(self):
        """Gets the customer_address of this CreateBankPaymentIntentDto.  # noqa: E501

        Customer address  # noqa: E501

        :return: The customer_address of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_address

    @customer_address.setter
    def customer_address(self, customer_address):
        """Sets the customer_address of this CreateBankPaymentIntentDto.

        Customer address  # noqa: E501

        :param customer_address: The customer_address of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._customer_address = customer_address

    @property
    def customer_country(self):
        """Gets the customer_country of this CreateBankPaymentIntentDto.  # noqa: E501

        Customer country  # noqa: E501

        :return: The customer_country of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_country

    @customer_country.setter
    def customer_country(self, customer_country):
        """Sets the customer_country of this CreateBankPaymentIntentDto.

        Customer country  # noqa: E501

        :param customer_country: The customer_country of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._customer_country = customer_country

    @property
    def customer_country_iso(self):
        """Gets the customer_country_iso of this CreateBankPaymentIntentDto.  # noqa: E501

        Customer country ISO code  # noqa: E501

        :return: The customer_country_iso of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_country_iso

    @customer_country_iso.setter
    def customer_country_iso(self, customer_country_iso):
        """Sets the customer_country_iso of this CreateBankPaymentIntentDto.

        Customer country ISO code  # noqa: E501

        :param customer_country_iso: The customer_country_iso of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._customer_country_iso = customer_country_iso

    @property
    def customer_province(self):
        """Gets the customer_province of this CreateBankPaymentIntentDto.  # noqa: E501

        Customer province/state  # noqa: E501

        :return: The customer_province of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_province

    @customer_province.setter
    def customer_province(self, customer_province):
        """Sets the customer_province of this CreateBankPaymentIntentDto.

        Customer province/state  # noqa: E501

        :param customer_province: The customer_province of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._customer_province = customer_province

    @property
    def customer_province_iso(self):
        """Gets the customer_province_iso of this CreateBankPaymentIntentDto.  # noqa: E501

        Customer province/state ISO code  # noqa: E501

        :return: The customer_province_iso of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._customer_province_iso

    @customer_province_iso.setter
    def customer_province_iso(self, customer_province_iso):
        """Sets the customer_province_iso of this CreateBankPaymentIntentDto.

        Customer province/state ISO code  # noqa: E501

        :param customer_province_iso: The customer_province_iso of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._customer_province_iso = customer_province_iso

    @property
    def phone_number(self):
        """Gets the phone_number of this CreateBankPaymentIntentDto.  # noqa: E501

        Customer phone number  # noqa: E501

        :return: The phone_number of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CreateBankPaymentIntentDto.

        Customer phone number  # noqa: E501

        :param phone_number: The phone_number of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def wire_message(self):
        """Gets the wire_message of this CreateBankPaymentIntentDto.  # noqa: E501

        Wire transfer message (for WIRE transfers)  # noqa: E501

        :return: The wire_message of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._wire_message

    @wire_message.setter
    def wire_message(self, wire_message):
        """Sets the wire_message of this CreateBankPaymentIntentDto.

        Wire transfer message (for WIRE transfers)  # noqa: E501

        :param wire_message: The wire_message of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._wire_message = wire_message

    @property
    def sepa_reference(self):
        """Gets the sepa_reference of this CreateBankPaymentIntentDto.  # noqa: E501

        SEPA reference (for SEPA transfers)  # noqa: E501

        :return: The sepa_reference of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._sepa_reference

    @sepa_reference.setter
    def sepa_reference(self, sepa_reference):
        """Sets the sepa_reference of this CreateBankPaymentIntentDto.

        SEPA reference (for SEPA transfers)  # noqa: E501

        :param sepa_reference: The sepa_reference of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._sepa_reference = sepa_reference

    @property
    def ach_reference(self):
        """Gets the ach_reference of this CreateBankPaymentIntentDto.  # noqa: E501

        ACH reference (for ACH transfers)  # noqa: E501

        :return: The ach_reference of this CreateBankPaymentIntentDto.  # noqa: E501
        :rtype: str
        """
        return self._ach_reference

    @ach_reference.setter
    def ach_reference(self, ach_reference):
        """Sets the ach_reference of this CreateBankPaymentIntentDto.

        ACH reference (for ACH transfers)  # noqa: E501

        :param ach_reference: The ach_reference of this CreateBankPaymentIntentDto.  # noqa: E501
        :type: str
        """

        self._ach_reference = ach_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBankPaymentIntentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBankPaymentIntentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
