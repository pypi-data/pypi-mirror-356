name: Release Pipeline

on:
  release:
    types: [published]
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  # Quality Gates - Run on all events
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for setuptools_scm

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run tests
        run: uv run pytest tests/test_migadu_mcp.py

      - name: Run linting
        run: uv run ruff check migadu_mcp/ tests/

      - name: Run type checking
        run: uv run mypy migadu_mcp/

      - name: Run security scan
        run: uv run bandit -r migadu_mcp/

  # Release and Publish - Only on release events
  release-publish:
    name: Release and Publish
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: quality-gates
    environment: pypi
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --group dev

      - name: Build package
        run: uv build

      - name: Verify build
        run: |
          ls -la dist/
          echo "Package built successfully"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

      - name: Create git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ github.event.release.tag_name }} || echo "Tag already exists"
          git push origin ${{ github.event.release.tag_name }} || echo "Tag already pushed"

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Release failed - cleaning up"
          gh release delete ${{ github.event.release.tag_name }} --yes || echo "Release already deleted"
          git push --delete origin ${{ github.event.release.tag_name }} || echo "Tag already deleted"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}