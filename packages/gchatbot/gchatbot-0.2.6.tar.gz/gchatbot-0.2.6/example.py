# main.py
import os
import time
import asyncio
from typing import Any, Dict
from fastapi import FastAPI, Request
from gchatbot import GChatBot, ExtractedEventData, EventPayload, ProgressiveResponse, ResponseType

# Certifique-se de ter um arquivo 'service.json' ou defina a vari√°vel de ambiente.
SERVICE_ACCOUNT_FILE: str = os.environ.get("SERVICE_ACCOUNT_FILE", "service.json")

class BotExemplo(GChatBot):
    """
    Bot de exemplo que demonstra m√©todos s√≠ncronos e ass√≠ncronos.
    
    Este exemplo mostra como voc√™ pode misturar m√©todos sync e async
    na mesma classe, e a biblioteca automaticamente detecta e trata
    cada um de forma apropriada.
    
    Tamb√©m demonstra respostas progressivas (progressive fallback).
    """
    def __init__(self) -> None:
        super().__init__(
            botName="Bot Exemplo H√≠brido",
            serviceAccountFile=SERVICE_ACCOUNT_FILE,
            syncTimeout=4.0  # Responde em at√© 4s ou muda para modo ass√≠ncrono.
        )

    async def _processSlashCommand(self, command: str, arguments: str, extractedData: ExtractedEventData, eventData: EventPayload) -> ResponseType:
        """
        M√âTODO ASS√çNCRONO - Processa comandos de barra usando async/await.
        
        Este m√©todo √© async, ent√£o pode usar await para opera√ß√µes n√£o-bloqueantes.
        
        Args:
            command: Nome do comando sem a barra (/)
            arguments: Argumentos passados ap√≥s o comando
            extractedData: Dados estruturados extra√≠dos do evento
            eventData: Payload original do evento do Google Chat
            
        Returns:
            str: Resposta simples
            OU Tuple[str, Callable]: Resposta progressiva (r√°pida + detalhada)
        """
        user: str = extractedData.get('userDisplayName', 'Usu√°rio')
        userChatId: str = extractedData.get('userGoogleChatId', 'Unknown ID')
        
        if command == "lento":
            # Opera√ß√£o ass√≠ncrona que demora mais que o syncTimeout
            await asyncio.sleep(6)
            return f"‚è±Ô∏è Comando /lento ASYNC executado para {user} (ID: {userChatId})! Demorou 6 segundos de forma n√£o-bloqueante."
        
        elif command == "rapido":
            # Opera√ß√£o ass√≠ncrona r√°pida
            await asyncio.sleep(1)
            return f"‚ö° Comando /rapido ASYNC executado rapidamente para {user}!"
        
        elif command == "api":
            # Simula chamada para API externa ass√≠ncrona
            await asyncio.sleep(3)
            return f"üåê Chamada ASYNC para API externa conclu√≠da para {user}!"
        
        elif command == "concorrente":
            # Demonstra opera√ß√µes concorrentes
            tasks: list[asyncio.Task[str]] = [
                asyncio.create_task(self._operacaoAsync(f"Task {i}", 1)) 
                for i in range(3)
            ]
            resultados: list[str] = await asyncio.gather(*tasks)
            return f"üöÄ Opera√ß√µes concorrentes para {user}:\n" + "\n".join(resultados)
        
        elif command == "progressivo":
            # üÜï Demonstra resposta progressiva ASS√çNCRONA
            quickResponse = f"‚ö° Iniciando an√°lise para {user}..."
            
            async def detailedResponse() -> str:
                await asyncio.sleep(5)  # Simula processamento longo
                dados = await self._analisarDadosAsync()
                return f"üìä An√°lise completa para {user}!\n\nResultados:\n{dados}"
            
            return (quickResponse, detailedResponse)
        
        elif command == "relatorio":
            # üÜï Demonstra resposta progressiva com processamento complexo
            quickResponse = f"üìã Gerando relat√≥rio para {user}..."
            
            async def detailedResponse() -> str:
                # Simula v√°rias etapas de processamento
                await asyncio.sleep(2)  # Coleta de dados
                await asyncio.sleep(3)  # Processamento
                await asyncio.sleep(2)  # Formata√ß√£o
                return f"‚úÖ Relat√≥rio completo gerado para {user}!\n\nüìà Dados processados\nüìä Gr√°ficos gerados\nüìÑ Documento finalizado"
            
            return (quickResponse, detailedResponse)
        
        elif command == "info":
            # üÜï Demonstra uso do userGoogleChatId
            userEmail: str = extractedData.get('userEmail', 'Unknown Email')
            spaceName: str = extractedData.get('spaceName', 'Unknown Space')
            isDM: bool = extractedData.get('isDirectMessageEvent', False)
            
            return f"""‚ÑπÔ∏è **Informa√ß√µes do Usu√°rio e Contexto:**

üë§ **Usu√°rio:**
‚Ä¢ Nome: {user}
‚Ä¢ Email: {userEmail}
‚Ä¢ Google Chat ID: {userChatId}

üè† **Espa√ßo:**
‚Ä¢ Nome: {spaceName}
‚Ä¢ Tipo: {'Mensagem Direta (DM)' if isDM else 'Sala/Grupo'}

üí° **Dica:** O Google Chat ID √© √∫til para men√ß√µes program√°ticas e identifica√ß√£o √∫nica!"""
        
        else:
            await asyncio.sleep(0.5)
            return f"‚úÖ Comando ASYNC /{command} executado para {user}."

    def _processMessage(self, text: str, extractedData: ExtractedEventData, eventData: EventPayload) -> ResponseType:
        """
        M√âTODO S√çNCRONO - Processa mensagens usando m√©todos tradicionais.
        
        Este m√©todo √© s√≠ncrono (sem async), ent√£o usa time.sleep() e 
        opera√ß√µes bloqueantes normais.
        
        Args:
            text: Texto processado da mensagem
            extractedData: Dados estruturados extra√≠dos do evento
            eventData: Payload original do evento do Google Chat
            
        Returns:
            str: Resposta simples
            OU Tuple[str, Callable]: Resposta progressiva (r√°pida + detalhada)
        """
        user: str = extractedData.get('userDisplayName', 'Usu√°rio')
        userChatId: str = extractedData.get('userGoogleChatId', 'Unknown ID')
        
        if "demorado" in text.lower():
            # Opera√ß√£o s√≠ncrona que bloqueia a thread
            time.sleep(7)
            return f"üïê Voc√™ pediu algo demorado, {user} (ID: {userChatId}). Processamento S√çNCRONO conclu√≠do em 7 segundos!"
        
        elif "progressivo" in text.lower():
            # üÜï Demonstra resposta progressiva S√çNCRONA
            quickResponse = f"‚ö° Recebido! Processando sua solicita√ß√£o, {user}..."
            
            def detailedResponse() -> str:
                time.sleep(4)  # Simula processamento
                resultado = self._processarDadosSync()
                return f"üìã An√°lise completa conclu√≠da para {user}!\n\nResultados: {resultado}"
            
            return (quickResponse, detailedResponse)
        
        elif "analise" in text.lower():
            # üÜï Outro exemplo de resposta progressiva s√≠ncrona
            quickResponse = f"üîç Iniciando an√°lise para {user}..."
            
            def detailedResponse() -> str:
                time.sleep(3)  # Processamento
                return f"üìä An√°lise detalhada conclu√≠da para {user}!\n\n‚úÖ Dados validados\nüìà Tend√™ncias identificadas\nüéØ Recomenda√ß√µes geradas"
            
            return (quickResponse, detailedResponse)
        
        elif "meusdados" in text.lower():
            # üÜï Demonstra acesso aos dados do usu√°rio incluindo o Google Chat ID
            userEmail: str = extractedData.get('userEmail', 'Unknown Email')
            spaceName: str = extractedData.get('spaceName', 'Unknown Space')
            isDM: bool = extractedData.get('isDirectMessageEvent', False)
            
            return f"""üìã **Seus Dados:**

üë§ **Identifica√ß√£o:**
‚Ä¢ Nome: {user}
‚Ä¢ Email: {userEmail}
‚Ä¢ Google Chat ID: {userChatId}

üè† **Contexto Atual:**
‚Ä¢ Espa√ßo: {spaceName}
‚Ä¢ Tipo: {'Mensagem Direta' if isDM else 'Sala/Grupo'}

üîç **Texto Original:** "{extractedData.get('rawText', 'N/A')}"
üìù **Texto Processado:** "{extractedData.get('processedText', 'N/A')}"

üí° O Google Chat ID √© √∫nico e pode ser usado para men√ß√µes program√°ticas!"""
        
        elif "calcular" in text.lower():
            # Processamento s√≠ncrono intensivo
            time.sleep(2)
            resultado: int = sum(range(1000000))
            return f"üßÆ C√°lculo S√çNCRONO conclu√≠do para {user}: {resultado}"
        
        elif "processar" in text.lower():
            # Simula processamento de dados s√≠ncrono
            time.sleep(3)
            return f"üìä Dados processados de forma S√çNCRONA para {user}!"
        
        elif "sync" in text.lower():
            # Opera√ß√£o s√≠ncrona r√°pida
            time.sleep(1)
            return f"‚ö° Processamento S√çNCRONO r√°pido para {user}!"
        
        else:
            # Mensagem padr√£o s√≠ncrona
            return f"üí¨ Mensagem processada de forma S√çNCRONA, {user}: '{text}'"

    # --- M√©todos auxiliares ass√≠ncronos ---
    
    async def _operacaoAsync(self, nome: str, duracao: int) -> str:
        """M√©todo auxiliar ass√≠ncrono."""
        await asyncio.sleep(duracao)
        return f"‚úì {nome} conclu√≠da ASYNC em {duracao}s"
    
    async def _analisarDadosAsync(self) -> str:
        """Simula an√°lise de dados ass√≠ncrona."""
        await asyncio.sleep(2)
        return "‚Ä¢ Padr√µes identificados\n‚Ä¢ Anomalias detectadas\n‚Ä¢ Relat√≥rio gerado"
    
    def _processarDadosSync(self) -> str:
        """Simula processamento de dados s√≠ncrono."""
        time.sleep(2)
        return "Dados processados com sucesso"

# --- Configura√ß√£o do FastAPI ---
app: FastAPI = FastAPI(title="Google Chat Bot - Exemplo H√≠brido")
bot: BotExemplo = BotExemplo()

@app.post("/google-chat-webhook")
async def handleEvent(request: Request) -> Any:
    """
    Ponto de entrada para todos os eventos do Google Chat.
    
    Args:
        request: Requisi√ß√£o HTTP do FastAPI contendo o payload do evento
        
    Returns:
        Resposta JSON para o Google Chat
    """
    return await bot.handleRequest(request)

@app.get("/")
def home() -> Dict[str, Any]:
    """
    Endpoint para verifica√ß√£o de sa√∫de.
    
    Returns:
        Dicion√°rio com informa√ß√µes sobre o bot e exemplos de uso
    """
    return {
        "status": "ativo", 
        "bot_name": bot.botName, 
        "hybrid_support": True,
        "comandos_async": [
            "/lento - Opera√ß√£o ass√≠ncrona longa (6s)",
            "/rapido - Opera√ß√£o ass√≠ncrona r√°pida (1s)", 
            "/api - Simula chamada API ass√≠ncrona (3s)",
            "/concorrente - Opera√ß√µes paralelas ass√≠ncronas",
            "/progressivo - üÜï Resposta progressiva async: r√°pida + detalhada",
            "/relatorio - üÜï Resposta progressiva async com m√∫ltiplas etapas",
            "/info - üÜï Mostra informa√ß√µes do usu√°rio incluindo Google Chat ID"
        ],
        "mensagens_sync": [
            "Envie 'demorado' para teste s√≠ncrono longo (7s)",
            "Envie 'calcular' para c√°lculo s√≠ncrono (2s)",
            "Envie 'processar' para processamento s√≠ncrono (3s)",
            "Envie 'sync' para teste s√≠ncrono r√°pido (1s)",
            "Envie 'progressivo' - üÜï Resposta progressiva sync",
            "Envie 'analise' - üÜï Resposta progressiva sync detalhada",
            "Envie 'meusdados' - üÜï Mostra seus dados incluindo Google Chat ID"
        ],
        "observacao": "Comandos de barra s√£o ASYNC, mensagens normais s√£o SYNC",
        "nova_funcionalidade": "üÜï Respostas Progressivas: Resposta r√°pida imediata + atualiza√ß√£o detalhada autom√°tica"
    }

@app.get("/test")
def testEndpoint() -> Dict[str, Any]:
    """
    Endpoint de teste.
    
    Returns:
        Dicion√°rio com informa√ß√µes sobre o status do servidor
    """
    return {
        "message": "Servidor funcionando!", 
        "slash_commands": "async",
        "messages": "sync",
        "hybrid_mode": True,
        "progressive_responses": True
    }

# Para executar localmente: uvicorn example:app --reload --port 8080