[tool.poetry]
name = "mira-omf"
version = "3.3.1"
description = "API Library for Open Mining Format"
license = "MIT"
authors = [
    "Mira Geoscience <support@mirageoscience.com>",
    "Global Mining Guidelines Group <info@gmggroup.org>",
]
maintainers = ["Dominique Fournier <dominiquef@mirageoscience.com>"]
repository = "https://github.com/MiraGeoscience/omf"
#documentation  = "https://mirageoscience-omf.readthedocs-hosted.com/"
homepage = "https://www.mirageoscience.com/mining-industry-software/python-integration/"

readme = "README.rst"
keywords = ["geology", "geophysics", "earth sciences"]
classifiers = [
    'Development Status :: 4 - Beta',
    'Programming Language :: Python',
    'Topic :: Scientific/Engineering',
    'Topic :: Scientific/Engineering :: Mathematics',
    'Topic :: Scientific/Engineering :: Physics',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: POSIX',
    'Operating System :: Unix',
    'Operating System :: MacOS',
    'Natural Language :: English',
]

packages = [
    { include = "omf" },
]

include = [
    { path = "COPYING" },
    { path = "COPYING.LESSER" },
    { path = "LICENSE" },
    { path = "README.rst" },
    { path = "THIRD_PARTY_SOFTWARE.rst" },
    { path = "docs/**/THIRD_PARTY_SOFTWARE.rst" },
]

[tool.poetry.scripts]
geoh5_to_omf = 'omf.scripts.geoh5_to_omf:main'
omf_to_geoh5 = 'omf.scripts.omf_to_geoh5:main'

[tool.poetry.dependencies]
python = "^3.10"

numpy = "~1.26.0"  # also in geoh5py
properties = "0.6.*"
pypng = "^0.20220715"
six = "^1.16"
vectormath = "0.2.*"

## dependencies from Git repositories
#------------------------------------
geoh5py = {version = ">=0.11.0a3, <0.12.dev", allow-prereleases = true}
#geoh5py = {git = "https://github.com/MiraGeoscience/geoh5py.git", rev = "release/0.11.0"}
#geoh5py = {path = "../geoh5py", develop = true}

[tool.poetry.group.dev.dependencies]
Pygments = "*"
pylint = "*"
pytest = "*"
pytest-cov = "*"
sphinx = "^5.3"
pyyaml = '*'
jinja2 = '*'
packaging = '*'
tomli = "*"  # for tests only


[[tool.poetry.source]]
name = "public"
url = "https://mirageoscienceltd.jfrog.io/artifactory/api/pypi/public-pypi-dev/simple"
priority = "supplemental"


[[tool.poetry.source]]
name = "test"
url = "https://mirageoscienceltd.jfrog.io/artifactory/api/pypi/test-pypi/simple"
priority = "supplemental"

[tool.ruff]
target-version = "py310"

exclude = [
    "docs/*",
    # skip source files from upstream repo
    "omf/fileio/fileio.py",
    "omf/fileio/utils.py",
    "omf/base.py",
    "omf/data.py",
    "omf/lineset.py",
    "omf/pointset.py",
    "omf/serializers.py",
    "omf/surface.py",
    "omf/texture.py",
    "omf/volume.py",
]

[tool.ruff.lint]
ignore = [
    "B028",  # no-explicit-stacklevel for warnings.warn()
    "E501",  # line-too-long - code is reformatted (do not care about comments and docstring)
    "F401",  # unsused-import - covered by pycln
    "RUF005",  # collection-literal-concatenation - wrong suggestion with numpy arrays
    "RUF012", # TODO
]
select = [
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "B006",  # Do not use mutable data structures for argument defaults
    "B9",  # flake8-bugbear opiniated warnings
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C9",  # mccabe
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "RUF",  # ruff rules
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.format]
# default formatting is just fine

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true

plugins = [
#    "numpy.typing.mypy_plugin"
]

[tool.pytest.ini_options]

[tool.coverage.run]
branch = true
source = ["mira_omf"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]

fail_under = 80

[tool.coverage.html]
skip_empty = true
skip_covered = true

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"
