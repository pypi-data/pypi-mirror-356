import sqlite3, datemath, random, datetime

server: str = None
server_last_error: str = None
Numdata: str = ('778623', '777777')

def available_value(article: str) -> int:
    return 6

def virus_detected() -> str:
    return "mnt-206-pc02"

def virus_status() -> str:
    return '–æ–±–µ–∑–≤—Ä–µ–∂–µ–Ω'

def connect(_server: str) -> None:
    global server
    server = _server
    db = sqlite3.connect(f'{_server}.db')
    with open(f"{_server}.db", 'w') as _:pass  
    db.execute(f'CREATE TABLE IF NOT EXISTS {_server}(username text, password text, login_time text, isVIP text, tgID text)')
    [try_connect_to(*i) for i in [("GorelovIV", "BadName478!", '0', True), ("Testov5ll", "123456!", '0')]]

def try_connect_to(user_name: str, password: str, login_time: str, admin_rights: bool = False, tg_id: str = "0") -> None:
    db = sqlite3.connect(f'{server}.db')  
    cursor =  db.cursor()
    cursor.execute("INSERT INTO data (username, password, login_time, isVIP, tgID) VALUES(?, ?, ?, ?, ?)", [user_name, password, login_time, "1" if admin_rights else "0", tg_id])
    db.commit()

def request_from_server(param: str, param_name: str, to_return: str):
    db = sqlite3.connect(f'{server}.db')  
    cursor =  db.cursor()
    return cursor.execute(f"SELECT {to_return} FROM data WHERE {param_name} = ?", [param]).fetchone()

def request_to_server(param: str, param_name: str, to_change: str, to_change_name: str) -> None:
    db = sqlite3.connect(f'{server}.db')  
    cursor =  db.cursor()
    cursor.execute(f"UPDATE {server} SET {to_change_name} =  '{to_change}' WHERE {param_name} = (?)",(param, ))
    db.commit()

def request_4_structure(struct: str) -> list:
    return sqlite3.connect(f'{server}.db').cursor().execute(f"SELECT {struct} FROM {server}").fetchall()

def kaspersky_check() -> str:
    global server_last_error
    server_last_error = datemath.datemath("now+10S+3H").strftime("%H:%M:%S")
    return '–í—Ä–µ–¥–æ–Ω–æ—Å—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.'

def errors(isCriticalRequest: bool = False) -> list:
    return [f'üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê \n–•–æ—Å—Ç: c.citrix, 23.210.126.114\n–¢—Ä–∏–≥–≥–µ—Ä: CPU load > 90% –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n–í—Ä–µ–º—è: {datemath.datemath("now-3d").strftime("%d/%m/%Y %H:%M:%S")}', f'‚úÖ –ü–†–û–ë–õ–ï–ú–ê –£–°–¢–†–ê–ù–ï–ù–ê\n–•–æ—Å—Ç: c.citrix, 23.210.126.114\n–¢—Ä–∏–≥–≥–µ—Ä: CPU load > 90% –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n–í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {datemath.datemath(f"now-3d+2h+15m+{random.randint(0, 59)}s").strftime("%d/%m/%Y %H:%M:%S")}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã: 2 —á–∞—Å–∞ 15 –º–∏–Ω—É—Ç', f'üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê \n–•–æ—Å—Ç: SKUD, 172.28.16.146\n–¢—Ä–∏–≥–≥–µ—Ä: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç\n–í—Ä–µ–º—è: {datemath.datemath("now-1d+2h").strftime("%d/%m/%Y %H:%M:%S")}', f'‚úÖ –ü–†–û–ë–õ–ï–ú–ê –£–°–¢–†–ê–ù–ï–ù–ê \n–•–æ—Å—Ç: SKUD, 172.28.16.146\n–¢—Ä–∏–≥–≥–µ—Ä: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç\n–í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {datemath.datemath(f"now-1d+2h+47m+{random.randint(0, 59)}s").strftime("%d/%m/%Y %H:%M:%S")}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã: 47 –º–∏–Ω—É—Ç.'] if isCriticalRequest else [f'‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï\n–•–æ—Å—Ç: spb.bank16\n–¢—Ä–∏–≥–≥–µ—Ä: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM > 80%\n–í—Ä–µ–º—è: {datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}', f'‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï\n–•–æ—Å—Ç: spb.bank_1c3\n–¢—Ä–∏–≥–≥–µ—Ä: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM > 80%\n–í—Ä–µ–º—è: {datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}', f'‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï\n–•–æ—Å—Ç: print_serv\n–¢—Ä–∏–≥–≥–µ—Ä: –ü–æ—Ç–µ—Ä—è –ø–∞–∫–µ—Ç–æ–≤ > 5% –∑–∞ 10 –º–∏–Ω—É—Ç.\n–í—Ä–µ–º—è: {datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")}'], "–º–∏–Ω—É—Ç."

def LSE() -> str:
    return server_last_error

def is_valid_article(article: str) -> bool:
    return True if article == '778623' else False

def get_data_by_article(article: str) -> str:
    match article:
        case "778623":
            return "1Ô∏è‚É£ `–°–∏–ª–∏–∫–∞–≥–µ–ª—å 60 (0.040-0.063 –º–º) –¥–ª—è –∫–æ–ª–æ–Ω–æ—á–Ω–æ–π —Ö—Ä–æ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (230-400 mesh ASTM)`\
                     \n2Ô∏è‚É£`–ù–∞–ª–∏—á–∏–µ: 5 (—Å–∫. –ö—É–∑—å–º–æ–ª–æ–≤–æ)`\
                        \n3Ô∏è‚É£`–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å : \"–•–∏–º–º–µ–¥\"`"
        case "777777":
            return f'‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: `–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ.`\n‚ÑπÔ∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫: `–û–û–û "–ê–õ–ê–†–ú"`\n‚ÑπÔ∏è –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞: `{datemath.datemath("now+5d").strftime("%d-%m-%Y")}`'
    return "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."